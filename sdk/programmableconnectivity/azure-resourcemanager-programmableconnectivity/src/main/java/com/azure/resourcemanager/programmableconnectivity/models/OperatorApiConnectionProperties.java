// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.programmableconnectivity.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Operator API Connection resource properties that cannot be updated once a resource has been created.
 */
@Fluent
public final class OperatorApiConnectionProperties implements JsonSerializable<OperatorApiConnectionProperties> {
    /*
     * Reference to the Operator API Plan Resource ID.
     */
    private String operatorApiPlanId;

    /*
     * Reference to the APC Gateway resource ID.
     */
    private String gatewayId;

    /*
     * Name of the Operator in the linked Operator API Plan belongs to.
     */
    private String operatorName;

    /*
     * The Network API for the current operator in the country/region provided in the linked Operator API Plan.
     */
    private String camaraApiName;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /*
     * The status of the OperatorApiConnection resource.
     */
    private Status status;

    /*
     * Whether the caller has accepted the Terms and Conditions of the associated Operator API Plan.
     * After creation, the planTermsAndConditionsLink property is set to the Terms and Conditions that
     * have been accepted.
     * 
     * Must be set to True, as the Terms and Conditions must be accepted.
     */
    private boolean planTermsAndConditionsAccepted;

    /*
     * Links to the Terms and Conditions of the Operator API Plan that were accepted on creation.
     */
    private List<String> planTermsAndConditionsLinks;

    /*
     * The purpose for which the Application will use the API. Max Items 1 currently as Operators do not support
     * multiple.
     */
    private List<Purpose> purposes;

    /*
     * Explanation of the reason that justifies the purpose: specifically why is the API used for the application's use
     * case.
     */
    private String purposeReason;

    /*
     * List of ways the data returned on this API is processed.
     */
    private List<DataProcessing> dataProcessingList;

    /**
     * Creates an instance of OperatorApiConnectionProperties class.
     */
    public OperatorApiConnectionProperties() {
    }

    /**
     * Get the operatorApiPlanId property: Reference to the Operator API Plan Resource ID.
     * 
     * @return the operatorApiPlanId value.
     */
    public String operatorApiPlanId() {
        return this.operatorApiPlanId;
    }

    /**
     * Set the operatorApiPlanId property: Reference to the Operator API Plan Resource ID.
     * 
     * @param operatorApiPlanId the operatorApiPlanId value to set.
     * @return the OperatorApiConnectionProperties object itself.
     */
    public OperatorApiConnectionProperties withOperatorApiPlanId(String operatorApiPlanId) {
        this.operatorApiPlanId = operatorApiPlanId;
        return this;
    }

    /**
     * Get the gatewayId property: Reference to the APC Gateway resource ID.
     * 
     * @return the gatewayId value.
     */
    public String gatewayId() {
        return this.gatewayId;
    }

    /**
     * Set the gatewayId property: Reference to the APC Gateway resource ID.
     * 
     * @param gatewayId the gatewayId value to set.
     * @return the OperatorApiConnectionProperties object itself.
     */
    public OperatorApiConnectionProperties withGatewayId(String gatewayId) {
        this.gatewayId = gatewayId;
        return this;
    }

    /**
     * Get the operatorName property: Name of the Operator in the linked Operator API Plan belongs to.
     * 
     * @return the operatorName value.
     */
    public String operatorName() {
        return this.operatorName;
    }

    /**
     * Get the camaraApiName property: The Network API for the current operator in the country/region provided in the
     * linked Operator API Plan.
     * 
     * @return the camaraApiName value.
     */
    public String camaraApiName() {
        return this.camaraApiName;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: The status of the OperatorApiConnection resource.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Get the planTermsAndConditionsAccepted property: Whether the caller has accepted the Terms and Conditions of the
     * associated Operator API Plan.
     * After creation, the planTermsAndConditionsLink property is set to the Terms and Conditions that
     * have been accepted.
     * 
     * Must be set to True, as the Terms and Conditions must be accepted.
     * 
     * @return the planTermsAndConditionsAccepted value.
     */
    public boolean planTermsAndConditionsAccepted() {
        return this.planTermsAndConditionsAccepted;
    }

    /**
     * Set the planTermsAndConditionsAccepted property: Whether the caller has accepted the Terms and Conditions of the
     * associated Operator API Plan.
     * After creation, the planTermsAndConditionsLink property is set to the Terms and Conditions that
     * have been accepted.
     * 
     * Must be set to True, as the Terms and Conditions must be accepted.
     * 
     * @param planTermsAndConditionsAccepted the planTermsAndConditionsAccepted value to set.
     * @return the OperatorApiConnectionProperties object itself.
     */
    public OperatorApiConnectionProperties withPlanTermsAndConditionsAccepted(boolean planTermsAndConditionsAccepted) {
        this.planTermsAndConditionsAccepted = planTermsAndConditionsAccepted;
        return this;
    }

    /**
     * Get the planTermsAndConditionsLinks property: Links to the Terms and Conditions of the Operator API Plan that
     * were accepted on creation.
     * 
     * @return the planTermsAndConditionsLinks value.
     */
    public List<String> planTermsAndConditionsLinks() {
        return this.planTermsAndConditionsLinks;
    }

    /**
     * Get the purposes property: The purpose for which the Application will use the API. Max Items 1 currently as
     * Operators do not support multiple.
     * 
     * @return the purposes value.
     */
    public List<Purpose> purposes() {
        return this.purposes;
    }

    /**
     * Set the purposes property: The purpose for which the Application will use the API. Max Items 1 currently as
     * Operators do not support multiple.
     * 
     * @param purposes the purposes value to set.
     * @return the OperatorApiConnectionProperties object itself.
     */
    public OperatorApiConnectionProperties withPurposes(List<Purpose> purposes) {
        this.purposes = purposes;
        return this;
    }

    /**
     * Get the purposeReason property: Explanation of the reason that justifies the purpose: specifically why is the API
     * used for the application's use case.
     * 
     * @return the purposeReason value.
     */
    public String purposeReason() {
        return this.purposeReason;
    }

    /**
     * Set the purposeReason property: Explanation of the reason that justifies the purpose: specifically why is the API
     * used for the application's use case.
     * 
     * @param purposeReason the purposeReason value to set.
     * @return the OperatorApiConnectionProperties object itself.
     */
    public OperatorApiConnectionProperties withPurposeReason(String purposeReason) {
        this.purposeReason = purposeReason;
        return this;
    }

    /**
     * Get the dataProcessingList property: List of ways the data returned on this API is processed.
     * 
     * @return the dataProcessingList value.
     */
    public List<DataProcessing> dataProcessingList() {
        return this.dataProcessingList;
    }

    /**
     * Set the dataProcessingList property: List of ways the data returned on this API is processed.
     * 
     * @param dataProcessingList the dataProcessingList value to set.
     * @return the OperatorApiConnectionProperties object itself.
     */
    public OperatorApiConnectionProperties withDataProcessingList(List<DataProcessing> dataProcessingList) {
        this.dataProcessingList = dataProcessingList;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("operatorApiPlanId", this.operatorApiPlanId);
        jsonWriter.writeStringField("gatewayId", this.gatewayId);
        jsonWriter.writeBooleanField("planTermsAndConditionsAccepted", this.planTermsAndConditionsAccepted);
        jsonWriter.writeArrayField("purposes", this.purposes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("purposeReason", this.purposeReason);
        jsonWriter.writeArrayField("dataProcessingList", this.dataProcessingList,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperatorApiConnectionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperatorApiConnectionProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OperatorApiConnectionProperties.
     */
    public static OperatorApiConnectionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperatorApiConnectionProperties deserializedOperatorApiConnectionProperties
                = new OperatorApiConnectionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operatorApiPlanId".equals(fieldName)) {
                    deserializedOperatorApiConnectionProperties.operatorApiPlanId = reader.getString();
                } else if ("gatewayId".equals(fieldName)) {
                    deserializedOperatorApiConnectionProperties.gatewayId = reader.getString();
                } else if ("planTermsAndConditionsAccepted".equals(fieldName)) {
                    deserializedOperatorApiConnectionProperties.planTermsAndConditionsAccepted = reader.getBoolean();
                } else if ("purposes".equals(fieldName)) {
                    List<Purpose> purposes = reader.readArray(reader1 -> Purpose.fromString(reader1.getString()));
                    deserializedOperatorApiConnectionProperties.purposes = purposes;
                } else if ("purposeReason".equals(fieldName)) {
                    deserializedOperatorApiConnectionProperties.purposeReason = reader.getString();
                } else if ("dataProcessingList".equals(fieldName)) {
                    List<DataProcessing> dataProcessingList
                        = reader.readArray(reader1 -> DataProcessing.fromJson(reader1));
                    deserializedOperatorApiConnectionProperties.dataProcessingList = dataProcessingList;
                } else if ("operatorName".equals(fieldName)) {
                    deserializedOperatorApiConnectionProperties.operatorName = reader.getString();
                } else if ("camaraApiName".equals(fieldName)) {
                    deserializedOperatorApiConnectionProperties.camaraApiName = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedOperatorApiConnectionProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedOperatorApiConnectionProperties.status = Status.fromJson(reader);
                } else if ("planTermsAndConditionsLinks".equals(fieldName)) {
                    List<String> planTermsAndConditionsLinks = reader.readArray(reader1 -> reader1.getString());
                    deserializedOperatorApiConnectionProperties.planTermsAndConditionsLinks
                        = planTermsAndConditionsLinks;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperatorApiConnectionProperties;
        });
    }
}
