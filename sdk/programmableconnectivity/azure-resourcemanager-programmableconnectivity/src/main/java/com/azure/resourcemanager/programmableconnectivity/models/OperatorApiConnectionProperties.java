// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.programmableconnectivity.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Operator API Connection resource properties that cannot be updated once a resource has been created.
 */
@Fluent
public final class OperatorApiConnectionProperties implements JsonSerializable<OperatorApiConnectionProperties> {
    /*
     * Reference to the Operator API Plan Resource ID.
     */
    private String operatorApiPlanId;

    /*
     * Details about the SaaS offer purchased from the marketplace.
     */
    private SaasProperties saasProperties;

    /*
     * Details about the Application that would use the Operator's Network APIs.
     */
    private ApplicationProperties configuredApplication;

    /*
     * Application ID of the App Developer that is registered with the Operator in a specific country/region.
     */
    private String appId;

    /*
     * Reference to the APC Gateway resource ID.
     */
    private String gatewayId;

    /*
     * Type of the account the user has with the Operator's Network API infrastructure. AzureManaged | UserManaged.
     */
    private AccountType accountType;

    /*
     * Application secret linked to the 'appId'. This should be stored securely and is not returned back when the
     * resource information is read.
     */
    private String appSecret;

    /*
     * Name of the Operator in the linked Operator API Plan belongs to.
     */
    private String operatorName;

    /*
     * The Network API for the current operator in the country/region provided in the linked Operator API Plan.
     */
    private String camaraApiName;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /*
     * The status of the OperatorApiConnection resource.
     */
    private Status status;

    /**
     * Creates an instance of OperatorApiConnectionProperties class.
     */
    public OperatorApiConnectionProperties() {
    }

    /**
     * Get the operatorApiPlanId property: Reference to the Operator API Plan Resource ID.
     * 
     * @return the operatorApiPlanId value.
     */
    public String operatorApiPlanId() {
        return this.operatorApiPlanId;
    }

    /**
     * Set the operatorApiPlanId property: Reference to the Operator API Plan Resource ID.
     * 
     * @param operatorApiPlanId the operatorApiPlanId value to set.
     * @return the OperatorApiConnectionProperties object itself.
     */
    public OperatorApiConnectionProperties withOperatorApiPlanId(String operatorApiPlanId) {
        this.operatorApiPlanId = operatorApiPlanId;
        return this;
    }

    /**
     * Get the saasProperties property: Details about the SaaS offer purchased from the marketplace.
     * 
     * @return the saasProperties value.
     */
    public SaasProperties saasProperties() {
        return this.saasProperties;
    }

    /**
     * Set the saasProperties property: Details about the SaaS offer purchased from the marketplace.
     * 
     * @param saasProperties the saasProperties value to set.
     * @return the OperatorApiConnectionProperties object itself.
     */
    public OperatorApiConnectionProperties withSaasProperties(SaasProperties saasProperties) {
        this.saasProperties = saasProperties;
        return this;
    }

    /**
     * Get the configuredApplication property: Details about the Application that would use the Operator's Network APIs.
     * 
     * @return the configuredApplication value.
     */
    public ApplicationProperties configuredApplication() {
        return this.configuredApplication;
    }

    /**
     * Set the configuredApplication property: Details about the Application that would use the Operator's Network APIs.
     * 
     * @param configuredApplication the configuredApplication value to set.
     * @return the OperatorApiConnectionProperties object itself.
     */
    public OperatorApiConnectionProperties withConfiguredApplication(ApplicationProperties configuredApplication) {
        this.configuredApplication = configuredApplication;
        return this;
    }

    /**
     * Get the appId property: Application ID of the App Developer that is registered with the Operator in a specific
     * country/region.
     * 
     * @return the appId value.
     */
    public String appId() {
        return this.appId;
    }

    /**
     * Set the appId property: Application ID of the App Developer that is registered with the Operator in a specific
     * country/region.
     * 
     * @param appId the appId value to set.
     * @return the OperatorApiConnectionProperties object itself.
     */
    public OperatorApiConnectionProperties withAppId(String appId) {
        this.appId = appId;
        return this;
    }

    /**
     * Get the gatewayId property: Reference to the APC Gateway resource ID.
     * 
     * @return the gatewayId value.
     */
    public String gatewayId() {
        return this.gatewayId;
    }

    /**
     * Set the gatewayId property: Reference to the APC Gateway resource ID.
     * 
     * @param gatewayId the gatewayId value to set.
     * @return the OperatorApiConnectionProperties object itself.
     */
    public OperatorApiConnectionProperties withGatewayId(String gatewayId) {
        this.gatewayId = gatewayId;
        return this;
    }

    /**
     * Get the accountType property: Type of the account the user has with the Operator's Network API infrastructure.
     * AzureManaged | UserManaged.
     * 
     * @return the accountType value.
     */
    public AccountType accountType() {
        return this.accountType;
    }

    /**
     * Set the accountType property: Type of the account the user has with the Operator's Network API infrastructure.
     * AzureManaged | UserManaged.
     * 
     * @param accountType the accountType value to set.
     * @return the OperatorApiConnectionProperties object itself.
     */
    public OperatorApiConnectionProperties withAccountType(AccountType accountType) {
        this.accountType = accountType;
        return this;
    }

    /**
     * Get the appSecret property: Application secret linked to the 'appId'. This should be stored securely and is not
     * returned back when the resource information is read.
     * 
     * @return the appSecret value.
     */
    public String appSecret() {
        return this.appSecret;
    }

    /**
     * Set the appSecret property: Application secret linked to the 'appId'. This should be stored securely and is not
     * returned back when the resource information is read.
     * 
     * @param appSecret the appSecret value to set.
     * @return the OperatorApiConnectionProperties object itself.
     */
    public OperatorApiConnectionProperties withAppSecret(String appSecret) {
        this.appSecret = appSecret;
        return this;
    }

    /**
     * Get the operatorName property: Name of the Operator in the linked Operator API Plan belongs to.
     * 
     * @return the operatorName value.
     */
    public String operatorName() {
        return this.operatorName;
    }

    /**
     * Get the camaraApiName property: The Network API for the current operator in the country/region provided in the
     * linked Operator API Plan.
     * 
     * @return the camaraApiName value.
     */
    public String camaraApiName() {
        return this.camaraApiName;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: The status of the OperatorApiConnection resource.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("operatorApiPlanId", this.operatorApiPlanId);
        jsonWriter.writeStringField("gatewayId", this.gatewayId);
        jsonWriter.writeStringField("accountType", this.accountType == null ? null : this.accountType.toString());
        jsonWriter.writeJsonField("saasProperties", this.saasProperties);
        jsonWriter.writeJsonField("configuredApplication", this.configuredApplication);
        jsonWriter.writeStringField("appId", this.appId);
        jsonWriter.writeStringField("appSecret", this.appSecret);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperatorApiConnectionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperatorApiConnectionProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OperatorApiConnectionProperties.
     */
    public static OperatorApiConnectionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperatorApiConnectionProperties deserializedOperatorApiConnectionProperties
                = new OperatorApiConnectionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operatorApiPlanId".equals(fieldName)) {
                    deserializedOperatorApiConnectionProperties.operatorApiPlanId = reader.getString();
                } else if ("gatewayId".equals(fieldName)) {
                    deserializedOperatorApiConnectionProperties.gatewayId = reader.getString();
                } else if ("accountType".equals(fieldName)) {
                    deserializedOperatorApiConnectionProperties.accountType
                        = AccountType.fromString(reader.getString());
                } else if ("saasProperties".equals(fieldName)) {
                    deserializedOperatorApiConnectionProperties.saasProperties = SaasProperties.fromJson(reader);
                } else if ("configuredApplication".equals(fieldName)) {
                    deserializedOperatorApiConnectionProperties.configuredApplication
                        = ApplicationProperties.fromJson(reader);
                } else if ("appId".equals(fieldName)) {
                    deserializedOperatorApiConnectionProperties.appId = reader.getString();
                } else if ("appSecret".equals(fieldName)) {
                    deserializedOperatorApiConnectionProperties.appSecret = reader.getString();
                } else if ("operatorName".equals(fieldName)) {
                    deserializedOperatorApiConnectionProperties.operatorName = reader.getString();
                } else if ("camaraApiName".equals(fieldName)) {
                    deserializedOperatorApiConnectionProperties.camaraApiName = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedOperatorApiConnectionProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedOperatorApiConnectionProperties.status = Status.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperatorApiConnectionProperties;
        });
    }
}
