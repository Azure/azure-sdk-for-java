// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.programmableconnectivity.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Operator API Plan properties.
 */
@Immutable
public final class OperatorApiPlanProperties implements JsonSerializable<OperatorApiPlanProperties> {
    /*
     * Name of the Operator this plan belongs to.
     */
    private String operatorName;

    /*
     * Standardized Network API name defined by CAMARA specifications.
     */
    private String camaraApiName;

    /*
     * List of Azure regions where this offer is supported.
     */
    private List<String> supportedLocations;

    /*
     * List of country/region names where this plan is being supported by the Operator.
     */
    private List<String> operatorRegions;

    /*
     * List of country/region names where this plan is being supported by Azure Marketplace.
     */
    private List<String> markets;

    /*
     * The limits, if any, will be imposed by the operator.
     */
    private String limits;

    /*
     * Azure marketplace properties for this plan.
     */
    private MarketplaceProperties marketplaceProperties;

    /*
     * The status of the last operation on the Gateway resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of OperatorApiPlanProperties class.
     */
    private OperatorApiPlanProperties() {
    }

    /**
     * Get the operatorName property: Name of the Operator this plan belongs to.
     * 
     * @return the operatorName value.
     */
    public String operatorName() {
        return this.operatorName;
    }

    /**
     * Get the camaraApiName property: Standardized Network API name defined by CAMARA specifications.
     * 
     * @return the camaraApiName value.
     */
    public String camaraApiName() {
        return this.camaraApiName;
    }

    /**
     * Get the supportedLocations property: List of Azure regions where this offer is supported.
     * 
     * @return the supportedLocations value.
     */
    public List<String> supportedLocations() {
        return this.supportedLocations;
    }

    /**
     * Get the operatorRegions property: List of country/region names where this plan is being supported by the
     * Operator.
     * 
     * @return the operatorRegions value.
     */
    public List<String> operatorRegions() {
        return this.operatorRegions;
    }

    /**
     * Get the markets property: List of country/region names where this plan is being supported by Azure Marketplace.
     * 
     * @return the markets value.
     */
    public List<String> markets() {
        return this.markets;
    }

    /**
     * Get the limits property: The limits, if any, will be imposed by the operator.
     * 
     * @return the limits value.
     */
    public String limits() {
        return this.limits;
    }

    /**
     * Get the marketplaceProperties property: Azure marketplace properties for this plan.
     * 
     * @return the marketplaceProperties value.
     */
    public MarketplaceProperties marketplaceProperties() {
        return this.marketplaceProperties;
    }

    /**
     * Get the provisioningState property: The status of the last operation on the Gateway resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (marketplaceProperties() != null) {
            marketplaceProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("operatorName", this.operatorName);
        jsonWriter.writeStringField("camaraApiName", this.camaraApiName);
        jsonWriter.writeArrayField("supportedLocations", this.supportedLocations,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("operatorRegions", this.operatorRegions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("markets", this.markets, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("limits", this.limits);
        jsonWriter.writeJsonField("marketplaceProperties", this.marketplaceProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperatorApiPlanProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperatorApiPlanProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OperatorApiPlanProperties.
     */
    public static OperatorApiPlanProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperatorApiPlanProperties deserializedOperatorApiPlanProperties = new OperatorApiPlanProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operatorName".equals(fieldName)) {
                    deserializedOperatorApiPlanProperties.operatorName = reader.getString();
                } else if ("camaraApiName".equals(fieldName)) {
                    deserializedOperatorApiPlanProperties.camaraApiName = reader.getString();
                } else if ("supportedLocations".equals(fieldName)) {
                    List<String> supportedLocations = reader.readArray(reader1 -> reader1.getString());
                    deserializedOperatorApiPlanProperties.supportedLocations = supportedLocations;
                } else if ("operatorRegions".equals(fieldName)) {
                    List<String> operatorRegions = reader.readArray(reader1 -> reader1.getString());
                    deserializedOperatorApiPlanProperties.operatorRegions = operatorRegions;
                } else if ("markets".equals(fieldName)) {
                    List<String> markets = reader.readArray(reader1 -> reader1.getString());
                    deserializedOperatorApiPlanProperties.markets = markets;
                } else if ("limits".equals(fieldName)) {
                    deserializedOperatorApiPlanProperties.limits = reader.getString();
                } else if ("marketplaceProperties".equals(fieldName)) {
                    deserializedOperatorApiPlanProperties.marketplaceProperties
                        = MarketplaceProperties.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedOperatorApiPlanProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperatorApiPlanProperties;
        });
    }
}
