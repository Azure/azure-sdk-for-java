// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.programmableconnectivity.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model defining a local representative for a country/region.
 */
@Fluent
public final class LocalRepresentative implements JsonSerializable<LocalRepresentative> {
    /*
     * Country code for the country/region the local representative is representing.
     */
    private String countryCode;

    /*
     * Local representative for this country/region.
     */
    private Person representative;

    /**
     * Creates an instance of LocalRepresentative class.
     */
    public LocalRepresentative() {
    }

    /**
     * Get the countryCode property: Country code for the country/region the local representative is representing.
     * 
     * @return the countryCode value.
     */
    public String countryCode() {
        return this.countryCode;
    }

    /**
     * Set the countryCode property: Country code for the country/region the local representative is representing.
     * 
     * @param countryCode the countryCode value to set.
     * @return the LocalRepresentative object itself.
     */
    public LocalRepresentative withCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }

    /**
     * Get the representative property: Local representative for this country/region.
     * 
     * @return the representative value.
     */
    public Person representative() {
        return this.representative;
    }

    /**
     * Set the representative property: Local representative for this country/region.
     * 
     * @param representative the representative value to set.
     * @return the LocalRepresentative object itself.
     */
    public LocalRepresentative withRepresentative(Person representative) {
        this.representative = representative;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (countryCode() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property countryCode in model LocalRepresentative"));
        }
        if (representative() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property representative in model LocalRepresentative"));
        } else {
            representative().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LocalRepresentative.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("countryCode", this.countryCode);
        jsonWriter.writeJsonField("representative", this.representative);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LocalRepresentative from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LocalRepresentative if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LocalRepresentative.
     */
    public static LocalRepresentative fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LocalRepresentative deserializedLocalRepresentative = new LocalRepresentative();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("countryCode".equals(fieldName)) {
                    deserializedLocalRepresentative.countryCode = reader.getString();
                } else if ("representative".equals(fieldName)) {
                    deserializedLocalRepresentative.representative = Person.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLocalRepresentative;
        });
    }
}
