// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.programmableconnectivity.generated;

import com.azure.resourcemanager.programmableconnectivity.models.ApplicationOwnerProperties;
import com.azure.resourcemanager.programmableconnectivity.models.ApplicationProperties;
import com.azure.resourcemanager.programmableconnectivity.models.Category;
import com.azure.resourcemanager.programmableconnectivity.models.GatewayProperties;
import com.azure.resourcemanager.programmableconnectivity.models.GeographicAddress;
import com.azure.resourcemanager.programmableconnectivity.models.LocalRepresentative;
import com.azure.resourcemanager.programmableconnectivity.models.OrganizationType;
import com.azure.resourcemanager.programmableconnectivity.models.Person;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Gateways CreateOrUpdate.
 */
public final class GatewaysCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2025-03-30-preview/Gateways_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: Gateways_CreateOrUpdate_MaximumSet - generated by [MaximumSet] rule.
     * 
     * @param manager Entry point to ProgrammableConnectivityManager.
     */
    public static void gatewaysCreateOrUpdateMaximumSetGeneratedByMaximumSetRule(
        com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager manager) {
        manager.gateways()
            .define("GatewayName")
            .withRegion("eastus")
            .withExistingResourceGroup("rgopenapi")
            .withTags(mapOf())
            .withProperties(new GatewayProperties()
                .withConfiguredApplication(new ApplicationProperties().withName("Application Name")
                    .withApplicationDescription("Application description")
                    .withCategory(Category.ART_AND_DESIGN)
                    .withCommercialName("Contoso")
                    .withPrivacyRightsRequestEmailAddress("contact@contoso.com")
                    .withPrivacyPolicyUrl("http://contoso.com/privacy"))
                .withConfiguredApplicationOwner(new ApplicationOwnerProperties().withName("Contoso")
                    .withLegalName("Contoso")
                    .withTradingName("Contoso")
                    .withOrganizationDescription("Description of Organisation")
                    .withTaxNumber("12345")
                    .withOrganizationType(OrganizationType.ACADEMIC_SCIENTIFIC_ORGANIZATION)
                    .withOrganizationIdentificationId("12345")
                    .withOrganizationIdentificationIssuer("ID issuer")
                    .withOrganizationIdentificationType("Tax number")
                    .withContactEmailAddress("contact@contoso.com")
                    .withLegalRepresentative(new Person().withFamilyName("Name")
                        .withGivenName("Name")
                        .withEmailAddress("contact@contoso.com"))
                    .withPrivacyManager(new Person().withFamilyName("Name")
                        .withGivenName("Name")
                        .withEmailAddress("contact@contoso.com"))
                    .withDataProtectionOfficer(new Person().withFamilyName("Name")
                        .withGivenName("Name")
                        .withEmailAddress("contact@contoso.com"))
                    .withRegisteredGeographicAddress(new GeographicAddress().withStreetNumber("1234")
                        .withStreetName("Street")
                        .withLocality("Locality")
                        .withCity("City")
                        .withStateOrProvince("State")
                        .withPostalCode("fakeTokenPlaceholder")
                        .withCountryCode("fakeTokenPlaceholder"))
                    .withPrivacyPolicyUrl("http://contoso.com/privacy")
                    .withLocalRepresentatives(
                        Arrays.asList(new LocalRepresentative().withCountryCode("fakeTokenPlaceholder")
                            .withRepresentative(new Person().withFamilyName("Name")
                                .withGivenName("Name")
                                .withEmailAddress("contact@contoso.com"))))))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
