// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.programmableconnectivity.generated;

import com.azure.resourcemanager.programmableconnectivity.models.Context;
import com.azure.resourcemanager.programmableconnectivity.models.DataProcessing;
import com.azure.resourcemanager.programmableconnectivity.models.DataRegions;
import com.azure.resourcemanager.programmableconnectivity.models.DurationModel;
import com.azure.resourcemanager.programmableconnectivity.models.Frequency;
import com.azure.resourcemanager.programmableconnectivity.models.OperatorApiConnection;
import com.azure.resourcemanager.programmableconnectivity.models.OperatorApiConnectionUpdateProperties;
import com.azure.resourcemanager.programmableconnectivity.models.ProcessingOperation;
import com.azure.resourcemanager.programmableconnectivity.models.Purpose;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for OperatorApiConnections Update.
 */
public final class OperatorApiConnectionsUpdateSamples {
    /*
     * x-ms-original-file: 2025-03-30-preview/OperatorApiConnections_Update_MaximumSet_Gen.json
     */
    /**
     * Sample code: OperatorApiConnections_Update_MaximumSet - generated by [MaximumSet] rule.
     * 
     * @param manager Entry point to ProgrammableConnectivityManager.
     */
    public static void operatorApiConnectionsUpdateMaximumSetGeneratedByMaximumSetRule(
        com.azure.resourcemanager.programmableconnectivity.ProgrammableConnectivityManager manager) {
        OperatorApiConnection resource = manager.operatorApiConnections()
            .getByResourceGroupWithResponse("rgopenapi", "operatorApiConnectionName", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withTags(mapOf())
            .withProperties(new OperatorApiConnectionUpdateProperties().withOperatorApiPlanId(
                "/subscriptions/00000000-0000-0000-0000-00000000000/providers/Microsoft.ProgrammableConnectivity/operatorApiPlans/livmzrh")
                .withPlanTermsAndConditionsAccepted(true)
                .withPurposes(Arrays.asList(Purpose.fromString("Fraud Detection and Prevention")))
                .withPurposeReason("This application uses this API for this purpose because...")
                .withDataProcessingList(
                    Arrays.asList(new DataProcessing().withProcessingOperation(ProcessingOperation.ACCESS)
                        .withContexts(Arrays.asList(Context.ALGORITHMIC_LOGIC))
                        .withDuration(DurationModel.ENDLESS_DURATION)
                        .withFrequency(Frequency.CONTINUOUS_FREQUENCY)
                        .withTransitRegions(Arrays.asList(new DataRegions().withCountryCode("fakeTokenPlaceholder")
                            .withCommercialOrganization("Contoso")
                            .withCommercialActivity(true)
                            .withDataPrivacyFrameworkUrl("https://www.dataprivacyframework.gov/participant/0")))
                        .withStorageRegions(Arrays.asList(new DataRegions().withCountryCode("fakeTokenPlaceholder")
                            .withCommercialOrganization("Contoso")
                            .withCommercialActivity(true)
                            .withDataPrivacyFrameworkUrl("https://www.dataprivacyframework.gov/participant/0"))))))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
