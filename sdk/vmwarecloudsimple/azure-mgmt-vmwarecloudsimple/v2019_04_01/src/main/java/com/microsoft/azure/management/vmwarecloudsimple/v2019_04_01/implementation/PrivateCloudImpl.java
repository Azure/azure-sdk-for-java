/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.implementation;

import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.PrivateCloud;
import com.microsoft.azure.arm.model.implementation.IndexableRefreshableWrapperImpl;
import rx.Observable;
import org.joda.time.DateTime;
import java.util.List;
import java.util.UUID;
import java.util.ArrayList;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.ResourcePool;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.PrivateCloudResourceType;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachineTemplate;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualNetwork;

class PrivateCloudImpl extends IndexableRefreshableWrapperImpl<PrivateCloud, PrivateCloudInner> implements PrivateCloud {
    private final VMwareCloudSimpleManager manager;
    private String pcName;
    private String regionId;

    PrivateCloudImpl(PrivateCloudInner inner,  VMwareCloudSimpleManager manager) {
        super(null, inner);
        this.manager = manager;
        // set resource ancestor and positional variables
        this.pcName = IdParsingUtils.getValueFromIdByName(inner.id(), "privateClouds");
        this.regionId = IdParsingUtils.getValueFromIdByName(inner.id(), "locations");
    }

    @Override
    public VMwareCloudSimpleManager manager() {
        return this.manager;
    }

    @Override
    protected Observable<PrivateCloudInner> getInnerAsync() {
        PrivateCloudsInner client = this.manager().inner().privateClouds();
        return client.getAsync(this.pcName, this.regionId);
    }



    @Override
    public String availabilityZoneId() {
        return this.inner().availabilityZoneId();
    }

    @Override
    public String availabilityZoneName() {
        return this.inner().availabilityZoneName();
    }

    @Override
    public Integer clustersNumber() {
        return this.inner().clustersNumber();
    }

    @Override
    public String createdBy() {
        return this.inner().createdBy();
    }

    @Override
    public DateTime createdOn() {
        return this.inner().createdOn();
    }

    @Override
    public List<String> dnsServers() {
        return this.inner().dnsServers();
    }

    @Override
    public String expires() {
        return this.inner().expires();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String nsxType() {
        return this.inner().nsxType();
    }

    @Override
    public String placementGroupId() {
        return this.inner().placementGroupId();
    }

    @Override
    public String placementGroupName() {
        return this.inner().placementGroupName();
    }

    @Override
    public UUID privateCloudId() {
        return this.inner().privateCloudId();
    }

    @Override
    public String privateCloudPropertiesType() {
        return this.inner().privateCloudPropertiesType();
    }

    @Override
    public List<ResourcePool> resourcePools() {
        List<ResourcePool> lst = new ArrayList<ResourcePool>();
        if (this.inner().resourcePools() != null) {
            for (ResourcePoolInner inner : this.inner().resourcePools()) {
                lst.add( new ResourcePoolImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public String state() {
        return this.inner().state();
    }

    @Override
    public Integer totalCpuCores() {
        return this.inner().totalCpuCores();
    }

    @Override
    public Integer totalNodes() {
        return this.inner().totalNodes();
    }

    @Override
    public Integer totalRam() {
        return this.inner().totalRam();
    }

    @Override
    public Double totalStorage() {
        return this.inner().totalStorage();
    }

    @Override
    public PrivateCloudResourceType type() {
        return this.inner().type();
    }

    @Override
    public String vcenterFqdn() {
        return this.inner().vcenterFqdn();
    }

    @Override
    public String vcenterRefid() {
        return this.inner().vcenterRefid();
    }

    @Override
    public List<VirtualMachineTemplate> virtualMachineTemplates() {
        List<VirtualMachineTemplate> lst = new ArrayList<VirtualMachineTemplate>();
        if (this.inner().virtualMachineTemplates() != null) {
            for (VirtualMachineTemplateInner inner : this.inner().virtualMachineTemplates()) {
                lst.add( new VirtualMachineTemplateImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public List<VirtualNetwork> virtualNetworks() {
        List<VirtualNetwork> lst = new ArrayList<VirtualNetwork>();
        if (this.inner().virtualNetworks() != null) {
            for (VirtualNetworkInner inner : this.inner().virtualNetworks()) {
                lst.add( new VirtualNetworkImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public Boolean vrOpsEnabled() {
        return this.inner().vrOpsEnabled();
    }

    @Override
    public String vSphereVersion() {
        return this.inner().vSphereVersion();
    }

}
