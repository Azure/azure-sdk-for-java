/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachine;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualDiskController;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualDisk;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.GuestOSType;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualNic;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachineStatus;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.ResourcePool;

class VirtualMachineImpl extends GroupableResourceCoreImpl<VirtualMachine, VirtualMachineInner, VirtualMachineImpl, VMwareCloudSimpleManager> implements VirtualMachine, VirtualMachine.Definition, VirtualMachine.Update {
    VirtualMachineImpl(String name, VirtualMachineInner inner, VMwareCloudSimpleManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<VirtualMachine> createResourceAsync() {
        VirtualMachinesInner client = this.manager().inner().virtualMachines();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<VirtualMachine> updateResourceAsync() {
        VirtualMachinesInner client = this.manager().inner().virtualMachines();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<VirtualMachineInner> getInnerAsync() {
        VirtualMachinesInner client = this.manager().inner().virtualMachines();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public int amountOfRam() {
        return this.inner().amountOfRam();
    }

    @Override
    public List<VirtualDiskController> controllers() {
        return this.inner().controllers();
    }

    @Override
    public List<VirtualDisk> disks() {
        return this.inner().disks();
    }

    @Override
    public String dnsname() {
        return this.inner().dnsname();
    }

    @Override
    public Boolean exposeToGuestVM() {
        return this.inner().exposeToGuestVM();
    }

    @Override
    public String folder() {
        return this.inner().folder();
    }

    @Override
    public String guestOS() {
        return this.inner().guestOS();
    }

    @Override
    public GuestOSType guestOSType() {
        return this.inner().guestOSType();
    }

    @Override
    public List<VirtualNic> nics() {
        return this.inner().nics();
    }

    @Override
    public int numberOfCores() {
        return this.inner().numberOfCores();
    }

    @Override
    public String password() {
        return this.inner().password();
    }

    @Override
    public String privateCloudId() {
        return this.inner().privateCloudId();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String publicIP() {
        return this.inner().publicIP();
    }

    @Override
    public ResourcePool resourcePool() {
        ResourcePoolInner inner = this.inner().resourcePool();
        if (inner != null) {
            return  new ResourcePoolImpl(inner, manager());
        } else {
            return null;
        }
    }

    @Override
    public VirtualMachineStatus status() {
        return this.inner().status();
    }

    @Override
    public String templateId() {
        return this.inner().templateId();
    }

    @Override
    public String username() {
        return this.inner().username();
    }

    @Override
    public String vmId() {
        return this.inner().vmId();
    }

    @Override
    public String vmwaretools() {
        return this.inner().vmwaretools();
    }

    @Override
    public List<String> vSphereNetworks() {
        return this.inner().vSphereNetworks();
    }

    @Override
    public VirtualMachineImpl withAmountOfRam(int amountOfRam) {
        this.inner().withAmountOfRam(amountOfRam);
        return this;
    }

    @Override
    public VirtualMachineImpl withNumberOfCores(int numberOfCores) {
        this.inner().withNumberOfCores(numberOfCores);
        return this;
    }

    @Override
    public VirtualMachineImpl withPrivateCloudId(String privateCloudId) {
        this.inner().withPrivateCloudId(privateCloudId);
        return this;
    }

    @Override
    public VirtualMachineImpl withDisks(List<VirtualDisk> disks) {
        this.inner().withDisks(disks);
        return this;
    }

    @Override
    public VirtualMachineImpl withExposeToGuestVM(Boolean exposeToGuestVM) {
        this.inner().withExposeToGuestVM(exposeToGuestVM);
        return this;
    }

    @Override
    public VirtualMachineImpl withNics(List<VirtualNic> nics) {
        this.inner().withNics(nics);
        return this;
    }

    @Override
    public VirtualMachineImpl withPassword(String password) {
        this.inner().withPassword(password);
        return this;
    }

    @Override
    public VirtualMachineImpl withResourcePool(ResourcePoolInner resourcePool) {
        this.inner().withResourcePool(resourcePool);
        return this;
    }

    @Override
    public VirtualMachineImpl withTemplateId(String templateId) {
        this.inner().withTemplateId(templateId);
        return this;
    }

    @Override
    public VirtualMachineImpl withUsername(String username) {
        this.inner().withUsername(username);
        return this;
    }

    @Override
    public VirtualMachineImpl withVSphereNetworks(List<String> vSphereNetworks) {
        this.inner().withVSphereNetworks(vSphereNetworks);
        return this;
    }

}
