/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.CSRPErrorException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in VirtualMachineTemplates.
 */
public class VirtualMachineTemplatesInner {
    /** The Retrofit service to perform REST calls. */
    private VirtualMachineTemplatesService service;
    /** The service client containing this operation class. */
    private VMwareCloudSimpleClientImpl client;

    /**
     * Initializes an instance of VirtualMachineTemplatesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public VirtualMachineTemplatesInner(Retrofit retrofit, VMwareCloudSimpleClientImpl client) {
        this.service = retrofit.create(VirtualMachineTemplatesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for VirtualMachineTemplates to be
     * used by Retrofit to perform actually REST calls.
     */
    interface VirtualMachineTemplatesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachineTemplates list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/privateClouds/{pcName}/virtualMachineTemplates")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("pcName") String pcName, @Path("regionId") String regionId, @Query("api-version") String apiVersion, @Query("resourcePoolName") String resourcePoolName, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachineTemplates get" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/privateClouds/{pcName}/virtualMachineTemplates/{virtualMachineTemplateName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("regionId") String regionId, @Path("pcName") String pcName, @Path("virtualMachineTemplateName") String virtualMachineTemplateName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachineTemplates listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Implements list of available VM templates.
     * Returns list of virtual machine templates in region for private cloud.
     *
     * @param pcName The private cloud name
     * @param regionId The region Id (westus, eastus)
     * @param resourcePoolName Resource pool used to derive vSphere cluster which contains VM templates
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;VirtualMachineTemplateInner&gt; object if successful.
     */
    public PagedList<VirtualMachineTemplateInner> list(final String pcName, final String regionId, final String resourcePoolName) {
        ServiceResponse<Page<VirtualMachineTemplateInner>> response = listSinglePageAsync(pcName, regionId, resourcePoolName).toBlocking().single();
        return new PagedList<VirtualMachineTemplateInner>(response.body()) {
            @Override
            public Page<VirtualMachineTemplateInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Implements list of available VM templates.
     * Returns list of virtual machine templates in region for private cloud.
     *
     * @param pcName The private cloud name
     * @param regionId The region Id (westus, eastus)
     * @param resourcePoolName Resource pool used to derive vSphere cluster which contains VM templates
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<VirtualMachineTemplateInner>> listAsync(final String pcName, final String regionId, final String resourcePoolName, final ListOperationCallback<VirtualMachineTemplateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(pcName, regionId, resourcePoolName),
            new Func1<String, Observable<ServiceResponse<Page<VirtualMachineTemplateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineTemplateInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Implements list of available VM templates.
     * Returns list of virtual machine templates in region for private cloud.
     *
     * @param pcName The private cloud name
     * @param regionId The region Id (westus, eastus)
     * @param resourcePoolName Resource pool used to derive vSphere cluster which contains VM templates
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VirtualMachineTemplateInner&gt; object
     */
    public Observable<Page<VirtualMachineTemplateInner>> listAsync(final String pcName, final String regionId, final String resourcePoolName) {
        return listWithServiceResponseAsync(pcName, regionId, resourcePoolName)
            .map(new Func1<ServiceResponse<Page<VirtualMachineTemplateInner>>, Page<VirtualMachineTemplateInner>>() {
                @Override
                public Page<VirtualMachineTemplateInner> call(ServiceResponse<Page<VirtualMachineTemplateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Implements list of available VM templates.
     * Returns list of virtual machine templates in region for private cloud.
     *
     * @param pcName The private cloud name
     * @param regionId The region Id (westus, eastus)
     * @param resourcePoolName Resource pool used to derive vSphere cluster which contains VM templates
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VirtualMachineTemplateInner&gt; object
     */
    public Observable<ServiceResponse<Page<VirtualMachineTemplateInner>>> listWithServiceResponseAsync(final String pcName, final String regionId, final String resourcePoolName) {
        return listSinglePageAsync(pcName, regionId, resourcePoolName)
            .concatMap(new Func1<ServiceResponse<Page<VirtualMachineTemplateInner>>, Observable<ServiceResponse<Page<VirtualMachineTemplateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineTemplateInner>>> call(ServiceResponse<Page<VirtualMachineTemplateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Implements list of available VM templates.
     * Returns list of virtual machine templates in region for private cloud.
     *
    ServiceResponse<PageImpl<VirtualMachineTemplateInner>> * @param pcName The private cloud name
    ServiceResponse<PageImpl<VirtualMachineTemplateInner>> * @param regionId The region Id (westus, eastus)
    ServiceResponse<PageImpl<VirtualMachineTemplateInner>> * @param resourcePoolName Resource pool used to derive vSphere cluster which contains VM templates
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;VirtualMachineTemplateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<VirtualMachineTemplateInner>>> listSinglePageAsync(final String pcName, final String regionId, final String resourcePoolName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (pcName == null) {
            throw new IllegalArgumentException("Parameter pcName is required and cannot be null.");
        }
        if (regionId == null) {
            throw new IllegalArgumentException("Parameter regionId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (resourcePoolName == null) {
            throw new IllegalArgumentException("Parameter resourcePoolName is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), pcName, regionId, this.client.apiVersion(), resourcePoolName, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<VirtualMachineTemplateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineTemplateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<VirtualMachineTemplateInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<VirtualMachineTemplateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<VirtualMachineTemplateInner>> listDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<VirtualMachineTemplateInner>, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<VirtualMachineTemplateInner>>() { }.getType())
                .registerError(CSRPErrorException.class)
                .build(response);
    }

    /**
     * Implements virtual machine template GET method.
     * Returns virtual machine templates by its name.
     *
     * @param regionId The region Id (westus, eastus)
     * @param pcName The private cloud name
     * @param virtualMachineTemplateName virtual machine template id (vsphereId)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VirtualMachineTemplateInner object if successful.
     */
    public VirtualMachineTemplateInner get(String regionId, String pcName, String virtualMachineTemplateName) {
        return getWithServiceResponseAsync(regionId, pcName, virtualMachineTemplateName).toBlocking().single().body();
    }

    /**
     * Implements virtual machine template GET method.
     * Returns virtual machine templates by its name.
     *
     * @param regionId The region Id (westus, eastus)
     * @param pcName The private cloud name
     * @param virtualMachineTemplateName virtual machine template id (vsphereId)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VirtualMachineTemplateInner> getAsync(String regionId, String pcName, String virtualMachineTemplateName, final ServiceCallback<VirtualMachineTemplateInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(regionId, pcName, virtualMachineTemplateName), serviceCallback);
    }

    /**
     * Implements virtual machine template GET method.
     * Returns virtual machine templates by its name.
     *
     * @param regionId The region Id (westus, eastus)
     * @param pcName The private cloud name
     * @param virtualMachineTemplateName virtual machine template id (vsphereId)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VirtualMachineTemplateInner object
     */
    public Observable<VirtualMachineTemplateInner> getAsync(String regionId, String pcName, String virtualMachineTemplateName) {
        return getWithServiceResponseAsync(regionId, pcName, virtualMachineTemplateName).map(new Func1<ServiceResponse<VirtualMachineTemplateInner>, VirtualMachineTemplateInner>() {
            @Override
            public VirtualMachineTemplateInner call(ServiceResponse<VirtualMachineTemplateInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements virtual machine template GET method.
     * Returns virtual machine templates by its name.
     *
     * @param regionId The region Id (westus, eastus)
     * @param pcName The private cloud name
     * @param virtualMachineTemplateName virtual machine template id (vsphereId)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VirtualMachineTemplateInner object
     */
    public Observable<ServiceResponse<VirtualMachineTemplateInner>> getWithServiceResponseAsync(String regionId, String pcName, String virtualMachineTemplateName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (regionId == null) {
            throw new IllegalArgumentException("Parameter regionId is required and cannot be null.");
        }
        if (pcName == null) {
            throw new IllegalArgumentException("Parameter pcName is required and cannot be null.");
        }
        if (virtualMachineTemplateName == null) {
            throw new IllegalArgumentException("Parameter virtualMachineTemplateName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), regionId, pcName, virtualMachineTemplateName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<VirtualMachineTemplateInner>>>() {
                @Override
                public Observable<ServiceResponse<VirtualMachineTemplateInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<VirtualMachineTemplateInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<VirtualMachineTemplateInner> getDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<VirtualMachineTemplateInner, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<VirtualMachineTemplateInner>() { }.getType())
                .registerError(CSRPErrorException.class)
                .build(response);
    }

    /**
     * Implements list of available VM templates.
     * Returns list of virtual machine templates in region for private cloud.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;VirtualMachineTemplateInner&gt; object if successful.
     */
    public PagedList<VirtualMachineTemplateInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<VirtualMachineTemplateInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<VirtualMachineTemplateInner>(response.body()) {
            @Override
            public Page<VirtualMachineTemplateInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Implements list of available VM templates.
     * Returns list of virtual machine templates in region for private cloud.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<VirtualMachineTemplateInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<VirtualMachineTemplateInner>> serviceFuture, final ListOperationCallback<VirtualMachineTemplateInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<VirtualMachineTemplateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineTemplateInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Implements list of available VM templates.
     * Returns list of virtual machine templates in region for private cloud.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VirtualMachineTemplateInner&gt; object
     */
    public Observable<Page<VirtualMachineTemplateInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<VirtualMachineTemplateInner>>, Page<VirtualMachineTemplateInner>>() {
                @Override
                public Page<VirtualMachineTemplateInner> call(ServiceResponse<Page<VirtualMachineTemplateInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Implements list of available VM templates.
     * Returns list of virtual machine templates in region for private cloud.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VirtualMachineTemplateInner&gt; object
     */
    public Observable<ServiceResponse<Page<VirtualMachineTemplateInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<VirtualMachineTemplateInner>>, Observable<ServiceResponse<Page<VirtualMachineTemplateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineTemplateInner>>> call(ServiceResponse<Page<VirtualMachineTemplateInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Implements list of available VM templates.
     * Returns list of virtual machine templates in region for private cloud.
     *
    ServiceResponse<PageImpl<VirtualMachineTemplateInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;VirtualMachineTemplateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<VirtualMachineTemplateInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<VirtualMachineTemplateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineTemplateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<VirtualMachineTemplateInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<VirtualMachineTemplateInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<VirtualMachineTemplateInner>> listNextDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<VirtualMachineTemplateInner>, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<VirtualMachineTemplateInner>>() { }.getType())
                .registerError(CSRPErrorException.class)
                .build(response);
    }

}
