/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.Operations;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.AvailableOperation;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.OperationResource;

class OperationsImpl extends WrapperImpl<OperationsInner> implements Operations {
    private final VMwareCloudSimpleManager manager;

    OperationsImpl(VMwareCloudSimpleManager manager) {
        super(manager.inner().operations());
        this.manager = manager;
    }

    public VMwareCloudSimpleManager manager() {
        return this.manager;
    }

    private OperationResourceImpl wrapOperationResourceModel(OperationResourceInner inner) {
        return  new OperationResourceImpl(inner, manager());
    }

    private Observable<OperationResourceInner> getOperationResourceInnerUsingOperationsInnerAsync(String id) {
        String regionId = IdParsingUtils.getValueFromIdByName(id, "locations");
        String operationId = IdParsingUtils.getValueFromIdByName(id, "operationResults");
        OperationsInner client = this.inner();
        return client.getAsync(regionId, operationId);
    }

    @Override
    public Observable<AvailableOperation> listAsync() {
        OperationsInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<AvailableOperationInner>, Iterable<AvailableOperationInner>>() {
            @Override
            public Iterable<AvailableOperationInner> call(Page<AvailableOperationInner> page) {
                return page.items();
            }
        })
        .map(new Func1<AvailableOperationInner, AvailableOperation>() {
            @Override
            public AvailableOperation call(AvailableOperationInner inner) {
                return new AvailableOperationImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<OperationResource> getAsync(String regionId, String operationId) {
        OperationsInner client = this.inner();
        return client.getAsync(regionId, operationId)
        .flatMap(new Func1<OperationResourceInner, Observable<OperationResource>>() {
            @Override
            public Observable<OperationResource> call(OperationResourceInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((OperationResource)wrapOperationResourceModel(inner));
                }
            }
       });
    }

}
