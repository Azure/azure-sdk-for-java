/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachineTemplates;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachineTemplate;

class VirtualMachineTemplatesImpl extends WrapperImpl<VirtualMachineTemplatesInner> implements VirtualMachineTemplates {
    private final VMwareCloudSimpleManager manager;

    VirtualMachineTemplatesImpl(VMwareCloudSimpleManager manager) {
        super(manager.inner().virtualMachineTemplates());
        this.manager = manager;
    }

    public VMwareCloudSimpleManager manager() {
        return this.manager;
    }

    private VirtualMachineTemplateImpl wrapModel(VirtualMachineTemplateInner inner) {
        return  new VirtualMachineTemplateImpl(inner, manager());
    }

    @Override
    public Observable<VirtualMachineTemplate> listAsync(final String pcName, final String regionId, final String resourcePoolName) {
        VirtualMachineTemplatesInner client = this.inner();
        return client.listAsync(pcName, regionId, resourcePoolName)
        .flatMapIterable(new Func1<Page<VirtualMachineTemplateInner>, Iterable<VirtualMachineTemplateInner>>() {
            @Override
            public Iterable<VirtualMachineTemplateInner> call(Page<VirtualMachineTemplateInner> page) {
                return page.items();
            }
        })
        .map(new Func1<VirtualMachineTemplateInner, VirtualMachineTemplate>() {
            @Override
            public VirtualMachineTemplate call(VirtualMachineTemplateInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<VirtualMachineTemplate> getAsync(String regionId, String pcName, String virtualMachineTemplateName) {
        VirtualMachineTemplatesInner client = this.inner();
        return client.getAsync(regionId, pcName, virtualMachineTemplateName)
        .flatMap(new Func1<VirtualMachineTemplateInner, Observable<VirtualMachineTemplate>>() {
            @Override
            public Observable<VirtualMachineTemplate> call(VirtualMachineTemplateInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((VirtualMachineTemplate)wrapModel(inner));
                }
            }
       });
    }

}
