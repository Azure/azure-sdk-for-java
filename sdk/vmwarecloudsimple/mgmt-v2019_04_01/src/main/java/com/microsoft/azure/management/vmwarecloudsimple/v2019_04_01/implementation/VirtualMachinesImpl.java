/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * def
 */

package com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.implementation;

import com.microsoft.azure.arm.resources.collection.implementation.GroupableResourcesCoreImpl;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachines;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachine;
import rx.Observable;
import rx.Completable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import com.microsoft.azure.arm.resources.ResourceUtilsCore;
import com.microsoft.azure.arm.utils.RXMapper;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;

class VirtualMachinesImpl extends GroupableResourcesCoreImpl<VirtualMachine, VirtualMachineImpl, VirtualMachineInner, VirtualMachinesInner, VMwareCloudSimpleManager>  implements VirtualMachines {
    protected VirtualMachinesImpl(VMwareCloudSimpleManager manager) {
        super(manager.inner().virtualMachines(), manager);
    }

    @Override
    protected Observable<VirtualMachineInner> getInnerAsync(String resourceGroupName, String name) {
        VirtualMachinesInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    protected Completable deleteInnerAsync(String resourceGroupName, String name) {
        VirtualMachinesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<String> deleteByIdsAsync(Collection<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return Observable.empty();
        }
        Collection<Observable<String>> observables = new ArrayList<>();
        for (String id : ids) {
            final String resourceGroupName = ResourceUtilsCore.groupFromResourceId(id);
            final String name = ResourceUtilsCore.nameFromResourceId(id);
            Observable<String> o = RXMapper.map(this.inner().deleteAsync(resourceGroupName, name), id);
            observables.add(o);
        }
        return Observable.mergeDelayError(observables);
    }

    @Override
    public Observable<String> deleteByIdsAsync(String...ids) {
        return this.deleteByIdsAsync(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public void deleteByIds(Collection<String> ids) {
        if (ids != null && !ids.isEmpty()) {
            this.deleteByIdsAsync(ids).toBlocking().last();
        }
    }

    @Override
    public void deleteByIds(String...ids) {
        this.deleteByIds(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public PagedList<VirtualMachine> listByResourceGroup(String resourceGroupName) {
        VirtualMachinesInner client = this.inner();
        return this.wrapList(client.listByResourceGroup(resourceGroupName));
    }

    @Override
    public Observable<VirtualMachine> listByResourceGroupAsync(String resourceGroupName) {
        VirtualMachinesInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMapIterable(new Func1<Page<VirtualMachineInner>, Iterable<VirtualMachineInner>>() {
            @Override
            public Iterable<VirtualMachineInner> call(Page<VirtualMachineInner> page) {
                return page.items();
            }
        })
        .map(new Func1<VirtualMachineInner, VirtualMachine>() {
            @Override
            public VirtualMachine call(VirtualMachineInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public PagedList<VirtualMachine> list() {
        VirtualMachinesInner client = this.inner();
        return this.wrapList(client.list());
    }

    @Override
    public Observable<VirtualMachine> listAsync() {
        VirtualMachinesInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<VirtualMachineInner>, Iterable<VirtualMachineInner>>() {
            @Override
            public Iterable<VirtualMachineInner> call(Page<VirtualMachineInner> page) {
                return page.items();
            }
        })
        .map(new Func1<VirtualMachineInner, VirtualMachine>() {
            @Override
            public VirtualMachine call(VirtualMachineInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public VirtualMachineImpl define(String name) {
        return wrapModel(name);
    }

    @Override
    public Completable startAsync(String resourceGroupName, String virtualMachineName) {
        VirtualMachinesInner client = this.inner();
        return client.startAsync(resourceGroupName, virtualMachineName).toCompletable();
    }

    @Override
    public Completable stopAsync(String resourceGroupName, String virtualMachineName) {
        VirtualMachinesInner client = this.inner();
        return client.stopAsync(resourceGroupName, virtualMachineName).toCompletable();
    }

    @Override
    protected VirtualMachineImpl wrapModel(VirtualMachineInner inner) {
        return  new VirtualMachineImpl(inner.name(), inner, manager());
    }

    @Override
    protected VirtualMachineImpl wrapModel(String name) {
        return new VirtualMachineImpl(name, new VirtualMachineInner(), this.manager());
    }

}
