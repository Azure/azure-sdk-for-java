/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.CSRPErrorException;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.DedicatedCloudNodesCreateOrUpdateHeaders;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.DedicatedCloudNodesDeleteHeaders;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.PatchPayload;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in DedicatedCloudNodes.
 */
public class DedicatedCloudNodesInner implements InnerSupportsGet<DedicatedCloudNodeInner>, InnerSupportsDelete<Void>, InnerSupportsListing<DedicatedCloudNodeInner> {
    /** The Retrofit service to perform REST calls. */
    private DedicatedCloudNodesService service;
    /** The service client containing this operation class. */
    private VMwareCloudSimpleClientImpl client;

    /**
     * Initializes an instance of DedicatedCloudNodesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DedicatedCloudNodesInner(Retrofit retrofit, VMwareCloudSimpleClientImpl client) {
        this.service = retrofit.create(DedicatedCloudNodesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for DedicatedCloudNodes to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DedicatedCloudNodesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.DedicatedCloudNodes list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skipToken") String skipToken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.DedicatedCloudNodes listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skipToken") String skipToken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.DedicatedCloudNodes getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dedicatedCloudNodeName") String dedicatedCloudNodeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.DedicatedCloudNodes createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dedicatedCloudNodeName") String dedicatedCloudNodeName, @Header("Referer") String referer, @Body DedicatedCloudNodeInner dedicatedCloudNodeRequest, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.DedicatedCloudNodes beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dedicatedCloudNodeName") String dedicatedCloudNodeName, @Header("Referer") String referer, @Body DedicatedCloudNodeInner dedicatedCloudNodeRequest, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.DedicatedCloudNodes delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dedicatedCloudNodeName") String dedicatedCloudNodeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.DedicatedCloudNodes update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dedicatedCloudNodeName") String dedicatedCloudNodeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body PatchPayload dedicatedCloudNodeRequest, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.DedicatedCloudNodes listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.DedicatedCloudNodes listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Implements list of dedicated cloud nodes within subscription method.
     * Returns list of dedicate cloud nodes within subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DedicatedCloudNodeInner&gt; object if successful.
     */
    public PagedList<DedicatedCloudNodeInner> list() {
        ServiceResponse<Page<DedicatedCloudNodeInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<DedicatedCloudNodeInner>(response.body()) {
            @Override
            public Page<DedicatedCloudNodeInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Implements list of dedicated cloud nodes within subscription method.
     * Returns list of dedicate cloud nodes within subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DedicatedCloudNodeInner>> listAsync(final ListOperationCallback<DedicatedCloudNodeInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Implements list of dedicated cloud nodes within subscription method.
     * Returns list of dedicate cloud nodes within subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DedicatedCloudNodeInner&gt; object
     */
    public Observable<Page<DedicatedCloudNodeInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<DedicatedCloudNodeInner>>, Page<DedicatedCloudNodeInner>>() {
                @Override
                public Page<DedicatedCloudNodeInner> call(ServiceResponse<Page<DedicatedCloudNodeInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Implements list of dedicated cloud nodes within subscription method.
     * Returns list of dedicate cloud nodes within subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DedicatedCloudNodeInner&gt; object
     */
    public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<DedicatedCloudNodeInner>>, Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> call(ServiceResponse<Page<DedicatedCloudNodeInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Implements list of dedicated cloud nodes within subscription method.
     * Returns list of dedicate cloud nodes within subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DedicatedCloudNodeInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        final String skipToken = null;
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), filter, top, skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DedicatedCloudNodeInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DedicatedCloudNodeInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Implements list of dedicated cloud nodes within subscription method.
     * Returns list of dedicate cloud nodes within subscription.
     *
     * @param filter The filter to apply on the list operation
     * @param top The maximum number of record sets to return
     * @param skipToken to be used by nextLink implementation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DedicatedCloudNodeInner&gt; object if successful.
     */
    public PagedList<DedicatedCloudNodeInner> list(final String filter, final Integer top, final String skipToken) {
        ServiceResponse<Page<DedicatedCloudNodeInner>> response = listSinglePageAsync(filter, top, skipToken).toBlocking().single();
        return new PagedList<DedicatedCloudNodeInner>(response.body()) {
            @Override
            public Page<DedicatedCloudNodeInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Implements list of dedicated cloud nodes within subscription method.
     * Returns list of dedicate cloud nodes within subscription.
     *
     * @param filter The filter to apply on the list operation
     * @param top The maximum number of record sets to return
     * @param skipToken to be used by nextLink implementation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DedicatedCloudNodeInner>> listAsync(final String filter, final Integer top, final String skipToken, final ListOperationCallback<DedicatedCloudNodeInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(filter, top, skipToken),
            new Func1<String, Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Implements list of dedicated cloud nodes within subscription method.
     * Returns list of dedicate cloud nodes within subscription.
     *
     * @param filter The filter to apply on the list operation
     * @param top The maximum number of record sets to return
     * @param skipToken to be used by nextLink implementation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DedicatedCloudNodeInner&gt; object
     */
    public Observable<Page<DedicatedCloudNodeInner>> listAsync(final String filter, final Integer top, final String skipToken) {
        return listWithServiceResponseAsync(filter, top, skipToken)
            .map(new Func1<ServiceResponse<Page<DedicatedCloudNodeInner>>, Page<DedicatedCloudNodeInner>>() {
                @Override
                public Page<DedicatedCloudNodeInner> call(ServiceResponse<Page<DedicatedCloudNodeInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Implements list of dedicated cloud nodes within subscription method.
     * Returns list of dedicate cloud nodes within subscription.
     *
     * @param filter The filter to apply on the list operation
     * @param top The maximum number of record sets to return
     * @param skipToken to be used by nextLink implementation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DedicatedCloudNodeInner&gt; object
     */
    public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> listWithServiceResponseAsync(final String filter, final Integer top, final String skipToken) {
        return listSinglePageAsync(filter, top, skipToken)
            .concatMap(new Func1<ServiceResponse<Page<DedicatedCloudNodeInner>>, Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> call(ServiceResponse<Page<DedicatedCloudNodeInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Implements list of dedicated cloud nodes within subscription method.
     * Returns list of dedicate cloud nodes within subscription.
     *
    ServiceResponse<PageImpl<DedicatedCloudNodeInner>> * @param filter The filter to apply on the list operation
    ServiceResponse<PageImpl<DedicatedCloudNodeInner>> * @param top The maximum number of record sets to return
    ServiceResponse<PageImpl<DedicatedCloudNodeInner>> * @param skipToken to be used by nextLink implementation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DedicatedCloudNodeInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> listSinglePageAsync(final String filter, final Integer top, final String skipToken) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), filter, top, skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DedicatedCloudNodeInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DedicatedCloudNodeInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DedicatedCloudNodeInner>> listDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DedicatedCloudNodeInner>, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DedicatedCloudNodeInner>>() { }.getType())
                .registerError(CSRPErrorException.class)
                .build(response);
    }

    /**
     * Implements list of dedicated cloud nodes within RG method.
     * Returns list of dedicate cloud nodes within resource group.
     *
     * @param resourceGroupName The name of the resource group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DedicatedCloudNodeInner&gt; object if successful.
     */
    public PagedList<DedicatedCloudNodeInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<DedicatedCloudNodeInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<DedicatedCloudNodeInner>(response.body()) {
            @Override
            public Page<DedicatedCloudNodeInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Implements list of dedicated cloud nodes within RG method.
     * Returns list of dedicate cloud nodes within resource group.
     *
     * @param resourceGroupName The name of the resource group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DedicatedCloudNodeInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<DedicatedCloudNodeInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Implements list of dedicated cloud nodes within RG method.
     * Returns list of dedicate cloud nodes within resource group.
     *
     * @param resourceGroupName The name of the resource group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DedicatedCloudNodeInner&gt; object
     */
    public Observable<Page<DedicatedCloudNodeInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<DedicatedCloudNodeInner>>, Page<DedicatedCloudNodeInner>>() {
                @Override
                public Page<DedicatedCloudNodeInner> call(ServiceResponse<Page<DedicatedCloudNodeInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Implements list of dedicated cloud nodes within RG method.
     * Returns list of dedicate cloud nodes within resource group.
     *
     * @param resourceGroupName The name of the resource group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DedicatedCloudNodeInner&gt; object
     */
    public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<DedicatedCloudNodeInner>>, Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> call(ServiceResponse<Page<DedicatedCloudNodeInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Implements list of dedicated cloud nodes within RG method.
     * Returns list of dedicate cloud nodes within resource group.
     *
     * @param resourceGroupName The name of the resource group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DedicatedCloudNodeInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        final String skipToken = null;
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), filter, top, skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DedicatedCloudNodeInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DedicatedCloudNodeInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Implements list of dedicated cloud nodes within RG method.
     * Returns list of dedicate cloud nodes within resource group.
     *
     * @param resourceGroupName The name of the resource group
     * @param filter The filter to apply on the list operation
     * @param top The maximum number of record sets to return
     * @param skipToken to be used by nextLink implementation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DedicatedCloudNodeInner&gt; object if successful.
     */
    public PagedList<DedicatedCloudNodeInner> listByResourceGroup(final String resourceGroupName, final String filter, final Integer top, final String skipToken) {
        ServiceResponse<Page<DedicatedCloudNodeInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName, filter, top, skipToken).toBlocking().single();
        return new PagedList<DedicatedCloudNodeInner>(response.body()) {
            @Override
            public Page<DedicatedCloudNodeInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Implements list of dedicated cloud nodes within RG method.
     * Returns list of dedicate cloud nodes within resource group.
     *
     * @param resourceGroupName The name of the resource group
     * @param filter The filter to apply on the list operation
     * @param top The maximum number of record sets to return
     * @param skipToken to be used by nextLink implementation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DedicatedCloudNodeInner>> listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final String skipToken, final ListOperationCallback<DedicatedCloudNodeInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName, filter, top, skipToken),
            new Func1<String, Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Implements list of dedicated cloud nodes within RG method.
     * Returns list of dedicate cloud nodes within resource group.
     *
     * @param resourceGroupName The name of the resource group
     * @param filter The filter to apply on the list operation
     * @param top The maximum number of record sets to return
     * @param skipToken to be used by nextLink implementation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DedicatedCloudNodeInner&gt; object
     */
    public Observable<Page<DedicatedCloudNodeInner>> listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final String skipToken) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName, filter, top, skipToken)
            .map(new Func1<ServiceResponse<Page<DedicatedCloudNodeInner>>, Page<DedicatedCloudNodeInner>>() {
                @Override
                public Page<DedicatedCloudNodeInner> call(ServiceResponse<Page<DedicatedCloudNodeInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Implements list of dedicated cloud nodes within RG method.
     * Returns list of dedicate cloud nodes within resource group.
     *
     * @param resourceGroupName The name of the resource group
     * @param filter The filter to apply on the list operation
     * @param top The maximum number of record sets to return
     * @param skipToken to be used by nextLink implementation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DedicatedCloudNodeInner&gt; object
     */
    public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String filter, final Integer top, final String skipToken) {
        return listByResourceGroupSinglePageAsync(resourceGroupName, filter, top, skipToken)
            .concatMap(new Func1<ServiceResponse<Page<DedicatedCloudNodeInner>>, Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> call(ServiceResponse<Page<DedicatedCloudNodeInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Implements list of dedicated cloud nodes within RG method.
     * Returns list of dedicate cloud nodes within resource group.
     *
    ServiceResponse<PageImpl<DedicatedCloudNodeInner>> * @param resourceGroupName The name of the resource group
    ServiceResponse<PageImpl<DedicatedCloudNodeInner>> * @param filter The filter to apply on the list operation
    ServiceResponse<PageImpl<DedicatedCloudNodeInner>> * @param top The maximum number of record sets to return
    ServiceResponse<PageImpl<DedicatedCloudNodeInner>> * @param skipToken to be used by nextLink implementation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DedicatedCloudNodeInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName, final String filter, final Integer top, final String skipToken) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), filter, top, skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DedicatedCloudNodeInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DedicatedCloudNodeInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DedicatedCloudNodeInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DedicatedCloudNodeInner>, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DedicatedCloudNodeInner>>() { }.getType())
                .registerError(CSRPErrorException.class)
                .build(response);
    }

    /**
     * Implements dedicated cloud node GET method.
     * Returns dedicated cloud node.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DedicatedCloudNodeInner object if successful.
     */
    public DedicatedCloudNodeInner getByResourceGroup(String resourceGroupName, String dedicatedCloudNodeName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, dedicatedCloudNodeName).toBlocking().single().body();
    }

    /**
     * Implements dedicated cloud node GET method.
     * Returns dedicated cloud node.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DedicatedCloudNodeInner> getByResourceGroupAsync(String resourceGroupName, String dedicatedCloudNodeName, final ServiceCallback<DedicatedCloudNodeInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, dedicatedCloudNodeName), serviceCallback);
    }

    /**
     * Implements dedicated cloud node GET method.
     * Returns dedicated cloud node.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DedicatedCloudNodeInner object
     */
    public Observable<DedicatedCloudNodeInner> getByResourceGroupAsync(String resourceGroupName, String dedicatedCloudNodeName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, dedicatedCloudNodeName).map(new Func1<ServiceResponse<DedicatedCloudNodeInner>, DedicatedCloudNodeInner>() {
            @Override
            public DedicatedCloudNodeInner call(ServiceResponse<DedicatedCloudNodeInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements dedicated cloud node GET method.
     * Returns dedicated cloud node.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DedicatedCloudNodeInner object
     */
    public Observable<ServiceResponse<DedicatedCloudNodeInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String dedicatedCloudNodeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dedicatedCloudNodeName == null) {
            throw new IllegalArgumentException("Parameter dedicatedCloudNodeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, dedicatedCloudNodeName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DedicatedCloudNodeInner>>>() {
                @Override
                public Observable<ServiceResponse<DedicatedCloudNodeInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DedicatedCloudNodeInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DedicatedCloudNodeInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DedicatedCloudNodeInner, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DedicatedCloudNodeInner>() { }.getType())
                .registerError(CSRPErrorException.class)
                .build(response);
    }

    /**
     * Implements dedicated cloud node PUT method.
     * Returns dedicated cloud node by its name.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @param dedicatedCloudNodeRequest Create Dedicated Cloud Node request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DedicatedCloudNodeInner object if successful.
     */
    public DedicatedCloudNodeInner createOrUpdate(String resourceGroupName, String dedicatedCloudNodeName, DedicatedCloudNodeInner dedicatedCloudNodeRequest) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, dedicatedCloudNodeName, dedicatedCloudNodeRequest).toBlocking().last().body();
    }

    /**
     * Implements dedicated cloud node PUT method.
     * Returns dedicated cloud node by its name.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @param dedicatedCloudNodeRequest Create Dedicated Cloud Node request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DedicatedCloudNodeInner> createOrUpdateAsync(String resourceGroupName, String dedicatedCloudNodeName, DedicatedCloudNodeInner dedicatedCloudNodeRequest, final ServiceCallback<DedicatedCloudNodeInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, dedicatedCloudNodeName, dedicatedCloudNodeRequest), serviceCallback);
    }

    /**
     * Implements dedicated cloud node PUT method.
     * Returns dedicated cloud node by its name.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @param dedicatedCloudNodeRequest Create Dedicated Cloud Node request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DedicatedCloudNodeInner> createOrUpdateAsync(String resourceGroupName, String dedicatedCloudNodeName, DedicatedCloudNodeInner dedicatedCloudNodeRequest) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, dedicatedCloudNodeName, dedicatedCloudNodeRequest).map(new Func1<ServiceResponseWithHeaders<DedicatedCloudNodeInner, DedicatedCloudNodesCreateOrUpdateHeaders>, DedicatedCloudNodeInner>() {
            @Override
            public DedicatedCloudNodeInner call(ServiceResponseWithHeaders<DedicatedCloudNodeInner, DedicatedCloudNodesCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements dedicated cloud node PUT method.
     * Returns dedicated cloud node by its name.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @param dedicatedCloudNodeRequest Create Dedicated Cloud Node request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<DedicatedCloudNodeInner, DedicatedCloudNodesCreateOrUpdateHeaders>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String dedicatedCloudNodeName, DedicatedCloudNodeInner dedicatedCloudNodeRequest) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dedicatedCloudNodeName == null) {
            throw new IllegalArgumentException("Parameter dedicatedCloudNodeName is required and cannot be null.");
        }
        if (this.client.referer() == null) {
            throw new IllegalArgumentException("Parameter this.client.referer() is required and cannot be null.");
        }
        if (dedicatedCloudNodeRequest == null) {
            throw new IllegalArgumentException("Parameter dedicatedCloudNodeRequest is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(dedicatedCloudNodeRequest);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, dedicatedCloudNodeName, this.client.referer(), dedicatedCloudNodeRequest, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultWithHeadersAsync(observable, new TypeToken<DedicatedCloudNodeInner>() { }.getType(), DedicatedCloudNodesCreateOrUpdateHeaders.class);
    }

    /**
     * Implements dedicated cloud node PUT method.
     * Returns dedicated cloud node by its name.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @param dedicatedCloudNodeRequest Create Dedicated Cloud Node request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DedicatedCloudNodeInner object if successful.
     */
    public DedicatedCloudNodeInner beginCreateOrUpdate(String resourceGroupName, String dedicatedCloudNodeName, DedicatedCloudNodeInner dedicatedCloudNodeRequest) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, dedicatedCloudNodeName, dedicatedCloudNodeRequest).toBlocking().single().body();
    }

    /**
     * Implements dedicated cloud node PUT method.
     * Returns dedicated cloud node by its name.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @param dedicatedCloudNodeRequest Create Dedicated Cloud Node request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DedicatedCloudNodeInner> beginCreateOrUpdateAsync(String resourceGroupName, String dedicatedCloudNodeName, DedicatedCloudNodeInner dedicatedCloudNodeRequest, final ServiceCallback<DedicatedCloudNodeInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, dedicatedCloudNodeName, dedicatedCloudNodeRequest), serviceCallback);
    }

    /**
     * Implements dedicated cloud node PUT method.
     * Returns dedicated cloud node by its name.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @param dedicatedCloudNodeRequest Create Dedicated Cloud Node request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DedicatedCloudNodeInner object
     */
    public Observable<DedicatedCloudNodeInner> beginCreateOrUpdateAsync(String resourceGroupName, String dedicatedCloudNodeName, DedicatedCloudNodeInner dedicatedCloudNodeRequest) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, dedicatedCloudNodeName, dedicatedCloudNodeRequest).map(new Func1<ServiceResponseWithHeaders<DedicatedCloudNodeInner, DedicatedCloudNodesCreateOrUpdateHeaders>, DedicatedCloudNodeInner>() {
            @Override
            public DedicatedCloudNodeInner call(ServiceResponseWithHeaders<DedicatedCloudNodeInner, DedicatedCloudNodesCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements dedicated cloud node PUT method.
     * Returns dedicated cloud node by its name.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @param dedicatedCloudNodeRequest Create Dedicated Cloud Node request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DedicatedCloudNodeInner object
     */
    public Observable<ServiceResponseWithHeaders<DedicatedCloudNodeInner, DedicatedCloudNodesCreateOrUpdateHeaders>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String dedicatedCloudNodeName, DedicatedCloudNodeInner dedicatedCloudNodeRequest) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dedicatedCloudNodeName == null) {
            throw new IllegalArgumentException("Parameter dedicatedCloudNodeName is required and cannot be null.");
        }
        if (this.client.referer() == null) {
            throw new IllegalArgumentException("Parameter this.client.referer() is required and cannot be null.");
        }
        if (dedicatedCloudNodeRequest == null) {
            throw new IllegalArgumentException("Parameter dedicatedCloudNodeRequest is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(dedicatedCloudNodeRequest);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, dedicatedCloudNodeName, this.client.referer(), dedicatedCloudNodeRequest, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<DedicatedCloudNodeInner, DedicatedCloudNodesCreateOrUpdateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<DedicatedCloudNodeInner, DedicatedCloudNodesCreateOrUpdateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<DedicatedCloudNodeInner, DedicatedCloudNodesCreateOrUpdateHeaders> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<DedicatedCloudNodeInner, DedicatedCloudNodesCreateOrUpdateHeaders> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DedicatedCloudNodeInner, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DedicatedCloudNodeInner>() { }.getType())
                .registerError(CSRPErrorException.class)
                .buildWithHeaders(response, DedicatedCloudNodesCreateOrUpdateHeaders.class);
    }

    /**
     * Implements dedicated cloud node DELETE method.
     * Delete dedicated cloud node.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String dedicatedCloudNodeName) {
        deleteWithServiceResponseAsync(resourceGroupName, dedicatedCloudNodeName).toBlocking().single().body();
    }

    /**
     * Implements dedicated cloud node DELETE method.
     * Delete dedicated cloud node.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String dedicatedCloudNodeName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(deleteWithServiceResponseAsync(resourceGroupName, dedicatedCloudNodeName), serviceCallback);
    }

    /**
     * Implements dedicated cloud node DELETE method.
     * Delete dedicated cloud node.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String dedicatedCloudNodeName) {
        return deleteWithServiceResponseAsync(resourceGroupName, dedicatedCloudNodeName).map(new Func1<ServiceResponseWithHeaders<Void, DedicatedCloudNodesDeleteHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, DedicatedCloudNodesDeleteHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements dedicated cloud node DELETE method.
     * Delete dedicated cloud node.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, DedicatedCloudNodesDeleteHeaders>> deleteWithServiceResponseAsync(String resourceGroupName, String dedicatedCloudNodeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dedicatedCloudNodeName == null) {
            throw new IllegalArgumentException("Parameter dedicatedCloudNodeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, dedicatedCloudNodeName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, DedicatedCloudNodesDeleteHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, DedicatedCloudNodesDeleteHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<Void, DedicatedCloudNodesDeleteHeaders> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, DedicatedCloudNodesDeleteHeaders> deleteDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CSRPErrorException.class)
                .buildWithHeaders(response, DedicatedCloudNodesDeleteHeaders.class);
    }

    /**
     * Implements dedicated cloud node PATCH method.
     * Patches dedicated node properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DedicatedCloudNodeInner object if successful.
     */
    public DedicatedCloudNodeInner update(String resourceGroupName, String dedicatedCloudNodeName) {
        return updateWithServiceResponseAsync(resourceGroupName, dedicatedCloudNodeName).toBlocking().single().body();
    }

    /**
     * Implements dedicated cloud node PATCH method.
     * Patches dedicated node properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DedicatedCloudNodeInner> updateAsync(String resourceGroupName, String dedicatedCloudNodeName, final ServiceCallback<DedicatedCloudNodeInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, dedicatedCloudNodeName), serviceCallback);
    }

    /**
     * Implements dedicated cloud node PATCH method.
     * Patches dedicated node properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DedicatedCloudNodeInner object
     */
    public Observable<DedicatedCloudNodeInner> updateAsync(String resourceGroupName, String dedicatedCloudNodeName) {
        return updateWithServiceResponseAsync(resourceGroupName, dedicatedCloudNodeName).map(new Func1<ServiceResponse<DedicatedCloudNodeInner>, DedicatedCloudNodeInner>() {
            @Override
            public DedicatedCloudNodeInner call(ServiceResponse<DedicatedCloudNodeInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements dedicated cloud node PATCH method.
     * Patches dedicated node properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DedicatedCloudNodeInner object
     */
    public Observable<ServiceResponse<DedicatedCloudNodeInner>> updateWithServiceResponseAsync(String resourceGroupName, String dedicatedCloudNodeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dedicatedCloudNodeName == null) {
            throw new IllegalArgumentException("Parameter dedicatedCloudNodeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        PatchPayload dedicatedCloudNodeRequest = new PatchPayload();
        dedicatedCloudNodeRequest.withTags(null);
        return service.update(this.client.subscriptionId(), resourceGroupName, dedicatedCloudNodeName, this.client.apiVersion(), this.client.acceptLanguage(), dedicatedCloudNodeRequest, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DedicatedCloudNodeInner>>>() {
                @Override
                public Observable<ServiceResponse<DedicatedCloudNodeInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DedicatedCloudNodeInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Implements dedicated cloud node PATCH method.
     * Patches dedicated node properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @param tags The tags key:value pairs
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DedicatedCloudNodeInner object if successful.
     */
    public DedicatedCloudNodeInner update(String resourceGroupName, String dedicatedCloudNodeName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, dedicatedCloudNodeName, tags).toBlocking().single().body();
    }

    /**
     * Implements dedicated cloud node PATCH method.
     * Patches dedicated node properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @param tags The tags key:value pairs
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DedicatedCloudNodeInner> updateAsync(String resourceGroupName, String dedicatedCloudNodeName, Map<String, String> tags, final ServiceCallback<DedicatedCloudNodeInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, dedicatedCloudNodeName, tags), serviceCallback);
    }

    /**
     * Implements dedicated cloud node PATCH method.
     * Patches dedicated node properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @param tags The tags key:value pairs
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DedicatedCloudNodeInner object
     */
    public Observable<DedicatedCloudNodeInner> updateAsync(String resourceGroupName, String dedicatedCloudNodeName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, dedicatedCloudNodeName, tags).map(new Func1<ServiceResponse<DedicatedCloudNodeInner>, DedicatedCloudNodeInner>() {
            @Override
            public DedicatedCloudNodeInner call(ServiceResponse<DedicatedCloudNodeInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements dedicated cloud node PATCH method.
     * Patches dedicated node properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param dedicatedCloudNodeName dedicated cloud node name
     * @param tags The tags key:value pairs
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DedicatedCloudNodeInner object
     */
    public Observable<ServiceResponse<DedicatedCloudNodeInner>> updateWithServiceResponseAsync(String resourceGroupName, String dedicatedCloudNodeName, Map<String, String> tags) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dedicatedCloudNodeName == null) {
            throw new IllegalArgumentException("Parameter dedicatedCloudNodeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        PatchPayload dedicatedCloudNodeRequest = new PatchPayload();
        dedicatedCloudNodeRequest.withTags(tags);
        return service.update(this.client.subscriptionId(), resourceGroupName, dedicatedCloudNodeName, this.client.apiVersion(), this.client.acceptLanguage(), dedicatedCloudNodeRequest, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DedicatedCloudNodeInner>>>() {
                @Override
                public Observable<ServiceResponse<DedicatedCloudNodeInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DedicatedCloudNodeInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DedicatedCloudNodeInner> updateDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DedicatedCloudNodeInner, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DedicatedCloudNodeInner>() { }.getType())
                .registerError(CSRPErrorException.class)
                .build(response);
    }

    /**
     * Implements list of dedicated cloud nodes within subscription method.
     * Returns list of dedicate cloud nodes within subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DedicatedCloudNodeInner&gt; object if successful.
     */
    public PagedList<DedicatedCloudNodeInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<DedicatedCloudNodeInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<DedicatedCloudNodeInner>(response.body()) {
            @Override
            public Page<DedicatedCloudNodeInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Implements list of dedicated cloud nodes within subscription method.
     * Returns list of dedicate cloud nodes within subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DedicatedCloudNodeInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<DedicatedCloudNodeInner>> serviceFuture, final ListOperationCallback<DedicatedCloudNodeInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Implements list of dedicated cloud nodes within subscription method.
     * Returns list of dedicate cloud nodes within subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DedicatedCloudNodeInner&gt; object
     */
    public Observable<Page<DedicatedCloudNodeInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<DedicatedCloudNodeInner>>, Page<DedicatedCloudNodeInner>>() {
                @Override
                public Page<DedicatedCloudNodeInner> call(ServiceResponse<Page<DedicatedCloudNodeInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Implements list of dedicated cloud nodes within subscription method.
     * Returns list of dedicate cloud nodes within subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DedicatedCloudNodeInner&gt; object
     */
    public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<DedicatedCloudNodeInner>>, Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> call(ServiceResponse<Page<DedicatedCloudNodeInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Implements list of dedicated cloud nodes within subscription method.
     * Returns list of dedicate cloud nodes within subscription.
     *
    ServiceResponse<PageImpl<DedicatedCloudNodeInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DedicatedCloudNodeInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DedicatedCloudNodeInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DedicatedCloudNodeInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DedicatedCloudNodeInner>> listNextDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DedicatedCloudNodeInner>, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DedicatedCloudNodeInner>>() { }.getType())
                .registerError(CSRPErrorException.class)
                .build(response);
    }

    /**
     * Implements list of dedicated cloud nodes within RG method.
     * Returns list of dedicate cloud nodes within resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DedicatedCloudNodeInner&gt; object if successful.
     */
    public PagedList<DedicatedCloudNodeInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<DedicatedCloudNodeInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<DedicatedCloudNodeInner>(response.body()) {
            @Override
            public Page<DedicatedCloudNodeInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Implements list of dedicated cloud nodes within RG method.
     * Returns list of dedicate cloud nodes within resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DedicatedCloudNodeInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<DedicatedCloudNodeInner>> serviceFuture, final ListOperationCallback<DedicatedCloudNodeInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Implements list of dedicated cloud nodes within RG method.
     * Returns list of dedicate cloud nodes within resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DedicatedCloudNodeInner&gt; object
     */
    public Observable<Page<DedicatedCloudNodeInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<DedicatedCloudNodeInner>>, Page<DedicatedCloudNodeInner>>() {
                @Override
                public Page<DedicatedCloudNodeInner> call(ServiceResponse<Page<DedicatedCloudNodeInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Implements list of dedicated cloud nodes within RG method.
     * Returns list of dedicate cloud nodes within resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DedicatedCloudNodeInner&gt; object
     */
    public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<DedicatedCloudNodeInner>>, Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> call(ServiceResponse<Page<DedicatedCloudNodeInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Implements list of dedicated cloud nodes within RG method.
     * Returns list of dedicate cloud nodes within resource group.
     *
    ServiceResponse<PageImpl<DedicatedCloudNodeInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DedicatedCloudNodeInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DedicatedCloudNodeInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DedicatedCloudNodeInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DedicatedCloudNodeInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DedicatedCloudNodeInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DedicatedCloudNodeInner>, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DedicatedCloudNodeInner>>() { }.getType())
                .registerError(CSRPErrorException.class)
                .build(response);
    }

}
