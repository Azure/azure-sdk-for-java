/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.CSRPErrorException;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.PatchPayload;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.StopMode;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachinesCreateOrUpdateHeaders;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachinesDeleteHeaders;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachinesStartHeaders;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachinesStopHeaders;
import com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachineStopMode;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in VirtualMachines.
 */
public class VirtualMachinesInner implements InnerSupportsGet<VirtualMachineInner>, InnerSupportsDelete<Void>, InnerSupportsListing<VirtualMachineInner> {
    /** The Retrofit service to perform REST calls. */
    private VirtualMachinesService service;
    /** The service client containing this operation class. */
    private VMwareCloudSimpleClientImpl client;

    /**
     * Initializes an instance of VirtualMachinesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public VirtualMachinesInner(Retrofit retrofit, VMwareCloudSimpleClientImpl client) {
        this.service = retrofit.create(VirtualMachinesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for VirtualMachines to be
     * used by Retrofit to perform actually REST calls.
     */
    interface VirtualMachinesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachines list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/virtualMachines")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skipToken") String skipToken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachines listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$top") Integer top, @Query("$skipToken") String skipToken, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachines getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("virtualMachineName") String virtualMachineName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachines createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("virtualMachineName") String virtualMachineName, @Header("Referer") String referer, @Body VirtualMachineInner virtualMachineRequest, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachines beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("virtualMachineName") String virtualMachineName, @Header("Referer") String referer, @Body VirtualMachineInner virtualMachineRequest, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachines delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("virtualMachineName") String virtualMachineName, @Header("Referer") String referer, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachines beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("virtualMachineName") String virtualMachineName, @Header("Referer") String referer, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachines update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("virtualMachineName") String virtualMachineName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body PatchPayload virtualMachineRequest, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachines beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("virtualMachineName") String virtualMachineName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body PatchPayload virtualMachineRequest, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachines start" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}/start")
        Observable<Response<ResponseBody>> start(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("virtualMachineName") String virtualMachineName, @Header("Referer") String referer, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachines beginStart" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}/start")
        Observable<Response<ResponseBody>> beginStart(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("virtualMachineName") String virtualMachineName, @Header("Referer") String referer, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachines stop" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}/stop")
        Observable<Response<ResponseBody>> stop(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("virtualMachineName") String virtualMachineName, @Header("Referer") String referer, @Query("mode") StopMode mode, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body VirtualMachineStopMode m, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachines beginStop" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}/stop")
        Observable<Response<ResponseBody>> beginStop(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("virtualMachineName") String virtualMachineName, @Header("Referer") String referer, @Query("mode") StopMode mode, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body VirtualMachineStopMode m, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachines listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.vmwarecloudsimple.v2019_04_01.VirtualMachines listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Implements list virtual machine within subscription method.
     * Returns list virtual machine within subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;VirtualMachineInner&gt; object if successful.
     */
    public PagedList<VirtualMachineInner> list() {
        ServiceResponse<Page<VirtualMachineInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<VirtualMachineInner>(response.body()) {
            @Override
            public Page<VirtualMachineInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Implements list virtual machine within subscription method.
     * Returns list virtual machine within subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<VirtualMachineInner>> listAsync(final ListOperationCallback<VirtualMachineInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<VirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Implements list virtual machine within subscription method.
     * Returns list virtual machine within subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VirtualMachineInner&gt; object
     */
    public Observable<Page<VirtualMachineInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<VirtualMachineInner>>, Page<VirtualMachineInner>>() {
                @Override
                public Page<VirtualMachineInner> call(ServiceResponse<Page<VirtualMachineInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Implements list virtual machine within subscription method.
     * Returns list virtual machine within subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VirtualMachineInner&gt; object
     */
    public Observable<ServiceResponse<Page<VirtualMachineInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<VirtualMachineInner>>, Observable<ServiceResponse<Page<VirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineInner>>> call(ServiceResponse<Page<VirtualMachineInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Implements list virtual machine within subscription method.
     * Returns list virtual machine within subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;VirtualMachineInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<VirtualMachineInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        final String skipToken = null;
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), filter, top, skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<VirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<VirtualMachineInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<VirtualMachineInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Implements list virtual machine within subscription method.
     * Returns list virtual machine within subscription.
     *
     * @param filter The filter to apply on the list operation
     * @param top The maximum number of record sets to return
     * @param skipToken to be used by nextLink implementation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;VirtualMachineInner&gt; object if successful.
     */
    public PagedList<VirtualMachineInner> list(final String filter, final Integer top, final String skipToken) {
        ServiceResponse<Page<VirtualMachineInner>> response = listSinglePageAsync(filter, top, skipToken).toBlocking().single();
        return new PagedList<VirtualMachineInner>(response.body()) {
            @Override
            public Page<VirtualMachineInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Implements list virtual machine within subscription method.
     * Returns list virtual machine within subscription.
     *
     * @param filter The filter to apply on the list operation
     * @param top The maximum number of record sets to return
     * @param skipToken to be used by nextLink implementation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<VirtualMachineInner>> listAsync(final String filter, final Integer top, final String skipToken, final ListOperationCallback<VirtualMachineInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(filter, top, skipToken),
            new Func1<String, Observable<ServiceResponse<Page<VirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Implements list virtual machine within subscription method.
     * Returns list virtual machine within subscription.
     *
     * @param filter The filter to apply on the list operation
     * @param top The maximum number of record sets to return
     * @param skipToken to be used by nextLink implementation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VirtualMachineInner&gt; object
     */
    public Observable<Page<VirtualMachineInner>> listAsync(final String filter, final Integer top, final String skipToken) {
        return listWithServiceResponseAsync(filter, top, skipToken)
            .map(new Func1<ServiceResponse<Page<VirtualMachineInner>>, Page<VirtualMachineInner>>() {
                @Override
                public Page<VirtualMachineInner> call(ServiceResponse<Page<VirtualMachineInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Implements list virtual machine within subscription method.
     * Returns list virtual machine within subscription.
     *
     * @param filter The filter to apply on the list operation
     * @param top The maximum number of record sets to return
     * @param skipToken to be used by nextLink implementation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VirtualMachineInner&gt; object
     */
    public Observable<ServiceResponse<Page<VirtualMachineInner>>> listWithServiceResponseAsync(final String filter, final Integer top, final String skipToken) {
        return listSinglePageAsync(filter, top, skipToken)
            .concatMap(new Func1<ServiceResponse<Page<VirtualMachineInner>>, Observable<ServiceResponse<Page<VirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineInner>>> call(ServiceResponse<Page<VirtualMachineInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Implements list virtual machine within subscription method.
     * Returns list virtual machine within subscription.
     *
    ServiceResponse<PageImpl<VirtualMachineInner>> * @param filter The filter to apply on the list operation
    ServiceResponse<PageImpl<VirtualMachineInner>> * @param top The maximum number of record sets to return
    ServiceResponse<PageImpl<VirtualMachineInner>> * @param skipToken to be used by nextLink implementation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;VirtualMachineInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<VirtualMachineInner>>> listSinglePageAsync(final String filter, final Integer top, final String skipToken) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), filter, top, skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<VirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<VirtualMachineInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<VirtualMachineInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<VirtualMachineInner>> listDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<VirtualMachineInner>, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<VirtualMachineInner>>() { }.getType())
                .registerError(CSRPErrorException.class)
                .build(response);
    }

    /**
     * Implements list virtual machine within RG method.
     * Returns list of virtual machine within resource group.
     *
     * @param resourceGroupName The name of the resource group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;VirtualMachineInner&gt; object if successful.
     */
    public PagedList<VirtualMachineInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<VirtualMachineInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<VirtualMachineInner>(response.body()) {
            @Override
            public Page<VirtualMachineInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Implements list virtual machine within RG method.
     * Returns list of virtual machine within resource group.
     *
     * @param resourceGroupName The name of the resource group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<VirtualMachineInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<VirtualMachineInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<VirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Implements list virtual machine within RG method.
     * Returns list of virtual machine within resource group.
     *
     * @param resourceGroupName The name of the resource group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VirtualMachineInner&gt; object
     */
    public Observable<Page<VirtualMachineInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<VirtualMachineInner>>, Page<VirtualMachineInner>>() {
                @Override
                public Page<VirtualMachineInner> call(ServiceResponse<Page<VirtualMachineInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Implements list virtual machine within RG method.
     * Returns list of virtual machine within resource group.
     *
     * @param resourceGroupName The name of the resource group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VirtualMachineInner&gt; object
     */
    public Observable<ServiceResponse<Page<VirtualMachineInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<VirtualMachineInner>>, Observable<ServiceResponse<Page<VirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineInner>>> call(ServiceResponse<Page<VirtualMachineInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Implements list virtual machine within RG method.
     * Returns list of virtual machine within resource group.
     *
     * @param resourceGroupName The name of the resource group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;VirtualMachineInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<VirtualMachineInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        final String skipToken = null;
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), filter, top, skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<VirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<VirtualMachineInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<VirtualMachineInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Implements list virtual machine within RG method.
     * Returns list of virtual machine within resource group.
     *
     * @param resourceGroupName The name of the resource group
     * @param filter The filter to apply on the list operation
     * @param top The maximum number of record sets to return
     * @param skipToken to be used by nextLink implementation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;VirtualMachineInner&gt; object if successful.
     */
    public PagedList<VirtualMachineInner> listByResourceGroup(final String resourceGroupName, final String filter, final Integer top, final String skipToken) {
        ServiceResponse<Page<VirtualMachineInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName, filter, top, skipToken).toBlocking().single();
        return new PagedList<VirtualMachineInner>(response.body()) {
            @Override
            public Page<VirtualMachineInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Implements list virtual machine within RG method.
     * Returns list of virtual machine within resource group.
     *
     * @param resourceGroupName The name of the resource group
     * @param filter The filter to apply on the list operation
     * @param top The maximum number of record sets to return
     * @param skipToken to be used by nextLink implementation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<VirtualMachineInner>> listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final String skipToken, final ListOperationCallback<VirtualMachineInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName, filter, top, skipToken),
            new Func1<String, Observable<ServiceResponse<Page<VirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Implements list virtual machine within RG method.
     * Returns list of virtual machine within resource group.
     *
     * @param resourceGroupName The name of the resource group
     * @param filter The filter to apply on the list operation
     * @param top The maximum number of record sets to return
     * @param skipToken to be used by nextLink implementation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VirtualMachineInner&gt; object
     */
    public Observable<Page<VirtualMachineInner>> listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final String skipToken) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName, filter, top, skipToken)
            .map(new Func1<ServiceResponse<Page<VirtualMachineInner>>, Page<VirtualMachineInner>>() {
                @Override
                public Page<VirtualMachineInner> call(ServiceResponse<Page<VirtualMachineInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Implements list virtual machine within RG method.
     * Returns list of virtual machine within resource group.
     *
     * @param resourceGroupName The name of the resource group
     * @param filter The filter to apply on the list operation
     * @param top The maximum number of record sets to return
     * @param skipToken to be used by nextLink implementation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VirtualMachineInner&gt; object
     */
    public Observable<ServiceResponse<Page<VirtualMachineInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String filter, final Integer top, final String skipToken) {
        return listByResourceGroupSinglePageAsync(resourceGroupName, filter, top, skipToken)
            .concatMap(new Func1<ServiceResponse<Page<VirtualMachineInner>>, Observable<ServiceResponse<Page<VirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineInner>>> call(ServiceResponse<Page<VirtualMachineInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Implements list virtual machine within RG method.
     * Returns list of virtual machine within resource group.
     *
    ServiceResponse<PageImpl<VirtualMachineInner>> * @param resourceGroupName The name of the resource group
    ServiceResponse<PageImpl<VirtualMachineInner>> * @param filter The filter to apply on the list operation
    ServiceResponse<PageImpl<VirtualMachineInner>> * @param top The maximum number of record sets to return
    ServiceResponse<PageImpl<VirtualMachineInner>> * @param skipToken to be used by nextLink implementation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;VirtualMachineInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<VirtualMachineInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName, final String filter, final Integer top, final String skipToken) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), filter, top, skipToken, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<VirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<VirtualMachineInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<VirtualMachineInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<VirtualMachineInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<VirtualMachineInner>, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<VirtualMachineInner>>() { }.getType())
                .registerError(CSRPErrorException.class)
                .build(response);
    }

    /**
     * Implements virtual machine GET method.
     * Get virtual machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VirtualMachineInner object if successful.
     */
    public VirtualMachineInner getByResourceGroup(String resourceGroupName, String virtualMachineName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, virtualMachineName).toBlocking().single().body();
    }

    /**
     * Implements virtual machine GET method.
     * Get virtual machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VirtualMachineInner> getByResourceGroupAsync(String resourceGroupName, String virtualMachineName, final ServiceCallback<VirtualMachineInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, virtualMachineName), serviceCallback);
    }

    /**
     * Implements virtual machine GET method.
     * Get virtual machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VirtualMachineInner object
     */
    public Observable<VirtualMachineInner> getByResourceGroupAsync(String resourceGroupName, String virtualMachineName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, virtualMachineName).map(new Func1<ServiceResponse<VirtualMachineInner>, VirtualMachineInner>() {
            @Override
            public VirtualMachineInner call(ServiceResponse<VirtualMachineInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements virtual machine GET method.
     * Get virtual machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VirtualMachineInner object
     */
    public Observable<ServiceResponse<VirtualMachineInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String virtualMachineName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualMachineName == null) {
            throw new IllegalArgumentException("Parameter virtualMachineName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, virtualMachineName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<VirtualMachineInner>>>() {
                @Override
                public Observable<ServiceResponse<VirtualMachineInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<VirtualMachineInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<VirtualMachineInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<VirtualMachineInner, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<VirtualMachineInner>() { }.getType())
                .registerError(CSRPErrorException.class)
                .build(response);
    }

    /**
     * Implements virtual machine PUT method.
     * Create Or Update Virtual Machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param virtualMachineRequest Create or Update Virtual Machine request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VirtualMachineInner object if successful.
     */
    public VirtualMachineInner createOrUpdate(String resourceGroupName, String virtualMachineName, VirtualMachineInner virtualMachineRequest) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, virtualMachineName, virtualMachineRequest).toBlocking().last().body();
    }

    /**
     * Implements virtual machine PUT method.
     * Create Or Update Virtual Machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param virtualMachineRequest Create or Update Virtual Machine request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VirtualMachineInner> createOrUpdateAsync(String resourceGroupName, String virtualMachineName, VirtualMachineInner virtualMachineRequest, final ServiceCallback<VirtualMachineInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, virtualMachineName, virtualMachineRequest), serviceCallback);
    }

    /**
     * Implements virtual machine PUT method.
     * Create Or Update Virtual Machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param virtualMachineRequest Create or Update Virtual Machine request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<VirtualMachineInner> createOrUpdateAsync(String resourceGroupName, String virtualMachineName, VirtualMachineInner virtualMachineRequest) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, virtualMachineName, virtualMachineRequest).map(new Func1<ServiceResponseWithHeaders<VirtualMachineInner, VirtualMachinesCreateOrUpdateHeaders>, VirtualMachineInner>() {
            @Override
            public VirtualMachineInner call(ServiceResponseWithHeaders<VirtualMachineInner, VirtualMachinesCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements virtual machine PUT method.
     * Create Or Update Virtual Machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param virtualMachineRequest Create or Update Virtual Machine request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<VirtualMachineInner, VirtualMachinesCreateOrUpdateHeaders>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String virtualMachineName, VirtualMachineInner virtualMachineRequest) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualMachineName == null) {
            throw new IllegalArgumentException("Parameter virtualMachineName is required and cannot be null.");
        }
        if (this.client.referer() == null) {
            throw new IllegalArgumentException("Parameter this.client.referer() is required and cannot be null.");
        }
        if (virtualMachineRequest == null) {
            throw new IllegalArgumentException("Parameter virtualMachineRequest is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(virtualMachineRequest);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, virtualMachineName, this.client.referer(), virtualMachineRequest, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultWithHeadersAsync(observable, new TypeToken<VirtualMachineInner>() { }.getType(), VirtualMachinesCreateOrUpdateHeaders.class);
    }

    /**
     * Implements virtual machine PUT method.
     * Create Or Update Virtual Machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param virtualMachineRequest Create or Update Virtual Machine request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VirtualMachineInner object if successful.
     */
    public VirtualMachineInner beginCreateOrUpdate(String resourceGroupName, String virtualMachineName, VirtualMachineInner virtualMachineRequest) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, virtualMachineName, virtualMachineRequest).toBlocking().single().body();
    }

    /**
     * Implements virtual machine PUT method.
     * Create Or Update Virtual Machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param virtualMachineRequest Create or Update Virtual Machine request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VirtualMachineInner> beginCreateOrUpdateAsync(String resourceGroupName, String virtualMachineName, VirtualMachineInner virtualMachineRequest, final ServiceCallback<VirtualMachineInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, virtualMachineName, virtualMachineRequest), serviceCallback);
    }

    /**
     * Implements virtual machine PUT method.
     * Create Or Update Virtual Machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param virtualMachineRequest Create or Update Virtual Machine request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VirtualMachineInner object
     */
    public Observable<VirtualMachineInner> beginCreateOrUpdateAsync(String resourceGroupName, String virtualMachineName, VirtualMachineInner virtualMachineRequest) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, virtualMachineName, virtualMachineRequest).map(new Func1<ServiceResponseWithHeaders<VirtualMachineInner, VirtualMachinesCreateOrUpdateHeaders>, VirtualMachineInner>() {
            @Override
            public VirtualMachineInner call(ServiceResponseWithHeaders<VirtualMachineInner, VirtualMachinesCreateOrUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements virtual machine PUT method.
     * Create Or Update Virtual Machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param virtualMachineRequest Create or Update Virtual Machine request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VirtualMachineInner object
     */
    public Observable<ServiceResponseWithHeaders<VirtualMachineInner, VirtualMachinesCreateOrUpdateHeaders>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String virtualMachineName, VirtualMachineInner virtualMachineRequest) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualMachineName == null) {
            throw new IllegalArgumentException("Parameter virtualMachineName is required and cannot be null.");
        }
        if (this.client.referer() == null) {
            throw new IllegalArgumentException("Parameter this.client.referer() is required and cannot be null.");
        }
        if (virtualMachineRequest == null) {
            throw new IllegalArgumentException("Parameter virtualMachineRequest is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(virtualMachineRequest);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, virtualMachineName, this.client.referer(), virtualMachineRequest, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<VirtualMachineInner, VirtualMachinesCreateOrUpdateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<VirtualMachineInner, VirtualMachinesCreateOrUpdateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<VirtualMachineInner, VirtualMachinesCreateOrUpdateHeaders> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<VirtualMachineInner, VirtualMachinesCreateOrUpdateHeaders> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<VirtualMachineInner, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<VirtualMachineInner>() { }.getType())
                .register(201, new TypeToken<VirtualMachineInner>() { }.getType())
                .registerError(CSRPErrorException.class)
                .buildWithHeaders(response, VirtualMachinesCreateOrUpdateHeaders.class);
    }

    /**
     * Implements virtual machine DELETE method.
     * Delete virtual machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String virtualMachineName) {
        deleteWithServiceResponseAsync(resourceGroupName, virtualMachineName).toBlocking().last().body();
    }

    /**
     * Implements virtual machine DELETE method.
     * Delete virtual machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String virtualMachineName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(deleteWithServiceResponseAsync(resourceGroupName, virtualMachineName), serviceCallback);
    }

    /**
     * Implements virtual machine DELETE method.
     * Delete virtual machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String virtualMachineName) {
        return deleteWithServiceResponseAsync(resourceGroupName, virtualMachineName).map(new Func1<ServiceResponseWithHeaders<Void, VirtualMachinesDeleteHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, VirtualMachinesDeleteHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements virtual machine DELETE method.
     * Delete virtual machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<Void, VirtualMachinesDeleteHeaders>> deleteWithServiceResponseAsync(String resourceGroupName, String virtualMachineName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualMachineName == null) {
            throw new IllegalArgumentException("Parameter virtualMachineName is required and cannot be null.");
        }
        if (this.client.referer() == null) {
            throw new IllegalArgumentException("Parameter this.client.referer() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, virtualMachineName, this.client.referer(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new TypeToken<Void>() { }.getType(), VirtualMachinesDeleteHeaders.class);
    }

    /**
     * Implements virtual machine DELETE method.
     * Delete virtual machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String virtualMachineName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, virtualMachineName).toBlocking().single().body();
    }

    /**
     * Implements virtual machine DELETE method.
     * Delete virtual machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String virtualMachineName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, virtualMachineName), serviceCallback);
    }

    /**
     * Implements virtual machine DELETE method.
     * Delete virtual machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String virtualMachineName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, virtualMachineName).map(new Func1<ServiceResponseWithHeaders<Void, VirtualMachinesDeleteHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, VirtualMachinesDeleteHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements virtual machine DELETE method.
     * Delete virtual machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, VirtualMachinesDeleteHeaders>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String virtualMachineName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualMachineName == null) {
            throw new IllegalArgumentException("Parameter virtualMachineName is required and cannot be null.");
        }
        if (this.client.referer() == null) {
            throw new IllegalArgumentException("Parameter this.client.referer() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, virtualMachineName, this.client.referer(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, VirtualMachinesDeleteHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, VirtualMachinesDeleteHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<Void, VirtualMachinesDeleteHeaders> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, VirtualMachinesDeleteHeaders> beginDeleteDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CSRPErrorException.class)
                .buildWithHeaders(response, VirtualMachinesDeleteHeaders.class);
    }

    /**
     * Implements virtual machine PATCH method.
     * Patch virtual machine properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VirtualMachineInner object if successful.
     */
    public VirtualMachineInner update(String resourceGroupName, String virtualMachineName) {
        return updateWithServiceResponseAsync(resourceGroupName, virtualMachineName).toBlocking().last().body();
    }

    /**
     * Implements virtual machine PATCH method.
     * Patch virtual machine properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VirtualMachineInner> updateAsync(String resourceGroupName, String virtualMachineName, final ServiceCallback<VirtualMachineInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, virtualMachineName), serviceCallback);
    }

    /**
     * Implements virtual machine PATCH method.
     * Patch virtual machine properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<VirtualMachineInner> updateAsync(String resourceGroupName, String virtualMachineName) {
        return updateWithServiceResponseAsync(resourceGroupName, virtualMachineName).map(new Func1<ServiceResponse<VirtualMachineInner>, VirtualMachineInner>() {
            @Override
            public VirtualMachineInner call(ServiceResponse<VirtualMachineInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements virtual machine PATCH method.
     * Patch virtual machine properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<VirtualMachineInner>> updateWithServiceResponseAsync(String resourceGroupName, String virtualMachineName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualMachineName == null) {
            throw new IllegalArgumentException("Parameter virtualMachineName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        PatchPayload virtualMachineRequest = new PatchPayload();
        virtualMachineRequest.withTags(null);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, virtualMachineName, this.client.apiVersion(), this.client.acceptLanguage(), virtualMachineRequest, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<VirtualMachineInner>() { }.getType());
    }
    /**
     * Implements virtual machine PATCH method.
     * Patch virtual machine properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param tags The tags key:value pairs
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VirtualMachineInner object if successful.
     */
    public VirtualMachineInner update(String resourceGroupName, String virtualMachineName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, virtualMachineName, tags).toBlocking().last().body();
    }

    /**
     * Implements virtual machine PATCH method.
     * Patch virtual machine properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param tags The tags key:value pairs
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VirtualMachineInner> updateAsync(String resourceGroupName, String virtualMachineName, Map<String, String> tags, final ServiceCallback<VirtualMachineInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, virtualMachineName, tags), serviceCallback);
    }

    /**
     * Implements virtual machine PATCH method.
     * Patch virtual machine properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param tags The tags key:value pairs
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<VirtualMachineInner> updateAsync(String resourceGroupName, String virtualMachineName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, virtualMachineName, tags).map(new Func1<ServiceResponse<VirtualMachineInner>, VirtualMachineInner>() {
            @Override
            public VirtualMachineInner call(ServiceResponse<VirtualMachineInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements virtual machine PATCH method.
     * Patch virtual machine properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param tags The tags key:value pairs
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<VirtualMachineInner>> updateWithServiceResponseAsync(String resourceGroupName, String virtualMachineName, Map<String, String> tags) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualMachineName == null) {
            throw new IllegalArgumentException("Parameter virtualMachineName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        PatchPayload virtualMachineRequest = new PatchPayload();
        virtualMachineRequest.withTags(tags);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, virtualMachineName, this.client.apiVersion(), this.client.acceptLanguage(), virtualMachineRequest, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<VirtualMachineInner>() { }.getType());
    }

    /**
     * Implements virtual machine PATCH method.
     * Patch virtual machine properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VirtualMachineInner object if successful.
     */
    public VirtualMachineInner beginUpdate(String resourceGroupName, String virtualMachineName) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, virtualMachineName).toBlocking().single().body();
    }

    /**
     * Implements virtual machine PATCH method.
     * Patch virtual machine properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VirtualMachineInner> beginUpdateAsync(String resourceGroupName, String virtualMachineName, final ServiceCallback<VirtualMachineInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, virtualMachineName), serviceCallback);
    }

    /**
     * Implements virtual machine PATCH method.
     * Patch virtual machine properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VirtualMachineInner object
     */
    public Observable<VirtualMachineInner> beginUpdateAsync(String resourceGroupName, String virtualMachineName) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, virtualMachineName).map(new Func1<ServiceResponse<VirtualMachineInner>, VirtualMachineInner>() {
            @Override
            public VirtualMachineInner call(ServiceResponse<VirtualMachineInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements virtual machine PATCH method.
     * Patch virtual machine properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VirtualMachineInner object
     */
    public Observable<ServiceResponse<VirtualMachineInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String virtualMachineName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualMachineName == null) {
            throw new IllegalArgumentException("Parameter virtualMachineName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        PatchPayload virtualMachineRequest = new PatchPayload();
        virtualMachineRequest.withTags(null);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, virtualMachineName, this.client.apiVersion(), this.client.acceptLanguage(), virtualMachineRequest, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<VirtualMachineInner>>>() {
                @Override
                public Observable<ServiceResponse<VirtualMachineInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<VirtualMachineInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Implements virtual machine PATCH method.
     * Patch virtual machine properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param tags The tags key:value pairs
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VirtualMachineInner object if successful.
     */
    public VirtualMachineInner beginUpdate(String resourceGroupName, String virtualMachineName, Map<String, String> tags) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, virtualMachineName, tags).toBlocking().single().body();
    }

    /**
     * Implements virtual machine PATCH method.
     * Patch virtual machine properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param tags The tags key:value pairs
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<VirtualMachineInner> beginUpdateAsync(String resourceGroupName, String virtualMachineName, Map<String, String> tags, final ServiceCallback<VirtualMachineInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, virtualMachineName, tags), serviceCallback);
    }

    /**
     * Implements virtual machine PATCH method.
     * Patch virtual machine properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param tags The tags key:value pairs
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VirtualMachineInner object
     */
    public Observable<VirtualMachineInner> beginUpdateAsync(String resourceGroupName, String virtualMachineName, Map<String, String> tags) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, virtualMachineName, tags).map(new Func1<ServiceResponse<VirtualMachineInner>, VirtualMachineInner>() {
            @Override
            public VirtualMachineInner call(ServiceResponse<VirtualMachineInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements virtual machine PATCH method.
     * Patch virtual machine properties.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param tags The tags key:value pairs
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VirtualMachineInner object
     */
    public Observable<ServiceResponse<VirtualMachineInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String virtualMachineName, Map<String, String> tags) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualMachineName == null) {
            throw new IllegalArgumentException("Parameter virtualMachineName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        PatchPayload virtualMachineRequest = new PatchPayload();
        virtualMachineRequest.withTags(tags);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, virtualMachineName, this.client.apiVersion(), this.client.acceptLanguage(), virtualMachineRequest, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<VirtualMachineInner>>>() {
                @Override
                public Observable<ServiceResponse<VirtualMachineInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<VirtualMachineInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<VirtualMachineInner> beginUpdateDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<VirtualMachineInner, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<VirtualMachineInner>() { }.getType())
                .registerError(CSRPErrorException.class)
                .build(response);
    }

    /**
     * Implements a start method for a virtual machine.
     * Power on virtual machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void start(String resourceGroupName, String virtualMachineName) {
        startWithServiceResponseAsync(resourceGroupName, virtualMachineName).toBlocking().last().body();
    }

    /**
     * Implements a start method for a virtual machine.
     * Power on virtual machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> startAsync(String resourceGroupName, String virtualMachineName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(startWithServiceResponseAsync(resourceGroupName, virtualMachineName), serviceCallback);
    }

    /**
     * Implements a start method for a virtual machine.
     * Power on virtual machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> startAsync(String resourceGroupName, String virtualMachineName) {
        return startWithServiceResponseAsync(resourceGroupName, virtualMachineName).map(new Func1<ServiceResponseWithHeaders<Void, VirtualMachinesStartHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, VirtualMachinesStartHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements a start method for a virtual machine.
     * Power on virtual machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<Void, VirtualMachinesStartHeaders>> startWithServiceResponseAsync(String resourceGroupName, String virtualMachineName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualMachineName == null) {
            throw new IllegalArgumentException("Parameter virtualMachineName is required and cannot be null.");
        }
        if (this.client.referer() == null) {
            throw new IllegalArgumentException("Parameter this.client.referer() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.start(this.client.subscriptionId(), resourceGroupName, virtualMachineName, this.client.referer(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new TypeToken<Void>() { }.getType(), VirtualMachinesStartHeaders.class);
    }

    /**
     * Implements a start method for a virtual machine.
     * Power on virtual machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginStart(String resourceGroupName, String virtualMachineName) {
        beginStartWithServiceResponseAsync(resourceGroupName, virtualMachineName).toBlocking().single().body();
    }

    /**
     * Implements a start method for a virtual machine.
     * Power on virtual machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginStartAsync(String resourceGroupName, String virtualMachineName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginStartWithServiceResponseAsync(resourceGroupName, virtualMachineName), serviceCallback);
    }

    /**
     * Implements a start method for a virtual machine.
     * Power on virtual machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> beginStartAsync(String resourceGroupName, String virtualMachineName) {
        return beginStartWithServiceResponseAsync(resourceGroupName, virtualMachineName).map(new Func1<ServiceResponseWithHeaders<Void, VirtualMachinesStartHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, VirtualMachinesStartHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements a start method for a virtual machine.
     * Power on virtual machine.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, VirtualMachinesStartHeaders>> beginStartWithServiceResponseAsync(String resourceGroupName, String virtualMachineName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualMachineName == null) {
            throw new IllegalArgumentException("Parameter virtualMachineName is required and cannot be null.");
        }
        if (this.client.referer() == null) {
            throw new IllegalArgumentException("Parameter this.client.referer() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginStart(this.client.subscriptionId(), resourceGroupName, virtualMachineName, this.client.referer(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, VirtualMachinesStartHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, VirtualMachinesStartHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<Void, VirtualMachinesStartHeaders> clientResponse = beginStartDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, VirtualMachinesStartHeaders> beginStartDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CSRPErrorException.class)
                .buildWithHeaders(response, VirtualMachinesStartHeaders.class);
    }

    /**
     * Implements shutdown, poweroff, and suspend method for a virtual machine.
     * Power off virtual machine, options: shutdown, poweroff, and suspend.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void stop(String resourceGroupName, String virtualMachineName) {
        stopWithServiceResponseAsync(resourceGroupName, virtualMachineName).toBlocking().last().body();
    }

    /**
     * Implements shutdown, poweroff, and suspend method for a virtual machine.
     * Power off virtual machine, options: shutdown, poweroff, and suspend.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> stopAsync(String resourceGroupName, String virtualMachineName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(stopWithServiceResponseAsync(resourceGroupName, virtualMachineName), serviceCallback);
    }

    /**
     * Implements shutdown, poweroff, and suspend method for a virtual machine.
     * Power off virtual machine, options: shutdown, poweroff, and suspend.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> stopAsync(String resourceGroupName, String virtualMachineName) {
        return stopWithServiceResponseAsync(resourceGroupName, virtualMachineName).map(new Func1<ServiceResponseWithHeaders<Void, VirtualMachinesStopHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, VirtualMachinesStopHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements shutdown, poweroff, and suspend method for a virtual machine.
     * Power off virtual machine, options: shutdown, poweroff, and suspend.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<Void, VirtualMachinesStopHeaders>> stopWithServiceResponseAsync(String resourceGroupName, String virtualMachineName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualMachineName == null) {
            throw new IllegalArgumentException("Parameter virtualMachineName is required and cannot be null.");
        }
        if (this.client.referer() == null) {
            throw new IllegalArgumentException("Parameter this.client.referer() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final StopMode mode = null;
        final StopMode mode1 = null;
        VirtualMachineStopMode m = new VirtualMachineStopMode();
        m.withMode(null);
        Observable<Response<ResponseBody>> observable = service.stop(this.client.subscriptionId(), resourceGroupName, virtualMachineName, this.client.referer(), mode, this.client.apiVersion(), this.client.acceptLanguage(), m, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new TypeToken<Void>() { }.getType(), VirtualMachinesStopHeaders.class);
    }
    /**
     * Implements shutdown, poweroff, and suspend method for a virtual machine.
     * Power off virtual machine, options: shutdown, poweroff, and suspend.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param mode query stop mode parameter (reboot, shutdown, etc...). Possible values include: 'reboot', 'suspend', 'shutdown', 'poweroff'
     * @param mode1 mode indicates a type of stop operation - reboot, suspend, shutdown or power-off. Possible values include: 'reboot', 'suspend', 'shutdown', 'poweroff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void stop(String resourceGroupName, String virtualMachineName, StopMode mode, StopMode mode1) {
        stopWithServiceResponseAsync(resourceGroupName, virtualMachineName, mode, mode1).toBlocking().last().body();
    }

    /**
     * Implements shutdown, poweroff, and suspend method for a virtual machine.
     * Power off virtual machine, options: shutdown, poweroff, and suspend.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param mode query stop mode parameter (reboot, shutdown, etc...). Possible values include: 'reboot', 'suspend', 'shutdown', 'poweroff'
     * @param mode1 mode indicates a type of stop operation - reboot, suspend, shutdown or power-off. Possible values include: 'reboot', 'suspend', 'shutdown', 'poweroff'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> stopAsync(String resourceGroupName, String virtualMachineName, StopMode mode, StopMode mode1, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(stopWithServiceResponseAsync(resourceGroupName, virtualMachineName, mode, mode1), serviceCallback);
    }

    /**
     * Implements shutdown, poweroff, and suspend method for a virtual machine.
     * Power off virtual machine, options: shutdown, poweroff, and suspend.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param mode query stop mode parameter (reboot, shutdown, etc...). Possible values include: 'reboot', 'suspend', 'shutdown', 'poweroff'
     * @param mode1 mode indicates a type of stop operation - reboot, suspend, shutdown or power-off. Possible values include: 'reboot', 'suspend', 'shutdown', 'poweroff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> stopAsync(String resourceGroupName, String virtualMachineName, StopMode mode, StopMode mode1) {
        return stopWithServiceResponseAsync(resourceGroupName, virtualMachineName, mode, mode1).map(new Func1<ServiceResponseWithHeaders<Void, VirtualMachinesStopHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, VirtualMachinesStopHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements shutdown, poweroff, and suspend method for a virtual machine.
     * Power off virtual machine, options: shutdown, poweroff, and suspend.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param mode query stop mode parameter (reboot, shutdown, etc...). Possible values include: 'reboot', 'suspend', 'shutdown', 'poweroff'
     * @param mode1 mode indicates a type of stop operation - reboot, suspend, shutdown or power-off. Possible values include: 'reboot', 'suspend', 'shutdown', 'poweroff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<Void, VirtualMachinesStopHeaders>> stopWithServiceResponseAsync(String resourceGroupName, String virtualMachineName, StopMode mode, StopMode mode1) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualMachineName == null) {
            throw new IllegalArgumentException("Parameter virtualMachineName is required and cannot be null.");
        }
        if (this.client.referer() == null) {
            throw new IllegalArgumentException("Parameter this.client.referer() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        VirtualMachineStopMode m = null;
        if (mode1 != null) {
            m = new VirtualMachineStopMode();
            m.withMode(mode1);
        }
        Observable<Response<ResponseBody>> observable = service.stop(this.client.subscriptionId(), resourceGroupName, virtualMachineName, this.client.referer(), mode, this.client.apiVersion(), this.client.acceptLanguage(), m, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new TypeToken<Void>() { }.getType(), VirtualMachinesStopHeaders.class);
    }

    /**
     * Implements shutdown, poweroff, and suspend method for a virtual machine.
     * Power off virtual machine, options: shutdown, poweroff, and suspend.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginStop(String resourceGroupName, String virtualMachineName) {
        beginStopWithServiceResponseAsync(resourceGroupName, virtualMachineName).toBlocking().single().body();
    }

    /**
     * Implements shutdown, poweroff, and suspend method for a virtual machine.
     * Power off virtual machine, options: shutdown, poweroff, and suspend.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginStopAsync(String resourceGroupName, String virtualMachineName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginStopWithServiceResponseAsync(resourceGroupName, virtualMachineName), serviceCallback);
    }

    /**
     * Implements shutdown, poweroff, and suspend method for a virtual machine.
     * Power off virtual machine, options: shutdown, poweroff, and suspend.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> beginStopAsync(String resourceGroupName, String virtualMachineName) {
        return beginStopWithServiceResponseAsync(resourceGroupName, virtualMachineName).map(new Func1<ServiceResponseWithHeaders<Void, VirtualMachinesStopHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, VirtualMachinesStopHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements shutdown, poweroff, and suspend method for a virtual machine.
     * Power off virtual machine, options: shutdown, poweroff, and suspend.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, VirtualMachinesStopHeaders>> beginStopWithServiceResponseAsync(String resourceGroupName, String virtualMachineName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualMachineName == null) {
            throw new IllegalArgumentException("Parameter virtualMachineName is required and cannot be null.");
        }
        if (this.client.referer() == null) {
            throw new IllegalArgumentException("Parameter this.client.referer() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final StopMode mode = null;
        final StopMode mode1 = null;
        VirtualMachineStopMode m = new VirtualMachineStopMode();
        m.withMode(null);
        return service.beginStop(this.client.subscriptionId(), resourceGroupName, virtualMachineName, this.client.referer(), mode, this.client.apiVersion(), this.client.acceptLanguage(), m, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, VirtualMachinesStopHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, VirtualMachinesStopHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<Void, VirtualMachinesStopHeaders> clientResponse = beginStopDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Implements shutdown, poweroff, and suspend method for a virtual machine.
     * Power off virtual machine, options: shutdown, poweroff, and suspend.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param mode query stop mode parameter (reboot, shutdown, etc...). Possible values include: 'reboot', 'suspend', 'shutdown', 'poweroff'
     * @param mode1 mode indicates a type of stop operation - reboot, suspend, shutdown or power-off. Possible values include: 'reboot', 'suspend', 'shutdown', 'poweroff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginStop(String resourceGroupName, String virtualMachineName, StopMode mode, StopMode mode1) {
        beginStopWithServiceResponseAsync(resourceGroupName, virtualMachineName, mode, mode1).toBlocking().single().body();
    }

    /**
     * Implements shutdown, poweroff, and suspend method for a virtual machine.
     * Power off virtual machine, options: shutdown, poweroff, and suspend.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param mode query stop mode parameter (reboot, shutdown, etc...). Possible values include: 'reboot', 'suspend', 'shutdown', 'poweroff'
     * @param mode1 mode indicates a type of stop operation - reboot, suspend, shutdown or power-off. Possible values include: 'reboot', 'suspend', 'shutdown', 'poweroff'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginStopAsync(String resourceGroupName, String virtualMachineName, StopMode mode, StopMode mode1, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginStopWithServiceResponseAsync(resourceGroupName, virtualMachineName, mode, mode1), serviceCallback);
    }

    /**
     * Implements shutdown, poweroff, and suspend method for a virtual machine.
     * Power off virtual machine, options: shutdown, poweroff, and suspend.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param mode query stop mode parameter (reboot, shutdown, etc...). Possible values include: 'reboot', 'suspend', 'shutdown', 'poweroff'
     * @param mode1 mode indicates a type of stop operation - reboot, suspend, shutdown or power-off. Possible values include: 'reboot', 'suspend', 'shutdown', 'poweroff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> beginStopAsync(String resourceGroupName, String virtualMachineName, StopMode mode, StopMode mode1) {
        return beginStopWithServiceResponseAsync(resourceGroupName, virtualMachineName, mode, mode1).map(new Func1<ServiceResponseWithHeaders<Void, VirtualMachinesStopHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, VirtualMachinesStopHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Implements shutdown, poweroff, and suspend method for a virtual machine.
     * Power off virtual machine, options: shutdown, poweroff, and suspend.
     *
     * @param resourceGroupName The name of the resource group
     * @param virtualMachineName virtual machine name
     * @param mode query stop mode parameter (reboot, shutdown, etc...). Possible values include: 'reboot', 'suspend', 'shutdown', 'poweroff'
     * @param mode1 mode indicates a type of stop operation - reboot, suspend, shutdown or power-off. Possible values include: 'reboot', 'suspend', 'shutdown', 'poweroff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, VirtualMachinesStopHeaders>> beginStopWithServiceResponseAsync(String resourceGroupName, String virtualMachineName, StopMode mode, StopMode mode1) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (virtualMachineName == null) {
            throw new IllegalArgumentException("Parameter virtualMachineName is required and cannot be null.");
        }
        if (this.client.referer() == null) {
            throw new IllegalArgumentException("Parameter this.client.referer() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        VirtualMachineStopMode m = null;
        if (mode1 != null) {
            m = new VirtualMachineStopMode();
            m.withMode(mode1);
        }
        return service.beginStop(this.client.subscriptionId(), resourceGroupName, virtualMachineName, this.client.referer(), mode, this.client.apiVersion(), this.client.acceptLanguage(), m, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, VirtualMachinesStopHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, VirtualMachinesStopHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<Void, VirtualMachinesStopHeaders> clientResponse = beginStopDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, VirtualMachinesStopHeaders> beginStopDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CSRPErrorException.class)
                .buildWithHeaders(response, VirtualMachinesStopHeaders.class);
    }

    /**
     * Implements list virtual machine within subscription method.
     * Returns list virtual machine within subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;VirtualMachineInner&gt; object if successful.
     */
    public PagedList<VirtualMachineInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<VirtualMachineInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<VirtualMachineInner>(response.body()) {
            @Override
            public Page<VirtualMachineInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Implements list virtual machine within subscription method.
     * Returns list virtual machine within subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<VirtualMachineInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<VirtualMachineInner>> serviceFuture, final ListOperationCallback<VirtualMachineInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<VirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Implements list virtual machine within subscription method.
     * Returns list virtual machine within subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VirtualMachineInner&gt; object
     */
    public Observable<Page<VirtualMachineInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<VirtualMachineInner>>, Page<VirtualMachineInner>>() {
                @Override
                public Page<VirtualMachineInner> call(ServiceResponse<Page<VirtualMachineInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Implements list virtual machine within subscription method.
     * Returns list virtual machine within subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VirtualMachineInner&gt; object
     */
    public Observable<ServiceResponse<Page<VirtualMachineInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<VirtualMachineInner>>, Observable<ServiceResponse<Page<VirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineInner>>> call(ServiceResponse<Page<VirtualMachineInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Implements list virtual machine within subscription method.
     * Returns list virtual machine within subscription.
     *
    ServiceResponse<PageImpl<VirtualMachineInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;VirtualMachineInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<VirtualMachineInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<VirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<VirtualMachineInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<VirtualMachineInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<VirtualMachineInner>> listNextDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<VirtualMachineInner>, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<VirtualMachineInner>>() { }.getType())
                .registerError(CSRPErrorException.class)
                .build(response);
    }

    /**
     * Implements list virtual machine within RG method.
     * Returns list of virtual machine within resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CSRPErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;VirtualMachineInner&gt; object if successful.
     */
    public PagedList<VirtualMachineInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<VirtualMachineInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<VirtualMachineInner>(response.body()) {
            @Override
            public Page<VirtualMachineInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Implements list virtual machine within RG method.
     * Returns list of virtual machine within resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<VirtualMachineInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<VirtualMachineInner>> serviceFuture, final ListOperationCallback<VirtualMachineInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<VirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Implements list virtual machine within RG method.
     * Returns list of virtual machine within resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VirtualMachineInner&gt; object
     */
    public Observable<Page<VirtualMachineInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<VirtualMachineInner>>, Page<VirtualMachineInner>>() {
                @Override
                public Page<VirtualMachineInner> call(ServiceResponse<Page<VirtualMachineInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Implements list virtual machine within RG method.
     * Returns list of virtual machine within resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;VirtualMachineInner&gt; object
     */
    public Observable<ServiceResponse<Page<VirtualMachineInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<VirtualMachineInner>>, Observable<ServiceResponse<Page<VirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineInner>>> call(ServiceResponse<Page<VirtualMachineInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Implements list virtual machine within RG method.
     * Returns list of virtual machine within resource group.
     *
    ServiceResponse<PageImpl<VirtualMachineInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;VirtualMachineInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<VirtualMachineInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<VirtualMachineInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<VirtualMachineInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<VirtualMachineInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<VirtualMachineInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<VirtualMachineInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws CSRPErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<VirtualMachineInner>, CSRPErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<VirtualMachineInner>>() { }.getType())
                .registerError(CSRPErrorException.class)
                .build(response);
    }

}
