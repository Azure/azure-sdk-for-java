// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vmwarecloudsimple.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.vmwarecloudsimple.fluent.models.DedicatedCloudNodeInner;
import com.azure.resourcemanager.vmwarecloudsimple.models.Sku;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class DedicatedCloudNodeInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DedicatedCloudNodeInner model = BinaryData.fromString(
            "{\"properties\":{\"availabilityZoneId\":\"qsycbkbfkgu\",\"availabilityZoneName\":\"kexxppof\",\"cloudRackName\":\"axcfjpgddtocjjx\",\"created\":\"2021-01-16T20:17:07Z\",\"nodesCount\":193768750,\"placementGroupId\":\"o\",\"placementGroupName\":\"xhdzxibqeojnx\",\"privateCloudId\":\"zvddntwndeicbtwn\",\"privateCloudName\":\"aoqvuh\",\"provisioningState\":\"cffcyddglmj\",\"purchaseId\":\"4d19b9d6-bdd1-4b99-b0f3-23f5f6b65f04\",\"skuDescription\":{\"id\":\"jqkwpyeicx\",\"name\":\"qciwqvhkhixuigdt\"},\"status\":\"unused\",\"vmwareClusterName\":\"bjoghmewuamau\"},\"sku\":{\"capacity\":\"ayvvtpgvdf\",\"description\":\"otkftutqxlngx\",\"family\":\"fgugnxkrxdqmid\",\"name\":\"thz\",\"tier\":\"qdrabhjybigehoqf\"},\"location\":\"owskanyktz\",\"tags\":{\"gpphrcgyn\":\"iywgqywgndrvynh\"},\"id\":\"ocpecfvmmco\",\"name\":\"fsxlzevgbmqjqa\",\"type\":\"c\"}")
            .toObject(DedicatedCloudNodeInner.class);
        Assertions.assertEquals("owskanyktz", model.location());
        Assertions.assertEquals("iywgqywgndrvynh", model.tags().get("gpphrcgyn"));
        Assertions.assertEquals("ayvvtpgvdf", model.sku().capacity());
        Assertions.assertEquals("otkftutqxlngx", model.sku().description());
        Assertions.assertEquals("fgugnxkrxdqmid", model.sku().family());
        Assertions.assertEquals("thz", model.sku().name());
        Assertions.assertEquals("qdrabhjybigehoqf", model.sku().tier());
        Assertions.assertEquals("qsycbkbfkgu", model.availabilityZoneId());
        Assertions.assertEquals(193768750, model.nodesCount());
        Assertions.assertEquals("o", model.placementGroupId());
        Assertions.assertEquals(UUID.fromString("4d19b9d6-bdd1-4b99-b0f3-23f5f6b65f04"), model.purchaseId());
        Assertions.assertEquals("jqkwpyeicx", model.idPropertiesId());
        Assertions.assertEquals("qciwqvhkhixuigdt", model.namePropertiesName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DedicatedCloudNodeInner model = new DedicatedCloudNodeInner().withLocation("owskanyktz")
            .withTags(mapOf("gpphrcgyn", "iywgqywgndrvynh"))
            .withSku(new Sku().withCapacity("ayvvtpgvdf")
                .withDescription("otkftutqxlngx")
                .withFamily("fgugnxkrxdqmid")
                .withName("thz")
                .withTier("qdrabhjybigehoqf"))
            .withAvailabilityZoneId("qsycbkbfkgu")
            .withNodesCount(193768750)
            .withPlacementGroupId("o")
            .withPurchaseId(UUID.fromString("4d19b9d6-bdd1-4b99-b0f3-23f5f6b65f04"))
            .withIdPropertiesId("jqkwpyeicx")
            .withNamePropertiesName("qciwqvhkhixuigdt");
        model = BinaryData.fromObject(model).toObject(DedicatedCloudNodeInner.class);
        Assertions.assertEquals("owskanyktz", model.location());
        Assertions.assertEquals("iywgqywgndrvynh", model.tags().get("gpphrcgyn"));
        Assertions.assertEquals("ayvvtpgvdf", model.sku().capacity());
        Assertions.assertEquals("otkftutqxlngx", model.sku().description());
        Assertions.assertEquals("fgugnxkrxdqmid", model.sku().family());
        Assertions.assertEquals("thz", model.sku().name());
        Assertions.assertEquals("qdrabhjybigehoqf", model.sku().tier());
        Assertions.assertEquals("qsycbkbfkgu", model.availabilityZoneId());
        Assertions.assertEquals(193768750, model.nodesCount());
        Assertions.assertEquals("o", model.placementGroupId());
        Assertions.assertEquals(UUID.fromString("4d19b9d6-bdd1-4b99-b0f3-23f5f6b65f04"), model.purchaseId());
        Assertions.assertEquals("jqkwpyeicx", model.idPropertiesId());
        Assertions.assertEquals("qciwqvhkhixuigdt", model.namePropertiesName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
