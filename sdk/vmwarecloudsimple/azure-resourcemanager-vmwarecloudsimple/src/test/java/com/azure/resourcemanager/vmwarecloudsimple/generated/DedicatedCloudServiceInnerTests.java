// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vmwarecloudsimple.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.vmwarecloudsimple.fluent.models.DedicatedCloudServiceInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DedicatedCloudServiceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DedicatedCloudServiceInner model = BinaryData.fromString(
            "{\"properties\":{\"gatewaySubnet\":\"aodsfcpkv\",\"isAccountOnboarded\":\"onBoarded\",\"nodes\":1276916323,\"serviceURL\":\"zmyzydagf\"},\"location\":\"axbezyiuo\",\"tags\":{\"exim\":\"whrdxwzywqsmbsu\",\"stkiiuxhqyud\":\"ryocfsfksymdd\",\"rq\":\"o\",\"oczvy\":\"b\"},\"id\":\"fqrvkdvjsllrmvvd\",\"name\":\"watkpnpulexxb\",\"type\":\"zwtruwiqzbqjvsov\"}")
            .toObject(DedicatedCloudServiceInner.class);
        Assertions.assertEquals("axbezyiuo", model.location());
        Assertions.assertEquals("whrdxwzywqsmbsu", model.tags().get("exim"));
        Assertions.assertEquals("aodsfcpkv", model.gatewaySubnet());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DedicatedCloudServiceInner model = new DedicatedCloudServiceInner().withLocation("axbezyiuo")
            .withTags(mapOf("exim", "whrdxwzywqsmbsu", "stkiiuxhqyud", "ryocfsfksymdd", "rq", "o", "oczvy", "b"))
            .withGatewaySubnet("aodsfcpkv");
        model = BinaryData.fromObject(model).toObject(DedicatedCloudServiceInner.class);
        Assertions.assertEquals("axbezyiuo", model.location());
        Assertions.assertEquals("whrdxwzywqsmbsu", model.tags().get("exim"));
        Assertions.assertEquals("aodsfcpkv", model.gatewaySubnet());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
