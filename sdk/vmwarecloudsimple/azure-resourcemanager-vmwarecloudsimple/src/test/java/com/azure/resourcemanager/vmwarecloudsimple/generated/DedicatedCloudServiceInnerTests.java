// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vmwarecloudsimple.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.vmwarecloudsimple.fluent.models.DedicatedCloudServiceInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DedicatedCloudServiceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DedicatedCloudServiceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"gatewaySubnet\":\"c\",\"isAccountOnboarded\":\"onBoarding\",\"nodes\":1450066184,\"serviceURL\":\"hbcsgl\"},\"location\":\"mmajtjaodx\",\"tags\":{\"onpimexgstxg\":\"bdxkqpxokaj\",\"gmaajrm\":\"po\"},\"id\":\"djwzrlov\",\"name\":\"clwhijcoejctbz\",\"type\":\"qsqsy\"}")
                .toObject(DedicatedCloudServiceInner.class);
        Assertions.assertEquals("mmajtjaodx", model.location());
        Assertions.assertEquals("bdxkqpxokaj", model.tags().get("onpimexgstxg"));
        Assertions.assertEquals("c", model.gatewaySubnet());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DedicatedCloudServiceInner model =
            new DedicatedCloudServiceInner()
                .withLocation("mmajtjaodx")
                .withTags(mapOf("onpimexgstxg", "bdxkqpxokaj", "gmaajrm", "po"))
                .withGatewaySubnet("c");
        model = BinaryData.fromObject(model).toObject(DedicatedCloudServiceInner.class);
        Assertions.assertEquals("mmajtjaodx", model.location());
        Assertions.assertEquals("bdxkqpxokaj", model.tags().get("onpimexgstxg"));
        Assertions.assertEquals("c", model.gatewaySubnet());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
