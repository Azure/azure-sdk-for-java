// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vmwarecloudsimple.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.vmwarecloudsimple.fluent.models.SkuAvailabilityInner;
import org.junit.jupiter.api.Assertions;

public final class SkuAvailabilityInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SkuAvailabilityInner model =
            BinaryData
                .fromString(
                    "{\"dedicatedAvailabilityZoneId\":\"uigdtopbobjog\",\"dedicatedAvailabilityZoneName\":\"e\",\"dedicatedPlacementGroupId\":\"a\",\"dedicatedPlacementGroupName\":\"uhrzayvvt\",\"limit\":1432651590,\"resourceType\":\"dfgiot\",\"skuId\":\"tutqxlngxlefgug\",\"skuName\":\"krxd\"}")
                .toObject(SkuAvailabilityInner.class);
        Assertions.assertEquals("uigdtopbobjog", model.dedicatedAvailabilityZoneId());
        Assertions.assertEquals("e", model.dedicatedAvailabilityZoneName());
        Assertions.assertEquals("a", model.dedicatedPlacementGroupId());
        Assertions.assertEquals("uhrzayvvt", model.dedicatedPlacementGroupName());
        Assertions.assertEquals(1432651590, model.limit());
        Assertions.assertEquals("dfgiot", model.resourceType());
        Assertions.assertEquals("tutqxlngxlefgug", model.skuId());
        Assertions.assertEquals("krxd", model.skuName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SkuAvailabilityInner model =
            new SkuAvailabilityInner()
                .withDedicatedAvailabilityZoneId("uigdtopbobjog")
                .withDedicatedAvailabilityZoneName("e")
                .withDedicatedPlacementGroupId("a")
                .withDedicatedPlacementGroupName("uhrzayvvt")
                .withLimit(1432651590)
                .withResourceType("dfgiot")
                .withSkuId("tutqxlngxlefgug")
                .withSkuName("krxd");
        model = BinaryData.fromObject(model).toObject(SkuAvailabilityInner.class);
        Assertions.assertEquals("uigdtopbobjog", model.dedicatedAvailabilityZoneId());
        Assertions.assertEquals("e", model.dedicatedAvailabilityZoneName());
        Assertions.assertEquals("a", model.dedicatedPlacementGroupId());
        Assertions.assertEquals("uhrzayvvt", model.dedicatedPlacementGroupName());
        Assertions.assertEquals(1432651590, model.limit());
        Assertions.assertEquals("dfgiot", model.resourceType());
        Assertions.assertEquals("tutqxlngxlefgug", model.skuId());
        Assertions.assertEquals("krxd", model.skuName());
    }
}
