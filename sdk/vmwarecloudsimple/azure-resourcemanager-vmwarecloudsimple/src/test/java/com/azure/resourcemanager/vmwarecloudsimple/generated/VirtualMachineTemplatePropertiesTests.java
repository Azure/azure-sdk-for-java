// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vmwarecloudsimple.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.vmwarecloudsimple.fluent.models.VirtualMachineTemplateProperties;
import com.azure.resourcemanager.vmwarecloudsimple.fluent.models.VirtualNetworkInner;
import com.azure.resourcemanager.vmwarecloudsimple.fluent.models.VirtualNicInner;
import com.azure.resourcemanager.vmwarecloudsimple.models.DiskIndependenceMode;
import com.azure.resourcemanager.vmwarecloudsimple.models.GuestOsnicCustomization;
import com.azure.resourcemanager.vmwarecloudsimple.models.GuestOsnicCustomizationAllocation;
import com.azure.resourcemanager.vmwarecloudsimple.models.NicType;
import com.azure.resourcemanager.vmwarecloudsimple.models.VirtualDisk;
import com.azure.resourcemanager.vmwarecloudsimple.models.VirtualDiskController;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineTemplatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineTemplateProperties model = BinaryData.fromString(
            "{\"amountOfRam\":659096869,\"controllers\":[{\"id\":\"bnhlmc\",\"name\":\"p\",\"subType\":\"gitvg\",\"type\":\"hrixkwmy\"}],\"description\":\"ejvegrhbpnaixex\",\"disks\":[{\"controllerId\":\"dreaxh\",\"independenceMode\":\"independent_nonpersistent\",\"totalSize\":1486564388,\"virtualDiskId\":\"rrvqa\",\"virtualDiskName\":\"kghtpwijnh\"}],\"exposeToGuestVM\":true,\"guestOS\":\"f\",\"guestOSType\":\"xzb\",\"nics\":[{\"customization\":{\"allocation\":\"dynamic\",\"dnsServers\":[\"mtg\",\"qp\",\"y\"],\"gateway\":[\"ronzmyhgfip\",\"sxkm\",\"waekrrjreafxtsgu\"],\"ipAddress\":\"jglikkxwslolb\",\"mask\":\"vuzlm\",\"primaryWinsServer\":\"elfk\",\"secondaryWinsServer\":\"plcrpwjxeznoig\"},\"ipAddresses\":[\"jwmwkpnbs\",\"zejjoqk\",\"gfhsxttaugzxn\",\"aa\"],\"macAddress\":\"xdtnkdmkqjjlw\",\"network\":{\"assignable\":false,\"id\":\"vrkpyouaibreb\",\"location\":\"aysjkixqtnqttez\",\"name\":\"fffiak\",\"properties\":{\"privateCloudId\":\"qqmtedltmmji\"},\"type\":\"eozphv\"},\"nicType\":\"VMXNET2\",\"powerOnBoot\":false,\"virtualNicId\":\"ncyg\",\"virtualNicName\":\"kvi\"},{\"customization\":{\"allocation\":\"static\",\"dnsServers\":[\"xqupevzhf\"],\"gateway\":[\"txhojujb\",\"pelmcuvhixbjxyf\",\"n\"],\"ipAddress\":\"r\",\"mask\":\"o\",\"primaryWinsServer\":\"ttpkiwkkbnujrywv\",\"secondaryWinsServer\":\"lbfpncurd\"},\"ipAddresses\":[\"iithtywu\",\"xcbihw\",\"knfd\"],\"macAddress\":\"wjchrdg\",\"network\":{\"assignable\":true,\"id\":\"xum\",\"location\":\"ton\",\"name\":\"jl\",\"properties\":{\"privateCloudId\":\"fdlwg\"},\"type\":\"tsbwtovvtgse\"},\"nicType\":\"PCNET32\",\"powerOnBoot\":false,\"virtualNicId\":\"ufxqknpirgnepttw\",\"virtualNicName\":\"sniffc\"}],\"numberOfCores\":2032190732,\"path\":\"r\",\"privateCloudId\":\"jlpijnkrx\",\"vSphereNetworks\":[\"dhcrati\",\"zronasxift\",\"zq\"],\"vSphereTags\":[\"f\",\"wesgogczh\",\"nnxk\"],\"vmwaretools\":\"gnyhmossxkkg\"}")
            .toObject(VirtualMachineTemplateProperties.class);
        Assertions.assertEquals(659096869, model.amountOfRam());
        Assertions.assertEquals("ejvegrhbpnaixex", model.description());
        Assertions.assertEquals("dreaxh", model.disks().get(0).controllerId());
        Assertions.assertEquals(DiskIndependenceMode.INDEPENDENT_NONPERSISTENT,
            model.disks().get(0).independenceMode());
        Assertions.assertEquals(1486564388, model.disks().get(0).totalSize());
        Assertions.assertEquals("rrvqa", model.disks().get(0).virtualDiskId());
        Assertions.assertEquals(true, model.exposeToGuestVM());
        Assertions.assertEquals(GuestOsnicCustomizationAllocation.DYNAMIC,
            model.nics().get(0).customization().allocation());
        Assertions.assertEquals("mtg", model.nics().get(0).customization().dnsServers().get(0));
        Assertions.assertEquals("ronzmyhgfip", model.nics().get(0).customization().gateway().get(0));
        Assertions.assertEquals("jglikkxwslolb", model.nics().get(0).customization().ipAddress());
        Assertions.assertEquals("vuzlm", model.nics().get(0).customization().mask());
        Assertions.assertEquals("elfk", model.nics().get(0).customization().primaryWinsServer());
        Assertions.assertEquals("plcrpwjxeznoig", model.nics().get(0).customization().secondaryWinsServer());
        Assertions.assertEquals("jwmwkpnbs", model.nics().get(0).ipAddresses().get(0));
        Assertions.assertEquals("xdtnkdmkqjjlw", model.nics().get(0).macAddress());
        Assertions.assertEquals("vrkpyouaibreb", model.nics().get(0).network().id());
        Assertions.assertEquals(NicType.VMXNET2, model.nics().get(0).nicType());
        Assertions.assertEquals(false, model.nics().get(0).powerOnBoot());
        Assertions.assertEquals("ncyg", model.nics().get(0).virtualNicId());
        Assertions.assertEquals(2032190732, model.numberOfCores());
        Assertions.assertEquals("r", model.path());
        Assertions.assertEquals("jlpijnkrx", model.privateCloudId());
        Assertions.assertEquals("dhcrati", model.vSphereNetworks().get(0));
        Assertions.assertEquals("f", model.vSphereTags().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineTemplateProperties model = new VirtualMachineTemplateProperties().withAmountOfRam(659096869)
            .withControllers(Arrays.asList(new VirtualDiskController()))
            .withDescription("ejvegrhbpnaixex")
            .withDisks(Arrays.asList(new VirtualDisk().withControllerId("dreaxh")
                .withIndependenceMode(DiskIndependenceMode.INDEPENDENT_NONPERSISTENT)
                .withTotalSize(1486564388)
                .withVirtualDiskId("rrvqa")))
            .withExposeToGuestVM(true)
            .withNics(Arrays.asList(
                new VirtualNicInner()
                    .withCustomization(
                        new GuestOsnicCustomization().withAllocation(GuestOsnicCustomizationAllocation.DYNAMIC)
                            .withDnsServers(Arrays.asList("mtg", "qp", "y"))
                            .withGateway(Arrays.asList("ronzmyhgfip", "sxkm", "waekrrjreafxtsgu"))
                            .withIpAddress("jglikkxwslolb")
                            .withMask("vuzlm")
                            .withPrimaryWinsServer("elfk")
                            .withSecondaryWinsServer("plcrpwjxeznoig"))
                    .withIpAddresses(Arrays.asList("jwmwkpnbs", "zejjoqk", "gfhsxttaugzxn", "aa"))
                    .withMacAddress("xdtnkdmkqjjlw")
                    .withNetwork(new VirtualNetworkInner().withId("vrkpyouaibreb"))
                    .withNicType(NicType.VMXNET2)
                    .withPowerOnBoot(false)
                    .withVirtualNicId("ncyg"),
                new VirtualNicInner()
                    .withCustomization(
                        new GuestOsnicCustomization().withAllocation(GuestOsnicCustomizationAllocation.STATIC)
                            .withDnsServers(Arrays.asList("xqupevzhf"))
                            .withGateway(Arrays.asList("txhojujb", "pelmcuvhixbjxyf", "n"))
                            .withIpAddress("r")
                            .withMask("o")
                            .withPrimaryWinsServer("ttpkiwkkbnujrywv")
                            .withSecondaryWinsServer("lbfpncurd"))
                    .withIpAddresses(Arrays.asList("iithtywu", "xcbihw", "knfd"))
                    .withMacAddress("wjchrdg")
                    .withNetwork(new VirtualNetworkInner().withId("xum"))
                    .withNicType(NicType.PCNET32)
                    .withPowerOnBoot(false)
                    .withVirtualNicId("ufxqknpirgnepttw")))
            .withNumberOfCores(2032190732)
            .withPath("r")
            .withPrivateCloudId("jlpijnkrx")
            .withVSphereNetworks(Arrays.asList("dhcrati", "zronasxift", "zq"))
            .withVSphereTags(Arrays.asList("f", "wesgogczh", "nnxk"));
        model = BinaryData.fromObject(model).toObject(VirtualMachineTemplateProperties.class);
        Assertions.assertEquals(659096869, model.amountOfRam());
        Assertions.assertEquals("ejvegrhbpnaixex", model.description());
        Assertions.assertEquals("dreaxh", model.disks().get(0).controllerId());
        Assertions.assertEquals(DiskIndependenceMode.INDEPENDENT_NONPERSISTENT,
            model.disks().get(0).independenceMode());
        Assertions.assertEquals(1486564388, model.disks().get(0).totalSize());
        Assertions.assertEquals("rrvqa", model.disks().get(0).virtualDiskId());
        Assertions.assertEquals(true, model.exposeToGuestVM());
        Assertions.assertEquals(GuestOsnicCustomizationAllocation.DYNAMIC,
            model.nics().get(0).customization().allocation());
        Assertions.assertEquals("mtg", model.nics().get(0).customization().dnsServers().get(0));
        Assertions.assertEquals("ronzmyhgfip", model.nics().get(0).customization().gateway().get(0));
        Assertions.assertEquals("jglikkxwslolb", model.nics().get(0).customization().ipAddress());
        Assertions.assertEquals("vuzlm", model.nics().get(0).customization().mask());
        Assertions.assertEquals("elfk", model.nics().get(0).customization().primaryWinsServer());
        Assertions.assertEquals("plcrpwjxeznoig", model.nics().get(0).customization().secondaryWinsServer());
        Assertions.assertEquals("jwmwkpnbs", model.nics().get(0).ipAddresses().get(0));
        Assertions.assertEquals("xdtnkdmkqjjlw", model.nics().get(0).macAddress());
        Assertions.assertEquals("vrkpyouaibreb", model.nics().get(0).network().id());
        Assertions.assertEquals(NicType.VMXNET2, model.nics().get(0).nicType());
        Assertions.assertEquals(false, model.nics().get(0).powerOnBoot());
        Assertions.assertEquals("ncyg", model.nics().get(0).virtualNicId());
        Assertions.assertEquals(2032190732, model.numberOfCores());
        Assertions.assertEquals("r", model.path());
        Assertions.assertEquals("jlpijnkrx", model.privateCloudId());
        Assertions.assertEquals("dhcrati", model.vSphereNetworks().get(0));
        Assertions.assertEquals("f", model.vSphereTags().get(0));
    }
}
