// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vmwarecloudsimple.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.vmwarecloudsimple.VMwareCloudSimpleManager;
import com.azure.resourcemanager.vmwarecloudsimple.models.VirtualMachineTemplate;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class VirtualMachineTemplatesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"id\":\"jy\",\"location\":\"hcuplc\",\"name\":\"cwkhihi\",\"properties\":{\"amountOfRam\":1075361134,\"controllers\":[],\"description\":\"tzbsrgnowcjhf\",\"disks\":[],\"exposeToGuestVM\":false,\"guestOS\":\"ctxmwoteyowcluq\",\"guestOSType\":\"ekqvgqouwif\",\"nics\":[],\"numberOfCores\":2138096082,\"path\":\"ivqikfxcvhr\",\"privateCloudId\":\"sphuagrttikteus\",\"vSphereNetworks\":[\"kvyklxubyjaffmm\",\"bl\"],\"vSphereTags\":[\"u\",\"bgq\"],\"vmwaretools\":\"rtalmet\"},\"type\":\"wgdsl\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        VMwareCloudSimpleManager manager =
            VMwareCloudSimpleManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        VirtualMachineTemplate response =
            manager
                .virtualMachineTemplates()
                .getWithResponse("ysownbtgkbug", "jqctojcmisofie", "pe", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("hcuplc", response.location());
        Assertions.assertEquals(1075361134, response.amountOfRam());
        Assertions.assertEquals("tzbsrgnowcjhf", response.description());
        Assertions.assertEquals(false, response.exposeToGuestVM());
        Assertions.assertEquals(2138096082, response.numberOfCores());
        Assertions.assertEquals("ivqikfxcvhr", response.path());
        Assertions.assertEquals("sphuagrttikteus", response.privateCloudId());
        Assertions.assertEquals("kvyklxubyjaffmm", response.vSphereNetworks().get(0));
        Assertions.assertEquals("u", response.vSphereTags().get(0));
    }
}
