// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vmwarecloudsimple.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.vmwarecloudsimple.VMwareCloudSimpleManager;
import com.azure.resourcemanager.vmwarecloudsimple.models.DedicatedCloudNode;
import com.azure.resourcemanager.vmwarecloudsimple.models.Sku;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DedicatedCloudNodesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"availabilityZoneId\":\"bkiw\",\"availabilityZoneName\":\"qnyophzfyls\",\"cloudRackName\":\"rpfbcunezz\",\"created\":\"2021-01-26T14:06:14Z\",\"nodesCount\":1261110082,\"placementGroupId\":\"lfwyfwlwxjwetn\",\"placementGroupName\":\"ihclafzv\",\"privateCloudId\":\"lpt\",\"privateCloudName\":\"qqwzt\",\"provisioningState\":\"Succeeded\",\"purchaseId\":\"67b3971f-6e42-4385-bd21-fdda3b8524e0\",\"skuDescription\":{\"id\":\"chcxwaxfewzj\",\"name\":\"jexfdeqvhp\"},\"status\":\"used\",\"vmwareClusterName\":\"ksh\"},\"sku\":{\"capacity\":\"f\",\"description\":\"mxzjrgywwpgjx\",\"family\":\"ptfujgicgaaoept\",\"name\":\"aqutdewemxswvruu\",\"tier\":\"zjgehkfkim\"},\"location\":\"tixo\",\"tags\":{\"qepqwhixmon\":\"qyinl\",\"xgvelfclduccbird\":\"tshi\",\"jizcilnghgs\":\"vuwcobiegstmnin\"},\"id\":\"ejjtbxqmul\",\"name\":\"xlxqzvn\",\"type\":\"rsbycucrwn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        VMwareCloudSimpleManager manager = VMwareCloudSimpleManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DedicatedCloudNode response = manager.dedicatedCloudNodes()
            .define("ihknsmjbl")
            .withRegion("cmjdmspof")
            .withExistingResourceGroup("sphaivmxyasflvg")
            .withTags(mapOf("gbzjedmstkv", "uhrylniofr", "xbcuiiznkt", "l"))
            .withSku(new Sku().withCapacity("qihebw")
                .withDescription("wbzuwfmdurage")
                .withFamily("zvcjfelisdjubggb")
                .withName("igkxkbsazga")
                .withTier("acy"))
            .withAvailabilityZoneId("jhlnymzotqyryu")
            .withNodesCount(1408862324)
            .withPlacementGroupId("peujlzqn")
            .withPurchaseId(UUID.fromString("b485f092-9c08-438d-8422-9bb874589201"))
            .withIdPropertiesId("mwwinhehfqpofv")
            .withNamePropertiesName("bcblemb")
            .withReferer("gzwywak")
            .create();

        Assertions.assertEquals("tixo", response.location());
        Assertions.assertEquals("qyinl", response.tags().get("qepqwhixmon"));
        Assertions.assertEquals("f", response.sku().capacity());
        Assertions.assertEquals("mxzjrgywwpgjx", response.sku().description());
        Assertions.assertEquals("ptfujgicgaaoept", response.sku().family());
        Assertions.assertEquals("aqutdewemxswvruu", response.sku().name());
        Assertions.assertEquals("zjgehkfkim", response.sku().tier());
        Assertions.assertEquals("bkiw", response.availabilityZoneId());
        Assertions.assertEquals(1261110082, response.nodesCount());
        Assertions.assertEquals("lfwyfwlwxjwetn", response.placementGroupId());
        Assertions.assertEquals(UUID.fromString("67b3971f-6e42-4385-bd21-fdda3b8524e0"), response.purchaseId());
        Assertions.assertEquals("chcxwaxfewzj", response.idPropertiesId());
        Assertions.assertEquals("jexfdeqvhp", response.namePropertiesName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
