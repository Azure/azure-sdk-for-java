// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vmwarecloudsimple.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.vmwarecloudsimple.fluent.models.DedicatedCloudServiceInner;
import com.azure.resourcemanager.vmwarecloudsimple.models.DedicatedCloudServiceListResponse;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DedicatedCloudServiceListResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DedicatedCloudServiceListResponse model = BinaryData.fromString(
            "{\"nextLink\":\"cynpwlbjnp\",\"value\":[{\"properties\":{\"gatewaySubnet\":\"tadehxnltyfsopp\",\"isAccountOnboarded\":\"onBoarding\",\"nodes\":1230833613,\"serviceURL\":\"zwdejbavor\"},\"location\":\"zdmohctbqvu\",\"tags\":{\"ujjugwdkcglh\":\"dndnvow\"},\"id\":\"lazjdyggdtjixhbk\",\"name\":\"ofqweykhmenevfye\",\"type\":\"fwhybcibvy\"},{\"properties\":{\"gatewaySubnet\":\"c\",\"isAccountOnboarded\":\"onBoarding\",\"nodes\":1906498488,\"serviceURL\":\"aamdect\"},\"location\":\"hfiqscjeypvhe\",\"tags\":{\"kqsleyyvxy\":\"gqhcjrefovg\",\"cr\":\"jpkcattpng\",\"ajvnysounqe\":\"czsqpjhvm\"},\"id\":\"a\",\"name\":\"oaeupfhyhltrpmo\",\"type\":\"jmcmatuokthfu\"}]}")
            .toObject(DedicatedCloudServiceListResponse.class);
        Assertions.assertEquals("cynpwlbjnp", model.nextLink());
        Assertions.assertEquals("zdmohctbqvu", model.value().get(0).location());
        Assertions.assertEquals("dndnvow", model.value().get(0).tags().get("ujjugwdkcglh"));
        Assertions.assertEquals("tadehxnltyfsopp", model.value().get(0).gatewaySubnet());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DedicatedCloudServiceListResponse model = new DedicatedCloudServiceListResponse().withNextLink("cynpwlbjnp")
            .withValue(Arrays.asList(
                new DedicatedCloudServiceInner().withLocation("zdmohctbqvu")
                    .withTags(mapOf("ujjugwdkcglh", "dndnvow"))
                    .withGatewaySubnet("tadehxnltyfsopp"),
                new DedicatedCloudServiceInner().withLocation("hfiqscjeypvhe")
                    .withTags(mapOf("kqsleyyvxy", "gqhcjrefovg", "cr", "jpkcattpng", "ajvnysounqe", "czsqpjhvm"))
                    .withGatewaySubnet("c")));
        model = BinaryData.fromObject(model).toObject(DedicatedCloudServiceListResponse.class);
        Assertions.assertEquals("cynpwlbjnp", model.nextLink());
        Assertions.assertEquals("zdmohctbqvu", model.value().get(0).location());
        Assertions.assertEquals("dndnvow", model.value().get(0).tags().get("ujjugwdkcglh"));
        Assertions.assertEquals("tadehxnltyfsopp", model.value().get(0).gatewaySubnet());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
