// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vmwarecloudsimple.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.vmwarecloudsimple.fluent.models.VirtualNetworkInner;
import com.azure.resourcemanager.vmwarecloudsimple.fluent.models.VirtualNicInner;
import com.azure.resourcemanager.vmwarecloudsimple.models.GuestOsnicCustomization;
import com.azure.resourcemanager.vmwarecloudsimple.models.GuestOsnicCustomizationAllocation;
import com.azure.resourcemanager.vmwarecloudsimple.models.NicType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualNicInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualNicInner model = BinaryData.fromString(
            "{\"customization\":{\"allocation\":\"dynamic\",\"dnsServers\":[\"qmi\",\"ox\"],\"gateway\":[\"gufhyaomtbg\",\"havgrvk\",\"fo\"],\"ipAddress\":\"zh\",\"mask\":\"bibgjmfxumv\",\"primaryWinsServer\":\"luyovwxnbkfezzx\",\"secondaryWinsServer\":\"yhwzdgiruj\"},\"ipAddresses\":[\"omvzzbtd\",\"qvpn\",\"yujviylwdshfssn\"],\"macAddress\":\"gy\",\"network\":{\"assignable\":true,\"id\":\"ymsgaojfmwnc\",\"location\":\"mrfhirctymox\",\"name\":\"tpipiwyczuhx\",\"properties\":{\"privateCloudId\":\"qjlihhyuspska\"},\"type\":\"vlmfwdgzxulucv\"},\"nicType\":\"VMXNET3\",\"powerOnBoot\":false,\"virtualNicId\":\"reuzvxurisjn\",\"virtualNicName\":\"ytxifqjzgxmrh\"}")
            .toObject(VirtualNicInner.class);
        Assertions.assertEquals(GuestOsnicCustomizationAllocation.DYNAMIC, model.customization().allocation());
        Assertions.assertEquals("qmi", model.customization().dnsServers().get(0));
        Assertions.assertEquals("gufhyaomtbg", model.customization().gateway().get(0));
        Assertions.assertEquals("zh", model.customization().ipAddress());
        Assertions.assertEquals("bibgjmfxumv", model.customization().mask());
        Assertions.assertEquals("luyovwxnbkfezzx", model.customization().primaryWinsServer());
        Assertions.assertEquals("yhwzdgiruj", model.customization().secondaryWinsServer());
        Assertions.assertEquals("omvzzbtd", model.ipAddresses().get(0));
        Assertions.assertEquals("gy", model.macAddress());
        Assertions.assertEquals("ymsgaojfmwnc", model.network().id());
        Assertions.assertEquals(NicType.VMXNET3, model.nicType());
        Assertions.assertEquals(false, model.powerOnBoot());
        Assertions.assertEquals("reuzvxurisjn", model.virtualNicId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualNicInner model = new VirtualNicInner()
            .withCustomization(new GuestOsnicCustomization().withAllocation(GuestOsnicCustomizationAllocation.DYNAMIC)
                .withDnsServers(Arrays.asList("qmi", "ox"))
                .withGateway(Arrays.asList("gufhyaomtbg", "havgrvk", "fo"))
                .withIpAddress("zh")
                .withMask("bibgjmfxumv")
                .withPrimaryWinsServer("luyovwxnbkfezzx")
                .withSecondaryWinsServer("yhwzdgiruj"))
            .withIpAddresses(Arrays.asList("omvzzbtd", "qvpn", "yujviylwdshfssn"))
            .withMacAddress("gy")
            .withNetwork(new VirtualNetworkInner().withId("ymsgaojfmwnc"))
            .withNicType(NicType.VMXNET3)
            .withPowerOnBoot(false)
            .withVirtualNicId("reuzvxurisjn");
        model = BinaryData.fromObject(model).toObject(VirtualNicInner.class);
        Assertions.assertEquals(GuestOsnicCustomizationAllocation.DYNAMIC, model.customization().allocation());
        Assertions.assertEquals("qmi", model.customization().dnsServers().get(0));
        Assertions.assertEquals("gufhyaomtbg", model.customization().gateway().get(0));
        Assertions.assertEquals("zh", model.customization().ipAddress());
        Assertions.assertEquals("bibgjmfxumv", model.customization().mask());
        Assertions.assertEquals("luyovwxnbkfezzx", model.customization().primaryWinsServer());
        Assertions.assertEquals("yhwzdgiruj", model.customization().secondaryWinsServer());
        Assertions.assertEquals("omvzzbtd", model.ipAddresses().get(0));
        Assertions.assertEquals("gy", model.macAddress());
        Assertions.assertEquals("ymsgaojfmwnc", model.network().id());
        Assertions.assertEquals(NicType.VMXNET3, model.nicType());
        Assertions.assertEquals(false, model.powerOnBoot());
        Assertions.assertEquals("reuzvxurisjn", model.virtualNicId());
    }
}
