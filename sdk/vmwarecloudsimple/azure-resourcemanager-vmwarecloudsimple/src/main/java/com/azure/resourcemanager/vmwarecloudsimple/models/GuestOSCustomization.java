// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vmwarecloudsimple.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Guest OS Customization properties.
 */
@Fluent
public final class GuestOSCustomization implements JsonSerializable<GuestOSCustomization> {
    /*
     * List of dns servers to use
     */
    private List<String> dnsServers;

    /*
     * Virtual Machine hostname
     */
    private String hostname;

    /*
     * Password for login
     */
    private String password;

    /*
     * id of customization policy
     */
    private String policyId;

    /*
     * Username for login
     */
    private String username;

    /**
     * Creates an instance of GuestOSCustomization class.
     */
    public GuestOSCustomization() {
    }

    /**
     * Get the dnsServers property: List of dns servers to use.
     * 
     * @return the dnsServers value.
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }

    /**
     * Set the dnsServers property: List of dns servers to use.
     * 
     * @param dnsServers the dnsServers value to set.
     * @return the GuestOSCustomization object itself.
     */
    public GuestOSCustomization withDnsServers(List<String> dnsServers) {
        this.dnsServers = dnsServers;
        return this;
    }

    /**
     * Get the hostname property: Virtual Machine hostname.
     * 
     * @return the hostname value.
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: Virtual Machine hostname.
     * 
     * @param hostname the hostname value to set.
     * @return the GuestOSCustomization object itself.
     */
    public GuestOSCustomization withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the password property: Password for login.
     * 
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: Password for login.
     * 
     * @param password the password value to set.
     * @return the GuestOSCustomization object itself.
     */
    public GuestOSCustomization withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get the policyId property: id of customization policy.
     * 
     * @return the policyId value.
     */
    public String policyId() {
        return this.policyId;
    }

    /**
     * Set the policyId property: id of customization policy.
     * 
     * @param policyId the policyId value to set.
     * @return the GuestOSCustomization object itself.
     */
    public GuestOSCustomization withPolicyId(String policyId) {
        this.policyId = policyId;
        return this;
    }

    /**
     * Get the username property: Username for login.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: Username for login.
     * 
     * @param username the username value to set.
     * @return the GuestOSCustomization object itself.
     */
    public GuestOSCustomization withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("dnsServers", this.dnsServers, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("hostName", this.hostname);
        jsonWriter.writeStringField("password", this.password);
        jsonWriter.writeStringField("policyId", this.policyId);
        jsonWriter.writeStringField("username", this.username);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GuestOSCustomization from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GuestOSCustomization if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GuestOSCustomization.
     */
    public static GuestOSCustomization fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GuestOSCustomization deserializedGuestOSCustomization = new GuestOSCustomization();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dnsServers".equals(fieldName)) {
                    List<String> dnsServers = reader.readArray(reader1 -> reader1.getString());
                    deserializedGuestOSCustomization.dnsServers = dnsServers;
                } else if ("hostName".equals(fieldName)) {
                    deserializedGuestOSCustomization.hostname = reader.getString();
                } else if ("password".equals(fieldName)) {
                    deserializedGuestOSCustomization.password = reader.getString();
                } else if ("policyId".equals(fieldName)) {
                    deserializedGuestOSCustomization.policyId = reader.getString();
                } else if ("username".equals(fieldName)) {
                    deserializedGuestOSCustomization.username = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGuestOSCustomization;
        });
    }
}
