// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vmwarecloudsimple.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Virtual disk model.
 */
@Fluent
public final class VirtualDisk implements JsonSerializable<VirtualDisk> {
    /*
     * Disk's Controller id
     */
    private String controllerId;

    /*
     * Disk's independence mode type
     */
    private DiskIndependenceMode independenceMode;

    /*
     * Disk's total size
     */
    private int totalSize;

    /*
     * Disk's id
     */
    private String virtualDiskId;

    /*
     * Disk's display name
     */
    private String virtualDiskName;

    /**
     * Creates an instance of VirtualDisk class.
     */
    public VirtualDisk() {
    }

    /**
     * Get the controllerId property: Disk's Controller id.
     * 
     * @return the controllerId value.
     */
    public String controllerId() {
        return this.controllerId;
    }

    /**
     * Set the controllerId property: Disk's Controller id.
     * 
     * @param controllerId the controllerId value to set.
     * @return the VirtualDisk object itself.
     */
    public VirtualDisk withControllerId(String controllerId) {
        this.controllerId = controllerId;
        return this;
    }

    /**
     * Get the independenceMode property: Disk's independence mode type.
     * 
     * @return the independenceMode value.
     */
    public DiskIndependenceMode independenceMode() {
        return this.independenceMode;
    }

    /**
     * Set the independenceMode property: Disk's independence mode type.
     * 
     * @param independenceMode the independenceMode value to set.
     * @return the VirtualDisk object itself.
     */
    public VirtualDisk withIndependenceMode(DiskIndependenceMode independenceMode) {
        this.independenceMode = independenceMode;
        return this;
    }

    /**
     * Get the totalSize property: Disk's total size.
     * 
     * @return the totalSize value.
     */
    public int totalSize() {
        return this.totalSize;
    }

    /**
     * Set the totalSize property: Disk's total size.
     * 
     * @param totalSize the totalSize value to set.
     * @return the VirtualDisk object itself.
     */
    public VirtualDisk withTotalSize(int totalSize) {
        this.totalSize = totalSize;
        return this;
    }

    /**
     * Get the virtualDiskId property: Disk's id.
     * 
     * @return the virtualDiskId value.
     */
    public String virtualDiskId() {
        return this.virtualDiskId;
    }

    /**
     * Set the virtualDiskId property: Disk's id.
     * 
     * @param virtualDiskId the virtualDiskId value to set.
     * @return the VirtualDisk object itself.
     */
    public VirtualDisk withVirtualDiskId(String virtualDiskId) {
        this.virtualDiskId = virtualDiskId;
        return this;
    }

    /**
     * Get the virtualDiskName property: Disk's display name.
     * 
     * @return the virtualDiskName value.
     */
    public String virtualDiskName() {
        return this.virtualDiskName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (controllerId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property controllerId in model VirtualDisk"));
        }
        if (independenceMode() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property independenceMode in model VirtualDisk"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VirtualDisk.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("controllerId", this.controllerId);
        jsonWriter.writeStringField("independenceMode",
            this.independenceMode == null ? null : this.independenceMode.toString());
        jsonWriter.writeIntField("totalSize", this.totalSize);
        jsonWriter.writeStringField("virtualDiskId", this.virtualDiskId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualDisk from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualDisk if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VirtualDisk.
     */
    public static VirtualDisk fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualDisk deserializedVirtualDisk = new VirtualDisk();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("controllerId".equals(fieldName)) {
                    deserializedVirtualDisk.controllerId = reader.getString();
                } else if ("independenceMode".equals(fieldName)) {
                    deserializedVirtualDisk.independenceMode = DiskIndependenceMode.fromString(reader.getString());
                } else if ("totalSize".equals(fieldName)) {
                    deserializedVirtualDisk.totalSize = reader.getInt();
                } else if ("virtualDiskId".equals(fieldName)) {
                    deserializedVirtualDisk.virtualDiskId = reader.getString();
                } else if ("virtualDiskName".equals(fieldName)) {
                    deserializedVirtualDisk.virtualDiskName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualDisk;
        });
    }
}
