// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vmwarecloudsimple.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The CustomizationIdentity model.
 */
@Fluent
public final class CustomizationIdentity implements JsonSerializable<CustomizationIdentity> {
    /*
     * Windows Text Identity. Prepared data
     */
    private String data;

    /*
     * Virtual machine host name settings
     */
    private CustomizationHostname hostname;

    /*
     * Identity type
     */
    private CustomizationIdentityType type;

    /*
     * Windows Identity. User data customization
     */
    private CustomizationIdentityUserData userData;

    /**
     * Creates an instance of CustomizationIdentity class.
     */
    public CustomizationIdentity() {
    }

    /**
     * Get the data property: Windows Text Identity. Prepared data.
     * 
     * @return the data value.
     */
    public String data() {
        return this.data;
    }

    /**
     * Set the data property: Windows Text Identity. Prepared data.
     * 
     * @param data the data value to set.
     * @return the CustomizationIdentity object itself.
     */
    public CustomizationIdentity withData(String data) {
        this.data = data;
        return this;
    }

    /**
     * Get the hostname property: Virtual machine host name settings.
     * 
     * @return the hostname value.
     */
    public CustomizationHostname hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: Virtual machine host name settings.
     * 
     * @param hostname the hostname value to set.
     * @return the CustomizationIdentity object itself.
     */
    public CustomizationIdentity withHostname(CustomizationHostname hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the type property: Identity type.
     * 
     * @return the type value.
     */
    public CustomizationIdentityType type() {
        return this.type;
    }

    /**
     * Set the type property: Identity type.
     * 
     * @param type the type value to set.
     * @return the CustomizationIdentity object itself.
     */
    public CustomizationIdentity withType(CustomizationIdentityType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the userData property: Windows Identity. User data customization.
     * 
     * @return the userData value.
     */
    public CustomizationIdentityUserData userData() {
        return this.userData;
    }

    /**
     * Set the userData property: Windows Identity. User data customization.
     * 
     * @param userData the userData value to set.
     * @return the CustomizationIdentity object itself.
     */
    public CustomizationIdentity withUserData(CustomizationIdentityUserData userData) {
        this.userData = userData;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hostname() != null) {
            hostname().validate();
        }
        if (userData() != null) {
            userData().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("data", this.data);
        jsonWriter.writeJsonField("hostName", this.hostname);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("userData", this.userData);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomizationIdentity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomizationIdentity if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CustomizationIdentity.
     */
    public static CustomizationIdentity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomizationIdentity deserializedCustomizationIdentity = new CustomizationIdentity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("data".equals(fieldName)) {
                    deserializedCustomizationIdentity.data = reader.getString();
                } else if ("hostName".equals(fieldName)) {
                    deserializedCustomizationIdentity.hostname = CustomizationHostname.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    deserializedCustomizationIdentity.type = CustomizationIdentityType.fromString(reader.getString());
                } else if ("userData".equals(fieldName)) {
                    deserializedCustomizationIdentity.userData = CustomizationIdentityUserData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomizationIdentity;
        });
    }
}
