// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vmwarecloudsimple.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Resource pool model.
 */
@Fluent
public final class ResourcePoolInner implements JsonSerializable<ResourcePoolInner> {
    /*
     * resource pool id (privateCloudId:vsphereId)
     */
    private String id;

    /*
     * Azure region
     */
    private String location;

    /*
     * {ResourcePoolName}
     */
    private String name;

    /*
     * The Private Cloud Id
     */
    private String privateCloudId;

    /*
     * Resource pool properties
     */
    private ResourcePoolProperties innerProperties;

    /*
     * {resourceProviderNamespace}/{resourceType}
     */
    private String type;

    /**
     * Creates an instance of ResourcePoolInner class.
     */
    public ResourcePoolInner() {
    }

    /**
     * Get the id property: resource pool id (privateCloudId:vsphereId).
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: resource pool id (privateCloudId:vsphereId).
     * 
     * @param id the id value to set.
     * @return the ResourcePoolInner object itself.
     */
    public ResourcePoolInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the location property: Azure region.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Get the name property: {ResourcePoolName}.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the privateCloudId property: The Private Cloud Id.
     * 
     * @return the privateCloudId value.
     */
    public String privateCloudId() {
        return this.privateCloudId;
    }

    /**
     * Get the innerProperties property: Resource pool properties.
     * 
     * @return the innerProperties value.
     */
    private ResourcePoolProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: {resourceProviderNamespace}/{resourceType}.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the fullName property: Hierarchical resource pool name.
     * 
     * @return the fullName value.
     */
    public String fullName() {
        return this.innerProperties() == null ? null : this.innerProperties().fullName();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (id() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property id in model ResourcePoolInner"));
        }
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResourcePoolInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourcePoolInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourcePoolInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourcePoolInner.
     */
    public static ResourcePoolInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourcePoolInner deserializedResourcePoolInner = new ResourcePoolInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedResourcePoolInner.id = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedResourcePoolInner.location = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedResourcePoolInner.name = reader.getString();
                } else if ("privateCloudId".equals(fieldName)) {
                    deserializedResourcePoolInner.privateCloudId = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedResourcePoolInner.innerProperties = ResourcePoolProperties.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    deserializedResourcePoolInner.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourcePoolInner;
        });
    }
}
