// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vmwarecloudsimple.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.vmwarecloudsimple.models.GuestOsnicCustomization;
import com.azure.resourcemanager.vmwarecloudsimple.models.NicType;
import java.io.IOException;
import java.util.List;

/**
 * Virtual NIC model.
 */
@Fluent
public final class VirtualNicInner implements JsonSerializable<VirtualNicInner> {
    /*
     * guest OS customization for nic
     */
    private GuestOsnicCustomization customization;

    /*
     * NIC ip address
     */
    private List<String> ipAddresses;

    /*
     * NIC MAC address
     */
    private String macAddress;

    /*
     * Virtual Network
     */
    private VirtualNetworkInner network;

    /*
     * NIC type
     */
    private NicType nicType;

    /*
     * Is NIC powered on/off on boot
     */
    private Boolean powerOnBoot;

    /*
     * NIC id
     */
    private String virtualNicId;

    /*
     * NIC name
     */
    private String virtualNicName;

    /**
     * Creates an instance of VirtualNicInner class.
     */
    public VirtualNicInner() {
    }

    /**
     * Get the customization property: guest OS customization for nic.
     * 
     * @return the customization value.
     */
    public GuestOsnicCustomization customization() {
        return this.customization;
    }

    /**
     * Set the customization property: guest OS customization for nic.
     * 
     * @param customization the customization value to set.
     * @return the VirtualNicInner object itself.
     */
    public VirtualNicInner withCustomization(GuestOsnicCustomization customization) {
        this.customization = customization;
        return this;
    }

    /**
     * Get the ipAddresses property: NIC ip address.
     * 
     * @return the ipAddresses value.
     */
    public List<String> ipAddresses() {
        return this.ipAddresses;
    }

    /**
     * Set the ipAddresses property: NIC ip address.
     * 
     * @param ipAddresses the ipAddresses value to set.
     * @return the VirtualNicInner object itself.
     */
    public VirtualNicInner withIpAddresses(List<String> ipAddresses) {
        this.ipAddresses = ipAddresses;
        return this;
    }

    /**
     * Get the macAddress property: NIC MAC address.
     * 
     * @return the macAddress value.
     */
    public String macAddress() {
        return this.macAddress;
    }

    /**
     * Set the macAddress property: NIC MAC address.
     * 
     * @param macAddress the macAddress value to set.
     * @return the VirtualNicInner object itself.
     */
    public VirtualNicInner withMacAddress(String macAddress) {
        this.macAddress = macAddress;
        return this;
    }

    /**
     * Get the network property: Virtual Network.
     * 
     * @return the network value.
     */
    public VirtualNetworkInner network() {
        return this.network;
    }

    /**
     * Set the network property: Virtual Network.
     * 
     * @param network the network value to set.
     * @return the VirtualNicInner object itself.
     */
    public VirtualNicInner withNetwork(VirtualNetworkInner network) {
        this.network = network;
        return this;
    }

    /**
     * Get the nicType property: NIC type.
     * 
     * @return the nicType value.
     */
    public NicType nicType() {
        return this.nicType;
    }

    /**
     * Set the nicType property: NIC type.
     * 
     * @param nicType the nicType value to set.
     * @return the VirtualNicInner object itself.
     */
    public VirtualNicInner withNicType(NicType nicType) {
        this.nicType = nicType;
        return this;
    }

    /**
     * Get the powerOnBoot property: Is NIC powered on/off on boot.
     * 
     * @return the powerOnBoot value.
     */
    public Boolean powerOnBoot() {
        return this.powerOnBoot;
    }

    /**
     * Set the powerOnBoot property: Is NIC powered on/off on boot.
     * 
     * @param powerOnBoot the powerOnBoot value to set.
     * @return the VirtualNicInner object itself.
     */
    public VirtualNicInner withPowerOnBoot(Boolean powerOnBoot) {
        this.powerOnBoot = powerOnBoot;
        return this;
    }

    /**
     * Get the virtualNicId property: NIC id.
     * 
     * @return the virtualNicId value.
     */
    public String virtualNicId() {
        return this.virtualNicId;
    }

    /**
     * Set the virtualNicId property: NIC id.
     * 
     * @param virtualNicId the virtualNicId value to set.
     * @return the VirtualNicInner object itself.
     */
    public VirtualNicInner withVirtualNicId(String virtualNicId) {
        this.virtualNicId = virtualNicId;
        return this;
    }

    /**
     * Get the virtualNicName property: NIC name.
     * 
     * @return the virtualNicName value.
     */
    public String virtualNicName() {
        return this.virtualNicName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (customization() != null) {
            customization().validate();
        }
        if (network() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property network in model VirtualNicInner"));
        } else {
            network().validate();
        }
        if (nicType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property nicType in model VirtualNicInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VirtualNicInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("network", this.network);
        jsonWriter.writeStringField("nicType", this.nicType == null ? null : this.nicType.toString());
        jsonWriter.writeJsonField("customization", this.customization);
        jsonWriter.writeArrayField("ipAddresses", this.ipAddresses, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("macAddress", this.macAddress);
        jsonWriter.writeBooleanField("powerOnBoot", this.powerOnBoot);
        jsonWriter.writeStringField("virtualNicId", this.virtualNicId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualNicInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualNicInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VirtualNicInner.
     */
    public static VirtualNicInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualNicInner deserializedVirtualNicInner = new VirtualNicInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("network".equals(fieldName)) {
                    deserializedVirtualNicInner.network = VirtualNetworkInner.fromJson(reader);
                } else if ("nicType".equals(fieldName)) {
                    deserializedVirtualNicInner.nicType = NicType.fromString(reader.getString());
                } else if ("customization".equals(fieldName)) {
                    deserializedVirtualNicInner.customization = GuestOsnicCustomization.fromJson(reader);
                } else if ("ipAddresses".equals(fieldName)) {
                    List<String> ipAddresses = reader.readArray(reader1 -> reader1.getString());
                    deserializedVirtualNicInner.ipAddresses = ipAddresses;
                } else if ("macAddress".equals(fieldName)) {
                    deserializedVirtualNicInner.macAddress = reader.getString();
                } else if ("powerOnBoot".equals(fieldName)) {
                    deserializedVirtualNicInner.powerOnBoot = reader.getNullable(JsonReader::getBoolean);
                } else if ("virtualNicId".equals(fieldName)) {
                    deserializedVirtualNicInner.virtualNicId = reader.getString();
                } else if ("virtualNicName".equals(fieldName)) {
                    deserializedVirtualNicInner.virtualNicName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualNicInner;
        });
    }
}
