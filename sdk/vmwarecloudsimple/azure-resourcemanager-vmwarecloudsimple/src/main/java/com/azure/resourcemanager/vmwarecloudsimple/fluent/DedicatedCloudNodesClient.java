// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vmwarecloudsimple.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.vmwarecloudsimple.fluent.models.DedicatedCloudNodeInner;
import com.azure.resourcemanager.vmwarecloudsimple.models.PatchPayload;

/** An instance of this class provides access to all the operations defined in DedicatedCloudNodesClient. */
public interface DedicatedCloudNodesClient {
    /**
     * Returns list of dedicate cloud nodes within subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of dedicated nodes response model.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DedicatedCloudNodeInner> list();

    /**
     * Returns list of dedicate cloud nodes within subscription.
     *
     * @param filter The filter to apply on the list operation.
     * @param top The maximum number of record sets to return.
     * @param skipToken to be used by nextLink implementation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of dedicated nodes response model.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DedicatedCloudNodeInner> list(String filter, Integer top, String skipToken, Context context);

    /**
     * Returns list of dedicate cloud nodes within resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of dedicated nodes response model.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DedicatedCloudNodeInner> listByResourceGroup(String resourceGroupName);

    /**
     * Returns list of dedicate cloud nodes within resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param filter The filter to apply on the list operation.
     * @param top The maximum number of record sets to return.
     * @param skipToken to be used by nextLink implementation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of dedicated nodes response model.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DedicatedCloudNodeInner> listByResourceGroup(
        String resourceGroupName, String filter, Integer top, String skipToken, Context context);

    /**
     * Returns dedicated cloud node.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dedicatedCloudNodeName dedicated cloud node name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dedicated cloud node model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DedicatedCloudNodeInner getByResourceGroup(String resourceGroupName, String dedicatedCloudNodeName);

    /**
     * Returns dedicated cloud node.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dedicatedCloudNodeName dedicated cloud node name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dedicated cloud node model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DedicatedCloudNodeInner> getByResourceGroupWithResponse(
        String resourceGroupName, String dedicatedCloudNodeName, Context context);

    /**
     * Returns dedicated cloud node by its name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dedicatedCloudNodeName dedicated cloud node name.
     * @param dedicatedCloudNodeRequest Create Dedicated Cloud Node request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dedicated cloud node model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<DedicatedCloudNodeInner>, DedicatedCloudNodeInner> beginCreateOrUpdate(
        String resourceGroupName, String dedicatedCloudNodeName, DedicatedCloudNodeInner dedicatedCloudNodeRequest);

    /**
     * Returns dedicated cloud node by its name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dedicatedCloudNodeName dedicated cloud node name.
     * @param dedicatedCloudNodeRequest Create Dedicated Cloud Node request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dedicated cloud node model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<DedicatedCloudNodeInner>, DedicatedCloudNodeInner> beginCreateOrUpdate(
        String resourceGroupName,
        String dedicatedCloudNodeName,
        DedicatedCloudNodeInner dedicatedCloudNodeRequest,
        Context context);

    /**
     * Returns dedicated cloud node by its name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dedicatedCloudNodeName dedicated cloud node name.
     * @param dedicatedCloudNodeRequest Create Dedicated Cloud Node request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dedicated cloud node model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DedicatedCloudNodeInner createOrUpdate(
        String resourceGroupName, String dedicatedCloudNodeName, DedicatedCloudNodeInner dedicatedCloudNodeRequest);

    /**
     * Returns dedicated cloud node by its name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dedicatedCloudNodeName dedicated cloud node name.
     * @param dedicatedCloudNodeRequest Create Dedicated Cloud Node request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dedicated cloud node model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DedicatedCloudNodeInner createOrUpdate(
        String resourceGroupName,
        String dedicatedCloudNodeName,
        DedicatedCloudNodeInner dedicatedCloudNodeRequest,
        Context context);

    /**
     * Delete dedicated cloud node.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dedicatedCloudNodeName dedicated cloud node name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String dedicatedCloudNodeName);

    /**
     * Delete dedicated cloud node.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dedicatedCloudNodeName dedicated cloud node name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceGroupName, String dedicatedCloudNodeName, Context context);

    /**
     * Patches dedicated node properties.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dedicatedCloudNodeName dedicated cloud node name.
     * @param dedicatedCloudNodeRequest Patch Dedicated Cloud Node request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dedicated cloud node model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DedicatedCloudNodeInner update(
        String resourceGroupName, String dedicatedCloudNodeName, PatchPayload dedicatedCloudNodeRequest);

    /**
     * Patches dedicated node properties.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dedicatedCloudNodeName dedicated cloud node name.
     * @param dedicatedCloudNodeRequest Patch Dedicated Cloud Node request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return dedicated cloud node model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DedicatedCloudNodeInner> updateWithResponse(
        String resourceGroupName,
        String dedicatedCloudNodeName,
        PatchPayload dedicatedCloudNodeRequest,
        Context context);
}
