// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vmwarecloudsimple.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.vmwarecloudsimple.models.GuestOSCustomization;
import com.azure.resourcemanager.vmwarecloudsimple.models.GuestOSType;
import com.azure.resourcemanager.vmwarecloudsimple.models.VirtualDisk;
import com.azure.resourcemanager.vmwarecloudsimple.models.VirtualDiskController;
import com.azure.resourcemanager.vmwarecloudsimple.models.VirtualMachineStatus;
import java.io.IOException;
import java.util.List;

/**
 * Properties of virtual machine.
 */
@Fluent
public final class VirtualMachinePropertiesInner implements JsonSerializable<VirtualMachinePropertiesInner> {
    /*
     * The amount of memory
     */
    private int amountOfRam;

    /*
     * The list of Virtual Disks' Controllers
     */
    private List<VirtualDiskController> controllers;

    /*
     * Virtual machine properties
     */
    private GuestOSCustomization customization;

    /*
     * The list of Virtual Disks
     */
    private List<VirtualDisk> disks;

    /*
     * The DNS name of Virtual Machine in VCenter
     */
    private String dnsname;

    /*
     * Expose Guest OS or not
     */
    private Boolean exposeToGuestVM;

    /*
     * The path to virtual machine folder in VCenter
     */
    private String folder;

    /*
     * The name of Guest OS
     */
    private String guestOS;

    /*
     * The Guest OS type
     */
    private GuestOSType guestOSType;

    /*
     * The list of Virtual NICs
     */
    private List<VirtualNicInner> nics;

    /*
     * The number of CPU cores
     */
    private int numberOfCores;

    /*
     * Password for login. Deprecated - use customization property
     */
    private String password;

    /*
     * Private Cloud Id
     */
    private String privateCloudId;

    /*
     * The provisioning status of the resource
     */
    private String provisioningState;

    /*
     * The public ip of Virtual Machine
     */
    private String publicIp;

    /*
     * Virtual Machines Resource Pool
     */
    private ResourcePoolInner resourcePool;

    /*
     * The status of Virtual machine
     */
    private VirtualMachineStatus status;

    /*
     * Virtual Machine Template Id
     */
    private String templateId;

    /*
     * Username for login. Deprecated - use customization property
     */
    private String username;

    /*
     * The list of Virtual VSphere Networks
     */
    private List<String> vSphereNetworks;

    /*
     * The internal id of Virtual Machine in VCenter
     */
    private String vmId;

    /*
     * VMware tools version
     */
    private String vmwaretools;

    /**
     * Creates an instance of VirtualMachinePropertiesInner class.
     */
    public VirtualMachinePropertiesInner() {
    }

    /**
     * Get the amountOfRam property: The amount of memory.
     * 
     * @return the amountOfRam value.
     */
    public int amountOfRam() {
        return this.amountOfRam;
    }

    /**
     * Set the amountOfRam property: The amount of memory.
     * 
     * @param amountOfRam the amountOfRam value to set.
     * @return the VirtualMachinePropertiesInner object itself.
     */
    public VirtualMachinePropertiesInner withAmountOfRam(int amountOfRam) {
        this.amountOfRam = amountOfRam;
        return this;
    }

    /**
     * Get the controllers property: The list of Virtual Disks' Controllers.
     * 
     * @return the controllers value.
     */
    public List<VirtualDiskController> controllers() {
        return this.controllers;
    }

    /**
     * Get the customization property: Virtual machine properties.
     * 
     * @return the customization value.
     */
    public GuestOSCustomization customization() {
        return this.customization;
    }

    /**
     * Set the customization property: Virtual machine properties.
     * 
     * @param customization the customization value to set.
     * @return the VirtualMachinePropertiesInner object itself.
     */
    public VirtualMachinePropertiesInner withCustomization(GuestOSCustomization customization) {
        this.customization = customization;
        return this;
    }

    /**
     * Get the disks property: The list of Virtual Disks.
     * 
     * @return the disks value.
     */
    public List<VirtualDisk> disks() {
        return this.disks;
    }

    /**
     * Set the disks property: The list of Virtual Disks.
     * 
     * @param disks the disks value to set.
     * @return the VirtualMachinePropertiesInner object itself.
     */
    public VirtualMachinePropertiesInner withDisks(List<VirtualDisk> disks) {
        this.disks = disks;
        return this;
    }

    /**
     * Get the dnsname property: The DNS name of Virtual Machine in VCenter.
     * 
     * @return the dnsname value.
     */
    public String dnsname() {
        return this.dnsname;
    }

    /**
     * Get the exposeToGuestVM property: Expose Guest OS or not.
     * 
     * @return the exposeToGuestVM value.
     */
    public Boolean exposeToGuestVM() {
        return this.exposeToGuestVM;
    }

    /**
     * Set the exposeToGuestVM property: Expose Guest OS or not.
     * 
     * @param exposeToGuestVM the exposeToGuestVM value to set.
     * @return the VirtualMachinePropertiesInner object itself.
     */
    public VirtualMachinePropertiesInner withExposeToGuestVM(Boolean exposeToGuestVM) {
        this.exposeToGuestVM = exposeToGuestVM;
        return this;
    }

    /**
     * Get the folder property: The path to virtual machine folder in VCenter.
     * 
     * @return the folder value.
     */
    public String folder() {
        return this.folder;
    }

    /**
     * Get the guestOS property: The name of Guest OS.
     * 
     * @return the guestOS value.
     */
    public String guestOS() {
        return this.guestOS;
    }

    /**
     * Get the guestOSType property: The Guest OS type.
     * 
     * @return the guestOSType value.
     */
    public GuestOSType guestOSType() {
        return this.guestOSType;
    }

    /**
     * Get the nics property: The list of Virtual NICs.
     * 
     * @return the nics value.
     */
    public List<VirtualNicInner> nics() {
        return this.nics;
    }

    /**
     * Set the nics property: The list of Virtual NICs.
     * 
     * @param nics the nics value to set.
     * @return the VirtualMachinePropertiesInner object itself.
     */
    public VirtualMachinePropertiesInner withNics(List<VirtualNicInner> nics) {
        this.nics = nics;
        return this;
    }

    /**
     * Get the numberOfCores property: The number of CPU cores.
     * 
     * @return the numberOfCores value.
     */
    public int numberOfCores() {
        return this.numberOfCores;
    }

    /**
     * Set the numberOfCores property: The number of CPU cores.
     * 
     * @param numberOfCores the numberOfCores value to set.
     * @return the VirtualMachinePropertiesInner object itself.
     */
    public VirtualMachinePropertiesInner withNumberOfCores(int numberOfCores) {
        this.numberOfCores = numberOfCores;
        return this;
    }

    /**
     * Get the password property: Password for login. Deprecated - use customization property.
     * 
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: Password for login. Deprecated - use customization property.
     * 
     * @param password the password value to set.
     * @return the VirtualMachinePropertiesInner object itself.
     */
    public VirtualMachinePropertiesInner withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get the privateCloudId property: Private Cloud Id.
     * 
     * @return the privateCloudId value.
     */
    public String privateCloudId() {
        return this.privateCloudId;
    }

    /**
     * Set the privateCloudId property: Private Cloud Id.
     * 
     * @param privateCloudId the privateCloudId value to set.
     * @return the VirtualMachinePropertiesInner object itself.
     */
    public VirtualMachinePropertiesInner withPrivateCloudId(String privateCloudId) {
        this.privateCloudId = privateCloudId;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning status of the resource.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the publicIp property: The public ip of Virtual Machine.
     * 
     * @return the publicIp value.
     */
    public String publicIp() {
        return this.publicIp;
    }

    /**
     * Get the resourcePool property: Virtual Machines Resource Pool.
     * 
     * @return the resourcePool value.
     */
    public ResourcePoolInner resourcePool() {
        return this.resourcePool;
    }

    /**
     * Set the resourcePool property: Virtual Machines Resource Pool.
     * 
     * @param resourcePool the resourcePool value to set.
     * @return the VirtualMachinePropertiesInner object itself.
     */
    public VirtualMachinePropertiesInner withResourcePool(ResourcePoolInner resourcePool) {
        this.resourcePool = resourcePool;
        return this;
    }

    /**
     * Get the status property: The status of Virtual machine.
     * 
     * @return the status value.
     */
    public VirtualMachineStatus status() {
        return this.status;
    }

    /**
     * Get the templateId property: Virtual Machine Template Id.
     * 
     * @return the templateId value.
     */
    public String templateId() {
        return this.templateId;
    }

    /**
     * Set the templateId property: Virtual Machine Template Id.
     * 
     * @param templateId the templateId value to set.
     * @return the VirtualMachinePropertiesInner object itself.
     */
    public VirtualMachinePropertiesInner withTemplateId(String templateId) {
        this.templateId = templateId;
        return this;
    }

    /**
     * Get the username property: Username for login. Deprecated - use customization property.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: Username for login. Deprecated - use customization property.
     * 
     * @param username the username value to set.
     * @return the VirtualMachinePropertiesInner object itself.
     */
    public VirtualMachinePropertiesInner withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the vSphereNetworks property: The list of Virtual VSphere Networks.
     * 
     * @return the vSphereNetworks value.
     */
    public List<String> vSphereNetworks() {
        return this.vSphereNetworks;
    }

    /**
     * Set the vSphereNetworks property: The list of Virtual VSphere Networks.
     * 
     * @param vSphereNetworks the vSphereNetworks value to set.
     * @return the VirtualMachinePropertiesInner object itself.
     */
    public VirtualMachinePropertiesInner withVSphereNetworks(List<String> vSphereNetworks) {
        this.vSphereNetworks = vSphereNetworks;
        return this;
    }

    /**
     * Get the vmId property: The internal id of Virtual Machine in VCenter.
     * 
     * @return the vmId value.
     */
    public String vmId() {
        return this.vmId;
    }

    /**
     * Get the vmwaretools property: VMware tools version.
     * 
     * @return the vmwaretools value.
     */
    public String vmwaretools() {
        return this.vmwaretools;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (controllers() != null) {
            controllers().forEach(e -> e.validate());
        }
        if (customization() != null) {
            customization().validate();
        }
        if (disks() != null) {
            disks().forEach(e -> e.validate());
        }
        if (nics() != null) {
            nics().forEach(e -> e.validate());
        }
        if (privateCloudId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property privateCloudId in model VirtualMachinePropertiesInner"));
        }
        if (resourcePool() != null) {
            resourcePool().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VirtualMachinePropertiesInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("amountOfRam", this.amountOfRam);
        jsonWriter.writeIntField("numberOfCores", this.numberOfCores);
        jsonWriter.writeStringField("privateCloudId", this.privateCloudId);
        jsonWriter.writeJsonField("customization", this.customization);
        jsonWriter.writeArrayField("disks", this.disks, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("exposeToGuestVM", this.exposeToGuestVM);
        jsonWriter.writeArrayField("nics", this.nics, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("password", this.password);
        jsonWriter.writeJsonField("resourcePool", this.resourcePool);
        jsonWriter.writeStringField("templateId", this.templateId);
        jsonWriter.writeStringField("username", this.username);
        jsonWriter.writeArrayField("vSphereNetworks", this.vSphereNetworks,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachinePropertiesInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachinePropertiesInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VirtualMachinePropertiesInner.
     */
    public static VirtualMachinePropertiesInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachinePropertiesInner deserializedVirtualMachinePropertiesInner
                = new VirtualMachinePropertiesInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("amountOfRam".equals(fieldName)) {
                    deserializedVirtualMachinePropertiesInner.amountOfRam = reader.getInt();
                } else if ("numberOfCores".equals(fieldName)) {
                    deserializedVirtualMachinePropertiesInner.numberOfCores = reader.getInt();
                } else if ("privateCloudId".equals(fieldName)) {
                    deserializedVirtualMachinePropertiesInner.privateCloudId = reader.getString();
                } else if ("controllers".equals(fieldName)) {
                    List<VirtualDiskController> controllers
                        = reader.readArray(reader1 -> VirtualDiskController.fromJson(reader1));
                    deserializedVirtualMachinePropertiesInner.controllers = controllers;
                } else if ("customization".equals(fieldName)) {
                    deserializedVirtualMachinePropertiesInner.customization = GuestOSCustomization.fromJson(reader);
                } else if ("disks".equals(fieldName)) {
                    List<VirtualDisk> disks = reader.readArray(reader1 -> VirtualDisk.fromJson(reader1));
                    deserializedVirtualMachinePropertiesInner.disks = disks;
                } else if ("dnsname".equals(fieldName)) {
                    deserializedVirtualMachinePropertiesInner.dnsname = reader.getString();
                } else if ("exposeToGuestVM".equals(fieldName)) {
                    deserializedVirtualMachinePropertiesInner.exposeToGuestVM
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("folder".equals(fieldName)) {
                    deserializedVirtualMachinePropertiesInner.folder = reader.getString();
                } else if ("guestOS".equals(fieldName)) {
                    deserializedVirtualMachinePropertiesInner.guestOS = reader.getString();
                } else if ("guestOSType".equals(fieldName)) {
                    deserializedVirtualMachinePropertiesInner.guestOSType = GuestOSType.fromString(reader.getString());
                } else if ("nics".equals(fieldName)) {
                    List<VirtualNicInner> nics = reader.readArray(reader1 -> VirtualNicInner.fromJson(reader1));
                    deserializedVirtualMachinePropertiesInner.nics = nics;
                } else if ("password".equals(fieldName)) {
                    deserializedVirtualMachinePropertiesInner.password = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedVirtualMachinePropertiesInner.provisioningState = reader.getString();
                } else if ("publicIP".equals(fieldName)) {
                    deserializedVirtualMachinePropertiesInner.publicIp = reader.getString();
                } else if ("resourcePool".equals(fieldName)) {
                    deserializedVirtualMachinePropertiesInner.resourcePool = ResourcePoolInner.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedVirtualMachinePropertiesInner.status
                        = VirtualMachineStatus.fromString(reader.getString());
                } else if ("templateId".equals(fieldName)) {
                    deserializedVirtualMachinePropertiesInner.templateId = reader.getString();
                } else if ("username".equals(fieldName)) {
                    deserializedVirtualMachinePropertiesInner.username = reader.getString();
                } else if ("vSphereNetworks".equals(fieldName)) {
                    List<String> vSphereNetworks = reader.readArray(reader1 -> reader1.getString());
                    deserializedVirtualMachinePropertiesInner.vSphereNetworks = vSphereNetworks;
                } else if ("vmId".equals(fieldName)) {
                    deserializedVirtualMachinePropertiesInner.vmId = reader.getString();
                } else if ("vmwaretools".equals(fieldName)) {
                    deserializedVirtualMachinePropertiesInner.vmwaretools = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachinePropertiesInner;
        });
    }
}
