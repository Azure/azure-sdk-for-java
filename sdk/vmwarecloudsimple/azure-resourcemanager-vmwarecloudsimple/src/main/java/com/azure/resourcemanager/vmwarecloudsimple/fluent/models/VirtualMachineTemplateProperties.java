// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vmwarecloudsimple.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.vmwarecloudsimple.models.VirtualDisk;
import com.azure.resourcemanager.vmwarecloudsimple.models.VirtualDiskController;
import java.io.IOException;
import java.util.List;

/**
 * Properties of virtual machine template.
 */
@Fluent
public final class VirtualMachineTemplateProperties implements JsonSerializable<VirtualMachineTemplateProperties> {
    /*
     * The amount of memory
     */
    private Integer amountOfRam;

    /*
     * The list of Virtual Disk Controllers
     */
    private List<VirtualDiskController> controllers;

    /*
     * The description of Virtual Machine Template
     */
    private String description;

    /*
     * The list of Virtual Disks
     */
    private List<VirtualDisk> disks;

    /*
     * Expose Guest OS or not
     */
    private Boolean exposeToGuestVM;

    /*
     * The Guest OS
     */
    private String guestOS;

    /*
     * The Guest OS types
     */
    private String guestOSType;

    /*
     * The list of Virtual NICs
     */
    private List<VirtualNicInner> nics;

    /*
     * The number of CPU cores
     */
    private Integer numberOfCores;

    /*
     * path to folder
     */
    private String path;

    /*
     * The Private Cloud Id
     */
    private String privateCloudId;

    /*
     * The list of VSphere networks
     */
    private List<String> vSphereNetworks;

    /*
     * The tags from VSphere
     */
    private List<String> vSphereTags;

    /*
     * The VMware tools version
     */
    private String vmwaretools;

    /**
     * Creates an instance of VirtualMachineTemplateProperties class.
     */
    public VirtualMachineTemplateProperties() {
    }

    /**
     * Get the amountOfRam property: The amount of memory.
     * 
     * @return the amountOfRam value.
     */
    public Integer amountOfRam() {
        return this.amountOfRam;
    }

    /**
     * Set the amountOfRam property: The amount of memory.
     * 
     * @param amountOfRam the amountOfRam value to set.
     * @return the VirtualMachineTemplateProperties object itself.
     */
    public VirtualMachineTemplateProperties withAmountOfRam(Integer amountOfRam) {
        this.amountOfRam = amountOfRam;
        return this;
    }

    /**
     * Get the controllers property: The list of Virtual Disk Controllers.
     * 
     * @return the controllers value.
     */
    public List<VirtualDiskController> controllers() {
        return this.controllers;
    }

    /**
     * Set the controllers property: The list of Virtual Disk Controllers.
     * 
     * @param controllers the controllers value to set.
     * @return the VirtualMachineTemplateProperties object itself.
     */
    public VirtualMachineTemplateProperties withControllers(List<VirtualDiskController> controllers) {
        this.controllers = controllers;
        return this;
    }

    /**
     * Get the description property: The description of Virtual Machine Template.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of Virtual Machine Template.
     * 
     * @param description the description value to set.
     * @return the VirtualMachineTemplateProperties object itself.
     */
    public VirtualMachineTemplateProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the disks property: The list of Virtual Disks.
     * 
     * @return the disks value.
     */
    public List<VirtualDisk> disks() {
        return this.disks;
    }

    /**
     * Set the disks property: The list of Virtual Disks.
     * 
     * @param disks the disks value to set.
     * @return the VirtualMachineTemplateProperties object itself.
     */
    public VirtualMachineTemplateProperties withDisks(List<VirtualDisk> disks) {
        this.disks = disks;
        return this;
    }

    /**
     * Get the exposeToGuestVM property: Expose Guest OS or not.
     * 
     * @return the exposeToGuestVM value.
     */
    public Boolean exposeToGuestVM() {
        return this.exposeToGuestVM;
    }

    /**
     * Set the exposeToGuestVM property: Expose Guest OS or not.
     * 
     * @param exposeToGuestVM the exposeToGuestVM value to set.
     * @return the VirtualMachineTemplateProperties object itself.
     */
    public VirtualMachineTemplateProperties withExposeToGuestVM(Boolean exposeToGuestVM) {
        this.exposeToGuestVM = exposeToGuestVM;
        return this;
    }

    /**
     * Get the guestOS property: The Guest OS.
     * 
     * @return the guestOS value.
     */
    public String guestOS() {
        return this.guestOS;
    }

    /**
     * Get the guestOSType property: The Guest OS types.
     * 
     * @return the guestOSType value.
     */
    public String guestOSType() {
        return this.guestOSType;
    }

    /**
     * Get the nics property: The list of Virtual NICs.
     * 
     * @return the nics value.
     */
    public List<VirtualNicInner> nics() {
        return this.nics;
    }

    /**
     * Set the nics property: The list of Virtual NICs.
     * 
     * @param nics the nics value to set.
     * @return the VirtualMachineTemplateProperties object itself.
     */
    public VirtualMachineTemplateProperties withNics(List<VirtualNicInner> nics) {
        this.nics = nics;
        return this;
    }

    /**
     * Get the numberOfCores property: The number of CPU cores.
     * 
     * @return the numberOfCores value.
     */
    public Integer numberOfCores() {
        return this.numberOfCores;
    }

    /**
     * Set the numberOfCores property: The number of CPU cores.
     * 
     * @param numberOfCores the numberOfCores value to set.
     * @return the VirtualMachineTemplateProperties object itself.
     */
    public VirtualMachineTemplateProperties withNumberOfCores(Integer numberOfCores) {
        this.numberOfCores = numberOfCores;
        return this;
    }

    /**
     * Get the path property: path to folder.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: path to folder.
     * 
     * @param path the path value to set.
     * @return the VirtualMachineTemplateProperties object itself.
     */
    public VirtualMachineTemplateProperties withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the privateCloudId property: The Private Cloud Id.
     * 
     * @return the privateCloudId value.
     */
    public String privateCloudId() {
        return this.privateCloudId;
    }

    /**
     * Set the privateCloudId property: The Private Cloud Id.
     * 
     * @param privateCloudId the privateCloudId value to set.
     * @return the VirtualMachineTemplateProperties object itself.
     */
    public VirtualMachineTemplateProperties withPrivateCloudId(String privateCloudId) {
        this.privateCloudId = privateCloudId;
        return this;
    }

    /**
     * Get the vSphereNetworks property: The list of VSphere networks.
     * 
     * @return the vSphereNetworks value.
     */
    public List<String> vSphereNetworks() {
        return this.vSphereNetworks;
    }

    /**
     * Set the vSphereNetworks property: The list of VSphere networks.
     * 
     * @param vSphereNetworks the vSphereNetworks value to set.
     * @return the VirtualMachineTemplateProperties object itself.
     */
    public VirtualMachineTemplateProperties withVSphereNetworks(List<String> vSphereNetworks) {
        this.vSphereNetworks = vSphereNetworks;
        return this;
    }

    /**
     * Get the vSphereTags property: The tags from VSphere.
     * 
     * @return the vSphereTags value.
     */
    public List<String> vSphereTags() {
        return this.vSphereTags;
    }

    /**
     * Set the vSphereTags property: The tags from VSphere.
     * 
     * @param vSphereTags the vSphereTags value to set.
     * @return the VirtualMachineTemplateProperties object itself.
     */
    public VirtualMachineTemplateProperties withVSphereTags(List<String> vSphereTags) {
        this.vSphereTags = vSphereTags;
        return this;
    }

    /**
     * Get the vmwaretools property: The VMware tools version.
     * 
     * @return the vmwaretools value.
     */
    public String vmwaretools() {
        return this.vmwaretools;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (controllers() != null) {
            controllers().forEach(e -> e.validate());
        }
        if (disks() != null) {
            disks().forEach(e -> e.validate());
        }
        if (nics() != null) {
            nics().forEach(e -> e.validate());
        }
        if (privateCloudId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property privateCloudId in model VirtualMachineTemplateProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VirtualMachineTemplateProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("privateCloudId", this.privateCloudId);
        jsonWriter.writeNumberField("amountOfRam", this.amountOfRam);
        jsonWriter.writeArrayField("controllers", this.controllers, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("disks", this.disks, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("exposeToGuestVM", this.exposeToGuestVM);
        jsonWriter.writeArrayField("nics", this.nics, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("numberOfCores", this.numberOfCores);
        jsonWriter.writeStringField("path", this.path);
        jsonWriter.writeArrayField("vSphereNetworks", this.vSphereNetworks,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("vSphereTags", this.vSphereTags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineTemplateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineTemplateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VirtualMachineTemplateProperties.
     */
    public static VirtualMachineTemplateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineTemplateProperties deserializedVirtualMachineTemplateProperties
                = new VirtualMachineTemplateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("privateCloudId".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.privateCloudId = reader.getString();
                } else if ("amountOfRam".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.amountOfRam = reader.getNullable(JsonReader::getInt);
                } else if ("controllers".equals(fieldName)) {
                    List<VirtualDiskController> controllers
                        = reader.readArray(reader1 -> VirtualDiskController.fromJson(reader1));
                    deserializedVirtualMachineTemplateProperties.controllers = controllers;
                } else if ("description".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.description = reader.getString();
                } else if ("disks".equals(fieldName)) {
                    List<VirtualDisk> disks = reader.readArray(reader1 -> VirtualDisk.fromJson(reader1));
                    deserializedVirtualMachineTemplateProperties.disks = disks;
                } else if ("exposeToGuestVM".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.exposeToGuestVM
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("guestOS".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.guestOS = reader.getString();
                } else if ("guestOSType".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.guestOSType = reader.getString();
                } else if ("nics".equals(fieldName)) {
                    List<VirtualNicInner> nics = reader.readArray(reader1 -> VirtualNicInner.fromJson(reader1));
                    deserializedVirtualMachineTemplateProperties.nics = nics;
                } else if ("numberOfCores".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.numberOfCores = reader.getNullable(JsonReader::getInt);
                } else if ("path".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.path = reader.getString();
                } else if ("vSphereNetworks".equals(fieldName)) {
                    List<String> vSphereNetworks = reader.readArray(reader1 -> reader1.getString());
                    deserializedVirtualMachineTemplateProperties.vSphereNetworks = vSphereNetworks;
                } else if ("vSphereTags".equals(fieldName)) {
                    List<String> vSphereTags = reader.readArray(reader1 -> reader1.getString());
                    deserializedVirtualMachineTemplateProperties.vSphereTags = vSphereTags;
                } else if ("vmwaretools".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.vmwaretools = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineTemplateProperties;
        });
    }
}
