// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vmwarecloudsimple.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

/**
 * Properties of private.
 */
@Fluent
public final class PrivateCloudProperties implements JsonSerializable<PrivateCloudProperties> {
    /*
     * Availability Zone id, e.g. "az1"
     */
    private String availabilityZoneId;

    /*
     * Availability Zone name, e.g. "Availability Zone 1"
     */
    private String availabilityZoneName;

    /*
     * Number of clusters
     */
    private Integer clustersNumber;

    /*
     * User's emails who created cloud
     */
    private String createdBy;

    /*
     * When private cloud was created
     */
    private OffsetDateTime createdOn;

    /*
     * Array of DNS servers
     */
    private List<String> dnsServers;

    /*
     * Expiration date of PC
     */
    private String expires;

    /*
     * Nsx Type, e.g. "Advanced"
     */
    private String nsxType;

    /*
     * Placement Group id, e.g. "n1"
     */
    private String placementGroupId;

    /*
     * Placement Group name
     */
    private String placementGroupName;

    /*
     * Id of a private cloud
     */
    private UUID privateCloudId;

    /*
     * The list of Resource Pools
     */
    private List<ResourcePoolInner> resourcePools;

    /*
     * Private Cloud state, e.g. "operational"
     */
    private String state;

    /*
     * Number of cores
     */
    private Integer totalCpuCores;

    /*
     * Number of nodes
     */
    private Integer totalNodes;

    /*
     * Memory size
     */
    private Integer totalRam;

    /*
     * Disk space in TB
     */
    private Float totalStorage;

    /*
     * Virtualization type e.g. "vSphere"
     */
    private String type;

    /*
     * e.g. "6.5u2"
     */
    private String vSphereVersion;

    /*
     * FQDN for vcenter access
     */
    private String vcenterFqdn;

    /*
     * Vcenter ip address
     */
    private String vcenterRefid;

    /*
     * The list of Virtual Machine Templates
     */
    private List<VirtualMachineTemplateInner> virtualMachineTemplates;

    /*
     * The list of Virtual Networks
     */
    private List<VirtualNetworkInner> virtualNetworks;

    /*
     * Is vRealize Operations Manager enabled/disabled
     */
    private Boolean vrOpsEnabled;

    /**
     * Creates an instance of PrivateCloudProperties class.
     */
    public PrivateCloudProperties() {
    }

    /**
     * Get the availabilityZoneId property: Availability Zone id, e.g. "az1".
     * 
     * @return the availabilityZoneId value.
     */
    public String availabilityZoneId() {
        return this.availabilityZoneId;
    }

    /**
     * Set the availabilityZoneId property: Availability Zone id, e.g. "az1".
     * 
     * @param availabilityZoneId the availabilityZoneId value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withAvailabilityZoneId(String availabilityZoneId) {
        this.availabilityZoneId = availabilityZoneId;
        return this;
    }

    /**
     * Get the availabilityZoneName property: Availability Zone name, e.g. "Availability Zone 1".
     * 
     * @return the availabilityZoneName value.
     */
    public String availabilityZoneName() {
        return this.availabilityZoneName;
    }

    /**
     * Set the availabilityZoneName property: Availability Zone name, e.g. "Availability Zone 1".
     * 
     * @param availabilityZoneName the availabilityZoneName value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withAvailabilityZoneName(String availabilityZoneName) {
        this.availabilityZoneName = availabilityZoneName;
        return this;
    }

    /**
     * Get the clustersNumber property: Number of clusters.
     * 
     * @return the clustersNumber value.
     */
    public Integer clustersNumber() {
        return this.clustersNumber;
    }

    /**
     * Set the clustersNumber property: Number of clusters.
     * 
     * @param clustersNumber the clustersNumber value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withClustersNumber(Integer clustersNumber) {
        this.clustersNumber = clustersNumber;
        return this;
    }

    /**
     * Get the createdBy property: User's emails who created cloud.
     * 
     * @return the createdBy value.
     */
    public String createdBy() {
        return this.createdBy;
    }

    /**
     * Set the createdBy property: User's emails who created cloud.
     * 
     * @param createdBy the createdBy value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Get the createdOn property: When private cloud was created.
     * 
     * @return the createdOn value.
     */
    public OffsetDateTime createdOn() {
        return this.createdOn;
    }

    /**
     * Set the createdOn property: When private cloud was created.
     * 
     * @param createdOn the createdOn value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withCreatedOn(OffsetDateTime createdOn) {
        this.createdOn = createdOn;
        return this;
    }

    /**
     * Get the dnsServers property: Array of DNS servers.
     * 
     * @return the dnsServers value.
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }

    /**
     * Set the dnsServers property: Array of DNS servers.
     * 
     * @param dnsServers the dnsServers value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withDnsServers(List<String> dnsServers) {
        this.dnsServers = dnsServers;
        return this;
    }

    /**
     * Get the expires property: Expiration date of PC.
     * 
     * @return the expires value.
     */
    public String expires() {
        return this.expires;
    }

    /**
     * Set the expires property: Expiration date of PC.
     * 
     * @param expires the expires value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withExpires(String expires) {
        this.expires = expires;
        return this;
    }

    /**
     * Get the nsxType property: Nsx Type, e.g. "Advanced".
     * 
     * @return the nsxType value.
     */
    public String nsxType() {
        return this.nsxType;
    }

    /**
     * Set the nsxType property: Nsx Type, e.g. "Advanced".
     * 
     * @param nsxType the nsxType value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withNsxType(String nsxType) {
        this.nsxType = nsxType;
        return this;
    }

    /**
     * Get the placementGroupId property: Placement Group id, e.g. "n1".
     * 
     * @return the placementGroupId value.
     */
    public String placementGroupId() {
        return this.placementGroupId;
    }

    /**
     * Set the placementGroupId property: Placement Group id, e.g. "n1".
     * 
     * @param placementGroupId the placementGroupId value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withPlacementGroupId(String placementGroupId) {
        this.placementGroupId = placementGroupId;
        return this;
    }

    /**
     * Get the placementGroupName property: Placement Group name.
     * 
     * @return the placementGroupName value.
     */
    public String placementGroupName() {
        return this.placementGroupName;
    }

    /**
     * Set the placementGroupName property: Placement Group name.
     * 
     * @param placementGroupName the placementGroupName value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withPlacementGroupName(String placementGroupName) {
        this.placementGroupName = placementGroupName;
        return this;
    }

    /**
     * Get the privateCloudId property: Id of a private cloud.
     * 
     * @return the privateCloudId value.
     */
    public UUID privateCloudId() {
        return this.privateCloudId;
    }

    /**
     * Set the privateCloudId property: Id of a private cloud.
     * 
     * @param privateCloudId the privateCloudId value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withPrivateCloudId(UUID privateCloudId) {
        this.privateCloudId = privateCloudId;
        return this;
    }

    /**
     * Get the resourcePools property: The list of Resource Pools.
     * 
     * @return the resourcePools value.
     */
    public List<ResourcePoolInner> resourcePools() {
        return this.resourcePools;
    }

    /**
     * Set the resourcePools property: The list of Resource Pools.
     * 
     * @param resourcePools the resourcePools value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withResourcePools(List<ResourcePoolInner> resourcePools) {
        this.resourcePools = resourcePools;
        return this;
    }

    /**
     * Get the state property: Private Cloud state, e.g. "operational".
     * 
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Set the state property: Private Cloud state, e.g. "operational".
     * 
     * @param state the state value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withState(String state) {
        this.state = state;
        return this;
    }

    /**
     * Get the totalCpuCores property: Number of cores.
     * 
     * @return the totalCpuCores value.
     */
    public Integer totalCpuCores() {
        return this.totalCpuCores;
    }

    /**
     * Set the totalCpuCores property: Number of cores.
     * 
     * @param totalCpuCores the totalCpuCores value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withTotalCpuCores(Integer totalCpuCores) {
        this.totalCpuCores = totalCpuCores;
        return this;
    }

    /**
     * Get the totalNodes property: Number of nodes.
     * 
     * @return the totalNodes value.
     */
    public Integer totalNodes() {
        return this.totalNodes;
    }

    /**
     * Set the totalNodes property: Number of nodes.
     * 
     * @param totalNodes the totalNodes value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withTotalNodes(Integer totalNodes) {
        this.totalNodes = totalNodes;
        return this;
    }

    /**
     * Get the totalRam property: Memory size.
     * 
     * @return the totalRam value.
     */
    public Integer totalRam() {
        return this.totalRam;
    }

    /**
     * Set the totalRam property: Memory size.
     * 
     * @param totalRam the totalRam value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withTotalRam(Integer totalRam) {
        this.totalRam = totalRam;
        return this;
    }

    /**
     * Get the totalStorage property: Disk space in TB.
     * 
     * @return the totalStorage value.
     */
    public Float totalStorage() {
        return this.totalStorage;
    }

    /**
     * Set the totalStorage property: Disk space in TB.
     * 
     * @param totalStorage the totalStorage value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withTotalStorage(Float totalStorage) {
        this.totalStorage = totalStorage;
        return this;
    }

    /**
     * Get the type property: Virtualization type e.g. "vSphere".
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Virtualization type e.g. "vSphere".
     * 
     * @param type the type value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the vSphereVersion property: e.g. "6.5u2".
     * 
     * @return the vSphereVersion value.
     */
    public String vSphereVersion() {
        return this.vSphereVersion;
    }

    /**
     * Set the vSphereVersion property: e.g. "6.5u2".
     * 
     * @param vSphereVersion the vSphereVersion value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withVSphereVersion(String vSphereVersion) {
        this.vSphereVersion = vSphereVersion;
        return this;
    }

    /**
     * Get the vcenterFqdn property: FQDN for vcenter access.
     * 
     * @return the vcenterFqdn value.
     */
    public String vcenterFqdn() {
        return this.vcenterFqdn;
    }

    /**
     * Set the vcenterFqdn property: FQDN for vcenter access.
     * 
     * @param vcenterFqdn the vcenterFqdn value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withVcenterFqdn(String vcenterFqdn) {
        this.vcenterFqdn = vcenterFqdn;
        return this;
    }

    /**
     * Get the vcenterRefid property: Vcenter ip address.
     * 
     * @return the vcenterRefid value.
     */
    public String vcenterRefid() {
        return this.vcenterRefid;
    }

    /**
     * Set the vcenterRefid property: Vcenter ip address.
     * 
     * @param vcenterRefid the vcenterRefid value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withVcenterRefid(String vcenterRefid) {
        this.vcenterRefid = vcenterRefid;
        return this;
    }

    /**
     * Get the virtualMachineTemplates property: The list of Virtual Machine Templates.
     * 
     * @return the virtualMachineTemplates value.
     */
    public List<VirtualMachineTemplateInner> virtualMachineTemplates() {
        return this.virtualMachineTemplates;
    }

    /**
     * Set the virtualMachineTemplates property: The list of Virtual Machine Templates.
     * 
     * @param virtualMachineTemplates the virtualMachineTemplates value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties
        withVirtualMachineTemplates(List<VirtualMachineTemplateInner> virtualMachineTemplates) {
        this.virtualMachineTemplates = virtualMachineTemplates;
        return this;
    }

    /**
     * Get the virtualNetworks property: The list of Virtual Networks.
     * 
     * @return the virtualNetworks value.
     */
    public List<VirtualNetworkInner> virtualNetworks() {
        return this.virtualNetworks;
    }

    /**
     * Set the virtualNetworks property: The list of Virtual Networks.
     * 
     * @param virtualNetworks the virtualNetworks value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withVirtualNetworks(List<VirtualNetworkInner> virtualNetworks) {
        this.virtualNetworks = virtualNetworks;
        return this;
    }

    /**
     * Get the vrOpsEnabled property: Is vRealize Operations Manager enabled/disabled.
     * 
     * @return the vrOpsEnabled value.
     */
    public Boolean vrOpsEnabled() {
        return this.vrOpsEnabled;
    }

    /**
     * Set the vrOpsEnabled property: Is vRealize Operations Manager enabled/disabled.
     * 
     * @param vrOpsEnabled the vrOpsEnabled value to set.
     * @return the PrivateCloudProperties object itself.
     */
    public PrivateCloudProperties withVrOpsEnabled(Boolean vrOpsEnabled) {
        this.vrOpsEnabled = vrOpsEnabled;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourcePools() != null) {
            resourcePools().forEach(e -> e.validate());
        }
        if (virtualMachineTemplates() != null) {
            virtualMachineTemplates().forEach(e -> e.validate());
        }
        if (virtualNetworks() != null) {
            virtualNetworks().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("availabilityZoneId", this.availabilityZoneId);
        jsonWriter.writeStringField("availabilityZoneName", this.availabilityZoneName);
        jsonWriter.writeNumberField("clustersNumber", this.clustersNumber);
        jsonWriter.writeStringField("createdBy", this.createdBy);
        jsonWriter.writeStringField("createdOn",
            this.createdOn == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdOn));
        jsonWriter.writeArrayField("dnsServers", this.dnsServers, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("expires", this.expires);
        jsonWriter.writeStringField("nsxType", this.nsxType);
        jsonWriter.writeStringField("placementGroupId", this.placementGroupId);
        jsonWriter.writeStringField("placementGroupName", this.placementGroupName);
        jsonWriter.writeStringField("privateCloudId", Objects.toString(this.privateCloudId, null));
        jsonWriter.writeArrayField("resourcePools", this.resourcePools, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("state", this.state);
        jsonWriter.writeNumberField("totalCpuCores", this.totalCpuCores);
        jsonWriter.writeNumberField("totalNodes", this.totalNodes);
        jsonWriter.writeNumberField("totalRam", this.totalRam);
        jsonWriter.writeNumberField("totalStorage", this.totalStorage);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("vSphereVersion", this.vSphereVersion);
        jsonWriter.writeStringField("vcenterFqdn", this.vcenterFqdn);
        jsonWriter.writeStringField("vcenterRefid", this.vcenterRefid);
        jsonWriter.writeArrayField("virtualMachineTemplates", this.virtualMachineTemplates,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("virtualNetworks", this.virtualNetworks,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("vrOpsEnabled", this.vrOpsEnabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PrivateCloudProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PrivateCloudProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PrivateCloudProperties.
     */
    public static PrivateCloudProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PrivateCloudProperties deserializedPrivateCloudProperties = new PrivateCloudProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("availabilityZoneId".equals(fieldName)) {
                    deserializedPrivateCloudProperties.availabilityZoneId = reader.getString();
                } else if ("availabilityZoneName".equals(fieldName)) {
                    deserializedPrivateCloudProperties.availabilityZoneName = reader.getString();
                } else if ("clustersNumber".equals(fieldName)) {
                    deserializedPrivateCloudProperties.clustersNumber = reader.getNullable(JsonReader::getInt);
                } else if ("createdBy".equals(fieldName)) {
                    deserializedPrivateCloudProperties.createdBy = reader.getString();
                } else if ("createdOn".equals(fieldName)) {
                    deserializedPrivateCloudProperties.createdOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("dnsServers".equals(fieldName)) {
                    List<String> dnsServers = reader.readArray(reader1 -> reader1.getString());
                    deserializedPrivateCloudProperties.dnsServers = dnsServers;
                } else if ("expires".equals(fieldName)) {
                    deserializedPrivateCloudProperties.expires = reader.getString();
                } else if ("nsxType".equals(fieldName)) {
                    deserializedPrivateCloudProperties.nsxType = reader.getString();
                } else if ("placementGroupId".equals(fieldName)) {
                    deserializedPrivateCloudProperties.placementGroupId = reader.getString();
                } else if ("placementGroupName".equals(fieldName)) {
                    deserializedPrivateCloudProperties.placementGroupName = reader.getString();
                } else if ("privateCloudId".equals(fieldName)) {
                    deserializedPrivateCloudProperties.privateCloudId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("resourcePools".equals(fieldName)) {
                    List<ResourcePoolInner> resourcePools
                        = reader.readArray(reader1 -> ResourcePoolInner.fromJson(reader1));
                    deserializedPrivateCloudProperties.resourcePools = resourcePools;
                } else if ("state".equals(fieldName)) {
                    deserializedPrivateCloudProperties.state = reader.getString();
                } else if ("totalCpuCores".equals(fieldName)) {
                    deserializedPrivateCloudProperties.totalCpuCores = reader.getNullable(JsonReader::getInt);
                } else if ("totalNodes".equals(fieldName)) {
                    deserializedPrivateCloudProperties.totalNodes = reader.getNullable(JsonReader::getInt);
                } else if ("totalRam".equals(fieldName)) {
                    deserializedPrivateCloudProperties.totalRam = reader.getNullable(JsonReader::getInt);
                } else if ("totalStorage".equals(fieldName)) {
                    deserializedPrivateCloudProperties.totalStorage = reader.getNullable(JsonReader::getFloat);
                } else if ("type".equals(fieldName)) {
                    deserializedPrivateCloudProperties.type = reader.getString();
                } else if ("vSphereVersion".equals(fieldName)) {
                    deserializedPrivateCloudProperties.vSphereVersion = reader.getString();
                } else if ("vcenterFqdn".equals(fieldName)) {
                    deserializedPrivateCloudProperties.vcenterFqdn = reader.getString();
                } else if ("vcenterRefid".equals(fieldName)) {
                    deserializedPrivateCloudProperties.vcenterRefid = reader.getString();
                } else if ("virtualMachineTemplates".equals(fieldName)) {
                    List<VirtualMachineTemplateInner> virtualMachineTemplates
                        = reader.readArray(reader1 -> VirtualMachineTemplateInner.fromJson(reader1));
                    deserializedPrivateCloudProperties.virtualMachineTemplates = virtualMachineTemplates;
                } else if ("virtualNetworks".equals(fieldName)) {
                    List<VirtualNetworkInner> virtualNetworks
                        = reader.readArray(reader1 -> VirtualNetworkInner.fromJson(reader1));
                    deserializedPrivateCloudProperties.virtualNetworks = virtualNetworks;
                } else if ("vrOpsEnabled".equals(fieldName)) {
                    deserializedPrivateCloudProperties.vrOpsEnabled = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPrivateCloudProperties;
        });
    }
}
