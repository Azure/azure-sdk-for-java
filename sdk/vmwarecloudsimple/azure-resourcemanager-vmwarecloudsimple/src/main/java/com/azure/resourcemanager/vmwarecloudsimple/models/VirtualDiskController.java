// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vmwarecloudsimple.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Virtual disk controller model.
 */
@Immutable
public final class VirtualDiskController implements JsonSerializable<VirtualDiskController> {
    /*
     * Controller's id
     */
    private String id;

    /*
     * The display name of Controller
     */
    private String name;

    /*
     * dik controller subtype (VMWARE_PARAVIRTUAL, BUS_PARALLEL, LSI_PARALLEL, LSI_SAS)
     */
    private String subType;

    /*
     * disk controller type (SCSI)
     */
    private String type;

    /**
     * Creates an instance of VirtualDiskController class.
     */
    public VirtualDiskController() {
    }

    /**
     * Get the id property: Controller's id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The display name of Controller.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the subType property: dik controller subtype (VMWARE_PARAVIRTUAL, BUS_PARALLEL, LSI_PARALLEL, LSI_SAS).
     * 
     * @return the subType value.
     */
    public String subType() {
        return this.subType;
    }

    /**
     * Get the type property: disk controller type (SCSI).
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualDiskController from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualDiskController if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualDiskController.
     */
    public static VirtualDiskController fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualDiskController deserializedVirtualDiskController = new VirtualDiskController();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedVirtualDiskController.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedVirtualDiskController.name = reader.getString();
                } else if ("subType".equals(fieldName)) {
                    deserializedVirtualDiskController.subType = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedVirtualDiskController.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualDiskController;
        });
    }
}
