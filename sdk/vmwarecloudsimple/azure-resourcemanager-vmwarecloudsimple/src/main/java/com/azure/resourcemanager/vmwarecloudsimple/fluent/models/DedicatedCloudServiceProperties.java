// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.vmwarecloudsimple.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.vmwarecloudsimple.models.OnboardingStatus;
import java.io.IOException;

/**
 * Properties of dedicated cloud service.
 */
@Fluent
public final class DedicatedCloudServiceProperties implements JsonSerializable<DedicatedCloudServiceProperties> {
    /*
     * gateway Subnet for the account. It will collect the subnet address and always treat it as /28
     */
    private String gatewaySubnet;

    /*
     * indicates whether account onboarded or not in a given region
     */
    private OnboardingStatus isAccountOnboarded;

    /*
     * total nodes purchased
     */
    private Integer nodes;

    /*
     * link to a service management web portal
     */
    private String serviceUrl;

    /**
     * Creates an instance of DedicatedCloudServiceProperties class.
     */
    public DedicatedCloudServiceProperties() {
    }

    /**
     * Get the gatewaySubnet property: gateway Subnet for the account. It will collect the subnet address and always
     * treat it as /28.
     * 
     * @return the gatewaySubnet value.
     */
    public String gatewaySubnet() {
        return this.gatewaySubnet;
    }

    /**
     * Set the gatewaySubnet property: gateway Subnet for the account. It will collect the subnet address and always
     * treat it as /28.
     * 
     * @param gatewaySubnet the gatewaySubnet value to set.
     * @return the DedicatedCloudServiceProperties object itself.
     */
    public DedicatedCloudServiceProperties withGatewaySubnet(String gatewaySubnet) {
        this.gatewaySubnet = gatewaySubnet;
        return this;
    }

    /**
     * Get the isAccountOnboarded property: indicates whether account onboarded or not in a given region.
     * 
     * @return the isAccountOnboarded value.
     */
    public OnboardingStatus isAccountOnboarded() {
        return this.isAccountOnboarded;
    }

    /**
     * Get the nodes property: total nodes purchased.
     * 
     * @return the nodes value.
     */
    public Integer nodes() {
        return this.nodes;
    }

    /**
     * Get the serviceUrl property: link to a service management web portal.
     * 
     * @return the serviceUrl value.
     */
    public String serviceUrl() {
        return this.serviceUrl;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (gatewaySubnet() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property gatewaySubnet in model DedicatedCloudServiceProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DedicatedCloudServiceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("gatewaySubnet", this.gatewaySubnet);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DedicatedCloudServiceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DedicatedCloudServiceProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DedicatedCloudServiceProperties.
     */
    public static DedicatedCloudServiceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DedicatedCloudServiceProperties deserializedDedicatedCloudServiceProperties
                = new DedicatedCloudServiceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("gatewaySubnet".equals(fieldName)) {
                    deserializedDedicatedCloudServiceProperties.gatewaySubnet = reader.getString();
                } else if ("isAccountOnboarded".equals(fieldName)) {
                    deserializedDedicatedCloudServiceProperties.isAccountOnboarded
                        = OnboardingStatus.fromString(reader.getString());
                } else if ("nodes".equals(fieldName)) {
                    deserializedDedicatedCloudServiceProperties.nodes = reader.getNullable(JsonReader::getInt);
                } else if ("serviceURL".equals(fieldName)) {
                    deserializedDedicatedCloudServiceProperties.serviceUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDedicatedCloudServiceProperties;
        });
    }
}
