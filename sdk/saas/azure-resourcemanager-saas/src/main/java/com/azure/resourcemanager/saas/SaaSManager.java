// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.saas;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.saas.fluent.SaaSManagementClient;
import com.azure.resourcemanager.saas.implementation.ApplicationsImpl;
import com.azure.resourcemanager.saas.implementation.OperationsImpl;
import com.azure.resourcemanager.saas.implementation.ResourceProvidersImpl;
import com.azure.resourcemanager.saas.implementation.SaaSAppModerneligibilitiesImpl;
import com.azure.resourcemanager.saas.implementation.SaaSImpl;
import com.azure.resourcemanager.saas.implementation.SaaSManagementClientBuilder;
import com.azure.resourcemanager.saas.implementation.SaasResourcesImpl;
import com.azure.resourcemanager.saas.implementation.SaasSubscriptionLevelsImpl;
import com.azure.resourcemanager.saas.models.Applications;
import com.azure.resourcemanager.saas.models.Operations;
import com.azure.resourcemanager.saas.models.ResourceProviders;
import com.azure.resourcemanager.saas.models.SaaS;
import com.azure.resourcemanager.saas.models.SaaSAppModerneligibilities;
import com.azure.resourcemanager.saas.models.SaasResources;
import com.azure.resourcemanager.saas.models.SaasSubscriptionLevels;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** Entry point to SaaSManager. REST APIs for Azure Marketplace SaaS Offers. */
public final class SaaSManager {
    private Operations operations;

    private SaaSAppModerneligibilities saaSAppModerneligibilities;

    private Applications applications;

    private SaaS saaS;

    private SaasResources saasResources;

    private ResourceProviders resourceProviders;

    private SaasSubscriptionLevels saasSubscriptionLevels;

    private final SaaSManagementClient clientObject;

    private SaaSManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject =
            new SaaSManagementClientBuilder()
                .pipeline(httpPipeline)
                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
                .subscriptionId(profile.getSubscriptionId())
                .defaultPollInterval(defaultPollInterval)
                .buildClient();
    }

    /**
     * Creates an instance of SaaS service API entry point.
     *
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the SaaS service API instance.
     */
    public static SaaSManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Gets a Configurable instance that can be used to create SaaSManager with optional configuration.
     *
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new SaaSManager.Configurable();
    }

    /** The Configurable allowing configurations to be set. */
    public static final class Configurable {
        private final ClientLogger logger = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval = Objects.requireNonNull(defaultPollInterval, "'retryPolicy' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw logger.logExceptionAsError(new IllegalArgumentException("'httpPipeline' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of SaaS service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the SaaS service API instance.
         */
        public SaaSManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            if (retryPolicy == null) {
                retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies
                .add(
                    new UserAgentPolicy(
                        null,
                        "com.azure.resourcemanager.saas",
                        "1.0.0-beta.1",
                        Configuration.getGlobalConfiguration()));
            policies.add(new RequestIdPolicy());
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies
                .add(
                    new BearerTokenAuthenticationPolicy(
                        credential, profile.getEnvironment().getManagementEndpoint() + "/.default"));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                    .httpClient(httpClient)
                    .policies(policies.toArray(new HttpPipelinePolicy[0]))
                    .build();
            return new SaaSManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /** @return Resource collection API of Operations. */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /** @return Resource collection API of SaaSAppModerneligibilities. */
    public SaaSAppModerneligibilities saaSAppModerneligibilities() {
        if (this.saaSAppModerneligibilities == null) {
            this.saaSAppModerneligibilities =
                new SaaSAppModerneligibilitiesImpl(clientObject.getSaaSAppModerneligibilities(), this);
        }
        return saaSAppModerneligibilities;
    }

    /** @return Resource collection API of Applications. */
    public Applications applications() {
        if (this.applications == null) {
            this.applications = new ApplicationsImpl(clientObject.getApplications(), this);
        }
        return applications;
    }

    /** @return Resource collection API of SaaS. */
    public SaaS saaS() {
        if (this.saaS == null) {
            this.saaS = new SaaSImpl(clientObject.getSaaS(), this);
        }
        return saaS;
    }

    /** @return Resource collection API of SaasResources. */
    public SaasResources saasResources() {
        if (this.saasResources == null) {
            this.saasResources = new SaasResourcesImpl(clientObject.getSaasResources(), this);
        }
        return saasResources;
    }

    /** @return Resource collection API of ResourceProviders. */
    public ResourceProviders resourceProviders() {
        if (this.resourceProviders == null) {
            this.resourceProviders = new ResourceProvidersImpl(clientObject.getResourceProviders(), this);
        }
        return resourceProviders;
    }

    /** @return Resource collection API of SaasSubscriptionLevels. */
    public SaasSubscriptionLevels saasSubscriptionLevels() {
        if (this.saasSubscriptionLevels == null) {
            this.saasSubscriptionLevels =
                new SaasSubscriptionLevelsImpl(clientObject.getSaasSubscriptionLevels(), this);
        }
        return saasSubscriptionLevels;
    }

    /**
     * @return Wrapped service client SaaSManagementClient providing direct access to the underlying auto-generated API
     *     implementation, based on Azure REST API.
     */
    public SaaSManagementClient serviceClient() {
        return this.clientObject;
    }
}
