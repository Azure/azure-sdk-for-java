// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.saas.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.saas.SaaSManager;
import com.azure.resourcemanager.saas.fluent.SaasSubscriptionLevelsClient;
import com.azure.resourcemanager.saas.fluent.models.AccessTokenResultInner;
import com.azure.resourcemanager.saas.fluent.models.SaasResourceInner;
import com.azure.resourcemanager.saas.models.AccessTokenResult;
import com.azure.resourcemanager.saas.models.DeleteOptions;
import com.azure.resourcemanager.saas.models.MoveResource;
import com.azure.resourcemanager.saas.models.SaasResource;
import com.azure.resourcemanager.saas.models.SaasSubscriptionLevels;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class SaasSubscriptionLevelsImpl implements SaasSubscriptionLevels {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SaasSubscriptionLevelsImpl.class);

    private final SaasSubscriptionLevelsClient innerClient;

    private final SaaSManager serviceManager;

    public SaasSubscriptionLevelsImpl(SaasSubscriptionLevelsClient innerClient, SaaSManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SaasResource> list() {
        PagedIterable<SaasResourceInner> inner = this.serviceClient().list();
        return inner.mapPage(inner1 -> new SaasResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SaasResource> list(Context context) {
        PagedIterable<SaasResourceInner> inner = this.serviceClient().list(context);
        return inner.mapPage(inner1 -> new SaasResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SaasResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<SaasResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return inner.mapPage(inner1 -> new SaasResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SaasResource> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<SaasResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return inner.mapPage(inner1 -> new SaasResourceImpl(inner1, this.manager()));
    }

    public SaasResource getByResourceGroup(String resourceGroupName, String resourceName) {
        SaasResourceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, resourceName);
        if (inner != null) {
            return new SaasResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SaasResource> getByResourceGroupWithResponse(
        String resourceGroupName, String resourceName, Context context) {
        Response<SaasResourceInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, resourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SaasResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String resourceName) {
        this.serviceClient().delete(resourceGroupName, resourceName);
    }

    public void delete(String resourceGroupName, String resourceName, Context context) {
        this.serviceClient().delete(resourceGroupName, resourceName, context);
    }

    public void updateToUnsubscribed(String resourceGroupName, String resourceName, DeleteOptions parameters) {
        this.serviceClient().updateToUnsubscribed(resourceGroupName, resourceName, parameters);
    }

    public void updateToUnsubscribed(
        String resourceGroupName, String resourceName, DeleteOptions parameters, Context context) {
        this.serviceClient().updateToUnsubscribed(resourceGroupName, resourceName, parameters, context);
    }

    public AccessTokenResult listAccessToken(String resourceGroupName, String resourceName) {
        AccessTokenResultInner inner = this.serviceClient().listAccessToken(resourceGroupName, resourceName);
        if (inner != null) {
            return new AccessTokenResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AccessTokenResult> listAccessTokenWithResponse(
        String resourceGroupName, String resourceName, Context context) {
        Response<AccessTokenResultInner> inner =
            this.serviceClient().listAccessTokenWithResponse(resourceGroupName, resourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AccessTokenResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void validateMoveResources(String resourceGroupName, MoveResource moveResourceParameter) {
        this.serviceClient().validateMoveResources(resourceGroupName, moveResourceParameter);
    }

    public Response<Void> validateMoveResourcesWithResponse(
        String resourceGroupName, MoveResource moveResourceParameter, Context context) {
        return this
            .serviceClient()
            .validateMoveResourcesWithResponse(resourceGroupName, moveResourceParameter, context);
    }

    public void moveResources(String resourceGroupName, MoveResource moveResourceParameter) {
        this.serviceClient().moveResources(resourceGroupName, moveResourceParameter);
    }

    public void moveResources(String resourceGroupName, MoveResource moveResourceParameter, Context context) {
        this.serviceClient().moveResources(resourceGroupName, moveResourceParameter, context);
    }

    public SaasResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "resources");
        if (resourceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'resources'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, resourceName, Context.NONE).getValue();
    }

    public Response<SaasResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "resources");
        if (resourceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'resources'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, resourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "resources");
        if (resourceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'resources'.", id)));
        }
        this.delete(resourceGroupName, resourceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "resources");
        if (resourceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'resources'.", id)));
        }
        this.delete(resourceGroupName, resourceName, context);
    }

    private SaasSubscriptionLevelsClient serviceClient() {
        return this.innerClient;
    }

    private SaaSManager manager() {
        return this.serviceManager;
    }

    public SaasResourceImpl define(String name) {
        return new SaasResourceImpl(name, this.manager());
    }
}
