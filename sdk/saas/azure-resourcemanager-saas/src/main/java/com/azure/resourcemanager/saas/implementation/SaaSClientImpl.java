// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.saas.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.saas.fluent.SaaSClient;
import com.azure.resourcemanager.saas.fluent.models.SaasResourceInner;
import com.azure.resourcemanager.saas.models.DeleteOptions;
import com.azure.resourcemanager.saas.models.SaasResourceCreation;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in SaaSClient. */
public final class SaaSClientImpl implements SaaSClient {
    private final ClientLogger logger = new ClientLogger(SaaSClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final SaaSService service;

    /** The service client containing this operation class. */
    private final SaaSManagementClientImpl client;

    /**
     * Initializes an instance of SaaSClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SaaSClientImpl(SaaSManagementClientImpl client) {
        this.service = RestProxy.create(SaaSService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SaaSManagementClientSaaS to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SaaSManagementClient")
    private interface SaaSService {
        @Headers({"Content-Type: application/json"})
        @Delete("/providers/Microsoft.SaaS/saasresources/{resourceId}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("resourceId") String resourceId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") DeleteOptions parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/providers/Microsoft.SaaS/saasresources/{resourceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SaasResourceInner>> getResource(
            @HostParam("$host") String endpoint,
            @PathParam("resourceId") String resourceId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch("/providers/Microsoft.SaaS/saasresources/{resourceId}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> updateResource(
            @HostParam("$host") String endpoint,
            @PathParam("resourceId") String resourceId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SaasResourceCreation parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put("/providers/Microsoft.SaaS/saasresources")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createResource(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SaasResourceCreation parameters,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Deletes the specified SaaS.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param parameters Parameters supplied to delete saas operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceId, DeleteOptions parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            resourceId,
                            this.client.getApiVersion(),
                            parameters,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Deletes the specified SaaS.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param parameters Parameters supplied to delete saas operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceId, DeleteOptions parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(this.client.getEndpoint(), resourceId, this.client.getApiVersion(), parameters, accept, context);
    }

    /**
     * Deletes the specified SaaS.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param parameters Parameters supplied to delete saas operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceId, DeleteOptions parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceId, parameters);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Deletes the specified SaaS.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param parameters Parameters supplied to delete saas operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceId, DeleteOptions parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceId, parameters, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Deletes the specified SaaS.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param parameters Parameters supplied to delete saas operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceId, DeleteOptions parameters) {
        return beginDeleteAsync(resourceId, parameters).getSyncPoller();
    }

    /**
     * Deletes the specified SaaS.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param parameters Parameters supplied to delete saas operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceId, DeleteOptions parameters, Context context) {
        return beginDeleteAsync(resourceId, parameters, context).getSyncPoller();
    }

    /**
     * Deletes the specified SaaS.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param parameters Parameters supplied to delete saas operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceId, DeleteOptions parameters) {
        return beginDeleteAsync(resourceId, parameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified SaaS.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param parameters Parameters supplied to delete saas operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceId, DeleteOptions parameters, Context context) {
        return beginDeleteAsync(resourceId, parameters, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified SaaS.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param parameters Parameters supplied to delete saas operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceId, DeleteOptions parameters) {
        deleteAsync(resourceId, parameters).block();
    }

    /**
     * Deletes the specified SaaS.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param parameters Parameters supplied to delete saas operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceId, DeleteOptions parameters, Context context) {
        deleteAsync(resourceId, parameters, context).block();
    }

    /**
     * Gets information about the specified SaaS.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified SaaS.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SaasResourceInner>> getResourceWithResponseAsync(String resourceId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getResource(
                            this.client.getEndpoint(), resourceId, this.client.getApiVersion(), accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Gets information about the specified SaaS.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified SaaS.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SaasResourceInner>> getResourceWithResponseAsync(String resourceId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getResource(this.client.getEndpoint(), resourceId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets information about the specified SaaS.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified SaaS.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SaasResourceInner> getResourceAsync(String resourceId) {
        return getResourceWithResponseAsync(resourceId)
            .flatMap(
                (Response<SaasResourceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets information about the specified SaaS.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified SaaS.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SaasResourceInner getResource(String resourceId) {
        return getResourceAsync(resourceId).block();
    }

    /**
     * Gets information about the specified SaaS.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified SaaS.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SaasResourceInner> getResourceWithResponse(String resourceId, Context context) {
        return getResourceWithResponseAsync(resourceId, context).block();
    }

    /**
     * Updates a SaaS resource.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param parameters Parameters supplied to the update saas operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateResourceWithResponseAsync(
        String resourceId, SaasResourceCreation parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateResource(
                            this.client.getEndpoint(),
                            resourceId,
                            this.client.getApiVersion(),
                            parameters,
                            accept,
                            context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Updates a SaaS resource.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param parameters Parameters supplied to the update saas operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateResourceWithResponseAsync(
        String resourceId, SaasResourceCreation parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceId is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .updateResource(
                this.client.getEndpoint(), resourceId, this.client.getApiVersion(), parameters, accept, context);
    }

    /**
     * Updates a SaaS resource.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param parameters Parameters supplied to the update saas operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<SaasResourceInner>, SaasResourceInner> beginUpdateResourceAsync(
        String resourceId, SaasResourceCreation parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateResourceWithResponseAsync(resourceId, parameters);
        return this
            .client
            .<SaasResourceInner, SaasResourceInner>getLroResult(
                mono, this.client.getHttpPipeline(), SaasResourceInner.class, SaasResourceInner.class, Context.NONE);
    }

    /**
     * Updates a SaaS resource.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param parameters Parameters supplied to the update saas operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<SaasResourceInner>, SaasResourceInner> beginUpdateResourceAsync(
        String resourceId, SaasResourceCreation parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateResourceWithResponseAsync(resourceId, parameters, context);
        return this
            .client
            .<SaasResourceInner, SaasResourceInner>getLroResult(
                mono, this.client.getHttpPipeline(), SaasResourceInner.class, SaasResourceInner.class, context);
    }

    /**
     * Updates a SaaS resource.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param parameters Parameters supplied to the update saas operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<SaasResourceInner>, SaasResourceInner> beginUpdateResource(
        String resourceId, SaasResourceCreation parameters) {
        return beginUpdateResourceAsync(resourceId, parameters).getSyncPoller();
    }

    /**
     * Updates a SaaS resource.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param parameters Parameters supplied to the update saas operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<SaasResourceInner>, SaasResourceInner> beginUpdateResource(
        String resourceId, SaasResourceCreation parameters, Context context) {
        return beginUpdateResourceAsync(resourceId, parameters, context).getSyncPoller();
    }

    /**
     * Updates a SaaS resource.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param parameters Parameters supplied to the update saas operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SaasResourceInner> updateResourceAsync(String resourceId, SaasResourceCreation parameters) {
        return beginUpdateResourceAsync(resourceId, parameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates a SaaS resource.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param parameters Parameters supplied to the update saas operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SaasResourceInner> updateResourceAsync(
        String resourceId, SaasResourceCreation parameters, Context context) {
        return beginUpdateResourceAsync(resourceId, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates a SaaS resource.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param parameters Parameters supplied to the update saas operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SaasResourceInner updateResource(String resourceId, SaasResourceCreation parameters) {
        return updateResourceAsync(resourceId, parameters).block();
    }

    /**
     * Updates a SaaS resource.
     *
     * @param resourceId The Saas resource ID. This is a GUID-formatted string (e.g.
     *     00000000-0000-0000-0000-000000000000).
     * @param parameters Parameters supplied to the update saas operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SaasResourceInner updateResource(String resourceId, SaasResourceCreation parameters, Context context) {
        return updateResourceAsync(resourceId, parameters, context).block();
    }

    /**
     * Creates a SaaS resource.
     *
     * @param parameters Parameters supplied to the create saas operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createResourceWithResponseAsync(SaasResourceCreation parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createResource(
                            this.client.getEndpoint(), this.client.getApiVersion(), parameters, accept, context))
            .subscriberContext(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext())));
    }

    /**
     * Creates a SaaS resource.
     *
     * @param parameters Parameters supplied to the create saas operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createResourceWithResponseAsync(
        SaasResourceCreation parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createResource(this.client.getEndpoint(), this.client.getApiVersion(), parameters, accept, context);
    }

    /**
     * Creates a SaaS resource.
     *
     * @param parameters Parameters supplied to the create saas operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<SaasResourceInner>, SaasResourceInner> beginCreateResourceAsync(
        SaasResourceCreation parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono = createResourceWithResponseAsync(parameters);
        return this
            .client
            .<SaasResourceInner, SaasResourceInner>getLroResult(
                mono, this.client.getHttpPipeline(), SaasResourceInner.class, SaasResourceInner.class, Context.NONE);
    }

    /**
     * Creates a SaaS resource.
     *
     * @param parameters Parameters supplied to the create saas operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<SaasResourceInner>, SaasResourceInner> beginCreateResourceAsync(
        SaasResourceCreation parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createResourceWithResponseAsync(parameters, context);
        return this
            .client
            .<SaasResourceInner, SaasResourceInner>getLroResult(
                mono, this.client.getHttpPipeline(), SaasResourceInner.class, SaasResourceInner.class, context);
    }

    /**
     * Creates a SaaS resource.
     *
     * @param parameters Parameters supplied to the create saas operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<SaasResourceInner>, SaasResourceInner> beginCreateResource(
        SaasResourceCreation parameters) {
        return beginCreateResourceAsync(parameters).getSyncPoller();
    }

    /**
     * Creates a SaaS resource.
     *
     * @param parameters Parameters supplied to the create saas operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<SaasResourceInner>, SaasResourceInner> beginCreateResource(
        SaasResourceCreation parameters, Context context) {
        return beginCreateResourceAsync(parameters, context).getSyncPoller();
    }

    /**
     * Creates a SaaS resource.
     *
     * @param parameters Parameters supplied to the create saas operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SaasResourceInner> createResourceAsync(SaasResourceCreation parameters) {
        return beginCreateResourceAsync(parameters).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a SaaS resource.
     *
     * @param parameters Parameters supplied to the create saas operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SaasResourceInner> createResourceAsync(SaasResourceCreation parameters, Context context) {
        return beginCreateResourceAsync(parameters, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a SaaS resource.
     *
     * @param parameters Parameters supplied to the create saas operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SaasResourceInner createResource(SaasResourceCreation parameters) {
        return createResourceAsync(parameters).block();
    }

    /**
     * Creates a SaaS resource.
     *
     * @param parameters Parameters supplied to the create saas operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return saaS REST API resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SaasResourceInner createResource(SaasResourceCreation parameters, Context context) {
        return createResourceAsync(parameters, context).block();
    }
}
