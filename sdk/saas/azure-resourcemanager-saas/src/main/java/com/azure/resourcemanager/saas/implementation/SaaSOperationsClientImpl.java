// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.saas.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.saas.fluent.SaaSOperationsClient;
import com.azure.resourcemanager.saas.fluent.models.SaasResourceInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in SaaSOperationsClient. */
public final class SaaSOperationsClientImpl implements SaaSOperationsClient {
    private final ClientLogger logger = new ClientLogger(SaaSOperationsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final SaaSOperationsService service;

    /** The service client containing this operation class. */
    private final SaaSManagementClientImpl client;

    /**
     * Initializes an instance of SaaSOperationsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SaaSOperationsClientImpl(SaaSManagementClientImpl client) {
        this.service =
            RestProxy.create(SaaSOperationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SaaSManagementClientSaaSOperations to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SaaSManagementClient")
    private interface SaaSOperationsService {
        @Headers({"Content-Type: application/json"})
        @Get("/providers/Microsoft.SaaS/operationResults/{operationId}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> get(
            @HostParam("$host") String endpoint,
            @PathParam("operationId") String operationId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets information about the specified operation progress.
     *
     * @param operationId the operation Id parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified operation progress.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> getWithResponseAsync(String operationId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.get(this.client.getEndpoint(), operationId, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets information about the specified operation progress.
     *
     * @param operationId the operation Id parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified operation progress.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> getWithResponseAsync(String operationId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (operationId == null) {
            return Mono.error(new IllegalArgumentException("Parameter operationId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), operationId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets information about the specified operation progress.
     *
     * @param operationId the operation Id parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified operation progress.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SaasResourceInner>, SaasResourceInner> beginGetAsync(String operationId) {
        Mono<Response<Flux<ByteBuffer>>> mono = getWithResponseAsync(operationId);
        return this
            .client
            .<SaasResourceInner, SaasResourceInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                SaasResourceInner.class,
                SaasResourceInner.class,
                this.client.getContext());
    }

    /**
     * Gets information about the specified operation progress.
     *
     * @param operationId the operation Id parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified operation progress.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SaasResourceInner>, SaasResourceInner> beginGetAsync(
        String operationId, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = getWithResponseAsync(operationId, context);
        return this
            .client
            .<SaasResourceInner, SaasResourceInner>getLroResult(
                mono, this.client.getHttpPipeline(), SaasResourceInner.class, SaasResourceInner.class, context);
    }

    /**
     * Gets information about the specified operation progress.
     *
     * @param operationId the operation Id parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified operation progress.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SaasResourceInner>, SaasResourceInner> beginGet(String operationId) {
        return beginGetAsync(operationId).getSyncPoller();
    }

    /**
     * Gets information about the specified operation progress.
     *
     * @param operationId the operation Id parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified operation progress.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SaasResourceInner>, SaasResourceInner> beginGet(String operationId, Context context) {
        return beginGetAsync(operationId, context).getSyncPoller();
    }

    /**
     * Gets information about the specified operation progress.
     *
     * @param operationId the operation Id parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified operation progress.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SaasResourceInner> getAsync(String operationId) {
        return beginGetAsync(operationId).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Gets information about the specified operation progress.
     *
     * @param operationId the operation Id parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified operation progress.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SaasResourceInner> getAsync(String operationId, Context context) {
        return beginGetAsync(operationId, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Gets information about the specified operation progress.
     *
     * @param operationId the operation Id parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified operation progress.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SaasResourceInner get(String operationId) {
        return getAsync(operationId).block();
    }

    /**
     * Gets information about the specified operation progress.
     *
     * @param operationId the operation Id parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about the specified operation progress.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SaasResourceInner get(String operationId, Context context) {
        return getAsync(operationId, context).block();
    }
}
