// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.saas.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.saas.fluent.models.SaasResourceInner;
import java.util.Map;

/** An immutable client-side representation of SaasResource. */
public interface SaasResource {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the properties property: saas properties.
     *
     * @return the properties value.
     */
    SaasResourceProperties properties();

    /**
     * Gets the tags property: the resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the inner com.azure.resourcemanager.saas.fluent.models.SaasResourceInner object.
     *
     * @return the inner object.
     */
    SaasResourceInner innerModel();

    /** The entirety of the SaasResource definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithResourceGroup, DefinitionStages.WithCreate {
    }
    /** The SaasResource definition stages. */
    interface DefinitionStages {
        /** The first stage of the SaasResource definition. */
        interface Blank extends WithResourceGroup {
        }
        /** The stage of the SaasResource definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the SaasResource definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithLocation,
                DefinitionStages.WithTags,
                DefinitionStages.WithName,
                DefinitionStages.WithProperties {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            SaasResource create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            SaasResource create(Context context);
        }
        /** The stage of the SaasResource definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location Resource location. Only value allowed for SaaS is 'global'.
             * @return the next definition stage.
             */
            WithCreate withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location Resource location. Only value allowed for SaaS is 'global'.
             * @return the next definition stage.
             */
            WithCreate withRegion(String location);
        }
        /** The stage of the SaasResource definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: the resource tags..
             *
             * @param tags the resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the SaasResource definition allowing to specify name. */
        interface WithName {
            /**
             * Specifies the name property: The resource name.
             *
             * @param name The resource name.
             * @return the next definition stage.
             */
            WithCreate withName(String name);
        }
        /** The stage of the SaasResource definition allowing to specify properties. */
        interface WithProperties {
            /**
             * Specifies the properties property: Properties of the SaaS resource that are relevant for creation..
             *
             * @param properties Properties of the SaaS resource that are relevant for creation.
             * @return the next definition stage.
             */
            WithCreate withProperties(SaasCreationProperties properties);
        }
    }
    /**
     * Begins update for the SaasResource resource.
     *
     * @return the stage of resource update.
     */
    SaasResource.Update update();

    /** The template for SaasResource update. */
    interface Update
        extends UpdateStages.WithLocation, UpdateStages.WithTags, UpdateStages.WithName, UpdateStages.WithProperties {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        SaasResource apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        SaasResource apply(Context context);
    }
    /** The SaasResource update stages. */
    interface UpdateStages {
        /** The stage of the SaasResource update allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the location property: Resource location. Only value allowed for SaaS is 'global'.
             *
             * @param location Resource location. Only value allowed for SaaS is 'global'.
             * @return the next definition stage.
             */
            Update withLocation(String location);
        }
        /** The stage of the SaasResource update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: the resource tags..
             *
             * @param tags the resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the SaasResource update allowing to specify name. */
        interface WithName {
            /**
             * Specifies the name property: The resource name.
             *
             * @param name The resource name.
             * @return the next definition stage.
             */
            Update withName(String name);
        }
        /** The stage of the SaasResource update allowing to specify properties. */
        interface WithProperties {
            /**
             * Specifies the properties property: Properties of the SaaS resource that are relevant for creation..
             *
             * @param properties Properties of the SaaS resource that are relevant for creation.
             * @return the next definition stage.
             */
            Update withProperties(SaasCreationProperties properties);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    SaasResource refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    SaasResource refresh(Context context);

    /**
     * Unsubscribe from a specified Subscription Level SaaS.
     *
     * @param parameters Parameters supplied to unsubscribe saas operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void updateToUnsubscribed(DeleteOptions parameters);

    /**
     * Unsubscribe from a specified Subscription Level SaaS.
     *
     * @param parameters Parameters supplied to unsubscribe saas operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void updateToUnsubscribed(DeleteOptions parameters, Context context);

    /**
     * Gets the ISV access token for a specified Subscription Level SaaS.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ISV access token for a specified Subscription Level SaaS.
     */
    AccessTokenResult listAccessToken();

    /**
     * Gets the ISV access token for a specified Subscription Level SaaS.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ISV access token for a specified Subscription Level SaaS.
     */
    Response<AccessTokenResult> listAccessTokenWithResponse(Context context);
}
