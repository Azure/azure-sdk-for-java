// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.saas.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.saas.SaaSManager;
import com.azure.resourcemanager.saas.fluent.SaaSClient;
import com.azure.resourcemanager.saas.fluent.models.SaasResourceInner;
import com.azure.resourcemanager.saas.models.DeleteOptions;
import com.azure.resourcemanager.saas.models.SaaS;
import com.azure.resourcemanager.saas.models.SaasResource;
import com.azure.resourcemanager.saas.models.SaasResourceCreation;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class SaaSImpl implements SaaS {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SaaSImpl.class);

    private final SaaSClient innerClient;

    private final SaaSManager serviceManager;

    public SaaSImpl(SaaSClient innerClient, SaaSManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceId, DeleteOptions parameters) {
        this.serviceClient().delete(resourceId, parameters);
    }

    public void delete(String resourceId, DeleteOptions parameters, Context context) {
        this.serviceClient().delete(resourceId, parameters, context);
    }

    public SaasResource getResource(String resourceId) {
        SaasResourceInner inner = this.serviceClient().getResource(resourceId);
        if (inner != null) {
            return new SaasResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SaasResource> getResourceWithResponse(String resourceId, Context context) {
        Response<SaasResourceInner> inner = this.serviceClient().getResourceWithResponse(resourceId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SaasResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SaasResource updateResource(String resourceId, SaasResourceCreation parameters) {
        SaasResourceInner inner = this.serviceClient().updateResource(resourceId, parameters);
        if (inner != null) {
            return new SaasResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SaasResource updateResource(String resourceId, SaasResourceCreation parameters, Context context) {
        SaasResourceInner inner = this.serviceClient().updateResource(resourceId, parameters, context);
        if (inner != null) {
            return new SaasResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SaasResource createResource(SaasResourceCreation parameters) {
        SaasResourceInner inner = this.serviceClient().createResource(parameters);
        if (inner != null) {
            return new SaasResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SaasResource createResource(SaasResourceCreation parameters, Context context) {
        SaasResourceInner inner = this.serviceClient().createResource(parameters, context);
        if (inner != null) {
            return new SaasResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private SaaSClient serviceClient() {
        return this.innerClient;
    }

    private SaaSManager manager() {
        return this.serviceManager;
    }
}
