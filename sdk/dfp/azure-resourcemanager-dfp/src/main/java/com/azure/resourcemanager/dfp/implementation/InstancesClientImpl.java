// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dfp.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.dfp.fluent.InstancesClient;
import com.azure.resourcemanager.dfp.fluent.models.CheckInstanceNameAvailabilityResultInner;
import com.azure.resourcemanager.dfp.fluent.models.DfpInstanceInner;
import com.azure.resourcemanager.dfp.models.CheckInstanceNameAvailabilityParameters;
import com.azure.resourcemanager.dfp.models.DfpInstanceUpdateParameters;
import com.azure.resourcemanager.dfp.models.DfpInstances;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in InstancesClient. */
public final class InstancesClientImpl implements InstancesClient {
    private final ClientLogger logger = new ClientLogger(InstancesClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final InstancesService service;

    /** The service client containing this operation class. */
    private final DfpImpl client;

    /**
     * Initializes an instance of InstancesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    InstancesClientImpl(DfpImpl client) {
        this.service =
            RestProxy.create(InstancesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DfpInstances to be used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DfpInstances")
    private interface InstancesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers"
                + "/Microsoft.Dynamics365FraudProtection/instances/{instanceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DfpInstanceInner>> getByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers"
                + "/Microsoft.Dynamics365FraudProtection/instances/{instanceName}")
        @ExpectedResponses({200, 201, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @BodyParam("application/json") DfpInstanceInner instanceParameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers"
                + "/Microsoft.Dynamics365FraudProtection/instances/{instanceName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers"
                + "/Microsoft.Dynamics365FraudProtection/instances/{instanceName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("instanceName") String instanceName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @BodyParam("application/json") DfpInstanceUpdateParameters instanceUpdateParameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers"
                + "/Microsoft.Dynamics365FraudProtection/instances")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DfpInstances>> listByResourceGroup(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Dynamics365FraudProtection/instances")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DfpInstances>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/providers/Microsoft.Dynamics365FraudProtection/locations/{location}"
                + "/checkNameAvailability")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CheckInstanceNameAvailabilityResultInner>> checkNameAvailability(
            @HostParam("$host") String endpoint,
            @PathParam("location") String location,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @BodyParam("application/json") CheckInstanceNameAvailabilityParameters instanceParameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DfpInstances>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DfpInstances>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets details about the specified instances.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the instance. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about the specified instances.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DfpInstanceInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String instanceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getByResourceGroup(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            instanceName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets details about the specified instances.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the instance. It must be a minimum of 3 characters, and a maximum of 63.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about the specified instances.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DfpInstanceInner>> getByResourceGroupWithResponseAsync(
        String resourceGroupName, String instanceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getByResourceGroup(
                this.client.getEndpoint(),
                resourceGroupName,
                instanceName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                accept,
                context);
    }

    /**
     * Gets details about the specified instances.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the instance. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about the specified instances.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DfpInstanceInner> getByResourceGroupAsync(String resourceGroupName, String instanceName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, instanceName)
            .flatMap(
                (Response<DfpInstanceInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets details about the specified instances.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the instance. It must be a minimum of 3 characters, and a maximum of 63.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about the specified instances.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DfpInstanceInner getByResourceGroup(String resourceGroupName, String instanceName) {
        return getByResourceGroupAsync(resourceGroupName, instanceName).block();
    }

    /**
     * Gets details about the specified instances.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the instance. It must be a minimum of 3 characters, and a maximum of 63.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details about the specified instances.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DfpInstanceInner> getByResourceGroupWithResponse(
        String resourceGroupName, String instanceName, Context context) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, instanceName, context).block();
    }

    /**
     * Provisions the specified DFP instance based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instances. It must be a minimum of 3 characters, and a maximum of 63.
     * @param instanceParameters Contains the information used to provision the DFP instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an instance of a DFP instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName, String instanceName, DfpInstanceInner instanceParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (instanceParameters == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter instanceParameters is required and cannot be null."));
        } else {
            instanceParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            instanceName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            instanceParameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Provisions the specified DFP instance based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instances. It must be a minimum of 3 characters, and a maximum of 63.
     * @param instanceParameters Contains the information used to provision the DFP instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an instance of a DFP instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName, String instanceName, DfpInstanceInner instanceParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (instanceParameters == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter instanceParameters is required and cannot be null."));
        } else {
            instanceParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                resourceGroupName,
                instanceName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                instanceParameters,
                accept,
                context);
    }

    /**
     * Provisions the specified DFP instance based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instances. It must be a minimum of 3 characters, and a maximum of 63.
     * @param instanceParameters Contains the information used to provision the DFP instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an instance of a DFP instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<DfpInstanceInner>, DfpInstanceInner> beginCreateAsync(
        String resourceGroupName, String instanceName, DfpInstanceInner instanceParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceGroupName, instanceName, instanceParameters);
        return this
            .client
            .<DfpInstanceInner, DfpInstanceInner>getLroResult(
                mono, this.client.getHttpPipeline(), DfpInstanceInner.class, DfpInstanceInner.class, Context.NONE);
    }

    /**
     * Provisions the specified DFP instance based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instances. It must be a minimum of 3 characters, and a maximum of 63.
     * @param instanceParameters Contains the information used to provision the DFP instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an instance of a DFP instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<DfpInstanceInner>, DfpInstanceInner> beginCreateAsync(
        String resourceGroupName, String instanceName, DfpInstanceInner instanceParameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceGroupName, instanceName, instanceParameters, context);
        return this
            .client
            .<DfpInstanceInner, DfpInstanceInner>getLroResult(
                mono, this.client.getHttpPipeline(), DfpInstanceInner.class, DfpInstanceInner.class, context);
    }

    /**
     * Provisions the specified DFP instance based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instances. It must be a minimum of 3 characters, and a maximum of 63.
     * @param instanceParameters Contains the information used to provision the DFP instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an instance of a DFP instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<DfpInstanceInner>, DfpInstanceInner> beginCreate(
        String resourceGroupName, String instanceName, DfpInstanceInner instanceParameters) {
        return beginCreateAsync(resourceGroupName, instanceName, instanceParameters).getSyncPoller();
    }

    /**
     * Provisions the specified DFP instance based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instances. It must be a minimum of 3 characters, and a maximum of 63.
     * @param instanceParameters Contains the information used to provision the DFP instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an instance of a DFP instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<DfpInstanceInner>, DfpInstanceInner> beginCreate(
        String resourceGroupName, String instanceName, DfpInstanceInner instanceParameters, Context context) {
        return beginCreateAsync(resourceGroupName, instanceName, instanceParameters, context).getSyncPoller();
    }

    /**
     * Provisions the specified DFP instance based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instances. It must be a minimum of 3 characters, and a maximum of 63.
     * @param instanceParameters Contains the information used to provision the DFP instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an instance of a DFP instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DfpInstanceInner> createAsync(
        String resourceGroupName, String instanceName, DfpInstanceInner instanceParameters) {
        return beginCreateAsync(resourceGroupName, instanceName, instanceParameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Provisions the specified DFP instance based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instances. It must be a minimum of 3 characters, and a maximum of 63.
     * @param instanceParameters Contains the information used to provision the DFP instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an instance of a DFP instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DfpInstanceInner> createAsync(
        String resourceGroupName, String instanceName, DfpInstanceInner instanceParameters, Context context) {
        return beginCreateAsync(resourceGroupName, instanceName, instanceParameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Provisions the specified DFP instance based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instances. It must be a minimum of 3 characters, and a maximum of 63.
     * @param instanceParameters Contains the information used to provision the DFP instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an instance of a DFP instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DfpInstanceInner create(String resourceGroupName, String instanceName, DfpInstanceInner instanceParameters) {
        return createAsync(resourceGroupName, instanceName, instanceParameters).block();
    }

    /**
     * Provisions the specified DFP instance based on the configuration specified in the request.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instances. It must be a minimum of 3 characters, and a maximum of 63.
     * @param instanceParameters Contains the information used to provision the DFP instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an instance of a DFP instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DfpInstanceInner create(
        String resourceGroupName, String instanceName, DfpInstanceInner instanceParameters, Context context) {
        return createAsync(resourceGroupName, instanceName, instanceParameters, context).block();
    }

    /**
     * Deletes the specified DFP instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instance. It must be at least 3 characters in length, and no more than
     *     63.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String instanceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            instanceName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the specified DFP instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instance. It must be at least 3 characters in length, and no more than
     *     63.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String instanceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                resourceGroupName,
                instanceName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                accept,
                context);
    }

    /**
     * Deletes the specified DFP instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instance. It must be at least 3 characters in length, and no more than
     *     63.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String instanceName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, instanceName);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Deletes the specified DFP instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instance. It must be at least 3 characters in length, and no more than
     *     63.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String instanceName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, instanceName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Deletes the specified DFP instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instance. It must be at least 3 characters in length, and no more than
     *     63.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String instanceName) {
        return beginDeleteAsync(resourceGroupName, instanceName).getSyncPoller();
    }

    /**
     * Deletes the specified DFP instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instance. It must be at least 3 characters in length, and no more than
     *     63.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String instanceName, Context context) {
        return beginDeleteAsync(resourceGroupName, instanceName, context).getSyncPoller();
    }

    /**
     * Deletes the specified DFP instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instance. It must be at least 3 characters in length, and no more than
     *     63.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String instanceName) {
        return beginDeleteAsync(resourceGroupName, instanceName).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified DFP instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instance. It must be at least 3 characters in length, and no more than
     *     63.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String instanceName, Context context) {
        return beginDeleteAsync(resourceGroupName, instanceName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the specified DFP instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instance. It must be at least 3 characters in length, and no more than
     *     63.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String instanceName) {
        deleteAsync(resourceGroupName, instanceName).block();
    }

    /**
     * Deletes the specified DFP instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instance. It must be at least 3 characters in length, and no more than
     *     63.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String instanceName, Context context) {
        deleteAsync(resourceGroupName, instanceName, context).block();
    }

    /**
     * Updates the current state of the specified DFP instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instance. It must be at least 3 characters in length, and no more than
     *     63.
     * @param instanceUpdateParameters Request object that contains the updated information for the instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an instance of a DFP instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName, String instanceName, DfpInstanceUpdateParameters instanceUpdateParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (instanceUpdateParameters == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter instanceUpdateParameters is required and cannot be null."));
        } else {
            instanceUpdateParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            instanceName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            instanceUpdateParameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the current state of the specified DFP instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instance. It must be at least 3 characters in length, and no more than
     *     63.
     * @param instanceUpdateParameters Request object that contains the updated information for the instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an instance of a DFP instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName,
        String instanceName,
        DfpInstanceUpdateParameters instanceUpdateParameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (instanceUpdateParameters == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter instanceUpdateParameters is required and cannot be null."));
        } else {
            instanceUpdateParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                resourceGroupName,
                instanceName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                instanceUpdateParameters,
                accept,
                context);
    }

    /**
     * Updates the current state of the specified DFP instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instance. It must be at least 3 characters in length, and no more than
     *     63.
     * @param instanceUpdateParameters Request object that contains the updated information for the instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an instance of a DFP instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<DfpInstanceInner>, DfpInstanceInner> beginUpdateAsync(
        String resourceGroupName, String instanceName, DfpInstanceUpdateParameters instanceUpdateParameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, instanceName, instanceUpdateParameters);
        return this
            .client
            .<DfpInstanceInner, DfpInstanceInner>getLroResult(
                mono, this.client.getHttpPipeline(), DfpInstanceInner.class, DfpInstanceInner.class, Context.NONE);
    }

    /**
     * Updates the current state of the specified DFP instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instance. It must be at least 3 characters in length, and no more than
     *     63.
     * @param instanceUpdateParameters Request object that contains the updated information for the instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an instance of a DFP instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<DfpInstanceInner>, DfpInstanceInner> beginUpdateAsync(
        String resourceGroupName,
        String instanceName,
        DfpInstanceUpdateParameters instanceUpdateParameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, instanceName, instanceUpdateParameters, context);
        return this
            .client
            .<DfpInstanceInner, DfpInstanceInner>getLroResult(
                mono, this.client.getHttpPipeline(), DfpInstanceInner.class, DfpInstanceInner.class, context);
    }

    /**
     * Updates the current state of the specified DFP instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instance. It must be at least 3 characters in length, and no more than
     *     63.
     * @param instanceUpdateParameters Request object that contains the updated information for the instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an instance of a DFP instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<DfpInstanceInner>, DfpInstanceInner> beginUpdate(
        String resourceGroupName, String instanceName, DfpInstanceUpdateParameters instanceUpdateParameters) {
        return beginUpdateAsync(resourceGroupName, instanceName, instanceUpdateParameters).getSyncPoller();
    }

    /**
     * Updates the current state of the specified DFP instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instance. It must be at least 3 characters in length, and no more than
     *     63.
     * @param instanceUpdateParameters Request object that contains the updated information for the instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an instance of a DFP instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<DfpInstanceInner>, DfpInstanceInner> beginUpdate(
        String resourceGroupName,
        String instanceName,
        DfpInstanceUpdateParameters instanceUpdateParameters,
        Context context) {
        return beginUpdateAsync(resourceGroupName, instanceName, instanceUpdateParameters, context).getSyncPoller();
    }

    /**
     * Updates the current state of the specified DFP instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instance. It must be at least 3 characters in length, and no more than
     *     63.
     * @param instanceUpdateParameters Request object that contains the updated information for the instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an instance of a DFP instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DfpInstanceInner> updateAsync(
        String resourceGroupName, String instanceName, DfpInstanceUpdateParameters instanceUpdateParameters) {
        return beginUpdateAsync(resourceGroupName, instanceName, instanceUpdateParameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the current state of the specified DFP instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instance. It must be at least 3 characters in length, and no more than
     *     63.
     * @param instanceUpdateParameters Request object that contains the updated information for the instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an instance of a DFP instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DfpInstanceInner> updateAsync(
        String resourceGroupName,
        String instanceName,
        DfpInstanceUpdateParameters instanceUpdateParameters,
        Context context) {
        return beginUpdateAsync(resourceGroupName, instanceName, instanceUpdateParameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the current state of the specified DFP instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instance. It must be at least 3 characters in length, and no more than
     *     63.
     * @param instanceUpdateParameters Request object that contains the updated information for the instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an instance of a DFP instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DfpInstanceInner update(
        String resourceGroupName, String instanceName, DfpInstanceUpdateParameters instanceUpdateParameters) {
        return updateAsync(resourceGroupName, instanceName, instanceUpdateParameters).block();
    }

    /**
     * Updates the current state of the specified DFP instance.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param instanceName The name of the DFP instance. It must be at least 3 characters in length, and no more than
     *     63.
     * @param instanceUpdateParameters Request object that contains the updated information for the instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an instance of a DFP instance resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DfpInstanceInner update(
        String resourceGroupName,
        String instanceName,
        DfpInstanceUpdateParameters instanceUpdateParameters,
        Context context) {
        return updateAsync(resourceGroupName, instanceName, instanceUpdateParameters, context).block();
    }

    /**
     * Gets all the Dedicated instance for the given resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Dedicated instance for the given resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DfpInstanceInner>> listByResourceGroupSinglePageAsync(String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByResourceGroup(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            accept,
                            context))
            .<PagedResponse<DfpInstanceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets all the Dedicated instance for the given resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Dedicated instance for the given resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DfpInstanceInner>> listByResourceGroupSinglePageAsync(
        String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(
                this.client.getEndpoint(),
                resourceGroupName,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets all the Dedicated instance for the given resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Dedicated instance for the given resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DfpInstanceInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all the Dedicated instance for the given resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Dedicated instance for the given resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DfpInstanceInner> listByResourceGroupAsync(String resourceGroupName, Context context) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets all the Dedicated instance for the given resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Dedicated instance for the given resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DfpInstanceInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName));
    }

    /**
     * Gets all the Dedicated instance for the given resource group.
     *
     * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This name
     *     must be at least 1 character in length, and no more than 90.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the Dedicated instance for the given resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DfpInstanceInner> listByResourceGroup(String resourceGroupName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, context));
    }

    /**
     * Lists all the Dedicated instances for the given subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of DFP instance resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DfpInstanceInner>> listSinglePageAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            accept,
                            context))
            .<PagedResponse<DfpInstanceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists all the Dedicated instances for the given subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of DFP instance resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DfpInstanceInner>> listSinglePageAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists all the Dedicated instances for the given subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of DFP instance resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DfpInstanceInner> listAsync() {
        return new PagedFlux<>(() -> listSinglePageAsync(), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all the Dedicated instances for the given subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of DFP instance resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DfpInstanceInner> listAsync(Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(context), nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all the Dedicated instances for the given subscription.
     *
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of DFP instance resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DfpInstanceInner> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * Lists all the Dedicated instances for the given subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of DFP instance resources.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DfpInstanceInner> list(Context context) {
        return new PagedIterable<>(listAsync(context));
    }

    /**
     * Check the name availability in the target location.
     *
     * @param location The region name which the operation will lookup into.
     * @param instanceParameters The name of the instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the checking result of DFP instance name availability.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CheckInstanceNameAvailabilityResultInner>> checkNameAvailabilityWithResponseAsync(
        String location, CheckInstanceNameAvailabilityParameters instanceParameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (instanceParameters == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter instanceParameters is required and cannot be null."));
        } else {
            instanceParameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .checkNameAvailability(
                            this.client.getEndpoint(),
                            location,
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            instanceParameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Check the name availability in the target location.
     *
     * @param location The region name which the operation will lookup into.
     * @param instanceParameters The name of the instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the checking result of DFP instance name availability.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CheckInstanceNameAvailabilityResultInner>> checkNameAvailabilityWithResponseAsync(
        String location, CheckInstanceNameAvailabilityParameters instanceParameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (instanceParameters == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter instanceParameters is required and cannot be null."));
        } else {
            instanceParameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .checkNameAvailability(
                this.client.getEndpoint(),
                location,
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                instanceParameters,
                accept,
                context);
    }

    /**
     * Check the name availability in the target location.
     *
     * @param location The region name which the operation will lookup into.
     * @param instanceParameters The name of the instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the checking result of DFP instance name availability.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CheckInstanceNameAvailabilityResultInner> checkNameAvailabilityAsync(
        String location, CheckInstanceNameAvailabilityParameters instanceParameters) {
        return checkNameAvailabilityWithResponseAsync(location, instanceParameters)
            .flatMap(
                (Response<CheckInstanceNameAvailabilityResultInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Check the name availability in the target location.
     *
     * @param location The region name which the operation will lookup into.
     * @param instanceParameters The name of the instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the checking result of DFP instance name availability.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CheckInstanceNameAvailabilityResultInner checkNameAvailability(
        String location, CheckInstanceNameAvailabilityParameters instanceParameters) {
        return checkNameAvailabilityAsync(location, instanceParameters).block();
    }

    /**
     * Check the name availability in the target location.
     *
     * @param location The region name which the operation will lookup into.
     * @param instanceParameters The name of the instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the checking result of DFP instance name availability.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CheckInstanceNameAvailabilityResultInner> checkNameAvailabilityWithResponse(
        String location, CheckInstanceNameAvailabilityParameters instanceParameters, Context context) {
        return checkNameAvailabilityWithResponseAsync(location, instanceParameters, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of DFP instance resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DfpInstanceInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DfpInstanceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of DFP instance resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DfpInstanceInner>> listByResourceGroupNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of DFP instance resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DfpInstanceInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DfpInstanceInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an array of DFP instance resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DfpInstanceInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
