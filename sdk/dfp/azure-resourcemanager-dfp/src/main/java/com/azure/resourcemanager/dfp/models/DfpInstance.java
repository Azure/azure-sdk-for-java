// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dfp.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.dfp.fluent.models.DfpInstanceInner;
import java.util.Map;

/** An immutable client-side representation of DfpInstance. */
public interface DfpInstance {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: Location of the DFP resource.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Key-value pairs of additional resource provisioning properties.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: Metadata pertaining to creation and last modification of the resource.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the administration property: A collection of DFP instance administrators.
     *
     * @return the administration value.
     */
    DfpInstanceAdministrators administration();

    /**
     * Gets the provisioningState property: The current deployment state of DFP resource. The provisioningState is to
     * indicate states for resource provisioning.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.dfp.fluent.models.DfpInstanceInner object.
     *
     * @return the inner object.
     */
    DfpInstanceInner innerModel();

    /** The entirety of the DfpInstance definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The DfpInstance definition stages. */
    interface DefinitionStages {
        /** The first stage of the DfpInstance definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the DfpInstance definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location Location of the DFP resource.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location Location of the DFP resource.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the DfpInstance definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the Azure Resource group of which a given DFP instance is part. This
             *     name must be at least 1 character in length, and no more than 90.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the DfpInstance definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithAdministration {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            DfpInstance create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            DfpInstance create(Context context);
        }
        /** The stage of the DfpInstance definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Key-value pairs of additional resource provisioning properties..
             *
             * @param tags Key-value pairs of additional resource provisioning properties.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the DfpInstance definition allowing to specify administration. */
        interface WithAdministration {
            /**
             * Specifies the administration property: A collection of DFP instance administrators.
             *
             * @param administration A collection of DFP instance administrators.
             * @return the next definition stage.
             */
            WithCreate withAdministration(DfpInstanceAdministrators administration);
        }
    }
    /**
     * Begins update for the DfpInstance resource.
     *
     * @return the stage of resource update.
     */
    DfpInstance.Update update();

    /** The template for DfpInstance update. */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithAdministration {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        DfpInstance apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        DfpInstance apply(Context context);
    }
    /** The DfpInstance update stages. */
    interface UpdateStages {
        /** The stage of the DfpInstance update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Key-value pairs of additional provisioning properties..
             *
             * @param tags Key-value pairs of additional provisioning properties.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the DfpInstance update allowing to specify administration. */
        interface WithAdministration {
            /**
             * Specifies the administration property: A collection of DFP instance administrators.
             *
             * @param administration A collection of DFP instance administrators.
             * @return the next definition stage.
             */
            Update withAdministration(DfpInstanceAdministrators administration);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    DfpInstance refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    DfpInstance refresh(Context context);
}
