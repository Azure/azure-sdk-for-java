// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dfp.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.dfp.fluent.InstancesClient;
import com.azure.resourcemanager.dfp.fluent.models.CheckInstanceNameAvailabilityResultInner;
import com.azure.resourcemanager.dfp.fluent.models.DfpInstanceInner;
import com.azure.resourcemanager.dfp.models.CheckInstanceNameAvailabilityParameters;
import com.azure.resourcemanager.dfp.models.CheckInstanceNameAvailabilityResult;
import com.azure.resourcemanager.dfp.models.DfpInstance;
import com.azure.resourcemanager.dfp.models.Instances;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class InstancesImpl implements Instances {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(InstancesImpl.class);

    private final InstancesClient innerClient;

    private final com.azure.resourcemanager.dfp.DfpManager serviceManager;

    public InstancesImpl(InstancesClient innerClient, com.azure.resourcemanager.dfp.DfpManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public DfpInstance getByResourceGroup(String resourceGroupName, String instanceName) {
        DfpInstanceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, instanceName);
        if (inner != null) {
            return new DfpInstanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DfpInstance> getByResourceGroupWithResponse(
        String resourceGroupName, String instanceName, Context context) {
        Response<DfpInstanceInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, instanceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DfpInstanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String instanceName) {
        this.serviceClient().delete(resourceGroupName, instanceName);
    }

    public void delete(String resourceGroupName, String instanceName, Context context) {
        this.serviceClient().delete(resourceGroupName, instanceName, context);
    }

    public PagedIterable<DfpInstance> listByResourceGroup(String resourceGroupName) {
        PagedIterable<DfpInstanceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new DfpInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<DfpInstance> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<DfpInstanceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new DfpInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<DfpInstance> list() {
        PagedIterable<DfpInstanceInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new DfpInstanceImpl(inner1, this.manager()));
    }

    public PagedIterable<DfpInstance> list(Context context) {
        PagedIterable<DfpInstanceInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new DfpInstanceImpl(inner1, this.manager()));
    }

    public CheckInstanceNameAvailabilityResult checkNameAvailability(
        String location, CheckInstanceNameAvailabilityParameters instanceParameters) {
        CheckInstanceNameAvailabilityResultInner inner =
            this.serviceClient().checkNameAvailability(location, instanceParameters);
        if (inner != null) {
            return new CheckInstanceNameAvailabilityResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CheckInstanceNameAvailabilityResult> checkNameAvailabilityWithResponse(
        String location, CheckInstanceNameAvailabilityParameters instanceParameters, Context context) {
        Response<CheckInstanceNameAvailabilityResultInner> inner =
            this.serviceClient().checkNameAvailabilityWithResponse(location, instanceParameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CheckInstanceNameAvailabilityResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DfpInstance getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = Utils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, instanceName, Context.NONE).getValue();
    }

    public Response<DfpInstance> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = Utils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, instanceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = Utils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        this.delete(resourceGroupName, instanceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = Utils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        this.delete(resourceGroupName, instanceName, context);
    }

    private InstancesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.dfp.DfpManager manager() {
        return this.serviceManager;
    }

    public DfpInstanceImpl define(String name) {
        return new DfpInstanceImpl(name, this.manager());
    }
}
