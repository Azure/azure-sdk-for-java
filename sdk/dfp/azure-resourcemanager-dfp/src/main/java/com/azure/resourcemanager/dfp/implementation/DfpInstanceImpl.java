// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dfp.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.dfp.fluent.models.DfpInstanceInner;
import com.azure.resourcemanager.dfp.models.DfpInstance;
import com.azure.resourcemanager.dfp.models.DfpInstanceAdministrators;
import com.azure.resourcemanager.dfp.models.DfpInstanceUpdateParameters;
import com.azure.resourcemanager.dfp.models.ProvisioningState;
import java.util.Collections;
import java.util.Map;

public final class DfpInstanceImpl implements DfpInstance, DfpInstance.Definition, DfpInstance.Update {
    private DfpInstanceInner innerObject;

    private final com.azure.resourcemanager.dfp.DfpManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public DfpInstanceAdministrators administration() {
        return this.innerModel().administration();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public DfpInstanceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.dfp.DfpManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String instanceName;

    private DfpInstanceUpdateParameters updateInstanceUpdateParameters;

    public DfpInstanceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public DfpInstance create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInstances()
                .create(resourceGroupName, instanceName, this.innerModel(), Context.NONE);
        return this;
    }

    public DfpInstance create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInstances()
                .create(resourceGroupName, instanceName, this.innerModel(), context);
        return this;
    }

    DfpInstanceImpl(String name, com.azure.resourcemanager.dfp.DfpManager serviceManager) {
        this.innerObject = new DfpInstanceInner();
        this.serviceManager = serviceManager;
        this.instanceName = name;
    }

    public DfpInstanceImpl update() {
        this.updateInstanceUpdateParameters = new DfpInstanceUpdateParameters();
        return this;
    }

    public DfpInstance apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInstances()
                .update(resourceGroupName, instanceName, updateInstanceUpdateParameters, Context.NONE);
        return this;
    }

    public DfpInstance apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInstances()
                .update(resourceGroupName, instanceName, updateInstanceUpdateParameters, context);
        return this;
    }

    DfpInstanceImpl(DfpInstanceInner innerObject, com.azure.resourcemanager.dfp.DfpManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.instanceName = Utils.getValueFromIdByName(innerObject.id(), "instances");
    }

    public DfpInstance refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInstances()
                .getByResourceGroupWithResponse(resourceGroupName, instanceName, Context.NONE)
                .getValue();
        return this;
    }

    public DfpInstance refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getInstances()
                .getByResourceGroupWithResponse(resourceGroupName, instanceName, context)
                .getValue();
        return this;
    }

    public DfpInstanceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public DfpInstanceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public DfpInstanceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateInstanceUpdateParameters.withTags(tags);
            return this;
        }
    }

    public DfpInstanceImpl withAdministration(DfpInstanceAdministrators administration) {
        if (isInCreateMode()) {
            this.innerModel().withAdministration(administration);
            return this;
        } else {
            this.updateInstanceUpdateParameters.withAdministration(administration);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
