// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.generated;

import com.azure.core.management.serializer.SerializerFactory;
import com.azure.core.util.Context;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.chaos.fluent.models.TargetInner;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/** Samples for Targets CreateOrUpdate. */
public final class TargetsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/chaos/resource-manager/Microsoft.Chaos/preview/2021-09-15-preview/examples/CreateOrUpdateATarget.json
     */
    /**
     * Sample code: Create/update a Target that extends a virtual machine resource.
     *
     * @param manager Entry point to ChaosManager.
     */
    public static void createUpdateATargetThatExtendsAVirtualMachineResource(
        com.azure.resourcemanager.chaos.ChaosManager manager) throws IOException {
        manager
            .targets()
            .createOrUpdateWithResponse(
                "exampleRG",
                "Microsoft.Compute",
                "virtualMachines",
                "exampleVM",
                "Microsoft-Agent",
                new TargetInner()
                    .withProperties(
                        mapOf(
                            "identities",
                            SerializerFactory
                                .createDefaultManagementSerializerAdapter()
                                .deserialize(
                                    "[{\"type\":\"CertificateSubjectIssuer\",\"subject\":\"CN=example.subject\"}]",
                                    Object.class,
                                    SerializerEncoding.JSON))),
                Context.NONE);
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
