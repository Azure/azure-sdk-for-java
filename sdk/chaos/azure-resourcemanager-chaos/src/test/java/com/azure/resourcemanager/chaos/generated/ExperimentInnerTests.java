// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.chaos.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.chaos.fluent.models.ExperimentInner;
import com.azure.resourcemanager.chaos.models.ChaosExperimentAction;
import com.azure.resourcemanager.chaos.models.ChaosExperimentBranch;
import com.azure.resourcemanager.chaos.models.ChaosExperimentStep;
import com.azure.resourcemanager.chaos.models.ChaosTargetFilter;
import com.azure.resourcemanager.chaos.models.ChaosTargetSelector;
import com.azure.resourcemanager.chaos.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.chaos.models.ResourceIdentity;
import com.azure.resourcemanager.chaos.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExperimentInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExperimentInner model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"hq\",\"tenantId\":\"gjxpybczmehmt\",\"type\":\"None\",\"userAssignedIdentities\":{\"xaobhdxbmtqioqjz\":{\"principalId\":\"phrupidgsybbejhp\",\"clientId\":\"ycm\"},\"lrxybqsoq\":{\"principalId\":\"tbmufpo\",\"clientId\":\"oizh\"},\"nrbtcqqjnq\":{\"principalId\":\"gkdmb\",\"clientId\":\"zlobcufpd\"},\"lzl\":{\"principalId\":\"hqgnufooojywif\",\"clientId\":\"esaagdfm\"}}},\"properties\":{\"provisioningState\":\"Failed\",\"steps\":[{\"name\":\"ifkwmrvktsizntoc\",\"branches\":[{\"name\":\"a\",\"actions\":[{\"type\":\"ChaosExperimentAction\",\"name\":\"ajpsquc\"},{\"type\":\"ChaosExperimentAction\",\"name\":\"poyfdkfogkn\"}]}]},{\"name\":\"gjofjd\",\"branches\":[{\"name\":\"qs\",\"actions\":[{\"type\":\"ChaosExperimentAction\",\"name\":\"eupewnwreitjz\"},{\"type\":\"ChaosExperimentAction\",\"name\":\"flusarhmof\"},{\"type\":\"ChaosExperimentAction\",\"name\":\"qhsmyurkdtml\"}]},{\"name\":\"he\",\"actions\":[{\"type\":\"ChaosExperimentAction\",\"name\":\"k\"},{\"type\":\"ChaosExperimentAction\",\"name\":\"jtxukcdm\"},{\"type\":\"ChaosExperimentAction\",\"name\":\"arcryuanzwuxzdxt\"}]},{\"name\":\"yrlhmwhfpmrqobm\",\"actions\":[{\"type\":\"ChaosExperimentAction\",\"name\":\"kknryrtihf\"}]},{\"name\":\"tijbpzvgnwzsymgl\",\"actions\":[{\"type\":\"ChaosExperimentAction\",\"name\":\"fcyzkohdbihanufh\"}]}]}],\"selectors\":[{\"type\":\"ChaosTargetSelector\",\"id\":\"bj\",\"filter\":{\"type\":\"ChaosTargetFilter\"}}]},\"location\":\"git\",\"tags\":{\"fpikxwczb\":\"hab\",\"n\":\"scnpqxuhivy\",\"rkxvdum\":\"wby\",\"xgaudccs\":\"grtfwvu\"},\"id\":\"h\",\"name\":\"jcny\",\"type\":\"j\"}")
            .toObject(ExperimentInner.class);
        Assertions.assertEquals("git", model.location());
        Assertions.assertEquals("hab", model.tags().get("fpikxwczb"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("ifkwmrvktsizntoc", model.steps().get(0).name());
        Assertions.assertEquals("a", model.steps().get(0).branches().get(0).name());
        Assertions.assertEquals("ajpsquc", model.steps().get(0).branches().get(0).actions().get(0).name());
        Assertions.assertEquals("bj", model.selectors().get(0).id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExperimentInner model
            = new ExperimentInner().withLocation("git")
                .withTags(mapOf("fpikxwczb", "hab", "n", "scnpqxuhivy", "rkxvdum", "wby", "xgaudccs", "grtfwvu"))
                .withIdentity(
                    new ResourceIdentity().withType(ManagedServiceIdentityType.NONE)
                        .withUserAssignedIdentities(mapOf("xaobhdxbmtqioqjz", new UserAssignedIdentity(), "lrxybqsoq",
                            new UserAssignedIdentity(), "nrbtcqqjnq", new UserAssignedIdentity(), "lzl",
                            new UserAssignedIdentity())))
                .withSteps(Arrays.asList(
                    new ChaosExperimentStep().withName("ifkwmrvktsizntoc")
                        .withBranches(Arrays.asList(new ChaosExperimentBranch().withName("a")
                            .withActions(Arrays.asList(new ChaosExperimentAction().withName("ajpsquc"),
                                new ChaosExperimentAction().withName("poyfdkfogkn"))))),
                    new ChaosExperimentStep().withName("gjofjd")
                        .withBranches(Arrays.asList(
                            new ChaosExperimentBranch().withName("qs")
                                .withActions(Arrays.asList(new ChaosExperimentAction().withName("eupewnwreitjz"),
                                    new ChaosExperimentAction().withName("flusarhmof"),
                                    new ChaosExperimentAction().withName("qhsmyurkdtml"))),
                            new ChaosExperimentBranch()
                                .withName("he")
                                .withActions(Arrays.asList(new ChaosExperimentAction().withName("k"),
                                    new ChaosExperimentAction().withName("jtxukcdm"),
                                    new ChaosExperimentAction().withName("arcryuanzwuxzdxt"))),
                            new ChaosExperimentBranch().withName("yrlhmwhfpmrqobm")
                                .withActions(Arrays.asList(new ChaosExperimentAction().withName("kknryrtihf"))),
                            new ChaosExperimentBranch().withName("tijbpzvgnwzsymgl")
                                .withActions(
                                    Arrays.asList(new ChaosExperimentAction().withName("fcyzkohdbihanufh")))))))
                .withSelectors(
                    Arrays.asList(new ChaosTargetSelector().withId("bj").withFilter(new ChaosTargetFilter())));
        model = BinaryData.fromObject(model).toObject(ExperimentInner.class);
        Assertions.assertEquals("git", model.location());
        Assertions.assertEquals("hab", model.tags().get("fpikxwczb"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("ifkwmrvktsizntoc", model.steps().get(0).name());
        Assertions.assertEquals("a", model.steps().get(0).branches().get(0).name());
        Assertions.assertEquals("ajpsquc", model.steps().get(0).branches().get(0).actions().get(0).name());
        Assertions.assertEquals("bj", model.selectors().get(0).id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
