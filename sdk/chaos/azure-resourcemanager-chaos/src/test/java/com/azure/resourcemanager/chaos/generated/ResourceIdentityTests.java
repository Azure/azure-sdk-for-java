// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.chaos.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.chaos.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.chaos.models.ResourceIdentity;
import com.azure.resourcemanager.chaos.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ResourceIdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ResourceIdentity model = BinaryData.fromString(
            "{\"principalId\":\"ocfs\",\"tenantId\":\"s\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"dvjsllrmvvdf\":{\"principalId\":\"stkiiuxhqyud\",\"clientId\":\"rrqnbpoczvyifqrv\"},\"ulexxbczwtr\":{\"principalId\":\"t\",\"clientId\":\"n\"},\"zdobpxjmflbvvnch\":{\"principalId\":\"iqzbq\",\"clientId\":\"sovmyokacspkwl\"},\"rsa\":{\"principalId\":\"cciw\",\"clientId\":\"juqk\"}}}")
            .toObject(ResourceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ResourceIdentity model = new ResourceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
            .withUserAssignedIdentities(
                mapOf("dvjsllrmvvdf", new UserAssignedIdentity(), "ulexxbczwtr", new UserAssignedIdentity(),
                    "zdobpxjmflbvvnch", new UserAssignedIdentity(), "rsa", new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(ResourceIdentity.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
