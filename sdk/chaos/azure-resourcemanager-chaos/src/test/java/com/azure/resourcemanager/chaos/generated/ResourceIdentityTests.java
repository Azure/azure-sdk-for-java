// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.chaos.models.ResourceIdentity;
import com.azure.resourcemanager.chaos.models.ResourceIdentityType;
import com.azure.resourcemanager.chaos.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ResourceIdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ResourceIdentity model = BinaryData.fromString(
            "{\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"zabglcuhxwt\":{\"principalId\":\"23b4e7ab-bed4-48d5-b835-33db915ab81c\",\"clientId\":\"93ab5b70-2990-4fdc-8f04-1ad6db474dea\"},\"qik\":{\"principalId\":\"a4be7bfb-e769-4665-9b64-2c3ffd045676\",\"clientId\":\"dce9e292-c0f6-46a8-b565-0da60edeeadd\"},\"ovplw\":{\"principalId\":\"c6576fa6-c26f-4f66-92a6-7fed8fc5128b\",\"clientId\":\"4f733958-d169-4fb6-8848-8cca54998b91\"}},\"principalId\":\"hvgyuguosvmk\",\"tenantId\":\"sxqu\"}")
            .toObject(ResourceIdentity.class);
        Assertions.assertEquals(ResourceIdentityType.USER_ASSIGNED, model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ResourceIdentity model = new ResourceIdentity().withType(ResourceIdentityType.USER_ASSIGNED)
            .withUserAssignedIdentities(mapOf("zabglcuhxwt", new UserAssignedIdentity(), "qik",
                new UserAssignedIdentity(), "ovplw", new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(ResourceIdentity.class);
        Assertions.assertEquals(ResourceIdentityType.USER_ASSIGNED, model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
