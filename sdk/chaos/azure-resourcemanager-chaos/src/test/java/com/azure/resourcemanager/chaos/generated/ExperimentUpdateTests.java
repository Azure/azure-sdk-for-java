// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.chaos.models.ExperimentUpdate;
import com.azure.resourcemanager.chaos.models.ResourceIdentity;
import com.azure.resourcemanager.chaos.models.ResourceIdentityType;
import com.azure.resourcemanager.chaos.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExperimentUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExperimentUpdate model = BinaryData.fromString(
            "{\"identity\":{\"type\":\"None\",\"userAssignedIdentities\":{\"veual\":{\"principalId\":\"117247fc-eaf3-474e-8848-1154b475989b\",\"clientId\":\"7d125f3b-6eaf-4db5-8b18-0d9528cb79d3\"},\"mkh\":{\"principalId\":\"d9cd11da-7cf8-4b79-a5dd-a55dd1b59aaa\",\"clientId\":\"4521f587-2320-497f-9696-3e8b9dd62318\"},\"bbcswsrtjri\":{\"principalId\":\"1326097e-0a1e-42ef-bee6-6e6eb3e533dc\",\"clientId\":\"5e5adf5f-53f4-47fb-af7f-312917eacb92\"},\"bpbewtghfgb\":{\"principalId\":\"194d2f05-0d3a-4288-9e57-34dfec4b18f1\",\"clientId\":\"5f7a5c17-8833-411f-8c88-dfe1b43a4ce3\"}},\"principalId\":\"gw\",\"tenantId\":\"vlvqhjkbegi\"},\"tags\":{\"aloayqcgwrtzju\":\"mxiebw\",\"txon\":\"gwyzm\",\"rknftguvriuhprwm\":\"mtsavjcbpwxqp\",\"bexrmcq\":\"yvxqtayriwwroy\"}}")
            .toObject(ExperimentUpdate.class);
        Assertions.assertEquals(ResourceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("mxiebw", model.tags().get("aloayqcgwrtzju"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExperimentUpdate model = new ExperimentUpdate().withIdentity(new ResourceIdentity()
            .withType(ResourceIdentityType.NONE)
            .withUserAssignedIdentities(mapOf("veual", new UserAssignedIdentity(), "mkh", new UserAssignedIdentity(),
                "bbcswsrtjri", new UserAssignedIdentity(), "bpbewtghfgb", new UserAssignedIdentity())))
            .withTags(mapOf("aloayqcgwrtzju", "mxiebw", "txon", "gwyzm", "rknftguvriuhprwm", "mtsavjcbpwxqp", "bexrmcq",
                "yvxqtayriwwroy"));
        model = BinaryData.fromObject(model).toObject(ExperimentUpdate.class);
        Assertions.assertEquals(ResourceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("mxiebw", model.tags().get("aloayqcgwrtzju"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
