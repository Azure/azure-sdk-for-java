// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.chaos.ChaosManager;
import com.azure.resourcemanager.chaos.models.ChaosExperimentBranch;
import com.azure.resourcemanager.chaos.models.ChaosExperimentStep;
import com.azure.resourcemanager.chaos.models.ChaosTargetFilter;
import com.azure.resourcemanager.chaos.models.ChaosTargetSelector;
import com.azure.resourcemanager.chaos.models.Experiment;
import com.azure.resourcemanager.chaos.models.ResourceIdentity;
import com.azure.resourcemanager.chaos.models.ResourceIdentityType;
import com.azure.resourcemanager.chaos.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ExperimentsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"ev\":{\"principalId\":\"196a22c5-3ca0-4d98-9a32-4f14564ee6c2\",\"clientId\":\"7268a1de-b3af-4a98-8e4e-fbc5b33a81be\"},\"b\":{\"principalId\":\"f5872c29-9455-487c-b047-3307bb4b4df6\",\"clientId\":\"7cb69611-9b91-41ea-aa48-d2bdcfd9d2a0\"}},\"principalId\":\"rilbywdx\",\"tenantId\":\"icc\"},\"properties\":{\"provisioningState\":\"Succeeded\",\"steps\":[{\"name\":\"scjfnyns\",\"branches\":[{\"name\":\"ujiz\",\"actions\":[]},{\"name\":\"voqyt\",\"actions\":[]}]},{\"name\":\"byowbblgyavutp\",\"branches\":[{\"name\":\"joxoism\",\"actions\":[]},{\"name\":\"ksbpimlqoljx\",\"actions\":[]}]},{\"name\":\"cgxxlxs\",\"branches\":[{\"name\":\"gcvizqzdwlvwlyou\",\"actions\":[]},{\"name\":\"fgfb\",\"actions\":[]}]},{\"name\":\"jub\",\"branches\":[{\"name\":\"hgkfmin\",\"actions\":[]}]}],\"selectors\":[{\"type\":\"ChaosTargetSelector\",\"id\":\"owzfttsttkt\",\"filter\":{\"type\":\"ChaosTargetFilter\"},\"\":{\"gqqqxh\":\"dataqactxtgzukxitmmq\",\"rxcpjuisavo\":\"datan\",\"ajlkatnw\":\"dataqdzfvazivjlfrqtt\"}}]},\"location\":\"yiopi\",\"tags\":{\"ovibrxkp\":\"qfkuvscxkdmli\",\"bteoybf\":\"loazuruocbgoo\"},\"id\":\"jxakv\",\"name\":\"jgslordilmyww\",\"type\":\"kgkxn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ChaosManager manager = ChaosManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Experiment response
            = manager.experiments()
                .define("yjkqabqgzslesjcb")
                .withRegion("axconfozauo")
                .withExistingResourceGroup("aryeu")
                .withSteps(Arrays.asList(new ChaosExperimentStep().withName("ebjvewzcjzn")
                    .withBranches(Arrays.asList(
                        new ChaosExperimentBranch().withName("cpmguaadraufact").withActions(Arrays.asList()),
                        new ChaosExperimentBranch().withName("ahzovajjziuxxp").withActions(Arrays.asList()),
                        new ChaosExperimentBranch().withName("hneekul").withActions(Arrays.asList()),
                        new ChaosExperimentBranch().withName("gs").withActions(Arrays.asList())))))
                .withSelectors(Arrays.asList(
                    new ChaosTargetSelector().withId("ubkwdle")
                        .withFilter(new ChaosTargetFilter())
                        .withAdditionalProperties(mapOf("type", "ChaosTargetSelector")),
                    new ChaosTargetSelector().withId("ygdxpgpqchis")
                        .withFilter(new ChaosTargetFilter())
                        .withAdditionalProperties(mapOf("type", "ChaosTargetSelector"))))
                .withTags(mapOf("epzl", "kokwbqplhlvnu", "vmnnrw", "phwzsoldweyuqdu", "wjhhgdnhxmsivf", "biorktal",
                    "zaofjchvcyy", "miloxggdufiqndie"))
                .withIdentity(new ResourceIdentity().withType(ResourceIdentityType.USER_ASSIGNED)
                    .withUserAssignedIdentities(
                        mapOf("w", new UserAssignedIdentity(), "vbquwr", new UserAssignedIdentity())))
                .create();

        Assertions.assertEquals("yiopi", response.location());
        Assertions.assertEquals("qfkuvscxkdmli", response.tags().get("ovibrxkp"));
        Assertions.assertEquals(ResourceIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("scjfnyns", response.steps().get(0).name());
        Assertions.assertEquals("ujiz", response.steps().get(0).branches().get(0).name());
        Assertions.assertEquals("owzfttsttkt", response.selectors().get(0).id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
