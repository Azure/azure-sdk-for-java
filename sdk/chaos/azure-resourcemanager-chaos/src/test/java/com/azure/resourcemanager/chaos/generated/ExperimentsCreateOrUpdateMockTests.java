// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.chaos.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.chaos.ChaosManager;
import com.azure.resourcemanager.chaos.models.ChaosExperimentBranch;
import com.azure.resourcemanager.chaos.models.ChaosExperimentStep;
import com.azure.resourcemanager.chaos.models.ChaosTargetFilter;
import com.azure.resourcemanager.chaos.models.ChaosTargetSelector;
import com.azure.resourcemanager.chaos.models.Experiment;
import com.azure.resourcemanager.chaos.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.chaos.models.ResourceIdentity;
import com.azure.resourcemanager.chaos.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ExperimentsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"identity\":{\"principalId\":\"rqufegxuvwz\",\"tenantId\":\"nhlmctlpdng\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"eaxhcexdrrvqahqk\":{\"principalId\":\"mhrixkwmyijejve\",\"clientId\":\"hbpnaixexccbd\"},\"owvrvmtgjqppyos\":{\"principalId\":\"tpwijnh\",\"clientId\":\"svfycxzbfv\"},\"mcwaekrrjr\":{\"principalId\":\"on\",\"clientId\":\"yhgfipnsx\"}}},\"properties\":{\"provisioningState\":\"Succeeded\",\"steps\":[{\"name\":\"tsgumhj\",\"branches\":[{\"name\":\"ikkx\",\"actions\":[]}]}],\"selectors\":[{\"type\":\"ChaosTargetSelector\",\"id\":\"lo\",\"filter\":{\"type\":\"ChaosTargetFilter\"}}]},\"location\":\"pvuzlmv\",\"tags\":{\"pwjxezn\":\"fktgplc\",\"wkpnbsaz\":\"igbrnjw\",\"sxtta\":\"jjoqkagf\",\"mkqjj\":\"gzxnfaazpxdtnk\"},\"id\":\"wuenvr\",\"name\":\"pyouaibrebqaays\",\"type\":\"kixqtnqtt\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ChaosManager manager = ChaosManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Experiment response
            = manager.experiments()
                .define("yqtfihwh")
                .withRegion("tdhtmdvyp")
                .withExistingResourceGroup("jguufzdm")
                .withSteps(
                    Arrays
                        .asList(
                            new ChaosExperimentStep().withName("qiatkzwpcnp")
                                .withBranches(Arrays.asList(
                                    new ChaosExperimentBranch().withName("cjaesgvvs").withActions(Arrays.asList()),
                                    new ChaosExperimentBranch().withName("cyajguqf").withActions(Arrays.asList()),
                                    new ChaosExperimentBranch().withName("wygzlvdnkfxusem")
                                        .withActions(Arrays.asList()),
                                    new ChaosExperimentBranch().withName("wzrmuh").withActions(Arrays.asList()))),
                            new ChaosExperimentStep().withName("pfcqdp")
                                .withBranches(Arrays.asList(
                                    new ChaosExperimentBranch().withName("xqv").withActions(Arrays.asList()),
                                    new ChaosExperimentBranch().withName("svuo").withActions(Arrays.asList()),
                                    new ChaosExperimentBranch().withName("mgccelvezrypq").withActions(Arrays.asList()),
                                    new ChaosExperimentBranch().withName("mfe").withActions(Arrays.asList()))),
                            new ChaosExperimentStep().withName("kerqwkyh")
                                .withBranches(Arrays.asList(new ChaosExperimentBranch().withName("bopgxedkowepbqp")
                                    .withActions(Arrays.asList())))))
                .withSelectors(
                    Arrays.asList(new ChaosTargetSelector().withId("fkbw").withFilter(new ChaosTargetFilter()),
                        new ChaosTargetSelector().withId("snjvcdwxlpqekftn").withFilter(new ChaosTargetFilter()),
                        new ChaosTargetSelector().withId("tjsyin").withFilter(new ChaosTargetFilter()),
                        new ChaosTargetSelector().withId("fq").withFilter(new ChaosTargetFilter())))
                .withTags(mapOf("hkjoqr", "dgszywkbirryuzh", "mfiibfggj", "qqaatjinrvgou", "rwxkvtkkgl", "ool"))
                .withIdentity(new ResourceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("wynwcvtbvkayhm", new UserAssignedIdentity())))
                .create();

        Assertions.assertEquals("pvuzlmv", response.location());
        Assertions.assertEquals("fktgplc", response.tags().get("pwjxezn"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("tsgumhj", response.steps().get(0).name());
        Assertions.assertEquals("ikkx", response.steps().get(0).branches().get(0).name());
        Assertions.assertEquals("lo", response.selectors().get(0).id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
