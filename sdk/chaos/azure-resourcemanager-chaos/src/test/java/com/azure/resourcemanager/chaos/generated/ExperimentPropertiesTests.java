// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.chaos.fluent.models.ExperimentProperties;
import com.azure.resourcemanager.chaos.models.Action;
import com.azure.resourcemanager.chaos.models.Branch;
import com.azure.resourcemanager.chaos.models.Filter;
import com.azure.resourcemanager.chaos.models.Selector;
import com.azure.resourcemanager.chaos.models.Step;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExperimentPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExperimentProperties model =
            BinaryData
                .fromString(
                    "{\"steps\":[{\"name\":\"bbaumnyquped\",\"branches\":[{\"name\":\"jn\",\"actions\":[{\"type\":\"Action\",\"name\":\"ckhsmtxpsieb\"},{\"type\":\"Action\",\"name\":\"fhvpesaps\"},{\"type\":\"Action\",\"name\":\"rdqmhjjdhtldwkyz\"}]},{\"name\":\"uutkncw\",\"actions\":[{\"type\":\"Action\",\"name\":\"wsvlxotogtwrupqs\"},{\"type\":\"Action\",\"name\":\"vnm\"},{\"type\":\"Action\",\"name\":\"cykvceo\"}]},{\"name\":\"eil\",\"actions\":[{\"type\":\"Action\",\"name\":\"notyfjfcnjbkcn\"},{\"type\":\"Action\",\"name\":\"dhbt\"},{\"type\":\"Action\",\"name\":\"kphywpnvjto\"}]},{\"name\":\"nermcl\",\"actions\":[{\"type\":\"Action\",\"name\":\"lphox\"},{\"type\":\"Action\",\"name\":\"scrpabgyepsbjt\"}]}]}],\"selectors\":[{\"type\":\"Selector\",\"id\":\"qugxywpmueefjzwf\",\"filter\":{\"type\":\"Filter\"},\"\":{\"xtccmg\":\"datajidsuyonobglaoc\",\"wfudwpzntxhdzhl\":\"dataudxytlmoyrx\",\"hckfrlhrx\":\"dataqj\"}}],\"startOnCreation\":false}")
                .toObject(ExperimentProperties.class);
        Assertions.assertEquals("bbaumnyquped", model.steps().get(0).name());
        Assertions.assertEquals("jn", model.steps().get(0).branches().get(0).name());
        Assertions.assertEquals("ckhsmtxpsieb", model.steps().get(0).branches().get(0).actions().get(0).name());
        Assertions.assertEquals("qugxywpmueefjzwf", model.selectors().get(0).id());
        Assertions.assertEquals(false, model.startOnCreation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExperimentProperties model =
            new ExperimentProperties()
                .withSteps(
                    Arrays
                        .asList(
                            new Step()
                                .withName("bbaumnyquped")
                                .withBranches(
                                    Arrays
                                        .asList(
                                            new Branch()
                                                .withName("jn")
                                                .withActions(
                                                    Arrays
                                                        .asList(
                                                            new Action().withName("ckhsmtxpsieb"),
                                                            new Action().withName("fhvpesaps"),
                                                            new Action().withName("rdqmhjjdhtldwkyz"))),
                                            new Branch()
                                                .withName("uutkncw")
                                                .withActions(
                                                    Arrays
                                                        .asList(
                                                            new Action().withName("wsvlxotogtwrupqs"),
                                                            new Action().withName("vnm"),
                                                            new Action().withName("cykvceo"))),
                                            new Branch()
                                                .withName("eil")
                                                .withActions(
                                                    Arrays
                                                        .asList(
                                                            new Action().withName("notyfjfcnjbkcn"),
                                                            new Action().withName("dhbt"),
                                                            new Action().withName("kphywpnvjto"))),
                                            new Branch()
                                                .withName("nermcl")
                                                .withActions(
                                                    Arrays
                                                        .asList(
                                                            new Action().withName("lphox"),
                                                            new Action().withName("scrpabgyepsbjt")))))))
                .withSelectors(
                    Arrays
                        .asList(
                            new Selector()
                                .withId("qugxywpmueefjzwf")
                                .withFilter(new Filter())
                                .withAdditionalProperties(mapOf("type", "Selector"))))
                .withStartOnCreation(false);
        model = BinaryData.fromObject(model).toObject(ExperimentProperties.class);
        Assertions.assertEquals("bbaumnyquped", model.steps().get(0).name());
        Assertions.assertEquals("jn", model.steps().get(0).branches().get(0).name());
        Assertions.assertEquals("ckhsmtxpsieb", model.steps().get(0).branches().get(0).actions().get(0).name());
        Assertions.assertEquals("qugxywpmueefjzwf", model.selectors().get(0).id());
        Assertions.assertEquals(false, model.startOnCreation());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
