// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;

/**
 * Model that represents a delay action.
 */
@Fluent
public final class DelayAction extends ChaosExperimentAction {
    /*
     * Enum that discriminates between action models.
     */
    private String type = "delay";

    /*
     * ISO8601 formatted string that represents a duration.
     */
    private Duration duration;

    /**
     * Creates an instance of DelayAction class.
     */
    public DelayAction() {
    }

    /**
     * Get the type property: Enum that discriminates between action models.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the duration property: ISO8601 formatted string that represents a duration.
     * 
     * @return the duration value.
     */
    public Duration duration() {
        return this.duration;
    }

    /**
     * Set the duration property: ISO8601 formatted string that represents a duration.
     * 
     * @param duration the duration value to set.
     * @return the DelayAction object itself.
     */
    public DelayAction withDuration(Duration duration) {
        this.duration = duration;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DelayAction withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (duration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property duration in model DelayAction"));
        }
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model DelayAction"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DelayAction.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeStringField("duration", CoreUtils.durationToStringWithDays(this.duration));
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DelayAction from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DelayAction if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DelayAction.
     */
    public static DelayAction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DelayAction deserializedDelayAction = new DelayAction();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedDelayAction.withName(reader.getString());
                } else if ("duration".equals(fieldName)) {
                    deserializedDelayAction.duration
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("type".equals(fieldName)) {
                    deserializedDelayAction.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDelayAction;
        });
    }
}
