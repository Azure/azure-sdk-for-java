// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.chaos.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Model that represents a query selector.
 */
@Fluent
public final class ChaosTargetQuerySelector extends ChaosTargetSelector {
    /*
     * Chaos target selector discriminator type
     */
    private SelectorType type = SelectorType.QUERY;

    /*
     * Azure Resource Graph (ARG) Query Language query for target resources.
     */
    private String queryString;

    /*
     * Subscription id list to scope resource query.
     */
    private List<String> subscriptionIds;

    /**
     * Creates an instance of ChaosTargetQuerySelector class.
     */
    public ChaosTargetQuerySelector() {
    }

    /**
     * Get the type property: Chaos target selector discriminator type.
     * 
     * @return the type value.
     */
    @Override
    public SelectorType type() {
        return this.type;
    }

    /**
     * Get the queryString property: Azure Resource Graph (ARG) Query Language query for target resources.
     * 
     * @return the queryString value.
     */
    public String queryString() {
        return this.queryString;
    }

    /**
     * Set the queryString property: Azure Resource Graph (ARG) Query Language query for target resources.
     * 
     * @param queryString the queryString value to set.
     * @return the ChaosTargetQuerySelector object itself.
     */
    public ChaosTargetQuerySelector withQueryString(String queryString) {
        this.queryString = queryString;
        return this;
    }

    /**
     * Get the subscriptionIds property: Subscription id list to scope resource query.
     * 
     * @return the subscriptionIds value.
     */
    public List<String> subscriptionIds() {
        return this.subscriptionIds;
    }

    /**
     * Set the subscriptionIds property: Subscription id list to scope resource query.
     * 
     * @param subscriptionIds the subscriptionIds value to set.
     * @return the ChaosTargetQuerySelector object itself.
     */
    public ChaosTargetQuerySelector withSubscriptionIds(List<String> subscriptionIds) {
        this.subscriptionIds = subscriptionIds;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChaosTargetQuerySelector withId(String id) {
        super.withId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChaosTargetQuerySelector withFilter(ChaosTargetFilter filter) {
        super.withFilter(filter);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", id());
        jsonWriter.writeJsonField("filter", filter());
        jsonWriter.writeStringField("queryString", this.queryString);
        jsonWriter.writeArrayField("subscriptionIds", this.subscriptionIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChaosTargetQuerySelector from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChaosTargetQuerySelector if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChaosTargetQuerySelector.
     */
    public static ChaosTargetQuerySelector fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChaosTargetQuerySelector deserializedChaosTargetQuerySelector = new ChaosTargetQuerySelector();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedChaosTargetQuerySelector.withId(reader.getString());
                } else if ("filter".equals(fieldName)) {
                    deserializedChaosTargetQuerySelector.withFilter(ChaosTargetFilter.fromJson(reader));
                } else if ("queryString".equals(fieldName)) {
                    deserializedChaosTargetQuerySelector.queryString = reader.getString();
                } else if ("subscriptionIds".equals(fieldName)) {
                    List<String> subscriptionIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedChaosTargetQuerySelector.subscriptionIds = subscriptionIds;
                } else if ("type".equals(fieldName)) {
                    deserializedChaosTargetQuerySelector.type = SelectorType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedChaosTargetQuerySelector;
        });
    }
}
