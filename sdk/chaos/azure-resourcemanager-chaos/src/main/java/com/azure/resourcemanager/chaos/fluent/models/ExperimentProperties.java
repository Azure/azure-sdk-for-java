// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.chaos.models.ChaosExperimentStep;
import com.azure.resourcemanager.chaos.models.ChaosTargetSelector;
import com.azure.resourcemanager.chaos.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Model that represents the Experiment properties model.
 */
@Fluent
public final class ExperimentProperties {
    /*
     * Most recent provisioning state for the given experiment resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * List of steps.
     */
    @JsonProperty(value = "steps", required = true)
    private List<ChaosExperimentStep> steps;

    /*
     * List of selectors.
     */
    @JsonProperty(value = "selectors", required = true)
    private List<ChaosTargetSelector> selectors;

    /**
     * Creates an instance of ExperimentProperties class.
     */
    public ExperimentProperties() {
    }

    /**
     * Get the provisioningState property: Most recent provisioning state for the given experiment resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the steps property: List of steps.
     * 
     * @return the steps value.
     */
    public List<ChaosExperimentStep> steps() {
        return this.steps;
    }

    /**
     * Set the steps property: List of steps.
     * 
     * @param steps the steps value to set.
     * @return the ExperimentProperties object itself.
     */
    public ExperimentProperties withSteps(List<ChaosExperimentStep> steps) {
        this.steps = steps;
        return this;
    }

    /**
     * Get the selectors property: List of selectors.
     * 
     * @return the selectors value.
     */
    public List<ChaosTargetSelector> selectors() {
        return this.selectors;
    }

    /**
     * Set the selectors property: List of selectors.
     * 
     * @param selectors the selectors value to set.
     * @return the ExperimentProperties object itself.
     */
    public ExperimentProperties withSelectors(List<ChaosTargetSelector> selectors) {
        this.selectors = selectors;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (steps() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property steps in model ExperimentProperties"));
        } else {
            steps().forEach(e -> e.validate());
        }
        if (selectors() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property selectors in model ExperimentProperties"));
        } else {
            selectors().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExperimentProperties.class);
}
