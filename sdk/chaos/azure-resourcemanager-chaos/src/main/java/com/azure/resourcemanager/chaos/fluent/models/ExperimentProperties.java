// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.chaos.models.ChaosExperimentStep;
import com.azure.resourcemanager.chaos.models.ChaosTargetSelector;
import com.azure.resourcemanager.chaos.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Model that represents the Experiment properties model.
 */
@Fluent
public final class ExperimentProperties implements JsonSerializable<ExperimentProperties> {
    /*
     * Most recent provisioning state for the given experiment resource.
     */
    private ProvisioningState provisioningState;

    /*
     * List of steps.
     */
    private List<ChaosExperimentStep> steps;

    /*
     * List of selectors.
     */
    private List<ChaosTargetSelector> selectors;

    /**
     * Creates an instance of ExperimentProperties class.
     */
    public ExperimentProperties() {
    }

    /**
     * Get the provisioningState property: Most recent provisioning state for the given experiment resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the steps property: List of steps.
     * 
     * @return the steps value.
     */
    public List<ChaosExperimentStep> steps() {
        return this.steps;
    }

    /**
     * Set the steps property: List of steps.
     * 
     * @param steps the steps value to set.
     * @return the ExperimentProperties object itself.
     */
    public ExperimentProperties withSteps(List<ChaosExperimentStep> steps) {
        this.steps = steps;
        return this;
    }

    /**
     * Get the selectors property: List of selectors.
     * 
     * @return the selectors value.
     */
    public List<ChaosTargetSelector> selectors() {
        return this.selectors;
    }

    /**
     * Set the selectors property: List of selectors.
     * 
     * @param selectors the selectors value to set.
     * @return the ExperimentProperties object itself.
     */
    public ExperimentProperties withSelectors(List<ChaosTargetSelector> selectors) {
        this.selectors = selectors;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (steps() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property steps in model ExperimentProperties"));
        } else {
            steps().forEach(e -> e.validate());
        }
        if (selectors() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property selectors in model ExperimentProperties"));
        } else {
            selectors().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExperimentProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("steps", this.steps, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("selectors", this.selectors, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExperimentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExperimentProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExperimentProperties.
     */
    public static ExperimentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExperimentProperties deserializedExperimentProperties = new ExperimentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("steps".equals(fieldName)) {
                    List<ChaosExperimentStep> steps
                        = reader.readArray(reader1 -> ChaosExperimentStep.fromJson(reader1));
                    deserializedExperimentProperties.steps = steps;
                } else if ("selectors".equals(fieldName)) {
                    List<ChaosTargetSelector> selectors
                        = reader.readArray(reader1 -> ChaosTargetSelector.fromJson(reader1));
                    deserializedExperimentProperties.selectors = selectors;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedExperimentProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExperimentProperties;
        });
    }
}
