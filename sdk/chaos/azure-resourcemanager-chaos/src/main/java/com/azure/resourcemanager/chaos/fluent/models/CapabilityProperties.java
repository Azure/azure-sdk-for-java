// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model that represents the Capability properties model.
 */
@Immutable
public final class CapabilityProperties implements JsonSerializable<CapabilityProperties> {
    /*
     * String of the Publisher that this Capability extends.
     */
    private String publisher;

    /*
     * String of the Target Type that this Capability extends.
     */
    private String targetType;

    /*
     * Localized string of the description.
     */
    private String description;

    /*
     * URL to retrieve JSON schema of the Capability parameters.
     */
    private String parametersSchema;

    /*
     * String of the URN for this Capability Type.
     */
    private String urn;

    /**
     * Creates an instance of CapabilityProperties class.
     */
    public CapabilityProperties() {
    }

    /**
     * Get the publisher property: String of the Publisher that this Capability extends.
     * 
     * @return the publisher value.
     */
    public String publisher() {
        return this.publisher;
    }

    /**
     * Get the targetType property: String of the Target Type that this Capability extends.
     * 
     * @return the targetType value.
     */
    public String targetType() {
        return this.targetType;
    }

    /**
     * Get the description property: Localized string of the description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the parametersSchema property: URL to retrieve JSON schema of the Capability parameters.
     * 
     * @return the parametersSchema value.
     */
    public String parametersSchema() {
        return this.parametersSchema;
    }

    /**
     * Get the urn property: String of the URN for this Capability Type.
     * 
     * @return the urn value.
     */
    public String urn() {
        return this.urn;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CapabilityProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CapabilityProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CapabilityProperties.
     */
    public static CapabilityProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CapabilityProperties deserializedCapabilityProperties = new CapabilityProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("publisher".equals(fieldName)) {
                    deserializedCapabilityProperties.publisher = reader.getString();
                } else if ("targetType".equals(fieldName)) {
                    deserializedCapabilityProperties.targetType = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedCapabilityProperties.description = reader.getString();
                } else if ("parametersSchema".equals(fieldName)) {
                    deserializedCapabilityProperties.parametersSchema = reader.getString();
                } else if ("urn".equals(fieldName)) {
                    deserializedCapabilityProperties.urn = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCapabilityProperties;
        });
    }
}
