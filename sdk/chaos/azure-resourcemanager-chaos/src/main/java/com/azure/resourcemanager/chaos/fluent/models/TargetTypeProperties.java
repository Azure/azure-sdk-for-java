// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Model that represents the base Target Type properties model.
 */
@Immutable
public final class TargetTypeProperties implements JsonSerializable<TargetTypeProperties> {
    /*
     * Localized string of the display name.
     */
    private String displayName;

    /*
     * Localized string of the description.
     */
    private String description;

    /*
     * URL to retrieve JSON schema of the Target Type properties.
     */
    private String propertiesSchema;

    /*
     * List of resource types this Target Type can extend.
     */
    private List<String> resourceTypes;

    /**
     * Creates an instance of TargetTypeProperties class.
     */
    public TargetTypeProperties() {
    }

    /**
     * Get the displayName property: Localized string of the display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the description property: Localized string of the description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the propertiesSchema property: URL to retrieve JSON schema of the Target Type properties.
     * 
     * @return the propertiesSchema value.
     */
    public String propertiesSchema() {
        return this.propertiesSchema;
    }

    /**
     * Get the resourceTypes property: List of resource types this Target Type can extend.
     * 
     * @return the resourceTypes value.
     */
    public List<String> resourceTypes() {
        return this.resourceTypes;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TargetTypeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TargetTypeProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TargetTypeProperties.
     */
    public static TargetTypeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TargetTypeProperties deserializedTargetTypeProperties = new TargetTypeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedTargetTypeProperties.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedTargetTypeProperties.description = reader.getString();
                } else if ("propertiesSchema".equals(fieldName)) {
                    deserializedTargetTypeProperties.propertiesSchema = reader.getString();
                } else if ("resourceTypes".equals(fieldName)) {
                    List<String> resourceTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedTargetTypeProperties.resourceTypes = resourceTypes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTargetTypeProperties;
        });
    }
}
