// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.chaos.fluent.CapabilitiesClient;
import com.azure.resourcemanager.chaos.fluent.models.CapabilityInner;
import com.azure.resourcemanager.chaos.models.CapabilityListResult;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in CapabilitiesClient. */
public final class CapabilitiesClientImpl implements CapabilitiesClient {
    /** The proxy service used to perform REST calls. */
    private final CapabilitiesService service;

    /** The service client containing this operation class. */
    private final ChaosManagementClientImpl client;

    /**
     * Initializes an instance of CapabilitiesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    CapabilitiesClientImpl(ChaosManagementClientImpl client) {
        this.service =
            RestProxy.create(CapabilitiesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ChaosManagementClientCapabilities to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ChaosManagementClien")
    private interface CapabilitiesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{parentProviderNamespace}"
                + "/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/targets/{targetName}"
                + "/capabilities")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CapabilityListResult>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("parentProviderNamespace") String parentProviderNamespace,
            @PathParam("parentResourceType") String parentResourceType,
            @PathParam("parentResourceName") String parentResourceName,
            @PathParam("targetName") String targetName,
            @QueryParam("continuationToken") String continuationToken,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{parentProviderNamespace}"
                + "/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/targets/{targetName}"
                + "/capabilities/{capabilityName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CapabilityInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("parentProviderNamespace") String parentProviderNamespace,
            @PathParam("parentResourceType") String parentResourceType,
            @PathParam("parentResourceName") String parentResourceName,
            @PathParam("targetName") String targetName,
            @PathParam("capabilityName") String capabilityName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{parentProviderNamespace}"
                + "/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/targets/{targetName}"
                + "/capabilities/{capabilityName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("parentProviderNamespace") String parentProviderNamespace,
            @PathParam("parentResourceType") String parentResourceType,
            @PathParam("parentResourceName") String parentResourceName,
            @PathParam("targetName") String targetName,
            @PathParam("capabilityName") String capabilityName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{parentProviderNamespace}"
                + "/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/targets/{targetName}"
                + "/capabilities/{capabilityName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CapabilityInner>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("parentProviderNamespace") String parentProviderNamespace,
            @PathParam("parentResourceType") String parentResourceType,
            @PathParam("parentResourceName") String parentResourceName,
            @PathParam("targetName") String targetName,
            @PathParam("capabilityName") String capabilityName,
            @BodyParam("application/json") CapabilityInner capability,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CapabilityListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get a list of Capability resources that extend a Target resource..
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param continuationToken String that sets the continuation token.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Capability resources that extend a Target resource. along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CapabilityInner>> listSinglePageAsync(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName,
        String continuationToken) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (parentProviderNamespace == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter parentProviderNamespace is required and cannot be null."));
        }
        if (parentResourceType == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter parentResourceType is required and cannot be null."));
        }
        if (parentResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter parentResourceName is required and cannot be null."));
        }
        if (targetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            parentProviderNamespace,
                            parentResourceType,
                            parentResourceName,
                            targetName,
                            continuationToken,
                            accept,
                            context))
            .<PagedResponse<CapabilityInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a list of Capability resources that extend a Target resource..
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param continuationToken String that sets the continuation token.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Capability resources that extend a Target resource. along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CapabilityInner>> listSinglePageAsync(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName,
        String continuationToken,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (parentProviderNamespace == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter parentProviderNamespace is required and cannot be null."));
        }
        if (parentResourceType == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter parentResourceType is required and cannot be null."));
        }
        if (parentResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter parentResourceName is required and cannot be null."));
        }
        if (targetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                parentProviderNamespace,
                parentResourceType,
                parentResourceName,
                targetName,
                continuationToken,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get a list of Capability resources that extend a Target resource..
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param continuationToken String that sets the continuation token.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Capability resources that extend a Target resource. as paginated response with {@link
     *     PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CapabilityInner> listAsync(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName,
        String continuationToken) {
        return new PagedFlux<>(
            () ->
                listSinglePageAsync(
                    resourceGroupName,
                    parentProviderNamespace,
                    parentResourceType,
                    parentResourceName,
                    targetName,
                    continuationToken),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get a list of Capability resources that extend a Target resource..
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Capability resources that extend a Target resource. as paginated response with {@link
     *     PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CapabilityInner> listAsync(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName) {
        final String continuationToken = null;
        return new PagedFlux<>(
            () ->
                listSinglePageAsync(
                    resourceGroupName,
                    parentProviderNamespace,
                    parentResourceType,
                    parentResourceName,
                    targetName,
                    continuationToken),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get a list of Capability resources that extend a Target resource..
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param continuationToken String that sets the continuation token.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Capability resources that extend a Target resource. as paginated response with {@link
     *     PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CapabilityInner> listAsync(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName,
        String continuationToken,
        Context context) {
        return new PagedFlux<>(
            () ->
                listSinglePageAsync(
                    resourceGroupName,
                    parentProviderNamespace,
                    parentResourceType,
                    parentResourceName,
                    targetName,
                    continuationToken,
                    context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get a list of Capability resources that extend a Target resource..
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Capability resources that extend a Target resource. as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CapabilityInner> list(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName) {
        final String continuationToken = null;
        return new PagedIterable<>(
            listAsync(
                resourceGroupName,
                parentProviderNamespace,
                parentResourceType,
                parentResourceName,
                targetName,
                continuationToken));
    }

    /**
     * Get a list of Capability resources that extend a Target resource..
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param continuationToken String that sets the continuation token.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Capability resources that extend a Target resource. as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CapabilityInner> list(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName,
        String continuationToken,
        Context context) {
        return new PagedIterable<>(
            listAsync(
                resourceGroupName,
                parentProviderNamespace,
                parentResourceType,
                parentResourceName,
                targetName,
                continuationToken,
                context));
    }

    /**
     * Get a Capability resource that extends a Target resource.
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Capability resource that extends a Target resource along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CapabilityInner>> getWithResponseAsync(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName,
        String capabilityName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (parentProviderNamespace == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter parentProviderNamespace is required and cannot be null."));
        }
        if (parentResourceType == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter parentResourceType is required and cannot be null."));
        }
        if (parentResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter parentResourceName is required and cannot be null."));
        }
        if (targetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        if (capabilityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter capabilityName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            parentProviderNamespace,
                            parentResourceType,
                            parentResourceName,
                            targetName,
                            capabilityName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a Capability resource that extends a Target resource.
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Capability resource that extends a Target resource along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CapabilityInner>> getWithResponseAsync(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName,
        String capabilityName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (parentProviderNamespace == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter parentProviderNamespace is required and cannot be null."));
        }
        if (parentResourceType == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter parentResourceType is required and cannot be null."));
        }
        if (parentResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter parentResourceName is required and cannot be null."));
        }
        if (targetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        if (capabilityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter capabilityName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                parentProviderNamespace,
                parentResourceType,
                parentResourceName,
                targetName,
                capabilityName,
                accept,
                context);
    }

    /**
     * Get a Capability resource that extends a Target resource.
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Capability resource that extends a Target resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CapabilityInner> getAsync(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName,
        String capabilityName) {
        return getWithResponseAsync(
                resourceGroupName,
                parentProviderNamespace,
                parentResourceType,
                parentResourceName,
                targetName,
                capabilityName)
            .flatMap(
                (Response<CapabilityInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get a Capability resource that extends a Target resource.
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Capability resource that extends a Target resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CapabilityInner get(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName,
        String capabilityName) {
        return getAsync(
                resourceGroupName,
                parentProviderNamespace,
                parentResourceType,
                parentResourceName,
                targetName,
                capabilityName)
            .block();
    }

    /**
     * Get a Capability resource that extends a Target resource.
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Capability resource that extends a Target resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CapabilityInner> getWithResponse(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName,
        String capabilityName,
        Context context) {
        return getWithResponseAsync(
                resourceGroupName,
                parentProviderNamespace,
                parentResourceType,
                parentResourceName,
                targetName,
                capabilityName,
                context)
            .block();
    }

    /**
     * Delete a Capability that extends a Target resource.
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName,
        String capabilityName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (parentProviderNamespace == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter parentProviderNamespace is required and cannot be null."));
        }
        if (parentResourceType == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter parentResourceType is required and cannot be null."));
        }
        if (parentResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter parentResourceName is required and cannot be null."));
        }
        if (targetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        if (capabilityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter capabilityName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            parentProviderNamespace,
                            parentResourceType,
                            parentResourceName,
                            targetName,
                            capabilityName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a Capability that extends a Target resource.
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName,
        String capabilityName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (parentProviderNamespace == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter parentProviderNamespace is required and cannot be null."));
        }
        if (parentResourceType == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter parentResourceType is required and cannot be null."));
        }
        if (parentResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter parentResourceName is required and cannot be null."));
        }
        if (targetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        if (capabilityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter capabilityName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                parentProviderNamespace,
                parentResourceType,
                parentResourceName,
                targetName,
                capabilityName,
                accept,
                context);
    }

    /**
     * Delete a Capability that extends a Target resource.
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName,
        String capabilityName) {
        return deleteWithResponseAsync(
                resourceGroupName,
                parentProviderNamespace,
                parentResourceType,
                parentResourceName,
                targetName,
                capabilityName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete a Capability that extends a Target resource.
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName,
        String capabilityName) {
        deleteAsync(
                resourceGroupName,
                parentProviderNamespace,
                parentResourceType,
                parentResourceName,
                targetName,
                capabilityName)
            .block();
    }

    /**
     * Delete a Capability that extends a Target resource.
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName,
        String capabilityName,
        Context context) {
        return deleteWithResponseAsync(
                resourceGroupName,
                parentProviderNamespace,
                parentResourceType,
                parentResourceName,
                targetName,
                capabilityName,
                context)
            .block();
    }

    /**
     * Create or update a Capability resource that extends a Target resource.
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @param capability Capability resource to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model that represents a Capability resource along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CapabilityInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName,
        String capabilityName,
        CapabilityInner capability) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (parentProviderNamespace == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter parentProviderNamespace is required and cannot be null."));
        }
        if (parentResourceType == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter parentResourceType is required and cannot be null."));
        }
        if (parentResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter parentResourceName is required and cannot be null."));
        }
        if (targetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        if (capabilityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter capabilityName is required and cannot be null."));
        }
        if (capability == null) {
            return Mono.error(new IllegalArgumentException("Parameter capability is required and cannot be null."));
        } else {
            capability.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            parentProviderNamespace,
                            parentResourceType,
                            parentResourceName,
                            targetName,
                            capabilityName,
                            capability,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update a Capability resource that extends a Target resource.
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @param capability Capability resource to be created or updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model that represents a Capability resource along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CapabilityInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName,
        String capabilityName,
        CapabilityInner capability,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (parentProviderNamespace == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter parentProviderNamespace is required and cannot be null."));
        }
        if (parentResourceType == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter parentResourceType is required and cannot be null."));
        }
        if (parentResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter parentResourceName is required and cannot be null."));
        }
        if (targetName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetName is required and cannot be null."));
        }
        if (capabilityName == null) {
            return Mono.error(new IllegalArgumentException("Parameter capabilityName is required and cannot be null."));
        }
        if (capability == null) {
            return Mono.error(new IllegalArgumentException("Parameter capability is required and cannot be null."));
        } else {
            capability.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                parentProviderNamespace,
                parentResourceType,
                parentResourceName,
                targetName,
                capabilityName,
                capability,
                accept,
                context);
    }

    /**
     * Create or update a Capability resource that extends a Target resource.
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @param capability Capability resource to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model that represents a Capability resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CapabilityInner> createOrUpdateAsync(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName,
        String capabilityName,
        CapabilityInner capability) {
        return createOrUpdateWithResponseAsync(
                resourceGroupName,
                parentProviderNamespace,
                parentResourceType,
                parentResourceName,
                targetName,
                capabilityName,
                capability)
            .flatMap(
                (Response<CapabilityInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Create or update a Capability resource that extends a Target resource.
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @param capability Capability resource to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model that represents a Capability resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CapabilityInner createOrUpdate(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName,
        String capabilityName,
        CapabilityInner capability) {
        return createOrUpdateAsync(
                resourceGroupName,
                parentProviderNamespace,
                parentResourceType,
                parentResourceName,
                targetName,
                capabilityName,
                capability)
            .block();
    }

    /**
     * Create or update a Capability resource that extends a Target resource.
     *
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @param capability Capability resource to be created or updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model that represents a Capability resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CapabilityInner> createOrUpdateWithResponse(
        String resourceGroupName,
        String parentProviderNamespace,
        String parentResourceType,
        String parentResourceName,
        String targetName,
        String capabilityName,
        CapabilityInner capability,
        Context context) {
        return createOrUpdateWithResponseAsync(
                resourceGroupName,
                parentProviderNamespace,
                parentResourceType,
                parentResourceName,
                targetName,
                capabilityName,
                capability,
                context)
            .block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model that represents a list of Capability resources and a link for pagination along with {@link
     *     PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CapabilityInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<CapabilityInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model that represents a list of Capability resources and a link for pagination along with {@link
     *     PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CapabilityInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
