// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.resourcemanager.chaos.models.ExperimentExecutionDetailsPropertiesRunInformation;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Model that represents the Experiment execution details properties model. */
@Immutable
public final class ExperimentExecutionDetailsProperties {
    /*
     * The id of the experiment.
     */
    @JsonProperty(value = "experimentId", access = JsonProperty.Access.WRITE_ONLY)
    private String experimentId;

    /*
     * The value of the status of the experiment execution.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private String status;

    /*
     * The reason why the execution failed.
     */
    @JsonProperty(value = "failureReason", access = JsonProperty.Access.WRITE_ONLY)
    private String failureReason;

    /*
     * String that represents the created date time.
     */
    @JsonProperty(value = "createdDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime createdDateTime;

    /*
     * String that represents the last action date time.
     */
    @JsonProperty(value = "lastActionDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastActionDateTime;

    /*
     * String that represents the start date time.
     */
    @JsonProperty(value = "startDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime startDateTime;

    /*
     * String that represents the stop date time.
     */
    @JsonProperty(value = "stopDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime stopDateTime;

    /*
     * The information of the experiment run.
     */
    @JsonProperty(value = "runInformation", access = JsonProperty.Access.WRITE_ONLY)
    private ExperimentExecutionDetailsPropertiesRunInformation runInformation;

    /** Creates an instance of ExperimentExecutionDetailsProperties class. */
    public ExperimentExecutionDetailsProperties() {
    }

    /**
     * Get the experimentId property: The id of the experiment.
     *
     * @return the experimentId value.
     */
    public String experimentId() {
        return this.experimentId;
    }

    /**
     * Get the status property: The value of the status of the experiment execution.
     *
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the failureReason property: The reason why the execution failed.
     *
     * @return the failureReason value.
     */
    public String failureReason() {
        return this.failureReason;
    }

    /**
     * Get the createdDateTime property: String that represents the created date time.
     *
     * @return the createdDateTime value.
     */
    public OffsetDateTime createdDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the lastActionDateTime property: String that represents the last action date time.
     *
     * @return the lastActionDateTime value.
     */
    public OffsetDateTime lastActionDateTime() {
        return this.lastActionDateTime;
    }

    /**
     * Get the startDateTime property: String that represents the start date time.
     *
     * @return the startDateTime value.
     */
    public OffsetDateTime startDateTime() {
        return this.startDateTime;
    }

    /**
     * Get the stopDateTime property: String that represents the stop date time.
     *
     * @return the stopDateTime value.
     */
    public OffsetDateTime stopDateTime() {
        return this.stopDateTime;
    }

    /**
     * Get the runInformation property: The information of the experiment run.
     *
     * @return the runInformation value.
     */
    public ExperimentExecutionDetailsPropertiesRunInformation runInformation() {
        return this.runInformation;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (runInformation() != null) {
            runInformation().validate();
        }
    }
}
