// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.chaos.models.CapabilityTypePropertiesRuntimeProperties;
import java.io.IOException;
import java.util.List;

/**
 * Model that represents a Capability Type resource.
 */
@Fluent
public final class CapabilityTypeInner extends ProxyResource {
    /*
     * The system metadata properties of the capability type resource.
     */
    private SystemData systemData;

    /*
     * Location of the Capability Type resource.
     */
    private String location;

    /*
     * The properties of the capability type resource.
     */
    private CapabilityTypeProperties innerProperties;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of CapabilityTypeInner class.
     */
    public CapabilityTypeInner() {
    }

    /**
     * Get the systemData property: The system metadata properties of the capability type resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the location property: Location of the Capability Type resource.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: Location of the Capability Type resource.
     * 
     * @param location the location value to set.
     * @return the CapabilityTypeInner object itself.
     */
    public CapabilityTypeInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the innerProperties property: The properties of the capability type resource.
     * 
     * @return the innerProperties value.
     */
    private CapabilityTypeProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the publisher property: String of the Publisher that this Capability Type extends.
     * 
     * @return the publisher value.
     */
    public String publisher() {
        return this.innerProperties() == null ? null : this.innerProperties().publisher();
    }

    /**
     * Get the targetType property: String of the Target Type that this Capability Type extends.
     * 
     * @return the targetType value.
     */
    public String targetType() {
        return this.innerProperties() == null ? null : this.innerProperties().targetType();
    }

    /**
     * Get the displayName property: Localized string of the display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Get the description property: Localized string of the description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Get the parametersSchema property: URL to retrieve JSON schema of the Capability Type parameters.
     * 
     * @return the parametersSchema value.
     */
    public String parametersSchema() {
        return this.innerProperties() == null ? null : this.innerProperties().parametersSchema();
    }

    /**
     * Get the urn property: String of the URN for this Capability Type.
     * 
     * @return the urn value.
     */
    public String urn() {
        return this.innerProperties() == null ? null : this.innerProperties().urn();
    }

    /**
     * Get the kind property: String of the kind of this Capability Type.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.innerProperties() == null ? null : this.innerProperties().kind();
    }

    /**
     * Get the azureRbacActions property: Control plane actions necessary to execute capability type.
     * 
     * @return the azureRbacActions value.
     */
    public List<String> azureRbacActions() {
        return this.innerProperties() == null ? null : this.innerProperties().azureRbacActions();
    }

    /**
     * Set the azureRbacActions property: Control plane actions necessary to execute capability type.
     * 
     * @param azureRbacActions the azureRbacActions value to set.
     * @return the CapabilityTypeInner object itself.
     */
    public CapabilityTypeInner withAzureRbacActions(List<String> azureRbacActions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CapabilityTypeProperties();
        }
        this.innerProperties().withAzureRbacActions(azureRbacActions);
        return this;
    }

    /**
     * Get the azureRbacDataActions property: Data plane actions necessary to execute capability type.
     * 
     * @return the azureRbacDataActions value.
     */
    public List<String> azureRbacDataActions() {
        return this.innerProperties() == null ? null : this.innerProperties().azureRbacDataActions();
    }

    /**
     * Set the azureRbacDataActions property: Data plane actions necessary to execute capability type.
     * 
     * @param azureRbacDataActions the azureRbacDataActions value to set.
     * @return the CapabilityTypeInner object itself.
     */
    public CapabilityTypeInner withAzureRbacDataActions(List<String> azureRbacDataActions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CapabilityTypeProperties();
        }
        this.innerProperties().withAzureRbacDataActions(azureRbacDataActions);
        return this;
    }

    /**
     * Get the runtimeProperties property: Runtime properties of this Capability Type.
     * 
     * @return the runtimeProperties value.
     */
    public CapabilityTypePropertiesRuntimeProperties runtimeProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().runtimeProperties();
    }

    /**
     * Set the runtimeProperties property: Runtime properties of this Capability Type.
     * 
     * @param runtimeProperties the runtimeProperties value to set.
     * @return the CapabilityTypeInner object itself.
     */
    public CapabilityTypeInner withRuntimeProperties(CapabilityTypePropertiesRuntimeProperties runtimeProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CapabilityTypeProperties();
        }
        this.innerProperties().withRuntimeProperties(runtimeProperties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", this.location);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CapabilityTypeInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CapabilityTypeInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CapabilityTypeInner.
     */
    public static CapabilityTypeInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CapabilityTypeInner deserializedCapabilityTypeInner = new CapabilityTypeInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedCapabilityTypeInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedCapabilityTypeInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedCapabilityTypeInner.type = reader.getString();
                } else if ("systemData".equals(fieldName)) {
                    deserializedCapabilityTypeInner.systemData = SystemData.fromJson(reader);
                } else if ("location".equals(fieldName)) {
                    deserializedCapabilityTypeInner.location = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedCapabilityTypeInner.innerProperties = CapabilityTypeProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCapabilityTypeInner;
        });
    }
}
