// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Model that represents a list selector.
 */
@Fluent
public final class ChaosTargetListSelector extends ChaosTargetSelector {
    /*
     * Enum of the selector type.
     */
    private SelectorType type = SelectorType.LIST;

    /*
     * List of Target references.
     */
    private List<TargetReference> targets;

    /**
     * Creates an instance of ChaosTargetListSelector class.
     */
    public ChaosTargetListSelector() {
    }

    /**
     * Get the type property: Enum of the selector type.
     * 
     * @return the type value.
     */
    @Override
    public SelectorType type() {
        return this.type;
    }

    /**
     * Get the targets property: List of Target references.
     * 
     * @return the targets value.
     */
    public List<TargetReference> targets() {
        return this.targets;
    }

    /**
     * Set the targets property: List of Target references.
     * 
     * @param targets the targets value to set.
     * @return the ChaosTargetListSelector object itself.
     */
    public ChaosTargetListSelector withTargets(List<TargetReference> targets) {
        this.targets = targets;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChaosTargetListSelector withId(String id) {
        super.withId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChaosTargetListSelector withFilter(ChaosTargetFilter filter) {
        super.withFilter(filter);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (targets() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property targets in model ChaosTargetListSelector"));
        } else {
            targets().forEach(e -> e.validate());
        }
        if (id() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property id in model ChaosTargetListSelector"));
        }
        if (filter() != null) {
            filter().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ChaosTargetListSelector.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", id());
        jsonWriter.writeJsonField("filter", filter());
        jsonWriter.writeArrayField("targets", this.targets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        if (additionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChaosTargetListSelector from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChaosTargetListSelector if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChaosTargetListSelector.
     */
    public static ChaosTargetListSelector fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChaosTargetListSelector deserializedChaosTargetListSelector = new ChaosTargetListSelector();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedChaosTargetListSelector.withId(reader.getString());
                } else if ("filter".equals(fieldName)) {
                    deserializedChaosTargetListSelector.withFilter(ChaosTargetFilter.fromJson(reader));
                } else if ("targets".equals(fieldName)) {
                    List<TargetReference> targets = reader.readArray(reader1 -> TargetReference.fromJson(reader1));
                    deserializedChaosTargetListSelector.targets = targets;
                } else if ("type".equals(fieldName)) {
                    deserializedChaosTargetListSelector.type = SelectorType.fromString(reader.getString());
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedChaosTargetListSelector.withAdditionalProperties(additionalProperties);

            return deserializedChaosTargetListSelector;
        });
    }
}
