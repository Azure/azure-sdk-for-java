// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model that represents a reference to a Target in the selector.
 */
@Fluent
public final class TargetReference implements JsonSerializable<TargetReference> {
    /*
     * Enum of the Target reference type.
     */
    private TargetReferenceType type;

    /*
     * String of the resource ID of a Target resource.
     */
    private String id;

    /**
     * Creates an instance of TargetReference class.
     */
    public TargetReference() {
    }

    /**
     * Get the type property: Enum of the Target reference type.
     * 
     * @return the type value.
     */
    public TargetReferenceType type() {
        return this.type;
    }

    /**
     * Set the type property: Enum of the Target reference type.
     * 
     * @param type the type value to set.
     * @return the TargetReference object itself.
     */
    public TargetReference withType(TargetReferenceType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the id property: String of the resource ID of a Target resource.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: String of the resource ID of a Target resource.
     * 
     * @param id the id value to set.
     * @return the TargetReference object itself.
     */
    public TargetReference withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model TargetReference"));
        }
        if (id() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property id in model TargetReference"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TargetReference.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("id", this.id);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TargetReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TargetReference if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TargetReference.
     */
    public static TargetReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TargetReference deserializedTargetReference = new TargetReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedTargetReference.type = TargetReferenceType.fromString(reader.getString());
                } else if ("id".equals(fieldName)) {
                    deserializedTargetReference.id = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTargetReference;
        });
    }
}
