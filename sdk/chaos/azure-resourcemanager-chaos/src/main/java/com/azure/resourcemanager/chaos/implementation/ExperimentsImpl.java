// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.chaos.fluent.ExperimentsClient;
import com.azure.resourcemanager.chaos.fluent.models.ExperimentCancelOperationResultInner;
import com.azure.resourcemanager.chaos.fluent.models.ExperimentExecutionDetailsInner;
import com.azure.resourcemanager.chaos.fluent.models.ExperimentInner;
import com.azure.resourcemanager.chaos.fluent.models.ExperimentStartOperationResultInner;
import com.azure.resourcemanager.chaos.fluent.models.ExperimentStatusInner;
import com.azure.resourcemanager.chaos.models.Experiment;
import com.azure.resourcemanager.chaos.models.ExperimentCancelOperationResult;
import com.azure.resourcemanager.chaos.models.ExperimentExecutionDetails;
import com.azure.resourcemanager.chaos.models.ExperimentStartOperationResult;
import com.azure.resourcemanager.chaos.models.ExperimentStatus;
import com.azure.resourcemanager.chaos.models.Experiments;

public final class ExperimentsImpl implements Experiments {
    private static final ClientLogger LOGGER = new ClientLogger(ExperimentsImpl.class);

    private final ExperimentsClient innerClient;

    private final com.azure.resourcemanager.chaos.ChaosManager serviceManager;

    public ExperimentsImpl(ExperimentsClient innerClient, com.azure.resourcemanager.chaos.ChaosManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Experiment> list() {
        PagedIterable<ExperimentInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new ExperimentImpl(inner1, this.manager()));
    }

    public PagedIterable<Experiment> list(Boolean running, String continuationToken, Context context) {
        PagedIterable<ExperimentInner> inner = this.serviceClient().list(running, continuationToken, context);
        return Utils.mapPage(inner, inner1 -> new ExperimentImpl(inner1, this.manager()));
    }

    public PagedIterable<Experiment> listByResourceGroup(String resourceGroupName) {
        PagedIterable<ExperimentInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new ExperimentImpl(inner1, this.manager()));
    }

    public PagedIterable<Experiment> listByResourceGroup(
        String resourceGroupName, Boolean running, String continuationToken, Context context) {
        PagedIterable<ExperimentInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, running, continuationToken, context);
        return Utils.mapPage(inner, inner1 -> new ExperimentImpl(inner1, this.manager()));
    }

    public void deleteByResourceGroup(String resourceGroupName, String experimentName) {
        this.serviceClient().delete(resourceGroupName, experimentName);
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String experimentName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, experimentName, context);
    }

    public Experiment getByResourceGroup(String resourceGroupName, String experimentName) {
        ExperimentInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, experimentName);
        if (inner != null) {
            return new ExperimentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Experiment> getByResourceGroupWithResponse(
        String resourceGroupName, String experimentName, Context context) {
        Response<ExperimentInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, experimentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ExperimentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ExperimentCancelOperationResult cancel(String resourceGroupName, String experimentName) {
        ExperimentCancelOperationResultInner inner = this.serviceClient().cancel(resourceGroupName, experimentName);
        if (inner != null) {
            return new ExperimentCancelOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ExperimentCancelOperationResult cancel(String resourceGroupName, String experimentName, Context context) {
        ExperimentCancelOperationResultInner inner =
            this.serviceClient().cancel(resourceGroupName, experimentName, context);
        if (inner != null) {
            return new ExperimentCancelOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ExperimentStartOperationResult start(String resourceGroupName, String experimentName) {
        ExperimentStartOperationResultInner inner = this.serviceClient().start(resourceGroupName, experimentName);
        if (inner != null) {
            return new ExperimentStartOperationResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ExperimentStartOperationResult> startWithResponse(
        String resourceGroupName, String experimentName, Context context) {
        Response<ExperimentStartOperationResultInner> inner =
            this.serviceClient().startWithResponse(resourceGroupName, experimentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ExperimentStartOperationResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ExperimentStatus> listAllStatuses(String resourceGroupName, String experimentName) {
        PagedIterable<ExperimentStatusInner> inner =
            this.serviceClient().listAllStatuses(resourceGroupName, experimentName);
        return Utils.mapPage(inner, inner1 -> new ExperimentStatusImpl(inner1, this.manager()));
    }

    public PagedIterable<ExperimentStatus> listAllStatuses(
        String resourceGroupName, String experimentName, Context context) {
        PagedIterable<ExperimentStatusInner> inner =
            this.serviceClient().listAllStatuses(resourceGroupName, experimentName, context);
        return Utils.mapPage(inner, inner1 -> new ExperimentStatusImpl(inner1, this.manager()));
    }

    public ExperimentStatus getStatus(String resourceGroupName, String experimentName, String statusId) {
        ExperimentStatusInner inner = this.serviceClient().getStatus(resourceGroupName, experimentName, statusId);
        if (inner != null) {
            return new ExperimentStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ExperimentStatus> getStatusWithResponse(
        String resourceGroupName, String experimentName, String statusId, Context context) {
        Response<ExperimentStatusInner> inner =
            this.serviceClient().getStatusWithResponse(resourceGroupName, experimentName, statusId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ExperimentStatusImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ExperimentExecutionDetails> listExecutionDetails(
        String resourceGroupName, String experimentName) {
        PagedIterable<ExperimentExecutionDetailsInner> inner =
            this.serviceClient().listExecutionDetails(resourceGroupName, experimentName);
        return Utils.mapPage(inner, inner1 -> new ExperimentExecutionDetailsImpl(inner1, this.manager()));
    }

    public PagedIterable<ExperimentExecutionDetails> listExecutionDetails(
        String resourceGroupName, String experimentName, Context context) {
        PagedIterable<ExperimentExecutionDetailsInner> inner =
            this.serviceClient().listExecutionDetails(resourceGroupName, experimentName, context);
        return Utils.mapPage(inner, inner1 -> new ExperimentExecutionDetailsImpl(inner1, this.manager()));
    }

    public ExperimentExecutionDetails getExecutionDetails(
        String resourceGroupName, String experimentName, String executionDetailsId) {
        ExperimentExecutionDetailsInner inner =
            this.serviceClient().getExecutionDetails(resourceGroupName, experimentName, executionDetailsId);
        if (inner != null) {
            return new ExperimentExecutionDetailsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ExperimentExecutionDetails> getExecutionDetailsWithResponse(
        String resourceGroupName, String experimentName, String executionDetailsId, Context context) {
        Response<ExperimentExecutionDetailsInner> inner =
            this
                .serviceClient()
                .getExecutionDetailsWithResponse(resourceGroupName, experimentName, executionDetailsId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ExperimentExecutionDetailsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Experiment getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String experimentName = Utils.getValueFromIdByName(id, "experiments");
        if (experimentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'experiments'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, experimentName, Context.NONE).getValue();
    }

    public Response<Experiment> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String experimentName = Utils.getValueFromIdByName(id, "experiments");
        if (experimentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'experiments'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, experimentName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String experimentName = Utils.getValueFromIdByName(id, "experiments");
        if (experimentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'experiments'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, experimentName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String experimentName = Utils.getValueFromIdByName(id, "experiments");
        if (experimentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'experiments'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, experimentName, context);
    }

    private ExperimentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.chaos.ChaosManager manager() {
        return this.serviceManager;
    }

    public ExperimentImpl define(String name) {
        return new ExperimentImpl(name, this.manager());
    }
}
