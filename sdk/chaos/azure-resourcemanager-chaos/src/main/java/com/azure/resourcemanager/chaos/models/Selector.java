// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Model that represents a selector in the Experiment resource. */
@Fluent
public final class Selector {
    /*
     * Enum of the selector type.
     */
    @JsonProperty(value = "type", required = true)
    private SelectorType type;

    /*
     * String of the selector ID.
     */
    @JsonProperty(value = "id", required = true)
    private String id;

    /*
     * List of Target references.
     */
    @JsonProperty(value = "targets", required = true)
    private List<TargetReference> targets;

    /**
     * Get the type property: Enum of the selector type.
     *
     * @return the type value.
     */
    public SelectorType type() {
        return this.type;
    }

    /**
     * Set the type property: Enum of the selector type.
     *
     * @param type the type value to set.
     * @return the Selector object itself.
     */
    public Selector withType(SelectorType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the id property: String of the selector ID.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: String of the selector ID.
     *
     * @param id the id value to set.
     * @return the Selector object itself.
     */
    public Selector withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the targets property: List of Target references.
     *
     * @return the targets value.
     */
    public List<TargetReference> targets() {
        return this.targets;
    }

    /**
     * Set the targets property: List of Target references.
     *
     * @param targets the targets value to set.
     * @return the Selector object itself.
     */
    public Selector withTargets(List<TargetReference> targets) {
        this.targets = targets;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (type() == null) {
            throw LOGGER
                .logExceptionAsError(new IllegalArgumentException("Missing required property type in model Selector"));
        }
        if (id() == null) {
            throw LOGGER
                .logExceptionAsError(new IllegalArgumentException("Missing required property id in model Selector"));
        }
        if (targets() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property targets in model Selector"));
        } else {
            targets().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Selector.class);
}
