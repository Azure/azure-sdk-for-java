// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.chaos.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.chaos.fluent.models.ExperimentInner;
import com.azure.resourcemanager.chaos.models.ExperimentUpdate;

/**
 * An instance of this class provides access to all the operations defined in ExperimentsClient.
 */
public interface ExperimentsClient {
    /**
     * Get a Experiment resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Experiment resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ExperimentInner> getByResourceGroupWithResponse(String resourceGroupName, String experimentName,
        Context context);

    /**
     * Get a Experiment resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Experiment resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExperimentInner getByResourceGroup(String resourceGroupName, String experimentName);

    /**
     * Create or update a Experiment resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @param resource Experiment resource to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of model that represents a Experiment resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ExperimentInner>, ExperimentInner> beginCreateOrUpdate(String resourceGroupName,
        String experimentName, ExperimentInner resource);

    /**
     * Create or update a Experiment resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @param resource Experiment resource to be created or updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of model that represents a Experiment resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ExperimentInner>, ExperimentInner> beginCreateOrUpdate(String resourceGroupName,
        String experimentName, ExperimentInner resource, Context context);

    /**
     * Create or update a Experiment resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @param resource Experiment resource to be created or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model that represents a Experiment resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExperimentInner createOrUpdate(String resourceGroupName, String experimentName, ExperimentInner resource);

    /**
     * Create or update a Experiment resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @param resource Experiment resource to be created or updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model that represents a Experiment resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExperimentInner createOrUpdate(String resourceGroupName, String experimentName, ExperimentInner resource,
        Context context);

    /**
     * The operation to update an experiment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @param properties Parameters supplied to the Update experiment operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of model that represents a Experiment resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ExperimentInner>, ExperimentInner> beginUpdate(String resourceGroupName,
        String experimentName, ExperimentUpdate properties);

    /**
     * The operation to update an experiment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @param properties Parameters supplied to the Update experiment operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of model that represents a Experiment resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ExperimentInner>, ExperimentInner> beginUpdate(String resourceGroupName,
        String experimentName, ExperimentUpdate properties, Context context);

    /**
     * The operation to update an experiment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @param properties Parameters supplied to the Update experiment operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model that represents a Experiment resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExperimentInner update(String resourceGroupName, String experimentName, ExperimentUpdate properties);

    /**
     * The operation to update an experiment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @param properties Parameters supplied to the Update experiment operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return model that represents a Experiment resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExperimentInner update(String resourceGroupName, String experimentName, ExperimentUpdate properties,
        Context context);

    /**
     * Delete a Experiment resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String experimentName);

    /**
     * Delete a Experiment resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String experimentName, Context context);

    /**
     * Delete a Experiment resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String experimentName);

    /**
     * Delete a Experiment resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String experimentName, Context context);

    /**
     * Get a list of Experiment resources in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Experiment resources in a resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ExperimentInner> listByResourceGroup(String resourceGroupName);

    /**
     * Get a list of Experiment resources in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param running Optional value that indicates whether to filter results based on if the Experiment is currently
     * running. If null, then the results will not be filtered.
     * @param continuationToken String that sets the continuation token.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Experiment resources in a resource group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ExperimentInner> listByResourceGroup(String resourceGroupName, Boolean running,
        String continuationToken, Context context);

    /**
     * Get a list of Experiment resources in a subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Experiment resources in a subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ExperimentInner> list();

    /**
     * Get a list of Experiment resources in a subscription.
     * 
     * @param running Optional value that indicates whether to filter results based on if the Experiment is currently
     * running. If null, then the results will not be filtered.
     * @param continuationToken String that sets the continuation token.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Experiment resources in a subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ExperimentInner> list(Boolean running, String continuationToken, Context context);

    /**
     * Cancel a running Experiment resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginCancel(String resourceGroupName, String experimentName);

    /**
     * Cancel a running Experiment resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginCancel(String resourceGroupName, String experimentName, Context context);

    /**
     * Cancel a running Experiment resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void cancel(String resourceGroupName, String experimentName);

    /**
     * Cancel a running Experiment resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void cancel(String resourceGroupName, String experimentName, Context context);

    /**
     * Start a Experiment resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginStart(String resourceGroupName, String experimentName);

    /**
     * Start a Experiment resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginStart(String resourceGroupName, String experimentName, Context context);

    /**
     * Start a Experiment resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void start(String resourceGroupName, String experimentName);

    /**
     * Start a Experiment resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param experimentName String that represents a Experiment resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void start(String resourceGroupName, String experimentName, Context context);
}
