// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.chaos.fluent.TargetTypesClient;
import com.azure.resourcemanager.chaos.fluent.models.TargetTypeInner;
import com.azure.resourcemanager.chaos.models.TargetType;
import com.azure.resourcemanager.chaos.models.TargetTypes;

public final class TargetTypesImpl implements TargetTypes {
    private static final ClientLogger LOGGER = new ClientLogger(TargetTypesImpl.class);

    private final TargetTypesClient innerClient;

    private final com.azure.resourcemanager.chaos.ChaosManager serviceManager;

    public TargetTypesImpl(TargetTypesClient innerClient, com.azure.resourcemanager.chaos.ChaosManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<TargetType> list(String locationName) {
        PagedIterable<TargetTypeInner> inner = this.serviceClient().list(locationName);
        return Utils.mapPage(inner, inner1 -> new TargetTypeImpl(inner1, this.manager()));
    }

    public PagedIterable<TargetType> list(String locationName, String continuationToken, Context context) {
        PagedIterable<TargetTypeInner> inner = this.serviceClient().list(locationName, continuationToken, context);
        return Utils.mapPage(inner, inner1 -> new TargetTypeImpl(inner1, this.manager()));
    }

    public TargetType get(String locationName, String targetTypeName) {
        TargetTypeInner inner = this.serviceClient().get(locationName, targetTypeName);
        if (inner != null) {
            return new TargetTypeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TargetType> getWithResponse(String locationName, String targetTypeName, Context context) {
        Response<TargetTypeInner> inner = this.serviceClient().getWithResponse(locationName, targetTypeName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TargetTypeImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private TargetTypesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.chaos.ChaosManager manager() {
        return this.serviceManager;
    }
}
