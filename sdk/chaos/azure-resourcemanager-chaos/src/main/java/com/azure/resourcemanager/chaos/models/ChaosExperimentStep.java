// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Model that represents a step in the Experiment resource.
 */
@Fluent
public final class ChaosExperimentStep {
    /*
     * String of the step name.
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /*
     * List of branches.
     */
    @JsonProperty(value = "branches", required = true)
    private List<ChaosExperimentBranch> branches;

    /**
     * Creates an instance of ChaosExperimentStep class.
     */
    public ChaosExperimentStep() {
    }

    /**
     * Get the name property: String of the step name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: String of the step name.
     * 
     * @param name the name value to set.
     * @return the ChaosExperimentStep object itself.
     */
    public ChaosExperimentStep withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the branches property: List of branches.
     * 
     * @return the branches value.
     */
    public List<ChaosExperimentBranch> branches() {
        return this.branches;
    }

    /**
     * Set the branches property: List of branches.
     * 
     * @param branches the branches value to set.
     * @return the ChaosExperimentStep object itself.
     */
    public ChaosExperimentStep withBranches(List<ChaosExperimentBranch> branches) {
        this.branches = branches;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property name in model ChaosExperimentStep"));
        }
        if (branches() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property branches in model ChaosExperimentStep"));
        } else {
            branches().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ChaosExperimentStep.class);
}
