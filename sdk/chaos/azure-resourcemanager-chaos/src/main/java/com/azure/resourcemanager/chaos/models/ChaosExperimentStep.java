// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Model that represents a step in the Experiment resource.
 */
@Fluent
public final class ChaosExperimentStep implements JsonSerializable<ChaosExperimentStep> {
    /*
     * String of the step name.
     */
    private String name;

    /*
     * List of branches.
     */
    private List<ChaosExperimentBranch> branches;

    /**
     * Creates an instance of ChaosExperimentStep class.
     */
    public ChaosExperimentStep() {
    }

    /**
     * Get the name property: String of the step name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: String of the step name.
     * 
     * @param name the name value to set.
     * @return the ChaosExperimentStep object itself.
     */
    public ChaosExperimentStep withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the branches property: List of branches.
     * 
     * @return the branches value.
     */
    public List<ChaosExperimentBranch> branches() {
        return this.branches;
    }

    /**
     * Set the branches property: List of branches.
     * 
     * @param branches the branches value to set.
     * @return the ChaosExperimentStep object itself.
     */
    public ChaosExperimentStep withBranches(List<ChaosExperimentBranch> branches) {
        this.branches = branches;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model ChaosExperimentStep"));
        }
        if (branches() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property branches in model ChaosExperimentStep"));
        } else {
            branches().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ChaosExperimentStep.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("branches", this.branches, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChaosExperimentStep from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChaosExperimentStep if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChaosExperimentStep.
     */
    public static ChaosExperimentStep fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChaosExperimentStep deserializedChaosExperimentStep = new ChaosExperimentStep();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedChaosExperimentStep.name = reader.getString();
                } else if ("branches".equals(fieldName)) {
                    List<ChaosExperimentBranch> branches
                        = reader.readArray(reader1 -> ChaosExperimentBranch.fromJson(reader1));
                    deserializedChaosExperimentStep.branches = branches;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedChaosExperimentStep;
        });
    }
}
