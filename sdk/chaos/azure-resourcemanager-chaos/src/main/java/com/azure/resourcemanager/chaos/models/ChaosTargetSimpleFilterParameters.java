// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Model that represents the Simple filter parameters.
 */
@Fluent
public final class ChaosTargetSimpleFilterParameters implements JsonSerializable<ChaosTargetSimpleFilterParameters> {
    /*
     * List of Azure availability zones to filter targets by.
     */
    private List<String> zones;

    /**
     * Creates an instance of ChaosTargetSimpleFilterParameters class.
     */
    public ChaosTargetSimpleFilterParameters() {
    }

    /**
     * Get the zones property: List of Azure availability zones to filter targets by.
     * 
     * @return the zones value.
     */
    public List<String> zones() {
        return this.zones;
    }

    /**
     * Set the zones property: List of Azure availability zones to filter targets by.
     * 
     * @param zones the zones value to set.
     * @return the ChaosTargetSimpleFilterParameters object itself.
     */
    public ChaosTargetSimpleFilterParameters withZones(List<String> zones) {
        this.zones = zones;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("zones", this.zones, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChaosTargetSimpleFilterParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChaosTargetSimpleFilterParameters if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ChaosTargetSimpleFilterParameters.
     */
    public static ChaosTargetSimpleFilterParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChaosTargetSimpleFilterParameters deserializedChaosTargetSimpleFilterParameters
                = new ChaosTargetSimpleFilterParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("zones".equals(fieldName)) {
                    List<String> zones = reader.readArray(reader1 -> reader1.getString());
                    deserializedChaosTargetSimpleFilterParameters.zones = zones;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedChaosTargetSimpleFilterParameters;
        });
    }
}
