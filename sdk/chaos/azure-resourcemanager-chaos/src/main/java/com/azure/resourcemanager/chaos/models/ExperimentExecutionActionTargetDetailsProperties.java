// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Model that represents the Experiment action target details properties model.
 */
@Immutable
public final class ExperimentExecutionActionTargetDetailsProperties
    implements JsonSerializable<ExperimentExecutionActionTargetDetailsProperties> {
    /*
     * The status of the execution.
     */
    private String status;

    /*
     * The target for the action.
     */
    private String target;

    /*
     * String that represents the failed date time.
     */
    private OffsetDateTime targetFailedTime;

    /*
     * String that represents the completed date time.
     */
    private OffsetDateTime targetCompletedTime;

    /*
     * The error of the action.
     */
    private ExperimentExecutionActionTargetDetailsError error;

    /**
     * Creates an instance of ExperimentExecutionActionTargetDetailsProperties class.
     */
    public ExperimentExecutionActionTargetDetailsProperties() {
    }

    /**
     * Get the status property: The status of the execution.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the target property: The target for the action.
     * 
     * @return the target value.
     */
    public String target() {
        return this.target;
    }

    /**
     * Get the targetFailedTime property: String that represents the failed date time.
     * 
     * @return the targetFailedTime value.
     */
    public OffsetDateTime targetFailedTime() {
        return this.targetFailedTime;
    }

    /**
     * Get the targetCompletedTime property: String that represents the completed date time.
     * 
     * @return the targetCompletedTime value.
     */
    public OffsetDateTime targetCompletedTime() {
        return this.targetCompletedTime;
    }

    /**
     * Get the error property: The error of the action.
     * 
     * @return the error value.
     */
    public ExperimentExecutionActionTargetDetailsError error() {
        return this.error;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (error() != null) {
            error().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExperimentExecutionActionTargetDetailsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExperimentExecutionActionTargetDetailsProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExperimentExecutionActionTargetDetailsProperties.
     */
    public static ExperimentExecutionActionTargetDetailsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExperimentExecutionActionTargetDetailsProperties deserializedExperimentExecutionActionTargetDetailsProperties
                = new ExperimentExecutionActionTargetDetailsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedExperimentExecutionActionTargetDetailsProperties.status = reader.getString();
                } else if ("target".equals(fieldName)) {
                    deserializedExperimentExecutionActionTargetDetailsProperties.target = reader.getString();
                } else if ("targetFailedTime".equals(fieldName)) {
                    deserializedExperimentExecutionActionTargetDetailsProperties.targetFailedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("targetCompletedTime".equals(fieldName)) {
                    deserializedExperimentExecutionActionTargetDetailsProperties.targetCompletedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("error".equals(fieldName)) {
                    deserializedExperimentExecutionActionTargetDetailsProperties.error
                        = ExperimentExecutionActionTargetDetailsError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExperimentExecutionActionTargetDetailsProperties;
        });
    }
}
