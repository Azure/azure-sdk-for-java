// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Model that represents the a list of actions and action statuses.
 */
@Immutable
public final class BranchStatus implements JsonSerializable<BranchStatus> {
    /*
     * The name of the branch status.
     */
    private String branchName;

    /*
     * The id of the branch status.
     */
    private String branchId;

    /*
     * The status of the branch.
     */
    private String status;

    /*
     * The array of actions.
     */
    private List<ActionStatus> actions;

    /**
     * Creates an instance of BranchStatus class.
     */
    public BranchStatus() {
    }

    /**
     * Get the branchName property: The name of the branch status.
     * 
     * @return the branchName value.
     */
    public String branchName() {
        return this.branchName;
    }

    /**
     * Get the branchId property: The id of the branch status.
     * 
     * @return the branchId value.
     */
    public String branchId() {
        return this.branchId;
    }

    /**
     * Get the status property: The status of the branch.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the actions property: The array of actions.
     * 
     * @return the actions value.
     */
    public List<ActionStatus> actions() {
        return this.actions;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (actions() != null) {
            actions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BranchStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BranchStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BranchStatus.
     */
    public static BranchStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BranchStatus deserializedBranchStatus = new BranchStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("branchName".equals(fieldName)) {
                    deserializedBranchStatus.branchName = reader.getString();
                } else if ("branchId".equals(fieldName)) {
                    deserializedBranchStatus.branchId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedBranchStatus.status = reader.getString();
                } else if ("actions".equals(fieldName)) {
                    List<ActionStatus> actions = reader.readArray(reader1 -> ActionStatus.fromJson(reader1));
                    deserializedBranchStatus.actions = actions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBranchStatus;
        });
    }
}
