// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.chaos.fluent.models.ExperimentInner;
import com.azure.resourcemanager.chaos.models.Experiment;
import com.azure.resourcemanager.chaos.models.ExperimentCancelOperationResult;
import com.azure.resourcemanager.chaos.models.ExperimentStartOperationResult;
import com.azure.resourcemanager.chaos.models.ResourceIdentity;
import com.azure.resourcemanager.chaos.models.Selector;
import com.azure.resourcemanager.chaos.models.Step;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class ExperimentImpl implements Experiment, Experiment.Definition, Experiment.Update {
    private ExperimentInner innerObject;

    private final com.azure.resourcemanager.chaos.ChaosManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ResourceIdentity identity() {
        return this.innerModel().identity();
    }

    public List<Step> steps() {
        List<Step> inner = this.innerModel().steps();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<Selector> selectors() {
        List<Selector> inner = this.innerModel().selectors();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Boolean startOnCreation() {
        return this.innerModel().startOnCreation();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public ExperimentInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.chaos.ChaosManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String experimentName;

    public ExperimentImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Experiment create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getExperiments()
                .createOrUpdate(resourceGroupName, experimentName, this.innerModel(), Context.NONE);
        return this;
    }

    public Experiment create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getExperiments()
                .createOrUpdate(resourceGroupName, experimentName, this.innerModel(), context);
        return this;
    }

    ExperimentImpl(String name, com.azure.resourcemanager.chaos.ChaosManager serviceManager) {
        this.innerObject = new ExperimentInner();
        this.serviceManager = serviceManager;
        this.experimentName = name;
    }

    public ExperimentImpl update() {
        return this;
    }

    public Experiment apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getExperiments()
                .createOrUpdate(resourceGroupName, experimentName, this.innerModel(), Context.NONE);
        return this;
    }

    public Experiment apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getExperiments()
                .createOrUpdate(resourceGroupName, experimentName, this.innerModel(), context);
        return this;
    }

    ExperimentImpl(ExperimentInner innerObject, com.azure.resourcemanager.chaos.ChaosManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.experimentName = Utils.getValueFromIdByName(innerObject.id(), "experiments");
    }

    public Experiment refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getExperiments()
                .getByResourceGroupWithResponse(resourceGroupName, experimentName, Context.NONE)
                .getValue();
        return this;
    }

    public Experiment refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getExperiments()
                .getByResourceGroupWithResponse(resourceGroupName, experimentName, context)
                .getValue();
        return this;
    }

    public ExperimentCancelOperationResult cancel() {
        return serviceManager.experiments().cancel(resourceGroupName, experimentName);
    }

    public ExperimentCancelOperationResult cancel(Context context) {
        return serviceManager.experiments().cancel(resourceGroupName, experimentName, context);
    }

    public ExperimentStartOperationResult start() {
        return serviceManager.experiments().start(resourceGroupName, experimentName);
    }

    public Response<ExperimentStartOperationResult> startWithResponse(Context context) {
        return serviceManager.experiments().startWithResponse(resourceGroupName, experimentName, context);
    }

    public ExperimentImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ExperimentImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ExperimentImpl withSteps(List<Step> steps) {
        this.innerModel().withSteps(steps);
        return this;
    }

    public ExperimentImpl withSelectors(List<Selector> selectors) {
        this.innerModel().withSelectors(selectors);
        return this;
    }

    public ExperimentImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public ExperimentImpl withIdentity(ResourceIdentity identity) {
        this.innerModel().withIdentity(identity);
        return this;
    }

    public ExperimentImpl withStartOnCreation(Boolean startOnCreation) {
        this.innerModel().withStartOnCreation(startOnCreation);
        return this;
    }
}
