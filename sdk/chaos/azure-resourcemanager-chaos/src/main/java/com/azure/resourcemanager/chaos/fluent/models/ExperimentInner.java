// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.chaos.models.ResourceIdentity;
import com.azure.resourcemanager.chaos.models.Selector;
import com.azure.resourcemanager.chaos.models.Step;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Model that represents a Experiment resource. */
@Fluent
public final class ExperimentInner extends Resource {
    /*
     * The system metadata of the experiment resource.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * The identity of the experiment resource.
     */
    @JsonProperty(value = "identity")
    private ResourceIdentity identity;

    /*
     * The properties of the experiment resource.
     */
    @JsonProperty(value = "properties", required = true)
    private ExperimentProperties innerProperties = new ExperimentProperties();

    /**
     * Get the systemData property: The system metadata of the experiment resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the identity property: The identity of the experiment resource.
     *
     * @return the identity value.
     */
    public ResourceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity of the experiment resource.
     *
     * @param identity the identity value to set.
     * @return the ExperimentInner object itself.
     */
    public ExperimentInner withIdentity(ResourceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the innerProperties property: The properties of the experiment resource.
     *
     * @return the innerProperties value.
     */
    private ExperimentProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public ExperimentInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ExperimentInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the steps property: List of steps.
     *
     * @return the steps value.
     */
    public List<Step> steps() {
        return this.innerProperties() == null ? null : this.innerProperties().steps();
    }

    /**
     * Set the steps property: List of steps.
     *
     * @param steps the steps value to set.
     * @return the ExperimentInner object itself.
     */
    public ExperimentInner withSteps(List<Step> steps) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExperimentProperties();
        }
        this.innerProperties().withSteps(steps);
        return this;
    }

    /**
     * Get the selectors property: List of selectors.
     *
     * @return the selectors value.
     */
    public List<Selector> selectors() {
        return this.innerProperties() == null ? null : this.innerProperties().selectors();
    }

    /**
     * Set the selectors property: List of selectors.
     *
     * @param selectors the selectors value to set.
     * @return the ExperimentInner object itself.
     */
    public ExperimentInner withSelectors(List<Selector> selectors) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExperimentProperties();
        }
        this.innerProperties().withSelectors(selectors);
        return this;
    }

    /**
     * Get the startOnCreation property: A boolean value that indicates if experiment should be started on creation or
     * not.
     *
     * @return the startOnCreation value.
     */
    public Boolean startOnCreation() {
        return this.innerProperties() == null ? null : this.innerProperties().startOnCreation();
    }

    /**
     * Set the startOnCreation property: A boolean value that indicates if experiment should be started on creation or
     * not.
     *
     * @param startOnCreation the startOnCreation value to set.
     * @return the ExperimentInner object itself.
     */
    public ExperimentInner withStartOnCreation(Boolean startOnCreation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ExperimentProperties();
        }
        this.innerProperties().withStartOnCreation(startOnCreation);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property innerProperties in model ExperimentInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExperimentInner.class);
}
