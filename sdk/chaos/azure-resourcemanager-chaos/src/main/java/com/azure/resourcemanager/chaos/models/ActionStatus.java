// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.chaos.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Model that represents the an action and its status. */
@Immutable
public final class ActionStatus {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ActionStatus.class);

    /*
     * The name of the action status.
     */
    @JsonProperty(value = "name", access = JsonProperty.Access.WRITE_ONLY)
    private String name;

    /*
     * The id of the action status.
     */
    @JsonProperty(value = "id", access = JsonProperty.Access.WRITE_ONLY)
    private String id;

    /*
     * The status of the action.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private String status;

    /*
     * The array of targets.
     */
    @JsonProperty(value = "targets", access = JsonProperty.Access.WRITE_ONLY)
    private List<ExperimentExecutionActionTargetDetailsProperties> targets;

    /**
     * Get the name property: The name of the action status.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: The id of the action status.
     *
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the status property: The status of the action.
     *
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the targets property: The array of targets.
     *
     * @return the targets value.
     */
    public List<ExperimentExecutionActionTargetDetailsProperties> targets() {
        return this.targets;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targets() != null) {
            targets().forEach(e -> e.validate());
        }
    }
}
