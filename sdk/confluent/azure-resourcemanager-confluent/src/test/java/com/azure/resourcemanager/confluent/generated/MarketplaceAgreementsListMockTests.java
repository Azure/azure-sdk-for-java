// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.confluent.ConfluentManager;
import com.azure.resourcemanager.confluent.models.ConfluentAgreementResource;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class MarketplaceAgreementsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"publisher\":\"obyu\",\"product\":\"rpqlp\",\"plan\":\"cciuqgbdbutau\",\"licenseTextLink\":\"btkuwhh\",\"privacyPolicyLink\":\"ykojoxafnndlpic\",\"retrieveDatetime\":\"2021-09-25T08:27:56Z\",\"signature\":\"mkcdyhbpkkpwdre\",\"accepted\":true},\"id\":\"vvqfovljxyws\",\"name\":\"w\",\"type\":\"yrs\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        ConfluentManager manager = ConfluentManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ConfluentAgreementResource> response
            = manager.marketplaceAgreements().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("obyu", response.iterator().next().publisher());
        Assertions.assertEquals("rpqlp", response.iterator().next().product());
        Assertions.assertEquals("cciuqgbdbutau", response.iterator().next().plan());
        Assertions.assertEquals("btkuwhh", response.iterator().next().licenseTextLink());
        Assertions.assertEquals("ykojoxafnndlpic", response.iterator().next().privacyPolicyLink());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-25T08:27:56Z"),
            response.iterator().next().retrieveDatetime());
        Assertions.assertEquals("mkcdyhbpkkpwdre", response.iterator().next().signature());
        Assertions.assertEquals(true, response.iterator().next().accepted());
    }
}
