// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.confluent.ConfluentManager;
import com.azure.resourcemanager.confluent.models.AccessListClusterSuccessResponse;
import com.azure.resourcemanager.confluent.models.ListAccessRequestModel;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AccessListClustersWithResponseMockTests {
    @Test
    public void testListClustersWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"kind\":\"sx\",\"metadata\":{\"first\":\"msvpkjpr\",\"last\":\"wcfzqljyxgt\",\"prev\":\"heyd\",\"next\":\"dshmkxmaehvbbx\",\"total_size\":870827030},\"data\":[{\"kind\":\"fnhtbaxkgxyw\",\"id\":\"kpyklyhp\",\"metadata\":{\"self\":\"dpvruud\",\"resource_name\":\"zibt\",\"created_at\":\"stgktst\",\"updated_at\":\"xeclzedqbcvhzlhp\",\"deleted_at\":\"dqkdlwwqfbu\"},\"display_name\":\"kxtrq\",\"spec\":{\"display_name\":\"mlmbtxhwgfwsrta\",\"availability\":\"oezbrhubsk\",\"cloud\":\"dyg\",\"zone\":\"okkqfqjbvleo\",\"region\":\"ml\",\"kafka_bootstrap_endpoint\":\"qtqzfavyv\",\"http_endpoint\":\"qybaryeua\",\"api_endpoint\":\"kq\",\"config\":{\"kind\":\"gzslesjcbhernnti\"},\"environment\":{\"id\":\"jcvb\",\"environment\":\"wr\",\"related\":\"hwagohbuffkmrqe\",\"resource_name\":\"vhmxtdrjfu\"},\"network\":{\"id\":\"oe\",\"environment\":\"vewzcj\",\"related\":\"m\",\"resource_name\":\"pmguaadraufac\"},\"byok\":{\"id\":\"hzovaj\",\"related\":\"iuxxpshneekulfg\",\"resource_name\":\"qubkw\"}},\"status\":{\"phase\":\"nrdsutujbazpjuoh\",\"cku\":1097085357}},{\"kind\":\"flnorwmduvwp\",\"id\":\"vxwmygd\",\"metadata\":{\"self\":\"pqchiszep\",\"resource_name\":\"bjcrxgibbdaxco\",\"created_at\":\"ozauorsukokwb\",\"updated_at\":\"lhlv\",\"deleted_at\":\"uepzl\"},\"display_name\":\"hw\",\"spec\":{\"display_name\":\"l\",\"availability\":\"eyuqdunvmnnrwr\",\"cloud\":\"ork\",\"zone\":\"lywjhh\",\"region\":\"nhxmsi\",\"kafka_bootstrap_endpoint\":\"omi\",\"http_endpoint\":\"xggdufi\",\"api_endpoint\":\"dieuzaofj\",\"config\":{\"kind\":\"cyyysfgdot\"},\"environment\":{\"id\":\"iipuipwoqonm\",\"environment\":\"jeknizshq\",\"related\":\"impevf\",\"resource_name\":\"b\"},\"network\":{\"id\":\"ilbywdxsm\",\"environment\":\"cwrwfs\",\"related\":\"fnynszqujizdvoqy\",\"resource_name\":\"byowbblgyavutp\"},\"byok\":{\"id\":\"oxoismsksbpim\",\"related\":\"oljxkcgx\",\"resource_name\":\"xsffgcviz\"}},\"status\":{\"phase\":\"wlvwlyoupf\",\"cku\":1825475274}},{\"kind\":\"jub\",\"id\":\"hgkfmin\",\"metadata\":{\"self\":\"wzf\",\"resource_name\":\"sttktlahbqa\",\"created_at\":\"xtgzukxitmmqtgqq\",\"updated_at\":\"hrnxrxc\",\"deleted_at\":\"uisavokq\"},\"display_name\":\"fvazivjlfrqttba\",\"spec\":{\"display_name\":\"atnwxyiopi\",\"availability\":\"qqfkuv\",\"cloud\":\"xkdmligo\",\"zone\":\"brxk\",\"region\":\"loazuruocbgoo\",\"kafka_bootstrap_endpoint\":\"te\",\"http_endpoint\":\"bfhjxakvvjgsl\",\"api_endpoint\":\"dilmyww\",\"config\":{\"kind\":\"kxn\"},\"environment\":{\"id\":\"abgyvudt\",\"environment\":\"ewbcihxuuw\",\"related\":\"j\",\"resource_name\":\"ccybvp\"},\"network\":{\"id\":\"kkudzp\",\"environment\":\"wjplma\",\"related\":\"tcyohpfkyrk\",\"resource_name\":\"dg\"},\"byok\":{\"id\":\"sjkmnwqj\",\"related\":\"baiyhddviaceg\",\"resource_name\":\"m\"}},\"status\":{\"phase\":\"pmvmemfnczdwvv\",\"cku\":128886656}}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        ConfluentManager manager = ConfluentManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        AccessListClusterSuccessResponse response = manager.access().listClustersWithResponse("jdftuljltd", "ceamtm",
            new ListAccessRequestModel().withSearchFilters(mapOf("ejwcwwqiok", "o")), com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("sx", response.kind());
        Assertions.assertEquals("msvpkjpr", response.metadata().first());
        Assertions.assertEquals("wcfzqljyxgt", response.metadata().last());
        Assertions.assertEquals("heyd", response.metadata().prev());
        Assertions.assertEquals("dshmkxmaehvbbx", response.metadata().next());
        Assertions.assertEquals(870827030, response.metadata().totalSize());
        Assertions.assertEquals("fnhtbaxkgxyw", response.data().get(0).kind());
        Assertions.assertEquals("kpyklyhp", response.data().get(0).id());
        Assertions.assertEquals("dpvruud", response.data().get(0).metadata().self());
        Assertions.assertEquals("zibt", response.data().get(0).metadata().resourceName());
        Assertions.assertEquals("stgktst", response.data().get(0).metadata().createdAt());
        Assertions.assertEquals("xeclzedqbcvhzlhp", response.data().get(0).metadata().updatedAt());
        Assertions.assertEquals("dqkdlwwqfbu", response.data().get(0).metadata().deletedAt());
        Assertions.assertEquals("kxtrq", response.data().get(0).displayName());
        Assertions.assertEquals("mlmbtxhwgfwsrta", response.data().get(0).spec().displayName());
        Assertions.assertEquals("oezbrhubsk", response.data().get(0).spec().availability());
        Assertions.assertEquals("dyg", response.data().get(0).spec().cloud());
        Assertions.assertEquals("okkqfqjbvleo", response.data().get(0).spec().zone());
        Assertions.assertEquals("ml", response.data().get(0).spec().region());
        Assertions.assertEquals("qtqzfavyv", response.data().get(0).spec().kafkaBootstrapEndpoint());
        Assertions.assertEquals("qybaryeua", response.data().get(0).spec().httpEndpoint());
        Assertions.assertEquals("kq", response.data().get(0).spec().apiEndpoint());
        Assertions.assertEquals("gzslesjcbhernnti", response.data().get(0).spec().config().kind());
        Assertions.assertEquals("jcvb", response.data().get(0).spec().environment().id());
        Assertions.assertEquals("wr", response.data().get(0).spec().environment().environment());
        Assertions.assertEquals("hwagohbuffkmrqe", response.data().get(0).spec().environment().related());
        Assertions.assertEquals("vhmxtdrjfu", response.data().get(0).spec().environment().resourceName());
        Assertions.assertEquals("oe", response.data().get(0).spec().network().id());
        Assertions.assertEquals("vewzcj", response.data().get(0).spec().network().environment());
        Assertions.assertEquals("m", response.data().get(0).spec().network().related());
        Assertions.assertEquals("pmguaadraufac", response.data().get(0).spec().network().resourceName());
        Assertions.assertEquals("hzovaj", response.data().get(0).spec().byok().id());
        Assertions.assertEquals("iuxxpshneekulfg", response.data().get(0).spec().byok().related());
        Assertions.assertEquals("qubkw", response.data().get(0).spec().byok().resourceName());
        Assertions.assertEquals("nrdsutujbazpjuoh", response.data().get(0).status().phase());
        Assertions.assertEquals(1097085357, response.data().get(0).status().cku());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
