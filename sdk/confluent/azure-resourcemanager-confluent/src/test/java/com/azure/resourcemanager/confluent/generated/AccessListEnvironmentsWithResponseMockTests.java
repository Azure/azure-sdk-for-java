// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.confluent.ConfluentManager;
import com.azure.resourcemanager.confluent.models.AccessListEnvironmentsSuccessResponse;
import com.azure.resourcemanager.confluent.models.ListAccessRequestModel;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AccessListEnvironmentsWithResponseMockTests {
    @Test
    public void testListEnvironmentsWithResponse() throws Exception {
        String responseStr
            = "{\"kind\":\"tkvnlvxbcuiiznkt\",\"metadata\":{\"first\":\"nsnvpd\",\"last\":\"mik\",\"prev\":\"tbzbkiwbuqnyophz\",\"next\":\"l\",\"total_size\":348954725},\"data\":[{\"kind\":\"bcunezzceze\",\"id\":\"w\",\"metadata\":{\"self\":\"lwxjwetn\",\"resource_name\":\"ihclafzv\",\"created_at\":\"lpt\",\"updated_at\":\"qqwzt\",\"deleted_at\":\"w\"},\"display_name\":\"chcxwaxfewzj\"},{\"kind\":\"exfdeqvhpsylk\",\"id\":\"hkbffmbm\",\"metadata\":{\"self\":\"rgywwp\",\"resource_name\":\"xs\",\"created_at\":\"tf\",\"updated_at\":\"gicgaaoepttaq\",\"deleted_at\":\"dewemxswv\"},\"display_name\":\"unzzjgehk\"},{\"kind\":\"imrt\",\"id\":\"okffqyinljqepqwh\",\"metadata\":{\"self\":\"onsts\",\"resource_name\":\"yxgvelfcld\",\"created_at\":\"cb\",\"updated_at\":\"ds\",\"deleted_at\":\"wcobie\"},\"display_name\":\"tmninw\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ConfluentManager manager = ConfluentManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AccessListEnvironmentsSuccessResponse response = manager.access()
            .listEnvironmentsWithResponse("igkxkbsazga", "gacyrcmjdmspo",
                new ListAccessRequestModel().withSearchFilters(mapOf("frzgbzjed", "vuhrylni")),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("tkvnlvxbcuiiznkt", response.kind());
        Assertions.assertEquals("nsnvpd", response.metadata().first());
        Assertions.assertEquals("mik", response.metadata().last());
        Assertions.assertEquals("tbzbkiwbuqnyophz", response.metadata().prev());
        Assertions.assertEquals("l", response.metadata().next());
        Assertions.assertEquals(348954725, response.metadata().totalSize());
        Assertions.assertEquals("bcunezzceze", response.data().get(0).kind());
        Assertions.assertEquals("w", response.data().get(0).id());
        Assertions.assertEquals("lwxjwetn", response.data().get(0).metadata().self());
        Assertions.assertEquals("ihclafzv", response.data().get(0).metadata().resourceName());
        Assertions.assertEquals("lpt", response.data().get(0).metadata().createdAt());
        Assertions.assertEquals("qqwzt", response.data().get(0).metadata().updatedAt());
        Assertions.assertEquals("w", response.data().get(0).metadata().deletedAt());
        Assertions.assertEquals("chcxwaxfewzj", response.data().get(0).displayName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
