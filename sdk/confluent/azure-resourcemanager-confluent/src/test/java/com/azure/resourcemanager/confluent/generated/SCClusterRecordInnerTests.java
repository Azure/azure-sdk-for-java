// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.confluent.fluent.models.SCClusterRecordInner;
import com.azure.resourcemanager.confluent.models.ClusterConfigEntity;
import com.azure.resourcemanager.confluent.models.ClusterStatusEntity;
import com.azure.resourcemanager.confluent.models.SCClusterByokEntity;
import com.azure.resourcemanager.confluent.models.SCClusterNetworkEnvironmentEntity;
import com.azure.resourcemanager.confluent.models.SCClusterSpecEntity;
import com.azure.resourcemanager.confluent.models.SCMetadataEntity;
import org.junit.jupiter.api.Assertions;

public final class SCClusterRecordInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SCClusterRecordInner model = BinaryData.fromString(
            "{\"kind\":\"mnguxawqaldsyu\",\"id\":\"imerqfobwyznk\",\"properties\":{\"metadata\":{\"self\":\"t\",\"resourceName\":\"fhpagmhrskdsnf\",\"createdTimestamp\":\"doakgtdlmkkzevdl\",\"updatedTimestamp\":\"wpusdsttwvogv\",\"deletedTimestamp\":\"ejdcngqqmoakuf\"},\"spec\":{\"name\":\"zr\",\"availability\":\"dgrtwaenuuzkopbm\",\"cloud\":\"rfdwoyu\",\"zone\":\"ziuiefozbhdm\",\"region\":\"l\",\"kafkaBootstrapEndpoint\":\"qhoftrmaequiah\",\"httpEndpoint\":\"cslfaoqzpiyylha\",\"apiEndpoint\":\"swhccsphk\",\"config\":{\"kind\":\"witqscywuggwoluh\"},\"environment\":{\"id\":\"wem\",\"environment\":\"i\",\"related\":\"brgz\",\"resourceName\":\"msweypqwdxggicc\"},\"network\":{\"id\":\"qhuexm\",\"environment\":\"tlstvlzywem\",\"related\":\"rncsdtclu\",\"resourceName\":\"ypbsfgytguslfead\"},\"byok\":{\"id\":\"qukyhejhzi\",\"related\":\"gfpelolppvksrpqv\",\"resourceName\":\"zraehtwd\"}},\"status\":{\"phase\":\"tswiby\",\"cku\":403427600}},\"name\":\"bhshfwpracstwity\"}")
            .toObject(SCClusterRecordInner.class);
        Assertions.assertEquals("mnguxawqaldsyu", model.kind());
        Assertions.assertEquals("imerqfobwyznk", model.id());
        Assertions.assertEquals("bhshfwpracstwity", model.name());
        Assertions.assertEquals("t", model.metadata().self());
        Assertions.assertEquals("fhpagmhrskdsnf", model.metadata().resourceName());
        Assertions.assertEquals("doakgtdlmkkzevdl", model.metadata().createdTimestamp());
        Assertions.assertEquals("wpusdsttwvogv", model.metadata().updatedTimestamp());
        Assertions.assertEquals("ejdcngqqmoakuf", model.metadata().deletedTimestamp());
        Assertions.assertEquals("zr", model.spec().name());
        Assertions.assertEquals("dgrtwaenuuzkopbm", model.spec().availability());
        Assertions.assertEquals("rfdwoyu", model.spec().cloud());
        Assertions.assertEquals("ziuiefozbhdm", model.spec().zone());
        Assertions.assertEquals("l", model.spec().region());
        Assertions.assertEquals("qhoftrmaequiah", model.spec().kafkaBootstrapEndpoint());
        Assertions.assertEquals("cslfaoqzpiyylha", model.spec().httpEndpoint());
        Assertions.assertEquals("swhccsphk", model.spec().apiEndpoint());
        Assertions.assertEquals("witqscywuggwoluh", model.spec().config().kind());
        Assertions.assertEquals("wem", model.spec().environment().id());
        Assertions.assertEquals("i", model.spec().environment().environment());
        Assertions.assertEquals("brgz", model.spec().environment().related());
        Assertions.assertEquals("msweypqwdxggicc", model.spec().environment().resourceName());
        Assertions.assertEquals("qhuexm", model.spec().network().id());
        Assertions.assertEquals("tlstvlzywem", model.spec().network().environment());
        Assertions.assertEquals("rncsdtclu", model.spec().network().related());
        Assertions.assertEquals("ypbsfgytguslfead", model.spec().network().resourceName());
        Assertions.assertEquals("qukyhejhzi", model.spec().byok().id());
        Assertions.assertEquals("gfpelolppvksrpqv", model.spec().byok().related());
        Assertions.assertEquals("zraehtwd", model.spec().byok().resourceName());
        Assertions.assertEquals("tswiby", model.status().phase());
        Assertions.assertEquals(403427600, model.status().cku());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SCClusterRecordInner model
            = new SCClusterRecordInner().withKind("mnguxawqaldsyu").withId("imerqfobwyznk").withName("bhshfwpracstwity")
                .withMetadata(new SCMetadataEntity().withSelf("t").withResourceName("fhpagmhrskdsnf")
                    .withCreatedTimestamp("doakgtdlmkkzevdl").withUpdatedTimestamp("wpusdsttwvogv")
                    .withDeletedTimestamp("ejdcngqqmoakuf"))
                .withSpec(new SCClusterSpecEntity().withName("zr").withAvailability("dgrtwaenuuzkopbm")
                    .withCloud("rfdwoyu").withZone("ziuiefozbhdm").withRegion("l")
                    .withKafkaBootstrapEndpoint("qhoftrmaequiah").withHttpEndpoint("cslfaoqzpiyylha")
                    .withApiEndpoint("swhccsphk").withConfig(new ClusterConfigEntity().withKind("witqscywuggwoluh"))
                    .withEnvironment(new SCClusterNetworkEnvironmentEntity().withId("wem").withEnvironment("i")
                        .withRelated("brgz").withResourceName("msweypqwdxggicc"))
                    .withNetwork(new SCClusterNetworkEnvironmentEntity().withId("qhuexm").withEnvironment("tlstvlzywem")
                        .withRelated("rncsdtclu").withResourceName("ypbsfgytguslfead"))
                    .withByok(new SCClusterByokEntity().withId("qukyhejhzi").withRelated("gfpelolppvksrpqv")
                        .withResourceName("zraehtwd")))
                .withStatus(new ClusterStatusEntity().withPhase("tswiby").withCku(403427600));
        model = BinaryData.fromObject(model).toObject(SCClusterRecordInner.class);
        Assertions.assertEquals("mnguxawqaldsyu", model.kind());
        Assertions.assertEquals("imerqfobwyznk", model.id());
        Assertions.assertEquals("bhshfwpracstwity", model.name());
        Assertions.assertEquals("t", model.metadata().self());
        Assertions.assertEquals("fhpagmhrskdsnf", model.metadata().resourceName());
        Assertions.assertEquals("doakgtdlmkkzevdl", model.metadata().createdTimestamp());
        Assertions.assertEquals("wpusdsttwvogv", model.metadata().updatedTimestamp());
        Assertions.assertEquals("ejdcngqqmoakuf", model.metadata().deletedTimestamp());
        Assertions.assertEquals("zr", model.spec().name());
        Assertions.assertEquals("dgrtwaenuuzkopbm", model.spec().availability());
        Assertions.assertEquals("rfdwoyu", model.spec().cloud());
        Assertions.assertEquals("ziuiefozbhdm", model.spec().zone());
        Assertions.assertEquals("l", model.spec().region());
        Assertions.assertEquals("qhoftrmaequiah", model.spec().kafkaBootstrapEndpoint());
        Assertions.assertEquals("cslfaoqzpiyylha", model.spec().httpEndpoint());
        Assertions.assertEquals("swhccsphk", model.spec().apiEndpoint());
        Assertions.assertEquals("witqscywuggwoluh", model.spec().config().kind());
        Assertions.assertEquals("wem", model.spec().environment().id());
        Assertions.assertEquals("i", model.spec().environment().environment());
        Assertions.assertEquals("brgz", model.spec().environment().related());
        Assertions.assertEquals("msweypqwdxggicc", model.spec().environment().resourceName());
        Assertions.assertEquals("qhuexm", model.spec().network().id());
        Assertions.assertEquals("tlstvlzywem", model.spec().network().environment());
        Assertions.assertEquals("rncsdtclu", model.spec().network().related());
        Assertions.assertEquals("ypbsfgytguslfead", model.spec().network().resourceName());
        Assertions.assertEquals("qukyhejhzi", model.spec().byok().id());
        Assertions.assertEquals("gfpelolppvksrpqv", model.spec().byok().related());
        Assertions.assertEquals("zraehtwd", model.spec().byok().resourceName());
        Assertions.assertEquals("tswiby", model.status().phase());
        Assertions.assertEquals(403427600, model.status().cku());
    }
}
