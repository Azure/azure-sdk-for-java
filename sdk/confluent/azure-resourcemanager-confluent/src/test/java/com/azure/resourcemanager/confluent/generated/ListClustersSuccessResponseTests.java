// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.confluent.fluent.models.SCClusterRecordInner;
import com.azure.resourcemanager.confluent.models.ClusterConfigEntity;
import com.azure.resourcemanager.confluent.models.ClusterStatusEntity;
import com.azure.resourcemanager.confluent.models.ListClustersSuccessResponse;
import com.azure.resourcemanager.confluent.models.SCClusterByokEntity;
import com.azure.resourcemanager.confluent.models.SCClusterNetworkEnvironmentEntity;
import com.azure.resourcemanager.confluent.models.SCClusterSpecEntity;
import com.azure.resourcemanager.confluent.models.SCMetadataEntity;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ListClustersSuccessResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ListClustersSuccessResponse model = BinaryData.fromString(
            "{\"value\":[{\"kind\":\"mtdaa\",\"id\":\"dvwvgpio\",\"properties\":{\"metadata\":{\"self\":\"rtfudxepxg\",\"resourceName\":\"agvrvmnpkuk\",\"createdTimestamp\":\"i\",\"updatedTimestamp\":\"blxgwimf\",\"deletedTimestamp\":\"hfjx\"},\"spec\":{\"name\":\"zk\",\"availability\":\"oqreyfkzikfjawn\",\"cloud\":\"ivx\",\"zone\":\"zel\",\"region\":\"irels\",\"kafkaBootstrapEndpoint\":\"aenwabf\",\"httpEndpoint\":\"kl\",\"apiEndpoint\":\"xbjhwuaanozjosph\",\"config\":{\"kind\":\"l\"},\"environment\":{\"id\":\"v\",\"environment\":\"glrvimjwosytxi\",\"related\":\"skfc\",\"resourceName\":\"qumiek\"},\"network\":{\"id\":\"zikhl\",\"environment\":\"jhdgqggebdunyga\",\"related\":\"idb\",\"resourceName\":\"atpxl\"},\"byok\":{\"id\":\"cyjmoadsuvarmy\",\"related\":\"mjsjqb\",\"resourceName\":\"hyxxrwlycoduhpk\"}},\"status\":{\"phase\":\"ymareqnajxqugj\",\"cku\":123081657}},\"name\":\"ubeddg\"},{\"kind\":\"ofwq\",\"id\":\"qal\",\"properties\":{\"metadata\":{\"self\":\"jijpxac\",\"resourceName\":\"udfnbyxba\",\"createdTimestamp\":\"bjyvay\",\"updatedTimestamp\":\"imrzrtuzqog\",\"deletedTimestamp\":\"xnevfdnwn\"},\"spec\":{\"name\":\"wzsyyceuzs\",\"availability\":\"bjudpfrxtrthzv\",\"cloud\":\"tdwkqbrq\",\"zone\":\"paxh\",\"region\":\"iilivpdtiirqtd\",\"kafkaBootstrapEndpoint\":\"axoruzfgsquy\",\"httpEndpoint\":\"rxxle\",\"apiEndpoint\":\"ramxjezwlwnw\",\"config\":{\"kind\":\"lcvydy\"},\"environment\":{\"id\":\"dooaojkniodko\",\"environment\":\"bw\",\"related\":\"jhemms\",\"resourceName\":\"dkcrodt\"},\"network\":{\"id\":\"fw\",\"environment\":\"fltkacjv\",\"related\":\"kdlfoa\",\"resourceName\":\"gkfpaga\"},\"byok\":{\"id\":\"ulpqblylsyxkqjn\",\"related\":\"ervtiagxs\",\"resourceName\":\"zuempsbzkf\"}},\"status\":{\"phase\":\"yvpnqicvinvkjj\",\"cku\":602936654}},\"name\":\"buukzclewyhml\"},{\"kind\":\"aztz\",\"id\":\"fn\",\"properties\":{\"metadata\":{\"self\":\"yfzqwhxxbu\",\"resourceName\":\"a\",\"createdTimestamp\":\"feqztppriol\",\"updatedTimestamp\":\"rjaltolmncw\",\"deletedTimestamp\":\"bqwcsdbnwdcf\"},\"spec\":{\"name\":\"qdpfuvglsbjjca\",\"availability\":\"xbvtvudu\",\"cloud\":\"cormr\",\"zone\":\"qtvcofudflvkgj\",\"region\":\"gdknnqv\",\"kafkaBootstrapEndpoint\":\"znqntoru\",\"httpEndpoint\":\"gsahmkycgrauw\",\"apiEndpoint\":\"etaebu\",\"config\":{\"kind\":\"dmovsm\"},\"environment\":{\"id\":\"wabm\",\"environment\":\"efkifr\",\"related\":\"puqujmqlgkfbtn\",\"resourceName\":\"aongbj\"},\"network\":{\"id\":\"ujitcjedftww\",\"environment\":\"zkoj\",\"related\":\"c\",\"resourceName\":\"foqouicybx\"},\"byok\":{\"id\":\"gszufoxciqopid\",\"related\":\"mciodhkhazxkhn\",\"resourceName\":\"onlwntoeg\"}},\"status\":{\"phase\":\"wbw\",\"cku\":924333329}},\"name\":\"zcmrvexztvb\"}],\"nextLink\":\"gsfraoyzkoow\"}")
            .toObject(ListClustersSuccessResponse.class);
        Assertions.assertEquals("mtdaa", model.value().get(0).kind());
        Assertions.assertEquals("dvwvgpio", model.value().get(0).id());
        Assertions.assertEquals("ubeddg", model.value().get(0).name());
        Assertions.assertEquals("rtfudxepxg", model.value().get(0).metadata().self());
        Assertions.assertEquals("agvrvmnpkuk", model.value().get(0).metadata().resourceName());
        Assertions.assertEquals("i", model.value().get(0).metadata().createdTimestamp());
        Assertions.assertEquals("blxgwimf", model.value().get(0).metadata().updatedTimestamp());
        Assertions.assertEquals("hfjx", model.value().get(0).metadata().deletedTimestamp());
        Assertions.assertEquals("zk", model.value().get(0).spec().name());
        Assertions.assertEquals("oqreyfkzikfjawn", model.value().get(0).spec().availability());
        Assertions.assertEquals("ivx", model.value().get(0).spec().cloud());
        Assertions.assertEquals("zel", model.value().get(0).spec().zone());
        Assertions.assertEquals("irels", model.value().get(0).spec().region());
        Assertions.assertEquals("aenwabf", model.value().get(0).spec().kafkaBootstrapEndpoint());
        Assertions.assertEquals("kl", model.value().get(0).spec().httpEndpoint());
        Assertions.assertEquals("xbjhwuaanozjosph", model.value().get(0).spec().apiEndpoint());
        Assertions.assertEquals("l", model.value().get(0).spec().config().kind());
        Assertions.assertEquals("v", model.value().get(0).spec().environment().id());
        Assertions.assertEquals("glrvimjwosytxi", model.value().get(0).spec().environment().environment());
        Assertions.assertEquals("skfc", model.value().get(0).spec().environment().related());
        Assertions.assertEquals("qumiek", model.value().get(0).spec().environment().resourceName());
        Assertions.assertEquals("zikhl", model.value().get(0).spec().network().id());
        Assertions.assertEquals("jhdgqggebdunyga", model.value().get(0).spec().network().environment());
        Assertions.assertEquals("idb", model.value().get(0).spec().network().related());
        Assertions.assertEquals("atpxl", model.value().get(0).spec().network().resourceName());
        Assertions.assertEquals("cyjmoadsuvarmy", model.value().get(0).spec().byok().id());
        Assertions.assertEquals("mjsjqb", model.value().get(0).spec().byok().related());
        Assertions.assertEquals("hyxxrwlycoduhpk", model.value().get(0).spec().byok().resourceName());
        Assertions.assertEquals("ymareqnajxqugj", model.value().get(0).status().phase());
        Assertions.assertEquals(123081657, model.value().get(0).status().cku());
        Assertions.assertEquals("gsfraoyzkoow", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ListClustersSuccessResponse model = new ListClustersSuccessResponse()
            .withValue(Arrays.asList(
                new SCClusterRecordInner().withKind("mtdaa").withId("dvwvgpio").withName("ubeddg")
                    .withMetadata(new SCMetadataEntity().withSelf("rtfudxepxg").withResourceName("agvrvmnpkuk")
                        .withCreatedTimestamp("i").withUpdatedTimestamp("blxgwimf").withDeletedTimestamp("hfjx"))
                    .withSpec(new SCClusterSpecEntity().withName("zk").withAvailability("oqreyfkzikfjawn")
                        .withCloud("ivx").withZone("zel").withRegion("irels").withKafkaBootstrapEndpoint("aenwabf")
                        .withHttpEndpoint("kl").withApiEndpoint("xbjhwuaanozjosph")
                        .withConfig(new ClusterConfigEntity().withKind("l"))
                        .withEnvironment(new SCClusterNetworkEnvironmentEntity().withId("v")
                            .withEnvironment("glrvimjwosytxi").withRelated("skfc").withResourceName("qumiek"))
                        .withNetwork(new SCClusterNetworkEnvironmentEntity().withId("zikhl")
                            .withEnvironment("jhdgqggebdunyga").withRelated("idb").withResourceName("atpxl"))
                        .withByok(new SCClusterByokEntity().withId("cyjmoadsuvarmy").withRelated("mjsjqb")
                            .withResourceName("hyxxrwlycoduhpk")))
                    .withStatus(new ClusterStatusEntity().withPhase("ymareqnajxqugj").withCku(123081657)),
                new SCClusterRecordInner().withKind("ofwq").withId("qal").withName("buukzclewyhml")
                    .withMetadata(new SCMetadataEntity().withSelf("jijpxac").withResourceName("udfnbyxba")
                        .withCreatedTimestamp("bjyvay").withUpdatedTimestamp("imrzrtuzqog")
                        .withDeletedTimestamp("xnevfdnwn"))
                    .withSpec(new SCClusterSpecEntity().withName("wzsyyceuzs").withAvailability("bjudpfrxtrthzv")
                        .withCloud("tdwkqbrq").withZone("paxh").withRegion("iilivpdtiirqtd")
                        .withKafkaBootstrapEndpoint("axoruzfgsquy").withHttpEndpoint("rxxle")
                        .withApiEndpoint("ramxjezwlwnw").withConfig(new ClusterConfigEntity().withKind("lcvydy"))
                        .withEnvironment(new SCClusterNetworkEnvironmentEntity().withId("dooaojkniodko")
                            .withEnvironment("bw").withRelated("jhemms").withResourceName("dkcrodt"))
                        .withNetwork(new SCClusterNetworkEnvironmentEntity().withId("fw").withEnvironment("fltkacjv")
                            .withRelated("kdlfoa").withResourceName("gkfpaga"))
                        .withByok(new SCClusterByokEntity().withId("ulpqblylsyxkqjn").withRelated("ervtiagxs")
                            .withResourceName("zuempsbzkf")))
                    .withStatus(new ClusterStatusEntity().withPhase("yvpnqicvinvkjj").withCku(602936654)),
                new SCClusterRecordInner().withKind("aztz").withId("fn").withName("zcmrvexztvb")
                    .withMetadata(new SCMetadataEntity().withSelf("yfzqwhxxbu").withResourceName("a")
                        .withCreatedTimestamp("feqztppriol").withUpdatedTimestamp("rjaltolmncw")
                        .withDeletedTimestamp("bqwcsdbnwdcf"))
                    .withSpec(new SCClusterSpecEntity().withName("qdpfuvglsbjjca").withAvailability("xbvtvudu")
                        .withCloud("cormr").withZone("qtvcofudflvkgj").withRegion("gdknnqv")
                        .withKafkaBootstrapEndpoint("znqntoru").withHttpEndpoint("gsahmkycgrauw")
                        .withApiEndpoint("etaebu").withConfig(new ClusterConfigEntity().withKind("dmovsm"))
                        .withEnvironment(new SCClusterNetworkEnvironmentEntity().withId("wabm")
                            .withEnvironment("efkifr").withRelated("puqujmqlgkfbtn").withResourceName("aongbj"))
                        .withNetwork(new SCClusterNetworkEnvironmentEntity().withId("ujitcjedftww")
                            .withEnvironment("zkoj").withRelated("c").withResourceName("foqouicybx"))
                        .withByok(new SCClusterByokEntity().withId("gszufoxciqopid").withRelated("mciodhkhazxkhn")
                            .withResourceName("onlwntoeg")))
                    .withStatus(new ClusterStatusEntity().withPhase("wbw").withCku(924333329))))
            .withNextLink("gsfraoyzkoow");
        model = BinaryData.fromObject(model).toObject(ListClustersSuccessResponse.class);
        Assertions.assertEquals("mtdaa", model.value().get(0).kind());
        Assertions.assertEquals("dvwvgpio", model.value().get(0).id());
        Assertions.assertEquals("ubeddg", model.value().get(0).name());
        Assertions.assertEquals("rtfudxepxg", model.value().get(0).metadata().self());
        Assertions.assertEquals("agvrvmnpkuk", model.value().get(0).metadata().resourceName());
        Assertions.assertEquals("i", model.value().get(0).metadata().createdTimestamp());
        Assertions.assertEquals("blxgwimf", model.value().get(0).metadata().updatedTimestamp());
        Assertions.assertEquals("hfjx", model.value().get(0).metadata().deletedTimestamp());
        Assertions.assertEquals("zk", model.value().get(0).spec().name());
        Assertions.assertEquals("oqreyfkzikfjawn", model.value().get(0).spec().availability());
        Assertions.assertEquals("ivx", model.value().get(0).spec().cloud());
        Assertions.assertEquals("zel", model.value().get(0).spec().zone());
        Assertions.assertEquals("irels", model.value().get(0).spec().region());
        Assertions.assertEquals("aenwabf", model.value().get(0).spec().kafkaBootstrapEndpoint());
        Assertions.assertEquals("kl", model.value().get(0).spec().httpEndpoint());
        Assertions.assertEquals("xbjhwuaanozjosph", model.value().get(0).spec().apiEndpoint());
        Assertions.assertEquals("l", model.value().get(0).spec().config().kind());
        Assertions.assertEquals("v", model.value().get(0).spec().environment().id());
        Assertions.assertEquals("glrvimjwosytxi", model.value().get(0).spec().environment().environment());
        Assertions.assertEquals("skfc", model.value().get(0).spec().environment().related());
        Assertions.assertEquals("qumiek", model.value().get(0).spec().environment().resourceName());
        Assertions.assertEquals("zikhl", model.value().get(0).spec().network().id());
        Assertions.assertEquals("jhdgqggebdunyga", model.value().get(0).spec().network().environment());
        Assertions.assertEquals("idb", model.value().get(0).spec().network().related());
        Assertions.assertEquals("atpxl", model.value().get(0).spec().network().resourceName());
        Assertions.assertEquals("cyjmoadsuvarmy", model.value().get(0).spec().byok().id());
        Assertions.assertEquals("mjsjqb", model.value().get(0).spec().byok().related());
        Assertions.assertEquals("hyxxrwlycoduhpk", model.value().get(0).spec().byok().resourceName());
        Assertions.assertEquals("ymareqnajxqugj", model.value().get(0).status().phase());
        Assertions.assertEquals(123081657, model.value().get(0).status().cku());
        Assertions.assertEquals("gsfraoyzkoow", model.nextLink());
    }
}
