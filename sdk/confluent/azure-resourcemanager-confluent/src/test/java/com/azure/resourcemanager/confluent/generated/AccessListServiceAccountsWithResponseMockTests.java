// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.confluent.ConfluentManager;
import com.azure.resourcemanager.confluent.models.AccessListServiceAccountsSuccessResponse;
import com.azure.resourcemanager.confluent.models.ListAccessRequestModel;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AccessListServiceAccountsWithResponseMockTests {
    @Test
    public void testListServiceAccountsWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"kind\":\"phqamvdkfwynwcvt\",\"metadata\":{\"first\":\"ayhmtnvyqiatkz\",\"last\":\"cnpwzcjaesgvvscc\",\"prev\":\"jguq\",\"next\":\"wygzlvdnkfxusem\",\"total_size\":1095077901},\"data\":[{\"kind\":\"hapfcqdpsqx\",\"id\":\"psvuoymgc\",\"metadata\":{\"self\":\"vezrypqlmfeo\",\"resource_name\":\"rqwky\",\"created_at\":\"ob\",\"updated_at\":\"gxedkow\",\"deleted_at\":\"bqpc\"},\"display_name\":\"kbwcc\",\"description\":\"jvcdwxlpqekf\"},{\"kind\":\"khtj\",\"id\":\"i\",\"metadata\":{\"self\":\"fq\",\"resource_name\":\"mtdh\",\"created_at\":\"dvypgikdgsz\",\"updated_at\":\"kbir\",\"deleted_at\":\"uzhlhkjoqrv\"},\"display_name\":\"aatjinrvgoupmfi\",\"description\":\"fggjioolvr\"},{\"kind\":\"kvtkkg\",\"id\":\"qwjygvja\",\"metadata\":{\"self\":\"lmhvkzuhbxv\",\"resource_name\":\"hgsopbyrqufegx\",\"created_at\":\"wz\",\"updated_at\":\"nhlmctlpdng\",\"deleted_at\":\"vgbmhr\"},\"display_name\":\"kw\",\"description\":\"ijejvegrhbpn\"},{\"kind\":\"xexccbdreaxhcexd\",\"id\":\"vqahqkghtpwi\",\"metadata\":{\"self\":\"yjsvfyc\",\"resource_name\":\"bfvoowvrv\",\"created_at\":\"gjqppy\",\"updated_at\":\"tronzmyhgfi\",\"deleted_at\":\"sxkm\"},\"display_name\":\"a\",\"description\":\"rrjreafxtsgu\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        ConfluentManager manager = ConfluentManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        AccessListServiceAccountsSuccessResponse response = manager.access()
            .listServiceAccountsWithResponse(
                "dvriiiojnal", "hfkvtvsexsowuel", new ListAccessRequestModel().withSearchFilters(mapOf("wws",
                    "hahhxvrhmzkwpj", "qxujxukndxd", "ughftqsx", "syqtfi", "grjguufzd", "phoszqz", "whbotzingamv")),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("phqamvdkfwynwcvt", response.kind());
        Assertions.assertEquals("ayhmtnvyqiatkz", response.metadata().first());
        Assertions.assertEquals("cnpwzcjaesgvvscc", response.metadata().last());
        Assertions.assertEquals("jguq", response.metadata().prev());
        Assertions.assertEquals("wygzlvdnkfxusem", response.metadata().next());
        Assertions.assertEquals(1095077901, response.metadata().totalSize());
        Assertions.assertEquals("hapfcqdpsqx", response.data().get(0).kind());
        Assertions.assertEquals("psvuoymgc", response.data().get(0).id());
        Assertions.assertEquals("vezrypqlmfeo", response.data().get(0).metadata().self());
        Assertions.assertEquals("rqwky", response.data().get(0).metadata().resourceName());
        Assertions.assertEquals("ob", response.data().get(0).metadata().createdAt());
        Assertions.assertEquals("gxedkow", response.data().get(0).metadata().updatedAt());
        Assertions.assertEquals("bqpc", response.data().get(0).metadata().deletedAt());
        Assertions.assertEquals("kbwcc", response.data().get(0).displayName());
        Assertions.assertEquals("jvcdwxlpqekf", response.data().get(0).description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
