// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.confluent.fluent.models.AccessListClusterSuccessResponseInner;
import com.azure.resourcemanager.confluent.models.ClusterByokEntity;
import com.azure.resourcemanager.confluent.models.ClusterConfigEntity;
import com.azure.resourcemanager.confluent.models.ClusterEnvironmentEntity;
import com.azure.resourcemanager.confluent.models.ClusterNetworkEntity;
import com.azure.resourcemanager.confluent.models.ClusterRecord;
import com.azure.resourcemanager.confluent.models.ClusterSpecEntity;
import com.azure.resourcemanager.confluent.models.ClusterStatusEntity;
import com.azure.resourcemanager.confluent.models.ConfluentListMetadata;
import com.azure.resourcemanager.confluent.models.MetadataEntity;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AccessListClusterSuccessResponseInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AccessListClusterSuccessResponseInner model = BinaryData.fromString(
            "{\"kind\":\"ebf\",\"metadata\":{\"first\":\"rbu\",\"last\":\"cvpnazzmhjrunmpx\",\"prev\":\"dbhrbnlankxm\",\"next\":\"k\",\"total_size\":1438226066},\"data\":[{\"kind\":\"tkcxywnytnrsy\",\"id\":\"qidybyx\",\"metadata\":{\"self\":\"clha\",\"resource_name\":\"dbabp\",\"created_at\":\"wrqlfktsthsuco\",\"updated_at\":\"nyyazttbtwwrqpue\",\"deleted_at\":\"kzywbiex\"},\"display_name\":\"eyueaxibxujwb\",\"spec\":{\"display_name\":\"almuzyoxaepdkzja\",\"availability\":\"ux\",\"cloud\":\"d\",\"zone\":\"avxbniwdjswztsdb\",\"region\":\"nxytxh\",\"kafka_bootstrap_endpoint\":\"xbzpfzab\",\"http_endpoint\":\"cuh\",\"api_endpoint\":\"tcty\",\"config\":{\"kind\":\"lbbovplw\"},\"environment\":{\"id\":\"vgyuguos\",\"environment\":\"kfssxqukkf\",\"related\":\"gmgsxnkjzkde\",\"resource_name\":\"pvlopwiyighxpkd\"},\"network\":{\"id\":\"aiuebbaumnyqu\",\"environment\":\"deoj\",\"related\":\"bckhsmtxpsi\",\"resource_name\":\"tfhvpesapskrdqmh\"},\"byok\":{\"id\":\"htldwk\",\"related\":\"xuutkncwscwsv\",\"resource_name\":\"otogtwrupqs\"}},\"status\":{\"phase\":\"micykvceoveilo\",\"cku\":660644635}},{\"kind\":\"yfjfcnjbkcn\",\"id\":\"hbttkphyw\",\"metadata\":{\"self\":\"jtoqne\",\"resource_name\":\"clfp\",\"created_at\":\"hoxus\",\"updated_at\":\"pabgyeps\",\"deleted_at\":\"tazqugxywpmueefj\"},\"display_name\":\"fqkquj\",\"spec\":{\"display_name\":\"uyonobglaoc\",\"availability\":\"tcc\",\"cloud\":\"yudxytlmoy\",\"zone\":\"vwfudwpzntxhd\",\"region\":\"lrqjbhckfr\",\"kafka_bootstrap_endpoint\":\"rxsbkyvp\",\"http_endpoint\":\"anuzbpzkafkuw\",\"api_endpoint\":\"rnwb\",\"config\":{\"kind\":\"hseyvju\"},\"environment\":{\"id\":\"slhs\",\"environment\":\"deemao\",\"related\":\"xagkvtmelmqkrh\",\"resource_name\":\"vljua\"},\"network\":{\"id\":\"uhcdhm\",\"environment\":\"alaexqpvfadmwsrc\",\"related\":\"vxpvgomz\",\"resource_name\":\"misgwbnb\"},\"byok\":{\"id\":\"dawkzbali\",\"related\":\"rqhakauha\",\"resource_name\":\"sfwxosowzxc\"}},\"status\":{\"phase\":\"cjooxdjebwpucwwf\",\"cku\":1446689376}},{\"kind\":\"vmeueci\",\"id\":\"hzceuojgjrwjue\",\"metadata\":{\"self\":\"wmcdytdxwi\",\"resource_name\":\"nrjawgqwg\",\"created_at\":\"ni\",\"updated_at\":\"x\",\"deleted_at\":\"kpycgklwndnhjd\"},\"display_name\":\"whvylw\",\"spec\":{\"display_name\":\"dhxujznbmpo\",\"availability\":\"wpr\",\"cloud\":\"lve\",\"zone\":\"lupj\",\"region\":\"hfxobbcswsrtj\",\"kafka_bootstrap_endpoint\":\"plrbpbewtghf\",\"http_endpoint\":\"lcgwxzvlvqh\",\"api_endpoint\":\"begibtnmxiebwwa\",\"config\":{\"kind\":\"yqcgwrtzjuzgwy\"},\"environment\":{\"id\":\"txon\",\"environment\":\"ts\",\"related\":\"jcbpwxqpsrknft\",\"resource_name\":\"vriuhprwmdyvx\"},\"network\":{\"id\":\"yriwwroyqb\",\"environment\":\"rmcqiby\",\"related\":\"ojvknmefqsgzvaha\",\"resource_name\":\"y\"},\"byok\":{\"id\":\"vgqzcjrvxd\",\"related\":\"lmwlxkvugfhzo\",\"resource_name\":\"wjvzunluthnn\"}},\"status\":{\"phase\":\"xipeilpjzuaejx\",\"cku\":122222845}},{\"kind\":\"skzbb\",\"id\":\"zumveekgpwo\",\"metadata\":{\"self\":\"kfpbs\",\"resource_name\":\"ofd\",\"created_at\":\"uusdttouwa\",\"updated_at\":\"ekqvkeln\",\"deleted_at\":\"vbxwyjsflhh\"},\"display_name\":\"aln\",\"spec\":{\"display_name\":\"isxyawjoyaqcslyj\",\"availability\":\"iidzyexzne\",\"cloud\":\"xhnrztfolhb\",\"zone\":\"knalaulppg\",\"region\":\"tpnapnyiropuhpig\",\"kafka_bootstrap_endpoint\":\"gylgqgitxmedjvcs\",\"http_endpoint\":\"n\",\"api_endpoint\":\"wncwzzhxgktrmg\",\"config\":{\"kind\":\"apkteoellwptfdyg\"},\"environment\":{\"id\":\"b\",\"environment\":\"ceopzfqrhhuaopp\",\"related\":\"qeqxo\",\"resource_name\":\"dahzxctobg\"},\"network\":{\"id\":\"moizpos\",\"environment\":\"grcfb\",\"related\":\"rmfqjhhkxbpvj\",\"resource_name\":\"jhxxjyn\"},\"byok\":{\"id\":\"ivkrtsw\",\"related\":\"qzvszjf\",\"resource_name\":\"vjfdx\"}},\"status\":{\"phase\":\"e\",\"cku\":43385515}}]}")
            .toObject(AccessListClusterSuccessResponseInner.class);
        Assertions.assertEquals("ebf", model.kind());
        Assertions.assertEquals("rbu", model.metadata().first());
        Assertions.assertEquals("cvpnazzmhjrunmpx", model.metadata().last());
        Assertions.assertEquals("dbhrbnlankxm", model.metadata().prev());
        Assertions.assertEquals("k", model.metadata().next());
        Assertions.assertEquals(1438226066, model.metadata().totalSize());
        Assertions.assertEquals("tkcxywnytnrsy", model.data().get(0).kind());
        Assertions.assertEquals("qidybyx", model.data().get(0).id());
        Assertions.assertEquals("clha", model.data().get(0).metadata().self());
        Assertions.assertEquals("dbabp", model.data().get(0).metadata().resourceName());
        Assertions.assertEquals("wrqlfktsthsuco", model.data().get(0).metadata().createdAt());
        Assertions.assertEquals("nyyazttbtwwrqpue", model.data().get(0).metadata().updatedAt());
        Assertions.assertEquals("kzywbiex", model.data().get(0).metadata().deletedAt());
        Assertions.assertEquals("eyueaxibxujwb", model.data().get(0).displayName());
        Assertions.assertEquals("almuzyoxaepdkzja", model.data().get(0).spec().displayName());
        Assertions.assertEquals("ux", model.data().get(0).spec().availability());
        Assertions.assertEquals("d", model.data().get(0).spec().cloud());
        Assertions.assertEquals("avxbniwdjswztsdb", model.data().get(0).spec().zone());
        Assertions.assertEquals("nxytxh", model.data().get(0).spec().region());
        Assertions.assertEquals("xbzpfzab", model.data().get(0).spec().kafkaBootstrapEndpoint());
        Assertions.assertEquals("cuh", model.data().get(0).spec().httpEndpoint());
        Assertions.assertEquals("tcty", model.data().get(0).spec().apiEndpoint());
        Assertions.assertEquals("lbbovplw", model.data().get(0).spec().config().kind());
        Assertions.assertEquals("vgyuguos", model.data().get(0).spec().environment().id());
        Assertions.assertEquals("kfssxqukkf", model.data().get(0).spec().environment().environment());
        Assertions.assertEquals("gmgsxnkjzkde", model.data().get(0).spec().environment().related());
        Assertions.assertEquals("pvlopwiyighxpkd", model.data().get(0).spec().environment().resourceName());
        Assertions.assertEquals("aiuebbaumnyqu", model.data().get(0).spec().network().id());
        Assertions.assertEquals("deoj", model.data().get(0).spec().network().environment());
        Assertions.assertEquals("bckhsmtxpsi", model.data().get(0).spec().network().related());
        Assertions.assertEquals("tfhvpesapskrdqmh", model.data().get(0).spec().network().resourceName());
        Assertions.assertEquals("htldwk", model.data().get(0).spec().byok().id());
        Assertions.assertEquals("xuutkncwscwsv", model.data().get(0).spec().byok().related());
        Assertions.assertEquals("otogtwrupqs", model.data().get(0).spec().byok().resourceName());
        Assertions.assertEquals("micykvceoveilo", model.data().get(0).status().phase());
        Assertions.assertEquals(660644635, model.data().get(0).status().cku());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AccessListClusterSuccessResponseInner model = new AccessListClusterSuccessResponseInner().withKind("ebf")
            .withMetadata(new ConfluentListMetadata().withFirst("rbu").withLast("cvpnazzmhjrunmpx")
                .withPrev("dbhrbnlankxm").withNext("k").withTotalSize(1438226066))
            .withData(Arrays.asList(
                new ClusterRecord().withKind("tkcxywnytnrsy").withId("qidybyx")
                    .withMetadata(new MetadataEntity().withSelf("clha").withResourceName("dbabp")
                        .withCreatedAt("wrqlfktsthsuco").withUpdatedAt("nyyazttbtwwrqpue").withDeletedAt("kzywbiex"))
                    .withDisplayName("eyueaxibxujwb")
                    .withSpec(new ClusterSpecEntity().withDisplayName("almuzyoxaepdkzja").withAvailability("ux")
                        .withCloud("d").withZone("avxbniwdjswztsdb").withRegion("nxytxh")
                        .withKafkaBootstrapEndpoint("xbzpfzab").withHttpEndpoint("cuh").withApiEndpoint("tcty")
                        .withConfig(new ClusterConfigEntity().withKind("lbbovplw"))
                        .withEnvironment(new ClusterEnvironmentEntity().withId("vgyuguos").withEnvironment("kfssxqukkf")
                            .withRelated("gmgsxnkjzkde").withResourceName("pvlopwiyighxpkd"))
                        .withNetwork(new ClusterNetworkEntity().withId("aiuebbaumnyqu").withEnvironment("deoj")
                            .withRelated("bckhsmtxpsi").withResourceName("tfhvpesapskrdqmh"))
                        .withByok(new ClusterByokEntity().withId("htldwk").withRelated("xuutkncwscwsv")
                            .withResourceName("otogtwrupqs")))
                    .withStatus(new ClusterStatusEntity().withPhase("micykvceoveilo").withCku(660644635)),
                new ClusterRecord().withKind("yfjfcnjbkcn").withId("hbttkphyw")
                    .withMetadata(new MetadataEntity().withSelf("jtoqne").withResourceName("clfp")
                        .withCreatedAt("hoxus").withUpdatedAt("pabgyeps").withDeletedAt("tazqugxywpmueefj"))
                    .withDisplayName("fqkquj")
                    .withSpec(new ClusterSpecEntity().withDisplayName("uyonobglaoc").withAvailability("tcc")
                        .withCloud("yudxytlmoy").withZone("vwfudwpzntxhd").withRegion("lrqjbhckfr")
                        .withKafkaBootstrapEndpoint("rxsbkyvp").withHttpEndpoint("anuzbpzkafkuw")
                        .withApiEndpoint("rnwb").withConfig(new ClusterConfigEntity().withKind("hseyvju"))
                        .withEnvironment(new ClusterEnvironmentEntity().withId("slhs").withEnvironment("deemao")
                            .withRelated("xagkvtmelmqkrh").withResourceName("vljua"))
                        .withNetwork(new ClusterNetworkEntity().withId("uhcdhm").withEnvironment("alaexqpvfadmwsrc")
                            .withRelated("vxpvgomz").withResourceName("misgwbnb"))
                        .withByok(new ClusterByokEntity().withId("dawkzbali").withRelated("rqhakauha")
                            .withResourceName("sfwxosowzxc")))
                    .withStatus(new ClusterStatusEntity().withPhase("cjooxdjebwpucwwf").withCku(1446689376)),
                new ClusterRecord().withKind("vmeueci").withId("hzceuojgjrwjue")
                    .withMetadata(new MetadataEntity().withSelf("wmcdytdxwi").withResourceName("nrjawgqwg")
                        .withCreatedAt("ni").withUpdatedAt("x").withDeletedAt("kpycgklwndnhjd"))
                    .withDisplayName("whvylw")
                    .withSpec(new ClusterSpecEntity().withDisplayName("dhxujznbmpo").withAvailability("wpr")
                        .withCloud("lve").withZone("lupj").withRegion("hfxobbcswsrtj")
                        .withKafkaBootstrapEndpoint("plrbpbewtghf").withHttpEndpoint("lcgwxzvlvqh")
                        .withApiEndpoint("begibtnmxiebwwa")
                        .withConfig(new ClusterConfigEntity().withKind("yqcgwrtzjuzgwy"))
                        .withEnvironment(new ClusterEnvironmentEntity().withId("txon").withEnvironment("ts")
                            .withRelated("jcbpwxqpsrknft").withResourceName("vriuhprwmdyvx"))
                        .withNetwork(new ClusterNetworkEntity().withId("yriwwroyqb").withEnvironment("rmcqiby")
                            .withRelated("ojvknmefqsgzvaha").withResourceName("y"))
                        .withByok(new ClusterByokEntity().withId("vgqzcjrvxd").withRelated("lmwlxkvugfhzo")
                            .withResourceName("wjvzunluthnn")))
                    .withStatus(new ClusterStatusEntity().withPhase("xipeilpjzuaejx").withCku(122222845)),
                new ClusterRecord().withKind("skzbb").withId("zumveekgpwo")
                    .withMetadata(new MetadataEntity().withSelf("kfpbs").withResourceName("ofd")
                        .withCreatedAt("uusdttouwa").withUpdatedAt("ekqvkeln").withDeletedAt("vbxwyjsflhh"))
                    .withDisplayName("aln")
                    .withSpec(new ClusterSpecEntity().withDisplayName("isxyawjoyaqcslyj").withAvailability("iidzyexzne")
                        .withCloud("xhnrztfolhb").withZone("knalaulppg").withRegion("tpnapnyiropuhpig")
                        .withKafkaBootstrapEndpoint("gylgqgitxmedjvcs").withHttpEndpoint("n")
                        .withApiEndpoint("wncwzzhxgktrmg")
                        .withConfig(new ClusterConfigEntity().withKind("apkteoellwptfdyg"))
                        .withEnvironment(new ClusterEnvironmentEntity().withId("b").withEnvironment("ceopzfqrhhuaopp")
                            .withRelated("qeqxo").withResourceName("dahzxctobg"))
                        .withNetwork(new ClusterNetworkEntity().withId("moizpos").withEnvironment("grcfb")
                            .withRelated("rmfqjhhkxbpvj").withResourceName("jhxxjyn"))
                        .withByok(
                            new ClusterByokEntity().withId("ivkrtsw").withRelated("qzvszjf").withResourceName("vjfdx")))
                    .withStatus(new ClusterStatusEntity().withPhase("e").withCku(43385515))));
        model = BinaryData.fromObject(model).toObject(AccessListClusterSuccessResponseInner.class);
        Assertions.assertEquals("ebf", model.kind());
        Assertions.assertEquals("rbu", model.metadata().first());
        Assertions.assertEquals("cvpnazzmhjrunmpx", model.metadata().last());
        Assertions.assertEquals("dbhrbnlankxm", model.metadata().prev());
        Assertions.assertEquals("k", model.metadata().next());
        Assertions.assertEquals(1438226066, model.metadata().totalSize());
        Assertions.assertEquals("tkcxywnytnrsy", model.data().get(0).kind());
        Assertions.assertEquals("qidybyx", model.data().get(0).id());
        Assertions.assertEquals("clha", model.data().get(0).metadata().self());
        Assertions.assertEquals("dbabp", model.data().get(0).metadata().resourceName());
        Assertions.assertEquals("wrqlfktsthsuco", model.data().get(0).metadata().createdAt());
        Assertions.assertEquals("nyyazttbtwwrqpue", model.data().get(0).metadata().updatedAt());
        Assertions.assertEquals("kzywbiex", model.data().get(0).metadata().deletedAt());
        Assertions.assertEquals("eyueaxibxujwb", model.data().get(0).displayName());
        Assertions.assertEquals("almuzyoxaepdkzja", model.data().get(0).spec().displayName());
        Assertions.assertEquals("ux", model.data().get(0).spec().availability());
        Assertions.assertEquals("d", model.data().get(0).spec().cloud());
        Assertions.assertEquals("avxbniwdjswztsdb", model.data().get(0).spec().zone());
        Assertions.assertEquals("nxytxh", model.data().get(0).spec().region());
        Assertions.assertEquals("xbzpfzab", model.data().get(0).spec().kafkaBootstrapEndpoint());
        Assertions.assertEquals("cuh", model.data().get(0).spec().httpEndpoint());
        Assertions.assertEquals("tcty", model.data().get(0).spec().apiEndpoint());
        Assertions.assertEquals("lbbovplw", model.data().get(0).spec().config().kind());
        Assertions.assertEquals("vgyuguos", model.data().get(0).spec().environment().id());
        Assertions.assertEquals("kfssxqukkf", model.data().get(0).spec().environment().environment());
        Assertions.assertEquals("gmgsxnkjzkde", model.data().get(0).spec().environment().related());
        Assertions.assertEquals("pvlopwiyighxpkd", model.data().get(0).spec().environment().resourceName());
        Assertions.assertEquals("aiuebbaumnyqu", model.data().get(0).spec().network().id());
        Assertions.assertEquals("deoj", model.data().get(0).spec().network().environment());
        Assertions.assertEquals("bckhsmtxpsi", model.data().get(0).spec().network().related());
        Assertions.assertEquals("tfhvpesapskrdqmh", model.data().get(0).spec().network().resourceName());
        Assertions.assertEquals("htldwk", model.data().get(0).spec().byok().id());
        Assertions.assertEquals("xuutkncwscwsv", model.data().get(0).spec().byok().related());
        Assertions.assertEquals("otogtwrupqs", model.data().get(0).spec().byok().resourceName());
        Assertions.assertEquals("micykvceoveilo", model.data().get(0).status().phase());
        Assertions.assertEquals(660644635, model.data().get(0).status().cku());
    }
}
