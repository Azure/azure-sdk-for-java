// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.confluent.models.ClusterByokEntity;
import com.azure.resourcemanager.confluent.models.ClusterConfigEntity;
import com.azure.resourcemanager.confluent.models.ClusterEnvironmentEntity;
import com.azure.resourcemanager.confluent.models.ClusterNetworkEntity;
import com.azure.resourcemanager.confluent.models.ClusterRecord;
import com.azure.resourcemanager.confluent.models.ClusterSpecEntity;
import com.azure.resourcemanager.confluent.models.ClusterStatusEntity;
import com.azure.resourcemanager.confluent.models.MetadataEntity;
import org.junit.jupiter.api.Assertions;

public final class ClusterRecordTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterRecord model = BinaryData.fromString(
            "{\"kind\":\"qaqtdoqmcbxvwvxy\",\"id\":\"qbhsfxobl\",\"metadata\":{\"self\":\"blmpewww\",\"resource_name\":\"krvrns\",\"created_at\":\"hqjohxcrsbfova\",\"updated_at\":\"ruvw\",\"deleted_at\":\"sqfsubcgjbirxb\"},\"display_name\":\"bsrfbj\",\"spec\":{\"display_name\":\"w\",\"availability\":\"otftpvjzbexilz\",\"cloud\":\"fqqnvwpmqtaruo\",\"zone\":\"mkcjhwqytjrybn\",\"region\":\"ewgdrjervn\",\"kafka_bootstrap_endpoint\":\"nqpeh\",\"http_endpoint\":\"doy\",\"api_endpoint\":\"ifthnz\",\"config\":{\"kind\":\"sl\"},\"environment\":{\"id\":\"yq\",\"environment\":\"ynduha\",\"related\":\"qlkth\",\"resource_name\":\"aqolbgycduiertg\"},\"network\":{\"id\":\"mvaolps\",\"environment\":\"qlfmmdnbb\",\"related\":\"zpswiydmc\",\"resource_name\":\"hzdxssadbzm\"},\"byok\":{\"id\":\"fznudaodvxzb\",\"related\":\"blylpstdbh\",\"resource_name\":\"srzdzucerscdn\"}},\"status\":{\"phase\":\"vfiwjmygtdss\",\"cku\":1943196565}}")
            .toObject(ClusterRecord.class);
        Assertions.assertEquals("qaqtdoqmcbxvwvxy", model.kind());
        Assertions.assertEquals("qbhsfxobl", model.id());
        Assertions.assertEquals("blmpewww", model.metadata().self());
        Assertions.assertEquals("krvrns", model.metadata().resourceName());
        Assertions.assertEquals("hqjohxcrsbfova", model.metadata().createdAt());
        Assertions.assertEquals("ruvw", model.metadata().updatedAt());
        Assertions.assertEquals("sqfsubcgjbirxb", model.metadata().deletedAt());
        Assertions.assertEquals("bsrfbj", model.displayName());
        Assertions.assertEquals("w", model.spec().displayName());
        Assertions.assertEquals("otftpvjzbexilz", model.spec().availability());
        Assertions.assertEquals("fqqnvwpmqtaruo", model.spec().cloud());
        Assertions.assertEquals("mkcjhwqytjrybn", model.spec().zone());
        Assertions.assertEquals("ewgdrjervn", model.spec().region());
        Assertions.assertEquals("nqpeh", model.spec().kafkaBootstrapEndpoint());
        Assertions.assertEquals("doy", model.spec().httpEndpoint());
        Assertions.assertEquals("ifthnz", model.spec().apiEndpoint());
        Assertions.assertEquals("sl", model.spec().config().kind());
        Assertions.assertEquals("yq", model.spec().environment().id());
        Assertions.assertEquals("ynduha", model.spec().environment().environment());
        Assertions.assertEquals("qlkth", model.spec().environment().related());
        Assertions.assertEquals("aqolbgycduiertg", model.spec().environment().resourceName());
        Assertions.assertEquals("mvaolps", model.spec().network().id());
        Assertions.assertEquals("qlfmmdnbb", model.spec().network().environment());
        Assertions.assertEquals("zpswiydmc", model.spec().network().related());
        Assertions.assertEquals("hzdxssadbzm", model.spec().network().resourceName());
        Assertions.assertEquals("fznudaodvxzb", model.spec().byok().id());
        Assertions.assertEquals("blylpstdbh", model.spec().byok().related());
        Assertions.assertEquals("srzdzucerscdn", model.spec().byok().resourceName());
        Assertions.assertEquals("vfiwjmygtdss", model.status().phase());
        Assertions.assertEquals(1943196565, model.status().cku());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterRecord model = new ClusterRecord().withKind("qaqtdoqmcbxvwvxy").withId("qbhsfxobl")
            .withMetadata(new MetadataEntity().withSelf("blmpewww").withResourceName("krvrns")
                .withCreatedAt("hqjohxcrsbfova").withUpdatedAt("ruvw").withDeletedAt("sqfsubcgjbirxb"))
            .withDisplayName("bsrfbj")
            .withSpec(new ClusterSpecEntity().withDisplayName("w").withAvailability("otftpvjzbexilz")
                .withCloud("fqqnvwpmqtaruo").withZone("mkcjhwqytjrybn").withRegion("ewgdrjervn")
                .withKafkaBootstrapEndpoint("nqpeh").withHttpEndpoint("doy").withApiEndpoint("ifthnz")
                .withConfig(new ClusterConfigEntity().withKind("sl"))
                .withEnvironment(new ClusterEnvironmentEntity().withId("yq").withEnvironment("ynduha")
                    .withRelated("qlkth").withResourceName("aqolbgycduiertg"))
                .withNetwork(new ClusterNetworkEntity().withId("mvaolps").withEnvironment("qlfmmdnbb")
                    .withRelated("zpswiydmc").withResourceName("hzdxssadbzm"))
                .withByok(new ClusterByokEntity().withId("fznudaodvxzb").withRelated("blylpstdbh")
                    .withResourceName("srzdzucerscdn")))
            .withStatus(new ClusterStatusEntity().withPhase("vfiwjmygtdss").withCku(1943196565));
        model = BinaryData.fromObject(model).toObject(ClusterRecord.class);
        Assertions.assertEquals("qaqtdoqmcbxvwvxy", model.kind());
        Assertions.assertEquals("qbhsfxobl", model.id());
        Assertions.assertEquals("blmpewww", model.metadata().self());
        Assertions.assertEquals("krvrns", model.metadata().resourceName());
        Assertions.assertEquals("hqjohxcrsbfova", model.metadata().createdAt());
        Assertions.assertEquals("ruvw", model.metadata().updatedAt());
        Assertions.assertEquals("sqfsubcgjbirxb", model.metadata().deletedAt());
        Assertions.assertEquals("bsrfbj", model.displayName());
        Assertions.assertEquals("w", model.spec().displayName());
        Assertions.assertEquals("otftpvjzbexilz", model.spec().availability());
        Assertions.assertEquals("fqqnvwpmqtaruo", model.spec().cloud());
        Assertions.assertEquals("mkcjhwqytjrybn", model.spec().zone());
        Assertions.assertEquals("ewgdrjervn", model.spec().region());
        Assertions.assertEquals("nqpeh", model.spec().kafkaBootstrapEndpoint());
        Assertions.assertEquals("doy", model.spec().httpEndpoint());
        Assertions.assertEquals("ifthnz", model.spec().apiEndpoint());
        Assertions.assertEquals("sl", model.spec().config().kind());
        Assertions.assertEquals("yq", model.spec().environment().id());
        Assertions.assertEquals("ynduha", model.spec().environment().environment());
        Assertions.assertEquals("qlkth", model.spec().environment().related());
        Assertions.assertEquals("aqolbgycduiertg", model.spec().environment().resourceName());
        Assertions.assertEquals("mvaolps", model.spec().network().id());
        Assertions.assertEquals("qlfmmdnbb", model.spec().network().environment());
        Assertions.assertEquals("zpswiydmc", model.spec().network().related());
        Assertions.assertEquals("hzdxssadbzm", model.spec().network().resourceName());
        Assertions.assertEquals("fznudaodvxzb", model.spec().byok().id());
        Assertions.assertEquals("blylpstdbh", model.spec().byok().related());
        Assertions.assertEquals("srzdzucerscdn", model.spec().byok().resourceName());
        Assertions.assertEquals("vfiwjmygtdss", model.status().phase());
        Assertions.assertEquals(1943196565, model.status().cku());
    }
}
