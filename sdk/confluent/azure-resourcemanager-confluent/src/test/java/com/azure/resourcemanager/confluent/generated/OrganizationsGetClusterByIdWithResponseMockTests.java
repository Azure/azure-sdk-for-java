// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.confluent.ConfluentManager;
import com.azure.resourcemanager.confluent.models.SCClusterRecord;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class OrganizationsGetClusterByIdWithResponseMockTests {
    @Test
    public void testGetClusterByIdWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"kind\":\"bxv\",\"id\":\"htnsi\",\"properties\":{\"metadata\":{\"self\":\"z\",\"resourceName\":\"es\",\"createdTimestamp\":\"dlpagzrcxfail\",\"updatedTimestamp\":\"xwmdboxd\",\"deletedTimestamp\":\"sftufqobrjlna\"},\"spec\":{\"name\":\"ckknhxkizvy\",\"availability\":\"rzvul\",\"cloud\":\"aaeranokqgukk\",\"zone\":\"nvbroylaxx\",\"region\":\"cdisd\",\"kafkaBootstrapEndpoint\":\"fj\",\"httpEndpoint\":\"svgjrwhryvy\",\"apiEndpoint\":\"t\",\"config\":{\"kind\":\"xgccknfnw\"},\"environment\":{\"id\":\"mvpdvjdhttzaef\",\"environment\":\"x\",\"related\":\"ch\",\"resourceName\":\"hk\"},\"network\":{\"id\":\"jdqnsdfzpbgt\",\"environment\":\"ylkdghrje\",\"related\":\"tl\",\"resourceName\":\"ez\"},\"byok\":{\"id\":\"okvbwnhhtqlgehg\",\"related\":\"ipifhpfeoajvg\",\"resourceName\":\"txjcsheafidlt\"}},\"status\":{\"phase\":\"resmkssjhoiftxfk\",\"cku\":182361785}},\"name\":\"prhptillu\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        ConfluentManager manager = ConfluentManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        SCClusterRecord response = manager.organizations().getClusterByIdWithResponse("zeexavoxtfgle", "dmdqb",
            "pypqtgsfj", "cbslhhx", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("bxv", response.kind());
        Assertions.assertEquals("htnsi", response.id());
        Assertions.assertEquals("prhptillu", response.name());
        Assertions.assertEquals("z", response.metadata().self());
        Assertions.assertEquals("es", response.metadata().resourceName());
        Assertions.assertEquals("dlpagzrcxfail", response.metadata().createdTimestamp());
        Assertions.assertEquals("xwmdboxd", response.metadata().updatedTimestamp());
        Assertions.assertEquals("sftufqobrjlna", response.metadata().deletedTimestamp());
        Assertions.assertEquals("ckknhxkizvy", response.spec().name());
        Assertions.assertEquals("rzvul", response.spec().availability());
        Assertions.assertEquals("aaeranokqgukk", response.spec().cloud());
        Assertions.assertEquals("nvbroylaxx", response.spec().zone());
        Assertions.assertEquals("cdisd", response.spec().region());
        Assertions.assertEquals("fj", response.spec().kafkaBootstrapEndpoint());
        Assertions.assertEquals("svgjrwhryvy", response.spec().httpEndpoint());
        Assertions.assertEquals("t", response.spec().apiEndpoint());
        Assertions.assertEquals("xgccknfnw", response.spec().config().kind());
        Assertions.assertEquals("mvpdvjdhttzaef", response.spec().environment().id());
        Assertions.assertEquals("x", response.spec().environment().environment());
        Assertions.assertEquals("ch", response.spec().environment().related());
        Assertions.assertEquals("hk", response.spec().environment().resourceName());
        Assertions.assertEquals("jdqnsdfzpbgt", response.spec().network().id());
        Assertions.assertEquals("ylkdghrje", response.spec().network().environment());
        Assertions.assertEquals("tl", response.spec().network().related());
        Assertions.assertEquals("ez", response.spec().network().resourceName());
        Assertions.assertEquals("okvbwnhhtqlgehg", response.spec().byok().id());
        Assertions.assertEquals("ipifhpfeoajvg", response.spec().byok().related());
        Assertions.assertEquals("txjcsheafidlt", response.spec().byok().resourceName());
        Assertions.assertEquals("resmkssjhoiftxfk", response.status().phase());
        Assertions.assertEquals(182361785, response.status().cku());
    }
}
