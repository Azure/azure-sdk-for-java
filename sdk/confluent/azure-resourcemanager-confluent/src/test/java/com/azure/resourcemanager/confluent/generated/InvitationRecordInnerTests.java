// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.confluent.fluent.models.InvitationRecordInner;
import com.azure.resourcemanager.confluent.models.MetadataEntity;
import org.junit.jupiter.api.Assertions;

public final class InvitationRecordInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InvitationRecordInner model = BinaryData.fromString(
            "{\"kind\":\"xxjnspydptk\",\"id\":\"nkoukn\",\"metadata\":{\"self\":\"wtiukbldn\",\"resource_name\":\"pocipazyxoegu\",\"created_at\":\"jnpiucgyg\",\"updated_at\":\"qzntypm\",\"deleted_at\":\"p\"},\"email\":\"c\",\"auth_type\":\"qjsdpydnfyhxdeo\",\"status\":\"zi\",\"accepted_at\":\"ifsjttgzfbishcb\",\"expires_at\":\"ajdeyeamdphaga\"}")
            .toObject(InvitationRecordInner.class);
        Assertions.assertEquals("xxjnspydptk", model.kind());
        Assertions.assertEquals("nkoukn", model.id());
        Assertions.assertEquals("wtiukbldn", model.metadata().self());
        Assertions.assertEquals("pocipazyxoegu", model.metadata().resourceName());
        Assertions.assertEquals("jnpiucgyg", model.metadata().createdAt());
        Assertions.assertEquals("qzntypm", model.metadata().updatedAt());
        Assertions.assertEquals("p", model.metadata().deletedAt());
        Assertions.assertEquals("c", model.email());
        Assertions.assertEquals("qjsdpydnfyhxdeo", model.authType());
        Assertions.assertEquals("zi", model.status());
        Assertions.assertEquals("ifsjttgzfbishcb", model.acceptedAt());
        Assertions.assertEquals("ajdeyeamdphaga", model.expiresAt());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InvitationRecordInner model = new InvitationRecordInner().withKind("xxjnspydptk").withId("nkoukn")
            .withMetadata(new MetadataEntity().withSelf("wtiukbldn").withResourceName("pocipazyxoegu")
                .withCreatedAt("jnpiucgyg").withUpdatedAt("qzntypm").withDeletedAt("p"))
            .withEmail("c").withAuthType("qjsdpydnfyhxdeo").withStatus("zi").withAcceptedAt("ifsjttgzfbishcb")
            .withExpiresAt("ajdeyeamdphaga");
        model = BinaryData.fromObject(model).toObject(InvitationRecordInner.class);
        Assertions.assertEquals("xxjnspydptk", model.kind());
        Assertions.assertEquals("nkoukn", model.id());
        Assertions.assertEquals("wtiukbldn", model.metadata().self());
        Assertions.assertEquals("pocipazyxoegu", model.metadata().resourceName());
        Assertions.assertEquals("jnpiucgyg", model.metadata().createdAt());
        Assertions.assertEquals("qzntypm", model.metadata().updatedAt());
        Assertions.assertEquals("p", model.metadata().deletedAt());
        Assertions.assertEquals("c", model.email());
        Assertions.assertEquals("qjsdpydnfyhxdeo", model.authType());
        Assertions.assertEquals("zi", model.status());
        Assertions.assertEquals("ifsjttgzfbishcb", model.acceptedAt());
        Assertions.assertEquals("ajdeyeamdphaga", model.expiresAt());
    }
}
