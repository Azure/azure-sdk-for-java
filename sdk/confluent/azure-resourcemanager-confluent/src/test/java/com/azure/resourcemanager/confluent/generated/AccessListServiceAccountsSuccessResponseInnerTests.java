// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.confluent.fluent.models.AccessListServiceAccountsSuccessResponseInner;
import com.azure.resourcemanager.confluent.models.ConfluentListMetadata;
import com.azure.resourcemanager.confluent.models.MetadataEntity;
import com.azure.resourcemanager.confluent.models.ServiceAccountRecord;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AccessListServiceAccountsSuccessResponseInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AccessListServiceAccountsSuccessResponseInner model = BinaryData.fromString(
            "{\"kind\":\"cbonqvpk\",\"metadata\":{\"first\":\"xnj\",\"last\":\"seiphe\",\"prev\":\"lokeyy\",\"next\":\"nj\",\"total_size\":147839675},\"data\":[{\"kind\":\"rhpdjpjumas\",\"id\":\"zj\",\"metadata\":{\"self\":\"e\",\"resource_name\":\"alhbx\",\"created_at\":\"e\",\"updated_at\":\"zzvdudgwds\",\"deleted_at\":\"hotwmcynpwlbjnp\"},\"display_name\":\"cftadeh\",\"description\":\"ltyfsop\"},{\"kind\":\"suesnzw\",\"id\":\"jbavorxzdm\",\"metadata\":{\"self\":\"tbqvudw\",\"resource_name\":\"ndnvo\",\"created_at\":\"ujjugwdkcglh\",\"updated_at\":\"azjdyggd\",\"deleted_at\":\"ixhbkuofqweykhm\"},\"display_name\":\"evfyexfwhybcib\",\"description\":\"vdcsitynn\"},{\"kind\":\"mdectehfiqscjey\",\"id\":\"hezrkgq\",\"metadata\":{\"self\":\"refovgmkqsleyyvx\",\"resource_name\":\"jpkcattpng\",\"created_at\":\"rcczsqpjhvmd\",\"updated_at\":\"v\",\"deleted_at\":\"sounqecanoaeu\"},\"display_name\":\"hy\",\"description\":\"trpmo\"},{\"kind\":\"mcmatuokthfuiu\",\"id\":\"dsfcpkvxodpuoz\",\"metadata\":{\"self\":\"ydagfuaxbe\",\"resource_name\":\"iu\",\"created_at\":\"ktwh\",\"updated_at\":\"xw\",\"deleted_at\":\"wqsmbsur\"},\"display_name\":\"imoryocfsfksym\",\"description\":\"ys\"}]}")
            .toObject(AccessListServiceAccountsSuccessResponseInner.class);
        Assertions.assertEquals("cbonqvpk", model.kind());
        Assertions.assertEquals("xnj", model.metadata().first());
        Assertions.assertEquals("seiphe", model.metadata().last());
        Assertions.assertEquals("lokeyy", model.metadata().prev());
        Assertions.assertEquals("nj", model.metadata().next());
        Assertions.assertEquals(147839675, model.metadata().totalSize());
        Assertions.assertEquals("rhpdjpjumas", model.data().get(0).kind());
        Assertions.assertEquals("zj", model.data().get(0).id());
        Assertions.assertEquals("e", model.data().get(0).metadata().self());
        Assertions.assertEquals("alhbx", model.data().get(0).metadata().resourceName());
        Assertions.assertEquals("e", model.data().get(0).metadata().createdAt());
        Assertions.assertEquals("zzvdudgwds", model.data().get(0).metadata().updatedAt());
        Assertions.assertEquals("hotwmcynpwlbjnp", model.data().get(0).metadata().deletedAt());
        Assertions.assertEquals("cftadeh", model.data().get(0).displayName());
        Assertions.assertEquals("ltyfsop", model.data().get(0).description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AccessListServiceAccountsSuccessResponseInner model = new AccessListServiceAccountsSuccessResponseInner()
            .withKind("cbonqvpk")
            .withMetadata(new ConfluentListMetadata().withFirst("xnj").withLast("seiphe").withPrev("lokeyy")
                .withNext("nj").withTotalSize(147839675))
            .withData(Arrays.asList(
                new ServiceAccountRecord().withKind("rhpdjpjumas").withId("zj")
                    .withMetadata(new MetadataEntity().withSelf("e").withResourceName("alhbx").withCreatedAt("e")
                        .withUpdatedAt("zzvdudgwds").withDeletedAt("hotwmcynpwlbjnp"))
                    .withDisplayName("cftadeh").withDescription("ltyfsop"),
                new ServiceAccountRecord().withKind("suesnzw").withId("jbavorxzdm")
                    .withMetadata(new MetadataEntity().withSelf("tbqvudw").withResourceName("ndnvo")
                        .withCreatedAt("ujjugwdkcglh").withUpdatedAt("azjdyggd").withDeletedAt("ixhbkuofqweykhm"))
                    .withDisplayName("evfyexfwhybcib").withDescription("vdcsitynn"),
                new ServiceAccountRecord().withKind("mdectehfiqscjey").withId("hezrkgq")
                    .withMetadata(new MetadataEntity().withSelf("refovgmkqsleyyvx").withResourceName("jpkcattpng")
                        .withCreatedAt("rcczsqpjhvmd").withUpdatedAt("v").withDeletedAt("sounqecanoaeu"))
                    .withDisplayName("hy").withDescription("trpmo"),
                new ServiceAccountRecord().withKind("mcmatuokthfuiu").withId("dsfcpkvxodpuoz")
                    .withMetadata(new MetadataEntity().withSelf("ydagfuaxbe").withResourceName("iu")
                        .withCreatedAt("ktwh").withUpdatedAt("xw").withDeletedAt("wqsmbsur"))
                    .withDisplayName("imoryocfsfksym").withDescription("ys")));
        model = BinaryData.fromObject(model).toObject(AccessListServiceAccountsSuccessResponseInner.class);
        Assertions.assertEquals("cbonqvpk", model.kind());
        Assertions.assertEquals("xnj", model.metadata().first());
        Assertions.assertEquals("seiphe", model.metadata().last());
        Assertions.assertEquals("lokeyy", model.metadata().prev());
        Assertions.assertEquals("nj", model.metadata().next());
        Assertions.assertEquals(147839675, model.metadata().totalSize());
        Assertions.assertEquals("rhpdjpjumas", model.data().get(0).kind());
        Assertions.assertEquals("zj", model.data().get(0).id());
        Assertions.assertEquals("e", model.data().get(0).metadata().self());
        Assertions.assertEquals("alhbx", model.data().get(0).metadata().resourceName());
        Assertions.assertEquals("e", model.data().get(0).metadata().createdAt());
        Assertions.assertEquals("zzvdudgwds", model.data().get(0).metadata().updatedAt());
        Assertions.assertEquals("hotwmcynpwlbjnp", model.data().get(0).metadata().deletedAt());
        Assertions.assertEquals("cftadeh", model.data().get(0).displayName());
        Assertions.assertEquals("ltyfsop", model.data().get(0).description());
    }
}
