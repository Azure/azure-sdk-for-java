// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.confluent.fluent.models.ConfluentAgreementResourceInner;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class ConfluentAgreementResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConfluentAgreementResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"publisher\":\"bpzvgn\",\"product\":\"symglzufcyz\",\"plan\":\"hdbihan\",\"licenseTextLink\":\"hfcbjysa\",\"privacyPolicyLink\":\"th\",\"retrieveDatetime\":\"2021-11-04T10:26:32Z\",\"signature\":\"bifpikxwczb\",\"accepted\":true},\"id\":\"npqxuh\",\"name\":\"vyq\",\"type\":\"iwbybrkxvdumjg\"}")
            .toObject(ConfluentAgreementResourceInner.class);
        Assertions.assertEquals("bpzvgn", model.publisher());
        Assertions.assertEquals("symglzufcyz", model.product());
        Assertions.assertEquals("hdbihan", model.plan());
        Assertions.assertEquals("hfcbjysa", model.licenseTextLink());
        Assertions.assertEquals("th", model.privacyPolicyLink());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-04T10:26:32Z"), model.retrieveDatetime());
        Assertions.assertEquals("bifpikxwczb", model.signature());
        Assertions.assertEquals(true, model.accepted());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConfluentAgreementResourceInner model = new ConfluentAgreementResourceInner().withPublisher("bpzvgn")
            .withProduct("symglzufcyz").withPlan("hdbihan").withLicenseTextLink("hfcbjysa").withPrivacyPolicyLink("th")
            .withRetrieveDatetime(OffsetDateTime.parse("2021-11-04T10:26:32Z")).withSignature("bifpikxwczb")
            .withAccepted(true);
        model = BinaryData.fromObject(model).toObject(ConfluentAgreementResourceInner.class);
        Assertions.assertEquals("bpzvgn", model.publisher());
        Assertions.assertEquals("symglzufcyz", model.product());
        Assertions.assertEquals("hdbihan", model.plan());
        Assertions.assertEquals("hfcbjysa", model.licenseTextLink());
        Assertions.assertEquals("th", model.privacyPolicyLink());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-04T10:26:32Z"), model.retrieveDatetime());
        Assertions.assertEquals("bifpikxwczb", model.signature());
        Assertions.assertEquals(true, model.accepted());
    }
}
