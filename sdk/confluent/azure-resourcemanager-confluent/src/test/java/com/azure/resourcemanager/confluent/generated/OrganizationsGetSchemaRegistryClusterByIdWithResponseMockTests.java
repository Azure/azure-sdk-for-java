// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.confluent.ConfluentManager;
import com.azure.resourcemanager.confluent.models.SchemaRegistryClusterRecord;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class OrganizationsGetSchemaRegistryClusterByIdWithResponseMockTests {
    @Test
    public void testGetSchemaRegistryClusterByIdWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"kind\":\"vjskgfmoc\",\"id\":\"hpqgatjeaahhvj\",\"properties\":{\"metadata\":{\"self\":\"kzyb\",\"resourceName\":\"jid\",\"createdTimestamp\":\"syxkyxvxevblb\",\"updatedTimestamp\":\"dnlj\",\"deletedTimestamp\":\"geuaulx\"},\"spec\":{\"name\":\"mjbnk\",\"httpEndpoint\":\"xynenl\",\"package\":\"xeizzg\",\"region\":{\"id\":\"nsrmffeycx\",\"related\":\"tpiymerteea\",\"resourceName\":\"xqiekkkzddrtk\"},\"environment\":{\"id\":\"jbmxvavre\",\"related\":\"eesvecu\",\"resourceName\":\"pxtxsuwp\"},\"cloud\":\"ujwsawddjibabxvi\"},\"status\":{\"phase\":\"v\"}}}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        ConfluentManager manager = ConfluentManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        SchemaRegistryClusterRecord response
            = manager.organizations().getSchemaRegistryClusterByIdWithResponse("ajuwas", "vdaeyyguxakjsq", "hzbezkgi",
                "sidxasicdd", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("vjskgfmoc", response.kind());
        Assertions.assertEquals("hpqgatjeaahhvj", response.id());
        Assertions.assertEquals("kzyb", response.metadata().self());
        Assertions.assertEquals("jid", response.metadata().resourceName());
        Assertions.assertEquals("syxkyxvxevblb", response.metadata().createdTimestamp());
        Assertions.assertEquals("dnlj", response.metadata().updatedTimestamp());
        Assertions.assertEquals("geuaulx", response.metadata().deletedTimestamp());
        Assertions.assertEquals("mjbnk", response.spec().name());
        Assertions.assertEquals("xynenl", response.spec().httpEndpoint());
        Assertions.assertEquals("xeizzg", response.spec().packageProperty());
        Assertions.assertEquals("nsrmffeycx", response.spec().region().id());
        Assertions.assertEquals("tpiymerteea", response.spec().region().related());
        Assertions.assertEquals("xqiekkkzddrtk", response.spec().region().resourceName());
        Assertions.assertEquals("jbmxvavre", response.spec().environment().id());
        Assertions.assertEquals("eesvecu", response.spec().environment().related());
        Assertions.assertEquals("pxtxsuwp", response.spec().environment().resourceName());
        Assertions.assertEquals("ujwsawddjibabxvi", response.spec().cloud());
        Assertions.assertEquals("v", response.status().phase());
    }
}
