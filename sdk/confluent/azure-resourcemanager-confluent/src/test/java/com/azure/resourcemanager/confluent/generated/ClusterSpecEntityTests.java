// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.confluent.models.ClusterByokEntity;
import com.azure.resourcemanager.confluent.models.ClusterConfigEntity;
import com.azure.resourcemanager.confluent.models.ClusterEnvironmentEntity;
import com.azure.resourcemanager.confluent.models.ClusterNetworkEntity;
import com.azure.resourcemanager.confluent.models.ClusterSpecEntity;
import org.junit.jupiter.api.Assertions;

public final class ClusterSpecEntityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterSpecEntity model = BinaryData.fromString(
            "{\"display_name\":\"mweriofzpy\",\"availability\":\"emwabnet\",\"cloud\":\"hszhedplvwiwu\",\"zone\":\"wmbesldnkw\",\"region\":\"pp\",\"kafka_bootstrap_endpoint\":\"lcxog\",\"http_endpoint\":\"konzmnsik\",\"api_endpoint\":\"kqze\",\"config\":{\"kind\":\"dltfz\"},\"environment\":{\"id\":\"hvhgureod\",\"environment\":\"obdagxtibqdxb\",\"related\":\"akbogqxndlkzgxh\",\"resource_name\":\"iplbpodxunkbebxm\"},\"network\":{\"id\":\"yntwlrbq\",\"environment\":\"oievseotgqrlltm\",\"related\":\"lauwzizxbmpgcjef\",\"resource_name\":\"muvp\"},\"byok\":{\"id\":\"d\",\"related\":\"orppxebmnzbtb\",\"resource_name\":\"pglkf\"}}")
            .toObject(ClusterSpecEntity.class);
        Assertions.assertEquals("mweriofzpy", model.displayName());
        Assertions.assertEquals("emwabnet", model.availability());
        Assertions.assertEquals("hszhedplvwiwu", model.cloud());
        Assertions.assertEquals("wmbesldnkw", model.zone());
        Assertions.assertEquals("pp", model.region());
        Assertions.assertEquals("lcxog", model.kafkaBootstrapEndpoint());
        Assertions.assertEquals("konzmnsik", model.httpEndpoint());
        Assertions.assertEquals("kqze", model.apiEndpoint());
        Assertions.assertEquals("dltfz", model.config().kind());
        Assertions.assertEquals("hvhgureod", model.environment().id());
        Assertions.assertEquals("obdagxtibqdxb", model.environment().environment());
        Assertions.assertEquals("akbogqxndlkzgxh", model.environment().related());
        Assertions.assertEquals("iplbpodxunkbebxm", model.environment().resourceName());
        Assertions.assertEquals("yntwlrbq", model.network().id());
        Assertions.assertEquals("oievseotgqrlltm", model.network().environment());
        Assertions.assertEquals("lauwzizxbmpgcjef", model.network().related());
        Assertions.assertEquals("muvp", model.network().resourceName());
        Assertions.assertEquals("d", model.byok().id());
        Assertions.assertEquals("orppxebmnzbtb", model.byok().related());
        Assertions.assertEquals("pglkf", model.byok().resourceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterSpecEntity model = new ClusterSpecEntity().withDisplayName("mweriofzpy").withAvailability("emwabnet")
            .withCloud("hszhedplvwiwu").withZone("wmbesldnkw").withRegion("pp").withKafkaBootstrapEndpoint("lcxog")
            .withHttpEndpoint("konzmnsik").withApiEndpoint("kqze")
            .withConfig(new ClusterConfigEntity().withKind("dltfz"))
            .withEnvironment(new ClusterEnvironmentEntity().withId("hvhgureod").withEnvironment("obdagxtibqdxb")
                .withRelated("akbogqxndlkzgxh").withResourceName("iplbpodxunkbebxm"))
            .withNetwork(new ClusterNetworkEntity().withId("yntwlrbq").withEnvironment("oievseotgqrlltm")
                .withRelated("lauwzizxbmpgcjef").withResourceName("muvp"))
            .withByok(new ClusterByokEntity().withId("d").withRelated("orppxebmnzbtb").withResourceName("pglkf"));
        model = BinaryData.fromObject(model).toObject(ClusterSpecEntity.class);
        Assertions.assertEquals("mweriofzpy", model.displayName());
        Assertions.assertEquals("emwabnet", model.availability());
        Assertions.assertEquals("hszhedplvwiwu", model.cloud());
        Assertions.assertEquals("wmbesldnkw", model.zone());
        Assertions.assertEquals("pp", model.region());
        Assertions.assertEquals("lcxog", model.kafkaBootstrapEndpoint());
        Assertions.assertEquals("konzmnsik", model.httpEndpoint());
        Assertions.assertEquals("kqze", model.apiEndpoint());
        Assertions.assertEquals("dltfz", model.config().kind());
        Assertions.assertEquals("hvhgureod", model.environment().id());
        Assertions.assertEquals("obdagxtibqdxb", model.environment().environment());
        Assertions.assertEquals("akbogqxndlkzgxh", model.environment().related());
        Assertions.assertEquals("iplbpodxunkbebxm", model.environment().resourceName());
        Assertions.assertEquals("yntwlrbq", model.network().id());
        Assertions.assertEquals("oievseotgqrlltm", model.network().environment());
        Assertions.assertEquals("lauwzizxbmpgcjef", model.network().related());
        Assertions.assertEquals("muvp", model.network().resourceName());
        Assertions.assertEquals("d", model.byok().id());
        Assertions.assertEquals("orppxebmnzbtb", model.byok().related());
        Assertions.assertEquals("pglkf", model.byok().resourceName());
    }
}
