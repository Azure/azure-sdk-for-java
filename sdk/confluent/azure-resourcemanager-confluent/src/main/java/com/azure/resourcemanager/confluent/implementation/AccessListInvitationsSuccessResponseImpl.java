// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.implementation;

import com.azure.resourcemanager.confluent.fluent.models.AccessListInvitationsSuccessResponseInner;
import com.azure.resourcemanager.confluent.fluent.models.InvitationRecordInner;
import com.azure.resourcemanager.confluent.models.AccessListInvitationsSuccessResponse;
import com.azure.resourcemanager.confluent.models.ConfluentListMetadata;
import com.azure.resourcemanager.confluent.models.InvitationRecord;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public final class AccessListInvitationsSuccessResponseImpl implements AccessListInvitationsSuccessResponse {
    private AccessListInvitationsSuccessResponseInner innerObject;

    private final com.azure.resourcemanager.confluent.ConfluentManager serviceManager;

    AccessListInvitationsSuccessResponseImpl(AccessListInvitationsSuccessResponseInner innerObject,
        com.azure.resourcemanager.confluent.ConfluentManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public String kind() {
        return this.innerModel().kind();
    }

    public ConfluentListMetadata metadata() {
        return this.innerModel().metadata();
    }

    public List<InvitationRecord> data() {
        List<InvitationRecordInner> inner = this.innerModel().data();
        if (inner != null) {
            return Collections.unmodifiableList(inner.stream()
                .map(inner1 -> new InvitationRecordImpl(inner1, this.manager())).collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public AccessListInvitationsSuccessResponseInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.confluent.ConfluentManager manager() {
        return this.serviceManager;
    }
}
