// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Metadata of the data record.
 */
@Fluent
public final class MetadataEntity implements JsonSerializable<MetadataEntity> {
    /*
     * Self lookup url
     */
    private String self;

    /*
     * Resource name of the record
     */
    private String resourceName;

    /*
     * Created Date Time
     */
    private String createdAt;

    /*
     * Updated Date time
     */
    private String updatedAt;

    /*
     * Deleted Date time
     */
    private String deletedAt;

    /**
     * Creates an instance of MetadataEntity class.
     */
    public MetadataEntity() {
    }

    /**
     * Get the self property: Self lookup url.
     * 
     * @return the self value.
     */
    public String self() {
        return this.self;
    }

    /**
     * Set the self property: Self lookup url.
     * 
     * @param self the self value to set.
     * @return the MetadataEntity object itself.
     */
    public MetadataEntity withSelf(String self) {
        this.self = self;
        return this;
    }

    /**
     * Get the resourceName property: Resource name of the record.
     * 
     * @return the resourceName value.
     */
    public String resourceName() {
        return this.resourceName;
    }

    /**
     * Set the resourceName property: Resource name of the record.
     * 
     * @param resourceName the resourceName value to set.
     * @return the MetadataEntity object itself.
     */
    public MetadataEntity withResourceName(String resourceName) {
        this.resourceName = resourceName;
        return this;
    }

    /**
     * Get the createdAt property: Created Date Time.
     * 
     * @return the createdAt value.
     */
    public String createdAt() {
        return this.createdAt;
    }

    /**
     * Set the createdAt property: Created Date Time.
     * 
     * @param createdAt the createdAt value to set.
     * @return the MetadataEntity object itself.
     */
    public MetadataEntity withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Get the updatedAt property: Updated Date time.
     * 
     * @return the updatedAt value.
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    /**
     * Set the updatedAt property: Updated Date time.
     * 
     * @param updatedAt the updatedAt value to set.
     * @return the MetadataEntity object itself.
     */
    public MetadataEntity withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Get the deletedAt property: Deleted Date time.
     * 
     * @return the deletedAt value.
     */
    public String deletedAt() {
        return this.deletedAt;
    }

    /**
     * Set the deletedAt property: Deleted Date time.
     * 
     * @param deletedAt the deletedAt value to set.
     * @return the MetadataEntity object itself.
     */
    public MetadataEntity withDeletedAt(String deletedAt) {
        this.deletedAt = deletedAt;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("self", this.self);
        jsonWriter.writeStringField("resource_name", this.resourceName);
        jsonWriter.writeStringField("created_at", this.createdAt);
        jsonWriter.writeStringField("updated_at", this.updatedAt);
        jsonWriter.writeStringField("deleted_at", this.deletedAt);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetadataEntity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetadataEntity if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MetadataEntity.
     */
    public static MetadataEntity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetadataEntity deserializedMetadataEntity = new MetadataEntity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("self".equals(fieldName)) {
                    deserializedMetadataEntity.self = reader.getString();
                } else if ("resource_name".equals(fieldName)) {
                    deserializedMetadataEntity.resourceName = reader.getString();
                } else if ("created_at".equals(fieldName)) {
                    deserializedMetadataEntity.createdAt = reader.getString();
                } else if ("updated_at".equals(fieldName)) {
                    deserializedMetadataEntity.updatedAt = reader.getString();
                } else if ("deleted_at".equals(fieldName)) {
                    deserializedMetadataEntity.deletedAt = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetadataEntity;
        });
    }
}
