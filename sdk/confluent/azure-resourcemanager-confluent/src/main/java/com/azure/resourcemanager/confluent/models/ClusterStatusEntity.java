// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Status of the cluster record.
 */
@Fluent
public final class ClusterStatusEntity implements JsonSerializable<ClusterStatusEntity> {
    /*
     * The lifecycle phase of the cluster
     */
    private String phase;

    /*
     * The number of Confluent Kafka Units
     */
    private Integer cku;

    /**
     * Creates an instance of ClusterStatusEntity class.
     */
    public ClusterStatusEntity() {
    }

    /**
     * Get the phase property: The lifecycle phase of the cluster.
     * 
     * @return the phase value.
     */
    public String phase() {
        return this.phase;
    }

    /**
     * Set the phase property: The lifecycle phase of the cluster.
     * 
     * @param phase the phase value to set.
     * @return the ClusterStatusEntity object itself.
     */
    public ClusterStatusEntity withPhase(String phase) {
        this.phase = phase;
        return this;
    }

    /**
     * Get the cku property: The number of Confluent Kafka Units.
     * 
     * @return the cku value.
     */
    public Integer cku() {
        return this.cku;
    }

    /**
     * Set the cku property: The number of Confluent Kafka Units.
     * 
     * @param cku the cku value to set.
     * @return the ClusterStatusEntity object itself.
     */
    public ClusterStatusEntity withCku(Integer cku) {
        this.cku = cku;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("phase", this.phase);
        jsonWriter.writeNumberField("cku", this.cku);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterStatusEntity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterStatusEntity if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterStatusEntity.
     */
    public static ClusterStatusEntity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterStatusEntity deserializedClusterStatusEntity = new ClusterStatusEntity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("phase".equals(fieldName)) {
                    deserializedClusterStatusEntity.phase = reader.getString();
                } else if ("cku".equals(fieldName)) {
                    deserializedClusterStatusEntity.cku = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterStatusEntity;
        });
    }
}
