// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.confluent.models.OfferDetail;
import com.azure.resourcemanager.confluent.models.ProvisionState;
import com.azure.resourcemanager.confluent.models.UserDetail;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.Map;

/** Organization resource. */
@JsonFlatten
@Fluent
public class OrganizationResourceInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(OrganizationResourceInner.class);

    /*
     * Metadata pertaining to creation and last modification of the resource
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * The creation time of the resource.
     */
    @JsonProperty(value = "properties.createdTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime createdTime;

    /*
     * Provision states for confluent RP
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisionState provisioningState;

    /*
     * Id of the Confluent organization.
     */
    @JsonProperty(value = "properties.organizationId", access = JsonProperty.Access.WRITE_ONLY)
    private String organizationId;

    /*
     * SSO url for the Confluent organization.
     */
    @JsonProperty(value = "properties.ssoUrl", access = JsonProperty.Access.WRITE_ONLY)
    private String ssoUrl;

    /*
     * Confluent offer detail
     */
    @JsonProperty(value = "properties.offerDetail", required = true)
    private OfferDetail offerDetail;

    /*
     * Subscriber detail
     */
    @JsonProperty(value = "properties.userDetail", required = true)
    private UserDetail userDetail;

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the createdTime property: The creation time of the resource.
     *
     * @return the createdTime value.
     */
    public OffsetDateTime createdTime() {
        return this.createdTime;
    }

    /**
     * Get the provisioningState property: Provision states for confluent RP.
     *
     * @return the provisioningState value.
     */
    public ProvisionState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the organizationId property: Id of the Confluent organization.
     *
     * @return the organizationId value.
     */
    public String organizationId() {
        return this.organizationId;
    }

    /**
     * Get the ssoUrl property: SSO url for the Confluent organization.
     *
     * @return the ssoUrl value.
     */
    public String ssoUrl() {
        return this.ssoUrl;
    }

    /**
     * Get the offerDetail property: Confluent offer detail.
     *
     * @return the offerDetail value.
     */
    public OfferDetail offerDetail() {
        return this.offerDetail;
    }

    /**
     * Set the offerDetail property: Confluent offer detail.
     *
     * @param offerDetail the offerDetail value to set.
     * @return the OrganizationResourceInner object itself.
     */
    public OrganizationResourceInner withOfferDetail(OfferDetail offerDetail) {
        this.offerDetail = offerDetail;
        return this;
    }

    /**
     * Get the userDetail property: Subscriber detail.
     *
     * @return the userDetail value.
     */
    public UserDetail userDetail() {
        return this.userDetail;
    }

    /**
     * Set the userDetail property: Subscriber detail.
     *
     * @param userDetail the userDetail value to set.
     * @return the OrganizationResourceInner object itself.
     */
    public OrganizationResourceInner withUserDetail(UserDetail userDetail) {
        this.userDetail = userDetail;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public OrganizationResourceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public OrganizationResourceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (offerDetail() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property offerDetail in model OrganizationResourceInner"));
        } else {
            offerDetail().validate();
        }
        if (userDetail() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property userDetail in model OrganizationResourceInner"));
        } else {
            userDetail().validate();
        }
    }
}
