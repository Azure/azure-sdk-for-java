// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.confluent.models.LinkOrganization;
import com.azure.resourcemanager.confluent.models.OfferDetail;
import com.azure.resourcemanager.confluent.models.ProvisionState;
import com.azure.resourcemanager.confluent.models.UserDetail;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * Organization resource.
 */
@Fluent
public final class OrganizationResourceInner extends Resource {
    /*
     * Metadata pertaining to creation and last modification of the resource
     */
    private SystemData systemData;

    /*
     * Organization resource properties
     */
    private OrganizationResourceProperties innerProperties = new OrganizationResourceProperties();

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of OrganizationResourceInner class.
     */
    public OrganizationResourceInner() {
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the innerProperties property: Organization resource properties.
     * 
     * @return the innerProperties value.
     */
    private OrganizationResourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrganizationResourceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrganizationResourceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the createdTime property: The creation time of the resource.
     * 
     * @return the createdTime value.
     */
    public OffsetDateTime createdTime() {
        return this.innerProperties() == null ? null : this.innerProperties().createdTime();
    }

    /**
     * Get the provisioningState property: Provision states for confluent RP.
     * 
     * @return the provisioningState value.
     */
    public ProvisionState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the organizationId property: Id of the Confluent organization.
     * 
     * @return the organizationId value.
     */
    public String organizationId() {
        return this.innerProperties() == null ? null : this.innerProperties().organizationId();
    }

    /**
     * Get the ssoUrl property: SSO url for the Confluent organization.
     * 
     * @return the ssoUrl value.
     */
    public String ssoUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().ssoUrl();
    }

    /**
     * Get the offerDetail property: Confluent offer detail.
     * 
     * @return the offerDetail value.
     */
    public OfferDetail offerDetail() {
        return this.innerProperties() == null ? null : this.innerProperties().offerDetail();
    }

    /**
     * Set the offerDetail property: Confluent offer detail.
     * 
     * @param offerDetail the offerDetail value to set.
     * @return the OrganizationResourceInner object itself.
     */
    public OrganizationResourceInner withOfferDetail(OfferDetail offerDetail) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OrganizationResourceProperties();
        }
        this.innerProperties().withOfferDetail(offerDetail);
        return this;
    }

    /**
     * Get the userDetail property: Subscriber detail.
     * 
     * @return the userDetail value.
     */
    public UserDetail userDetail() {
        return this.innerProperties() == null ? null : this.innerProperties().userDetail();
    }

    /**
     * Set the userDetail property: Subscriber detail.
     * 
     * @param userDetail the userDetail value to set.
     * @return the OrganizationResourceInner object itself.
     */
    public OrganizationResourceInner withUserDetail(UserDetail userDetail) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OrganizationResourceProperties();
        }
        this.innerProperties().withUserDetail(userDetail);
        return this;
    }

    /**
     * Get the linkOrganization property: Link an existing Confluent organization.
     * 
     * @return the linkOrganization value.
     */
    public LinkOrganization linkOrganization() {
        return this.innerProperties() == null ? null : this.innerProperties().linkOrganization();
    }

    /**
     * Set the linkOrganization property: Link an existing Confluent organization.
     * 
     * @param linkOrganization the linkOrganization value to set.
     * @return the OrganizationResourceInner object itself.
     */
    public OrganizationResourceInner withLinkOrganization(LinkOrganization linkOrganization) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OrganizationResourceProperties();
        }
        this.innerProperties().withLinkOrganization(linkOrganization);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model OrganizationResourceInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OrganizationResourceInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OrganizationResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OrganizationResourceInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OrganizationResourceInner.
     */
    public static OrganizationResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OrganizationResourceInner deserializedOrganizationResourceInner = new OrganizationResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedOrganizationResourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedOrganizationResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedOrganizationResourceInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedOrganizationResourceInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedOrganizationResourceInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedOrganizationResourceInner.innerProperties
                        = OrganizationResourceProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedOrganizationResourceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOrganizationResourceInner;
        });
    }
}
