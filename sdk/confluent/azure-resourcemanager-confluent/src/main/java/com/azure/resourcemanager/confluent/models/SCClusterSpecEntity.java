// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Spec of the cluster record.
 */
@Fluent
public final class SCClusterSpecEntity implements JsonSerializable<SCClusterSpecEntity> {
    /*
     * The name of the cluster
     */
    private String name;

    /*
     * The availability zone configuration of the cluster
     */
    private String availability;

    /*
     * The cloud service provider
     */
    private String cloud;

    /*
     * type of zone availability
     */
    private String zone;

    /*
     * The cloud service provider region
     */
    private String region;

    /*
     * The bootstrap endpoint used by Kafka clients to connect to the cluster
     */
    private String kafkaBootstrapEndpoint;

    /*
     * The cluster HTTP request URL.
     */
    private String httpEndpoint;

    /*
     * The Kafka API cluster endpoint
     */
    private String apiEndpoint;

    /*
     * Specification of the cluster configuration
     */
    private ClusterConfigEntity config;

    /*
     * Specification of the cluster environment
     */
    private SCClusterNetworkEnvironmentEntity environment;

    /*
     * Specification of the cluster network
     */
    private SCClusterNetworkEnvironmentEntity network;

    /*
     * Specification of the cluster byok
     */
    private SCClusterByokEntity byok;

    /**
     * Creates an instance of SCClusterSpecEntity class.
     */
    public SCClusterSpecEntity() {
    }

    /**
     * Get the name property: The name of the cluster.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the cluster.
     * 
     * @param name the name value to set.
     * @return the SCClusterSpecEntity object itself.
     */
    public SCClusterSpecEntity withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the availability property: The availability zone configuration of the cluster.
     * 
     * @return the availability value.
     */
    public String availability() {
        return this.availability;
    }

    /**
     * Set the availability property: The availability zone configuration of the cluster.
     * 
     * @param availability the availability value to set.
     * @return the SCClusterSpecEntity object itself.
     */
    public SCClusterSpecEntity withAvailability(String availability) {
        this.availability = availability;
        return this;
    }

    /**
     * Get the cloud property: The cloud service provider.
     * 
     * @return the cloud value.
     */
    public String cloud() {
        return this.cloud;
    }

    /**
     * Set the cloud property: The cloud service provider.
     * 
     * @param cloud the cloud value to set.
     * @return the SCClusterSpecEntity object itself.
     */
    public SCClusterSpecEntity withCloud(String cloud) {
        this.cloud = cloud;
        return this;
    }

    /**
     * Get the zone property: type of zone availability.
     * 
     * @return the zone value.
     */
    public String zone() {
        return this.zone;
    }

    /**
     * Set the zone property: type of zone availability.
     * 
     * @param zone the zone value to set.
     * @return the SCClusterSpecEntity object itself.
     */
    public SCClusterSpecEntity withZone(String zone) {
        this.zone = zone;
        return this;
    }

    /**
     * Get the region property: The cloud service provider region.
     * 
     * @return the region value.
     */
    public String region() {
        return this.region;
    }

    /**
     * Set the region property: The cloud service provider region.
     * 
     * @param region the region value to set.
     * @return the SCClusterSpecEntity object itself.
     */
    public SCClusterSpecEntity withRegion(String region) {
        this.region = region;
        return this;
    }

    /**
     * Get the kafkaBootstrapEndpoint property: The bootstrap endpoint used by Kafka clients to connect to the cluster.
     * 
     * @return the kafkaBootstrapEndpoint value.
     */
    public String kafkaBootstrapEndpoint() {
        return this.kafkaBootstrapEndpoint;
    }

    /**
     * Set the kafkaBootstrapEndpoint property: The bootstrap endpoint used by Kafka clients to connect to the cluster.
     * 
     * @param kafkaBootstrapEndpoint the kafkaBootstrapEndpoint value to set.
     * @return the SCClusterSpecEntity object itself.
     */
    public SCClusterSpecEntity withKafkaBootstrapEndpoint(String kafkaBootstrapEndpoint) {
        this.kafkaBootstrapEndpoint = kafkaBootstrapEndpoint;
        return this;
    }

    /**
     * Get the httpEndpoint property: The cluster HTTP request URL.
     * 
     * @return the httpEndpoint value.
     */
    public String httpEndpoint() {
        return this.httpEndpoint;
    }

    /**
     * Set the httpEndpoint property: The cluster HTTP request URL.
     * 
     * @param httpEndpoint the httpEndpoint value to set.
     * @return the SCClusterSpecEntity object itself.
     */
    public SCClusterSpecEntity withHttpEndpoint(String httpEndpoint) {
        this.httpEndpoint = httpEndpoint;
        return this;
    }

    /**
     * Get the apiEndpoint property: The Kafka API cluster endpoint.
     * 
     * @return the apiEndpoint value.
     */
    public String apiEndpoint() {
        return this.apiEndpoint;
    }

    /**
     * Set the apiEndpoint property: The Kafka API cluster endpoint.
     * 
     * @param apiEndpoint the apiEndpoint value to set.
     * @return the SCClusterSpecEntity object itself.
     */
    public SCClusterSpecEntity withApiEndpoint(String apiEndpoint) {
        this.apiEndpoint = apiEndpoint;
        return this;
    }

    /**
     * Get the config property: Specification of the cluster configuration.
     * 
     * @return the config value.
     */
    public ClusterConfigEntity config() {
        return this.config;
    }

    /**
     * Set the config property: Specification of the cluster configuration.
     * 
     * @param config the config value to set.
     * @return the SCClusterSpecEntity object itself.
     */
    public SCClusterSpecEntity withConfig(ClusterConfigEntity config) {
        this.config = config;
        return this;
    }

    /**
     * Get the environment property: Specification of the cluster environment.
     * 
     * @return the environment value.
     */
    public SCClusterNetworkEnvironmentEntity environment() {
        return this.environment;
    }

    /**
     * Set the environment property: Specification of the cluster environment.
     * 
     * @param environment the environment value to set.
     * @return the SCClusterSpecEntity object itself.
     */
    public SCClusterSpecEntity withEnvironment(SCClusterNetworkEnvironmentEntity environment) {
        this.environment = environment;
        return this;
    }

    /**
     * Get the network property: Specification of the cluster network.
     * 
     * @return the network value.
     */
    public SCClusterNetworkEnvironmentEntity network() {
        return this.network;
    }

    /**
     * Set the network property: Specification of the cluster network.
     * 
     * @param network the network value to set.
     * @return the SCClusterSpecEntity object itself.
     */
    public SCClusterSpecEntity withNetwork(SCClusterNetworkEnvironmentEntity network) {
        this.network = network;
        return this;
    }

    /**
     * Get the byok property: Specification of the cluster byok.
     * 
     * @return the byok value.
     */
    public SCClusterByokEntity byok() {
        return this.byok;
    }

    /**
     * Set the byok property: Specification of the cluster byok.
     * 
     * @param byok the byok value to set.
     * @return the SCClusterSpecEntity object itself.
     */
    public SCClusterSpecEntity withByok(SCClusterByokEntity byok) {
        this.byok = byok;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (config() != null) {
            config().validate();
        }
        if (environment() != null) {
            environment().validate();
        }
        if (network() != null) {
            network().validate();
        }
        if (byok() != null) {
            byok().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("availability", this.availability);
        jsonWriter.writeStringField("cloud", this.cloud);
        jsonWriter.writeStringField("zone", this.zone);
        jsonWriter.writeStringField("region", this.region);
        jsonWriter.writeStringField("kafkaBootstrapEndpoint", this.kafkaBootstrapEndpoint);
        jsonWriter.writeStringField("httpEndpoint", this.httpEndpoint);
        jsonWriter.writeStringField("apiEndpoint", this.apiEndpoint);
        jsonWriter.writeJsonField("config", this.config);
        jsonWriter.writeJsonField("environment", this.environment);
        jsonWriter.writeJsonField("network", this.network);
        jsonWriter.writeJsonField("byok", this.byok);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SCClusterSpecEntity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SCClusterSpecEntity if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SCClusterSpecEntity.
     */
    public static SCClusterSpecEntity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SCClusterSpecEntity deserializedSCClusterSpecEntity = new SCClusterSpecEntity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSCClusterSpecEntity.name = reader.getString();
                } else if ("availability".equals(fieldName)) {
                    deserializedSCClusterSpecEntity.availability = reader.getString();
                } else if ("cloud".equals(fieldName)) {
                    deserializedSCClusterSpecEntity.cloud = reader.getString();
                } else if ("zone".equals(fieldName)) {
                    deserializedSCClusterSpecEntity.zone = reader.getString();
                } else if ("region".equals(fieldName)) {
                    deserializedSCClusterSpecEntity.region = reader.getString();
                } else if ("kafkaBootstrapEndpoint".equals(fieldName)) {
                    deserializedSCClusterSpecEntity.kafkaBootstrapEndpoint = reader.getString();
                } else if ("httpEndpoint".equals(fieldName)) {
                    deserializedSCClusterSpecEntity.httpEndpoint = reader.getString();
                } else if ("apiEndpoint".equals(fieldName)) {
                    deserializedSCClusterSpecEntity.apiEndpoint = reader.getString();
                } else if ("config".equals(fieldName)) {
                    deserializedSCClusterSpecEntity.config = ClusterConfigEntity.fromJson(reader);
                } else if ("environment".equals(fieldName)) {
                    deserializedSCClusterSpecEntity.environment = SCClusterNetworkEnvironmentEntity.fromJson(reader);
                } else if ("network".equals(fieldName)) {
                    deserializedSCClusterSpecEntity.network = SCClusterNetworkEnvironmentEntity.fromJson(reader);
                } else if ("byok".equals(fieldName)) {
                    deserializedSCClusterSpecEntity.byok = SCClusterByokEntity.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSCClusterSpecEntity;
        });
    }
}
