// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.confluent.models.LinkOrganization;
import com.azure.resourcemanager.confluent.models.OfferDetail;
import com.azure.resourcemanager.confluent.models.ProvisionState;
import com.azure.resourcemanager.confluent.models.UserDetail;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Organization resource property.
 */
@Fluent
public final class OrganizationResourceProperties implements JsonSerializable<OrganizationResourceProperties> {
    /*
     * The creation time of the resource.
     */
    private OffsetDateTime createdTime;

    /*
     * Provision states for confluent RP
     */
    private ProvisionState provisioningState;

    /*
     * Id of the Confluent organization.
     */
    private String organizationId;

    /*
     * SSO url for the Confluent organization.
     */
    private String ssoUrl;

    /*
     * Confluent offer detail
     */
    private OfferDetail offerDetail;

    /*
     * Subscriber detail
     */
    private UserDetail userDetail;

    /*
     * Link an existing Confluent organization
     */
    private LinkOrganization linkOrganization;

    /**
     * Creates an instance of OrganizationResourceProperties class.
     */
    public OrganizationResourceProperties() {
    }

    /**
     * Get the createdTime property: The creation time of the resource.
     * 
     * @return the createdTime value.
     */
    public OffsetDateTime createdTime() {
        return this.createdTime;
    }

    /**
     * Get the provisioningState property: Provision states for confluent RP.
     * 
     * @return the provisioningState value.
     */
    public ProvisionState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the organizationId property: Id of the Confluent organization.
     * 
     * @return the organizationId value.
     */
    public String organizationId() {
        return this.organizationId;
    }

    /**
     * Get the ssoUrl property: SSO url for the Confluent organization.
     * 
     * @return the ssoUrl value.
     */
    public String ssoUrl() {
        return this.ssoUrl;
    }

    /**
     * Get the offerDetail property: Confluent offer detail.
     * 
     * @return the offerDetail value.
     */
    public OfferDetail offerDetail() {
        return this.offerDetail;
    }

    /**
     * Set the offerDetail property: Confluent offer detail.
     * 
     * @param offerDetail the offerDetail value to set.
     * @return the OrganizationResourceProperties object itself.
     */
    public OrganizationResourceProperties withOfferDetail(OfferDetail offerDetail) {
        this.offerDetail = offerDetail;
        return this;
    }

    /**
     * Get the userDetail property: Subscriber detail.
     * 
     * @return the userDetail value.
     */
    public UserDetail userDetail() {
        return this.userDetail;
    }

    /**
     * Set the userDetail property: Subscriber detail.
     * 
     * @param userDetail the userDetail value to set.
     * @return the OrganizationResourceProperties object itself.
     */
    public OrganizationResourceProperties withUserDetail(UserDetail userDetail) {
        this.userDetail = userDetail;
        return this;
    }

    /**
     * Get the linkOrganization property: Link an existing Confluent organization.
     * 
     * @return the linkOrganization value.
     */
    public LinkOrganization linkOrganization() {
        return this.linkOrganization;
    }

    /**
     * Set the linkOrganization property: Link an existing Confluent organization.
     * 
     * @param linkOrganization the linkOrganization value to set.
     * @return the OrganizationResourceProperties object itself.
     */
    public OrganizationResourceProperties withLinkOrganization(LinkOrganization linkOrganization) {
        this.linkOrganization = linkOrganization;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (offerDetail() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property offerDetail in model OrganizationResourceProperties"));
        } else {
            offerDetail().validate();
        }
        if (userDetail() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property userDetail in model OrganizationResourceProperties"));
        } else {
            userDetail().validate();
        }
        if (linkOrganization() != null) {
            linkOrganization().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OrganizationResourceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("offerDetail", this.offerDetail);
        jsonWriter.writeJsonField("userDetail", this.userDetail);
        jsonWriter.writeJsonField("linkOrganization", this.linkOrganization);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OrganizationResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OrganizationResourceProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OrganizationResourceProperties.
     */
    public static OrganizationResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OrganizationResourceProperties deserializedOrganizationResourceProperties
                = new OrganizationResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("offerDetail".equals(fieldName)) {
                    deserializedOrganizationResourceProperties.offerDetail = OfferDetail.fromJson(reader);
                } else if ("userDetail".equals(fieldName)) {
                    deserializedOrganizationResourceProperties.userDetail = UserDetail.fromJson(reader);
                } else if ("createdTime".equals(fieldName)) {
                    deserializedOrganizationResourceProperties.createdTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedOrganizationResourceProperties.provisioningState
                        = ProvisionState.fromString(reader.getString());
                } else if ("organizationId".equals(fieldName)) {
                    deserializedOrganizationResourceProperties.organizationId = reader.getString();
                } else if ("ssoUrl".equals(fieldName)) {
                    deserializedOrganizationResourceProperties.ssoUrl = reader.getString();
                } else if ("linkOrganization".equals(fieldName)) {
                    deserializedOrganizationResourceProperties.linkOrganization = LinkOrganization.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOrganizationResourceProperties;
        });
    }
}
