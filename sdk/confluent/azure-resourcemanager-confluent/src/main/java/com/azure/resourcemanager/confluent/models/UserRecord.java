// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Record of the user.
 */
@Fluent
public final class UserRecord implements JsonSerializable<UserRecord> {
    /*
     * Type of account
     */
    private String kind;

    /*
     * Id of the user
     */
    private String id;

    /*
     * Metadata of the record
     */
    private MetadataEntity metadata;

    /*
     * Email of the user
     */
    private String email;

    /*
     * Name of the user
     */
    private String fullName;

    /*
     * Auth type of the user
     */
    private String authType;

    /**
     * Creates an instance of UserRecord class.
     */
    public UserRecord() {
    }

    /**
     * Get the kind property: Type of account.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Type of account.
     * 
     * @param kind the kind value to set.
     * @return the UserRecord object itself.
     */
    public UserRecord withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the id property: Id of the user.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Id of the user.
     * 
     * @param id the id value to set.
     * @return the UserRecord object itself.
     */
    public UserRecord withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the metadata property: Metadata of the record.
     * 
     * @return the metadata value.
     */
    public MetadataEntity metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Metadata of the record.
     * 
     * @param metadata the metadata value to set.
     * @return the UserRecord object itself.
     */
    public UserRecord withMetadata(MetadataEntity metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the email property: Email of the user.
     * 
     * @return the email value.
     */
    public String email() {
        return this.email;
    }

    /**
     * Set the email property: Email of the user.
     * 
     * @param email the email value to set.
     * @return the UserRecord object itself.
     */
    public UserRecord withEmail(String email) {
        this.email = email;
        return this;
    }

    /**
     * Get the fullName property: Name of the user.
     * 
     * @return the fullName value.
     */
    public String fullName() {
        return this.fullName;
    }

    /**
     * Set the fullName property: Name of the user.
     * 
     * @param fullName the fullName value to set.
     * @return the UserRecord object itself.
     */
    public UserRecord withFullName(String fullName) {
        this.fullName = fullName;
        return this;
    }

    /**
     * Get the authType property: Auth type of the user.
     * 
     * @return the authType value.
     */
    public String authType() {
        return this.authType;
    }

    /**
     * Set the authType property: Auth type of the user.
     * 
     * @param authType the authType value to set.
     * @return the UserRecord object itself.
     */
    public UserRecord withAuthType(String authType) {
        this.authType = authType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metadata() != null) {
            metadata().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeJsonField("metadata", this.metadata);
        jsonWriter.writeStringField("email", this.email);
        jsonWriter.writeStringField("full_name", this.fullName);
        jsonWriter.writeStringField("auth_type", this.authType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserRecord from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserRecord if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the UserRecord.
     */
    public static UserRecord fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserRecord deserializedUserRecord = new UserRecord();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedUserRecord.kind = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedUserRecord.id = reader.getString();
                } else if ("metadata".equals(fieldName)) {
                    deserializedUserRecord.metadata = MetadataEntity.fromJson(reader);
                } else if ("email".equals(fieldName)) {
                    deserializedUserRecord.email = reader.getString();
                } else if ("full_name".equals(fieldName)) {
                    deserializedUserRecord.fullName = reader.getString();
                } else if ("auth_type".equals(fieldName)) {
                    deserializedUserRecord.authType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserRecord;
        });
    }
}
