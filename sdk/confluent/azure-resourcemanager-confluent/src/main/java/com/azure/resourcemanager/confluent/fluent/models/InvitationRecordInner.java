// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.confluent.models.MetadataEntity;
import java.io.IOException;

/**
 * Record of the invitation.
 */
@Fluent
public final class InvitationRecordInner implements JsonSerializable<InvitationRecordInner> {
    /*
     * Type of account
     */
    private String kind;

    /*
     * Id of the invitation
     */
    private String id;

    /*
     * Metadata of the record
     */
    private MetadataEntity metadata;

    /*
     * Email of the user
     */
    private String email;

    /*
     * Auth type of the user
     */
    private String authType;

    /*
     * Status of the invitation
     */
    private String status;

    /*
     * Accepted date time of the invitation
     */
    private String acceptedAt;

    /*
     * Expiration date time of the invitation
     */
    private String expiresAt;

    /**
     * Creates an instance of InvitationRecordInner class.
     */
    public InvitationRecordInner() {
    }

    /**
     * Get the kind property: Type of account.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Type of account.
     * 
     * @param kind the kind value to set.
     * @return the InvitationRecordInner object itself.
     */
    public InvitationRecordInner withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the id property: Id of the invitation.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Id of the invitation.
     * 
     * @param id the id value to set.
     * @return the InvitationRecordInner object itself.
     */
    public InvitationRecordInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the metadata property: Metadata of the record.
     * 
     * @return the metadata value.
     */
    public MetadataEntity metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Metadata of the record.
     * 
     * @param metadata the metadata value to set.
     * @return the InvitationRecordInner object itself.
     */
    public InvitationRecordInner withMetadata(MetadataEntity metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the email property: Email of the user.
     * 
     * @return the email value.
     */
    public String email() {
        return this.email;
    }

    /**
     * Set the email property: Email of the user.
     * 
     * @param email the email value to set.
     * @return the InvitationRecordInner object itself.
     */
    public InvitationRecordInner withEmail(String email) {
        this.email = email;
        return this;
    }

    /**
     * Get the authType property: Auth type of the user.
     * 
     * @return the authType value.
     */
    public String authType() {
        return this.authType;
    }

    /**
     * Set the authType property: Auth type of the user.
     * 
     * @param authType the authType value to set.
     * @return the InvitationRecordInner object itself.
     */
    public InvitationRecordInner withAuthType(String authType) {
        this.authType = authType;
        return this;
    }

    /**
     * Get the status property: Status of the invitation.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the invitation.
     * 
     * @param status the status value to set.
     * @return the InvitationRecordInner object itself.
     */
    public InvitationRecordInner withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the acceptedAt property: Accepted date time of the invitation.
     * 
     * @return the acceptedAt value.
     */
    public String acceptedAt() {
        return this.acceptedAt;
    }

    /**
     * Set the acceptedAt property: Accepted date time of the invitation.
     * 
     * @param acceptedAt the acceptedAt value to set.
     * @return the InvitationRecordInner object itself.
     */
    public InvitationRecordInner withAcceptedAt(String acceptedAt) {
        this.acceptedAt = acceptedAt;
        return this;
    }

    /**
     * Get the expiresAt property: Expiration date time of the invitation.
     * 
     * @return the expiresAt value.
     */
    public String expiresAt() {
        return this.expiresAt;
    }

    /**
     * Set the expiresAt property: Expiration date time of the invitation.
     * 
     * @param expiresAt the expiresAt value to set.
     * @return the InvitationRecordInner object itself.
     */
    public InvitationRecordInner withExpiresAt(String expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metadata() != null) {
            metadata().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeJsonField("metadata", this.metadata);
        jsonWriter.writeStringField("email", this.email);
        jsonWriter.writeStringField("auth_type", this.authType);
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("accepted_at", this.acceptedAt);
        jsonWriter.writeStringField("expires_at", this.expiresAt);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InvitationRecordInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InvitationRecordInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InvitationRecordInner.
     */
    public static InvitationRecordInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InvitationRecordInner deserializedInvitationRecordInner = new InvitationRecordInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedInvitationRecordInner.kind = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedInvitationRecordInner.id = reader.getString();
                } else if ("metadata".equals(fieldName)) {
                    deserializedInvitationRecordInner.metadata = MetadataEntity.fromJson(reader);
                } else if ("email".equals(fieldName)) {
                    deserializedInvitationRecordInner.email = reader.getString();
                } else if ("auth_type".equals(fieldName)) {
                    deserializedInvitationRecordInner.authType = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedInvitationRecordInner.status = reader.getString();
                } else if ("accepted_at".equals(fieldName)) {
                    deserializedInvitationRecordInner.acceptedAt = reader.getString();
                } else if ("expires_at".equals(fieldName)) {
                    deserializedInvitationRecordInner.expiresAt = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInvitationRecordInner;
        });
    }
}
