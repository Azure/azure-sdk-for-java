// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Region spec details.
 */
@Fluent
public final class RegionSpecEntity implements JsonSerializable<RegionSpecEntity> {
    /*
     * Display Name of the region
     */
    private String name;

    /*
     * Cloud provider name
     */
    private String cloud;

    /*
     * Region name
     */
    private String regionName;

    /*
     * The packages property.
     */
    private List<String> packages;

    /**
     * Creates an instance of RegionSpecEntity class.
     */
    public RegionSpecEntity() {
    }

    /**
     * Get the name property: Display Name of the region.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Display Name of the region.
     * 
     * @param name the name value to set.
     * @return the RegionSpecEntity object itself.
     */
    public RegionSpecEntity withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the cloud property: Cloud provider name.
     * 
     * @return the cloud value.
     */
    public String cloud() {
        return this.cloud;
    }

    /**
     * Set the cloud property: Cloud provider name.
     * 
     * @param cloud the cloud value to set.
     * @return the RegionSpecEntity object itself.
     */
    public RegionSpecEntity withCloud(String cloud) {
        this.cloud = cloud;
        return this;
    }

    /**
     * Get the regionName property: Region name.
     * 
     * @return the regionName value.
     */
    public String regionName() {
        return this.regionName;
    }

    /**
     * Set the regionName property: Region name.
     * 
     * @param regionName the regionName value to set.
     * @return the RegionSpecEntity object itself.
     */
    public RegionSpecEntity withRegionName(String regionName) {
        this.regionName = regionName;
        return this;
    }

    /**
     * Get the packages property: The packages property.
     * 
     * @return the packages value.
     */
    public List<String> packages() {
        return this.packages;
    }

    /**
     * Set the packages property: The packages property.
     * 
     * @param packages the packages value to set.
     * @return the RegionSpecEntity object itself.
     */
    public RegionSpecEntity withPackages(List<String> packages) {
        this.packages = packages;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("cloud", this.cloud);
        jsonWriter.writeStringField("regionName", this.regionName);
        jsonWriter.writeArrayField("packages", this.packages, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegionSpecEntity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegionSpecEntity if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RegionSpecEntity.
     */
    public static RegionSpecEntity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegionSpecEntity deserializedRegionSpecEntity = new RegionSpecEntity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedRegionSpecEntity.name = reader.getString();
                } else if ("cloud".equals(fieldName)) {
                    deserializedRegionSpecEntity.cloud = reader.getString();
                } else if ("regionName".equals(fieldName)) {
                    deserializedRegionSpecEntity.regionName = reader.getString();
                } else if ("packages".equals(fieldName)) {
                    List<String> packages = reader.readArray(reader1 -> reader1.getString());
                    deserializedRegionSpecEntity.packages = packages;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegionSpecEntity;
        });
    }
}
