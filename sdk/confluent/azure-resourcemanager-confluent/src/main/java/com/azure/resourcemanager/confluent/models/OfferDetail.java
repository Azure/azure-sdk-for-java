// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Confluent Offer detail.
 */
@Fluent
public final class OfferDetail implements JsonSerializable<OfferDetail> {
    /*
     * Publisher Id
     */
    private String publisherId;

    /*
     * Offer Id
     */
    private String id;

    /*
     * Offer Plan Id
     */
    private String planId;

    /*
     * Offer Plan Name
     */
    private String planName;

    /*
     * Offer Plan Term unit
     */
    private String termUnit;

    /*
     * Offer Plan Term Id
     */
    private String termId;

    /*
     * Private Offer Id
     */
    private String privateOfferId;

    /*
     * Array of Private Offer Ids
     */
    private List<String> privateOfferIds;

    /*
     * SaaS Offer Status
     */
    private SaaSOfferStatus status;

    /**
     * Creates an instance of OfferDetail class.
     */
    public OfferDetail() {
    }

    /**
     * Get the publisherId property: Publisher Id.
     * 
     * @return the publisherId value.
     */
    public String publisherId() {
        return this.publisherId;
    }

    /**
     * Set the publisherId property: Publisher Id.
     * 
     * @param publisherId the publisherId value to set.
     * @return the OfferDetail object itself.
     */
    public OfferDetail withPublisherId(String publisherId) {
        this.publisherId = publisherId;
        return this;
    }

    /**
     * Get the id property: Offer Id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Offer Id.
     * 
     * @param id the id value to set.
     * @return the OfferDetail object itself.
     */
    public OfferDetail withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the planId property: Offer Plan Id.
     * 
     * @return the planId value.
     */
    public String planId() {
        return this.planId;
    }

    /**
     * Set the planId property: Offer Plan Id.
     * 
     * @param planId the planId value to set.
     * @return the OfferDetail object itself.
     */
    public OfferDetail withPlanId(String planId) {
        this.planId = planId;
        return this;
    }

    /**
     * Get the planName property: Offer Plan Name.
     * 
     * @return the planName value.
     */
    public String planName() {
        return this.planName;
    }

    /**
     * Set the planName property: Offer Plan Name.
     * 
     * @param planName the planName value to set.
     * @return the OfferDetail object itself.
     */
    public OfferDetail withPlanName(String planName) {
        this.planName = planName;
        return this;
    }

    /**
     * Get the termUnit property: Offer Plan Term unit.
     * 
     * @return the termUnit value.
     */
    public String termUnit() {
        return this.termUnit;
    }

    /**
     * Set the termUnit property: Offer Plan Term unit.
     * 
     * @param termUnit the termUnit value to set.
     * @return the OfferDetail object itself.
     */
    public OfferDetail withTermUnit(String termUnit) {
        this.termUnit = termUnit;
        return this;
    }

    /**
     * Get the termId property: Offer Plan Term Id.
     * 
     * @return the termId value.
     */
    public String termId() {
        return this.termId;
    }

    /**
     * Set the termId property: Offer Plan Term Id.
     * 
     * @param termId the termId value to set.
     * @return the OfferDetail object itself.
     */
    public OfferDetail withTermId(String termId) {
        this.termId = termId;
        return this;
    }

    /**
     * Get the privateOfferId property: Private Offer Id.
     * 
     * @return the privateOfferId value.
     */
    public String privateOfferId() {
        return this.privateOfferId;
    }

    /**
     * Set the privateOfferId property: Private Offer Id.
     * 
     * @param privateOfferId the privateOfferId value to set.
     * @return the OfferDetail object itself.
     */
    public OfferDetail withPrivateOfferId(String privateOfferId) {
        this.privateOfferId = privateOfferId;
        return this;
    }

    /**
     * Get the privateOfferIds property: Array of Private Offer Ids.
     * 
     * @return the privateOfferIds value.
     */
    public List<String> privateOfferIds() {
        return this.privateOfferIds;
    }

    /**
     * Set the privateOfferIds property: Array of Private Offer Ids.
     * 
     * @param privateOfferIds the privateOfferIds value to set.
     * @return the OfferDetail object itself.
     */
    public OfferDetail withPrivateOfferIds(List<String> privateOfferIds) {
        this.privateOfferIds = privateOfferIds;
        return this;
    }

    /**
     * Get the status property: SaaS Offer Status.
     * 
     * @return the status value.
     */
    public SaaSOfferStatus status() {
        return this.status;
    }

    /**
     * Set the status property: SaaS Offer Status.
     * 
     * @param status the status value to set.
     * @return the OfferDetail object itself.
     */
    public OfferDetail withStatus(SaaSOfferStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (publisherId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property publisherId in model OfferDetail"));
        }
        if (id() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property id in model OfferDetail"));
        }
        if (planId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property planId in model OfferDetail"));
        }
        if (planName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property planName in model OfferDetail"));
        }
        if (termUnit() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property termUnit in model OfferDetail"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OfferDetail.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("publisherId", this.publisherId);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("planId", this.planId);
        jsonWriter.writeStringField("planName", this.planName);
        jsonWriter.writeStringField("termUnit", this.termUnit);
        jsonWriter.writeStringField("termId", this.termId);
        jsonWriter.writeStringField("privateOfferId", this.privateOfferId);
        jsonWriter.writeArrayField("privateOfferIds", this.privateOfferIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OfferDetail from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OfferDetail if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OfferDetail.
     */
    public static OfferDetail fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OfferDetail deserializedOfferDetail = new OfferDetail();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("publisherId".equals(fieldName)) {
                    deserializedOfferDetail.publisherId = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedOfferDetail.id = reader.getString();
                } else if ("planId".equals(fieldName)) {
                    deserializedOfferDetail.planId = reader.getString();
                } else if ("planName".equals(fieldName)) {
                    deserializedOfferDetail.planName = reader.getString();
                } else if ("termUnit".equals(fieldName)) {
                    deserializedOfferDetail.termUnit = reader.getString();
                } else if ("termId".equals(fieldName)) {
                    deserializedOfferDetail.termId = reader.getString();
                } else if ("privateOfferId".equals(fieldName)) {
                    deserializedOfferDetail.privateOfferId = reader.getString();
                } else if ("privateOfferIds".equals(fieldName)) {
                    List<String> privateOfferIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedOfferDetail.privateOfferIds = privateOfferIds;
                } else if ("status".equals(fieldName)) {
                    deserializedOfferDetail.status = SaaSOfferStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOfferDetail;
        });
    }
}
