// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details on principal, role name and crn pattern of a role binding.
 */
@Fluent
public final class RoleBindingRecord implements JsonSerializable<RoleBindingRecord> {
    /*
     * The type of the resource.
     */
    private String kind;

    /*
     * Id of the role binding
     */
    private String id;

    /*
     * Metadata of the record
     */
    private MetadataEntity metadata;

    /*
     * The principal User or Group to bind the role to
     */
    private String principal;

    /*
     * The name of the role to bind to the principal
     */
    private String roleName;

    /*
     * A CRN that specifies the scope and resource patterns necessary for the role to bind
     */
    private String crnPattern;

    /**
     * Creates an instance of RoleBindingRecord class.
     */
    public RoleBindingRecord() {
    }

    /**
     * Get the kind property: The type of the resource.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: The type of the resource.
     * 
     * @param kind the kind value to set.
     * @return the RoleBindingRecord object itself.
     */
    public RoleBindingRecord withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the id property: Id of the role binding.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Id of the role binding.
     * 
     * @param id the id value to set.
     * @return the RoleBindingRecord object itself.
     */
    public RoleBindingRecord withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the metadata property: Metadata of the record.
     * 
     * @return the metadata value.
     */
    public MetadataEntity metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Metadata of the record.
     * 
     * @param metadata the metadata value to set.
     * @return the RoleBindingRecord object itself.
     */
    public RoleBindingRecord withMetadata(MetadataEntity metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the principal property: The principal User or Group to bind the role to.
     * 
     * @return the principal value.
     */
    public String principal() {
        return this.principal;
    }

    /**
     * Set the principal property: The principal User or Group to bind the role to.
     * 
     * @param principal the principal value to set.
     * @return the RoleBindingRecord object itself.
     */
    public RoleBindingRecord withPrincipal(String principal) {
        this.principal = principal;
        return this;
    }

    /**
     * Get the roleName property: The name of the role to bind to the principal.
     * 
     * @return the roleName value.
     */
    public String roleName() {
        return this.roleName;
    }

    /**
     * Set the roleName property: The name of the role to bind to the principal.
     * 
     * @param roleName the roleName value to set.
     * @return the RoleBindingRecord object itself.
     */
    public RoleBindingRecord withRoleName(String roleName) {
        this.roleName = roleName;
        return this;
    }

    /**
     * Get the crnPattern property: A CRN that specifies the scope and resource patterns necessary for the role to bind.
     * 
     * @return the crnPattern value.
     */
    public String crnPattern() {
        return this.crnPattern;
    }

    /**
     * Set the crnPattern property: A CRN that specifies the scope and resource patterns necessary for the role to bind.
     * 
     * @param crnPattern the crnPattern value to set.
     * @return the RoleBindingRecord object itself.
     */
    public RoleBindingRecord withCrnPattern(String crnPattern) {
        this.crnPattern = crnPattern;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metadata() != null) {
            metadata().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeJsonField("metadata", this.metadata);
        jsonWriter.writeStringField("principal", this.principal);
        jsonWriter.writeStringField("role_name", this.roleName);
        jsonWriter.writeStringField("crn_pattern", this.crnPattern);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RoleBindingRecord from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RoleBindingRecord if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RoleBindingRecord.
     */
    public static RoleBindingRecord fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RoleBindingRecord deserializedRoleBindingRecord = new RoleBindingRecord();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedRoleBindingRecord.kind = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedRoleBindingRecord.id = reader.getString();
                } else if ("metadata".equals(fieldName)) {
                    deserializedRoleBindingRecord.metadata = MetadataEntity.fromJson(reader);
                } else if ("principal".equals(fieldName)) {
                    deserializedRoleBindingRecord.principal = reader.getString();
                } else if ("role_name".equals(fieldName)) {
                    deserializedRoleBindingRecord.roleName = reader.getString();
                } else if ("crn_pattern".equals(fieldName)) {
                    deserializedRoleBindingRecord.crnPattern = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRoleBindingRecord;
        });
    }
}
