// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details about environment name, metadata and environment id of an environment.
 */
@Fluent
public final class EnvironmentRecord implements JsonSerializable<EnvironmentRecord> {
    /*
     * Type of environment
     */
    private String kind;

    /*
     * Id of the environment
     */
    private String id;

    /*
     * Metadata of the record
     */
    private MetadataEntity metadata;

    /*
     * Display name of the user
     */
    private String displayName;

    /**
     * Creates an instance of EnvironmentRecord class.
     */
    public EnvironmentRecord() {
    }

    /**
     * Get the kind property: Type of environment.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Type of environment.
     * 
     * @param kind the kind value to set.
     * @return the EnvironmentRecord object itself.
     */
    public EnvironmentRecord withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the id property: Id of the environment.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Id of the environment.
     * 
     * @param id the id value to set.
     * @return the EnvironmentRecord object itself.
     */
    public EnvironmentRecord withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the metadata property: Metadata of the record.
     * 
     * @return the metadata value.
     */
    public MetadataEntity metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Metadata of the record.
     * 
     * @param metadata the metadata value to set.
     * @return the EnvironmentRecord object itself.
     */
    public EnvironmentRecord withMetadata(MetadataEntity metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the displayName property: Display name of the user.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name of the user.
     * 
     * @param displayName the displayName value to set.
     * @return the EnvironmentRecord object itself.
     */
    public EnvironmentRecord withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metadata() != null) {
            metadata().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeJsonField("metadata", this.metadata);
        jsonWriter.writeStringField("display_name", this.displayName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnvironmentRecord from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnvironmentRecord if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EnvironmentRecord.
     */
    public static EnvironmentRecord fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnvironmentRecord deserializedEnvironmentRecord = new EnvironmentRecord();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedEnvironmentRecord.kind = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedEnvironmentRecord.id = reader.getString();
                } else if ("metadata".equals(fieldName)) {
                    deserializedEnvironmentRecord.metadata = MetadataEntity.fromJson(reader);
                } else if ("display_name".equals(fieldName)) {
                    deserializedEnvironmentRecord.displayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnvironmentRecord;
        });
    }
}
