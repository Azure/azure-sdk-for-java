// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.confluent.fluent.models.RegionProperties;
import java.io.IOException;

/**
 * Details of region record.
 */
@Fluent
public final class RegionRecord implements JsonSerializable<RegionRecord> {
    /*
     * Kind of the cluster
     */
    private String kind;

    /*
     * Id of the cluster
     */
    private String id;

    /*
     * Region Properties
     */
    private RegionProperties innerProperties;

    /**
     * Creates an instance of RegionRecord class.
     */
    public RegionRecord() {
    }

    /**
     * Get the kind property: Kind of the cluster.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Kind of the cluster.
     * 
     * @param kind the kind value to set.
     * @return the RegionRecord object itself.
     */
    public RegionRecord withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the id property: Id of the cluster.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Id of the cluster.
     * 
     * @param id the id value to set.
     * @return the RegionRecord object itself.
     */
    public RegionRecord withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the innerProperties property: Region Properties.
     * 
     * @return the innerProperties value.
     */
    private RegionProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the metadata property: Metadata of the record.
     * 
     * @return the metadata value.
     */
    public SCMetadataEntity metadata() {
        return this.innerProperties() == null ? null : this.innerProperties().metadata();
    }

    /**
     * Set the metadata property: Metadata of the record.
     * 
     * @param metadata the metadata value to set.
     * @return the RegionRecord object itself.
     */
    public RegionRecord withMetadata(SCMetadataEntity metadata) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegionProperties();
        }
        this.innerProperties().withMetadata(metadata);
        return this;
    }

    /**
     * Get the spec property: Specification of the region.
     * 
     * @return the spec value.
     */
    public RegionSpecEntity spec() {
        return this.innerProperties() == null ? null : this.innerProperties().spec();
    }

    /**
     * Set the spec property: Specification of the region.
     * 
     * @param spec the spec value to set.
     * @return the RegionRecord object itself.
     */
    public RegionRecord withSpec(RegionSpecEntity spec) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegionProperties();
        }
        this.innerProperties().withSpec(spec);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegionRecord from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegionRecord if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RegionRecord.
     */
    public static RegionRecord fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegionRecord deserializedRegionRecord = new RegionRecord();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedRegionRecord.kind = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedRegionRecord.id = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedRegionRecord.innerProperties = RegionProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegionRecord;
        });
    }
}
