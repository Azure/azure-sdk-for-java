// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Invite User Account model.
 */
@Fluent
public final class AccessInviteUserAccountModel implements JsonSerializable<AccessInviteUserAccountModel> {
    /*
     * Id of the organization
     */
    private String organizationId;

    /*
     * Email of the logged in user
     */
    private String email;

    /*
     * Upn of the logged in user
     */
    private String upn;

    /*
     * Details of the user who is being invited
     */
    private AccessInvitedUserDetails invitedUserDetails;

    /**
     * Creates an instance of AccessInviteUserAccountModel class.
     */
    public AccessInviteUserAccountModel() {
    }

    /**
     * Get the organizationId property: Id of the organization.
     * 
     * @return the organizationId value.
     */
    public String organizationId() {
        return this.organizationId;
    }

    /**
     * Set the organizationId property: Id of the organization.
     * 
     * @param organizationId the organizationId value to set.
     * @return the AccessInviteUserAccountModel object itself.
     */
    public AccessInviteUserAccountModel withOrganizationId(String organizationId) {
        this.organizationId = organizationId;
        return this;
    }

    /**
     * Get the email property: Email of the logged in user.
     * 
     * @return the email value.
     */
    public String email() {
        return this.email;
    }

    /**
     * Set the email property: Email of the logged in user.
     * 
     * @param email the email value to set.
     * @return the AccessInviteUserAccountModel object itself.
     */
    public AccessInviteUserAccountModel withEmail(String email) {
        this.email = email;
        return this;
    }

    /**
     * Get the upn property: Upn of the logged in user.
     * 
     * @return the upn value.
     */
    public String upn() {
        return this.upn;
    }

    /**
     * Set the upn property: Upn of the logged in user.
     * 
     * @param upn the upn value to set.
     * @return the AccessInviteUserAccountModel object itself.
     */
    public AccessInviteUserAccountModel withUpn(String upn) {
        this.upn = upn;
        return this;
    }

    /**
     * Get the invitedUserDetails property: Details of the user who is being invited.
     * 
     * @return the invitedUserDetails value.
     */
    public AccessInvitedUserDetails invitedUserDetails() {
        return this.invitedUserDetails;
    }

    /**
     * Set the invitedUserDetails property: Details of the user who is being invited.
     * 
     * @param invitedUserDetails the invitedUserDetails value to set.
     * @return the AccessInviteUserAccountModel object itself.
     */
    public AccessInviteUserAccountModel withInvitedUserDetails(AccessInvitedUserDetails invitedUserDetails) {
        this.invitedUserDetails = invitedUserDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (invitedUserDetails() != null) {
            invitedUserDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("organizationId", this.organizationId);
        jsonWriter.writeStringField("email", this.email);
        jsonWriter.writeStringField("upn", this.upn);
        jsonWriter.writeJsonField("invitedUserDetails", this.invitedUserDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessInviteUserAccountModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessInviteUserAccountModel if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccessInviteUserAccountModel.
     */
    public static AccessInviteUserAccountModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessInviteUserAccountModel deserializedAccessInviteUserAccountModel = new AccessInviteUserAccountModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("organizationId".equals(fieldName)) {
                    deserializedAccessInviteUserAccountModel.organizationId = reader.getString();
                } else if ("email".equals(fieldName)) {
                    deserializedAccessInviteUserAccountModel.email = reader.getString();
                } else if ("upn".equals(fieldName)) {
                    deserializedAccessInviteUserAccountModel.upn = reader.getString();
                } else if ("invitedUserDetails".equals(fieldName)) {
                    deserializedAccessInviteUserAccountModel.invitedUserDetails
                        = AccessInvitedUserDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessInviteUserAccountModel;
        });
    }
}
