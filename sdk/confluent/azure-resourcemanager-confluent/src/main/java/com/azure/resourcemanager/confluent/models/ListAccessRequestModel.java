// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * List Access Request Model.
 */
@Fluent
public final class ListAccessRequestModel implements JsonSerializable<ListAccessRequestModel> {
    /*
     * Search filters for the request
     */
    private Map<String, String> searchFilters;

    /**
     * Creates an instance of ListAccessRequestModel class.
     */
    public ListAccessRequestModel() {
    }

    /**
     * Get the searchFilters property: Search filters for the request.
     * 
     * @return the searchFilters value.
     */
    public Map<String, String> searchFilters() {
        return this.searchFilters;
    }

    /**
     * Set the searchFilters property: Search filters for the request.
     * 
     * @param searchFilters the searchFilters value to set.
     * @return the ListAccessRequestModel object itself.
     */
    public ListAccessRequestModel withSearchFilters(Map<String, String> searchFilters) {
        this.searchFilters = searchFilters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("searchFilters", this.searchFilters, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ListAccessRequestModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ListAccessRequestModel if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ListAccessRequestModel.
     */
    public static ListAccessRequestModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ListAccessRequestModel deserializedListAccessRequestModel = new ListAccessRequestModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("searchFilters".equals(fieldName)) {
                    Map<String, String> searchFilters = reader.readMap(reader1 -> reader1.getString());
                    deserializedListAccessRequestModel.searchFilters = searchFilters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedListAccessRequestModel;
        });
    }
}
