// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Spec of the API Key record.
 */
@Fluent
public final class ApiKeySpecEntity implements JsonSerializable<ApiKeySpecEntity> {
    /*
     * The description of the API Key
     */
    private String description;

    /*
     * The name of the API Key
     */
    private String name;

    /*
     * API Key Secret
     */
    private String secret;

    /*
     * Specification of the cluster
     */
    private ApiKeyResourceEntity resource;

    /*
     * Specification of the cluster
     */
    private ApiKeyOwnerEntity owner;

    /**
     * Creates an instance of ApiKeySpecEntity class.
     */
    public ApiKeySpecEntity() {
    }

    /**
     * Get the description property: The description of the API Key.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the API Key.
     * 
     * @param description the description value to set.
     * @return the ApiKeySpecEntity object itself.
     */
    public ApiKeySpecEntity withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the name property: The name of the API Key.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the API Key.
     * 
     * @param name the name value to set.
     * @return the ApiKeySpecEntity object itself.
     */
    public ApiKeySpecEntity withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the secret property: API Key Secret.
     * 
     * @return the secret value.
     */
    public String secret() {
        return this.secret;
    }

    /**
     * Set the secret property: API Key Secret.
     * 
     * @param secret the secret value to set.
     * @return the ApiKeySpecEntity object itself.
     */
    public ApiKeySpecEntity withSecret(String secret) {
        this.secret = secret;
        return this;
    }

    /**
     * Get the resource property: Specification of the cluster.
     * 
     * @return the resource value.
     */
    public ApiKeyResourceEntity resource() {
        return this.resource;
    }

    /**
     * Set the resource property: Specification of the cluster.
     * 
     * @param resource the resource value to set.
     * @return the ApiKeySpecEntity object itself.
     */
    public ApiKeySpecEntity withResource(ApiKeyResourceEntity resource) {
        this.resource = resource;
        return this;
    }

    /**
     * Get the owner property: Specification of the cluster.
     * 
     * @return the owner value.
     */
    public ApiKeyOwnerEntity owner() {
        return this.owner;
    }

    /**
     * Set the owner property: Specification of the cluster.
     * 
     * @param owner the owner value to set.
     * @return the ApiKeySpecEntity object itself.
     */
    public ApiKeySpecEntity withOwner(ApiKeyOwnerEntity owner) {
        this.owner = owner;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resource() != null) {
            resource().validate();
        }
        if (owner() != null) {
            owner().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("secret", this.secret);
        jsonWriter.writeJsonField("resource", this.resource);
        jsonWriter.writeJsonField("owner", this.owner);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApiKeySpecEntity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApiKeySpecEntity if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApiKeySpecEntity.
     */
    public static ApiKeySpecEntity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApiKeySpecEntity deserializedApiKeySpecEntity = new ApiKeySpecEntity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedApiKeySpecEntity.description = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedApiKeySpecEntity.name = reader.getString();
                } else if ("secret".equals(fieldName)) {
                    deserializedApiKeySpecEntity.secret = reader.getString();
                } else if ("resource".equals(fieldName)) {
                    deserializedApiKeySpecEntity.resource = ApiKeyResourceEntity.fromJson(reader);
                } else if ("owner".equals(fieldName)) {
                    deserializedApiKeySpecEntity.owner = ApiKeyOwnerEntity.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApiKeySpecEntity;
        });
    }
}
