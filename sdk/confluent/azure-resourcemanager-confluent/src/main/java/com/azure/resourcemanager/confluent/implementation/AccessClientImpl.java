// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.confluent.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.confluent.fluent.AccessClient;
import com.azure.resourcemanager.confluent.fluent.models.AccessListClusterSuccessResponseInner;
import com.azure.resourcemanager.confluent.fluent.models.AccessListEnvironmentsSuccessResponseInner;
import com.azure.resourcemanager.confluent.fluent.models.AccessListInvitationsSuccessResponseInner;
import com.azure.resourcemanager.confluent.fluent.models.AccessListRoleBindingsSuccessResponseInner;
import com.azure.resourcemanager.confluent.fluent.models.AccessListServiceAccountsSuccessResponseInner;
import com.azure.resourcemanager.confluent.fluent.models.AccessListUsersSuccessResponseInner;
import com.azure.resourcemanager.confluent.fluent.models.AccessRoleBindingNameListSuccessResponseInner;
import com.azure.resourcemanager.confluent.fluent.models.InvitationRecordInner;
import com.azure.resourcemanager.confluent.models.AccessCreateRoleBindingRequestModel;
import com.azure.resourcemanager.confluent.models.AccessInviteUserAccountModel;
import com.azure.resourcemanager.confluent.models.ListAccessRequestModel;
import com.azure.resourcemanager.confluent.models.RoleBindingRecord;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in AccessClient.
 */
public final class AccessClientImpl implements AccessClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AccessService service;

    /**
     * The service client containing this operation class.
     */
    private final ConfluentManagementClientImpl client;

    /**
     * Initializes an instance of AccessClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AccessClientImpl(ConfluentManagementClientImpl client) {
        this.service = RestProxy.create(AccessService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ConfluentManagementClientAccess to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ConfluentManagementC")
    public interface AccessService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listUsers")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AccessListUsersSuccessResponseInner>> listUsers(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("organizationName") String organizationName,
            @BodyParam("application/json") ListAccessRequestModel body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listServiceAccounts")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AccessListServiceAccountsSuccessResponseInner>> listServiceAccounts(
            @HostParam("$host") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("organizationName") String organizationName,
            @BodyParam("application/json") ListAccessRequestModel body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listInvitations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AccessListInvitationsSuccessResponseInner>> listInvitations(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("organizationName") String organizationName,
            @BodyParam("application/json") ListAccessRequestModel body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/createInvitation")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<InvitationRecordInner>> inviteUser(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("organizationName") String organizationName,
            @BodyParam("application/json") AccessInviteUserAccountModel body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listEnvironments")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AccessListEnvironmentsSuccessResponseInner>> listEnvironments(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("organizationName") String organizationName,
            @BodyParam("application/json") ListAccessRequestModel body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listClusters")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AccessListClusterSuccessResponseInner>> listClusters(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("organizationName") String organizationName,
            @BodyParam("application/json") ListAccessRequestModel body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listRoleBindings")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AccessListRoleBindingsSuccessResponseInner>> listRoleBindings(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("organizationName") String organizationName,
            @BodyParam("application/json") ListAccessRequestModel body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/createRoleBinding")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RoleBindingRecord>> createRoleBinding(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("organizationName") String organizationName,
            @BodyParam("application/json") AccessCreateRoleBindingRequestModel body,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/deleteRoleBinding/{roleBindingId}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> deleteRoleBinding(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("organizationName") String organizationName, @PathParam("roleBindingId") String roleBindingId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listRoleBindingNameList")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AccessRoleBindingNameListSuccessResponseInner>> listRoleBindingNameList(
            @HostParam("$host") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("organizationName") String organizationName,
            @BodyParam("application/json") ListAccessRequestModel body, @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Organization users details.
     * 
     * @param resourceGroupName Resource group name.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list users success response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AccessListUsersSuccessResponseInner>> listUsersWithResponseAsync(String resourceGroupName,
        String organizationName, ListAccessRequestModel body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listUsers(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, organizationName, body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Organization users details.
     * 
     * @param resourceGroupName Resource group name.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list users success response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AccessListUsersSuccessResponseInner>> listUsersWithResponseAsync(String resourceGroupName,
        String organizationName, ListAccessRequestModel body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listUsers(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, organizationName, body, accept, context);
    }

    /**
     * Organization users details.
     * 
     * @param resourceGroupName Resource group name.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list users success response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AccessListUsersSuccessResponseInner> listUsersAsync(String resourceGroupName, String organizationName,
        ListAccessRequestModel body) {
        return listUsersWithResponseAsync(resourceGroupName, organizationName, body)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Organization users details.
     * 
     * @param resourceGroupName Resource group name.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list users success response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AccessListUsersSuccessResponseInner> listUsersWithResponse(String resourceGroupName,
        String organizationName, ListAccessRequestModel body, Context context) {
        return listUsersWithResponseAsync(resourceGroupName, organizationName, body, context).block();
    }

    /**
     * Organization users details.
     * 
     * @param resourceGroupName Resource group name.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list users success response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccessListUsersSuccessResponseInner listUsers(String resourceGroupName, String organizationName,
        ListAccessRequestModel body) {
        return listUsersWithResponse(resourceGroupName, organizationName, body, Context.NONE).getValue();
    }

    /**
     * Organization service accounts details.
     * 
     * @param resourceGroupName Resource group name.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list service accounts success response along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AccessListServiceAccountsSuccessResponseInner>> listServiceAccountsWithResponseAsync(
        String resourceGroupName, String organizationName, ListAccessRequestModel body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listServiceAccounts(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, organizationName, body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Organization service accounts details.
     * 
     * @param resourceGroupName Resource group name.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list service accounts success response along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AccessListServiceAccountsSuccessResponseInner>> listServiceAccountsWithResponseAsync(
        String resourceGroupName, String organizationName, ListAccessRequestModel body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listServiceAccounts(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, organizationName, body, accept, context);
    }

    /**
     * Organization service accounts details.
     * 
     * @param resourceGroupName Resource group name.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list service accounts success response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AccessListServiceAccountsSuccessResponseInner> listServiceAccountsAsync(String resourceGroupName,
        String organizationName, ListAccessRequestModel body) {
        return listServiceAccountsWithResponseAsync(resourceGroupName, organizationName, body)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Organization service accounts details.
     * 
     * @param resourceGroupName Resource group name.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list service accounts success response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AccessListServiceAccountsSuccessResponseInner> listServiceAccountsWithResponse(
        String resourceGroupName, String organizationName, ListAccessRequestModel body, Context context) {
        return listServiceAccountsWithResponseAsync(resourceGroupName, organizationName, body, context).block();
    }

    /**
     * Organization service accounts details.
     * 
     * @param resourceGroupName Resource group name.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list service accounts success response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccessListServiceAccountsSuccessResponseInner listServiceAccounts(String resourceGroupName,
        String organizationName, ListAccessRequestModel body) {
        return listServiceAccountsWithResponse(resourceGroupName, organizationName, body, Context.NONE).getValue();
    }

    /**
     * Organization accounts invitation details.
     * 
     * @param resourceGroupName Resource group name.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list invitations success response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AccessListInvitationsSuccessResponseInner>> listInvitationsWithResponseAsync(
        String resourceGroupName, String organizationName, ListAccessRequestModel body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listInvitations(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, organizationName, body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Organization accounts invitation details.
     * 
     * @param resourceGroupName Resource group name.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list invitations success response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AccessListInvitationsSuccessResponseInner>> listInvitationsWithResponseAsync(
        String resourceGroupName, String organizationName, ListAccessRequestModel body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listInvitations(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, organizationName, body, accept, context);
    }

    /**
     * Organization accounts invitation details.
     * 
     * @param resourceGroupName Resource group name.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list invitations success response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AccessListInvitationsSuccessResponseInner> listInvitationsAsync(String resourceGroupName,
        String organizationName, ListAccessRequestModel body) {
        return listInvitationsWithResponseAsync(resourceGroupName, organizationName, body)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Organization accounts invitation details.
     * 
     * @param resourceGroupName Resource group name.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list invitations success response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AccessListInvitationsSuccessResponseInner> listInvitationsWithResponse(String resourceGroupName,
        String organizationName, ListAccessRequestModel body, Context context) {
        return listInvitationsWithResponseAsync(resourceGroupName, organizationName, body, context).block();
    }

    /**
     * Organization accounts invitation details.
     * 
     * @param resourceGroupName Resource group name.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list invitations success response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccessListInvitationsSuccessResponseInner listInvitations(String resourceGroupName, String organizationName,
        ListAccessRequestModel body) {
        return listInvitationsWithResponse(resourceGroupName, organizationName, body, Context.NONE).getValue();
    }

    /**
     * Invite user to the organization.
     * 
     * @param resourceGroupName Resource group name.
     * @param organizationName Organization resource name.
     * @param body Invite user account model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return record of the invitation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InvitationRecordInner>> inviteUserWithResponseAsync(String resourceGroupName,
        String organizationName, AccessInviteUserAccountModel body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.inviteUser(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, organizationName, body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Invite user to the organization.
     * 
     * @param resourceGroupName Resource group name.
     * @param organizationName Organization resource name.
     * @param body Invite user account model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return record of the invitation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<InvitationRecordInner>> inviteUserWithResponseAsync(String resourceGroupName,
        String organizationName, AccessInviteUserAccountModel body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.inviteUser(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, organizationName, body, accept, context);
    }

    /**
     * Invite user to the organization.
     * 
     * @param resourceGroupName Resource group name.
     * @param organizationName Organization resource name.
     * @param body Invite user account model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return record of the invitation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<InvitationRecordInner> inviteUserAsync(String resourceGroupName, String organizationName,
        AccessInviteUserAccountModel body) {
        return inviteUserWithResponseAsync(resourceGroupName, organizationName, body)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Invite user to the organization.
     * 
     * @param resourceGroupName Resource group name.
     * @param organizationName Organization resource name.
     * @param body Invite user account model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return record of the invitation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<InvitationRecordInner> inviteUserWithResponse(String resourceGroupName, String organizationName,
        AccessInviteUserAccountModel body, Context context) {
        return inviteUserWithResponseAsync(resourceGroupName, organizationName, body, context).block();
    }

    /**
     * Invite user to the organization.
     * 
     * @param resourceGroupName Resource group name.
     * @param organizationName Organization resource name.
     * @param body Invite user account model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return record of the invitation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InvitationRecordInner inviteUser(String resourceGroupName, String organizationName,
        AccessInviteUserAccountModel body) {
        return inviteUserWithResponse(resourceGroupName, organizationName, body, Context.NONE).getValue();
    }

    /**
     * Environment list of an organization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the environments returned on successful response along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AccessListEnvironmentsSuccessResponseInner>> listEnvironmentsWithResponseAsync(
        String resourceGroupName, String organizationName, ListAccessRequestModel body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listEnvironments(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, organizationName, body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Environment list of an organization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the environments returned on successful response along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AccessListEnvironmentsSuccessResponseInner>> listEnvironmentsWithResponseAsync(
        String resourceGroupName, String organizationName, ListAccessRequestModel body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listEnvironments(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, organizationName, body, accept, context);
    }

    /**
     * Environment list of an organization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the environments returned on successful response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AccessListEnvironmentsSuccessResponseInner> listEnvironmentsAsync(String resourceGroupName,
        String organizationName, ListAccessRequestModel body) {
        return listEnvironmentsWithResponseAsync(resourceGroupName, organizationName, body)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Environment list of an organization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the environments returned on successful response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AccessListEnvironmentsSuccessResponseInner> listEnvironmentsWithResponse(String resourceGroupName,
        String organizationName, ListAccessRequestModel body, Context context) {
        return listEnvironmentsWithResponseAsync(resourceGroupName, organizationName, body, context).block();
    }

    /**
     * Environment list of an organization.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the environments returned on successful response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccessListEnvironmentsSuccessResponseInner listEnvironments(String resourceGroupName,
        String organizationName, ListAccessRequestModel body) {
        return listEnvironmentsWithResponse(resourceGroupName, organizationName, body, Context.NONE).getValue();
    }

    /**
     * Cluster details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the clusters returned on successful response along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AccessListClusterSuccessResponseInner>>
        listClustersWithResponseAsync(String resourceGroupName, String organizationName, ListAccessRequestModel body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listClusters(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, organizationName, body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Cluster details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the clusters returned on successful response along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AccessListClusterSuccessResponseInner>> listClustersWithResponseAsync(
        String resourceGroupName, String organizationName, ListAccessRequestModel body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listClusters(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, organizationName, body, accept, context);
    }

    /**
     * Cluster details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the clusters returned on successful response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AccessListClusterSuccessResponseInner> listClustersAsync(String resourceGroupName,
        String organizationName, ListAccessRequestModel body) {
        return listClustersWithResponseAsync(resourceGroupName, organizationName, body)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Cluster details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the clusters returned on successful response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AccessListClusterSuccessResponseInner> listClustersWithResponse(String resourceGroupName,
        String organizationName, ListAccessRequestModel body, Context context) {
        return listClustersWithResponseAsync(resourceGroupName, organizationName, body, context).block();
    }

    /**
     * Cluster details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the clusters returned on successful response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccessListClusterSuccessResponseInner listClusters(String resourceGroupName, String organizationName,
        ListAccessRequestModel body) {
        return listClustersWithResponse(resourceGroupName, organizationName, body, Context.NONE).getValue();
    }

    /**
     * Organization role bindings.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the role bindings returned on successful response along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AccessListRoleBindingsSuccessResponseInner>> listRoleBindingsWithResponseAsync(
        String resourceGroupName, String organizationName, ListAccessRequestModel body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listRoleBindings(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, organizationName, body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Organization role bindings.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the role bindings returned on successful response along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AccessListRoleBindingsSuccessResponseInner>> listRoleBindingsWithResponseAsync(
        String resourceGroupName, String organizationName, ListAccessRequestModel body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listRoleBindings(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, organizationName, body, accept, context);
    }

    /**
     * Organization role bindings.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the role bindings returned on successful response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AccessListRoleBindingsSuccessResponseInner> listRoleBindingsAsync(String resourceGroupName,
        String organizationName, ListAccessRequestModel body) {
        return listRoleBindingsWithResponseAsync(resourceGroupName, organizationName, body)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Organization role bindings.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the role bindings returned on successful response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AccessListRoleBindingsSuccessResponseInner> listRoleBindingsWithResponse(String resourceGroupName,
        String organizationName, ListAccessRequestModel body, Context context) {
        return listRoleBindingsWithResponseAsync(resourceGroupName, organizationName, body, context).block();
    }

    /**
     * Organization role bindings.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the role bindings returned on successful response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccessListRoleBindingsSuccessResponseInner listRoleBindings(String resourceGroupName,
        String organizationName, ListAccessRequestModel body) {
        return listRoleBindingsWithResponse(resourceGroupName, organizationName, body, Context.NONE).getValue();
    }

    /**
     * Organization role bindings.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body Create role binding Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details on principal, role name and crn pattern of a role binding along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RoleBindingRecord>> createRoleBindingWithResponseAsync(String resourceGroupName,
        String organizationName, AccessCreateRoleBindingRequestModel body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createRoleBinding(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, organizationName, body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Organization role bindings.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body Create role binding Request Model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details on principal, role name and crn pattern of a role binding along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RoleBindingRecord>> createRoleBindingWithResponseAsync(String resourceGroupName,
        String organizationName, AccessCreateRoleBindingRequestModel body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createRoleBinding(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, organizationName, body, accept, context);
    }

    /**
     * Organization role bindings.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body Create role binding Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details on principal, role name and crn pattern of a role binding on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RoleBindingRecord> createRoleBindingAsync(String resourceGroupName, String organizationName,
        AccessCreateRoleBindingRequestModel body) {
        return createRoleBindingWithResponseAsync(resourceGroupName, organizationName, body)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Organization role bindings.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body Create role binding Request Model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details on principal, role name and crn pattern of a role binding along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RoleBindingRecord> createRoleBindingWithResponse(String resourceGroupName, String organizationName,
        AccessCreateRoleBindingRequestModel body, Context context) {
        return createRoleBindingWithResponseAsync(resourceGroupName, organizationName, body, context).block();
    }

    /**
     * Organization role bindings.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body Create role binding Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details on principal, role name and crn pattern of a role binding.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RoleBindingRecord createRoleBinding(String resourceGroupName, String organizationName,
        AccessCreateRoleBindingRequestModel body) {
        return createRoleBindingWithResponse(resourceGroupName, organizationName, body, Context.NONE).getValue();
    }

    /**
     * Organization role bindings.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param roleBindingId Confluent Role binding id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteRoleBindingWithResponseAsync(String resourceGroupName, String organizationName,
        String roleBindingId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (roleBindingId == null) {
            return Mono.error(new IllegalArgumentException("Parameter roleBindingId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.deleteRoleBinding(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, organizationName, roleBindingId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Organization role bindings.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param roleBindingId Confluent Role binding id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteRoleBindingWithResponseAsync(String resourceGroupName, String organizationName,
        String roleBindingId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (roleBindingId == null) {
            return Mono.error(new IllegalArgumentException("Parameter roleBindingId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.deleteRoleBinding(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, organizationName, roleBindingId, accept, context);
    }

    /**
     * Organization role bindings.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param roleBindingId Confluent Role binding id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteRoleBindingAsync(String resourceGroupName, String organizationName, String roleBindingId) {
        return deleteRoleBindingWithResponseAsync(resourceGroupName, organizationName, roleBindingId)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Organization role bindings.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param roleBindingId Confluent Role binding id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRoleBindingWithResponse(String resourceGroupName, String organizationName,
        String roleBindingId, Context context) {
        return deleteRoleBindingWithResponseAsync(resourceGroupName, organizationName, roleBindingId, context).block();
    }

    /**
     * Organization role bindings.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param roleBindingId Confluent Role binding id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteRoleBinding(String resourceGroupName, String organizationName, String roleBindingId) {
        deleteRoleBindingWithResponse(resourceGroupName, organizationName, roleBindingId, Context.NONE);
    }

    /**
     * Organization role bindings.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the role binding names returned on successful response along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AccessRoleBindingNameListSuccessResponseInner>> listRoleBindingNameListWithResponseAsync(
        String resourceGroupName, String organizationName, ListAccessRequestModel body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listRoleBindingNameList(this.client.getEndpoint(), this.client.getApiVersion(),
                    this.client.getSubscriptionId(), resourceGroupName, organizationName, body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Organization role bindings.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the role binding names returned on successful response along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AccessRoleBindingNameListSuccessResponseInner>> listRoleBindingNameListWithResponseAsync(
        String resourceGroupName, String organizationName, ListAccessRequestModel body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (organizationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter organizationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listRoleBindingNameList(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, organizationName, body, accept, context);
    }

    /**
     * Organization role bindings.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the role binding names returned on successful response on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AccessRoleBindingNameListSuccessResponseInner> listRoleBindingNameListAsync(String resourceGroupName,
        String organizationName, ListAccessRequestModel body) {
        return listRoleBindingNameListWithResponseAsync(resourceGroupName, organizationName, body)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Organization role bindings.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the role binding names returned on successful response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AccessRoleBindingNameListSuccessResponseInner> listRoleBindingNameListWithResponse(
        String resourceGroupName, String organizationName, ListAccessRequestModel body, Context context) {
        return listRoleBindingNameListWithResponseAsync(resourceGroupName, organizationName, body, context).block();
    }

    /**
     * Organization role bindings.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Organization resource name.
     * @param body List Access Request Model.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the role binding names returned on successful response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AccessRoleBindingNameListSuccessResponseInner listRoleBindingNameList(String resourceGroupName,
        String organizationName, ListAccessRequestModel body) {
        return listRoleBindingNameListWithResponse(resourceGroupName, organizationName, body, Context.NONE).getValue();
    }
}
