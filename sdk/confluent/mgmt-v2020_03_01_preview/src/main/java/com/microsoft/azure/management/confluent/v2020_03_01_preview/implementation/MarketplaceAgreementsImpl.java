/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.confluent.v2020_03_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.confluent.v2020_03_01_preview.MarketplaceAgreements;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.confluent.v2020_03_01_preview.ConfluentAgreementResource;
import com.microsoft.azure.arm.utils.PagedListConverter;

class MarketplaceAgreementsImpl extends WrapperImpl<MarketplaceAgreementsInner> implements MarketplaceAgreements {
    private PagedListConverter<ConfluentAgreementResourceInner, ConfluentAgreementResource> converter;
    private final ConfluentManager manager;

    MarketplaceAgreementsImpl(ConfluentManager manager) {
        super(manager.inner().marketplaceAgreements());
        this.manager = manager;
        this.converter = new PagedListConverter<ConfluentAgreementResourceInner, ConfluentAgreementResource>() {
            @Override
            public Observable<ConfluentAgreementResource> typeConvertAsync(ConfluentAgreementResourceInner inner) {
                return Observable.just((ConfluentAgreementResource) wrapModel(inner));
            }
        };
    }

    public ConfluentManager manager() {
        return this.manager;
    }

    private ConfluentAgreementResourceImpl wrapModel(ConfluentAgreementResourceInner inner) {
        return  new ConfluentAgreementResourceImpl(inner, manager());
    }

    @Override
    public Observable<ConfluentAgreementResource> createAsync() {
        MarketplaceAgreementsInner client = this.inner();
        return client.createAsync()
        .map(new Func1<ConfluentAgreementResourceInner, ConfluentAgreementResource>() {
            @Override
            public ConfluentAgreementResource call(ConfluentAgreementResourceInner inner) {
                return new ConfluentAgreementResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public PagedList<ConfluentAgreementResource> list() {
        MarketplaceAgreementsInner client = this.inner();
        return converter.convert(client.list());
    }

    @Override
    public Observable<ConfluentAgreementResource> listAsync() {
        MarketplaceAgreementsInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<ConfluentAgreementResourceInner>, Iterable<ConfluentAgreementResourceInner>>() {
            @Override
            public Iterable<ConfluentAgreementResourceInner> call(Page<ConfluentAgreementResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ConfluentAgreementResourceInner, ConfluentAgreementResource>() {
            @Override
            public ConfluentAgreementResource call(ConfluentAgreementResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
