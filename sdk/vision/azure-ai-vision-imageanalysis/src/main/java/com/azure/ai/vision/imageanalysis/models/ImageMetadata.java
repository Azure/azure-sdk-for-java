// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.vision.imageanalysis.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Metadata associated with the analyzed image.
 */
@Immutable
public final class ImageMetadata implements JsonSerializable<ImageMetadata> {

    /*
     * The height of the image in pixels.
     */
    @Generated
    private final int height;

    /*
     * The width of the image in pixels.
     */
    @Generated
    private final int width;

    /**
     * Creates an instance of ImageMetadata class.
     *
     * @param height the height value to set.
     * @param width the width value to set.
     */
    @Generated
    private ImageMetadata(int height, int width) {
        this.height = height;
        this.width = width;
    }

    /**
     * Get the height property: The height of the image in pixels.
     *
     * @return the height value.
     */
    @Generated
    public int getHeight() {
        return this.height;
    }

    /**
     * Get the width property: The width of the image in pixels.
     *
     * @return the width value.
     */
    @Generated
    public int getWidth() {
        return this.width;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("height", this.height);
        jsonWriter.writeIntField("width", this.width);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageMetadata from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageMetadata if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImageMetadata.
     */
    @Generated
    public static ImageMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int height = 0;
            int width = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("height".equals(fieldName)) {
                    height = reader.getInt();
                } else if ("width".equals(fieldName)) {
                    width = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return new ImageMetadata(height, width);
        });
    }
}
