// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.vision.imageanalysis.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A region at the desired aspect ratio that can be used as image thumbnail.
 * The region preserves as much content as possible from the analyzed image, with priority given to detected faces.
 */
@Immutable
public final class CropRegion {

    /*
     * The aspect ratio of the crop region.
     * Aspect ratio is calculated by dividing the width of the region in pixels by its height in pixels.
     * The aspect ratio will be in the range 0.75 to 1.8 (inclusive) if provided by the developer during the analyze
     * call.
     * Otherwise, it will be in the range 0.5 to 2.0 (inclusive).
     */
    @Generated
    @JsonProperty(value = "aspectRatio")
    private double aspectRatio;

    /*
     * The bounding box of the region.
     */
    @Generated
    @JsonProperty(value = "boundingBox")
    private ImageBoundingBox boundingBox;

    /**
     * Creates an instance of CropRegion class.
     *
     * @param aspectRatio the aspectRatio value to set.
     * @param boundingBox the boundingBox value to set.
     */
    @Generated
    @JsonCreator
    private CropRegion(@JsonProperty(value = "aspectRatio") double aspectRatio,
        @JsonProperty(value = "boundingBox") ImageBoundingBox boundingBox) {
        this.aspectRatio = aspectRatio;
        this.boundingBox = boundingBox;
    }

    /**
     * Get the aspectRatio property: The aspect ratio of the crop region.
     * Aspect ratio is calculated by dividing the width of the region in pixels by its height in pixels.
     * The aspect ratio will be in the range 0.75 to 1.8 (inclusive) if provided by the developer during the analyze
     * call.
     * Otherwise, it will be in the range 0.5 to 2.0 (inclusive).
     *
     * @return the aspectRatio value.
     */
    @Generated
    public double getAspectRatio() {
        return this.aspectRatio;
    }

    /**
     * Get the boundingBox property: The bounding box of the region.
     *
     * @return the boundingBox value.
     */
    @Generated
    public ImageBoundingBox getBoundingBox() {
        return this.boundingBox;
    }
}
