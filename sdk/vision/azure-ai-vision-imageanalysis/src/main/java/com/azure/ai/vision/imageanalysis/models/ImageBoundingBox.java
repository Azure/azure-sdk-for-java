// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.vision.imageanalysis.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A basic rectangle specifying a sub-region of the image.
 */
@Immutable
public final class ImageBoundingBox implements JsonSerializable<ImageBoundingBox> {

    /*
     * X-coordinate of the top left point of the area, in pixels.
     */
    @Generated
    private final int x;

    /*
     * Y-coordinate of the top left point of the area, in pixels.
     */
    @Generated
    private final int y;

    /*
     * Width of the area, in pixels.
     */
    @Generated
    private final int width;

    /*
     * Height of the area, in pixels.
     */
    @Generated
    private final int height;

    /**
     * Creates an instance of ImageBoundingBox class.
     *
     * @param x the x value to set.
     * @param y the y value to set.
     * @param width the width value to set.
     * @param height the height value to set.
     */
    @Generated
    private ImageBoundingBox(int x, int y, int width, int height) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }

    /**
     * Get the x property: X-coordinate of the top left point of the area, in pixels.
     *
     * @return the x value.
     */
    @Generated
    public int getX() {
        return this.x;
    }

    /**
     * Get the y property: Y-coordinate of the top left point of the area, in pixels.
     *
     * @return the y value.
     */
    @Generated
    public int getY() {
        return this.y;
    }

    /**
     * Get the width property: Width of the area, in pixels.
     *
     * @return the width value.
     */
    @Generated
    public int getWidth() {
        return this.width;
    }

    /**
     * Get the height property: Height of the area, in pixels.
     *
     * @return the height value.
     */
    @Generated
    public int getHeight() {
        return this.height;
    }

    /**
     * Returns a compact string containing the bounding box values in a style suitable for printing.
     *
     * @return a string containing the bounding box values.
     */
    public String toString() {
        return new StringBuilder().append("{x=")
            .append(this.getX())
            .append(", y=")
            .append(this.getY())
            .append(", width=")
            .append(this.getWidth())
            .append(", height=")
            .append(this.getHeight())
            .append("}")
            .toString();
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("x", this.x);
        jsonWriter.writeIntField("y", this.y);
        jsonWriter.writeIntField("w", this.width);
        jsonWriter.writeIntField("h", this.height);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageBoundingBox from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageBoundingBox if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImageBoundingBox.
     */
    @Generated
    public static ImageBoundingBox fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int x = 0;
            int y = 0;
            int width = 0;
            int height = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("x".equals(fieldName)) {
                    x = reader.getInt();
                } else if ("y".equals(fieldName)) {
                    y = reader.getInt();
                } else if ("w".equals(fieldName)) {
                    width = reader.getInt();
                } else if ("h".equals(fieldName)) {
                    height = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return new ImageBoundingBox(x, y, width, height);
        });
    }
}
