// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.vision.imageanalysis.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the outcome of an Image Analysis operation.
 */
@Immutable
public final class ImageAnalysisResult implements JsonSerializable<ImageAnalysisResult> {

    /*
     * The generated phrase that describes the content of the analyzed image.
     */
    @Generated
    private CaptionResult caption;

    /*
     * The up to 10 generated phrases, the first describing the content of the whole image,
     * and the others describing the content of different regions of the image.
     */
    @Generated
    private DenseCaptionsResult denseCaptions;

    /*
     * Metadata associated with the analyzed image.
     */
    @Generated
    private final ImageMetadata metadata;

    /*
     * The cloud AI model used for the analysis
     */
    @Generated
    private final String modelVersion;

    /*
     * A list of detected physical objects in the analyzed image, and their location.
     */
    @Generated
    private ObjectsResult objects;

    /*
     * A list of detected people in the analyzed image, and their location.
     */
    @Generated
    private PeopleResult people;

    /*
     * The extracted printed and hand-written text in the analyze image. Also knows as OCR.
     */
    @Generated
    private ReadResult read;

    /*
     * A list of crop regions at the desired as aspect ratios (if provided) that can be used as image thumbnails.
     * These regions preserve as much content as possible from the analyzed image, with priority given to detected
     * faces.
     */
    @Generated
    private SmartCropsResult smartCrops;

    /*
     * A list of content tags in the analyzed image.
     */
    @Generated
    private TagsResult tags;

    /**
     * Creates an instance of ImageAnalysisResult class.
     *
     * @param metadata the metadata value to set.
     * @param modelVersion the modelVersion value to set.
     */
    @Generated
    private ImageAnalysisResult(ImageMetadata metadata, String modelVersion) {
        this.metadata = metadata;
        this.modelVersion = modelVersion;
    }

    /**
     * Get the caption property: The generated phrase that describes the content of the analyzed image.
     *
     * @return the caption value.
     */
    @Generated
    public CaptionResult getCaption() {
        return this.caption;
    }

    /**
     * Get the denseCaptions property: The up to 10 generated phrases, the first describing the content of the whole
     * image,
     * and the others describing the content of different regions of the image.
     *
     * @return the denseCaptions value.
     */
    @Generated
    public DenseCaptionsResult getDenseCaptions() {
        return this.denseCaptions;
    }

    /**
     * Get the metadata property: Metadata associated with the analyzed image.
     *
     * @return the metadata value.
     */
    @Generated
    public ImageMetadata getMetadata() {
        return this.metadata;
    }

    /**
     * Get the modelVersion property: The cloud AI model used for the analysis.
     *
     * @return the modelVersion value.
     */
    @Generated
    public String getModelVersion() {
        return this.modelVersion;
    }

    /**
     * Get the objects property: A list of detected physical objects in the analyzed image, and their location.
     *
     * @return the objects value.
     */
    @Generated
    public ObjectsResult getObjects() {
        return this.objects;
    }

    /**
     * Get the people property: A list of detected people in the analyzed image, and their location.
     *
     * @return the people value.
     */
    @Generated
    public PeopleResult getPeople() {
        return this.people;
    }

    /**
     * Get the read property: The extracted printed and hand-written text in the analyze image. Also knows as OCR.
     *
     * @return the read value.
     */
    @Generated
    public ReadResult getRead() {
        return this.read;
    }

    /**
     * Get the smartCrops property: A list of crop regions at the desired as aspect ratios (if provided) that can be
     * used as image thumbnails.
     * These regions preserve as much content as possible from the analyzed image, with priority given to detected
     * faces.
     *
     * @return the smartCrops value.
     */
    @Generated
    public SmartCropsResult getSmartCrops() {
        return this.smartCrops;
    }

    /**
     * Get the tags property: A list of content tags in the analyzed image.
     *
     * @return the tags value.
     */
    @Generated
    public TagsResult getTags() {
        return this.tags;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("metadata", this.metadata);
        jsonWriter.writeStringField("modelVersion", this.modelVersion);
        jsonWriter.writeJsonField("captionResult", this.caption);
        jsonWriter.writeJsonField("denseCaptionsResult", this.denseCaptions);
        jsonWriter.writeJsonField("objectsResult", this.objects);
        jsonWriter.writeJsonField("peopleResult", this.people);
        jsonWriter.writeJsonField("readResult", this.read);
        jsonWriter.writeJsonField("smartCropsResult", this.smartCrops);
        jsonWriter.writeJsonField("tagsResult", this.tags);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageAnalysisResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageAnalysisResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImageAnalysisResult.
     */
    @Generated
    public static ImageAnalysisResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageMetadata metadata = null;
            String modelVersion = null;
            CaptionResult caption = null;
            DenseCaptionsResult denseCaptions = null;
            ObjectsResult objects = null;
            PeopleResult people = null;
            ReadResult read = null;
            SmartCropsResult smartCrops = null;
            TagsResult tags = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("metadata".equals(fieldName)) {
                    metadata = ImageMetadata.fromJson(reader);
                } else if ("modelVersion".equals(fieldName)) {
                    modelVersion = reader.getString();
                } else if ("captionResult".equals(fieldName)) {
                    caption = CaptionResult.fromJson(reader);
                } else if ("denseCaptionsResult".equals(fieldName)) {
                    denseCaptions = DenseCaptionsResult.fromJson(reader);
                } else if ("objectsResult".equals(fieldName)) {
                    objects = ObjectsResult.fromJson(reader);
                } else if ("peopleResult".equals(fieldName)) {
                    people = PeopleResult.fromJson(reader);
                } else if ("readResult".equals(fieldName)) {
                    read = ReadResult.fromJson(reader);
                } else if ("smartCropsResult".equals(fieldName)) {
                    smartCrops = SmartCropsResult.fromJson(reader);
                } else if ("tagsResult".equals(fieldName)) {
                    tags = TagsResult.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            ImageAnalysisResult deserializedImageAnalysisResult = new ImageAnalysisResult(metadata, modelVersion);
            deserializedImageAnalysisResult.caption = caption;
            deserializedImageAnalysisResult.denseCaptions = denseCaptions;
            deserializedImageAnalysisResult.objects = objects;
            deserializedImageAnalysisResult.people = people;
            deserializedImageAnalysisResult.read = read;
            deserializedImageAnalysisResult.smartCrops = smartCrops;
            deserializedImageAnalysisResult.tags = tags;
            return deserializedImageAnalysisResult;
        });
    }
}
