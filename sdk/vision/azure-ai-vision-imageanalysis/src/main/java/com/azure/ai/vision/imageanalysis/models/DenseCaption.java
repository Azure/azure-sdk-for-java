// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.vision.imageanalysis.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a generated phrase that describes the content of the whole image or a region in the image.
 */
@Immutable
public final class DenseCaption implements JsonSerializable<DenseCaption> {

    /*
     * A score, in the range of 0 to 1 (inclusive), representing the confidence that this description is accurate.
     * Higher values indicating higher confidence.
     */
    @Generated
    private final double confidence;

    /*
     * The text of the caption.
     */
    @Generated
    private final String text;

    /*
     * The image region of which this caption applies.
     */
    @Generated
    private final ImageBoundingBox boundingBox;

    /**
     * Creates an instance of DenseCaption class.
     *
     * @param confidence the confidence value to set.
     * @param text the text value to set.
     * @param boundingBox the boundingBox value to set.
     */
    @Generated
    private DenseCaption(double confidence, String text, ImageBoundingBox boundingBox) {
        this.confidence = confidence;
        this.text = text;
        this.boundingBox = boundingBox;
    }

    /**
     * Get the confidence property: A score, in the range of 0 to 1 (inclusive), representing the confidence that this
     * description is accurate.
     * Higher values indicating higher confidence.
     *
     * @return the confidence value.
     */
    @Generated
    public double getConfidence() {
        return this.confidence;
    }

    /**
     * Get the text property: The text of the caption.
     *
     * @return the text value.
     */
    @Generated
    public String getText() {
        return this.text;
    }

    /**
     * Get the boundingBox property: The image region of which this caption applies.
     *
     * @return the boundingBox value.
     */
    @Generated
    public ImageBoundingBox getBoundingBox() {
        return this.boundingBox;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeDoubleField("confidence", this.confidence);
        jsonWriter.writeStringField("text", this.text);
        jsonWriter.writeJsonField("boundingBox", this.boundingBox);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DenseCaption from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DenseCaption if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DenseCaption.
     */
    @Generated
    public static DenseCaption fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            double confidence = 0.0;
            String text = null;
            ImageBoundingBox boundingBox = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("confidence".equals(fieldName)) {
                    confidence = reader.getDouble();
                } else if ("text".equals(fieldName)) {
                    text = reader.getString();
                } else if ("boundingBox".equals(fieldName)) {
                    boundingBox = ImageBoundingBox.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new DenseCaption(confidence, text, boundingBox);
        });
    }
}
