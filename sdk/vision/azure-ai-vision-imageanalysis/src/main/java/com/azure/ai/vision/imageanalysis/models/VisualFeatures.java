// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.imageanalysis.models;

/**
 * The visual features supported by the Image Analysis service.
 */
public enum VisualFeatures {
    /**
     * Extract content tags for thousands of recognizable objects, living beings, scenery, and actions that appear in
     * the image.
     */
    TAGS("tags"),

    /**
     * Generate a human-readable caption sentence that describes the content of the image.
     */
    CAPTION("caption"),

    /**
     * Generate human-readable caption sentences for up to 10 different regions in the image, including one for the
     * whole image.
     */
    DENSE_CAPTIONS("denseCaptions"),

    /**
     * Object detection. This is similar to tags, but focused on detecting physical objects in the image and returning
     * their location.
     */
    OBJECTS("objects"),

    /**
     * Extract printed or handwritten text from the image. Also known as Optical Character Recognition (OCR).
     */
    READ("read"),

    /**
     * Find representative sub-regions of the image for thumbnail generation, at desired aspect ratios, with priority
     * given to detected faces.
     */
    SMART_CROPS("smartCrops"),

    /**
     * Detect people in the image and return their location.
     */
    PEOPLE("people");

    /**
     * The actual serialized value for a VisualFeatures instance.
     */
    private final String value;

    VisualFeatures(String value) {
        this.value = value;
    }

    /**
     * Parses a serialized value to a VisualFeatures instance.
     * 
     * @param value the serialized value to parse.
     * @return the parsed VisualFeatures object, or null if unable to parse.
     */
    public static VisualFeatures fromString(String value) {
        if (value == null) {
            return null;
        }
        VisualFeatures[] items = VisualFeatures.values();
        for (VisualFeatures item : items) {
            if (item.toString().equalsIgnoreCase(value)) {
                return item;
            }
        }
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String toString() {
        return this.value;
    }
}
