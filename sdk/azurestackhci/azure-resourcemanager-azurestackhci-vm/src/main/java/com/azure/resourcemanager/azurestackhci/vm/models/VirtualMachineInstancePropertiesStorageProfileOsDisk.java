// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * VHD to attach as OS disk.
 */
@Fluent
public final class VirtualMachineInstancePropertiesStorageProfileOsDisk
    implements JsonSerializable<VirtualMachineInstancePropertiesStorageProfileOsDisk> {
    /*
     * The ARM ID for a Virtual Hard Disk.
     */
    private String id;

    /*
     * This property allows you to specify the type of the OS that is included in the disk if creating a VM from
     * user-image or a specialized VHD. Possible values are: Windows, Linux.
     */
    private OperatingSystemTypes osType;

    /*
     * The managed disk parameters.
     */
    private VirtualMachineInstanceManagedDiskParameters managedDisk;

    /**
     * Creates an instance of VirtualMachineInstancePropertiesStorageProfileOsDisk class.
     */
    public VirtualMachineInstancePropertiesStorageProfileOsDisk() {
    }

    /**
     * Get the id property: The ARM ID for a Virtual Hard Disk.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The ARM ID for a Virtual Hard Disk.
     * 
     * @param id the id value to set.
     * @return the VirtualMachineInstancePropertiesStorageProfileOsDisk object itself.
     */
    public VirtualMachineInstancePropertiesStorageProfileOsDisk withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the osType property: This property allows you to specify the type of the OS that is included in the disk if
     * creating a VM from user-image or a specialized VHD. Possible values are: Windows, Linux.
     * 
     * @return the osType value.
     */
    public OperatingSystemTypes osType() {
        return this.osType;
    }

    /**
     * Set the osType property: This property allows you to specify the type of the OS that is included in the disk if
     * creating a VM from user-image or a specialized VHD. Possible values are: Windows, Linux.
     * 
     * @param osType the osType value to set.
     * @return the VirtualMachineInstancePropertiesStorageProfileOsDisk object itself.
     */
    public VirtualMachineInstancePropertiesStorageProfileOsDisk withOsType(OperatingSystemTypes osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Get the managedDisk property: The managed disk parameters.
     * 
     * @return the managedDisk value.
     */
    public VirtualMachineInstanceManagedDiskParameters managedDisk() {
        return this.managedDisk;
    }

    /**
     * Set the managedDisk property: The managed disk parameters.
     * 
     * @param managedDisk the managedDisk value to set.
     * @return the VirtualMachineInstancePropertiesStorageProfileOsDisk object itself.
     */
    public VirtualMachineInstancePropertiesStorageProfileOsDisk
        withManagedDisk(VirtualMachineInstanceManagedDiskParameters managedDisk) {
        this.managedDisk = managedDisk;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (managedDisk() != null) {
            managedDisk().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("osType", this.osType == null ? null : this.osType.toString());
        jsonWriter.writeJsonField("managedDisk", this.managedDisk);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineInstancePropertiesStorageProfileOsDisk from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineInstancePropertiesStorageProfileOsDisk if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualMachineInstancePropertiesStorageProfileOsDisk.
     */
    public static VirtualMachineInstancePropertiesStorageProfileOsDisk fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineInstancePropertiesStorageProfileOsDisk deserializedVirtualMachineInstancePropertiesStorageProfileOsDisk
                = new VirtualMachineInstancePropertiesStorageProfileOsDisk();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedVirtualMachineInstancePropertiesStorageProfileOsDisk.id = reader.getString();
                } else if ("osType".equals(fieldName)) {
                    deserializedVirtualMachineInstancePropertiesStorageProfileOsDisk.osType
                        = OperatingSystemTypes.fromString(reader.getString());
                } else if ("managedDisk".equals(fieldName)) {
                    deserializedVirtualMachineInstancePropertiesStorageProfileOsDisk.managedDisk
                        = VirtualMachineInstanceManagedDiskParameters.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineInstancePropertiesStorageProfileOsDisk;
        });
    }
}
