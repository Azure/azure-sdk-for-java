// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the resource properties for the update.
 */
@Fluent
public final class VirtualHardDisksUpdateProperties implements JsonSerializable<VirtualHardDisksUpdateProperties> {
    /*
     * Size of the disk in GB
     */
    private Long diskSizeGB;

    /**
     * Creates an instance of VirtualHardDisksUpdateProperties class.
     */
    public VirtualHardDisksUpdateProperties() {
    }

    /**
     * Get the diskSizeGB property: Size of the disk in GB.
     * 
     * @return the diskSizeGB value.
     */
    public Long diskSizeGB() {
        return this.diskSizeGB;
    }

    /**
     * Set the diskSizeGB property: Size of the disk in GB.
     * 
     * @param diskSizeGB the diskSizeGB value to set.
     * @return the VirtualHardDisksUpdateProperties object itself.
     */
    public VirtualHardDisksUpdateProperties withDiskSizeGB(Long diskSizeGB) {
        this.diskSizeGB = diskSizeGB;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("diskSizeGB", this.diskSizeGB);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualHardDisksUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualHardDisksUpdateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualHardDisksUpdateProperties.
     */
    public static VirtualHardDisksUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualHardDisksUpdateProperties deserializedVirtualHardDisksUpdateProperties
                = new VirtualHardDisksUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskSizeGB".equals(fieldName)) {
                    deserializedVirtualHardDisksUpdateProperties.diskSizeGB = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualHardDisksUpdateProperties;
        });
    }
}
