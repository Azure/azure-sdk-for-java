// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Storage profile update.
 */
@Fluent
public final class StorageProfileUpdate implements JsonSerializable<StorageProfileUpdate> {
    /*
     * adds data disks to the virtual machine instance for the update call
     */
    private List<VirtualHardDiskArmReference> dataDisks;

    /**
     * Creates an instance of StorageProfileUpdate class.
     */
    public StorageProfileUpdate() {
    }

    /**
     * Get the dataDisks property: adds data disks to the virtual machine instance for the update call.
     * 
     * @return the dataDisks value.
     */
    public List<VirtualHardDiskArmReference> dataDisks() {
        return this.dataDisks;
    }

    /**
     * Set the dataDisks property: adds data disks to the virtual machine instance for the update call.
     * 
     * @param dataDisks the dataDisks value to set.
     * @return the StorageProfileUpdate object itself.
     */
    public StorageProfileUpdate withDataDisks(List<VirtualHardDiskArmReference> dataDisks) {
        this.dataDisks = dataDisks;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataDisks() != null) {
            dataDisks().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("dataDisks", this.dataDisks, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageProfileUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageProfileUpdate if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageProfileUpdate.
     */
    public static StorageProfileUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageProfileUpdate deserializedStorageProfileUpdate = new StorageProfileUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataDisks".equals(fieldName)) {
                    List<VirtualHardDiskArmReference> dataDisks
                        = reader.readArray(reader1 -> VirtualHardDiskArmReference.fromJson(reader1));
                    deserializedStorageProfileUpdate.dataDisks = dataDisks;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageProfileUpdate;
        });
    }
}
