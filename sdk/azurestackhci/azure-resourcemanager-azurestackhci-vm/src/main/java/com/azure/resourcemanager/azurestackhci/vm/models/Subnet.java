// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azurestackhci.vm.fluent.models.SubnetProperties;
import java.io.IOException;
import java.util.List;

/**
 * Properties of the subnet.
 */
@Fluent
public final class Subnet implements JsonSerializable<Subnet> {
    /*
     * Properties of the subnet.
     */
    private SubnetProperties innerProperties;

    /*
     * Name - The name of the resource that is unique within a resource group. This name can be used to access the
     * resource.
     */
    private String name;

    /**
     * Creates an instance of Subnet class.
     */
    public Subnet() {
    }

    /**
     * Get the innerProperties property: Properties of the subnet.
     * 
     * @return the innerProperties value.
     */
    private SubnetProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the name property: Name - The name of the resource that is unique within a resource group. This name can be
     * used to access the resource.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name - The name of the resource that is unique within a resource group. This name can be
     * used to access the resource.
     * 
     * @param name the name value to set.
     * @return the Subnet object itself.
     */
    public Subnet withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the addressPrefix property: The address prefix for the subnet: Cidr for this subnet - IPv4, IPv6.
     * 
     * @return the addressPrefix value.
     */
    public String addressPrefix() {
        return this.innerProperties() == null ? null : this.innerProperties().addressPrefix();
    }

    /**
     * Set the addressPrefix property: The address prefix for the subnet: Cidr for this subnet - IPv4, IPv6.
     * 
     * @param addressPrefix the addressPrefix value to set.
     * @return the Subnet object itself.
     */
    public Subnet withAddressPrefix(String addressPrefix) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SubnetProperties();
        }
        this.innerProperties().withAddressPrefix(addressPrefix);
        return this;
    }

    /**
     * Get the addressPrefixes property: List of address prefixes for the subnet.
     * 
     * @return the addressPrefixes value.
     */
    public List<String> addressPrefixes() {
        return this.innerProperties() == null ? null : this.innerProperties().addressPrefixes();
    }

    /**
     * Set the addressPrefixes property: List of address prefixes for the subnet.
     * 
     * @param addressPrefixes the addressPrefixes value to set.
     * @return the Subnet object itself.
     */
    public Subnet withAddressPrefixes(List<String> addressPrefixes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SubnetProperties();
        }
        this.innerProperties().withAddressPrefixes(addressPrefixes);
        return this;
    }

    /**
     * Get the ipAllocationMethod property: IPAllocationMethod - The IP address allocation method. Possible values
     * include: 'Static', 'Dynamic'.
     * 
     * @return the ipAllocationMethod value.
     */
    public IpAllocationMethodEnum ipAllocationMethod() {
        return this.innerProperties() == null ? null : this.innerProperties().ipAllocationMethod();
    }

    /**
     * Set the ipAllocationMethod property: IPAllocationMethod - The IP address allocation method. Possible values
     * include: 'Static', 'Dynamic'.
     * 
     * @param ipAllocationMethod the ipAllocationMethod value to set.
     * @return the Subnet object itself.
     */
    public Subnet withIpAllocationMethod(IpAllocationMethodEnum ipAllocationMethod) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SubnetProperties();
        }
        this.innerProperties().withIpAllocationMethod(ipAllocationMethod);
        return this;
    }

    /**
     * Get the ipConfigurationReferences property: IPConfigurationReferences - list of IPConfigurationReferences.
     * 
     * @return the ipConfigurationReferences value.
     */
    public List<SubnetIpConfigurationReference> ipConfigurationReferences() {
        return this.innerProperties() == null ? null : this.innerProperties().ipConfigurationReferences();
    }

    /**
     * Set the ipConfigurationReferences property: IPConfigurationReferences - list of IPConfigurationReferences.
     * 
     * @param ipConfigurationReferences the ipConfigurationReferences value to set.
     * @return the Subnet object itself.
     */
    public Subnet withIpConfigurationReferences(List<SubnetIpConfigurationReference> ipConfigurationReferences) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SubnetProperties();
        }
        this.innerProperties().withIpConfigurationReferences(ipConfigurationReferences);
        return this;
    }

    /**
     * Get the networkSecurityGroup property: NetworkSecurityGroup - Network Security Group attached to the logical
     * network.
     * 
     * @return the networkSecurityGroup value.
     */
    public NetworkSecurityGroupArmReference networkSecurityGroup() {
        return this.innerProperties() == null ? null : this.innerProperties().networkSecurityGroup();
    }

    /**
     * Set the networkSecurityGroup property: NetworkSecurityGroup - Network Security Group attached to the logical
     * network.
     * 
     * @param networkSecurityGroup the networkSecurityGroup value to set.
     * @return the Subnet object itself.
     */
    public Subnet withNetworkSecurityGroup(NetworkSecurityGroupArmReference networkSecurityGroup) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SubnetProperties();
        }
        this.innerProperties().withNetworkSecurityGroup(networkSecurityGroup);
        return this;
    }

    /**
     * Get the routeTable property: Route table resource.
     * 
     * @return the routeTable value.
     */
    public RouteTable routeTable() {
        return this.innerProperties() == null ? null : this.innerProperties().routeTable();
    }

    /**
     * Set the routeTable property: Route table resource.
     * 
     * @param routeTable the routeTable value to set.
     * @return the Subnet object itself.
     */
    public Subnet withRouteTable(RouteTable routeTable) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SubnetProperties();
        }
        this.innerProperties().withRouteTable(routeTable);
        return this;
    }

    /**
     * Get the ipPools property: network associated pool of IP Addresses.
     * 
     * @return the ipPools value.
     */
    public List<IPPool> ipPools() {
        return this.innerProperties() == null ? null : this.innerProperties().ipPools();
    }

    /**
     * Set the ipPools property: network associated pool of IP Addresses.
     * 
     * @param ipPools the ipPools value to set.
     * @return the Subnet object itself.
     */
    public Subnet withIpPools(List<IPPool> ipPools) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SubnetProperties();
        }
        this.innerProperties().withIpPools(ipPools);
        return this;
    }

    /**
     * Get the vlan property: Vlan to use for the subnet.
     * 
     * @return the vlan value.
     */
    public Integer vlan() {
        return this.innerProperties() == null ? null : this.innerProperties().vlan();
    }

    /**
     * Set the vlan property: Vlan to use for the subnet.
     * 
     * @param vlan the vlan value to set.
     * @return the Subnet object itself.
     */
    public Subnet withVlan(Integer vlan) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SubnetProperties();
        }
        this.innerProperties().withVlan(vlan);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Subnet from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Subnet if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Subnet.
     */
    public static Subnet fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Subnet deserializedSubnet = new Subnet();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedSubnet.innerProperties = SubnetProperties.fromJson(reader);
                } else if ("name".equals(fieldName)) {
                    deserializedSubnet.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubnet;
        });
    }
}
