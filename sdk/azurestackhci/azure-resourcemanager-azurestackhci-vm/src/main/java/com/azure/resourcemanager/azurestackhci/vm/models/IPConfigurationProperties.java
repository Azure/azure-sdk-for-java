// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * InterfaceIPConfigurationPropertiesFormat properties of IP configuration.
 */
@Fluent
public final class IPConfigurationProperties implements JsonSerializable<IPConfigurationProperties> {
    /*
     * Gateway for network interface
     */
    private String gateway;

    /*
     * prefixLength for network interface
     */
    private String prefixLength;

    /*
     * PrivateIPAddress - Private IP address of the IP configuration.
     */
    private String privateIPAddress;

    /*
     * Subnet - Name of Subnet bound to the IP configuration.
     */
    private LogicalNetworkArmReference subnet;

    /**
     * Creates an instance of IPConfigurationProperties class.
     */
    public IPConfigurationProperties() {
    }

    /**
     * Get the gateway property: Gateway for network interface.
     * 
     * @return the gateway value.
     */
    public String gateway() {
        return this.gateway;
    }

    /**
     * Get the prefixLength property: prefixLength for network interface.
     * 
     * @return the prefixLength value.
     */
    public String prefixLength() {
        return this.prefixLength;
    }

    /**
     * Get the privateIPAddress property: PrivateIPAddress - Private IP address of the IP configuration.
     * 
     * @return the privateIPAddress value.
     */
    public String privateIPAddress() {
        return this.privateIPAddress;
    }

    /**
     * Set the privateIPAddress property: PrivateIPAddress - Private IP address of the IP configuration.
     * 
     * @param privateIPAddress the privateIPAddress value to set.
     * @return the IPConfigurationProperties object itself.
     */
    public IPConfigurationProperties withPrivateIPAddress(String privateIPAddress) {
        this.privateIPAddress = privateIPAddress;
        return this;
    }

    /**
     * Get the subnet property: Subnet - Name of Subnet bound to the IP configuration.
     * 
     * @return the subnet value.
     */
    public LogicalNetworkArmReference subnet() {
        return this.subnet;
    }

    /**
     * Set the subnet property: Subnet - Name of Subnet bound to the IP configuration.
     * 
     * @param subnet the subnet value to set.
     * @return the IPConfigurationProperties object itself.
     */
    public IPConfigurationProperties withSubnet(LogicalNetworkArmReference subnet) {
        this.subnet = subnet;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subnet() != null) {
            subnet().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("privateIPAddress", this.privateIPAddress);
        jsonWriter.writeJsonField("subnet", this.subnet);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IPConfigurationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IPConfigurationProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IPConfigurationProperties.
     */
    public static IPConfigurationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IPConfigurationProperties deserializedIPConfigurationProperties = new IPConfigurationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("gateway".equals(fieldName)) {
                    deserializedIPConfigurationProperties.gateway = reader.getString();
                } else if ("prefixLength".equals(fieldName)) {
                    deserializedIPConfigurationProperties.prefixLength = reader.getString();
                } else if ("privateIPAddress".equals(fieldName)) {
                    deserializedIPConfigurationProperties.privateIPAddress = reader.getString();
                } else if ("subnet".equals(fieldName)) {
                    deserializedIPConfigurationProperties.subnet = LogicalNetworkArmReference.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIPConfigurationProperties;
        });
    }
}
