// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The observed state of virtual hard disks.
 */
@Immutable
public final class VirtualHardDiskStatus implements JsonSerializable<VirtualHardDiskStatus> {
    /*
     * VirtualHardDisk provisioning error code
     */
    private String errorCode;

    /*
     * Descriptive error message
     */
    private String errorMessage;

    /*
     * Provisioning status of the vhd
     */
    private VirtualHardDiskStatusProvisioningStatus provisioningStatus;

    /*
     * The download status of the virtual hard disk
     */
    private VirtualHardDiskDownloadStatus downloadStatus;

    /*
     * The upload status of the virtual hard disk
     */
    private VirtualHardDiskUploadStatus uploadStatus;

    /*
     * ARM IDs of the VMs that are consuming the VHD.
     */
    private List<String> managedBy;

    /*
     * Unique Guid identifying the resource.
     */
    private String uniqueId;

    /**
     * Creates an instance of VirtualHardDiskStatus class.
     */
    private VirtualHardDiskStatus() {
    }

    /**
     * Get the errorCode property: VirtualHardDisk provisioning error code.
     * 
     * @return the errorCode value.
     */
    public String errorCode() {
        return this.errorCode;
    }

    /**
     * Get the errorMessage property: Descriptive error message.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Get the provisioningStatus property: Provisioning status of the vhd.
     * 
     * @return the provisioningStatus value.
     */
    public VirtualHardDiskStatusProvisioningStatus provisioningStatus() {
        return this.provisioningStatus;
    }

    /**
     * Get the downloadStatus property: The download status of the virtual hard disk.
     * 
     * @return the downloadStatus value.
     */
    public VirtualHardDiskDownloadStatus downloadStatus() {
        return this.downloadStatus;
    }

    /**
     * Get the uploadStatus property: The upload status of the virtual hard disk.
     * 
     * @return the uploadStatus value.
     */
    public VirtualHardDiskUploadStatus uploadStatus() {
        return this.uploadStatus;
    }

    /**
     * Get the managedBy property: ARM IDs of the VMs that are consuming the VHD.
     * 
     * @return the managedBy value.
     */
    public List<String> managedBy() {
        return this.managedBy;
    }

    /**
     * Get the uniqueId property: Unique Guid identifying the resource.
     * 
     * @return the uniqueId value.
     */
    public String uniqueId() {
        return this.uniqueId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (provisioningStatus() != null) {
            provisioningStatus().validate();
        }
        if (downloadStatus() != null) {
            downloadStatus().validate();
        }
        if (uploadStatus() != null) {
            uploadStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("errorCode", this.errorCode);
        jsonWriter.writeStringField("errorMessage", this.errorMessage);
        jsonWriter.writeJsonField("provisioningStatus", this.provisioningStatus);
        jsonWriter.writeJsonField("downloadStatus", this.downloadStatus);
        jsonWriter.writeJsonField("uploadStatus", this.uploadStatus);
        jsonWriter.writeArrayField("managedBy", this.managedBy, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("uniqueId", this.uniqueId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualHardDiskStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualHardDiskStatus if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualHardDiskStatus.
     */
    public static VirtualHardDiskStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualHardDiskStatus deserializedVirtualHardDiskStatus = new VirtualHardDiskStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errorCode".equals(fieldName)) {
                    deserializedVirtualHardDiskStatus.errorCode = reader.getString();
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedVirtualHardDiskStatus.errorMessage = reader.getString();
                } else if ("provisioningStatus".equals(fieldName)) {
                    deserializedVirtualHardDiskStatus.provisioningStatus
                        = VirtualHardDiskStatusProvisioningStatus.fromJson(reader);
                } else if ("downloadStatus".equals(fieldName)) {
                    deserializedVirtualHardDiskStatus.downloadStatus = VirtualHardDiskDownloadStatus.fromJson(reader);
                } else if ("uploadStatus".equals(fieldName)) {
                    deserializedVirtualHardDiskStatus.uploadStatus = VirtualHardDiskUploadStatus.fromJson(reader);
                } else if ("managedBy".equals(fieldName)) {
                    List<String> managedBy = reader.readArray(reader1 -> reader1.getString());
                    deserializedVirtualHardDiskStatus.managedBy = managedBy;
                } else if ("uniqueId".equals(fieldName)) {
                    deserializedVirtualHardDiskStatus.uniqueId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualHardDiskStatus;
        });
    }
}
