// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.azurestackhci.vm.fluent.models.SecurityRuleInner;

/**
 * An instance of this class provides access to all the operations defined in SecurityRulesClient.
 */
public interface SecurityRulesClient {
    /**
     * Gets the specified security rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkSecurityGroupName Name of the network security group.
     * @param securityRuleName Name of the security rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified security rule along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SecurityRuleInner> getWithResponse(String resourceGroupName, String networkSecurityGroupName,
        String securityRuleName, Context context);

    /**
     * Gets the specified security rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkSecurityGroupName Name of the network security group.
     * @param securityRuleName Name of the security rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified security rule.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SecurityRuleInner get(String resourceGroupName, String networkSecurityGroupName, String securityRuleName);

    /**
     * Creates or updates a security rule in the specified resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkSecurityGroupName Name of the network security group.
     * @param securityRuleName Name of the security rule.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of security Rule resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SecurityRuleInner>, SecurityRuleInner> beginCreateOrUpdate(String resourceGroupName,
        String networkSecurityGroupName, String securityRuleName, SecurityRuleInner resource);

    /**
     * Creates or updates a security rule in the specified resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkSecurityGroupName Name of the network security group.
     * @param securityRuleName Name of the security rule.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of security Rule resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SecurityRuleInner>, SecurityRuleInner> beginCreateOrUpdate(String resourceGroupName,
        String networkSecurityGroupName, String securityRuleName, SecurityRuleInner resource, Context context);

    /**
     * Creates or updates a security rule in the specified resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkSecurityGroupName Name of the network security group.
     * @param securityRuleName Name of the security rule.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return security Rule resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SecurityRuleInner createOrUpdate(String resourceGroupName, String networkSecurityGroupName, String securityRuleName,
        SecurityRuleInner resource);

    /**
     * Creates or updates a security rule in the specified resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkSecurityGroupName Name of the network security group.
     * @param securityRuleName Name of the security rule.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return security Rule resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SecurityRuleInner createOrUpdate(String resourceGroupName, String networkSecurityGroupName, String securityRuleName,
        SecurityRuleInner resource, Context context);

    /**
     * Deletes the specified security rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkSecurityGroupName Name of the network security group.
     * @param securityRuleName Name of the security rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String networkSecurityGroupName,
        String securityRuleName);

    /**
     * Deletes the specified security rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkSecurityGroupName Name of the network security group.
     * @param securityRuleName Name of the security rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String networkSecurityGroupName,
        String securityRuleName, Context context);

    /**
     * Deletes the specified security rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkSecurityGroupName Name of the network security group.
     * @param securityRuleName Name of the security rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String networkSecurityGroupName, String securityRuleName);

    /**
     * Deletes the specified security rule.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkSecurityGroupName Name of the network security group.
     * @param securityRuleName Name of the security rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String networkSecurityGroupName, String securityRuleName, Context context);

    /**
     * Gets all security rules in a Network Security Group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkSecurityGroupName Name of the network security group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all security rules in a Network Security Group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SecurityRuleInner> listByNetworkSecurityGroup(String resourceGroupName,
        String networkSecurityGroupName);

    /**
     * Gets all security rules in a Network Security Group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param networkSecurityGroupName Name of the network security group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all security rules in a Network Security Group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SecurityRuleInner> listByNetworkSecurityGroup(String resourceGroupName,
        String networkSecurityGroupName, Context context);
}
