// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azurestackhci.vm.fluent.models.RouteProperties;
import java.io.IOException;

/**
 * Route - Route resource.
 */
@Fluent
public final class Route implements JsonSerializable<Route> {
    /*
     * Properties of the route.
     */
    private RouteProperties innerProperties;

    /*
     * Name - name of the subnet
     */
    private String name;

    /**
     * Creates an instance of Route class.
     */
    public Route() {
    }

    /**
     * Get the innerProperties property: Properties of the route.
     * 
     * @return the innerProperties value.
     */
    private RouteProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the name property: Name - name of the subnet.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name - name of the subnet.
     * 
     * @param name the name value to set.
     * @return the Route object itself.
     */
    public Route withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the addressPrefix property: The destination CIDR to which the route applies.
     * 
     * @return the addressPrefix value.
     */
    public String addressPrefix() {
        return this.innerProperties() == null ? null : this.innerProperties().addressPrefix();
    }

    /**
     * Set the addressPrefix property: The destination CIDR to which the route applies.
     * 
     * @param addressPrefix the addressPrefix value to set.
     * @return the Route object itself.
     */
    public Route withAddressPrefix(String addressPrefix) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RouteProperties();
        }
        this.innerProperties().withAddressPrefix(addressPrefix);
        return this;
    }

    /**
     * Get the nextHopIpAddress property: The IP address packets should be forwarded to. Next hop values are only
     * allowed in routes where the next hop type is VirtualAppliance.
     * 
     * @return the nextHopIpAddress value.
     */
    public String nextHopIpAddress() {
        return this.innerProperties() == null ? null : this.innerProperties().nextHopIpAddress();
    }

    /**
     * Set the nextHopIpAddress property: The IP address packets should be forwarded to. Next hop values are only
     * allowed in routes where the next hop type is VirtualAppliance.
     * 
     * @param nextHopIpAddress the nextHopIpAddress value to set.
     * @return the Route object itself.
     */
    public Route withNextHopIpAddress(String nextHopIpAddress) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RouteProperties();
        }
        this.innerProperties().withNextHopIpAddress(nextHopIpAddress);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Route from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Route if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Route.
     */
    public static Route fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Route deserializedRoute = new Route();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedRoute.innerProperties = RouteProperties.fromJson(reader);
                } else if ("name".equals(fieldName)) {
                    deserializedRoute.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRoute;
        });
    }
}
