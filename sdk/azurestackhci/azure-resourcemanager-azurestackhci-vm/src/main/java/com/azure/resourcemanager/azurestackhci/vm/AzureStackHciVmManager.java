// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurestackhci.vm.fluent.AzureStackHciVmMgmtClient;
import com.azure.resourcemanager.azurestackhci.vm.implementation.AttestationStatusesImpl;
import com.azure.resourcemanager.azurestackhci.vm.implementation.AzureStackHciVmMgmtClientBuilder;
import com.azure.resourcemanager.azurestackhci.vm.implementation.GalleryImagesImpl;
import com.azure.resourcemanager.azurestackhci.vm.implementation.GuestAgentsImpl;
import com.azure.resourcemanager.azurestackhci.vm.implementation.HybridIdentityMetadatasImpl;
import com.azure.resourcemanager.azurestackhci.vm.implementation.LogicalNetworksImpl;
import com.azure.resourcemanager.azurestackhci.vm.implementation.MarketplaceGalleryImagesImpl;
import com.azure.resourcemanager.azurestackhci.vm.implementation.NetworkInterfacesImpl;
import com.azure.resourcemanager.azurestackhci.vm.implementation.NetworkSecurityGroupsImpl;
import com.azure.resourcemanager.azurestackhci.vm.implementation.SecurityRulesImpl;
import com.azure.resourcemanager.azurestackhci.vm.implementation.StorageContainersImpl;
import com.azure.resourcemanager.azurestackhci.vm.implementation.VirtualHardDisksImpl;
import com.azure.resourcemanager.azurestackhci.vm.implementation.VirtualMachineInstancesImpl;
import com.azure.resourcemanager.azurestackhci.vm.models.AttestationStatuses;
import com.azure.resourcemanager.azurestackhci.vm.models.GalleryImages;
import com.azure.resourcemanager.azurestackhci.vm.models.GuestAgents;
import com.azure.resourcemanager.azurestackhci.vm.models.HybridIdentityMetadatas;
import com.azure.resourcemanager.azurestackhci.vm.models.LogicalNetworks;
import com.azure.resourcemanager.azurestackhci.vm.models.MarketplaceGalleryImages;
import com.azure.resourcemanager.azurestackhci.vm.models.NetworkInterfaces;
import com.azure.resourcemanager.azurestackhci.vm.models.NetworkSecurityGroups;
import com.azure.resourcemanager.azurestackhci.vm.models.SecurityRules;
import com.azure.resourcemanager.azurestackhci.vm.models.StorageContainers;
import com.azure.resourcemanager.azurestackhci.vm.models.VirtualHardDisks;
import com.azure.resourcemanager.azurestackhci.vm.models.VirtualMachineInstances;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Entry point to AzureStackHciVmManager.
 * Azure Stack HCI management service.
 */
public final class AzureStackHciVmManager {
    private GalleryImages galleryImages;

    private LogicalNetworks logicalNetworks;

    private MarketplaceGalleryImages marketplaceGalleryImages;

    private NetworkInterfaces networkInterfaces;

    private NetworkSecurityGroups networkSecurityGroups;

    private SecurityRules securityRules;

    private StorageContainers storageContainers;

    private VirtualHardDisks virtualHardDisks;

    private VirtualMachineInstances virtualMachineInstances;

    private HybridIdentityMetadatas hybridIdentityMetadatas;

    private AttestationStatuses attestationStatuses;

    private GuestAgents guestAgents;

    private final AzureStackHciVmMgmtClient clientObject;

    private AzureStackHciVmManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject = new AzureStackHciVmMgmtClientBuilder().pipeline(httpPipeline)
            .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
            .subscriptionId(profile.getSubscriptionId())
            .defaultPollInterval(defaultPollInterval)
            .buildClient();
    }

    /**
     * Creates an instance of Azure Stack Hci Vm service API entry point.
     * 
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Azure Stack Hci Vm service API instance.
     */
    public static AzureStackHciVmManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of Azure Stack Hci Vm service API entry point.
     * 
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the Azure Stack Hci Vm service API instance.
     */
    public static AzureStackHciVmManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new AzureStackHciVmManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create AzureStackHciVmManager with optional configuration.
     * 
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new AzureStackHciVmManager.Configurable();
    }

    /**
     * The Configurable allowing configurations to be set.
     */
    public static final class Configurable {
        private static final ClientLogger LOGGER = new ClientLogger(Configurable.class);
        private static final String SDK_VERSION = "version";
        private static final Map<String, String> PROPERTIES
            = CoreUtils.getProperties("azure-resourcemanager-azurestackhci-vm.properties");

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private RetryOptions retryOptions;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the retry options for the HTTP pipeline retry policy.
         * <p>
         * This setting has no effect, if retry policy is set via {@link #withRetryPolicy(RetryPolicy)}.
         *
         * @param retryOptions the retry options for the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryOptions(RetryOptions retryOptions) {
            this.retryOptions = Objects.requireNonNull(retryOptions, "'retryOptions' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval
                = Objects.requireNonNull(defaultPollInterval, "'defaultPollInterval' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw LOGGER
                    .logExceptionAsError(new IllegalArgumentException("'defaultPollInterval' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of Azure Stack Hci Vm service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the Azure Stack Hci Vm service API instance.
         */
        public AzureStackHciVmManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            String clientVersion = PROPERTIES.getOrDefault(SDK_VERSION, "UnknownVersion");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder.append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.azurestackhci.vm")
                .append("/")
                .append(clientVersion);
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder.append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                if (retryOptions != null) {
                    retryPolicy = new RetryPolicy(retryOptions);
                } else {
                    retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
                }
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new AddHeadersFromContextPolicy());
            policies.add(new RequestIdPolicy());
            policies.addAll(this.policies.stream()
                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                .collect(Collectors.toList()));
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new BearerTokenAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies.addAll(this.policies.stream()
                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                .collect(Collectors.toList()));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline = new HttpPipelineBuilder().httpClient(httpClient)
                .policies(policies.toArray(new HttpPipelinePolicy[0]))
                .build();
            return new AzureStackHciVmManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /**
     * Gets the resource collection API of GalleryImages. It manages GalleryImage.
     * 
     * @return Resource collection API of GalleryImages.
     */
    public GalleryImages galleryImages() {
        if (this.galleryImages == null) {
            this.galleryImages = new GalleryImagesImpl(clientObject.getGalleryImages(), this);
        }
        return galleryImages;
    }

    /**
     * Gets the resource collection API of LogicalNetworks. It manages LogicalNetwork.
     * 
     * @return Resource collection API of LogicalNetworks.
     */
    public LogicalNetworks logicalNetworks() {
        if (this.logicalNetworks == null) {
            this.logicalNetworks = new LogicalNetworksImpl(clientObject.getLogicalNetworks(), this);
        }
        return logicalNetworks;
    }

    /**
     * Gets the resource collection API of MarketplaceGalleryImages. It manages MarketplaceGalleryImage.
     * 
     * @return Resource collection API of MarketplaceGalleryImages.
     */
    public MarketplaceGalleryImages marketplaceGalleryImages() {
        if (this.marketplaceGalleryImages == null) {
            this.marketplaceGalleryImages
                = new MarketplaceGalleryImagesImpl(clientObject.getMarketplaceGalleryImages(), this);
        }
        return marketplaceGalleryImages;
    }

    /**
     * Gets the resource collection API of NetworkInterfaces. It manages NetworkInterface.
     * 
     * @return Resource collection API of NetworkInterfaces.
     */
    public NetworkInterfaces networkInterfaces() {
        if (this.networkInterfaces == null) {
            this.networkInterfaces = new NetworkInterfacesImpl(clientObject.getNetworkInterfaces(), this);
        }
        return networkInterfaces;
    }

    /**
     * Gets the resource collection API of NetworkSecurityGroups. It manages NetworkSecurityGroup.
     * 
     * @return Resource collection API of NetworkSecurityGroups.
     */
    public NetworkSecurityGroups networkSecurityGroups() {
        if (this.networkSecurityGroups == null) {
            this.networkSecurityGroups = new NetworkSecurityGroupsImpl(clientObject.getNetworkSecurityGroups(), this);
        }
        return networkSecurityGroups;
    }

    /**
     * Gets the resource collection API of SecurityRules. It manages SecurityRule.
     * 
     * @return Resource collection API of SecurityRules.
     */
    public SecurityRules securityRules() {
        if (this.securityRules == null) {
            this.securityRules = new SecurityRulesImpl(clientObject.getSecurityRules(), this);
        }
        return securityRules;
    }

    /**
     * Gets the resource collection API of StorageContainers. It manages StorageContainer.
     * 
     * @return Resource collection API of StorageContainers.
     */
    public StorageContainers storageContainers() {
        if (this.storageContainers == null) {
            this.storageContainers = new StorageContainersImpl(clientObject.getStorageContainers(), this);
        }
        return storageContainers;
    }

    /**
     * Gets the resource collection API of VirtualHardDisks. It manages VirtualHardDisk.
     * 
     * @return Resource collection API of VirtualHardDisks.
     */
    public VirtualHardDisks virtualHardDisks() {
        if (this.virtualHardDisks == null) {
            this.virtualHardDisks = new VirtualHardDisksImpl(clientObject.getVirtualHardDisks(), this);
        }
        return virtualHardDisks;
    }

    /**
     * Gets the resource collection API of VirtualMachineInstances.
     * 
     * @return Resource collection API of VirtualMachineInstances.
     */
    public VirtualMachineInstances virtualMachineInstances() {
        if (this.virtualMachineInstances == null) {
            this.virtualMachineInstances
                = new VirtualMachineInstancesImpl(clientObject.getVirtualMachineInstances(), this);
        }
        return virtualMachineInstances;
    }

    /**
     * Gets the resource collection API of HybridIdentityMetadatas.
     * 
     * @return Resource collection API of HybridIdentityMetadatas.
     */
    public HybridIdentityMetadatas hybridIdentityMetadatas() {
        if (this.hybridIdentityMetadatas == null) {
            this.hybridIdentityMetadatas
                = new HybridIdentityMetadatasImpl(clientObject.getHybridIdentityMetadatas(), this);
        }
        return hybridIdentityMetadatas;
    }

    /**
     * Gets the resource collection API of AttestationStatuses.
     * 
     * @return Resource collection API of AttestationStatuses.
     */
    public AttestationStatuses attestationStatuses() {
        if (this.attestationStatuses == null) {
            this.attestationStatuses = new AttestationStatusesImpl(clientObject.getAttestationStatuses(), this);
        }
        return attestationStatuses;
    }

    /**
     * Gets the resource collection API of GuestAgents.
     * 
     * @return Resource collection API of GuestAgents.
     */
    public GuestAgents guestAgents() {
        if (this.guestAgents == null) {
            this.guestAgents = new GuestAgentsImpl(clientObject.getGuestAgents(), this);
        }
        return guestAgents;
    }

    /**
     * Gets wrapped service client AzureStackHciVmMgmtClient providing direct access to the underlying auto-generated
     * API implementation, based on Azure REST API.
     * 
     * @return Wrapped service client AzureStackHciVmMgmtClient.
     */
    public AzureStackHciVmMgmtClient serviceClient() {
        return this.clientObject;
    }
}
