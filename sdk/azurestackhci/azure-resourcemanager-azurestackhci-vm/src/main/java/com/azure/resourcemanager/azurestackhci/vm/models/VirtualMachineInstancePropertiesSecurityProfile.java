// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * SecurityProfile - Specifies the security settings for the virtual machine instance.
 */
@Fluent
public final class VirtualMachineInstancePropertiesSecurityProfile
    implements JsonSerializable<VirtualMachineInstancePropertiesSecurityProfile> {
    /*
     * Enable TPM flag
     */
    private Boolean enableTPM;

    /*
     * Uefi settings of the virtual machine instance
     */
    private VirtualMachineInstancePropertiesSecurityProfileUefiSettings uefiSettings;

    /*
     * Specifies the SecurityType of the virtual machine. EnableTPM and SecureBootEnabled must be set to true for
     * SecurityType to function.
     */
    private SecurityTypes securityType;

    /**
     * Creates an instance of VirtualMachineInstancePropertiesSecurityProfile class.
     */
    public VirtualMachineInstancePropertiesSecurityProfile() {
    }

    /**
     * Get the enableTPM property: Enable TPM flag.
     * 
     * @return the enableTPM value.
     */
    public Boolean enableTPM() {
        return this.enableTPM;
    }

    /**
     * Set the enableTPM property: Enable TPM flag.
     * 
     * @param enableTPM the enableTPM value to set.
     * @return the VirtualMachineInstancePropertiesSecurityProfile object itself.
     */
    public VirtualMachineInstancePropertiesSecurityProfile withEnableTPM(Boolean enableTPM) {
        this.enableTPM = enableTPM;
        return this;
    }

    /**
     * Get the uefiSettings property: Uefi settings of the virtual machine instance.
     * 
     * @return the uefiSettings value.
     */
    public VirtualMachineInstancePropertiesSecurityProfileUefiSettings uefiSettings() {
        return this.uefiSettings;
    }

    /**
     * Set the uefiSettings property: Uefi settings of the virtual machine instance.
     * 
     * @param uefiSettings the uefiSettings value to set.
     * @return the VirtualMachineInstancePropertiesSecurityProfile object itself.
     */
    public VirtualMachineInstancePropertiesSecurityProfile
        withUefiSettings(VirtualMachineInstancePropertiesSecurityProfileUefiSettings uefiSettings) {
        this.uefiSettings = uefiSettings;
        return this;
    }

    /**
     * Get the securityType property: Specifies the SecurityType of the virtual machine. EnableTPM and SecureBootEnabled
     * must be set to true for SecurityType to function.
     * 
     * @return the securityType value.
     */
    public SecurityTypes securityType() {
        return this.securityType;
    }

    /**
     * Set the securityType property: Specifies the SecurityType of the virtual machine. EnableTPM and SecureBootEnabled
     * must be set to true for SecurityType to function.
     * 
     * @param securityType the securityType value to set.
     * @return the VirtualMachineInstancePropertiesSecurityProfile object itself.
     */
    public VirtualMachineInstancePropertiesSecurityProfile withSecurityType(SecurityTypes securityType) {
        this.securityType = securityType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (uefiSettings() != null) {
            uefiSettings().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enableTPM", this.enableTPM);
        jsonWriter.writeJsonField("uefiSettings", this.uefiSettings);
        jsonWriter.writeStringField("securityType", this.securityType == null ? null : this.securityType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineInstancePropertiesSecurityProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineInstancePropertiesSecurityProfile if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualMachineInstancePropertiesSecurityProfile.
     */
    public static VirtualMachineInstancePropertiesSecurityProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineInstancePropertiesSecurityProfile deserializedVirtualMachineInstancePropertiesSecurityProfile
                = new VirtualMachineInstancePropertiesSecurityProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enableTPM".equals(fieldName)) {
                    deserializedVirtualMachineInstancePropertiesSecurityProfile.enableTPM
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("uefiSettings".equals(fieldName)) {
                    deserializedVirtualMachineInstancePropertiesSecurityProfile.uefiSettings
                        = VirtualMachineInstancePropertiesSecurityProfileUefiSettings.fromJson(reader);
                } else if ("securityType".equals(fieldName)) {
                    deserializedVirtualMachineInstancePropertiesSecurityProfile.securityType
                        = SecurityTypes.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineInstancePropertiesSecurityProfile;
        });
    }
}
