// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * StorageProfile - contains information about the disks and storage information for the virtual machine instance.
 */
@Fluent
public final class VirtualMachineInstancePropertiesStorageProfile
    implements JsonSerializable<VirtualMachineInstancePropertiesStorageProfile> {
    /*
     * adds data disks to the virtual machine instance
     */
    private List<VirtualHardDiskArmReference> dataDisks;

    /*
     * Which Image to use for the virtual machine instance
     */
    private ImageArmReference imageReference;

    /*
     * VHD to attach as OS disk
     */
    private VirtualMachineInstancePropertiesStorageProfileOsDisk osDisk;

    /*
     * Id of the storage container that hosts the VM configuration file
     */
    private String vmConfigStoragePathId;

    /**
     * Creates an instance of VirtualMachineInstancePropertiesStorageProfile class.
     */
    public VirtualMachineInstancePropertiesStorageProfile() {
    }

    /**
     * Get the dataDisks property: adds data disks to the virtual machine instance.
     * 
     * @return the dataDisks value.
     */
    public List<VirtualHardDiskArmReference> dataDisks() {
        return this.dataDisks;
    }

    /**
     * Set the dataDisks property: adds data disks to the virtual machine instance.
     * 
     * @param dataDisks the dataDisks value to set.
     * @return the VirtualMachineInstancePropertiesStorageProfile object itself.
     */
    public VirtualMachineInstancePropertiesStorageProfile withDataDisks(List<VirtualHardDiskArmReference> dataDisks) {
        this.dataDisks = dataDisks;
        return this;
    }

    /**
     * Get the imageReference property: Which Image to use for the virtual machine instance.
     * 
     * @return the imageReference value.
     */
    public ImageArmReference imageReference() {
        return this.imageReference;
    }

    /**
     * Set the imageReference property: Which Image to use for the virtual machine instance.
     * 
     * @param imageReference the imageReference value to set.
     * @return the VirtualMachineInstancePropertiesStorageProfile object itself.
     */
    public VirtualMachineInstancePropertiesStorageProfile withImageReference(ImageArmReference imageReference) {
        this.imageReference = imageReference;
        return this;
    }

    /**
     * Get the osDisk property: VHD to attach as OS disk.
     * 
     * @return the osDisk value.
     */
    public VirtualMachineInstancePropertiesStorageProfileOsDisk osDisk() {
        return this.osDisk;
    }

    /**
     * Set the osDisk property: VHD to attach as OS disk.
     * 
     * @param osDisk the osDisk value to set.
     * @return the VirtualMachineInstancePropertiesStorageProfile object itself.
     */
    public VirtualMachineInstancePropertiesStorageProfile
        withOsDisk(VirtualMachineInstancePropertiesStorageProfileOsDisk osDisk) {
        this.osDisk = osDisk;
        return this;
    }

    /**
     * Get the vmConfigStoragePathId property: Id of the storage container that hosts the VM configuration file.
     * 
     * @return the vmConfigStoragePathId value.
     */
    public String vmConfigStoragePathId() {
        return this.vmConfigStoragePathId;
    }

    /**
     * Set the vmConfigStoragePathId property: Id of the storage container that hosts the VM configuration file.
     * 
     * @param vmConfigStoragePathId the vmConfigStoragePathId value to set.
     * @return the VirtualMachineInstancePropertiesStorageProfile object itself.
     */
    public VirtualMachineInstancePropertiesStorageProfile withVmConfigStoragePathId(String vmConfigStoragePathId) {
        this.vmConfigStoragePathId = vmConfigStoragePathId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataDisks() != null) {
            dataDisks().forEach(e -> e.validate());
        }
        if (imageReference() != null) {
            imageReference().validate();
        }
        if (osDisk() != null) {
            osDisk().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("dataDisks", this.dataDisks, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("imageReference", this.imageReference);
        jsonWriter.writeJsonField("osDisk", this.osDisk);
        jsonWriter.writeStringField("vmConfigStoragePathId", this.vmConfigStoragePathId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineInstancePropertiesStorageProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineInstancePropertiesStorageProfile if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualMachineInstancePropertiesStorageProfile.
     */
    public static VirtualMachineInstancePropertiesStorageProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineInstancePropertiesStorageProfile deserializedVirtualMachineInstancePropertiesStorageProfile
                = new VirtualMachineInstancePropertiesStorageProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataDisks".equals(fieldName)) {
                    List<VirtualHardDiskArmReference> dataDisks
                        = reader.readArray(reader1 -> VirtualHardDiskArmReference.fromJson(reader1));
                    deserializedVirtualMachineInstancePropertiesStorageProfile.dataDisks = dataDisks;
                } else if ("imageReference".equals(fieldName)) {
                    deserializedVirtualMachineInstancePropertiesStorageProfile.imageReference
                        = ImageArmReference.fromJson(reader);
                } else if ("osDisk".equals(fieldName)) {
                    deserializedVirtualMachineInstancePropertiesStorageProfile.osDisk
                        = VirtualMachineInstancePropertiesStorageProfileOsDisk.fromJson(reader);
                } else if ("vmConfigStoragePathId".equals(fieldName)) {
                    deserializedVirtualMachineInstancePropertiesStorageProfile.vmConfigStoragePathId
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineInstancePropertiesStorageProfile;
        });
    }
}
