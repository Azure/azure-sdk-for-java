// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Security rule resource.
 */
@Fluent
public final class SecurityRuleProperties implements JsonSerializable<SecurityRuleProperties> {
    /*
     * A description for this rule. Restricted to 140 chars.
     */
    private String description;

    /*
     * Network protocol this rule applies to.
     */
    private SecurityRuleProtocol protocol;

    /*
     * The CIDR or source IP ranges.
     */
    private List<String> sourceAddressPrefixes;

    /*
     * The destination address prefixes. CIDR or destination IP ranges.
     */
    private List<String> destinationAddressPrefixes;

    /*
     * The source port ranges. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.
     */
    private List<String> sourcePortRanges;

    /*
     * The destination port ranges. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all
     * ports.
     */
    private List<String> destinationPortRanges;

    /*
     * The network traffic is allowed or denied.
     */
    private SecurityRuleAccess access;

    /*
     * The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule
     * in the collection. The lower the priority number, the higher the priority of the rule.
     */
    private int priority;

    /*
     * The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic.
     */
    private SecurityRuleDirection direction;

    /*
     * Provisioning state of the SR
     */
    private ProvisioningStateEnum provisioningState;

    /**
     * Creates an instance of SecurityRuleProperties class.
     */
    public SecurityRuleProperties() {
    }

    /**
     * Get the description property: A description for this rule. Restricted to 140 chars.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: A description for this rule. Restricted to 140 chars.
     * 
     * @param description the description value to set.
     * @return the SecurityRuleProperties object itself.
     */
    public SecurityRuleProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the protocol property: Network protocol this rule applies to.
     * 
     * @return the protocol value.
     */
    public SecurityRuleProtocol protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: Network protocol this rule applies to.
     * 
     * @param protocol the protocol value to set.
     * @return the SecurityRuleProperties object itself.
     */
    public SecurityRuleProperties withProtocol(SecurityRuleProtocol protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the sourceAddressPrefixes property: The CIDR or source IP ranges.
     * 
     * @return the sourceAddressPrefixes value.
     */
    public List<String> sourceAddressPrefixes() {
        return this.sourceAddressPrefixes;
    }

    /**
     * Set the sourceAddressPrefixes property: The CIDR or source IP ranges.
     * 
     * @param sourceAddressPrefixes the sourceAddressPrefixes value to set.
     * @return the SecurityRuleProperties object itself.
     */
    public SecurityRuleProperties withSourceAddressPrefixes(List<String> sourceAddressPrefixes) {
        this.sourceAddressPrefixes = sourceAddressPrefixes;
        return this;
    }

    /**
     * Get the destinationAddressPrefixes property: The destination address prefixes. CIDR or destination IP ranges.
     * 
     * @return the destinationAddressPrefixes value.
     */
    public List<String> destinationAddressPrefixes() {
        return this.destinationAddressPrefixes;
    }

    /**
     * Set the destinationAddressPrefixes property: The destination address prefixes. CIDR or destination IP ranges.
     * 
     * @param destinationAddressPrefixes the destinationAddressPrefixes value to set.
     * @return the SecurityRuleProperties object itself.
     */
    public SecurityRuleProperties withDestinationAddressPrefixes(List<String> destinationAddressPrefixes) {
        this.destinationAddressPrefixes = destinationAddressPrefixes;
        return this;
    }

    /**
     * Get the sourcePortRanges property: The source port ranges. Integer or range between 0 and 65535. Asterisk '*' can
     * also be used to match all ports.
     * 
     * @return the sourcePortRanges value.
     */
    public List<String> sourcePortRanges() {
        return this.sourcePortRanges;
    }

    /**
     * Set the sourcePortRanges property: The source port ranges. Integer or range between 0 and 65535. Asterisk '*' can
     * also be used to match all ports.
     * 
     * @param sourcePortRanges the sourcePortRanges value to set.
     * @return the SecurityRuleProperties object itself.
     */
    public SecurityRuleProperties withSourcePortRanges(List<String> sourcePortRanges) {
        this.sourcePortRanges = sourcePortRanges;
        return this;
    }

    /**
     * Get the destinationPortRanges property: The destination port ranges. Integer or range between 0 and 65535.
     * Asterisk '*' can also be used to match all ports.
     * 
     * @return the destinationPortRanges value.
     */
    public List<String> destinationPortRanges() {
        return this.destinationPortRanges;
    }

    /**
     * Set the destinationPortRanges property: The destination port ranges. Integer or range between 0 and 65535.
     * Asterisk '*' can also be used to match all ports.
     * 
     * @param destinationPortRanges the destinationPortRanges value to set.
     * @return the SecurityRuleProperties object itself.
     */
    public SecurityRuleProperties withDestinationPortRanges(List<String> destinationPortRanges) {
        this.destinationPortRanges = destinationPortRanges;
        return this;
    }

    /**
     * Get the access property: The network traffic is allowed or denied.
     * 
     * @return the access value.
     */
    public SecurityRuleAccess access() {
        return this.access;
    }

    /**
     * Set the access property: The network traffic is allowed or denied.
     * 
     * @param access the access value to set.
     * @return the SecurityRuleProperties object itself.
     */
    public SecurityRuleProperties withAccess(SecurityRuleAccess access) {
        this.access = access;
        return this;
    }

    /**
     * Get the priority property: The priority of the rule. The value can be between 100 and 4096. The priority number
     * must be unique for each rule in the collection. The lower the priority number, the higher the priority of the
     * rule.
     * 
     * @return the priority value.
     */
    public int priority() {
        return this.priority;
    }

    /**
     * Set the priority property: The priority of the rule. The value can be between 100 and 4096. The priority number
     * must be unique for each rule in the collection. The lower the priority number, the higher the priority of the
     * rule.
     * 
     * @param priority the priority value to set.
     * @return the SecurityRuleProperties object itself.
     */
    public SecurityRuleProperties withPriority(int priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Get the direction property: The direction of the rule. The direction specifies if rule will be evaluated on
     * incoming or outgoing traffic.
     * 
     * @return the direction value.
     */
    public SecurityRuleDirection direction() {
        return this.direction;
    }

    /**
     * Set the direction property: The direction of the rule. The direction specifies if rule will be evaluated on
     * incoming or outgoing traffic.
     * 
     * @param direction the direction value to set.
     * @return the SecurityRuleProperties object itself.
     */
    public SecurityRuleProperties withDirection(SecurityRuleDirection direction) {
        this.direction = direction;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the SR.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (protocol() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property protocol in model SecurityRuleProperties"));
        }
        if (access() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property access in model SecurityRuleProperties"));
        }
        if (direction() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property direction in model SecurityRuleProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SecurityRuleProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("protocol", this.protocol == null ? null : this.protocol.toString());
        jsonWriter.writeStringField("access", this.access == null ? null : this.access.toString());
        jsonWriter.writeIntField("priority", this.priority);
        jsonWriter.writeStringField("direction", this.direction == null ? null : this.direction.toString());
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("sourceAddressPrefixes", this.sourceAddressPrefixes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("destinationAddressPrefixes", this.destinationAddressPrefixes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("sourcePortRanges", this.sourcePortRanges,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("destinationPortRanges", this.destinationPortRanges,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecurityRuleProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecurityRuleProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SecurityRuleProperties.
     */
    public static SecurityRuleProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecurityRuleProperties deserializedSecurityRuleProperties = new SecurityRuleProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("protocol".equals(fieldName)) {
                    deserializedSecurityRuleProperties.protocol = SecurityRuleProtocol.fromString(reader.getString());
                } else if ("access".equals(fieldName)) {
                    deserializedSecurityRuleProperties.access = SecurityRuleAccess.fromString(reader.getString());
                } else if ("priority".equals(fieldName)) {
                    deserializedSecurityRuleProperties.priority = reader.getInt();
                } else if ("direction".equals(fieldName)) {
                    deserializedSecurityRuleProperties.direction = SecurityRuleDirection.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedSecurityRuleProperties.description = reader.getString();
                } else if ("sourceAddressPrefixes".equals(fieldName)) {
                    List<String> sourceAddressPrefixes = reader.readArray(reader1 -> reader1.getString());
                    deserializedSecurityRuleProperties.sourceAddressPrefixes = sourceAddressPrefixes;
                } else if ("destinationAddressPrefixes".equals(fieldName)) {
                    List<String> destinationAddressPrefixes = reader.readArray(reader1 -> reader1.getString());
                    deserializedSecurityRuleProperties.destinationAddressPrefixes = destinationAddressPrefixes;
                } else if ("sourcePortRanges".equals(fieldName)) {
                    List<String> sourcePortRanges = reader.readArray(reader1 -> reader1.getString());
                    deserializedSecurityRuleProperties.sourcePortRanges = sourcePortRanges;
                } else if ("destinationPortRanges".equals(fieldName)) {
                    List<String> destinationPortRanges = reader.readArray(reader1 -> reader1.getString());
                    deserializedSecurityRuleProperties.destinationPortRanges = destinationPortRanges;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSecurityRuleProperties.provisioningState
                        = ProvisioningStateEnum.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecurityRuleProperties;
        });
    }
}
