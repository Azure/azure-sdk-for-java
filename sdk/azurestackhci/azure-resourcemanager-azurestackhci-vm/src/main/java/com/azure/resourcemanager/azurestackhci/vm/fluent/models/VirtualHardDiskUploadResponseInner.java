// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azurestackhci.vm.models.VirtualHardDiskUploadStatus;
import java.io.IOException;

/**
 * Response for uploading virtual hard disk.
 */
@Immutable
public final class VirtualHardDiskUploadResponseInner implements JsonSerializable<VirtualHardDiskUploadResponseInner> {
    /*
     * The ARM ID for a Virtual Hard Disk.
     */
    private String virtualHardDiskId;

    /*
     * The upload status of the virtual hard disk
     */
    private VirtualHardDiskUploadStatus uploadStatus;

    /**
     * Creates an instance of VirtualHardDiskUploadResponseInner class.
     */
    private VirtualHardDiskUploadResponseInner() {
    }

    /**
     * Get the virtualHardDiskId property: The ARM ID for a Virtual Hard Disk.
     * 
     * @return the virtualHardDiskId value.
     */
    public String virtualHardDiskId() {
        return this.virtualHardDiskId;
    }

    /**
     * Get the uploadStatus property: The upload status of the virtual hard disk.
     * 
     * @return the uploadStatus value.
     */
    public VirtualHardDiskUploadStatus uploadStatus() {
        return this.uploadStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (uploadStatus() != null) {
            uploadStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("virtualHardDiskId", this.virtualHardDiskId);
        jsonWriter.writeJsonField("uploadStatus", this.uploadStatus);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualHardDiskUploadResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualHardDiskUploadResponseInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualHardDiskUploadResponseInner.
     */
    public static VirtualHardDiskUploadResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualHardDiskUploadResponseInner deserializedVirtualHardDiskUploadResponseInner
                = new VirtualHardDiskUploadResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("virtualHardDiskId".equals(fieldName)) {
                    deserializedVirtualHardDiskUploadResponseInner.virtualHardDiskId = reader.getString();
                } else if ("uploadStatus".equals(fieldName)) {
                    deserializedVirtualHardDiskUploadResponseInner.uploadStatus
                        = VirtualHardDiskUploadStatus.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualHardDiskUploadResponseInner;
        });
    }
}
