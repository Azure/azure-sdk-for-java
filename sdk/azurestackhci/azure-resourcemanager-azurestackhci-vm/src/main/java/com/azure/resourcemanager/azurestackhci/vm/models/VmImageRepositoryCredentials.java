// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The credentials used to login to the image repository that has access to the specified image.
 */
@Fluent
public final class VmImageRepositoryCredentials implements JsonSerializable<VmImageRepositoryCredentials> {
    /*
     * Username for accessing image repository
     */
    private String username;

    /*
     * Password for accessing image repository
     */
    private String password;

    /**
     * Creates an instance of VmImageRepositoryCredentials class.
     */
    public VmImageRepositoryCredentials() {
    }

    /**
     * Get the username property: Username for accessing image repository.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: Username for accessing image repository.
     * 
     * @param username the username value to set.
     * @return the VmImageRepositoryCredentials object itself.
     */
    public VmImageRepositoryCredentials withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: Password for accessing image repository.
     * 
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: Password for accessing image repository.
     * 
     * @param password the password value to set.
     * @return the VmImageRepositoryCredentials object itself.
     */
    public VmImageRepositoryCredentials withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (username() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property username in model VmImageRepositoryCredentials"));
        }
        if (password() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property password in model VmImageRepositoryCredentials"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VmImageRepositoryCredentials.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("username", this.username);
        jsonWriter.writeStringField("password", this.password);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VmImageRepositoryCredentials from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VmImageRepositoryCredentials if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VmImageRepositoryCredentials.
     */
    public static VmImageRepositoryCredentials fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VmImageRepositoryCredentials deserializedVmImageRepositoryCredentials = new VmImageRepositoryCredentials();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("username".equals(fieldName)) {
                    deserializedVmImageRepositoryCredentials.username = reader.getString();
                } else if ("password".equals(fieldName)) {
                    deserializedVmImageRepositoryCredentials.password = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVmImageRepositoryCredentials;
        });
    }
}
