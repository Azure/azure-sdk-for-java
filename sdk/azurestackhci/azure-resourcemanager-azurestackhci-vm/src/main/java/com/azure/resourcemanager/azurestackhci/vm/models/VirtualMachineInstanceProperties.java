// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties under the virtual machine instance resource.
 */
@Fluent
public final class VirtualMachineInstanceProperties implements JsonSerializable<VirtualMachineInstanceProperties> {
    /*
     * HardwareProfile - Specifies the hardware settings for the virtual machine instance.
     */
    private VirtualMachineInstancePropertiesHardwareProfile hardwareProfile;

    /*
     * PlacementProfile - Specifies the placement related settings for the virtual machine.
     */
    private VirtualMachineInstancePropertiesPlacementProfile placementProfile;

    /*
     * NetworkProfile - describes the network configuration the virtual machine instance
     */
    private VirtualMachineInstancePropertiesNetworkProfile networkProfile;

    /*
     * OsProfile - describes the configuration of the operating system and sets login data
     */
    private VirtualMachineInstancePropertiesOsProfile osProfile;

    /*
     * SecurityProfile - Specifies the security settings for the virtual machine instance.
     */
    private VirtualMachineInstancePropertiesSecurityProfile securityProfile;

    /*
     * StorageProfile - contains information about the disks and storage information for the virtual machine instance
     */
    private VirtualMachineInstancePropertiesStorageProfile storageProfile;

    /*
     * HTTP Proxy configuration for the VM.
     */
    private HttpProxyConfiguration httpProxyConfig;

    /*
     * Boolean indicating whether this is an existing local virtual machine or if one should be created.
     */
    private Boolean createFromLocal;

    /*
     * Provisioning state of the virtual machine instance.
     */
    private ProvisioningStateEnum provisioningState;

    /*
     * The virtual machine instance view.
     */
    private VirtualMachineInstanceView instanceView;

    /*
     * The observed state of virtual machine instances
     */
    private VirtualMachineInstanceStatus status;

    /*
     * Guest agent install status.
     */
    private GuestAgentInstallStatus guestAgentInstallStatus;

    /*
     * Unique identifier for the vm resource.
     */
    private String vmId;

    /*
     * Unique identifier defined by ARC to identify the guest of the VM.
     */
    private String resourceUid;

    /*
     * Unique identifier for the Hyper-V VM resource.
     */
    private String hyperVVmId;

    /*
     * Name of the host node that the VM is on.
     */
    private String hostNodeName;

    /*
     * Name of the host node that the VM is on.
     */
    private String hostNodeIpAddress;

    /**
     * Creates an instance of VirtualMachineInstanceProperties class.
     */
    public VirtualMachineInstanceProperties() {
    }

    /**
     * Get the hardwareProfile property: HardwareProfile - Specifies the hardware settings for the virtual machine
     * instance.
     * 
     * @return the hardwareProfile value.
     */
    public VirtualMachineInstancePropertiesHardwareProfile hardwareProfile() {
        return this.hardwareProfile;
    }

    /**
     * Set the hardwareProfile property: HardwareProfile - Specifies the hardware settings for the virtual machine
     * instance.
     * 
     * @param hardwareProfile the hardwareProfile value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties
        withHardwareProfile(VirtualMachineInstancePropertiesHardwareProfile hardwareProfile) {
        this.hardwareProfile = hardwareProfile;
        return this;
    }

    /**
     * Get the placementProfile property: PlacementProfile - Specifies the placement related settings for the virtual
     * machine.
     * 
     * @return the placementProfile value.
     */
    public VirtualMachineInstancePropertiesPlacementProfile placementProfile() {
        return this.placementProfile;
    }

    /**
     * Set the placementProfile property: PlacementProfile - Specifies the placement related settings for the virtual
     * machine.
     * 
     * @param placementProfile the placementProfile value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties
        withPlacementProfile(VirtualMachineInstancePropertiesPlacementProfile placementProfile) {
        this.placementProfile = placementProfile;
        return this;
    }

    /**
     * Get the networkProfile property: NetworkProfile - describes the network configuration the virtual machine
     * instance.
     * 
     * @return the networkProfile value.
     */
    public VirtualMachineInstancePropertiesNetworkProfile networkProfile() {
        return this.networkProfile;
    }

    /**
     * Set the networkProfile property: NetworkProfile - describes the network configuration the virtual machine
     * instance.
     * 
     * @param networkProfile the networkProfile value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties
        withNetworkProfile(VirtualMachineInstancePropertiesNetworkProfile networkProfile) {
        this.networkProfile = networkProfile;
        return this;
    }

    /**
     * Get the osProfile property: OsProfile - describes the configuration of the operating system and sets login data.
     * 
     * @return the osProfile value.
     */
    public VirtualMachineInstancePropertiesOsProfile osProfile() {
        return this.osProfile;
    }

    /**
     * Set the osProfile property: OsProfile - describes the configuration of the operating system and sets login data.
     * 
     * @param osProfile the osProfile value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties withOsProfile(VirtualMachineInstancePropertiesOsProfile osProfile) {
        this.osProfile = osProfile;
        return this;
    }

    /**
     * Get the securityProfile property: SecurityProfile - Specifies the security settings for the virtual machine
     * instance.
     * 
     * @return the securityProfile value.
     */
    public VirtualMachineInstancePropertiesSecurityProfile securityProfile() {
        return this.securityProfile;
    }

    /**
     * Set the securityProfile property: SecurityProfile - Specifies the security settings for the virtual machine
     * instance.
     * 
     * @param securityProfile the securityProfile value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties
        withSecurityProfile(VirtualMachineInstancePropertiesSecurityProfile securityProfile) {
        this.securityProfile = securityProfile;
        return this;
    }

    /**
     * Get the storageProfile property: StorageProfile - contains information about the disks and storage information
     * for the virtual machine instance.
     * 
     * @return the storageProfile value.
     */
    public VirtualMachineInstancePropertiesStorageProfile storageProfile() {
        return this.storageProfile;
    }

    /**
     * Set the storageProfile property: StorageProfile - contains information about the disks and storage information
     * for the virtual machine instance.
     * 
     * @param storageProfile the storageProfile value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties
        withStorageProfile(VirtualMachineInstancePropertiesStorageProfile storageProfile) {
        this.storageProfile = storageProfile;
        return this;
    }

    /**
     * Get the httpProxyConfig property: HTTP Proxy configuration for the VM.
     * 
     * @return the httpProxyConfig value.
     */
    public HttpProxyConfiguration httpProxyConfig() {
        return this.httpProxyConfig;
    }

    /**
     * Set the httpProxyConfig property: HTTP Proxy configuration for the VM.
     * 
     * @param httpProxyConfig the httpProxyConfig value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties withHttpProxyConfig(HttpProxyConfiguration httpProxyConfig) {
        this.httpProxyConfig = httpProxyConfig;
        return this;
    }

    /**
     * Get the createFromLocal property: Boolean indicating whether this is an existing local virtual machine or if one
     * should be created.
     * 
     * @return the createFromLocal value.
     */
    public Boolean createFromLocal() {
        return this.createFromLocal;
    }

    /**
     * Set the createFromLocal property: Boolean indicating whether this is an existing local virtual machine or if one
     * should be created.
     * 
     * @param createFromLocal the createFromLocal value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties withCreateFromLocal(Boolean createFromLocal) {
        this.createFromLocal = createFromLocal;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the virtual machine instance.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the instanceView property: The virtual machine instance view.
     * 
     * @return the instanceView value.
     */
    public VirtualMachineInstanceView instanceView() {
        return this.instanceView;
    }

    /**
     * Get the status property: The observed state of virtual machine instances.
     * 
     * @return the status value.
     */
    public VirtualMachineInstanceStatus status() {
        return this.status;
    }

    /**
     * Get the guestAgentInstallStatus property: Guest agent install status.
     * 
     * @return the guestAgentInstallStatus value.
     */
    public GuestAgentInstallStatus guestAgentInstallStatus() {
        return this.guestAgentInstallStatus;
    }

    /**
     * Set the guestAgentInstallStatus property: Guest agent install status.
     * 
     * @param guestAgentInstallStatus the guestAgentInstallStatus value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties
        withGuestAgentInstallStatus(GuestAgentInstallStatus guestAgentInstallStatus) {
        this.guestAgentInstallStatus = guestAgentInstallStatus;
        return this;
    }

    /**
     * Get the vmId property: Unique identifier for the vm resource.
     * 
     * @return the vmId value.
     */
    public String vmId() {
        return this.vmId;
    }

    /**
     * Get the resourceUid property: Unique identifier defined by ARC to identify the guest of the VM.
     * 
     * @return the resourceUid value.
     */
    public String resourceUid() {
        return this.resourceUid;
    }

    /**
     * Set the resourceUid property: Unique identifier defined by ARC to identify the guest of the VM.
     * 
     * @param resourceUid the resourceUid value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties withResourceUid(String resourceUid) {
        this.resourceUid = resourceUid;
        return this;
    }

    /**
     * Get the hyperVVmId property: Unique identifier for the Hyper-V VM resource.
     * 
     * @return the hyperVVmId value.
     */
    public String hyperVVmId() {
        return this.hyperVVmId;
    }

    /**
     * Get the hostNodeName property: Name of the host node that the VM is on.
     * 
     * @return the hostNodeName value.
     */
    public String hostNodeName() {
        return this.hostNodeName;
    }

    /**
     * Get the hostNodeIpAddress property: Name of the host node that the VM is on.
     * 
     * @return the hostNodeIpAddress value.
     */
    public String hostNodeIpAddress() {
        return this.hostNodeIpAddress;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hardwareProfile() != null) {
            hardwareProfile().validate();
        }
        if (placementProfile() != null) {
            placementProfile().validate();
        }
        if (networkProfile() != null) {
            networkProfile().validate();
        }
        if (osProfile() != null) {
            osProfile().validate();
        }
        if (securityProfile() != null) {
            securityProfile().validate();
        }
        if (storageProfile() != null) {
            storageProfile().validate();
        }
        if (httpProxyConfig() != null) {
            httpProxyConfig().validate();
        }
        if (instanceView() != null) {
            instanceView().validate();
        }
        if (status() != null) {
            status().validate();
        }
        if (guestAgentInstallStatus() != null) {
            guestAgentInstallStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("hardwareProfile", this.hardwareProfile);
        jsonWriter.writeJsonField("placementProfile", this.placementProfile);
        jsonWriter.writeJsonField("networkProfile", this.networkProfile);
        jsonWriter.writeJsonField("osProfile", this.osProfile);
        jsonWriter.writeJsonField("securityProfile", this.securityProfile);
        jsonWriter.writeJsonField("storageProfile", this.storageProfile);
        jsonWriter.writeJsonField("httpProxyConfig", this.httpProxyConfig);
        jsonWriter.writeBooleanField("createFromLocal", this.createFromLocal);
        jsonWriter.writeJsonField("guestAgentInstallStatus", this.guestAgentInstallStatus);
        jsonWriter.writeStringField("resourceUid", this.resourceUid);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineInstanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineInstanceProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualMachineInstanceProperties.
     */
    public static VirtualMachineInstanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineInstanceProperties deserializedVirtualMachineInstanceProperties
                = new VirtualMachineInstanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hardwareProfile".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.hardwareProfile
                        = VirtualMachineInstancePropertiesHardwareProfile.fromJson(reader);
                } else if ("placementProfile".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.placementProfile
                        = VirtualMachineInstancePropertiesPlacementProfile.fromJson(reader);
                } else if ("networkProfile".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.networkProfile
                        = VirtualMachineInstancePropertiesNetworkProfile.fromJson(reader);
                } else if ("osProfile".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.osProfile
                        = VirtualMachineInstancePropertiesOsProfile.fromJson(reader);
                } else if ("securityProfile".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.securityProfile
                        = VirtualMachineInstancePropertiesSecurityProfile.fromJson(reader);
                } else if ("storageProfile".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.storageProfile
                        = VirtualMachineInstancePropertiesStorageProfile.fromJson(reader);
                } else if ("httpProxyConfig".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.httpProxyConfig
                        = HttpProxyConfiguration.fromJson(reader);
                } else if ("createFromLocal".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.createFromLocal
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.provisioningState
                        = ProvisioningStateEnum.fromString(reader.getString());
                } else if ("instanceView".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.instanceView
                        = VirtualMachineInstanceView.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.status = VirtualMachineInstanceStatus.fromJson(reader);
                } else if ("guestAgentInstallStatus".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.guestAgentInstallStatus
                        = GuestAgentInstallStatus.fromJson(reader);
                } else if ("vmId".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.vmId = reader.getString();
                } else if ("resourceUid".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.resourceUid = reader.getString();
                } else if ("hyperVVmId".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.hyperVVmId = reader.getString();
                } else if ("hostNodeName".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.hostNodeName = reader.getString();
                } else if ("hostNodeIpAddress".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.hostNodeIpAddress = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineInstanceProperties;
        });
    }
}
