// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Request for uploading virtual hard disk.
 */
@Fluent
public final class VirtualHardDiskUploadRequest implements JsonSerializable<VirtualHardDiskUploadRequest> {
    /*
     * The Azure managed disk SAS URL to upload the virtual hard disk to.
     */
    private String azureManagedDiskUploadUrl;

    /**
     * Creates an instance of VirtualHardDiskUploadRequest class.
     */
    public VirtualHardDiskUploadRequest() {
    }

    /**
     * Get the azureManagedDiskUploadUrl property: The Azure managed disk SAS URL to upload the virtual hard disk to.
     * 
     * @return the azureManagedDiskUploadUrl value.
     */
    public String azureManagedDiskUploadUrl() {
        return this.azureManagedDiskUploadUrl;
    }

    /**
     * Set the azureManagedDiskUploadUrl property: The Azure managed disk SAS URL to upload the virtual hard disk to.
     * 
     * @param azureManagedDiskUploadUrl the azureManagedDiskUploadUrl value to set.
     * @return the VirtualHardDiskUploadRequest object itself.
     */
    public VirtualHardDiskUploadRequest withAzureManagedDiskUploadUrl(String azureManagedDiskUploadUrl) {
        this.azureManagedDiskUploadUrl = azureManagedDiskUploadUrl;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (azureManagedDiskUploadUrl() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property azureManagedDiskUploadUrl in model VirtualHardDiskUploadRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VirtualHardDiskUploadRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("azureManagedDiskUploadUrl", this.azureManagedDiskUploadUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualHardDiskUploadRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualHardDiskUploadRequest if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VirtualHardDiskUploadRequest.
     */
    public static VirtualHardDiskUploadRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualHardDiskUploadRequest deserializedVirtualHardDiskUploadRequest = new VirtualHardDiskUploadRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("azureManagedDiskUploadUrl".equals(fieldName)) {
                    deserializedVirtualHardDiskUploadRequest.azureManagedDiskUploadUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualHardDiskUploadRequest;
        });
    }
}
