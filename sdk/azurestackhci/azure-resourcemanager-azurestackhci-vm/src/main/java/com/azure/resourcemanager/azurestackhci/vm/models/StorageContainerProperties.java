// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties under the storage container resource.
 */
@Fluent
public final class StorageContainerProperties implements JsonSerializable<StorageContainerProperties> {
    /*
     * Path of the storage container on the disk
     */
    private String path;

    /*
     * Provisioning state of the storage container.
     */
    private ProvisioningStateEnum provisioningState;

    /*
     * The observed state of storage containers
     */
    private StorageContainerStatus status;

    /**
     * Creates an instance of StorageContainerProperties class.
     */
    public StorageContainerProperties() {
    }

    /**
     * Get the path property: Path of the storage container on the disk.
     * 
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: Path of the storage container on the disk.
     * 
     * @param path the path value to set.
     * @return the StorageContainerProperties object itself.
     */
    public StorageContainerProperties withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the storage container.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: The observed state of storage containers.
     * 
     * @return the status value.
     */
    public StorageContainerStatus status() {
        return this.status;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (path() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property path in model StorageContainerProperties"));
        }
        if (status() != null) {
            status().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StorageContainerProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("path", this.path);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageContainerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageContainerProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StorageContainerProperties.
     */
    public static StorageContainerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageContainerProperties deserializedStorageContainerProperties = new StorageContainerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("path".equals(fieldName)) {
                    deserializedStorageContainerProperties.path = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedStorageContainerProperties.provisioningState
                        = ProvisioningStateEnum.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedStorageContainerProperties.status = StorageContainerStatus.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageContainerProperties;
        });
    }
}
