// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * OsProfile - describes the configuration of the operating system and sets login data.
 */
@Fluent
public final class VirtualMachineInstancePropertiesOsProfile
    implements JsonSerializable<VirtualMachineInstancePropertiesOsProfile> {
    /*
     * AdminPassword - admin password
     */
    private String adminPassword;

    /*
     * AdminUsername - admin username
     */
    private String adminUsername;

    /*
     * ComputerName - name of the compute
     */
    private String computerName;

    /*
     * LinuxConfiguration - linux specific configuration values for the virtual machine instance
     */
    private VirtualMachineInstancePropertiesOsProfileLinuxConfiguration linuxConfiguration;

    /*
     * Windows Configuration for the virtual machine instance
     */
    private VirtualMachineInstancePropertiesOsProfileWindowsConfiguration windowsConfiguration;

    /**
     * Creates an instance of VirtualMachineInstancePropertiesOsProfile class.
     */
    public VirtualMachineInstancePropertiesOsProfile() {
    }

    /**
     * Get the adminPassword property: AdminPassword - admin password.
     * 
     * @return the adminPassword value.
     */
    public String adminPassword() {
        return this.adminPassword;
    }

    /**
     * Set the adminPassword property: AdminPassword - admin password.
     * 
     * @param adminPassword the adminPassword value to set.
     * @return the VirtualMachineInstancePropertiesOsProfile object itself.
     */
    public VirtualMachineInstancePropertiesOsProfile withAdminPassword(String adminPassword) {
        this.adminPassword = adminPassword;
        return this;
    }

    /**
     * Get the adminUsername property: AdminUsername - admin username.
     * 
     * @return the adminUsername value.
     */
    public String adminUsername() {
        return this.adminUsername;
    }

    /**
     * Set the adminUsername property: AdminUsername - admin username.
     * 
     * @param adminUsername the adminUsername value to set.
     * @return the VirtualMachineInstancePropertiesOsProfile object itself.
     */
    public VirtualMachineInstancePropertiesOsProfile withAdminUsername(String adminUsername) {
        this.adminUsername = adminUsername;
        return this;
    }

    /**
     * Get the computerName property: ComputerName - name of the compute.
     * 
     * @return the computerName value.
     */
    public String computerName() {
        return this.computerName;
    }

    /**
     * Set the computerName property: ComputerName - name of the compute.
     * 
     * @param computerName the computerName value to set.
     * @return the VirtualMachineInstancePropertiesOsProfile object itself.
     */
    public VirtualMachineInstancePropertiesOsProfile withComputerName(String computerName) {
        this.computerName = computerName;
        return this;
    }

    /**
     * Get the linuxConfiguration property: LinuxConfiguration - linux specific configuration values for the virtual
     * machine instance.
     * 
     * @return the linuxConfiguration value.
     */
    public VirtualMachineInstancePropertiesOsProfileLinuxConfiguration linuxConfiguration() {
        return this.linuxConfiguration;
    }

    /**
     * Set the linuxConfiguration property: LinuxConfiguration - linux specific configuration values for the virtual
     * machine instance.
     * 
     * @param linuxConfiguration the linuxConfiguration value to set.
     * @return the VirtualMachineInstancePropertiesOsProfile object itself.
     */
    public VirtualMachineInstancePropertiesOsProfile
        withLinuxConfiguration(VirtualMachineInstancePropertiesOsProfileLinuxConfiguration linuxConfiguration) {
        this.linuxConfiguration = linuxConfiguration;
        return this;
    }

    /**
     * Get the windowsConfiguration property: Windows Configuration for the virtual machine instance.
     * 
     * @return the windowsConfiguration value.
     */
    public VirtualMachineInstancePropertiesOsProfileWindowsConfiguration windowsConfiguration() {
        return this.windowsConfiguration;
    }

    /**
     * Set the windowsConfiguration property: Windows Configuration for the virtual machine instance.
     * 
     * @param windowsConfiguration the windowsConfiguration value to set.
     * @return the VirtualMachineInstancePropertiesOsProfile object itself.
     */
    public VirtualMachineInstancePropertiesOsProfile
        withWindowsConfiguration(VirtualMachineInstancePropertiesOsProfileWindowsConfiguration windowsConfiguration) {
        this.windowsConfiguration = windowsConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (linuxConfiguration() != null) {
            linuxConfiguration().validate();
        }
        if (windowsConfiguration() != null) {
            windowsConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("adminPassword", this.adminPassword);
        jsonWriter.writeStringField("adminUsername", this.adminUsername);
        jsonWriter.writeStringField("computerName", this.computerName);
        jsonWriter.writeJsonField("linuxConfiguration", this.linuxConfiguration);
        jsonWriter.writeJsonField("windowsConfiguration", this.windowsConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineInstancePropertiesOsProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineInstancePropertiesOsProfile if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualMachineInstancePropertiesOsProfile.
     */
    public static VirtualMachineInstancePropertiesOsProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineInstancePropertiesOsProfile deserializedVirtualMachineInstancePropertiesOsProfile
                = new VirtualMachineInstancePropertiesOsProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("adminPassword".equals(fieldName)) {
                    deserializedVirtualMachineInstancePropertiesOsProfile.adminPassword = reader.getString();
                } else if ("adminUsername".equals(fieldName)) {
                    deserializedVirtualMachineInstancePropertiesOsProfile.adminUsername = reader.getString();
                } else if ("computerName".equals(fieldName)) {
                    deserializedVirtualMachineInstancePropertiesOsProfile.computerName = reader.getString();
                } else if ("linuxConfiguration".equals(fieldName)) {
                    deserializedVirtualMachineInstancePropertiesOsProfile.linuxConfiguration
                        = VirtualMachineInstancePropertiesOsProfileLinuxConfiguration.fromJson(reader);
                } else if ("windowsConfiguration".equals(fieldName)) {
                    deserializedVirtualMachineInstancePropertiesOsProfile.windowsConfiguration
                        = VirtualMachineInstancePropertiesOsProfileWindowsConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineInstancePropertiesOsProfile;
        });
    }
}
