// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azurestackhci.vm.fluent.models.RouteTableProperties;
import java.io.IOException;
import java.util.List;

/**
 * Route table resource.
 */
@Fluent
public final class RouteTable implements JsonSerializable<RouteTable> {
    /*
     * A unique read-only string that changes whenever the resource is updated.
     */
    private String etag;

    /*
     * Resource name.
     */
    private String name;

    /*
     * Resource type.
     */
    private String type;

    /*
     * Properties of the route table.
     */
    private RouteTableProperties innerProperties;

    /**
     * Creates an instance of RouteTable class.
     */
    public RouteTable() {
    }

    /**
     * Get the etag property: A unique read-only string that changes whenever the resource is updated.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get the name property: Resource name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: Resource type.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the innerProperties property: Properties of the route table.
     * 
     * @return the innerProperties value.
     */
    private RouteTableProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the routes property: Collection of routes contained within a route table.
     * 
     * @return the routes value.
     */
    public List<Route> routes() {
        return this.innerProperties() == null ? null : this.innerProperties().routes();
    }

    /**
     * Set the routes property: Collection of routes contained within a route table.
     * 
     * @param routes the routes value to set.
     * @return the RouteTable object itself.
     */
    public RouteTable withRoutes(List<Route> routes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RouteTableProperties();
        }
        this.innerProperties().withRoutes(routes);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RouteTable from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RouteTable if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the RouteTable.
     */
    public static RouteTable fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RouteTable deserializedRouteTable = new RouteTable();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("etag".equals(fieldName)) {
                    deserializedRouteTable.etag = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedRouteTable.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedRouteTable.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedRouteTable.innerProperties = RouteTableProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRouteTable;
        });
    }
}
