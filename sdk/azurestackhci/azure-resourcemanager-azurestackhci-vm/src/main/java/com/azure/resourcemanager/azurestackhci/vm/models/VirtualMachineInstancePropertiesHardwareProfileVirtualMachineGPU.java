// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * GPU properties - describes the GPU configuration.
 */
@Fluent
public final class VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU
    implements JsonSerializable<VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU> {
    /*
     * GPU assignment type
     */
    private GpuAssignmentTypeEnum assignmentType;

    /*
     * Size of gpu partition in MB for GPU-P
     */
    private Long partitionSizeMB;

    /*
     * Name of the GPU
     */
    private String gpuName;

    /**
     * Creates an instance of VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU class.
     */
    public VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU() {
    }

    /**
     * Get the assignmentType property: GPU assignment type.
     * 
     * @return the assignmentType value.
     */
    public GpuAssignmentTypeEnum assignmentType() {
        return this.assignmentType;
    }

    /**
     * Set the assignmentType property: GPU assignment type.
     * 
     * @param assignmentType the assignmentType value to set.
     * @return the VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU object itself.
     */
    public VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU
        withAssignmentType(GpuAssignmentTypeEnum assignmentType) {
        this.assignmentType = assignmentType;
        return this;
    }

    /**
     * Get the partitionSizeMB property: Size of gpu partition in MB for GPU-P.
     * 
     * @return the partitionSizeMB value.
     */
    public Long partitionSizeMB() {
        return this.partitionSizeMB;
    }

    /**
     * Set the partitionSizeMB property: Size of gpu partition in MB for GPU-P.
     * 
     * @param partitionSizeMB the partitionSizeMB value to set.
     * @return the VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU object itself.
     */
    public VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU withPartitionSizeMB(Long partitionSizeMB) {
        this.partitionSizeMB = partitionSizeMB;
        return this;
    }

    /**
     * Get the gpuName property: Name of the GPU.
     * 
     * @return the gpuName value.
     */
    public String gpuName() {
        return this.gpuName;
    }

    /**
     * Set the gpuName property: Name of the GPU.
     * 
     * @param gpuName the gpuName value to set.
     * @return the VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU object itself.
     */
    public VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU withGpuName(String gpuName) {
        this.gpuName = gpuName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (assignmentType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property assignmentType in model VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU"));
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("assignmentType",
            this.assignmentType == null ? null : this.assignmentType.toString());
        jsonWriter.writeNumberField("partitionSizeMB", this.partitionSizeMB);
        jsonWriter.writeStringField("gpuName", this.gpuName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU if the JsonReader was
     * pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the
     * VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU.
     */
    public static VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU deserializedVirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU
                = new VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("assignmentType".equals(fieldName)) {
                    deserializedVirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU.assignmentType
                        = GpuAssignmentTypeEnum.fromString(reader.getString());
                } else if ("partitionSizeMB".equals(fieldName)) {
                    deserializedVirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU.partitionSizeMB
                        = reader.getNullable(JsonReader::getLong);
                } else if ("gpuName".equals(fieldName)) {
                    deserializedVirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU.gpuName
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU;
        });
    }
}
