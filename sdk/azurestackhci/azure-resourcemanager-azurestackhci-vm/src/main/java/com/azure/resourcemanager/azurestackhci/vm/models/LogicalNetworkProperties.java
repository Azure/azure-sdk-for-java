// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties under the logical network resource.
 */
@Fluent
public final class LogicalNetworkProperties implements JsonSerializable<LogicalNetworkProperties> {
    /*
     * DhcpOptions contains an array of DNS servers available to VMs deployed in the logical network. Standard DHCP
     * option for a subnet overrides logical network DHCP options.
     */
    private LogicalNetworkPropertiesDhcpOptions dhcpOptions;

    /*
     * Subnet - list of subnets under the logical network
     */
    private List<Subnet> subnets;

    /*
     * Provisioning state of the logical network.
     */
    private ProvisioningStateEnum provisioningState;

    /*
     * name of the network switch to be used for VMs
     */
    private String vmSwitchName;

    /*
     * The observed state of logical networks
     */
    private LogicalNetworkStatus status;

    /*
     * Type of the Logical Network
     */
    private LogicalNetworkTypeEnum networkType;

    /**
     * Creates an instance of LogicalNetworkProperties class.
     */
    public LogicalNetworkProperties() {
    }

    /**
     * Get the dhcpOptions property: DhcpOptions contains an array of DNS servers available to VMs deployed in the
     * logical network. Standard DHCP option for a subnet overrides logical network DHCP options.
     * 
     * @return the dhcpOptions value.
     */
    public LogicalNetworkPropertiesDhcpOptions dhcpOptions() {
        return this.dhcpOptions;
    }

    /**
     * Set the dhcpOptions property: DhcpOptions contains an array of DNS servers available to VMs deployed in the
     * logical network. Standard DHCP option for a subnet overrides logical network DHCP options.
     * 
     * @param dhcpOptions the dhcpOptions value to set.
     * @return the LogicalNetworkProperties object itself.
     */
    public LogicalNetworkProperties withDhcpOptions(LogicalNetworkPropertiesDhcpOptions dhcpOptions) {
        this.dhcpOptions = dhcpOptions;
        return this;
    }

    /**
     * Get the subnets property: Subnet - list of subnets under the logical network.
     * 
     * @return the subnets value.
     */
    public List<Subnet> subnets() {
        return this.subnets;
    }

    /**
     * Set the subnets property: Subnet - list of subnets under the logical network.
     * 
     * @param subnets the subnets value to set.
     * @return the LogicalNetworkProperties object itself.
     */
    public LogicalNetworkProperties withSubnets(List<Subnet> subnets) {
        this.subnets = subnets;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the logical network.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the vmSwitchName property: name of the network switch to be used for VMs.
     * 
     * @return the vmSwitchName value.
     */
    public String vmSwitchName() {
        return this.vmSwitchName;
    }

    /**
     * Set the vmSwitchName property: name of the network switch to be used for VMs.
     * 
     * @param vmSwitchName the vmSwitchName value to set.
     * @return the LogicalNetworkProperties object itself.
     */
    public LogicalNetworkProperties withVmSwitchName(String vmSwitchName) {
        this.vmSwitchName = vmSwitchName;
        return this;
    }

    /**
     * Get the status property: The observed state of logical networks.
     * 
     * @return the status value.
     */
    public LogicalNetworkStatus status() {
        return this.status;
    }

    /**
     * Get the networkType property: Type of the Logical Network.
     * 
     * @return the networkType value.
     */
    public LogicalNetworkTypeEnum networkType() {
        return this.networkType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dhcpOptions() != null) {
            dhcpOptions().validate();
        }
        if (subnets() != null) {
            subnets().forEach(e -> e.validate());
        }
        if (status() != null) {
            status().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("dhcpOptions", this.dhcpOptions);
        jsonWriter.writeArrayField("subnets", this.subnets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("vmSwitchName", this.vmSwitchName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LogicalNetworkProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LogicalNetworkProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LogicalNetworkProperties.
     */
    public static LogicalNetworkProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LogicalNetworkProperties deserializedLogicalNetworkProperties = new LogicalNetworkProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dhcpOptions".equals(fieldName)) {
                    deserializedLogicalNetworkProperties.dhcpOptions
                        = LogicalNetworkPropertiesDhcpOptions.fromJson(reader);
                } else if ("subnets".equals(fieldName)) {
                    List<Subnet> subnets = reader.readArray(reader1 -> Subnet.fromJson(reader1));
                    deserializedLogicalNetworkProperties.subnets = subnets;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedLogicalNetworkProperties.provisioningState
                        = ProvisioningStateEnum.fromString(reader.getString());
                } else if ("vmSwitchName".equals(fieldName)) {
                    deserializedLogicalNetworkProperties.vmSwitchName = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedLogicalNetworkProperties.status = LogicalNetworkStatus.fromJson(reader);
                } else if ("networkType".equals(fieldName)) {
                    deserializedLogicalNetworkProperties.networkType
                        = LogicalNetworkTypeEnum.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLogicalNetworkProperties;
        });
    }
}
