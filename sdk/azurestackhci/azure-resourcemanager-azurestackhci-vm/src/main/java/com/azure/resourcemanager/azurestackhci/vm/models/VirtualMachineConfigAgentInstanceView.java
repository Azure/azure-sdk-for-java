// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The instance view of the VM Config Agent running on the virtual machine.
 */
@Immutable
public final class VirtualMachineConfigAgentInstanceView
    implements JsonSerializable<VirtualMachineConfigAgentInstanceView> {
    /*
     * The VM Config Agent full version.
     */
    private String vmConfigAgentVersion;

    /*
     * The resource status information.
     */
    private List<InstanceViewStatus> statuses;

    /**
     * Creates an instance of VirtualMachineConfigAgentInstanceView class.
     */
    private VirtualMachineConfigAgentInstanceView() {
    }

    /**
     * Get the vmConfigAgentVersion property: The VM Config Agent full version.
     * 
     * @return the vmConfigAgentVersion value.
     */
    public String vmConfigAgentVersion() {
        return this.vmConfigAgentVersion;
    }

    /**
     * Get the statuses property: The resource status information.
     * 
     * @return the statuses value.
     */
    public List<InstanceViewStatus> statuses() {
        return this.statuses;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (statuses() != null) {
            statuses().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("vmConfigAgentVersion", this.vmConfigAgentVersion);
        jsonWriter.writeArrayField("statuses", this.statuses, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineConfigAgentInstanceView from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineConfigAgentInstanceView if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualMachineConfigAgentInstanceView.
     */
    public static VirtualMachineConfigAgentInstanceView fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineConfigAgentInstanceView deserializedVirtualMachineConfigAgentInstanceView
                = new VirtualMachineConfigAgentInstanceView();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vmConfigAgentVersion".equals(fieldName)) {
                    deserializedVirtualMachineConfigAgentInstanceView.vmConfigAgentVersion = reader.getString();
                } else if ("statuses".equals(fieldName)) {
                    List<InstanceViewStatus> statuses
                        = reader.readArray(reader1 -> InstanceViewStatus.fromJson(reader1));
                    deserializedVirtualMachineConfigAgentInstanceView.statuses = statuses;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineConfigAgentInstanceView;
        });
    }
}
