// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties under the gallery image resource.
 */
@Fluent
public final class GalleryImageProperties implements JsonSerializable<GalleryImageProperties> {
    /*
     * Storage ContainerID of the storage container to be used for gallery image
     */
    private String containerId;

    /*
     * location of the image the gallery image should be created from
     */
    private String imagePath;

    /*
     * Operating system type that the gallery image uses [Windows, Linux]
     */
    private OperatingSystemTypes osType;

    /*
     * Datasource for the gallery image when provisioning with cloud-init [NoCloud, Azure]
     */
    private CloudInitDataSource cloudInitDataSource;

    /*
     * The hypervisor generation of the Virtual Machine [V1, V2]
     */
    private HyperVGeneration hyperVGeneration;

    /*
     * The credentials used to login to the image repository that has access to the specified image
     */
    private VmImageRepositoryCredentials vmImageRepositoryCredentials;

    /*
     * This is the gallery image definition identifier.
     */
    private GalleryImageIdentifier identifier;

    /*
     * Specifies information about the gallery image version that you want to create or update.
     */
    private GalleryImageVersion version;

    /*
     * Provisioning state of the gallery image.
     */
    private ProvisioningStateEnum provisioningState;

    /*
     * The observed state of gallery images
     */
    private GalleryImageStatus status;

    /*
     * Resource ID of the source virtual machine from whose OS disk the gallery image is created.
     */
    private String sourceVirtualMachineId;

    /**
     * Creates an instance of GalleryImageProperties class.
     */
    public GalleryImageProperties() {
    }

    /**
     * Get the containerId property: Storage ContainerID of the storage container to be used for gallery image.
     * 
     * @return the containerId value.
     */
    public String containerId() {
        return this.containerId;
    }

    /**
     * Set the containerId property: Storage ContainerID of the storage container to be used for gallery image.
     * 
     * @param containerId the containerId value to set.
     * @return the GalleryImageProperties object itself.
     */
    public GalleryImageProperties withContainerId(String containerId) {
        this.containerId = containerId;
        return this;
    }

    /**
     * Get the imagePath property: location of the image the gallery image should be created from.
     * 
     * @return the imagePath value.
     */
    public String imagePath() {
        return this.imagePath;
    }

    /**
     * Set the imagePath property: location of the image the gallery image should be created from.
     * 
     * @param imagePath the imagePath value to set.
     * @return the GalleryImageProperties object itself.
     */
    public GalleryImageProperties withImagePath(String imagePath) {
        this.imagePath = imagePath;
        return this;
    }

    /**
     * Get the osType property: Operating system type that the gallery image uses [Windows, Linux].
     * 
     * @return the osType value.
     */
    public OperatingSystemTypes osType() {
        return this.osType;
    }

    /**
     * Set the osType property: Operating system type that the gallery image uses [Windows, Linux].
     * 
     * @param osType the osType value to set.
     * @return the GalleryImageProperties object itself.
     */
    public GalleryImageProperties withOsType(OperatingSystemTypes osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Get the cloudInitDataSource property: Datasource for the gallery image when provisioning with cloud-init
     * [NoCloud, Azure].
     * 
     * @return the cloudInitDataSource value.
     */
    public CloudInitDataSource cloudInitDataSource() {
        return this.cloudInitDataSource;
    }

    /**
     * Set the cloudInitDataSource property: Datasource for the gallery image when provisioning with cloud-init
     * [NoCloud, Azure].
     * 
     * @param cloudInitDataSource the cloudInitDataSource value to set.
     * @return the GalleryImageProperties object itself.
     */
    public GalleryImageProperties withCloudInitDataSource(CloudInitDataSource cloudInitDataSource) {
        this.cloudInitDataSource = cloudInitDataSource;
        return this;
    }

    /**
     * Get the hyperVGeneration property: The hypervisor generation of the Virtual Machine [V1, V2].
     * 
     * @return the hyperVGeneration value.
     */
    public HyperVGeneration hyperVGeneration() {
        return this.hyperVGeneration;
    }

    /**
     * Set the hyperVGeneration property: The hypervisor generation of the Virtual Machine [V1, V2].
     * 
     * @param hyperVGeneration the hyperVGeneration value to set.
     * @return the GalleryImageProperties object itself.
     */
    public GalleryImageProperties withHyperVGeneration(HyperVGeneration hyperVGeneration) {
        this.hyperVGeneration = hyperVGeneration;
        return this;
    }

    /**
     * Get the vmImageRepositoryCredentials property: The credentials used to login to the image repository that has
     * access to the specified image.
     * 
     * @return the vmImageRepositoryCredentials value.
     */
    public VmImageRepositoryCredentials vmImageRepositoryCredentials() {
        return this.vmImageRepositoryCredentials;
    }

    /**
     * Set the vmImageRepositoryCredentials property: The credentials used to login to the image repository that has
     * access to the specified image.
     * 
     * @param vmImageRepositoryCredentials the vmImageRepositoryCredentials value to set.
     * @return the GalleryImageProperties object itself.
     */
    public GalleryImageProperties
        withVmImageRepositoryCredentials(VmImageRepositoryCredentials vmImageRepositoryCredentials) {
        this.vmImageRepositoryCredentials = vmImageRepositoryCredentials;
        return this;
    }

    /**
     * Get the identifier property: This is the gallery image definition identifier.
     * 
     * @return the identifier value.
     */
    public GalleryImageIdentifier identifier() {
        return this.identifier;
    }

    /**
     * Set the identifier property: This is the gallery image definition identifier.
     * 
     * @param identifier the identifier value to set.
     * @return the GalleryImageProperties object itself.
     */
    public GalleryImageProperties withIdentifier(GalleryImageIdentifier identifier) {
        this.identifier = identifier;
        return this;
    }

    /**
     * Get the version property: Specifies information about the gallery image version that you want to create or
     * update.
     * 
     * @return the version value.
     */
    public GalleryImageVersion version() {
        return this.version;
    }

    /**
     * Set the version property: Specifies information about the gallery image version that you want to create or
     * update.
     * 
     * @param version the version value to set.
     * @return the GalleryImageProperties object itself.
     */
    public GalleryImageProperties withVersion(GalleryImageVersion version) {
        this.version = version;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the gallery image.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: The observed state of gallery images.
     * 
     * @return the status value.
     */
    public GalleryImageStatus status() {
        return this.status;
    }

    /**
     * Get the sourceVirtualMachineId property: Resource ID of the source virtual machine from whose OS disk the gallery
     * image is created.
     * 
     * @return the sourceVirtualMachineId value.
     */
    public String sourceVirtualMachineId() {
        return this.sourceVirtualMachineId;
    }

    /**
     * Set the sourceVirtualMachineId property: Resource ID of the source virtual machine from whose OS disk the gallery
     * image is created.
     * 
     * @param sourceVirtualMachineId the sourceVirtualMachineId value to set.
     * @return the GalleryImageProperties object itself.
     */
    public GalleryImageProperties withSourceVirtualMachineId(String sourceVirtualMachineId) {
        this.sourceVirtualMachineId = sourceVirtualMachineId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (osType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property osType in model GalleryImageProperties"));
        }
        if (vmImageRepositoryCredentials() != null) {
            vmImageRepositoryCredentials().validate();
        }
        if (identifier() != null) {
            identifier().validate();
        }
        if (version() != null) {
            version().validate();
        }
        if (status() != null) {
            status().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GalleryImageProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("osType", this.osType == null ? null : this.osType.toString());
        jsonWriter.writeStringField("containerId", this.containerId);
        jsonWriter.writeStringField("imagePath", this.imagePath);
        jsonWriter.writeStringField("cloudInitDataSource",
            this.cloudInitDataSource == null ? null : this.cloudInitDataSource.toString());
        jsonWriter.writeStringField("hyperVGeneration",
            this.hyperVGeneration == null ? null : this.hyperVGeneration.toString());
        jsonWriter.writeJsonField("vmImageRepositoryCredentials", this.vmImageRepositoryCredentials);
        jsonWriter.writeJsonField("identifier", this.identifier);
        jsonWriter.writeJsonField("version", this.version);
        jsonWriter.writeStringField("sourceVirtualMachineId", this.sourceVirtualMachineId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GalleryImageProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GalleryImageProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GalleryImageProperties.
     */
    public static GalleryImageProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GalleryImageProperties deserializedGalleryImageProperties = new GalleryImageProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("osType".equals(fieldName)) {
                    deserializedGalleryImageProperties.osType = OperatingSystemTypes.fromString(reader.getString());
                } else if ("containerId".equals(fieldName)) {
                    deserializedGalleryImageProperties.containerId = reader.getString();
                } else if ("imagePath".equals(fieldName)) {
                    deserializedGalleryImageProperties.imagePath = reader.getString();
                } else if ("cloudInitDataSource".equals(fieldName)) {
                    deserializedGalleryImageProperties.cloudInitDataSource
                        = CloudInitDataSource.fromString(reader.getString());
                } else if ("hyperVGeneration".equals(fieldName)) {
                    deserializedGalleryImageProperties.hyperVGeneration
                        = HyperVGeneration.fromString(reader.getString());
                } else if ("vmImageRepositoryCredentials".equals(fieldName)) {
                    deserializedGalleryImageProperties.vmImageRepositoryCredentials
                        = VmImageRepositoryCredentials.fromJson(reader);
                } else if ("identifier".equals(fieldName)) {
                    deserializedGalleryImageProperties.identifier = GalleryImageIdentifier.fromJson(reader);
                } else if ("version".equals(fieldName)) {
                    deserializedGalleryImageProperties.version = GalleryImageVersion.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedGalleryImageProperties.provisioningState
                        = ProvisioningStateEnum.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedGalleryImageProperties.status = GalleryImageStatus.fromJson(reader);
                } else if ("sourceVirtualMachineId".equals(fieldName)) {
                    deserializedGalleryImageProperties.sourceVirtualMachineId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGalleryImageProperties;
        });
    }
}
