// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Network Security Group resource.
 */
@Immutable
public final class NetworkSecurityGroupProperties implements JsonSerializable<NetworkSecurityGroupProperties> {
    /*
     * A collection of references to network interfaces that are currently using this NSG.
     */
    private List<NetworkInterfaceArmReference> networkInterfaces;

    /*
     * A collection of references to logical networks that are currently using this NSG
     */
    private List<LogicalNetworkArmReference> subnets;

    /*
     * The provisioning state of the network security group resource.
     */
    private ProvisioningStateEnum provisioningState;

    /*
     * The observed state of Network Security Group
     */
    private NetworkSecurityGroupStatus status;

    /**
     * Creates an instance of NetworkSecurityGroupProperties class.
     */
    public NetworkSecurityGroupProperties() {
    }

    /**
     * Get the networkInterfaces property: A collection of references to network interfaces that are currently using
     * this NSG.
     * 
     * @return the networkInterfaces value.
     */
    public List<NetworkInterfaceArmReference> networkInterfaces() {
        return this.networkInterfaces;
    }

    /**
     * Get the subnets property: A collection of references to logical networks that are currently using this NSG.
     * 
     * @return the subnets value.
     */
    public List<LogicalNetworkArmReference> subnets() {
        return this.subnets;
    }

    /**
     * Get the provisioningState property: The provisioning state of the network security group resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: The observed state of Network Security Group.
     * 
     * @return the status value.
     */
    public NetworkSecurityGroupStatus status() {
        return this.status;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (networkInterfaces() != null) {
            networkInterfaces().forEach(e -> e.validate());
        }
        if (subnets() != null) {
            subnets().forEach(e -> e.validate());
        }
        if (status() != null) {
            status().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkSecurityGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkSecurityGroupProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkSecurityGroupProperties.
     */
    public static NetworkSecurityGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkSecurityGroupProperties deserializedNetworkSecurityGroupProperties
                = new NetworkSecurityGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("networkInterfaces".equals(fieldName)) {
                    List<NetworkInterfaceArmReference> networkInterfaces
                        = reader.readArray(reader1 -> NetworkInterfaceArmReference.fromJson(reader1));
                    deserializedNetworkSecurityGroupProperties.networkInterfaces = networkInterfaces;
                } else if ("subnets".equals(fieldName)) {
                    List<LogicalNetworkArmReference> subnets
                        = reader.readArray(reader1 -> LogicalNetworkArmReference.fromJson(reader1));
                    deserializedNetworkSecurityGroupProperties.subnets = subnets;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNetworkSecurityGroupProperties.provisioningState
                        = ProvisioningStateEnum.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedNetworkSecurityGroupProperties.status = NetworkSecurityGroupStatus.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkSecurityGroupProperties;
        });
    }
}
