// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the resource properties.
 */
@Immutable
public final class HybridIdentityMetadataProperties implements JsonSerializable<HybridIdentityMetadataProperties> {
    /*
     * The unique identifier for the resource.
     */
    private String resourceUid;

    /*
     * The Public Key.
     */
    private String publicKey;

    /*
     * Identity for the resource.
     */
    private Identity identity;

    /*
     * Provisioning state of the virtual machine instance.
     */
    private ProvisioningStateEnum provisioningState;

    /**
     * Creates an instance of HybridIdentityMetadataProperties class.
     */
    private HybridIdentityMetadataProperties() {
    }

    /**
     * Get the resourceUid property: The unique identifier for the resource.
     * 
     * @return the resourceUid value.
     */
    public String resourceUid() {
        return this.resourceUid;
    }

    /**
     * Get the publicKey property: The Public Key.
     * 
     * @return the publicKey value.
     */
    public String publicKey() {
        return this.publicKey;
    }

    /**
     * Get the identity property: Identity for the resource.
     * 
     * @return the identity value.
     */
    public Identity identity() {
        return this.identity;
    }

    /**
     * Get the provisioningState property: Provisioning state of the virtual machine instance.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceUid", this.resourceUid);
        jsonWriter.writeStringField("publicKey", this.publicKey);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HybridIdentityMetadataProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HybridIdentityMetadataProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HybridIdentityMetadataProperties.
     */
    public static HybridIdentityMetadataProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HybridIdentityMetadataProperties deserializedHybridIdentityMetadataProperties
                = new HybridIdentityMetadataProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceUid".equals(fieldName)) {
                    deserializedHybridIdentityMetadataProperties.resourceUid = reader.getString();
                } else if ("publicKey".equals(fieldName)) {
                    deserializedHybridIdentityMetadataProperties.publicKey = reader.getString();
                } else if ("identity".equals(fieldName)) {
                    deserializedHybridIdentityMetadataProperties.identity = Identity.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedHybridIdentityMetadataProperties.provisioningState
                        = ProvisioningStateEnum.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHybridIdentityMetadataProperties;
        });
    }
}
