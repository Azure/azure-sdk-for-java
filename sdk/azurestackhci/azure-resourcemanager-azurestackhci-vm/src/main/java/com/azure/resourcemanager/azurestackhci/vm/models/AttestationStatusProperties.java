// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the attestation status properties.
 */
@Immutable
public final class AttestationStatusProperties implements JsonSerializable<AttestationStatusProperties> {
    /*
     * The status of whether secure boot is enabled.
     */
    private AttestSecureBootPropertyEnum attestSecureBootEnabled;

    /*
     * The status of whether attestation certificate is validated.
     */
    private AttestCertPropertyEnum attestationCertValidated;

    /*
     * The status of whether the list of boot integrity properties is validated.
     */
    private AttestBootIntegrityPropertyEnum bootIntegrityValidated;

    /*
     * kernel version string for Linux VM.
     */
    private String linuxKernelVersion;

    /*
     * The health status of attestation validation and parsing
     */
    private AttestHealthStatusEnum healthStatus;

    /*
     * The time stamp of the last time attestation token is validated by relying party service.
     */
    private String timestamp;

    /*
     * The error message of attestation validation and parsing
     */
    private String errorMessage;

    /*
     * Provisioning state of the virtual machine instance.
     */
    private ProvisioningStateEnum provisioningState;

    /*
     * The hardware platform information from attestation token. This only applies to Confidential VM.
     */
    private AttestHWPlatformEnum attestHardwarePlatform;

    /*
     * The managed disk security encryption type from attestation token. This only applies to Confidential VM.
     */
    private AttestDiskSecurityEncryptionTypeEnum attestDiskSecurityEncryptionType;

    /**
     * Creates an instance of AttestationStatusProperties class.
     */
    private AttestationStatusProperties() {
    }

    /**
     * Get the attestSecureBootEnabled property: The status of whether secure boot is enabled.
     * 
     * @return the attestSecureBootEnabled value.
     */
    public AttestSecureBootPropertyEnum attestSecureBootEnabled() {
        return this.attestSecureBootEnabled;
    }

    /**
     * Get the attestationCertValidated property: The status of whether attestation certificate is validated.
     * 
     * @return the attestationCertValidated value.
     */
    public AttestCertPropertyEnum attestationCertValidated() {
        return this.attestationCertValidated;
    }

    /**
     * Get the bootIntegrityValidated property: The status of whether the list of boot integrity properties is
     * validated.
     * 
     * @return the bootIntegrityValidated value.
     */
    public AttestBootIntegrityPropertyEnum bootIntegrityValidated() {
        return this.bootIntegrityValidated;
    }

    /**
     * Get the linuxKernelVersion property: kernel version string for Linux VM.
     * 
     * @return the linuxKernelVersion value.
     */
    public String linuxKernelVersion() {
        return this.linuxKernelVersion;
    }

    /**
     * Get the healthStatus property: The health status of attestation validation and parsing.
     * 
     * @return the healthStatus value.
     */
    public AttestHealthStatusEnum healthStatus() {
        return this.healthStatus;
    }

    /**
     * Get the timestamp property: The time stamp of the last time attestation token is validated by relying party
     * service.
     * 
     * @return the timestamp value.
     */
    public String timestamp() {
        return this.timestamp;
    }

    /**
     * Get the errorMessage property: The error message of attestation validation and parsing.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Get the provisioningState property: Provisioning state of the virtual machine instance.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the attestHardwarePlatform property: The hardware platform information from attestation token. This only
     * applies to Confidential VM.
     * 
     * @return the attestHardwarePlatform value.
     */
    public AttestHWPlatformEnum attestHardwarePlatform() {
        return this.attestHardwarePlatform;
    }

    /**
     * Get the attestDiskSecurityEncryptionType property: The managed disk security encryption type from attestation
     * token. This only applies to Confidential VM.
     * 
     * @return the attestDiskSecurityEncryptionType value.
     */
    public AttestDiskSecurityEncryptionTypeEnum attestDiskSecurityEncryptionType() {
        return this.attestDiskSecurityEncryptionType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AttestationStatusProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AttestationStatusProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AttestationStatusProperties.
     */
    public static AttestationStatusProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AttestationStatusProperties deserializedAttestationStatusProperties = new AttestationStatusProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("attestSecureBootEnabled".equals(fieldName)) {
                    deserializedAttestationStatusProperties.attestSecureBootEnabled
                        = AttestSecureBootPropertyEnum.fromString(reader.getString());
                } else if ("attestationCertValidated".equals(fieldName)) {
                    deserializedAttestationStatusProperties.attestationCertValidated
                        = AttestCertPropertyEnum.fromString(reader.getString());
                } else if ("bootIntegrityValidated".equals(fieldName)) {
                    deserializedAttestationStatusProperties.bootIntegrityValidated
                        = AttestBootIntegrityPropertyEnum.fromString(reader.getString());
                } else if ("linuxKernelVersion".equals(fieldName)) {
                    deserializedAttestationStatusProperties.linuxKernelVersion = reader.getString();
                } else if ("healthStatus".equals(fieldName)) {
                    deserializedAttestationStatusProperties.healthStatus
                        = AttestHealthStatusEnum.fromString(reader.getString());
                } else if ("timestamp".equals(fieldName)) {
                    deserializedAttestationStatusProperties.timestamp = reader.getString();
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedAttestationStatusProperties.errorMessage = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAttestationStatusProperties.provisioningState
                        = ProvisioningStateEnum.fromString(reader.getString());
                } else if ("attestHardwarePlatform".equals(fieldName)) {
                    deserializedAttestationStatusProperties.attestHardwarePlatform
                        = AttestHWPlatformEnum.fromString(reader.getString());
                } else if ("attestDiskSecurityEncryptionType".equals(fieldName)) {
                    deserializedAttestationStatusProperties.attestDiskSecurityEncryptionType
                        = AttestDiskSecurityEncryptionTypeEnum.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAttestationStatusProperties;
        });
    }
}
