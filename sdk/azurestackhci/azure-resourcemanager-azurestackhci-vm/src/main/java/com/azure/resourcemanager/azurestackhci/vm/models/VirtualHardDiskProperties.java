// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties under the virtual hard disk resource.
 */
@Fluent
public final class VirtualHardDiskProperties implements JsonSerializable<VirtualHardDiskProperties> {
    /*
     * Block size in bytes
     */
    private Integer blockSizeBytes;

    /*
     * Size of the disk in GB
     */
    private Long diskSizeGB;

    /*
     * Boolean for enabling dynamic sizing on the virtual hard disk
     */
    private Boolean dynamic;

    /*
     * Logical sector in bytes
     */
    private Integer logicalSectorBytes;

    /*
     * Physical sector in bytes
     */
    private Integer physicalSectorBytes;

    /*
     * URL for downloading or accessing the virtual hard disk. This URL points to a secure link from where the VHD can
     * be downloaded or accessed directly.
     */
    private String downloadUrl;

    /*
     * The hypervisor generation of the Virtual Machine [V1, V2]
     */
    private HyperVGeneration hyperVGeneration;

    /*
     * The format of the actual VHD file [vhd, vhdx]
     */
    private DiskFileFormat diskFileFormat;

    /*
     * Boolean indicating whether it is an existing local hard disk or if one should be created.
     */
    private Boolean createFromLocal;

    /*
     * Provisioning state of the virtual hard disk.
     */
    private ProvisioningStateEnum provisioningState;

    /*
     * Storage ContainerID of the storage container to be used for VHD
     */
    private String containerId;

    /*
     * The observed state of virtual hard disks
     */
    private VirtualHardDiskStatus status;

    /*
     * The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk
     * that can be mounted on multiple VMs at the same time.
     */
    private Long maxShares;

    /**
     * Creates an instance of VirtualHardDiskProperties class.
     */
    public VirtualHardDiskProperties() {
    }

    /**
     * Get the blockSizeBytes property: Block size in bytes.
     * 
     * @return the blockSizeBytes value.
     */
    public Integer blockSizeBytes() {
        return this.blockSizeBytes;
    }

    /**
     * Set the blockSizeBytes property: Block size in bytes.
     * 
     * @param blockSizeBytes the blockSizeBytes value to set.
     * @return the VirtualHardDiskProperties object itself.
     */
    public VirtualHardDiskProperties withBlockSizeBytes(Integer blockSizeBytes) {
        this.blockSizeBytes = blockSizeBytes;
        return this;
    }

    /**
     * Get the diskSizeGB property: Size of the disk in GB.
     * 
     * @return the diskSizeGB value.
     */
    public Long diskSizeGB() {
        return this.diskSizeGB;
    }

    /**
     * Set the diskSizeGB property: Size of the disk in GB.
     * 
     * @param diskSizeGB the diskSizeGB value to set.
     * @return the VirtualHardDiskProperties object itself.
     */
    public VirtualHardDiskProperties withDiskSizeGB(Long diskSizeGB) {
        this.diskSizeGB = diskSizeGB;
        return this;
    }

    /**
     * Get the dynamic property: Boolean for enabling dynamic sizing on the virtual hard disk.
     * 
     * @return the dynamic value.
     */
    public Boolean dynamic() {
        return this.dynamic;
    }

    /**
     * Set the dynamic property: Boolean for enabling dynamic sizing on the virtual hard disk.
     * 
     * @param dynamic the dynamic value to set.
     * @return the VirtualHardDiskProperties object itself.
     */
    public VirtualHardDiskProperties withDynamic(Boolean dynamic) {
        this.dynamic = dynamic;
        return this;
    }

    /**
     * Get the logicalSectorBytes property: Logical sector in bytes.
     * 
     * @return the logicalSectorBytes value.
     */
    public Integer logicalSectorBytes() {
        return this.logicalSectorBytes;
    }

    /**
     * Set the logicalSectorBytes property: Logical sector in bytes.
     * 
     * @param logicalSectorBytes the logicalSectorBytes value to set.
     * @return the VirtualHardDiskProperties object itself.
     */
    public VirtualHardDiskProperties withLogicalSectorBytes(Integer logicalSectorBytes) {
        this.logicalSectorBytes = logicalSectorBytes;
        return this;
    }

    /**
     * Get the physicalSectorBytes property: Physical sector in bytes.
     * 
     * @return the physicalSectorBytes value.
     */
    public Integer physicalSectorBytes() {
        return this.physicalSectorBytes;
    }

    /**
     * Set the physicalSectorBytes property: Physical sector in bytes.
     * 
     * @param physicalSectorBytes the physicalSectorBytes value to set.
     * @return the VirtualHardDiskProperties object itself.
     */
    public VirtualHardDiskProperties withPhysicalSectorBytes(Integer physicalSectorBytes) {
        this.physicalSectorBytes = physicalSectorBytes;
        return this;
    }

    /**
     * Get the downloadUrl property: URL for downloading or accessing the virtual hard disk. This URL points to a secure
     * link from where the VHD can be downloaded or accessed directly.
     * 
     * @return the downloadUrl value.
     */
    public String downloadUrl() {
        return this.downloadUrl;
    }

    /**
     * Set the downloadUrl property: URL for downloading or accessing the virtual hard disk. This URL points to a secure
     * link from where the VHD can be downloaded or accessed directly.
     * 
     * @param downloadUrl the downloadUrl value to set.
     * @return the VirtualHardDiskProperties object itself.
     */
    public VirtualHardDiskProperties withDownloadUrl(String downloadUrl) {
        this.downloadUrl = downloadUrl;
        return this;
    }

    /**
     * Get the hyperVGeneration property: The hypervisor generation of the Virtual Machine [V1, V2].
     * 
     * @return the hyperVGeneration value.
     */
    public HyperVGeneration hyperVGeneration() {
        return this.hyperVGeneration;
    }

    /**
     * Set the hyperVGeneration property: The hypervisor generation of the Virtual Machine [V1, V2].
     * 
     * @param hyperVGeneration the hyperVGeneration value to set.
     * @return the VirtualHardDiskProperties object itself.
     */
    public VirtualHardDiskProperties withHyperVGeneration(HyperVGeneration hyperVGeneration) {
        this.hyperVGeneration = hyperVGeneration;
        return this;
    }

    /**
     * Get the diskFileFormat property: The format of the actual VHD file [vhd, vhdx].
     * 
     * @return the diskFileFormat value.
     */
    public DiskFileFormat diskFileFormat() {
        return this.diskFileFormat;
    }

    /**
     * Set the diskFileFormat property: The format of the actual VHD file [vhd, vhdx].
     * 
     * @param diskFileFormat the diskFileFormat value to set.
     * @return the VirtualHardDiskProperties object itself.
     */
    public VirtualHardDiskProperties withDiskFileFormat(DiskFileFormat diskFileFormat) {
        this.diskFileFormat = diskFileFormat;
        return this;
    }

    /**
     * Get the createFromLocal property: Boolean indicating whether it is an existing local hard disk or if one should
     * be created.
     * 
     * @return the createFromLocal value.
     */
    public Boolean createFromLocal() {
        return this.createFromLocal;
    }

    /**
     * Set the createFromLocal property: Boolean indicating whether it is an existing local hard disk or if one should
     * be created.
     * 
     * @param createFromLocal the createFromLocal value to set.
     * @return the VirtualHardDiskProperties object itself.
     */
    public VirtualHardDiskProperties withCreateFromLocal(Boolean createFromLocal) {
        this.createFromLocal = createFromLocal;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the virtual hard disk.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the containerId property: Storage ContainerID of the storage container to be used for VHD.
     * 
     * @return the containerId value.
     */
    public String containerId() {
        return this.containerId;
    }

    /**
     * Set the containerId property: Storage ContainerID of the storage container to be used for VHD.
     * 
     * @param containerId the containerId value to set.
     * @return the VirtualHardDiskProperties object itself.
     */
    public VirtualHardDiskProperties withContainerId(String containerId) {
        this.containerId = containerId;
        return this;
    }

    /**
     * Get the status property: The observed state of virtual hard disks.
     * 
     * @return the status value.
     */
    public VirtualHardDiskStatus status() {
        return this.status;
    }

    /**
     * Get the maxShares property: The maximum number of VMs that can attach to the disk at the same time. Value greater
     * than one indicates a disk that can be mounted on multiple VMs at the same time.
     * 
     * @return the maxShares value.
     */
    public Long maxShares() {
        return this.maxShares;
    }

    /**
     * Set the maxShares property: The maximum number of VMs that can attach to the disk at the same time. Value greater
     * than one indicates a disk that can be mounted on multiple VMs at the same time.
     * 
     * @param maxShares the maxShares value to set.
     * @return the VirtualHardDiskProperties object itself.
     */
    public VirtualHardDiskProperties withMaxShares(Long maxShares) {
        this.maxShares = maxShares;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() != null) {
            status().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("blockSizeBytes", this.blockSizeBytes);
        jsonWriter.writeNumberField("diskSizeGB", this.diskSizeGB);
        jsonWriter.writeBooleanField("dynamic", this.dynamic);
        jsonWriter.writeNumberField("logicalSectorBytes", this.logicalSectorBytes);
        jsonWriter.writeNumberField("physicalSectorBytes", this.physicalSectorBytes);
        jsonWriter.writeStringField("downloadUrl", this.downloadUrl);
        jsonWriter.writeStringField("hyperVGeneration",
            this.hyperVGeneration == null ? null : this.hyperVGeneration.toString());
        jsonWriter.writeStringField("diskFileFormat",
            this.diskFileFormat == null ? null : this.diskFileFormat.toString());
        jsonWriter.writeBooleanField("createFromLocal", this.createFromLocal);
        jsonWriter.writeStringField("containerId", this.containerId);
        jsonWriter.writeNumberField("maxShares", this.maxShares);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualHardDiskProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualHardDiskProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualHardDiskProperties.
     */
    public static VirtualHardDiskProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualHardDiskProperties deserializedVirtualHardDiskProperties = new VirtualHardDiskProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("blockSizeBytes".equals(fieldName)) {
                    deserializedVirtualHardDiskProperties.blockSizeBytes = reader.getNullable(JsonReader::getInt);
                } else if ("diskSizeGB".equals(fieldName)) {
                    deserializedVirtualHardDiskProperties.diskSizeGB = reader.getNullable(JsonReader::getLong);
                } else if ("dynamic".equals(fieldName)) {
                    deserializedVirtualHardDiskProperties.dynamic = reader.getNullable(JsonReader::getBoolean);
                } else if ("logicalSectorBytes".equals(fieldName)) {
                    deserializedVirtualHardDiskProperties.logicalSectorBytes = reader.getNullable(JsonReader::getInt);
                } else if ("physicalSectorBytes".equals(fieldName)) {
                    deserializedVirtualHardDiskProperties.physicalSectorBytes = reader.getNullable(JsonReader::getInt);
                } else if ("downloadUrl".equals(fieldName)) {
                    deserializedVirtualHardDiskProperties.downloadUrl = reader.getString();
                } else if ("hyperVGeneration".equals(fieldName)) {
                    deserializedVirtualHardDiskProperties.hyperVGeneration
                        = HyperVGeneration.fromString(reader.getString());
                } else if ("diskFileFormat".equals(fieldName)) {
                    deserializedVirtualHardDiskProperties.diskFileFormat
                        = DiskFileFormat.fromString(reader.getString());
                } else if ("createFromLocal".equals(fieldName)) {
                    deserializedVirtualHardDiskProperties.createFromLocal = reader.getNullable(JsonReader::getBoolean);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedVirtualHardDiskProperties.provisioningState
                        = ProvisioningStateEnum.fromString(reader.getString());
                } else if ("containerId".equals(fieldName)) {
                    deserializedVirtualHardDiskProperties.containerId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedVirtualHardDiskProperties.status = VirtualHardDiskStatus.fromJson(reader);
                } else if ("maxShares".equals(fieldName)) {
                    deserializedVirtualHardDiskProperties.maxShares = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualHardDiskProperties;
        });
    }
}
