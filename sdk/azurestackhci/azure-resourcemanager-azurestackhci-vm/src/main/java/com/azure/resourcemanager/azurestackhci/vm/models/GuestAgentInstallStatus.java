// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Defines the status of a guest agent installation.
 */
@Immutable
public final class GuestAgentInstallStatus implements JsonSerializable<GuestAgentInstallStatus> {
    /*
     * Specifies the VM's unique SMBIOS ID.
     */
    private String vmUuid;

    /*
     * The installation status of the hybrid machine agent installation.
     */
    private StatusTypes status;

    /*
     * The time of the last status change.
     */
    private OffsetDateTime lastStatusChange;

    /*
     * The hybrid machine agent full version.
     */
    private String agentVersion;

    /*
     * Details about the error state.
     */
    private List<ManagementError> errorDetails;

    /**
     * Creates an instance of GuestAgentInstallStatus class.
     */
    public GuestAgentInstallStatus() {
    }

    /**
     * Get the vmUuid property: Specifies the VM's unique SMBIOS ID.
     * 
     * @return the vmUuid value.
     */
    public String vmUuid() {
        return this.vmUuid;
    }

    /**
     * Get the status property: The installation status of the hybrid machine agent installation.
     * 
     * @return the status value.
     */
    public StatusTypes status() {
        return this.status;
    }

    /**
     * Get the lastStatusChange property: The time of the last status change.
     * 
     * @return the lastStatusChange value.
     */
    public OffsetDateTime lastStatusChange() {
        return this.lastStatusChange;
    }

    /**
     * Get the agentVersion property: The hybrid machine agent full version.
     * 
     * @return the agentVersion value.
     */
    public String agentVersion() {
        return this.agentVersion;
    }

    /**
     * Get the errorDetails property: Details about the error state.
     * 
     * @return the errorDetails value.
     */
    public List<ManagementError> errorDetails() {
        return this.errorDetails;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GuestAgentInstallStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GuestAgentInstallStatus if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GuestAgentInstallStatus.
     */
    public static GuestAgentInstallStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GuestAgentInstallStatus deserializedGuestAgentInstallStatus = new GuestAgentInstallStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vmUuid".equals(fieldName)) {
                    deserializedGuestAgentInstallStatus.vmUuid = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedGuestAgentInstallStatus.status = StatusTypes.fromString(reader.getString());
                } else if ("lastStatusChange".equals(fieldName)) {
                    deserializedGuestAgentInstallStatus.lastStatusChange = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("agentVersion".equals(fieldName)) {
                    deserializedGuestAgentInstallStatus.agentVersion = reader.getString();
                } else if ("errorDetails".equals(fieldName)) {
                    List<ManagementError> errorDetails = reader.readArray(reader1 -> ManagementError.fromJson(reader1));
                    deserializedGuestAgentInstallStatus.errorDetails = errorDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGuestAgentInstallStatus;
        });
    }
}
