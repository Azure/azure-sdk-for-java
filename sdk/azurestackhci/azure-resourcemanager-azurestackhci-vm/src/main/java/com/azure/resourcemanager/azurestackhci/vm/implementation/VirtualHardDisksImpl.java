// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurestackhci.vm.fluent.VirtualHardDisksClient;
import com.azure.resourcemanager.azurestackhci.vm.fluent.models.VirtualHardDiskInner;
import com.azure.resourcemanager.azurestackhci.vm.fluent.models.VirtualHardDiskUploadResponseInner;
import com.azure.resourcemanager.azurestackhci.vm.models.VirtualHardDisk;
import com.azure.resourcemanager.azurestackhci.vm.models.VirtualHardDiskUploadRequest;
import com.azure.resourcemanager.azurestackhci.vm.models.VirtualHardDiskUploadResponse;
import com.azure.resourcemanager.azurestackhci.vm.models.VirtualHardDisks;

public final class VirtualHardDisksImpl implements VirtualHardDisks {
    private static final ClientLogger LOGGER = new ClientLogger(VirtualHardDisksImpl.class);

    private final VirtualHardDisksClient innerClient;

    private final com.azure.resourcemanager.azurestackhci.vm.AzureStackHciVmManager serviceManager;

    public VirtualHardDisksImpl(VirtualHardDisksClient innerClient,
        com.azure.resourcemanager.azurestackhci.vm.AzureStackHciVmManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<VirtualHardDisk> getByResourceGroupWithResponse(String resourceGroupName,
        String virtualHardDiskName, Context context) {
        Response<VirtualHardDiskInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, virtualHardDiskName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new VirtualHardDiskImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VirtualHardDisk getByResourceGroup(String resourceGroupName, String virtualHardDiskName) {
        VirtualHardDiskInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, virtualHardDiskName);
        if (inner != null) {
            return new VirtualHardDiskImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String virtualHardDiskName) {
        this.serviceClient().delete(resourceGroupName, virtualHardDiskName);
    }

    public void delete(String resourceGroupName, String virtualHardDiskName, Context context) {
        this.serviceClient().delete(resourceGroupName, virtualHardDiskName, context);
    }

    public PagedIterable<VirtualHardDisk> listByResourceGroup(String resourceGroupName) {
        PagedIterable<VirtualHardDiskInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new VirtualHardDiskImpl(inner1, this.manager()));
    }

    public PagedIterable<VirtualHardDisk> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<VirtualHardDiskInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new VirtualHardDiskImpl(inner1, this.manager()));
    }

    public PagedIterable<VirtualHardDisk> list() {
        PagedIterable<VirtualHardDiskInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new VirtualHardDiskImpl(inner1, this.manager()));
    }

    public PagedIterable<VirtualHardDisk> list(Context context) {
        PagedIterable<VirtualHardDiskInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new VirtualHardDiskImpl(inner1, this.manager()));
    }

    public VirtualHardDiskUploadResponse upload(String resourceGroupName, String virtualHardDiskName,
        VirtualHardDiskUploadRequest body) {
        VirtualHardDiskUploadResponseInner inner
            = this.serviceClient().upload(resourceGroupName, virtualHardDiskName, body);
        if (inner != null) {
            return new VirtualHardDiskUploadResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public VirtualHardDiskUploadResponse upload(String resourceGroupName, String virtualHardDiskName,
        VirtualHardDiskUploadRequest body, Context context) {
        VirtualHardDiskUploadResponseInner inner
            = this.serviceClient().upload(resourceGroupName, virtualHardDiskName, body, context);
        if (inner != null) {
            return new VirtualHardDiskUploadResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public VirtualHardDisk getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualHardDiskName = ResourceManagerUtils.getValueFromIdByName(id, "virtualHardDisks");
        if (virtualHardDiskName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualHardDisks'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, virtualHardDiskName, Context.NONE).getValue();
    }

    public Response<VirtualHardDisk> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualHardDiskName = ResourceManagerUtils.getValueFromIdByName(id, "virtualHardDisks");
        if (virtualHardDiskName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualHardDisks'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, virtualHardDiskName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualHardDiskName = ResourceManagerUtils.getValueFromIdByName(id, "virtualHardDisks");
        if (virtualHardDiskName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualHardDisks'.", id)));
        }
        this.delete(resourceGroupName, virtualHardDiskName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualHardDiskName = ResourceManagerUtils.getValueFromIdByName(id, "virtualHardDisks");
        if (virtualHardDiskName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualHardDisks'.", id)));
        }
        this.delete(resourceGroupName, virtualHardDiskName, context);
    }

    private VirtualHardDisksClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurestackhci.vm.AzureStackHciVmManager manager() {
        return this.serviceManager;
    }

    public VirtualHardDiskImpl define(String name) {
        return new VirtualHardDiskImpl(name, this.manager());
    }
}
