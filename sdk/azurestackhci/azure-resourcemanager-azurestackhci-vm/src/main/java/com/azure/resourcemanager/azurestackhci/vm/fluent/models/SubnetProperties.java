// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azurestackhci.vm.models.IPPool;
import com.azure.resourcemanager.azurestackhci.vm.models.IpAllocationMethodEnum;
import com.azure.resourcemanager.azurestackhci.vm.models.NetworkSecurityGroupArmReference;
import com.azure.resourcemanager.azurestackhci.vm.models.RouteTable;
import com.azure.resourcemanager.azurestackhci.vm.models.SubnetIpConfigurationReference;
import java.io.IOException;
import java.util.List;

/**
 * Properties of the subnet.
 */
@Fluent
public final class SubnetProperties implements JsonSerializable<SubnetProperties> {
    /*
     * The address prefix for the subnet: Cidr for this subnet - IPv4, IPv6.
     */
    private String addressPrefix;

    /*
     * List of address prefixes for the subnet.
     */
    private List<String> addressPrefixes;

    /*
     * IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
     */
    private IpAllocationMethodEnum ipAllocationMethod;

    /*
     * IPConfigurationReferences - list of IPConfigurationReferences
     */
    private List<SubnetIpConfigurationReference> ipConfigurationReferences;

    /*
     * NetworkSecurityGroup - Network Security Group attached to the logical network.
     */
    private NetworkSecurityGroupArmReference networkSecurityGroup;

    /*
     * Route table resource.
     */
    private RouteTable routeTable;

    /*
     * network associated pool of IP Addresses
     */
    private List<IPPool> ipPools;

    /*
     * Vlan to use for the subnet
     */
    private Integer vlan;

    /**
     * Creates an instance of SubnetProperties class.
     */
    public SubnetProperties() {
    }

    /**
     * Get the addressPrefix property: The address prefix for the subnet: Cidr for this subnet - IPv4, IPv6.
     * 
     * @return the addressPrefix value.
     */
    public String addressPrefix() {
        return this.addressPrefix;
    }

    /**
     * Set the addressPrefix property: The address prefix for the subnet: Cidr for this subnet - IPv4, IPv6.
     * 
     * @param addressPrefix the addressPrefix value to set.
     * @return the SubnetProperties object itself.
     */
    public SubnetProperties withAddressPrefix(String addressPrefix) {
        this.addressPrefix = addressPrefix;
        return this;
    }

    /**
     * Get the addressPrefixes property: List of address prefixes for the subnet.
     * 
     * @return the addressPrefixes value.
     */
    public List<String> addressPrefixes() {
        return this.addressPrefixes;
    }

    /**
     * Set the addressPrefixes property: List of address prefixes for the subnet.
     * 
     * @param addressPrefixes the addressPrefixes value to set.
     * @return the SubnetProperties object itself.
     */
    public SubnetProperties withAddressPrefixes(List<String> addressPrefixes) {
        this.addressPrefixes = addressPrefixes;
        return this;
    }

    /**
     * Get the ipAllocationMethod property: IPAllocationMethod - The IP address allocation method. Possible values
     * include: 'Static', 'Dynamic'.
     * 
     * @return the ipAllocationMethod value.
     */
    public IpAllocationMethodEnum ipAllocationMethod() {
        return this.ipAllocationMethod;
    }

    /**
     * Set the ipAllocationMethod property: IPAllocationMethod - The IP address allocation method. Possible values
     * include: 'Static', 'Dynamic'.
     * 
     * @param ipAllocationMethod the ipAllocationMethod value to set.
     * @return the SubnetProperties object itself.
     */
    public SubnetProperties withIpAllocationMethod(IpAllocationMethodEnum ipAllocationMethod) {
        this.ipAllocationMethod = ipAllocationMethod;
        return this;
    }

    /**
     * Get the ipConfigurationReferences property: IPConfigurationReferences - list of IPConfigurationReferences.
     * 
     * @return the ipConfigurationReferences value.
     */
    public List<SubnetIpConfigurationReference> ipConfigurationReferences() {
        return this.ipConfigurationReferences;
    }

    /**
     * Set the ipConfigurationReferences property: IPConfigurationReferences - list of IPConfigurationReferences.
     * 
     * @param ipConfigurationReferences the ipConfigurationReferences value to set.
     * @return the SubnetProperties object itself.
     */
    public SubnetProperties
        withIpConfigurationReferences(List<SubnetIpConfigurationReference> ipConfigurationReferences) {
        this.ipConfigurationReferences = ipConfigurationReferences;
        return this;
    }

    /**
     * Get the networkSecurityGroup property: NetworkSecurityGroup - Network Security Group attached to the logical
     * network.
     * 
     * @return the networkSecurityGroup value.
     */
    public NetworkSecurityGroupArmReference networkSecurityGroup() {
        return this.networkSecurityGroup;
    }

    /**
     * Set the networkSecurityGroup property: NetworkSecurityGroup - Network Security Group attached to the logical
     * network.
     * 
     * @param networkSecurityGroup the networkSecurityGroup value to set.
     * @return the SubnetProperties object itself.
     */
    public SubnetProperties withNetworkSecurityGroup(NetworkSecurityGroupArmReference networkSecurityGroup) {
        this.networkSecurityGroup = networkSecurityGroup;
        return this;
    }

    /**
     * Get the routeTable property: Route table resource.
     * 
     * @return the routeTable value.
     */
    public RouteTable routeTable() {
        return this.routeTable;
    }

    /**
     * Set the routeTable property: Route table resource.
     * 
     * @param routeTable the routeTable value to set.
     * @return the SubnetProperties object itself.
     */
    public SubnetProperties withRouteTable(RouteTable routeTable) {
        this.routeTable = routeTable;
        return this;
    }

    /**
     * Get the ipPools property: network associated pool of IP Addresses.
     * 
     * @return the ipPools value.
     */
    public List<IPPool> ipPools() {
        return this.ipPools;
    }

    /**
     * Set the ipPools property: network associated pool of IP Addresses.
     * 
     * @param ipPools the ipPools value to set.
     * @return the SubnetProperties object itself.
     */
    public SubnetProperties withIpPools(List<IPPool> ipPools) {
        this.ipPools = ipPools;
        return this;
    }

    /**
     * Get the vlan property: Vlan to use for the subnet.
     * 
     * @return the vlan value.
     */
    public Integer vlan() {
        return this.vlan;
    }

    /**
     * Set the vlan property: Vlan to use for the subnet.
     * 
     * @param vlan the vlan value to set.
     * @return the SubnetProperties object itself.
     */
    public SubnetProperties withVlan(Integer vlan) {
        this.vlan = vlan;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ipConfigurationReferences() != null) {
            ipConfigurationReferences().forEach(e -> e.validate());
        }
        if (networkSecurityGroup() != null) {
            networkSecurityGroup().validate();
        }
        if (routeTable() != null) {
            routeTable().validate();
        }
        if (ipPools() != null) {
            ipPools().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("addressPrefix", this.addressPrefix);
        jsonWriter.writeArrayField("addressPrefixes", this.addressPrefixes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("ipAllocationMethod",
            this.ipAllocationMethod == null ? null : this.ipAllocationMethod.toString());
        jsonWriter.writeArrayField("ipConfigurationReferences", this.ipConfigurationReferences,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("networkSecurityGroup", this.networkSecurityGroup);
        jsonWriter.writeJsonField("routeTable", this.routeTable);
        jsonWriter.writeArrayField("ipPools", this.ipPools, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("vlan", this.vlan);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SubnetProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SubnetProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SubnetProperties.
     */
    public static SubnetProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SubnetProperties deserializedSubnetProperties = new SubnetProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("addressPrefix".equals(fieldName)) {
                    deserializedSubnetProperties.addressPrefix = reader.getString();
                } else if ("addressPrefixes".equals(fieldName)) {
                    List<String> addressPrefixes = reader.readArray(reader1 -> reader1.getString());
                    deserializedSubnetProperties.addressPrefixes = addressPrefixes;
                } else if ("ipAllocationMethod".equals(fieldName)) {
                    deserializedSubnetProperties.ipAllocationMethod
                        = IpAllocationMethodEnum.fromString(reader.getString());
                } else if ("ipConfigurationReferences".equals(fieldName)) {
                    List<SubnetIpConfigurationReference> ipConfigurationReferences
                        = reader.readArray(reader1 -> SubnetIpConfigurationReference.fromJson(reader1));
                    deserializedSubnetProperties.ipConfigurationReferences = ipConfigurationReferences;
                } else if ("networkSecurityGroup".equals(fieldName)) {
                    deserializedSubnetProperties.networkSecurityGroup
                        = NetworkSecurityGroupArmReference.fromJson(reader);
                } else if ("routeTable".equals(fieldName)) {
                    deserializedSubnetProperties.routeTable = RouteTable.fromJson(reader);
                } else if ("ipPools".equals(fieldName)) {
                    List<IPPool> ipPools = reader.readArray(reader1 -> IPPool.fromJson(reader1));
                    deserializedSubnetProperties.ipPools = ipPools;
                } else if ("vlan".equals(fieldName)) {
                    deserializedSubnetProperties.vlan = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubnetProperties;
        });
    }
}
