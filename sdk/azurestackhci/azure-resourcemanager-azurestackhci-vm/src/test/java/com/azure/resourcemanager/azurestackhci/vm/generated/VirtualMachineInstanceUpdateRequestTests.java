// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.vm.models.GpuAssignmentTypeEnum;
import com.azure.resourcemanager.azurestackhci.vm.models.HardwareProfileUpdate;
import com.azure.resourcemanager.azurestackhci.vm.models.Identity;
import com.azure.resourcemanager.azurestackhci.vm.models.IdentityType;
import com.azure.resourcemanager.azurestackhci.vm.models.NetworkInterfaceArmReference;
import com.azure.resourcemanager.azurestackhci.vm.models.NetworkProfileUpdate;
import com.azure.resourcemanager.azurestackhci.vm.models.OsProfileUpdate;
import com.azure.resourcemanager.azurestackhci.vm.models.OsProfileUpdateLinuxConfiguration;
import com.azure.resourcemanager.azurestackhci.vm.models.OsProfileUpdateWindowsConfiguration;
import com.azure.resourcemanager.azurestackhci.vm.models.StorageProfileUpdate;
import com.azure.resourcemanager.azurestackhci.vm.models.VirtualHardDiskArmReference;
import com.azure.resourcemanager.azurestackhci.vm.models.VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU;
import com.azure.resourcemanager.azurestackhci.vm.models.VirtualMachineInstanceUpdateProperties;
import com.azure.resourcemanager.azurestackhci.vm.models.VirtualMachineInstanceUpdateRequest;
import com.azure.resourcemanager.azurestackhci.vm.models.VmSizeEnum;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineInstanceUpdateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineInstanceUpdateRequest model = BinaryData.fromString(
            "{\"properties\":{\"hardwareProfile\":{\"vmSize\":\"Standard_NV6\",\"processors\":1133541665,\"memoryMB\":5718085323874880821,\"virtualMachineGPUs\":[{\"assignmentType\":\"GpuP\",\"partitionSizeMB\":6995511201429396399,\"gpuName\":\"ujmkcjhwqy\"},{\"assignmentType\":\"GpuP\",\"partitionSizeMB\":3152947325406928517,\"gpuName\":\"wj\"},{\"assignmentType\":\"GpuP\",\"partitionSizeMB\":8703835635466312899,\"gpuName\":\"ervnaenqpehi\"},{\"assignmentType\":\"GpuDDA\",\"partitionSizeMB\":3847328622576191056,\"gpuName\":\"ifthnz\"}]},\"storageProfile\":{\"dataDisks\":[{\"id\":\"gnayqigynduh\"}]},\"networkProfile\":{\"networkInterfaces\":[{\"id\":\"kthumaqolbgycdui\"},{\"id\":\"tgccymvaolpss\"}]},\"osProfile\":{\"computerName\":\"fmmdnbbg\",\"linuxConfiguration\":{\"provisionVMAgent\":true,\"provisionVMConfigAgent\":true},\"windowsConfiguration\":{\"provisionVMAgent\":true,\"provisionVMConfigAgent\":false}}},\"identity\":{\"principalId\":\"zdxss\",\"tenantId\":\"bzmnvdfznud\",\"type\":\"SystemAssigned\"}}")
            .toObject(VirtualMachineInstanceUpdateRequest.class);
        Assertions.assertEquals(VmSizeEnum.STANDARD_NV6, model.properties().hardwareProfile().vmSize());
        Assertions.assertEquals(1133541665, model.properties().hardwareProfile().processors());
        Assertions.assertEquals(5718085323874880821L, model.properties().hardwareProfile().memoryMB());
        Assertions.assertEquals(GpuAssignmentTypeEnum.GPUP,
            model.properties().hardwareProfile().virtualMachineGPUs().get(0).assignmentType());
        Assertions.assertEquals(6995511201429396399L,
            model.properties().hardwareProfile().virtualMachineGPUs().get(0).partitionSizeMB());
        Assertions.assertEquals("ujmkcjhwqy",
            model.properties().hardwareProfile().virtualMachineGPUs().get(0).gpuName());
        Assertions.assertEquals("gnayqigynduh", model.properties().storageProfile().dataDisks().get(0).id());
        Assertions.assertEquals("kthumaqolbgycdui",
            model.properties().networkProfile().networkInterfaces().get(0).id());
        Assertions.assertEquals("fmmdnbbg", model.properties().osProfile().computerName());
        Assertions.assertTrue(model.properties().osProfile().linuxConfiguration().provisionVMAgent());
        Assertions.assertTrue(model.properties().osProfile().linuxConfiguration().provisionVMConfigAgent());
        Assertions.assertTrue(model.properties().osProfile().windowsConfiguration().provisionVMAgent());
        Assertions.assertFalse(model.properties().osProfile().windowsConfiguration().provisionVMConfigAgent());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineInstanceUpdateRequest model = new VirtualMachineInstanceUpdateRequest()
            .withProperties(new VirtualMachineInstanceUpdateProperties()
                .withHardwareProfile(new HardwareProfileUpdate().withVmSize(VmSizeEnum.STANDARD_NV6)
                    .withProcessors(1133541665)
                    .withMemoryMB(5718085323874880821L)
                    .withVirtualMachineGPUs(Arrays.asList(
                        new VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU()
                            .withAssignmentType(GpuAssignmentTypeEnum.GPUP)
                            .withPartitionSizeMB(6995511201429396399L)
                            .withGpuName("ujmkcjhwqy"),
                        new VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU()
                            .withAssignmentType(GpuAssignmentTypeEnum.GPUP)
                            .withPartitionSizeMB(3152947325406928517L)
                            .withGpuName("wj"),
                        new VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU()
                            .withAssignmentType(GpuAssignmentTypeEnum.GPUP)
                            .withPartitionSizeMB(8703835635466312899L)
                            .withGpuName("ervnaenqpehi"),
                        new VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU()
                            .withAssignmentType(GpuAssignmentTypeEnum.GPU_DDA)
                            .withPartitionSizeMB(3847328622576191056L)
                            .withGpuName("ifthnz"))))
                .withStorageProfile(new StorageProfileUpdate()
                    .withDataDisks(Arrays.asList(new VirtualHardDiskArmReference().withId("gnayqigynduh"))))
                .withNetworkProfile(new NetworkProfileUpdate()
                    .withNetworkInterfaces(Arrays.asList(new NetworkInterfaceArmReference().withId("kthumaqolbgycdui"),
                        new NetworkInterfaceArmReference().withId("tgccymvaolpss"))))
                .withOsProfile(new OsProfileUpdate().withComputerName("fmmdnbbg")
                    .withLinuxConfiguration(new OsProfileUpdateLinuxConfiguration().withProvisionVMAgent(true)
                        .withProvisionVMConfigAgent(true))
                    .withWindowsConfiguration(new OsProfileUpdateWindowsConfiguration().withProvisionVMAgent(true)
                        .withProvisionVMConfigAgent(false))))
            .withIdentity(new Identity().withType(IdentityType.SYSTEM_ASSIGNED));
        model = BinaryData.fromObject(model).toObject(VirtualMachineInstanceUpdateRequest.class);
        Assertions.assertEquals(VmSizeEnum.STANDARD_NV6, model.properties().hardwareProfile().vmSize());
        Assertions.assertEquals(1133541665, model.properties().hardwareProfile().processors());
        Assertions.assertEquals(5718085323874880821L, model.properties().hardwareProfile().memoryMB());
        Assertions.assertEquals(GpuAssignmentTypeEnum.GPUP,
            model.properties().hardwareProfile().virtualMachineGPUs().get(0).assignmentType());
        Assertions.assertEquals(6995511201429396399L,
            model.properties().hardwareProfile().virtualMachineGPUs().get(0).partitionSizeMB());
        Assertions.assertEquals("ujmkcjhwqy",
            model.properties().hardwareProfile().virtualMachineGPUs().get(0).gpuName());
        Assertions.assertEquals("gnayqigynduh", model.properties().storageProfile().dataDisks().get(0).id());
        Assertions.assertEquals("kthumaqolbgycdui",
            model.properties().networkProfile().networkInterfaces().get(0).id());
        Assertions.assertEquals("fmmdnbbg", model.properties().osProfile().computerName());
        Assertions.assertTrue(model.properties().osProfile().linuxConfiguration().provisionVMAgent());
        Assertions.assertTrue(model.properties().osProfile().linuxConfiguration().provisionVMConfigAgent());
        Assertions.assertTrue(model.properties().osProfile().windowsConfiguration().provisionVMAgent());
        Assertions.assertFalse(model.properties().osProfile().windowsConfiguration().provisionVMConfigAgent());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }
}
