// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurestackhci.vm.AzureStackHciVmManager;
import com.azure.resourcemanager.azurestackhci.vm.models.ExtendedLocationTypes;
import com.azure.resourcemanager.azurestackhci.vm.models.SecurityRule;
import com.azure.resourcemanager.azurestackhci.vm.models.SecurityRuleAccess;
import com.azure.resourcemanager.azurestackhci.vm.models.SecurityRuleDirection;
import com.azure.resourcemanager.azurestackhci.vm.models.SecurityRuleProtocol;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SecurityRulesListByNetworkSecurityGroupMockTests {
    @Test
    public void testListByNetworkSecurityGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"description\":\"pna\",\"protocol\":\"*\",\"sourceAddressPrefixes\":[\"ccbdre\",\"xhcexdrrvqahq\",\"ghtpw\",\"jnhyjsvf\"],\"destinationAddressPrefixes\":[\"z\"],\"sourcePortRanges\":[\"oowvrv\",\"t\"],\"destinationPortRanges\":[\"ppyostronzmyhgf\"],\"access\":\"Deny\",\"priority\":1358743575,\"direction\":\"Inbound\",\"provisioningState\":\"Canceled\"},\"extendedLocation\":{\"name\":\"waekrrjreafxtsgu\",\"type\":\"CustomLocation\"},\"id\":\"lik\",\"name\":\"xwslolbqpv\",\"type\":\"zlmvfelfktgp\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureStackHciVmManager manager = AzureStackHciVmManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<SecurityRule> response = manager.securityRules()
            .listByNetworkSecurityGroup("tvgbmhrixkwmy", "jejveg", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("pna", response.iterator().next().properties().description());
        Assertions.assertEquals(SecurityRuleProtocol.ASTERISK, response.iterator().next().properties().protocol());
        Assertions.assertEquals("ccbdre", response.iterator().next().properties().sourceAddressPrefixes().get(0));
        Assertions.assertEquals("z", response.iterator().next().properties().destinationAddressPrefixes().get(0));
        Assertions.assertEquals("oowvrv", response.iterator().next().properties().sourcePortRanges().get(0));
        Assertions.assertEquals("ppyostronzmyhgf",
            response.iterator().next().properties().destinationPortRanges().get(0));
        Assertions.assertEquals(SecurityRuleAccess.DENY, response.iterator().next().properties().access());
        Assertions.assertEquals(1358743575, response.iterator().next().properties().priority());
        Assertions.assertEquals(SecurityRuleDirection.INBOUND, response.iterator().next().properties().direction());
        Assertions.assertEquals("waekrrjreafxtsgu", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationTypes.CUSTOM_LOCATION,
            response.iterator().next().extendedLocation().type());
    }
}
