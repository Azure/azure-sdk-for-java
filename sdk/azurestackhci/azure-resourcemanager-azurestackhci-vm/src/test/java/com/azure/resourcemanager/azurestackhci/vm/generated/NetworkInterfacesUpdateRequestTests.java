// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.vm.models.InterfaceDNSSettings;
import com.azure.resourcemanager.azurestackhci.vm.models.NetworkInterfacesUpdateProperties;
import com.azure.resourcemanager.azurestackhci.vm.models.NetworkInterfacesUpdateRequest;
import com.azure.resourcemanager.azurestackhci.vm.models.NetworkSecurityGroupArmReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NetworkInterfacesUpdateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkInterfacesUpdateRequest model = BinaryData.fromString(
            "{\"tags\":{\"byao\":\"xieduugidyjrr\",\"xc\":\"v\",\"hocohslkev\":\"onpc\"},\"properties\":{\"networkSecurityGroup\":{\"id\":\"zfbuhf\"},\"dnsSettings\":{\"dnsServers\":[\"x\",\"ffeii\"]}}}")
            .toObject(NetworkInterfacesUpdateRequest.class);
        Assertions.assertEquals("xieduugidyjrr", model.tags().get("byao"));
        Assertions.assertEquals("zfbuhf", model.properties().networkSecurityGroup().id());
        Assertions.assertEquals("x", model.properties().dnsSettings().dnsServers().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkInterfacesUpdateRequest model = new NetworkInterfacesUpdateRequest()
            .withTags(mapOf("byao", "xieduugidyjrr", "xc", "v", "hocohslkev", "onpc"))
            .withProperties(new NetworkInterfacesUpdateProperties()
                .withNetworkSecurityGroup(new NetworkSecurityGroupArmReference().withId("zfbuhf"))
                .withDnsSettings(new InterfaceDNSSettings().withDnsServers(Arrays.asList("x", "ffeii"))));
        model = BinaryData.fromObject(model).toObject(NetworkInterfacesUpdateRequest.class);
        Assertions.assertEquals("xieduugidyjrr", model.tags().get("byao"));
        Assertions.assertEquals("zfbuhf", model.properties().networkSecurityGroup().id());
        Assertions.assertEquals("x", model.properties().dnsSettings().dnsServers().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
