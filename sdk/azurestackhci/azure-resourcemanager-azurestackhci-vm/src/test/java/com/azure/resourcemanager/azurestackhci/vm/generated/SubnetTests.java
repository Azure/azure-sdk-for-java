// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.vm.models.IPPool;
import com.azure.resourcemanager.azurestackhci.vm.models.IPPoolInfo;
import com.azure.resourcemanager.azurestackhci.vm.models.IPPoolTypeEnum;
import com.azure.resourcemanager.azurestackhci.vm.models.IpAllocationMethodEnum;
import com.azure.resourcemanager.azurestackhci.vm.models.NetworkSecurityGroupArmReference;
import com.azure.resourcemanager.azurestackhci.vm.models.Route;
import com.azure.resourcemanager.azurestackhci.vm.models.RouteTable;
import com.azure.resourcemanager.azurestackhci.vm.models.Subnet;
import com.azure.resourcemanager.azurestackhci.vm.models.SubnetIpConfigurationReference;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SubnetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Subnet model = BinaryData.fromString(
            "{\"properties\":{\"addressPrefix\":\"gbwjzrnf\",\"addressPrefixes\":[\"gispemvtzfkufubl\",\"ofx\",\"eofjaeqjh\",\"jbasvmsmjqulngs\"],\"ipAllocationMethod\":\"Static\",\"ipConfigurationReferences\":[{\"ID\":\"kzgcwrwcl\"},{\"ID\":\"wrljdouskc\"}],\"networkSecurityGroup\":{\"id\":\"ocrcjdk\"},\"routeTable\":{\"etag\":\"hxbnjbiksqrg\",\"name\":\"sainqpjwnzl\",\"type\":\"fmppe\",\"properties\":{\"routes\":[{\"properties\":{},\"name\":\"sabkyqduujitcjcz\"},{\"properties\":{},\"name\":\"vndhkrwpdapp\"}]}},\"ipPools\":[{\"name\":\"kvwrwjfeu\",\"ipPoolType\":\"vm\",\"start\":\"tjelt\",\"end\":\"ldhugjzzdatqxh\",\"info\":{\"used\":\"geablgphuticndvk\",\"available\":\"zwyiftyhxhur\"}},{\"name\":\"ftyxolniw\",\"ipPoolType\":\"vm\",\"start\":\"kjfkg\",\"end\":\"w\",\"info\":{\"used\":\"ryplwckbasyypn\",\"available\":\"hsgcbacphejkot\"}},{\"name\":\"qgoulznd\",\"ipPoolType\":\"vm\",\"start\":\"yqkgfg\",\"end\":\"madgakeqsrxyb\",\"info\":{\"used\":\"e\",\"available\":\"ytb\"}}],\"vlan\":834029576},\"name\":\"ouf\"}")
            .toObject(Subnet.class);
        Assertions.assertEquals("ouf", model.name());
        Assertions.assertEquals("gbwjzrnf", model.addressPrefix());
        Assertions.assertEquals("gispemvtzfkufubl", model.addressPrefixes().get(0));
        Assertions.assertEquals(IpAllocationMethodEnum.STATIC, model.ipAllocationMethod());
        Assertions.assertEquals("kzgcwrwcl", model.ipConfigurationReferences().get(0).id());
        Assertions.assertEquals("ocrcjdk", model.networkSecurityGroup().id());
        Assertions.assertEquals("sabkyqduujitcjcz", model.routeTable().routes().get(0).name());
        Assertions.assertEquals("kvwrwjfeu", model.ipPools().get(0).name());
        Assertions.assertEquals(IPPoolTypeEnum.VM, model.ipPools().get(0).ipPoolType());
        Assertions.assertEquals("tjelt", model.ipPools().get(0).start());
        Assertions.assertEquals("ldhugjzzdatqxh", model.ipPools().get(0).end());
        Assertions.assertEquals(834029576, model.vlan());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Subnet model = new Subnet().withName("ouf")
            .withAddressPrefix("gbwjzrnf")
            .withAddressPrefixes(Arrays.asList("gispemvtzfkufubl", "ofx", "eofjaeqjh", "jbasvmsmjqulngs"))
            .withIpAllocationMethod(IpAllocationMethodEnum.STATIC)
            .withIpConfigurationReferences(Arrays.asList(new SubnetIpConfigurationReference().withId("kzgcwrwcl"),
                new SubnetIpConfigurationReference().withId("wrljdouskc")))
            .withNetworkSecurityGroup(new NetworkSecurityGroupArmReference().withId("ocrcjdk"))
            .withRouteTable(new RouteTable().withRoutes(
                Arrays.asList(new Route().withName("sabkyqduujitcjcz"), new Route().withName("vndhkrwpdapp"))))
            .withIpPools(Arrays.asList(
                new IPPool().withName("kvwrwjfeu")
                    .withIpPoolType(IPPoolTypeEnum.VM)
                    .withStart("tjelt")
                    .withEnd("ldhugjzzdatqxh")
                    .withInfo(new IPPoolInfo()),
                new IPPool().withName("ftyxolniw")
                    .withIpPoolType(IPPoolTypeEnum.VM)
                    .withStart("kjfkg")
                    .withEnd("w")
                    .withInfo(new IPPoolInfo()),
                new IPPool().withName("qgoulznd")
                    .withIpPoolType(IPPoolTypeEnum.VM)
                    .withStart("yqkgfg")
                    .withEnd("madgakeqsrxyb")
                    .withInfo(new IPPoolInfo())))
            .withVlan(834029576);
        model = BinaryData.fromObject(model).toObject(Subnet.class);
        Assertions.assertEquals("ouf", model.name());
        Assertions.assertEquals("gbwjzrnf", model.addressPrefix());
        Assertions.assertEquals("gispemvtzfkufubl", model.addressPrefixes().get(0));
        Assertions.assertEquals(IpAllocationMethodEnum.STATIC, model.ipAllocationMethod());
        Assertions.assertEquals("kzgcwrwcl", model.ipConfigurationReferences().get(0).id());
        Assertions.assertEquals("ocrcjdk", model.networkSecurityGroup().id());
        Assertions.assertEquals("sabkyqduujitcjcz", model.routeTable().routes().get(0).name());
        Assertions.assertEquals("kvwrwjfeu", model.ipPools().get(0).name());
        Assertions.assertEquals(IPPoolTypeEnum.VM, model.ipPools().get(0).ipPoolType());
        Assertions.assertEquals("tjelt", model.ipPools().get(0).start());
        Assertions.assertEquals("ldhugjzzdatqxh", model.ipPools().get(0).end());
        Assertions.assertEquals(834029576, model.vlan());
    }
}
