// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.vm.fluent.models.SubnetProperties;
import com.azure.resourcemanager.azurestackhci.vm.models.IPPool;
import com.azure.resourcemanager.azurestackhci.vm.models.IPPoolInfo;
import com.azure.resourcemanager.azurestackhci.vm.models.IPPoolTypeEnum;
import com.azure.resourcemanager.azurestackhci.vm.models.IpAllocationMethodEnum;
import com.azure.resourcemanager.azurestackhci.vm.models.NetworkSecurityGroupArmReference;
import com.azure.resourcemanager.azurestackhci.vm.models.Route;
import com.azure.resourcemanager.azurestackhci.vm.models.RouteTable;
import com.azure.resourcemanager.azurestackhci.vm.models.SubnetIpConfigurationReference;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SubnetPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubnetProperties model = BinaryData.fromString(
            "{\"addressPrefix\":\"mnkzsmod\",\"addressPrefixes\":[\"ougpbkwt\",\"utduqktapspwgcu\"],\"ipAllocationMethod\":\"Static\",\"ipConfigurationReferences\":[{\"ID\":\"dosvqwhbmdgbbjf\"}],\"networkSecurityGroup\":{\"id\":\"mbmbexppbh\"},\"routeTable\":{\"etag\":\"rolfpfp\",\"name\":\"lgbquxig\",\"type\":\"jgzjaoyfhrtx\",\"properties\":{\"routes\":[{\"properties\":{\"addressPrefix\":\"ujysvle\",\"nextHopIpAddress\":\"vfqawrlyxwjkcpr\"},\"name\":\"wbxgjvt\"},{\"properties\":{\"addressPrefix\":\"ysszdnrujqguh\",\"nextHopIpAddress\":\"ouqfprwz\"},\"name\":\"nguitnwuizgazxu\"}]}},\"ipPools\":[{\"name\":\"ckyfih\",\"ipPoolType\":\"vm\",\"start\":\"fvzwdzuhty\",\"end\":\"isdkfthwxmnteiw\",\"info\":{\"used\":\"vkmijcmmxdcuf\",\"available\":\"srp\"}},{\"name\":\"zidnsezcxtbzsgfy\",\"ipPoolType\":\"vm\",\"start\":\"ewmdw\",\"end\":\"eiachboosflnr\",\"info\":{\"used\":\"qpteeh\",\"available\":\"vypyqrimzinpv\"}}],\"vlan\":694156912}")
            .toObject(SubnetProperties.class);
        Assertions.assertEquals("mnkzsmod", model.addressPrefix());
        Assertions.assertEquals("ougpbkwt", model.addressPrefixes().get(0));
        Assertions.assertEquals(IpAllocationMethodEnum.STATIC, model.ipAllocationMethod());
        Assertions.assertEquals("dosvqwhbmdgbbjf", model.ipConfigurationReferences().get(0).id());
        Assertions.assertEquals("mbmbexppbh", model.networkSecurityGroup().id());
        Assertions.assertEquals("wbxgjvt", model.routeTable().routes().get(0).name());
        Assertions.assertEquals("ujysvle", model.routeTable().routes().get(0).addressPrefix());
        Assertions.assertEquals("vfqawrlyxwjkcpr", model.routeTable().routes().get(0).nextHopIpAddress());
        Assertions.assertEquals("ckyfih", model.ipPools().get(0).name());
        Assertions.assertEquals(IPPoolTypeEnum.VM, model.ipPools().get(0).ipPoolType());
        Assertions.assertEquals("fvzwdzuhty", model.ipPools().get(0).start());
        Assertions.assertEquals("isdkfthwxmnteiw", model.ipPools().get(0).end());
        Assertions.assertEquals(694156912, model.vlan());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubnetProperties model = new SubnetProperties().withAddressPrefix("mnkzsmod")
            .withAddressPrefixes(Arrays.asList("ougpbkwt", "utduqktapspwgcu"))
            .withIpAllocationMethod(IpAllocationMethodEnum.STATIC)
            .withIpConfigurationReferences(
                Arrays.asList(new SubnetIpConfigurationReference().withId("dosvqwhbmdgbbjf")))
            .withNetworkSecurityGroup(new NetworkSecurityGroupArmReference().withId("mbmbexppbh"))
            .withRouteTable(new RouteTable().withRoutes(Arrays.asList(
                new Route().withName("wbxgjvt").withAddressPrefix("ujysvle").withNextHopIpAddress("vfqawrlyxwjkcpr"),
                new Route().withName("nguitnwuizgazxu")
                    .withAddressPrefix("ysszdnrujqguh")
                    .withNextHopIpAddress("ouqfprwz"))))
            .withIpPools(Arrays.asList(
                new IPPool().withName("ckyfih")
                    .withIpPoolType(IPPoolTypeEnum.VM)
                    .withStart("fvzwdzuhty")
                    .withEnd("isdkfthwxmnteiw")
                    .withInfo(new IPPoolInfo()),
                new IPPool().withName("zidnsezcxtbzsgfy")
                    .withIpPoolType(IPPoolTypeEnum.VM)
                    .withStart("ewmdw")
                    .withEnd("eiachboosflnr")
                    .withInfo(new IPPoolInfo())))
            .withVlan(694156912);
        model = BinaryData.fromObject(model).toObject(SubnetProperties.class);
        Assertions.assertEquals("mnkzsmod", model.addressPrefix());
        Assertions.assertEquals("ougpbkwt", model.addressPrefixes().get(0));
        Assertions.assertEquals(IpAllocationMethodEnum.STATIC, model.ipAllocationMethod());
        Assertions.assertEquals("dosvqwhbmdgbbjf", model.ipConfigurationReferences().get(0).id());
        Assertions.assertEquals("mbmbexppbh", model.networkSecurityGroup().id());
        Assertions.assertEquals("wbxgjvt", model.routeTable().routes().get(0).name());
        Assertions.assertEquals("ujysvle", model.routeTable().routes().get(0).addressPrefix());
        Assertions.assertEquals("vfqawrlyxwjkcpr", model.routeTable().routes().get(0).nextHopIpAddress());
        Assertions.assertEquals("ckyfih", model.ipPools().get(0).name());
        Assertions.assertEquals(IPPoolTypeEnum.VM, model.ipPools().get(0).ipPoolType());
        Assertions.assertEquals("fvzwdzuhty", model.ipPools().get(0).start());
        Assertions.assertEquals("isdkfthwxmnteiw", model.ipPools().get(0).end());
        Assertions.assertEquals(694156912, model.vlan());
    }
}
