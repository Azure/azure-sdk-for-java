// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.vm.models.GpuAssignmentTypeEnum;
import com.azure.resourcemanager.azurestackhci.vm.models.HardwareProfileUpdate;
import com.azure.resourcemanager.azurestackhci.vm.models.NetworkInterfaceArmReference;
import com.azure.resourcemanager.azurestackhci.vm.models.NetworkProfileUpdate;
import com.azure.resourcemanager.azurestackhci.vm.models.OsProfileUpdate;
import com.azure.resourcemanager.azurestackhci.vm.models.OsProfileUpdateLinuxConfiguration;
import com.azure.resourcemanager.azurestackhci.vm.models.OsProfileUpdateWindowsConfiguration;
import com.azure.resourcemanager.azurestackhci.vm.models.StorageProfileUpdate;
import com.azure.resourcemanager.azurestackhci.vm.models.VirtualHardDiskArmReference;
import com.azure.resourcemanager.azurestackhci.vm.models.VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU;
import com.azure.resourcemanager.azurestackhci.vm.models.VirtualMachineInstanceUpdateProperties;
import com.azure.resourcemanager.azurestackhci.vm.models.VmSizeEnum;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineInstanceUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineInstanceUpdateProperties model = BinaryData.fromString(
            "{\"hardwareProfile\":{\"vmSize\":\"Standard_DS4_v2\",\"processors\":11756294,\"memoryMB\":1564863042825261686,\"virtualMachineGPUs\":[{\"assignmentType\":\"GpuP\",\"partitionSizeMB\":4154359310176459322,\"gpuName\":\"hh\"},{\"assignmentType\":\"GpuP\",\"partitionSizeMB\":8381465427069984975,\"gpuName\":\"ucerscdntnevfi\"},{\"assignmentType\":\"GpuP\",\"partitionSizeMB\":2197529378012958705,\"gpuName\":\"dsslswt\"},{\"assignmentType\":\"GpuP\",\"partitionSizeMB\":1708954452668375735,\"gpuName\":\"fzp\"}]},\"storageProfile\":{\"dataDisks\":[{\"id\":\"wab\"},{\"id\":\"tshhszhedp\"}]},\"networkProfile\":{\"networkInterfaces\":[{\"id\":\"ubmwmbesld\"},{\"id\":\"wwtppj\"},{\"id\":\"cxogaokonzm\"},{\"id\":\"ikvmkqzeqqk\"}]},\"osProfile\":{\"computerName\":\"fzxmhhvhgureodkw\",\"linuxConfiguration\":{\"provisionVMAgent\":false,\"provisionVMConfigAgent\":true},\"windowsConfiguration\":{\"provisionVMAgent\":false,\"provisionVMConfigAgent\":false}}}")
            .toObject(VirtualMachineInstanceUpdateProperties.class);
        Assertions.assertEquals(VmSizeEnum.STANDARD_DS4_V2, model.hardwareProfile().vmSize());
        Assertions.assertEquals(11756294, model.hardwareProfile().processors());
        Assertions.assertEquals(1564863042825261686L, model.hardwareProfile().memoryMB());
        Assertions.assertEquals(GpuAssignmentTypeEnum.GPUP,
            model.hardwareProfile().virtualMachineGPUs().get(0).assignmentType());
        Assertions.assertEquals(4154359310176459322L,
            model.hardwareProfile().virtualMachineGPUs().get(0).partitionSizeMB());
        Assertions.assertEquals("hh", model.hardwareProfile().virtualMachineGPUs().get(0).gpuName());
        Assertions.assertEquals("wab", model.storageProfile().dataDisks().get(0).id());
        Assertions.assertEquals("ubmwmbesld", model.networkProfile().networkInterfaces().get(0).id());
        Assertions.assertEquals("fzxmhhvhgureodkw", model.osProfile().computerName());
        Assertions.assertFalse(model.osProfile().linuxConfiguration().provisionVMAgent());
        Assertions.assertTrue(model.osProfile().linuxConfiguration().provisionVMConfigAgent());
        Assertions.assertFalse(model.osProfile().windowsConfiguration().provisionVMAgent());
        Assertions.assertFalse(model.osProfile().windowsConfiguration().provisionVMConfigAgent());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineInstanceUpdateProperties model = new VirtualMachineInstanceUpdateProperties()
            .withHardwareProfile(new HardwareProfileUpdate().withVmSize(VmSizeEnum.STANDARD_DS4_V2)
                .withProcessors(11756294)
                .withMemoryMB(1564863042825261686L)
                .withVirtualMachineGPUs(Arrays.asList(
                    new VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU()
                        .withAssignmentType(GpuAssignmentTypeEnum.GPUP)
                        .withPartitionSizeMB(4154359310176459322L)
                        .withGpuName("hh"),
                    new VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU()
                        .withAssignmentType(GpuAssignmentTypeEnum.GPUP)
                        .withPartitionSizeMB(8381465427069984975L)
                        .withGpuName("ucerscdntnevfi"),
                    new VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU()
                        .withAssignmentType(GpuAssignmentTypeEnum.GPUP)
                        .withPartitionSizeMB(2197529378012958705L)
                        .withGpuName("dsslswt"),
                    new VirtualMachineInstancePropertiesHardwareProfileVirtualMachineGPU()
                        .withAssignmentType(GpuAssignmentTypeEnum.GPUP)
                        .withPartitionSizeMB(1708954452668375735L)
                        .withGpuName("fzp"))))
            .withStorageProfile(
                new StorageProfileUpdate().withDataDisks(Arrays.asList(new VirtualHardDiskArmReference().withId("wab"),
                    new VirtualHardDiskArmReference().withId("tshhszhedp"))))
            .withNetworkProfile(new NetworkProfileUpdate()
                .withNetworkInterfaces(Arrays.asList(new NetworkInterfaceArmReference().withId("ubmwmbesld"),
                    new NetworkInterfaceArmReference().withId("wwtppj"),
                    new NetworkInterfaceArmReference().withId("cxogaokonzm"),
                    new NetworkInterfaceArmReference().withId("ikvmkqzeqqk"))))
            .withOsProfile(new OsProfileUpdate().withComputerName("fzxmhhvhgureodkw")
                .withLinuxConfiguration(new OsProfileUpdateLinuxConfiguration().withProvisionVMAgent(false)
                    .withProvisionVMConfigAgent(true))
                .withWindowsConfiguration(new OsProfileUpdateWindowsConfiguration().withProvisionVMAgent(false)
                    .withProvisionVMConfigAgent(false)));
        model = BinaryData.fromObject(model).toObject(VirtualMachineInstanceUpdateProperties.class);
        Assertions.assertEquals(VmSizeEnum.STANDARD_DS4_V2, model.hardwareProfile().vmSize());
        Assertions.assertEquals(11756294, model.hardwareProfile().processors());
        Assertions.assertEquals(1564863042825261686L, model.hardwareProfile().memoryMB());
        Assertions.assertEquals(GpuAssignmentTypeEnum.GPUP,
            model.hardwareProfile().virtualMachineGPUs().get(0).assignmentType());
        Assertions.assertEquals(4154359310176459322L,
            model.hardwareProfile().virtualMachineGPUs().get(0).partitionSizeMB());
        Assertions.assertEquals("hh", model.hardwareProfile().virtualMachineGPUs().get(0).gpuName());
        Assertions.assertEquals("wab", model.storageProfile().dataDisks().get(0).id());
        Assertions.assertEquals("ubmwmbesld", model.networkProfile().networkInterfaces().get(0).id());
        Assertions.assertEquals("fzxmhhvhgureodkw", model.osProfile().computerName());
        Assertions.assertFalse(model.osProfile().linuxConfiguration().provisionVMAgent());
        Assertions.assertTrue(model.osProfile().linuxConfiguration().provisionVMConfigAgent());
        Assertions.assertFalse(model.osProfile().windowsConfiguration().provisionVMAgent());
        Assertions.assertFalse(model.osProfile().windowsConfiguration().provisionVMConfigAgent());
    }
}
