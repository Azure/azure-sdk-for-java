// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.azurestackhci.vm.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurestackhci.vm.AzureStackHciVmManager;
import com.azure.resourcemanager.azurestackhci.vm.models.ExtendedLocation;
import com.azure.resourcemanager.azurestackhci.vm.models.ExtendedLocationTypes;
import com.azure.resourcemanager.azurestackhci.vm.models.SecurityRule;
import com.azure.resourcemanager.azurestackhci.vm.models.SecurityRuleAccess;
import com.azure.resourcemanager.azurestackhci.vm.models.SecurityRuleDirection;
import com.azure.resourcemanager.azurestackhci.vm.models.SecurityRuleProperties;
import com.azure.resourcemanager.azurestackhci.vm.models.SecurityRuleProtocol;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SecurityRulesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":\"rywvtylbfpn\",\"protocol\":\"Udp\",\"sourceAddressPrefixes\":[\"oiwiithtywub\",\"cbihwqk\"],\"destinationAddressPrefixes\":[\"ntwjch\",\"dgoihxumwctondzj\",\"uu\"],\"sourcePortRanges\":[\"lwg\",\"ytsbwtovv\",\"gseinq\",\"iufxqknpir\"],\"destinationPortRanges\":[\"pttwqmsn\",\"ffcdmqnrojl\",\"ijnkrxfrdd\"],\"access\":\"Allow\",\"priority\":1110792389,\"direction\":\"Inbound\",\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"name\":\"ronasxift\",\"type\":\"CustomLocation\"},\"id\":\"zh\",\"name\":\"tw\",\"type\":\"sgogczhonnxk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureStackHciVmManager manager = AzureStackHciVmManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SecurityRule response = manager.securityRules()
            .define("brnjwmw")
            .withExistingNetworkSecurityGroup("crpw", "xeznoi")
            .withProperties(new SecurityRuleProperties().withDescription("bsazejjoqka")
                .withProtocol(SecurityRuleProtocol.ICMP)
                .withSourceAddressPrefixes(Arrays.asList("xttaugzxnfaaz", "xdtnkdmkqjjlw"))
                .withDestinationAddressPrefixes(Arrays.asList("vrkpyouaibreb"))
                .withSourcePortRanges(Arrays.asList("ysjkixqtnqttez", "wfff", "akpjpqqmtedlt", "mjihyeozphv"))
                .withDestinationPortRanges(Arrays.asList("y", "ncyg", "p", "vipmdscwxqupevzh"))
                .withAccess(SecurityRuleAccess.ALLOW)
                .withPriority(434974760)
                .withDirection(SecurityRuleDirection.OUTBOUND))
            .withExtendedLocation(
                new ExtendedLocation().withName("jujbypelmcuvhixb").withType(ExtendedLocationTypes.CUSTOM_LOCATION))
            .create();

        Assertions.assertEquals("rywvtylbfpn", response.properties().description());
        Assertions.assertEquals(SecurityRuleProtocol.UDP, response.properties().protocol());
        Assertions.assertEquals("oiwiithtywub", response.properties().sourceAddressPrefixes().get(0));
        Assertions.assertEquals("ntwjch", response.properties().destinationAddressPrefixes().get(0));
        Assertions.assertEquals("lwg", response.properties().sourcePortRanges().get(0));
        Assertions.assertEquals("pttwqmsn", response.properties().destinationPortRanges().get(0));
        Assertions.assertEquals(SecurityRuleAccess.ALLOW, response.properties().access());
        Assertions.assertEquals(1110792389, response.properties().priority());
        Assertions.assertEquals(SecurityRuleDirection.INBOUND, response.properties().direction());
        Assertions.assertEquals("ronasxift", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationTypes.CUSTOM_LOCATION, response.extendedLocation().type());
    }
}
