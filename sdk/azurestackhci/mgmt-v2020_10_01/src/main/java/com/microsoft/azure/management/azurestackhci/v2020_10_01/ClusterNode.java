/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.azurestackhci.v2020_10_01;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Cluster node details.
 */
public class ClusterNode {
    /**
     * Name of the cluster node.
     */
    @JsonProperty(value = "name", access = JsonProperty.Access.WRITE_ONLY)
    private String name;

    /**
     * Id of the node in the cluster.
     */
    @JsonProperty(value = "id", access = JsonProperty.Access.WRITE_ONLY)
    private Double id;

    /**
     * Manufacturer of the cluster node hardware.
     */
    @JsonProperty(value = "manufacturer", access = JsonProperty.Access.WRITE_ONLY)
    private String manufacturer;

    /**
     * Model name of the cluster node hardware.
     */
    @JsonProperty(value = "model", access = JsonProperty.Access.WRITE_ONLY)
    private String model;

    /**
     * Operating system running on the cluster node.
     */
    @JsonProperty(value = "osName", access = JsonProperty.Access.WRITE_ONLY)
    private String osName;

    /**
     * Version of the operating system running on the cluster node.
     */
    @JsonProperty(value = "osVersion", access = JsonProperty.Access.WRITE_ONLY)
    private String osVersion;

    /**
     * Immutable id of the cluster node.
     */
    @JsonProperty(value = "serialNumber", access = JsonProperty.Access.WRITE_ONLY)
    private String serialNumber;

    /**
     * Number of physical cores on the cluster node.
     */
    @JsonProperty(value = "coreCount", access = JsonProperty.Access.WRITE_ONLY)
    private Double coreCount;

    /**
     * Total available memory on the cluster node (in GiB).
     */
    @JsonProperty(value = "memoryInGiB", access = JsonProperty.Access.WRITE_ONLY)
    private Double memoryInGiB;

    /**
     * Get name of the cluster node.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Get id of the node in the cluster.
     *
     * @return the id value
     */
    public Double id() {
        return this.id;
    }

    /**
     * Get manufacturer of the cluster node hardware.
     *
     * @return the manufacturer value
     */
    public String manufacturer() {
        return this.manufacturer;
    }

    /**
     * Get model name of the cluster node hardware.
     *
     * @return the model value
     */
    public String model() {
        return this.model;
    }

    /**
     * Get operating system running on the cluster node.
     *
     * @return the osName value
     */
    public String osName() {
        return this.osName;
    }

    /**
     * Get version of the operating system running on the cluster node.
     *
     * @return the osVersion value
     */
    public String osVersion() {
        return this.osVersion;
    }

    /**
     * Get immutable id of the cluster node.
     *
     * @return the serialNumber value
     */
    public String serialNumber() {
        return this.serialNumber;
    }

    /**
     * Get number of physical cores on the cluster node.
     *
     * @return the coreCount value
     */
    public Double coreCount() {
        return this.coreCount;
    }

    /**
     * Get total available memory on the cluster node (in GiB).
     *
     * @return the memoryInGiB value
     */
    public Double memoryInGiB() {
        return this.memoryInGiB;
    }

}
