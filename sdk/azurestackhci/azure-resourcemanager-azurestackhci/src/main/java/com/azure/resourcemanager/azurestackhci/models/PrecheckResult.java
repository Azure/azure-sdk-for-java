// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The PrecheckResult model.
 */
@Fluent
public final class PrecheckResult implements JsonSerializable<PrecheckResult> {
    /*
     * Name of the individual test/rule/alert that was executed. Unique, not exposed to the customer.
     */
    private String name;

    /*
     * The health check DisplayName localized of the individual test executed.
     */
    private String displayName;

    /*
     * Key-value pairs that allow grouping/filtering individual tests.
     */
    private PrecheckResultTags tags;

    /*
     * Key-value pairs that allow grouping/filtering individual tests.
     */
    private Object healthCheckTags;

    /*
     * User-facing name; one or more sentences indicating the direct issue.
     */
    private String title;

    /*
     * The status of the check running (i.e. Failed, Succeeded, In Progress). This answers whether the check ran, and
     * passed or failed.
     */
    private Status status;

    /*
     * Severity of the result (Critical, Warning, Informational, Hidden). This answers how important the result is.
     * Critical is the only update-blocking severity.
     */
    private Severity severity;

    /*
     * Detailed overview of the issue and what impact the issue has on the stamp.
     */
    private String description;

    /*
     * Set of steps that can be taken to resolve the issue found.
     */
    private String remediation;

    /*
     * The unique identifier for the affected resource (such as a node or drive).
     */
    private String targetResourceId;

    /*
     * The name of the affected resource.
     */
    private String targetResourceName;

    /*
     * The type of resource being referred to (well-known set of nouns in infrastructure, aligning with Monitoring).
     */
    private String targetResourceType;

    /*
     * The time in which the HealthCheck was called.
     */
    private OffsetDateTime timestamp;

    /*
     * Property bag of key value pairs for additional information.
     */
    private String additionalData;

    /*
     * The name of the services called for the HealthCheck (I.E. Test-AzureStack, Test-Cluster).
     */
    private String healthCheckSource;

    /**
     * Creates an instance of PrecheckResult class.
     */
    public PrecheckResult() {
    }

    /**
     * Get the name property: Name of the individual test/rule/alert that was executed. Unique, not exposed to the
     * customer.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the individual test/rule/alert that was executed. Unique, not exposed to the
     * customer.
     * 
     * @param name the name value to set.
     * @return the PrecheckResult object itself.
     */
    public PrecheckResult withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the displayName property: The health check DisplayName localized of the individual test executed.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The health check DisplayName localized of the individual test executed.
     * 
     * @param displayName the displayName value to set.
     * @return the PrecheckResult object itself.
     */
    public PrecheckResult withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the tags property: Key-value pairs that allow grouping/filtering individual tests.
     * 
     * @return the tags value.
     */
    public PrecheckResultTags tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Key-value pairs that allow grouping/filtering individual tests.
     * 
     * @param tags the tags value to set.
     * @return the PrecheckResult object itself.
     */
    public PrecheckResult withTags(PrecheckResultTags tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the healthCheckTags property: Key-value pairs that allow grouping/filtering individual tests.
     * 
     * @return the healthCheckTags value.
     */
    public Object healthCheckTags() {
        return this.healthCheckTags;
    }

    /**
     * Set the healthCheckTags property: Key-value pairs that allow grouping/filtering individual tests.
     * 
     * @param healthCheckTags the healthCheckTags value to set.
     * @return the PrecheckResult object itself.
     */
    public PrecheckResult withHealthCheckTags(Object healthCheckTags) {
        this.healthCheckTags = healthCheckTags;
        return this;
    }

    /**
     * Get the title property: User-facing name; one or more sentences indicating the direct issue.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: User-facing name; one or more sentences indicating the direct issue.
     * 
     * @param title the title value to set.
     * @return the PrecheckResult object itself.
     */
    public PrecheckResult withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the status property: The status of the check running (i.e. Failed, Succeeded, In Progress). This answers
     * whether the check ran, and passed or failed.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Set the status property: The status of the check running (i.e. Failed, Succeeded, In Progress). This answers
     * whether the check ran, and passed or failed.
     * 
     * @param status the status value to set.
     * @return the PrecheckResult object itself.
     */
    public PrecheckResult withStatus(Status status) {
        this.status = status;
        return this;
    }

    /**
     * Get the severity property: Severity of the result (Critical, Warning, Informational, Hidden). This answers how
     * important the result is. Critical is the only update-blocking severity.
     * 
     * @return the severity value.
     */
    public Severity severity() {
        return this.severity;
    }

    /**
     * Set the severity property: Severity of the result (Critical, Warning, Informational, Hidden). This answers how
     * important the result is. Critical is the only update-blocking severity.
     * 
     * @param severity the severity value to set.
     * @return the PrecheckResult object itself.
     */
    public PrecheckResult withSeverity(Severity severity) {
        this.severity = severity;
        return this;
    }

    /**
     * Get the description property: Detailed overview of the issue and what impact the issue has on the stamp.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Detailed overview of the issue and what impact the issue has on the stamp.
     * 
     * @param description the description value to set.
     * @return the PrecheckResult object itself.
     */
    public PrecheckResult withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the remediation property: Set of steps that can be taken to resolve the issue found.
     * 
     * @return the remediation value.
     */
    public String remediation() {
        return this.remediation;
    }

    /**
     * Set the remediation property: Set of steps that can be taken to resolve the issue found.
     * 
     * @param remediation the remediation value to set.
     * @return the PrecheckResult object itself.
     */
    public PrecheckResult withRemediation(String remediation) {
        this.remediation = remediation;
        return this;
    }

    /**
     * Get the targetResourceId property: The unique identifier for the affected resource (such as a node or drive).
     * 
     * @return the targetResourceId value.
     */
    public String targetResourceId() {
        return this.targetResourceId;
    }

    /**
     * Set the targetResourceId property: The unique identifier for the affected resource (such as a node or drive).
     * 
     * @param targetResourceId the targetResourceId value to set.
     * @return the PrecheckResult object itself.
     */
    public PrecheckResult withTargetResourceId(String targetResourceId) {
        this.targetResourceId = targetResourceId;
        return this;
    }

    /**
     * Get the targetResourceName property: The name of the affected resource.
     * 
     * @return the targetResourceName value.
     */
    public String targetResourceName() {
        return this.targetResourceName;
    }

    /**
     * Set the targetResourceName property: The name of the affected resource.
     * 
     * @param targetResourceName the targetResourceName value to set.
     * @return the PrecheckResult object itself.
     */
    public PrecheckResult withTargetResourceName(String targetResourceName) {
        this.targetResourceName = targetResourceName;
        return this;
    }

    /**
     * Get the targetResourceType property: The type of resource being referred to (well-known set of nouns in
     * infrastructure, aligning with Monitoring).
     * 
     * @return the targetResourceType value.
     */
    public String targetResourceType() {
        return this.targetResourceType;
    }

    /**
     * Set the targetResourceType property: The type of resource being referred to (well-known set of nouns in
     * infrastructure, aligning with Monitoring).
     * 
     * @param targetResourceType the targetResourceType value to set.
     * @return the PrecheckResult object itself.
     */
    public PrecheckResult withTargetResourceType(String targetResourceType) {
        this.targetResourceType = targetResourceType;
        return this;
    }

    /**
     * Get the timestamp property: The time in which the HealthCheck was called.
     * 
     * @return the timestamp value.
     */
    public OffsetDateTime timestamp() {
        return this.timestamp;
    }

    /**
     * Set the timestamp property: The time in which the HealthCheck was called.
     * 
     * @param timestamp the timestamp value to set.
     * @return the PrecheckResult object itself.
     */
    public PrecheckResult withTimestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get the additionalData property: Property bag of key value pairs for additional information.
     * 
     * @return the additionalData value.
     */
    public String additionalData() {
        return this.additionalData;
    }

    /**
     * Set the additionalData property: Property bag of key value pairs for additional information.
     * 
     * @param additionalData the additionalData value to set.
     * @return the PrecheckResult object itself.
     */
    public PrecheckResult withAdditionalData(String additionalData) {
        this.additionalData = additionalData;
        return this;
    }

    /**
     * Get the healthCheckSource property: The name of the services called for the HealthCheck (I.E. Test-AzureStack,
     * Test-Cluster).
     * 
     * @return the healthCheckSource value.
     */
    public String healthCheckSource() {
        return this.healthCheckSource;
    }

    /**
     * Set the healthCheckSource property: The name of the services called for the HealthCheck (I.E. Test-AzureStack,
     * Test-Cluster).
     * 
     * @param healthCheckSource the healthCheckSource value to set.
     * @return the PrecheckResult object itself.
     */
    public PrecheckResult withHealthCheckSource(String healthCheckSource) {
        this.healthCheckSource = healthCheckSource;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tags() != null) {
            tags().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeJsonField("tags", this.tags);
        jsonWriter.writeUntypedField("healthCheckTags", this.healthCheckTags);
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("severity", this.severity == null ? null : this.severity.toString());
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("remediation", this.remediation);
        jsonWriter.writeStringField("targetResourceID", this.targetResourceId);
        jsonWriter.writeStringField("targetResourceName", this.targetResourceName);
        jsonWriter.writeStringField("targetResourceType", this.targetResourceType);
        jsonWriter.writeStringField("timestamp",
            this.timestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timestamp));
        jsonWriter.writeStringField("additionalData", this.additionalData);
        jsonWriter.writeStringField("healthCheckSource", this.healthCheckSource);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PrecheckResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PrecheckResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PrecheckResult.
     */
    public static PrecheckResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PrecheckResult deserializedPrecheckResult = new PrecheckResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedPrecheckResult.name = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedPrecheckResult.displayName = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    deserializedPrecheckResult.tags = PrecheckResultTags.fromJson(reader);
                } else if ("healthCheckTags".equals(fieldName)) {
                    deserializedPrecheckResult.healthCheckTags = reader.readUntyped();
                } else if ("title".equals(fieldName)) {
                    deserializedPrecheckResult.title = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedPrecheckResult.status = Status.fromString(reader.getString());
                } else if ("severity".equals(fieldName)) {
                    deserializedPrecheckResult.severity = Severity.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedPrecheckResult.description = reader.getString();
                } else if ("remediation".equals(fieldName)) {
                    deserializedPrecheckResult.remediation = reader.getString();
                } else if ("targetResourceID".equals(fieldName)) {
                    deserializedPrecheckResult.targetResourceId = reader.getString();
                } else if ("targetResourceName".equals(fieldName)) {
                    deserializedPrecheckResult.targetResourceName = reader.getString();
                } else if ("targetResourceType".equals(fieldName)) {
                    deserializedPrecheckResult.targetResourceType = reader.getString();
                } else if ("timestamp".equals(fieldName)) {
                    deserializedPrecheckResult.timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("additionalData".equals(fieldName)) {
                    deserializedPrecheckResult.additionalData = reader.getString();
                } else if ("healthCheckSource".equals(fieldName)) {
                    deserializedPrecheckResult.healthCheckSource = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPrecheckResult;
        });
    }
}
