// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Security compliance properties of the resource.
 */
@Immutable
public final class SecurityComplianceStatus implements JsonSerializable<SecurityComplianceStatus> {
    /*
     * Indicates whether HCI hosts meets secured-core server requirements.
     */
    private ComplianceStatus securedCoreCompliance;

    /*
     * Indicates whether HCI hosts have enforced consistent Windows Defender Application Control.
     */
    private ComplianceStatus wdacCompliance;

    /*
     * Indicates whether data at-rest encryption is enabled on Azure Stack HCI clustered volumes.
     */
    private ComplianceStatus dataAtRestEncrypted;

    /*
     * Indicates whether HCI cluster has data in-transit protection.
     */
    private ComplianceStatus dataInTransitProtected;

    /*
     * Time in UTC when compliance status was last updated.
     */
    private OffsetDateTime lastUpdated;

    /**
     * Creates an instance of SecurityComplianceStatus class.
     */
    public SecurityComplianceStatus() {
    }

    /**
     * Get the securedCoreCompliance property: Indicates whether HCI hosts meets secured-core server requirements.
     * 
     * @return the securedCoreCompliance value.
     */
    public ComplianceStatus securedCoreCompliance() {
        return this.securedCoreCompliance;
    }

    /**
     * Get the wdacCompliance property: Indicates whether HCI hosts have enforced consistent Windows Defender
     * Application Control.
     * 
     * @return the wdacCompliance value.
     */
    public ComplianceStatus wdacCompliance() {
        return this.wdacCompliance;
    }

    /**
     * Get the dataAtRestEncrypted property: Indicates whether data at-rest encryption is enabled on Azure Stack HCI
     * clustered volumes.
     * 
     * @return the dataAtRestEncrypted value.
     */
    public ComplianceStatus dataAtRestEncrypted() {
        return this.dataAtRestEncrypted;
    }

    /**
     * Get the dataInTransitProtected property: Indicates whether HCI cluster has data in-transit protection.
     * 
     * @return the dataInTransitProtected value.
     */
    public ComplianceStatus dataInTransitProtected() {
        return this.dataInTransitProtected;
    }

    /**
     * Get the lastUpdated property: Time in UTC when compliance status was last updated.
     * 
     * @return the lastUpdated value.
     */
    public OffsetDateTime lastUpdated() {
        return this.lastUpdated;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecurityComplianceStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecurityComplianceStatus if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SecurityComplianceStatus.
     */
    public static SecurityComplianceStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecurityComplianceStatus deserializedSecurityComplianceStatus = new SecurityComplianceStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("securedCoreCompliance".equals(fieldName)) {
                    deserializedSecurityComplianceStatus.securedCoreCompliance
                        = ComplianceStatus.fromString(reader.getString());
                } else if ("wdacCompliance".equals(fieldName)) {
                    deserializedSecurityComplianceStatus.wdacCompliance
                        = ComplianceStatus.fromString(reader.getString());
                } else if ("dataAtRestEncrypted".equals(fieldName)) {
                    deserializedSecurityComplianceStatus.dataAtRestEncrypted
                        = ComplianceStatus.fromString(reader.getString());
                } else if ("dataInTransitProtected".equals(fieldName)) {
                    deserializedSecurityComplianceStatus.dataInTransitProtected
                        = ComplianceStatus.fromString(reader.getString());
                } else if ("lastUpdated".equals(fieldName)) {
                    deserializedSecurityComplianceStatus.lastUpdated = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecurityComplianceStatus;
        });
    }
}
