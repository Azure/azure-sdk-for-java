// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.azurestackhci.models.ExtendedLocation;
import com.azure.resourcemanager.azurestackhci.models.GuestAgentProfile;
import com.azure.resourcemanager.azurestackhci.models.Identity;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningStateEnum;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachinePropertiesHardwareProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachinePropertiesNetworkProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachinePropertiesOsProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachinePropertiesSecurityProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachinePropertiesStorageProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachineStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** The virtual machine resource definition. */
@Fluent
public final class VirtualMachinesInner extends Resource {
    /*
     * Properties under the virtual machine resource
     */
    @JsonProperty(value = "properties")
    private VirtualMachineProperties innerProperties;

    /*
     * The extendedLocation of the resource.
     */
    @JsonProperty(value = "extendedLocation")
    private ExtendedLocation extendedLocation;

    /*
     * Identity for the resource.
     */
    @JsonProperty(value = "identity")
    private Identity identity;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of VirtualMachinesInner class. */
    public VirtualMachinesInner() {
    }

    /**
     * Get the innerProperties property: Properties under the virtual machine resource.
     *
     * @return the innerProperties value.
     */
    private VirtualMachineProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the extendedLocation property: The extendedLocation of the resource.
     *
     * @return the extendedLocation value.
     */
    public ExtendedLocation extendedLocation() {
        return this.extendedLocation;
    }

    /**
     * Set the extendedLocation property: The extendedLocation of the resource.
     *
     * @param extendedLocation the extendedLocation value to set.
     * @return the VirtualMachinesInner object itself.
     */
    public VirtualMachinesInner withExtendedLocation(ExtendedLocation extendedLocation) {
        this.extendedLocation = extendedLocation;
        return this;
    }

    /**
     * Get the identity property: Identity for the resource.
     *
     * @return the identity value.
     */
    public Identity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Identity for the resource.
     *
     * @param identity the identity value to set.
     * @return the VirtualMachinesInner object itself.
     */
    public VirtualMachinesInner withIdentity(Identity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public VirtualMachinesInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public VirtualMachinesInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the hardwareProfile property: HardwareProfile - Specifies the hardware settings for the virtual machine.
     *
     * @return the hardwareProfile value.
     */
    public VirtualMachinePropertiesHardwareProfile hardwareProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().hardwareProfile();
    }

    /**
     * Set the hardwareProfile property: HardwareProfile - Specifies the hardware settings for the virtual machine.
     *
     * @param hardwareProfile the hardwareProfile value to set.
     * @return the VirtualMachinesInner object itself.
     */
    public VirtualMachinesInner withHardwareProfile(VirtualMachinePropertiesHardwareProfile hardwareProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineProperties();
        }
        this.innerProperties().withHardwareProfile(hardwareProfile);
        return this;
    }

    /**
     * Get the networkProfile property: NetworkProfile - describes the network configuration the virtual machine.
     *
     * @return the networkProfile value.
     */
    public VirtualMachinePropertiesNetworkProfile networkProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().networkProfile();
    }

    /**
     * Set the networkProfile property: NetworkProfile - describes the network configuration the virtual machine.
     *
     * @param networkProfile the networkProfile value to set.
     * @return the VirtualMachinesInner object itself.
     */
    public VirtualMachinesInner withNetworkProfile(VirtualMachinePropertiesNetworkProfile networkProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineProperties();
        }
        this.innerProperties().withNetworkProfile(networkProfile);
        return this;
    }

    /**
     * Get the osProfile property: OsProfile - describes the configuration of the operating system and sets login data.
     *
     * @return the osProfile value.
     */
    public VirtualMachinePropertiesOsProfile osProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().osProfile();
    }

    /**
     * Set the osProfile property: OsProfile - describes the configuration of the operating system and sets login data.
     *
     * @param osProfile the osProfile value to set.
     * @return the VirtualMachinesInner object itself.
     */
    public VirtualMachinesInner withOsProfile(VirtualMachinePropertiesOsProfile osProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineProperties();
        }
        this.innerProperties().withOsProfile(osProfile);
        return this;
    }

    /**
     * Get the securityProfile property: SecurityProfile - Specifies the security settings for the virtual machine.
     *
     * @return the securityProfile value.
     */
    public VirtualMachinePropertiesSecurityProfile securityProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().securityProfile();
    }

    /**
     * Set the securityProfile property: SecurityProfile - Specifies the security settings for the virtual machine.
     *
     * @param securityProfile the securityProfile value to set.
     * @return the VirtualMachinesInner object itself.
     */
    public VirtualMachinesInner withSecurityProfile(VirtualMachinePropertiesSecurityProfile securityProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineProperties();
        }
        this.innerProperties().withSecurityProfile(securityProfile);
        return this;
    }

    /**
     * Get the storageProfile property: StorageProfile - contains information about the disks and storage information
     * for the virtual machine.
     *
     * @return the storageProfile value.
     */
    public VirtualMachinePropertiesStorageProfile storageProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().storageProfile();
    }

    /**
     * Set the storageProfile property: StorageProfile - contains information about the disks and storage information
     * for the virtual machine.
     *
     * @param storageProfile the storageProfile value to set.
     * @return the VirtualMachinesInner object itself.
     */
    public VirtualMachinesInner withStorageProfile(VirtualMachinePropertiesStorageProfile storageProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineProperties();
        }
        this.innerProperties().withStorageProfile(storageProfile);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the virtual machine.
     *
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the status property: The observed state of virtual machines.
     *
     * @return the status value.
     */
    public VirtualMachineStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the guestAgentProfile property: Guest agent status properties.
     *
     * @return the guestAgentProfile value.
     */
    public GuestAgentProfile guestAgentProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().guestAgentProfile();
    }

    /**
     * Set the guestAgentProfile property: Guest agent status properties.
     *
     * @param guestAgentProfile the guestAgentProfile value to set.
     * @return the VirtualMachinesInner object itself.
     */
    public VirtualMachinesInner withGuestAgentProfile(GuestAgentProfile guestAgentProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineProperties();
        }
        this.innerProperties().withGuestAgentProfile(guestAgentProfile);
        return this;
    }

    /**
     * Get the vmId property: Unique identifier for the vm resource.
     *
     * @return the vmId value.
     */
    public String vmId() {
        return this.innerProperties() == null ? null : this.innerProperties().vmId();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (extendedLocation() != null) {
            extendedLocation().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
    }
}
