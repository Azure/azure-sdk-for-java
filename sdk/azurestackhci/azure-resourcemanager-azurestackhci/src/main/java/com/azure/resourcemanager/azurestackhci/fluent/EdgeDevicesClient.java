// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.azurestackhci.fluent.models.EdgeDeviceInner;
import com.azure.resourcemanager.azurestackhci.fluent.models.ValidateResponseInner;
import com.azure.resourcemanager.azurestackhci.models.ValidateRequest;

/**
 * An instance of this class provides access to all the operations defined in EdgeDevicesClient.
 */
public interface EdgeDevicesClient {
    /**
     * List EdgeDevice resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EdgeDevice list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<EdgeDeviceInner> list(String resourceUri);

    /**
     * List EdgeDevice resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EdgeDevice list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<EdgeDeviceInner> list(String resourceUri, Context context);

    /**
     * Get a EdgeDevice.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param edgeDeviceName Name of Device.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a EdgeDevice along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<EdgeDeviceInner> getWithResponse(String resourceUri, String edgeDeviceName, Context context);

    /**
     * Get a EdgeDevice.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param edgeDeviceName Name of Device.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a EdgeDevice.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EdgeDeviceInner get(String resourceUri, String edgeDeviceName);

    /**
     * Create a EdgeDevice.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param edgeDeviceName Name of Device.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of edge device resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<EdgeDeviceInner>, EdgeDeviceInner> beginCreateOrUpdate(String resourceUri,
        String edgeDeviceName, EdgeDeviceInner resource);

    /**
     * Create a EdgeDevice.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param edgeDeviceName Name of Device.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of edge device resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<EdgeDeviceInner>, EdgeDeviceInner> beginCreateOrUpdate(String resourceUri,
        String edgeDeviceName, EdgeDeviceInner resource, Context context);

    /**
     * Create a EdgeDevice.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param edgeDeviceName Name of Device.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edge device resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EdgeDeviceInner createOrUpdate(String resourceUri, String edgeDeviceName, EdgeDeviceInner resource);

    /**
     * Create a EdgeDevice.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param edgeDeviceName Name of Device.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return edge device resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EdgeDeviceInner createOrUpdate(String resourceUri, String edgeDeviceName, EdgeDeviceInner resource,
        Context context);

    /**
     * Delete a EdgeDevice.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param edgeDeviceName Name of Device.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceUri, String edgeDeviceName);

    /**
     * Delete a EdgeDevice.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param edgeDeviceName Name of Device.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceUri, String edgeDeviceName, Context context);

    /**
     * Delete a EdgeDevice.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param edgeDeviceName Name of Device.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceUri, String edgeDeviceName);

    /**
     * Delete a EdgeDevice.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param edgeDeviceName Name of Device.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceUri, String edgeDeviceName, Context context);

    /**
     * A long-running resource action.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param edgeDeviceName Name of Device.
     * @param validateRequest The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an Accepted response with an Operation-Location header.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ValidateResponseInner>, ValidateResponseInner> beginValidate(String resourceUri,
        String edgeDeviceName, ValidateRequest validateRequest);

    /**
     * A long-running resource action.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param edgeDeviceName Name of Device.
     * @param validateRequest The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an Accepted response with an Operation-Location header.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ValidateResponseInner>, ValidateResponseInner> beginValidate(String resourceUri,
        String edgeDeviceName, ValidateRequest validateRequest, Context context);

    /**
     * A long-running resource action.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param edgeDeviceName Name of Device.
     * @param validateRequest The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Accepted response with an Operation-Location header.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ValidateResponseInner validate(String resourceUri, String edgeDeviceName, ValidateRequest validateRequest);

    /**
     * A long-running resource action.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param edgeDeviceName Name of Device.
     * @param validateRequest The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Accepted response with an Operation-Location header.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ValidateResponseInner validate(String resourceUri, String edgeDeviceName, ValidateRequest validateRequest,
        Context context);
}
