// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.azurestackhci.models.InterfaceDnsSettings;
import com.azure.resourcemanager.azurestackhci.models.IpConfiguration;
import com.azure.resourcemanager.azurestackhci.models.NetworkInterfaceStatus;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningStateEnum;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Properties under the network interface resource. */
@Fluent
public final class NetworkInterfaceProperties {
    /*
     * IPConfigurations - A list of IPConfigurations of the network interface.
     */
    @JsonProperty(value = "ipConfigurations")
    private List<IpConfiguration> ipConfigurations;

    /*
     * MacAddress - The MAC address of the network interface.
     */
    @JsonProperty(value = "macAddress")
    private String macAddress;

    /*
     * DNS Settings for the interface
     */
    @JsonProperty(value = "dnsSettings")
    private InterfaceDnsSettings dnsSettings;

    /*
     * Provisioning state of the network interface.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningStateEnum provisioningState;

    /*
     * The observed state of network interfaces
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private NetworkInterfaceStatus status;

    /** Creates an instance of NetworkInterfaceProperties class. */
    public NetworkInterfaceProperties() {
    }

    /**
     * Get the ipConfigurations property: IPConfigurations - A list of IPConfigurations of the network interface.
     *
     * @return the ipConfigurations value.
     */
    public List<IpConfiguration> ipConfigurations() {
        return this.ipConfigurations;
    }

    /**
     * Set the ipConfigurations property: IPConfigurations - A list of IPConfigurations of the network interface.
     *
     * @param ipConfigurations the ipConfigurations value to set.
     * @return the NetworkInterfaceProperties object itself.
     */
    public NetworkInterfaceProperties withIpConfigurations(List<IpConfiguration> ipConfigurations) {
        this.ipConfigurations = ipConfigurations;
        return this;
    }

    /**
     * Get the macAddress property: MacAddress - The MAC address of the network interface.
     *
     * @return the macAddress value.
     */
    public String macAddress() {
        return this.macAddress;
    }

    /**
     * Set the macAddress property: MacAddress - The MAC address of the network interface.
     *
     * @param macAddress the macAddress value to set.
     * @return the NetworkInterfaceProperties object itself.
     */
    public NetworkInterfaceProperties withMacAddress(String macAddress) {
        this.macAddress = macAddress;
        return this;
    }

    /**
     * Get the dnsSettings property: DNS Settings for the interface.
     *
     * @return the dnsSettings value.
     */
    public InterfaceDnsSettings dnsSettings() {
        return this.dnsSettings;
    }

    /**
     * Set the dnsSettings property: DNS Settings for the interface.
     *
     * @param dnsSettings the dnsSettings value to set.
     * @return the NetworkInterfaceProperties object itself.
     */
    public NetworkInterfaceProperties withDnsSettings(InterfaceDnsSettings dnsSettings) {
        this.dnsSettings = dnsSettings;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the network interface.
     *
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: The observed state of network interfaces.
     *
     * @return the status value.
     */
    public NetworkInterfaceStatus status() {
        return this.status;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ipConfigurations() != null) {
            ipConfigurations().forEach(e -> e.validate());
        }
        if (dnsSettings() != null) {
            dnsSettings().validate();
        }
        if (status() != null) {
            status().validate();
        }
    }
}
