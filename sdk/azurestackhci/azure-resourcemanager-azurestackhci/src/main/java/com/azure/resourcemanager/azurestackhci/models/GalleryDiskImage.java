// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * This is the disk image base class.
 */
@Immutable
public class GalleryDiskImage implements JsonSerializable<GalleryDiskImage> {
    /*
     * This property indicates the size of the VHD to be created.
     */
    private Long sizeInMB;

    /**
     * Creates an instance of GalleryDiskImage class.
     */
    public GalleryDiskImage() {
    }

    /**
     * Get the sizeInMB property: This property indicates the size of the VHD to be created.
     * 
     * @return the sizeInMB value.
     */
    public Long sizeInMB() {
        return this.sizeInMB;
    }

    /**
     * Set the sizeInMB property: This property indicates the size of the VHD to be created.
     * 
     * @param sizeInMB the sizeInMB value to set.
     * @return the GalleryDiskImage object itself.
     */
    GalleryDiskImage withSizeInMB(Long sizeInMB) {
        this.sizeInMB = sizeInMB;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GalleryDiskImage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GalleryDiskImage if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the GalleryDiskImage.
     */
    public static GalleryDiskImage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GalleryDiskImage deserializedGalleryDiskImage = new GalleryDiskImage();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sizeInMB".equals(fieldName)) {
                    deserializedGalleryDiskImage.sizeInMB = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGalleryDiskImage;
        });
    }
}
