// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The instance view of a virtual machine.
 */
@Fluent
public final class VirtualMachineInstanceView implements JsonSerializable<VirtualMachineInstanceView> {
    /*
     * The VM Config Agent running on the virtual machine.
     */
    private VirtualMachineConfigAgentInstanceView vmAgent;

    /**
     * Creates an instance of VirtualMachineInstanceView class.
     */
    public VirtualMachineInstanceView() {
    }

    /**
     * Get the vmAgent property: The VM Config Agent running on the virtual machine.
     * 
     * @return the vmAgent value.
     */
    public VirtualMachineConfigAgentInstanceView vmAgent() {
        return this.vmAgent;
    }

    /**
     * Set the vmAgent property: The VM Config Agent running on the virtual machine.
     * 
     * @param vmAgent the vmAgent value to set.
     * @return the VirtualMachineInstanceView object itself.
     */
    public VirtualMachineInstanceView withVmAgent(VirtualMachineConfigAgentInstanceView vmAgent) {
        this.vmAgent = vmAgent;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (vmAgent() != null) {
            vmAgent().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("vmAgent", this.vmAgent);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineInstanceView from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineInstanceView if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualMachineInstanceView.
     */
    public static VirtualMachineInstanceView fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineInstanceView deserializedVirtualMachineInstanceView = new VirtualMachineInstanceView();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vmAgent".equals(fieldName)) {
                    deserializedVirtualMachineInstanceView.vmAgent
                        = VirtualMachineConfigAgentInstanceView.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineInstanceView;
        });
    }
}
