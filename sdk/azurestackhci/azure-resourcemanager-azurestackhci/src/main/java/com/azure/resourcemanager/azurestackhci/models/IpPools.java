// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The dnsServers of a device.
 */
@Fluent
public final class IpPools implements JsonSerializable<IpPools> {
    /*
     * Starting IP address for the management network. A minimum of six free, contiguous IPv4 addresses (excluding your
     * host IPs) are needed for infrastructure services such as clustering.
     */
    private String startingAddress;

    /*
     * Ending IP address for the management network. A minimum of six free, contiguous IPv4 addresses (excluding your
     * host IPs) are needed for infrastructure services such as clustering.
     */
    private String endingAddress;

    /**
     * Creates an instance of IpPools class.
     */
    public IpPools() {
    }

    /**
     * Get the startingAddress property: Starting IP address for the management network. A minimum of six free,
     * contiguous IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
     * 
     * @return the startingAddress value.
     */
    public String startingAddress() {
        return this.startingAddress;
    }

    /**
     * Set the startingAddress property: Starting IP address for the management network. A minimum of six free,
     * contiguous IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
     * 
     * @param startingAddress the startingAddress value to set.
     * @return the IpPools object itself.
     */
    public IpPools withStartingAddress(String startingAddress) {
        this.startingAddress = startingAddress;
        return this;
    }

    /**
     * Get the endingAddress property: Ending IP address for the management network. A minimum of six free, contiguous
     * IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
     * 
     * @return the endingAddress value.
     */
    public String endingAddress() {
        return this.endingAddress;
    }

    /**
     * Set the endingAddress property: Ending IP address for the management network. A minimum of six free, contiguous
     * IPv4 addresses (excluding your host IPs) are needed for infrastructure services such as clustering.
     * 
     * @param endingAddress the endingAddress value to set.
     * @return the IpPools object itself.
     */
    public IpPools withEndingAddress(String endingAddress) {
        this.endingAddress = endingAddress;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startingAddress", this.startingAddress);
        jsonWriter.writeStringField("endingAddress", this.endingAddress);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IpPools from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IpPools if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the IpPools.
     */
    public static IpPools fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IpPools deserializedIpPools = new IpPools();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startingAddress".equals(fieldName)) {
                    deserializedIpPools.startingAddress = reader.getString();
                } else if ("endingAddress".equals(fieldName)) {
                    deserializedIpPools.endingAddress = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIpPools;
        });
    }
}
