// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurestackhci.fluent.DeploymentSettingsClient;
import com.azure.resourcemanager.azurestackhci.fluent.models.DeploymentSettingInner;
import com.azure.resourcemanager.azurestackhci.models.DeploymentSetting;
import com.azure.resourcemanager.azurestackhci.models.DeploymentSettings;

public final class DeploymentSettingsImpl implements DeploymentSettings {
    private static final ClientLogger LOGGER = new ClientLogger(DeploymentSettingsImpl.class);

    private final DeploymentSettingsClient innerClient;

    private final com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager;

    public DeploymentSettingsImpl(DeploymentSettingsClient innerClient,
        com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<DeploymentSetting> listByClusters(String resourceGroupName, String clusterName) {
        PagedIterable<DeploymentSettingInner> inner
            = this.serviceClient().listByClusters(resourceGroupName, clusterName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DeploymentSettingImpl(inner1, this.manager()));
    }

    public PagedIterable<DeploymentSetting> listByClusters(String resourceGroupName, String clusterName,
        Context context) {
        PagedIterable<DeploymentSettingInner> inner
            = this.serviceClient().listByClusters(resourceGroupName, clusterName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DeploymentSettingImpl(inner1, this.manager()));
    }

    public Response<DeploymentSetting> getWithResponse(String resourceGroupName, String clusterName,
        String deploymentSettingsName, Context context) {
        Response<DeploymentSettingInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, clusterName, deploymentSettingsName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DeploymentSettingImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DeploymentSetting get(String resourceGroupName, String clusterName, String deploymentSettingsName) {
        DeploymentSettingInner inner = this.serviceClient().get(resourceGroupName, clusterName, deploymentSettingsName);
        if (inner != null) {
            return new DeploymentSettingImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String clusterName, String deploymentSettingsName) {
        this.serviceClient().delete(resourceGroupName, clusterName, deploymentSettingsName);
    }

    public void delete(String resourceGroupName, String clusterName, String deploymentSettingsName, Context context) {
        this.serviceClient().delete(resourceGroupName, clusterName, deploymentSettingsName, context);
    }

    public DeploymentSetting getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String clusterName = ResourceManagerUtils.getValueFromIdByName(id, "clusters");
        if (clusterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'clusters'.", id)));
        }
        String deploymentSettingsName = ResourceManagerUtils.getValueFromIdByName(id, "deploymentSettings");
        if (deploymentSettingsName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'deploymentSettings'.", id)));
        }
        return this.getWithResponse(resourceGroupName, clusterName, deploymentSettingsName, Context.NONE).getValue();
    }

    public Response<DeploymentSetting> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String clusterName = ResourceManagerUtils.getValueFromIdByName(id, "clusters");
        if (clusterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'clusters'.", id)));
        }
        String deploymentSettingsName = ResourceManagerUtils.getValueFromIdByName(id, "deploymentSettings");
        if (deploymentSettingsName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'deploymentSettings'.", id)));
        }
        return this.getWithResponse(resourceGroupName, clusterName, deploymentSettingsName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String clusterName = ResourceManagerUtils.getValueFromIdByName(id, "clusters");
        if (clusterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'clusters'.", id)));
        }
        String deploymentSettingsName = ResourceManagerUtils.getValueFromIdByName(id, "deploymentSettings");
        if (deploymentSettingsName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'deploymentSettings'.", id)));
        }
        this.delete(resourceGroupName, clusterName, deploymentSettingsName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String clusterName = ResourceManagerUtils.getValueFromIdByName(id, "clusters");
        if (clusterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'clusters'.", id)));
        }
        String deploymentSettingsName = ResourceManagerUtils.getValueFromIdByName(id, "deploymentSettings");
        if (deploymentSettingsName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'deploymentSettings'.", id)));
        }
        this.delete(resourceGroupName, clusterName, deploymentSettingsName, context);
    }

    private DeploymentSettingsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurestackhci.AzureStackHciManager manager() {
        return this.serviceManager;
    }

    public DeploymentSettingImpl define(String name) {
        return new DeploymentSettingImpl(name, this.manager());
    }
}
