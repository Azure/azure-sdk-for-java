// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** NetworkProfile - describes the network configuration the virtual machine instance. */
@Fluent
public final class VirtualMachineInstancePropertiesNetworkProfile {
    /*
     * NetworkInterfaces - list of network interfaces to be attached to the virtual machine instance
     */
    @JsonProperty(value = "networkInterfaces")
    private List<VirtualMachineInstancePropertiesNetworkProfileNetworkInterfacesItem> networkInterfaces;

    /** Creates an instance of VirtualMachineInstancePropertiesNetworkProfile class. */
    public VirtualMachineInstancePropertiesNetworkProfile() {
    }

    /**
     * Get the networkInterfaces property: NetworkInterfaces - list of network interfaces to be attached to the virtual
     * machine instance.
     *
     * @return the networkInterfaces value.
     */
    public List<VirtualMachineInstancePropertiesNetworkProfileNetworkInterfacesItem> networkInterfaces() {
        return this.networkInterfaces;
    }

    /**
     * Set the networkInterfaces property: NetworkInterfaces - list of network interfaces to be attached to the virtual
     * machine instance.
     *
     * @param networkInterfaces the networkInterfaces value to set.
     * @return the VirtualMachineInstancePropertiesNetworkProfile object itself.
     */
    public VirtualMachineInstancePropertiesNetworkProfile withNetworkInterfaces(
        List<VirtualMachineInstancePropertiesNetworkProfileNetworkInterfacesItem> networkInterfaces) {
        this.networkInterfaces = networkInterfaces;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (networkInterfaces() != null) {
            networkInterfaces().forEach(e -> e.validate());
        }
    }
}
