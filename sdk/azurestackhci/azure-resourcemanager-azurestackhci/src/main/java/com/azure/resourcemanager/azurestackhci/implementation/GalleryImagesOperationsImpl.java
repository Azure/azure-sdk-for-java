// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurestackhci.fluent.GalleryImagesOperationsClient;
import com.azure.resourcemanager.azurestackhci.fluent.models.GalleryImagesInner;
import com.azure.resourcemanager.azurestackhci.models.GalleryImages;
import com.azure.resourcemanager.azurestackhci.models.GalleryImagesOperations;

public final class GalleryImagesOperationsImpl implements GalleryImagesOperations {
    private static final ClientLogger LOGGER = new ClientLogger(GalleryImagesOperationsImpl.class);

    private final GalleryImagesOperationsClient innerClient;

    private final com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager;

    public GalleryImagesOperationsImpl(
        GalleryImagesOperationsClient innerClient,
        com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<GalleryImages> getByResourceGroupWithResponse(
        String resourceGroupName, String galleryImageName, Context context) {
        Response<GalleryImagesInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, galleryImageName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new GalleryImagesImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GalleryImages getByResourceGroup(String resourceGroupName, String galleryImageName) {
        GalleryImagesInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, galleryImageName);
        if (inner != null) {
            return new GalleryImagesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String galleryImageName) {
        this.serviceClient().delete(resourceGroupName, galleryImageName);
    }

    public void delete(String resourceGroupName, String galleryImageName, Context context) {
        this.serviceClient().delete(resourceGroupName, galleryImageName, context);
    }

    public PagedIterable<GalleryImages> listByResourceGroup(String resourceGroupName) {
        PagedIterable<GalleryImagesInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new GalleryImagesImpl(inner1, this.manager()));
    }

    public PagedIterable<GalleryImages> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<GalleryImagesInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new GalleryImagesImpl(inner1, this.manager()));
    }

    public PagedIterable<GalleryImages> list() {
        PagedIterable<GalleryImagesInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new GalleryImagesImpl(inner1, this.manager()));
    }

    public PagedIterable<GalleryImages> list(Context context) {
        PagedIterable<GalleryImagesInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new GalleryImagesImpl(inner1, this.manager()));
    }

    public GalleryImages getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String galleryImageName = Utils.getValueFromIdByName(id, "galleryImages");
        if (galleryImageName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'galleryImages'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, galleryImageName, Context.NONE).getValue();
    }

    public Response<GalleryImages> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String galleryImageName = Utils.getValueFromIdByName(id, "galleryImages");
        if (galleryImageName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'galleryImages'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, galleryImageName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String galleryImageName = Utils.getValueFromIdByName(id, "galleryImages");
        if (galleryImageName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'galleryImages'.", id)));
        }
        this.delete(resourceGroupName, galleryImageName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String galleryImageName = Utils.getValueFromIdByName(id, "galleryImages");
        if (galleryImageName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'galleryImages'.", id)));
        }
        this.delete(resourceGroupName, galleryImageName, context);
    }

    private GalleryImagesOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurestackhci.AzureStackHciManager manager() {
        return this.serviceManager;
    }

    public GalleryImagesImpl define(String name) {
        return new GalleryImagesImpl(name, this.manager());
    }
}
