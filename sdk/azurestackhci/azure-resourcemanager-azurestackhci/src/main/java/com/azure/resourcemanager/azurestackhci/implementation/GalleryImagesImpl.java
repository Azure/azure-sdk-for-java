// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurestackhci.fluent.models.GalleryImagesInner;
import com.azure.resourcemanager.azurestackhci.models.CloudInitDataSource;
import com.azure.resourcemanager.azurestackhci.models.ExtendedLocation;
import com.azure.resourcemanager.azurestackhci.models.GalleryImageIdentifier;
import com.azure.resourcemanager.azurestackhci.models.GalleryImageStatus;
import com.azure.resourcemanager.azurestackhci.models.GalleryImageVersion;
import com.azure.resourcemanager.azurestackhci.models.GalleryImages;
import com.azure.resourcemanager.azurestackhci.models.GalleryImagesUpdateRequest;
import com.azure.resourcemanager.azurestackhci.models.HyperVGeneration;
import com.azure.resourcemanager.azurestackhci.models.OperatingSystemTypes;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningStateEnum;
import java.util.Collections;
import java.util.Map;

public final class GalleryImagesImpl implements GalleryImages, GalleryImages.Definition, GalleryImages.Update {
    private GalleryImagesInner innerObject;

    private final com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ExtendedLocation extendedLocation() {
        return this.innerModel().extendedLocation();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String containerId() {
        return this.innerModel().containerId();
    }

    public String imagePath() {
        return this.innerModel().imagePath();
    }

    public OperatingSystemTypes osType() {
        return this.innerModel().osType();
    }

    public CloudInitDataSource cloudInitDataSource() {
        return this.innerModel().cloudInitDataSource();
    }

    public HyperVGeneration hyperVGeneration() {
        return this.innerModel().hyperVGeneration();
    }

    public GalleryImageIdentifier identifier() {
        return this.innerModel().identifier();
    }

    public GalleryImageVersion version() {
        return this.innerModel().version();
    }

    public ProvisioningStateEnum provisioningState() {
        return this.innerModel().provisioningState();
    }

    public GalleryImageStatus status() {
        return this.innerModel().status();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public GalleryImagesInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azurestackhci.AzureStackHciManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String galleryImageName;

    private GalleryImagesUpdateRequest updateGalleryImages;

    public GalleryImagesImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public GalleryImages create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGalleryImagesOperations()
                .createOrUpdate(resourceGroupName, galleryImageName, this.innerModel(), Context.NONE);
        return this;
    }

    public GalleryImages create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGalleryImagesOperations()
                .createOrUpdate(resourceGroupName, galleryImageName, this.innerModel(), context);
        return this;
    }

    GalleryImagesImpl(String name, com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = new GalleryImagesInner();
        this.serviceManager = serviceManager;
        this.galleryImageName = name;
    }

    public GalleryImagesImpl update() {
        this.updateGalleryImages = new GalleryImagesUpdateRequest();
        return this;
    }

    public GalleryImages apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGalleryImagesOperations()
                .update(resourceGroupName, galleryImageName, updateGalleryImages, Context.NONE);
        return this;
    }

    public GalleryImages apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGalleryImagesOperations()
                .update(resourceGroupName, galleryImageName, updateGalleryImages, context);
        return this;
    }

    GalleryImagesImpl(
        GalleryImagesInner innerObject, com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.galleryImageName = Utils.getValueFromIdByName(innerObject.id(), "galleryImages");
    }

    public GalleryImages refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGalleryImagesOperations()
                .getByResourceGroupWithResponse(resourceGroupName, galleryImageName, Context.NONE)
                .getValue();
        return this;
    }

    public GalleryImages refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getGalleryImagesOperations()
                .getByResourceGroupWithResponse(resourceGroupName, galleryImageName, context)
                .getValue();
        return this;
    }

    public GalleryImagesImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public GalleryImagesImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public GalleryImagesImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateGalleryImages.withTags(tags);
            return this;
        }
    }

    public GalleryImagesImpl withExtendedLocation(ExtendedLocation extendedLocation) {
        this.innerModel().withExtendedLocation(extendedLocation);
        return this;
    }

    public GalleryImagesImpl withContainerId(String containerId) {
        this.innerModel().withContainerId(containerId);
        return this;
    }

    public GalleryImagesImpl withImagePath(String imagePath) {
        this.innerModel().withImagePath(imagePath);
        return this;
    }

    public GalleryImagesImpl withOsType(OperatingSystemTypes osType) {
        this.innerModel().withOsType(osType);
        return this;
    }

    public GalleryImagesImpl withCloudInitDataSource(CloudInitDataSource cloudInitDataSource) {
        this.innerModel().withCloudInitDataSource(cloudInitDataSource);
        return this;
    }

    public GalleryImagesImpl withHyperVGeneration(HyperVGeneration hyperVGeneration) {
        this.innerModel().withHyperVGeneration(hyperVGeneration);
        return this;
    }

    public GalleryImagesImpl withIdentifier(GalleryImageIdentifier identifier) {
        this.innerModel().withIdentifier(identifier);
        return this;
    }

    public GalleryImagesImpl withVersion(GalleryImageVersion version) {
        this.innerModel().withVersion(version);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
