// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurestackhci.fluent.models.LogicalNetworksInner;
import com.azure.resourcemanager.azurestackhci.models.ExtendedLocation;
import com.azure.resourcemanager.azurestackhci.models.LogicalNetworkPropertiesDhcpOptions;
import com.azure.resourcemanager.azurestackhci.models.LogicalNetworkStatus;
import com.azure.resourcemanager.azurestackhci.models.LogicalNetworks;
import com.azure.resourcemanager.azurestackhci.models.LogicalNetworksUpdateRequest;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningStateEnum;
import com.azure.resourcemanager.azurestackhci.models.Subnet;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class LogicalNetworksImpl implements LogicalNetworks, LogicalNetworks.Definition, LogicalNetworks.Update {
    private LogicalNetworksInner innerObject;

    private final com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ExtendedLocation extendedLocation() {
        return this.innerModel().extendedLocation();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public LogicalNetworkPropertiesDhcpOptions dhcpOptions() {
        return this.innerModel().dhcpOptions();
    }

    public List<Subnet> subnets() {
        List<Subnet> inner = this.innerModel().subnets();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ProvisioningStateEnum provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String vmSwitchName() {
        return this.innerModel().vmSwitchName();
    }

    public LogicalNetworkStatus status() {
        return this.innerModel().status();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public LogicalNetworksInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azurestackhci.AzureStackHciManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String logicalNetworkName;

    private LogicalNetworksUpdateRequest updateLogicalNetworks;

    public LogicalNetworksImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public LogicalNetworks create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLogicalNetworksOperations()
                .createOrUpdate(resourceGroupName, logicalNetworkName, this.innerModel(), Context.NONE);
        return this;
    }

    public LogicalNetworks create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLogicalNetworksOperations()
                .createOrUpdate(resourceGroupName, logicalNetworkName, this.innerModel(), context);
        return this;
    }

    LogicalNetworksImpl(String name, com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = new LogicalNetworksInner();
        this.serviceManager = serviceManager;
        this.logicalNetworkName = name;
    }

    public LogicalNetworksImpl update() {
        this.updateLogicalNetworks = new LogicalNetworksUpdateRequest();
        return this;
    }

    public LogicalNetworks apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLogicalNetworksOperations()
                .update(resourceGroupName, logicalNetworkName, updateLogicalNetworks, Context.NONE);
        return this;
    }

    public LogicalNetworks apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLogicalNetworksOperations()
                .update(resourceGroupName, logicalNetworkName, updateLogicalNetworks, context);
        return this;
    }

    LogicalNetworksImpl(
        LogicalNetworksInner innerObject, com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.logicalNetworkName = Utils.getValueFromIdByName(innerObject.id(), "logicalNetworks");
    }

    public LogicalNetworks refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLogicalNetworksOperations()
                .getByResourceGroupWithResponse(resourceGroupName, logicalNetworkName, Context.NONE)
                .getValue();
        return this;
    }

    public LogicalNetworks refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLogicalNetworksOperations()
                .getByResourceGroupWithResponse(resourceGroupName, logicalNetworkName, context)
                .getValue();
        return this;
    }

    public LogicalNetworksImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public LogicalNetworksImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public LogicalNetworksImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateLogicalNetworks.withTags(tags);
            return this;
        }
    }

    public LogicalNetworksImpl withExtendedLocation(ExtendedLocation extendedLocation) {
        this.innerModel().withExtendedLocation(extendedLocation);
        return this;
    }

    public LogicalNetworksImpl withDhcpOptions(LogicalNetworkPropertiesDhcpOptions dhcpOptions) {
        this.innerModel().withDhcpOptions(dhcpOptions);
        return this;
    }

    public LogicalNetworksImpl withSubnets(List<Subnet> subnets) {
        this.innerModel().withSubnets(subnets);
        return this;
    }

    public LogicalNetworksImpl withVmSwitchName(String vmSwitchName) {
        this.innerModel().withVmSwitchName(vmSwitchName);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
