// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.azurestackhci.models.LogicalNetworkPropertiesDhcpOptions;
import com.azure.resourcemanager.azurestackhci.models.LogicalNetworkStatus;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningStateEnum;
import com.azure.resourcemanager.azurestackhci.models.Subnet;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Properties under the logical network resource. */
@Fluent
public final class LogicalNetworkProperties {
    /*
     * DhcpOptions contains an array of DNS servers available to VMs deployed in the logical network. Standard DHCP
     * option for a subnet overrides logical network DHCP options.
     */
    @JsonProperty(value = "dhcpOptions")
    private LogicalNetworkPropertiesDhcpOptions dhcpOptions;

    /*
     * Subnet - list of subnets under the logical network
     */
    @JsonProperty(value = "subnets")
    private List<Subnet> subnets;

    /*
     * Provisioning state of the logical network.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningStateEnum provisioningState;

    /*
     * name of the network switch to be used for VMs
     */
    @JsonProperty(value = "vmSwitchName")
    private String vmSwitchName;

    /*
     * The observed state of logical networks
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private LogicalNetworkStatus status;

    /** Creates an instance of LogicalNetworkProperties class. */
    public LogicalNetworkProperties() {
    }

    /**
     * Get the dhcpOptions property: DhcpOptions contains an array of DNS servers available to VMs deployed in the
     * logical network. Standard DHCP option for a subnet overrides logical network DHCP options.
     *
     * @return the dhcpOptions value.
     */
    public LogicalNetworkPropertiesDhcpOptions dhcpOptions() {
        return this.dhcpOptions;
    }

    /**
     * Set the dhcpOptions property: DhcpOptions contains an array of DNS servers available to VMs deployed in the
     * logical network. Standard DHCP option for a subnet overrides logical network DHCP options.
     *
     * @param dhcpOptions the dhcpOptions value to set.
     * @return the LogicalNetworkProperties object itself.
     */
    public LogicalNetworkProperties withDhcpOptions(LogicalNetworkPropertiesDhcpOptions dhcpOptions) {
        this.dhcpOptions = dhcpOptions;
        return this;
    }

    /**
     * Get the subnets property: Subnet - list of subnets under the logical network.
     *
     * @return the subnets value.
     */
    public List<Subnet> subnets() {
        return this.subnets;
    }

    /**
     * Set the subnets property: Subnet - list of subnets under the logical network.
     *
     * @param subnets the subnets value to set.
     * @return the LogicalNetworkProperties object itself.
     */
    public LogicalNetworkProperties withSubnets(List<Subnet> subnets) {
        this.subnets = subnets;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the logical network.
     *
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the vmSwitchName property: name of the network switch to be used for VMs.
     *
     * @return the vmSwitchName value.
     */
    public String vmSwitchName() {
        return this.vmSwitchName;
    }

    /**
     * Set the vmSwitchName property: name of the network switch to be used for VMs.
     *
     * @param vmSwitchName the vmSwitchName value to set.
     * @return the LogicalNetworkProperties object itself.
     */
    public LogicalNetworkProperties withVmSwitchName(String vmSwitchName) {
        this.vmSwitchName = vmSwitchName;
        return this;
    }

    /**
     * Get the status property: The observed state of logical networks.
     *
     * @return the status value.
     */
    public LogicalNetworkStatus status() {
        return this.status;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dhcpOptions() != null) {
            dhcpOptions().validate();
        }
        if (subnets() != null) {
            subnets().forEach(e -> e.validate());
        }
        if (status() != null) {
            status().validate();
        }
    }
}
