// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.azurestackhci.fluent.SkusClient;
import com.azure.resourcemanager.azurestackhci.fluent.models.SkuInner;
import com.azure.resourcemanager.azurestackhci.models.SkuList;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SkusClient.
 */
public final class SkusClientImpl implements SkusClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SkusService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureStackHciClientImpl client;

    /**
     * Initializes an instance of SkusClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SkusClientImpl(AzureStackHciClientImpl client) {
        this.service = RestProxy.create(SkusService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureStackHciClientSkus to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureStackHciClientS")
    public interface SkusService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/publishers/{publisherName}/offers/{offerName}/skus")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SkuList>> listByOffer(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("publisherName") String publisherName, @PathParam("offerName") String offerName,
            @QueryParam("api-version") String apiVersion, @QueryParam("$expand") String expand,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/publishers/{publisherName}/offers/{offerName}/skus/{skuName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SkuInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("publisherName") String publisherName, @PathParam("offerName") String offerName,
            @PathParam("skuName") String skuName, @QueryParam("api-version") String apiVersion,
            @QueryParam("$expand") String expand, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SkuList>> listByOfferNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List Skus available for a offer within the HCI Cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param publisherName The name of the publisher available within HCI cluster.
     * @param offerName The name of the offer available within HCI cluster.
     * @param expand Specify $expand=content,contentVersion to populate additional fields related to the marketplace
     * offer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of SKU proxy resources for the HCI cluster along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SkuInner>> listByOfferSinglePageAsync(String resourceGroupName, String clusterName,
        String publisherName, String offerName, String expand) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (offerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter offerName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByOffer(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, clusterName, publisherName, offerName, this.client.getApiVersion(), expand, accept,
                context))
            .<PagedResponse<SkuInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List Skus available for a offer within the HCI Cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param publisherName The name of the publisher available within HCI cluster.
     * @param offerName The name of the offer available within HCI cluster.
     * @param expand Specify $expand=content,contentVersion to populate additional fields related to the marketplace
     * offer.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of SKU proxy resources for the HCI cluster along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SkuInner>> listByOfferSinglePageAsync(String resourceGroupName, String clusterName,
        String publisherName, String offerName, String expand, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (offerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter offerName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByOffer(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, clusterName,
                publisherName, offerName, this.client.getApiVersion(), expand, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List Skus available for a offer within the HCI Cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param publisherName The name of the publisher available within HCI cluster.
     * @param offerName The name of the offer available within HCI cluster.
     * @param expand Specify $expand=content,contentVersion to populate additional fields related to the marketplace
     * offer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of SKU proxy resources for the HCI cluster as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SkuInner> listByOfferAsync(String resourceGroupName, String clusterName, String publisherName,
        String offerName, String expand) {
        return new PagedFlux<>(
            () -> listByOfferSinglePageAsync(resourceGroupName, clusterName, publisherName, offerName, expand),
            nextLink -> listByOfferNextSinglePageAsync(nextLink));
    }

    /**
     * List Skus available for a offer within the HCI Cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param publisherName The name of the publisher available within HCI cluster.
     * @param offerName The name of the offer available within HCI cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of SKU proxy resources for the HCI cluster as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SkuInner> listByOfferAsync(String resourceGroupName, String clusterName, String publisherName,
        String offerName) {
        final String expand = null;
        return new PagedFlux<>(
            () -> listByOfferSinglePageAsync(resourceGroupName, clusterName, publisherName, offerName, expand),
            nextLink -> listByOfferNextSinglePageAsync(nextLink));
    }

    /**
     * List Skus available for a offer within the HCI Cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param publisherName The name of the publisher available within HCI cluster.
     * @param offerName The name of the offer available within HCI cluster.
     * @param expand Specify $expand=content,contentVersion to populate additional fields related to the marketplace
     * offer.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of SKU proxy resources for the HCI cluster as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SkuInner> listByOfferAsync(String resourceGroupName, String clusterName, String publisherName,
        String offerName, String expand, Context context) {
        return new PagedFlux<>(
            () -> listByOfferSinglePageAsync(resourceGroupName, clusterName, publisherName, offerName, expand, context),
            nextLink -> listByOfferNextSinglePageAsync(nextLink, context));
    }

    /**
     * List Skus available for a offer within the HCI Cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param publisherName The name of the publisher available within HCI cluster.
     * @param offerName The name of the offer available within HCI cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of SKU proxy resources for the HCI cluster as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SkuInner> listByOffer(String resourceGroupName, String clusterName, String publisherName,
        String offerName) {
        final String expand = null;
        return new PagedIterable<>(listByOfferAsync(resourceGroupName, clusterName, publisherName, offerName, expand));
    }

    /**
     * List Skus available for a offer within the HCI Cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param publisherName The name of the publisher available within HCI cluster.
     * @param offerName The name of the offer available within HCI cluster.
     * @param expand Specify $expand=content,contentVersion to populate additional fields related to the marketplace
     * offer.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of SKU proxy resources for the HCI cluster as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SkuInner> listByOffer(String resourceGroupName, String clusterName, String publisherName,
        String offerName, String expand, Context context) {
        return new PagedIterable<>(
            listByOfferAsync(resourceGroupName, clusterName, publisherName, offerName, expand, context));
    }

    /**
     * Get SKU resource details within a offer of HCI Cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param publisherName The name of the publisher available within HCI cluster.
     * @param offerName The name of the offer available within HCI cluster.
     * @param skuName The name of the SKU available within HCI cluster.
     * @param expand Specify $expand=content,contentVersion to populate additional fields related to the marketplace
     * offer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sKU resource details within a offer of HCI Cluster along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SkuInner>> getWithResponseAsync(String resourceGroupName, String clusterName,
        String publisherName, String offerName, String skuName, String expand) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (offerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter offerName is required and cannot be null."));
        }
        if (skuName == null) {
            return Mono.error(new IllegalArgumentException("Parameter skuName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, clusterName, publisherName, offerName, skuName, this.client.getApiVersion(), expand,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get SKU resource details within a offer of HCI Cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param publisherName The name of the publisher available within HCI cluster.
     * @param offerName The name of the offer available within HCI cluster.
     * @param skuName The name of the SKU available within HCI cluster.
     * @param expand Specify $expand=content,contentVersion to populate additional fields related to the marketplace
     * offer.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sKU resource details within a offer of HCI Cluster along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SkuInner>> getWithResponseAsync(String resourceGroupName, String clusterName,
        String publisherName, String offerName, String skuName, String expand, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (publisherName == null) {
            return Mono.error(new IllegalArgumentException("Parameter publisherName is required and cannot be null."));
        }
        if (offerName == null) {
            return Mono.error(new IllegalArgumentException("Parameter offerName is required and cannot be null."));
        }
        if (skuName == null) {
            return Mono.error(new IllegalArgumentException("Parameter skuName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, clusterName,
            publisherName, offerName, skuName, this.client.getApiVersion(), expand, accept, context);
    }

    /**
     * Get SKU resource details within a offer of HCI Cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param publisherName The name of the publisher available within HCI cluster.
     * @param offerName The name of the offer available within HCI cluster.
     * @param skuName The name of the SKU available within HCI cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sKU resource details within a offer of HCI Cluster on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SkuInner> getAsync(String resourceGroupName, String clusterName, String publisherName,
        String offerName, String skuName) {
        final String expand = null;
        return getWithResponseAsync(resourceGroupName, clusterName, publisherName, offerName, skuName, expand)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get SKU resource details within a offer of HCI Cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param publisherName The name of the publisher available within HCI cluster.
     * @param offerName The name of the offer available within HCI cluster.
     * @param skuName The name of the SKU available within HCI cluster.
     * @param expand Specify $expand=content,contentVersion to populate additional fields related to the marketplace
     * offer.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sKU resource details within a offer of HCI Cluster along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SkuInner> getWithResponse(String resourceGroupName, String clusterName, String publisherName,
        String offerName, String skuName, String expand, Context context) {
        return getWithResponseAsync(resourceGroupName, clusterName, publisherName, offerName, skuName, expand, context)
            .block();
    }

    /**
     * Get SKU resource details within a offer of HCI Cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param publisherName The name of the publisher available within HCI cluster.
     * @param offerName The name of the offer available within HCI cluster.
     * @param skuName The name of the SKU available within HCI cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sKU resource details within a offer of HCI Cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SkuInner get(String resourceGroupName, String clusterName, String publisherName, String offerName,
        String skuName) {
        final String expand = null;
        return getWithResponse(resourceGroupName, clusterName, publisherName, offerName, skuName, expand, Context.NONE)
            .getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of SKU proxy resources for the HCI cluster along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SkuInner>> listByOfferNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByOfferNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SkuInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of SKU proxy resources for the HCI cluster along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SkuInner>> listByOfferNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByOfferNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
