// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurestackhci.fluent.models.VirtualNetworksInner;
import com.azure.resourcemanager.azurestackhci.models.ExtendedLocation;
import com.azure.resourcemanager.azurestackhci.models.NetworkTypeEnum;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningStateEnum;
import com.azure.resourcemanager.azurestackhci.models.VirtualNetworkPropertiesDhcpOptions;
import com.azure.resourcemanager.azurestackhci.models.VirtualNetworkPropertiesSubnetsItem;
import com.azure.resourcemanager.azurestackhci.models.VirtualNetworkStatus;
import com.azure.resourcemanager.azurestackhci.models.VirtualNetworks;
import com.azure.resourcemanager.azurestackhci.models.VirtualNetworksUpdateRequest;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class VirtualNetworksImpl implements VirtualNetworks, VirtualNetworks.Definition, VirtualNetworks.Update {
    private VirtualNetworksInner innerObject;

    private final com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ExtendedLocation extendedLocation() {
        return this.innerModel().extendedLocation();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public VirtualNetworkPropertiesDhcpOptions dhcpOptions() {
        return this.innerModel().dhcpOptions();
    }

    public NetworkTypeEnum networkType() {
        return this.innerModel().networkType();
    }

    public List<VirtualNetworkPropertiesSubnetsItem> subnets() {
        List<VirtualNetworkPropertiesSubnetsItem> inner = this.innerModel().subnets();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ProvisioningStateEnum provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String vmSwitchName() {
        return this.innerModel().vmSwitchName();
    }

    public VirtualNetworkStatus status() {
        return this.innerModel().status();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public VirtualNetworksInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azurestackhci.AzureStackHciManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String virtualNetworkName;

    private VirtualNetworksUpdateRequest updateVirtualNetworks;

    public VirtualNetworksImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public VirtualNetworks create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualNetworksOperations()
                .createOrUpdate(resourceGroupName, virtualNetworkName, this.innerModel(), Context.NONE);
        return this;
    }

    public VirtualNetworks create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualNetworksOperations()
                .createOrUpdate(resourceGroupName, virtualNetworkName, this.innerModel(), context);
        return this;
    }

    VirtualNetworksImpl(String name, com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = new VirtualNetworksInner();
        this.serviceManager = serviceManager;
        this.virtualNetworkName = name;
    }

    public VirtualNetworksImpl update() {
        this.updateVirtualNetworks = new VirtualNetworksUpdateRequest();
        return this;
    }

    public VirtualNetworks apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualNetworksOperations()
                .update(resourceGroupName, virtualNetworkName, updateVirtualNetworks, Context.NONE);
        return this;
    }

    public VirtualNetworks apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualNetworksOperations()
                .update(resourceGroupName, virtualNetworkName, updateVirtualNetworks, context);
        return this;
    }

    VirtualNetworksImpl(
        VirtualNetworksInner innerObject, com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.virtualNetworkName = Utils.getValueFromIdByName(innerObject.id(), "virtualNetworks");
    }

    public VirtualNetworks refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualNetworksOperations()
                .getByResourceGroupWithResponse(resourceGroupName, virtualNetworkName, Context.NONE)
                .getValue();
        return this;
    }

    public VirtualNetworks refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualNetworksOperations()
                .getByResourceGroupWithResponse(resourceGroupName, virtualNetworkName, context)
                .getValue();
        return this;
    }

    public VirtualNetworksImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public VirtualNetworksImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public VirtualNetworksImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateVirtualNetworks.withTags(tags);
            return this;
        }
    }

    public VirtualNetworksImpl withExtendedLocation(ExtendedLocation extendedLocation) {
        this.innerModel().withExtendedLocation(extendedLocation);
        return this;
    }

    public VirtualNetworksImpl withDhcpOptions(VirtualNetworkPropertiesDhcpOptions dhcpOptions) {
        this.innerModel().withDhcpOptions(dhcpOptions);
        return this;
    }

    public VirtualNetworksImpl withNetworkType(NetworkTypeEnum networkType) {
        this.innerModel().withNetworkType(networkType);
        return this;
    }

    public VirtualNetworksImpl withSubnets(List<VirtualNetworkPropertiesSubnetsItem> subnets) {
        this.innerModel().withSubnets(subnets);
        return this;
    }

    public VirtualNetworksImpl withVmSwitchName(String vmSwitchName) {
        this.innerModel().withVmSwitchName(vmSwitchName);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
