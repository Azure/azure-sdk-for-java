// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurestackhci.fluent.VirtualMachinesOperationsClient;
import com.azure.resourcemanager.azurestackhci.fluent.models.VirtualMachinesInner;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachines;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachinesOperations;

public final class VirtualMachinesOperationsImpl implements VirtualMachinesOperations {
    private static final ClientLogger LOGGER = new ClientLogger(VirtualMachinesOperationsImpl.class);

    private final VirtualMachinesOperationsClient innerClient;

    private final com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager;

    public VirtualMachinesOperationsImpl(
        VirtualMachinesOperationsClient innerClient,
        com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<VirtualMachines> getByResourceGroupWithResponse(
        String resourceGroupName, String virtualMachineName, Context context) {
        Response<VirtualMachinesInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, virtualMachineName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VirtualMachinesImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VirtualMachines getByResourceGroup(String resourceGroupName, String virtualMachineName) {
        VirtualMachinesInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, virtualMachineName);
        if (inner != null) {
            return new VirtualMachinesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(
        String resourceGroupName, String virtualMachineName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, virtualMachineName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String virtualMachineName) {
        this.serviceClient().delete(resourceGroupName, virtualMachineName);
    }

    public void start(String resourceGroupName, String virtualMachineName) {
        this.serviceClient().start(resourceGroupName, virtualMachineName);
    }

    public void start(String resourceGroupName, String virtualMachineName, Context context) {
        this.serviceClient().start(resourceGroupName, virtualMachineName, context);
    }

    public void stop(String resourceGroupName, String virtualMachineName) {
        this.serviceClient().stop(resourceGroupName, virtualMachineName);
    }

    public void stop(String resourceGroupName, String virtualMachineName, Context context) {
        this.serviceClient().stop(resourceGroupName, virtualMachineName, context);
    }

    public void restart(String resourceGroupName, String virtualMachineName) {
        this.serviceClient().restart(resourceGroupName, virtualMachineName);
    }

    public void restart(String resourceGroupName, String virtualMachineName, Context context) {
        this.serviceClient().restart(resourceGroupName, virtualMachineName, context);
    }

    public PagedIterable<VirtualMachines> listByResourceGroup(String resourceGroupName) {
        PagedIterable<VirtualMachinesInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new VirtualMachinesImpl(inner1, this.manager()));
    }

    public PagedIterable<VirtualMachines> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<VirtualMachinesInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new VirtualMachinesImpl(inner1, this.manager()));
    }

    public PagedIterable<VirtualMachines> list() {
        PagedIterable<VirtualMachinesInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new VirtualMachinesImpl(inner1, this.manager()));
    }

    public PagedIterable<VirtualMachines> list(Context context) {
        PagedIterable<VirtualMachinesInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new VirtualMachinesImpl(inner1, this.manager()));
    }

    public VirtualMachines getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualMachineName = Utils.getValueFromIdByName(id, "virtualMachines");
        if (virtualMachineName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualMachines'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, virtualMachineName, Context.NONE).getValue();
    }

    public Response<VirtualMachines> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualMachineName = Utils.getValueFromIdByName(id, "virtualMachines");
        if (virtualMachineName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualMachines'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, virtualMachineName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualMachineName = Utils.getValueFromIdByName(id, "virtualMachines");
        if (virtualMachineName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualMachines'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, virtualMachineName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualMachineName = Utils.getValueFromIdByName(id, "virtualMachines");
        if (virtualMachineName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualMachines'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, virtualMachineName, context);
    }

    private VirtualMachinesOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurestackhci.AzureStackHciManager manager() {
        return this.serviceManager;
    }

    public VirtualMachinesImpl define(String name) {
        return new VirtualMachinesImpl(name, this.manager());
    }
}
