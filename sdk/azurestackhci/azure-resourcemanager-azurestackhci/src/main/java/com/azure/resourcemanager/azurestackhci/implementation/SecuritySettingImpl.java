// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurestackhci.fluent.models.SecuritySettingInner;
import com.azure.resourcemanager.azurestackhci.models.ComplianceAssignmentType;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningState;
import com.azure.resourcemanager.azurestackhci.models.SecurityComplianceStatus;
import com.azure.resourcemanager.azurestackhci.models.SecuritySetting;

public final class SecuritySettingImpl implements SecuritySetting, SecuritySetting.Definition, SecuritySetting.Update {
    private SecuritySettingInner innerObject;

    private final com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ComplianceAssignmentType securedCoreComplianceAssignment() {
        return this.innerModel().securedCoreComplianceAssignment();
    }

    public ComplianceAssignmentType wdacComplianceAssignment() {
        return this.innerModel().wdacComplianceAssignment();
    }

    public ComplianceAssignmentType smbEncryptionForIntraClusterTrafficComplianceAssignment() {
        return this.innerModel().smbEncryptionForIntraClusterTrafficComplianceAssignment();
    }

    public SecurityComplianceStatus securityComplianceStatus() {
        return this.innerModel().securityComplianceStatus();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public SecuritySettingInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azurestackhci.AzureStackHciManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String clusterName;

    private String securitySettingsName;

    public SecuritySettingImpl withExistingCluster(String resourceGroupName, String clusterName) {
        this.resourceGroupName = resourceGroupName;
        this.clusterName = clusterName;
        return this;
    }

    public SecuritySetting create() {
        this.innerObject = serviceManager.serviceClient()
            .getSecuritySettings()
            .createOrUpdate(resourceGroupName, clusterName, securitySettingsName, this.innerModel(), Context.NONE);
        return this;
    }

    public SecuritySetting create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSecuritySettings()
            .createOrUpdate(resourceGroupName, clusterName, securitySettingsName, this.innerModel(), context);
        return this;
    }

    SecuritySettingImpl(String name, com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = new SecuritySettingInner();
        this.serviceManager = serviceManager;
        this.securitySettingsName = name;
    }

    public SecuritySettingImpl update() {
        return this;
    }

    public SecuritySetting apply() {
        this.innerObject = serviceManager.serviceClient()
            .getSecuritySettings()
            .createOrUpdate(resourceGroupName, clusterName, securitySettingsName, this.innerModel(), Context.NONE);
        return this;
    }

    public SecuritySetting apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSecuritySettings()
            .createOrUpdate(resourceGroupName, clusterName, securitySettingsName, this.innerModel(), context);
        return this;
    }

    SecuritySettingImpl(SecuritySettingInner innerObject,
        com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.clusterName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "clusters");
        this.securitySettingsName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "securitySettings");
    }

    public SecuritySetting refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getSecuritySettings()
            .getWithResponse(resourceGroupName, clusterName, securitySettingsName, Context.NONE)
            .getValue();
        return this;
    }

    public SecuritySetting refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSecuritySettings()
            .getWithResponse(resourceGroupName, clusterName, securitySettingsName, context)
            .getValue();
        return this;
    }

    public SecuritySettingImpl
        withSecuredCoreComplianceAssignment(ComplianceAssignmentType securedCoreComplianceAssignment) {
        this.innerModel().withSecuredCoreComplianceAssignment(securedCoreComplianceAssignment);
        return this;
    }

    public SecuritySettingImpl withWdacComplianceAssignment(ComplianceAssignmentType wdacComplianceAssignment) {
        this.innerModel().withWdacComplianceAssignment(wdacComplianceAssignment);
        return this;
    }

    public SecuritySettingImpl withSmbEncryptionForIntraClusterTrafficComplianceAssignment(
        ComplianceAssignmentType smbEncryptionForIntraClusterTrafficComplianceAssignment) {
        this.innerModel()
            .withSmbEncryptionForIntraClusterTrafficComplianceAssignment(
                smbEncryptionForIntraClusterTrafficComplianceAssignment);
        return this;
    }

    public SecuritySettingImpl withProvisioningState(ProvisioningState provisioningState) {
        this.innerModel().withProvisioningState(provisioningState);
        return this;
    }
}
