// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurestackhci.fluent.MarketplaceGalleryImagesOperationsClient;
import com.azure.resourcemanager.azurestackhci.fluent.models.MarketplaceGalleryImagesInner;
import com.azure.resourcemanager.azurestackhci.models.MarketplaceGalleryImages;
import com.azure.resourcemanager.azurestackhci.models.MarketplaceGalleryImagesOperations;

public final class MarketplaceGalleryImagesOperationsImpl implements MarketplaceGalleryImagesOperations {
    private static final ClientLogger LOGGER = new ClientLogger(MarketplaceGalleryImagesOperationsImpl.class);

    private final MarketplaceGalleryImagesOperationsClient innerClient;

    private final com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager;

    public MarketplaceGalleryImagesOperationsImpl(
        MarketplaceGalleryImagesOperationsClient innerClient,
        com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<MarketplaceGalleryImages> getByResourceGroupWithResponse(
        String resourceGroupName, String marketplaceGalleryImageName, Context context) {
        Response<MarketplaceGalleryImagesInner> inner =
            this
                .serviceClient()
                .getByResourceGroupWithResponse(resourceGroupName, marketplaceGalleryImageName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MarketplaceGalleryImagesImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MarketplaceGalleryImages getByResourceGroup(String resourceGroupName, String marketplaceGalleryImageName) {
        MarketplaceGalleryImagesInner inner =
            this.serviceClient().getByResourceGroup(resourceGroupName, marketplaceGalleryImageName);
        if (inner != null) {
            return new MarketplaceGalleryImagesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String marketplaceGalleryImageName) {
        this.serviceClient().delete(resourceGroupName, marketplaceGalleryImageName);
    }

    public void delete(String resourceGroupName, String marketplaceGalleryImageName, Context context) {
        this.serviceClient().delete(resourceGroupName, marketplaceGalleryImageName, context);
    }

    public PagedIterable<MarketplaceGalleryImages> listByResourceGroup(String resourceGroupName) {
        PagedIterable<MarketplaceGalleryImagesInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new MarketplaceGalleryImagesImpl(inner1, this.manager()));
    }

    public PagedIterable<MarketplaceGalleryImages> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<MarketplaceGalleryImagesInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new MarketplaceGalleryImagesImpl(inner1, this.manager()));
    }

    public PagedIterable<MarketplaceGalleryImages> list() {
        PagedIterable<MarketplaceGalleryImagesInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new MarketplaceGalleryImagesImpl(inner1, this.manager()));
    }

    public PagedIterable<MarketplaceGalleryImages> list(Context context) {
        PagedIterable<MarketplaceGalleryImagesInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new MarketplaceGalleryImagesImpl(inner1, this.manager()));
    }

    public MarketplaceGalleryImages getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String marketplaceGalleryImageName = Utils.getValueFromIdByName(id, "marketplaceGalleryImages");
        if (marketplaceGalleryImageName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'marketplaceGalleryImages'.",
                                id)));
        }
        return this
            .getByResourceGroupWithResponse(resourceGroupName, marketplaceGalleryImageName, Context.NONE)
            .getValue();
    }

    public Response<MarketplaceGalleryImages> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String marketplaceGalleryImageName = Utils.getValueFromIdByName(id, "marketplaceGalleryImages");
        if (marketplaceGalleryImageName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'marketplaceGalleryImages'.",
                                id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, marketplaceGalleryImageName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String marketplaceGalleryImageName = Utils.getValueFromIdByName(id, "marketplaceGalleryImages");
        if (marketplaceGalleryImageName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'marketplaceGalleryImages'.",
                                id)));
        }
        this.delete(resourceGroupName, marketplaceGalleryImageName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String marketplaceGalleryImageName = Utils.getValueFromIdByName(id, "marketplaceGalleryImages");
        if (marketplaceGalleryImageName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'marketplaceGalleryImages'.",
                                id)));
        }
        this.delete(resourceGroupName, marketplaceGalleryImageName, context);
    }

    private MarketplaceGalleryImagesOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurestackhci.AzureStackHciManager manager() {
        return this.serviceManager;
    }

    public MarketplaceGalleryImagesImpl define(String name) {
        return new MarketplaceGalleryImagesImpl(name, this.manager());
    }
}
