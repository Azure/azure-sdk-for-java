// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurestackhci.fluent.models.StorageContainersInner;
import com.azure.resourcemanager.azurestackhci.models.ExtendedLocation;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningStateEnum;
import com.azure.resourcemanager.azurestackhci.models.StorageContainerStatus;
import com.azure.resourcemanager.azurestackhci.models.StorageContainers;
import com.azure.resourcemanager.azurestackhci.models.StorageContainersUpdateRequest;
import java.util.Collections;
import java.util.Map;

public final class StorageContainersImpl
    implements StorageContainers, StorageContainers.Definition, StorageContainers.Update {
    private StorageContainersInner innerObject;

    private final com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ExtendedLocation extendedLocation() {
        return this.innerModel().extendedLocation();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String path() {
        return this.innerModel().path();
    }

    public ProvisioningStateEnum provisioningState() {
        return this.innerModel().provisioningState();
    }

    public StorageContainerStatus status() {
        return this.innerModel().status();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public StorageContainersInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azurestackhci.AzureStackHciManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String storageContainerName;

    private StorageContainersUpdateRequest updateStorageContainers;

    public StorageContainersImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public StorageContainers create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getStorageContainersOperations()
                .createOrUpdate(resourceGroupName, storageContainerName, this.innerModel(), Context.NONE);
        return this;
    }

    public StorageContainers create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getStorageContainersOperations()
                .createOrUpdate(resourceGroupName, storageContainerName, this.innerModel(), context);
        return this;
    }

    StorageContainersImpl(String name, com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = new StorageContainersInner();
        this.serviceManager = serviceManager;
        this.storageContainerName = name;
    }

    public StorageContainersImpl update() {
        this.updateStorageContainers = new StorageContainersUpdateRequest();
        return this;
    }

    public StorageContainers apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getStorageContainersOperations()
                .update(resourceGroupName, storageContainerName, updateStorageContainers, Context.NONE);
        return this;
    }

    public StorageContainers apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getStorageContainersOperations()
                .update(resourceGroupName, storageContainerName, updateStorageContainers, context);
        return this;
    }

    StorageContainersImpl(
        StorageContainersInner innerObject,
        com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.storageContainerName = Utils.getValueFromIdByName(innerObject.id(), "storageContainers");
    }

    public StorageContainers refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getStorageContainersOperations()
                .getByResourceGroupWithResponse(resourceGroupName, storageContainerName, Context.NONE)
                .getValue();
        return this;
    }

    public StorageContainers refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getStorageContainersOperations()
                .getByResourceGroupWithResponse(resourceGroupName, storageContainerName, context)
                .getValue();
        return this;
    }

    public StorageContainersImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public StorageContainersImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public StorageContainersImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateStorageContainers.withTags(tags);
            return this;
        }
    }

    public StorageContainersImpl withExtendedLocation(ExtendedLocation extendedLocation) {
        this.innerModel().withExtendedLocation(extendedLocation);
        return this;
    }

    public StorageContainersImpl withPath(String path) {
        this.innerModel().withPath(path);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
