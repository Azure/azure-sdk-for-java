// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The observed state of virtual machine instances.
 */
@Fluent
public final class VirtualMachineInstanceStatus implements JsonSerializable<VirtualMachineInstanceStatus> {
    /*
     * VirtualMachine provisioning error code
     */
    private String errorCode;

    /*
     * Descriptive error message
     */
    private String errorMessage;

    /*
     * The power state of the virtual machine instance
     */
    private PowerStateEnum powerState;

    /*
     * The provisioningStatus property.
     */
    private VirtualMachineInstanceStatusProvisioningStatus provisioningStatus;

    /**
     * Creates an instance of VirtualMachineInstanceStatus class.
     */
    public VirtualMachineInstanceStatus() {
    }

    /**
     * Get the errorCode property: VirtualMachine provisioning error code.
     * 
     * @return the errorCode value.
     */
    public String errorCode() {
        return this.errorCode;
    }

    /**
     * Set the errorCode property: VirtualMachine provisioning error code.
     * 
     * @param errorCode the errorCode value to set.
     * @return the VirtualMachineInstanceStatus object itself.
     */
    public VirtualMachineInstanceStatus withErrorCode(String errorCode) {
        this.errorCode = errorCode;
        return this;
    }

    /**
     * Get the errorMessage property: Descriptive error message.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Set the errorMessage property: Descriptive error message.
     * 
     * @param errorMessage the errorMessage value to set.
     * @return the VirtualMachineInstanceStatus object itself.
     */
    public VirtualMachineInstanceStatus withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Get the powerState property: The power state of the virtual machine instance.
     * 
     * @return the powerState value.
     */
    public PowerStateEnum powerState() {
        return this.powerState;
    }

    /**
     * Set the powerState property: The power state of the virtual machine instance.
     * 
     * @param powerState the powerState value to set.
     * @return the VirtualMachineInstanceStatus object itself.
     */
    public VirtualMachineInstanceStatus withPowerState(PowerStateEnum powerState) {
        this.powerState = powerState;
        return this;
    }

    /**
     * Get the provisioningStatus property: The provisioningStatus property.
     * 
     * @return the provisioningStatus value.
     */
    public VirtualMachineInstanceStatusProvisioningStatus provisioningStatus() {
        return this.provisioningStatus;
    }

    /**
     * Set the provisioningStatus property: The provisioningStatus property.
     * 
     * @param provisioningStatus the provisioningStatus value to set.
     * @return the VirtualMachineInstanceStatus object itself.
     */
    public VirtualMachineInstanceStatus
        withProvisioningStatus(VirtualMachineInstanceStatusProvisioningStatus provisioningStatus) {
        this.provisioningStatus = provisioningStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (provisioningStatus() != null) {
            provisioningStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("errorCode", this.errorCode);
        jsonWriter.writeStringField("errorMessage", this.errorMessage);
        jsonWriter.writeStringField("powerState", this.powerState == null ? null : this.powerState.toString());
        jsonWriter.writeJsonField("provisioningStatus", this.provisioningStatus);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineInstanceStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineInstanceStatus if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualMachineInstanceStatus.
     */
    public static VirtualMachineInstanceStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineInstanceStatus deserializedVirtualMachineInstanceStatus = new VirtualMachineInstanceStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errorCode".equals(fieldName)) {
                    deserializedVirtualMachineInstanceStatus.errorCode = reader.getString();
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedVirtualMachineInstanceStatus.errorMessage = reader.getString();
                } else if ("powerState".equals(fieldName)) {
                    deserializedVirtualMachineInstanceStatus.powerState = PowerStateEnum.fromString(reader.getString());
                } else if ("provisioningStatus".equals(fieldName)) {
                    deserializedVirtualMachineInstanceStatus.provisioningStatus
                        = VirtualMachineInstanceStatusProvisioningStatus.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineInstanceStatus;
        });
    }
}
