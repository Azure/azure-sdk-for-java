// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azurestackhci.fluent.models.ArcSettingsPatchProperties;
import java.io.IOException;
import java.util.Map;

/**
 * ArcSetting details to update.
 */
@Fluent
public final class ArcSettingsPatch implements JsonSerializable<ArcSettingsPatch> {
    /*
     * Resource tags.
     */
    private Map<String, String> tags;

    /*
     * ArcSettings properties.
     */
    private ArcSettingsPatchProperties innerProperties;

    /**
     * Creates an instance of ArcSettingsPatch class.
     */
    public ArcSettingsPatch() {
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the ArcSettingsPatch object itself.
     */
    public ArcSettingsPatch withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the innerProperties property: ArcSettings properties.
     * 
     * @return the innerProperties value.
     */
    private ArcSettingsPatchProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the connectivityProperties property: contains connectivity related configuration for ARC resources.
     * 
     * @return the connectivityProperties value.
     */
    public Object connectivityProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().connectivityProperties();
    }

    /**
     * Set the connectivityProperties property: contains connectivity related configuration for ARC resources.
     * 
     * @param connectivityProperties the connectivityProperties value to set.
     * @return the ArcSettingsPatch object itself.
     */
    public ArcSettingsPatch withConnectivityProperties(Object connectivityProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ArcSettingsPatchProperties();
        }
        this.innerProperties().withConnectivityProperties(connectivityProperties);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ArcSettingsPatch from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ArcSettingsPatch if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ArcSettingsPatch.
     */
    public static ArcSettingsPatch fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ArcSettingsPatch deserializedArcSettingsPatch = new ArcSettingsPatch();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedArcSettingsPatch.tags = tags;
                } else if ("properties".equals(fieldName)) {
                    deserializedArcSettingsPatch.innerProperties = ArcSettingsPatchProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedArcSettingsPatch;
        });
    }
}
