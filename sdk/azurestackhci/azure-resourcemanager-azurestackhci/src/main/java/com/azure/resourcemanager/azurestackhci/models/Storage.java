// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Storage config of AzureStackHCI Cluster.
 */
@Fluent
public final class Storage implements JsonSerializable<Storage> {
    /*
     * By default, this mode is set to Express and your storage is configured as per best practices based on the number
     * of nodes in the cluster. Allowed values are 'Express','InfraOnly', 'KeepStorage'
     */
    private String configurationMode;

    /**
     * Creates an instance of Storage class.
     */
    public Storage() {
    }

    /**
     * Get the configurationMode property: By default, this mode is set to Express and your storage is configured as per
     * best practices based on the number of nodes in the cluster. Allowed values are 'Express','InfraOnly',
     * 'KeepStorage'.
     * 
     * @return the configurationMode value.
     */
    public String configurationMode() {
        return this.configurationMode;
    }

    /**
     * Set the configurationMode property: By default, this mode is set to Express and your storage is configured as per
     * best practices based on the number of nodes in the cluster. Allowed values are 'Express','InfraOnly',
     * 'KeepStorage'.
     * 
     * @param configurationMode the configurationMode value to set.
     * @return the Storage object itself.
     */
    public Storage withConfigurationMode(String configurationMode) {
        this.configurationMode = configurationMode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("configurationMode", this.configurationMode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Storage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Storage if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Storage.
     */
    public static Storage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Storage deserializedStorage = new Storage();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("configurationMode".equals(fieldName)) {
                    deserializedStorage.configurationMode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorage;
        });
    }
}
