// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningStateEnum;
import com.azure.resourcemanager.azurestackhci.models.StorageContainerStatus;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Properties under the storage container resource. */
@Fluent
public final class StorageContainerProperties {
    /*
     * Path of the storage container on the disk
     */
    @JsonProperty(value = "path", required = true)
    private String path;

    /*
     * Provisioning state of the storage container.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningStateEnum provisioningState;

    /*
     * The observed state of storage containers
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private StorageContainerStatus status;

    /** Creates an instance of StorageContainerProperties class. */
    public StorageContainerProperties() {
    }

    /**
     * Get the path property: Path of the storage container on the disk.
     *
     * @return the path value.
     */
    public String path() {
        return this.path;
    }

    /**
     * Set the path property: Path of the storage container on the disk.
     *
     * @param path the path value to set.
     * @return the StorageContainerProperties object itself.
     */
    public StorageContainerProperties withPath(String path) {
        this.path = path;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the storage container.
     *
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: The observed state of storage containers.
     *
     * @return the status value.
     */
    public StorageContainerStatus status() {
        return this.status;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (path() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property path in model StorageContainerProperties"));
        }
        if (status() != null) {
            status().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StorageContainerProperties.class);
}
