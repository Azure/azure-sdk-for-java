// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.azurestackhci.models.ExtendedLocation;
import com.azure.resourcemanager.azurestackhci.models.NetworkTypeEnum;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningStateEnum;
import com.azure.resourcemanager.azurestackhci.models.VirtualNetworkPropertiesDhcpOptions;
import com.azure.resourcemanager.azurestackhci.models.VirtualNetworkPropertiesSubnetsItem;
import com.azure.resourcemanager.azurestackhci.models.VirtualNetworkStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The virtual network resource definition. */
@Fluent
public final class VirtualNetworksInner extends Resource {
    /*
     * Properties under the virtual network resource
     */
    @JsonProperty(value = "properties")
    private VirtualNetworkProperties innerProperties;

    /*
     * The extendedLocation of the resource.
     */
    @JsonProperty(value = "extendedLocation")
    private ExtendedLocation extendedLocation;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of VirtualNetworksInner class. */
    public VirtualNetworksInner() {
    }

    /**
     * Get the innerProperties property: Properties under the virtual network resource.
     *
     * @return the innerProperties value.
     */
    private VirtualNetworkProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the extendedLocation property: The extendedLocation of the resource.
     *
     * @return the extendedLocation value.
     */
    public ExtendedLocation extendedLocation() {
        return this.extendedLocation;
    }

    /**
     * Set the extendedLocation property: The extendedLocation of the resource.
     *
     * @param extendedLocation the extendedLocation value to set.
     * @return the VirtualNetworksInner object itself.
     */
    public VirtualNetworksInner withExtendedLocation(ExtendedLocation extendedLocation) {
        this.extendedLocation = extendedLocation;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public VirtualNetworksInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public VirtualNetworksInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the dhcpOptions property: DhcpOptions contains an array of DNS servers available to VMs deployed in the
     * virtual network. Standard DHCP option for a subnet overrides VNET DHCP options.
     *
     * @return the dhcpOptions value.
     */
    public VirtualNetworkPropertiesDhcpOptions dhcpOptions() {
        return this.innerProperties() == null ? null : this.innerProperties().dhcpOptions();
    }

    /**
     * Set the dhcpOptions property: DhcpOptions contains an array of DNS servers available to VMs deployed in the
     * virtual network. Standard DHCP option for a subnet overrides VNET DHCP options.
     *
     * @param dhcpOptions the dhcpOptions value to set.
     * @return the VirtualNetworksInner object itself.
     */
    public VirtualNetworksInner withDhcpOptions(VirtualNetworkPropertiesDhcpOptions dhcpOptions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualNetworkProperties();
        }
        this.innerProperties().withDhcpOptions(dhcpOptions);
        return this;
    }

    /**
     * Get the networkType property: Type of the network.
     *
     * @return the networkType value.
     */
    public NetworkTypeEnum networkType() {
        return this.innerProperties() == null ? null : this.innerProperties().networkType();
    }

    /**
     * Set the networkType property: Type of the network.
     *
     * @param networkType the networkType value to set.
     * @return the VirtualNetworksInner object itself.
     */
    public VirtualNetworksInner withNetworkType(NetworkTypeEnum networkType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualNetworkProperties();
        }
        this.innerProperties().withNetworkType(networkType);
        return this;
    }

    /**
     * Get the subnets property: Subnet - list of subnets under the virtual network.
     *
     * @return the subnets value.
     */
    public List<VirtualNetworkPropertiesSubnetsItem> subnets() {
        return this.innerProperties() == null ? null : this.innerProperties().subnets();
    }

    /**
     * Set the subnets property: Subnet - list of subnets under the virtual network.
     *
     * @param subnets the subnets value to set.
     * @return the VirtualNetworksInner object itself.
     */
    public VirtualNetworksInner withSubnets(List<VirtualNetworkPropertiesSubnetsItem> subnets) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualNetworkProperties();
        }
        this.innerProperties().withSubnets(subnets);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the virtual network.
     *
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the vmSwitchName property: name of the network switch to be used for VMs.
     *
     * @return the vmSwitchName value.
     */
    public String vmSwitchName() {
        return this.innerProperties() == null ? null : this.innerProperties().vmSwitchName();
    }

    /**
     * Set the vmSwitchName property: name of the network switch to be used for VMs.
     *
     * @param vmSwitchName the vmSwitchName value to set.
     * @return the VirtualNetworksInner object itself.
     */
    public VirtualNetworksInner withVmSwitchName(String vmSwitchName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualNetworkProperties();
        }
        this.innerProperties().withVmSwitchName(vmSwitchName);
        return this;
    }

    /**
     * Get the status property: The observed state of virtual networks.
     *
     * @return the status value.
     */
    public VirtualNetworkStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (extendedLocation() != null) {
            extendedLocation().validate();
        }
    }
}
