// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The observed state of storage containers.
 */
@Fluent
public final class StorageContainerStatus implements JsonSerializable<StorageContainerStatus> {
    /*
     * StorageContainer provisioning error code
     */
    private String errorCode;

    /*
     * Descriptive error message
     */
    private String errorMessage;

    /*
     * Amount of space available on the disk in MB
     */
    private Long availableSizeMB;

    /*
     * Total size of the disk in MB
     */
    private Long containerSizeMB;

    /*
     * The provisioningStatus property.
     */
    private StorageContainerStatusProvisioningStatus provisioningStatus;

    /**
     * Creates an instance of StorageContainerStatus class.
     */
    public StorageContainerStatus() {
    }

    /**
     * Get the errorCode property: StorageContainer provisioning error code.
     * 
     * @return the errorCode value.
     */
    public String errorCode() {
        return this.errorCode;
    }

    /**
     * Set the errorCode property: StorageContainer provisioning error code.
     * 
     * @param errorCode the errorCode value to set.
     * @return the StorageContainerStatus object itself.
     */
    public StorageContainerStatus withErrorCode(String errorCode) {
        this.errorCode = errorCode;
        return this;
    }

    /**
     * Get the errorMessage property: Descriptive error message.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Set the errorMessage property: Descriptive error message.
     * 
     * @param errorMessage the errorMessage value to set.
     * @return the StorageContainerStatus object itself.
     */
    public StorageContainerStatus withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Get the availableSizeMB property: Amount of space available on the disk in MB.
     * 
     * @return the availableSizeMB value.
     */
    public Long availableSizeMB() {
        return this.availableSizeMB;
    }

    /**
     * Set the availableSizeMB property: Amount of space available on the disk in MB.
     * 
     * @param availableSizeMB the availableSizeMB value to set.
     * @return the StorageContainerStatus object itself.
     */
    public StorageContainerStatus withAvailableSizeMB(Long availableSizeMB) {
        this.availableSizeMB = availableSizeMB;
        return this;
    }

    /**
     * Get the containerSizeMB property: Total size of the disk in MB.
     * 
     * @return the containerSizeMB value.
     */
    public Long containerSizeMB() {
        return this.containerSizeMB;
    }

    /**
     * Set the containerSizeMB property: Total size of the disk in MB.
     * 
     * @param containerSizeMB the containerSizeMB value to set.
     * @return the StorageContainerStatus object itself.
     */
    public StorageContainerStatus withContainerSizeMB(Long containerSizeMB) {
        this.containerSizeMB = containerSizeMB;
        return this;
    }

    /**
     * Get the provisioningStatus property: The provisioningStatus property.
     * 
     * @return the provisioningStatus value.
     */
    public StorageContainerStatusProvisioningStatus provisioningStatus() {
        return this.provisioningStatus;
    }

    /**
     * Set the provisioningStatus property: The provisioningStatus property.
     * 
     * @param provisioningStatus the provisioningStatus value to set.
     * @return the StorageContainerStatus object itself.
     */
    public StorageContainerStatus withProvisioningStatus(StorageContainerStatusProvisioningStatus provisioningStatus) {
        this.provisioningStatus = provisioningStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (provisioningStatus() != null) {
            provisioningStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("errorCode", this.errorCode);
        jsonWriter.writeStringField("errorMessage", this.errorMessage);
        jsonWriter.writeNumberField("availableSizeMB", this.availableSizeMB);
        jsonWriter.writeNumberField("containerSizeMB", this.containerSizeMB);
        jsonWriter.writeJsonField("provisioningStatus", this.provisioningStatus);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageContainerStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageContainerStatus if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageContainerStatus.
     */
    public static StorageContainerStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageContainerStatus deserializedStorageContainerStatus = new StorageContainerStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errorCode".equals(fieldName)) {
                    deserializedStorageContainerStatus.errorCode = reader.getString();
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedStorageContainerStatus.errorMessage = reader.getString();
                } else if ("availableSizeMB".equals(fieldName)) {
                    deserializedStorageContainerStatus.availableSizeMB = reader.getNullable(JsonReader::getLong);
                } else if ("containerSizeMB".equals(fieldName)) {
                    deserializedStorageContainerStatus.containerSizeMB = reader.getNullable(JsonReader::getLong);
                } else if ("provisioningStatus".equals(fieldName)) {
                    deserializedStorageContainerStatus.provisioningStatus
                        = StorageContainerStatusProvisioningStatus.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageContainerStatus;
        });
    }
}
