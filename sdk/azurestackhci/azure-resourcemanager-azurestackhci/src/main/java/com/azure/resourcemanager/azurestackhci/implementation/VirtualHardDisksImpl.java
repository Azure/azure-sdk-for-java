// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurestackhci.fluent.models.VirtualHardDisksInner;
import com.azure.resourcemanager.azurestackhci.models.DiskFileFormat;
import com.azure.resourcemanager.azurestackhci.models.ExtendedLocation;
import com.azure.resourcemanager.azurestackhci.models.HyperVGeneration;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningStateEnum;
import com.azure.resourcemanager.azurestackhci.models.VirtualHardDiskStatus;
import com.azure.resourcemanager.azurestackhci.models.VirtualHardDisks;
import com.azure.resourcemanager.azurestackhci.models.VirtualHardDisksUpdateRequest;
import java.util.Collections;
import java.util.Map;

public final class VirtualHardDisksImpl
    implements VirtualHardDisks, VirtualHardDisks.Definition, VirtualHardDisks.Update {
    private VirtualHardDisksInner innerObject;

    private final com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ExtendedLocation extendedLocation() {
        return this.innerModel().extendedLocation();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Integer blockSizeBytes() {
        return this.innerModel().blockSizeBytes();
    }

    public Long diskSizeGB() {
        return this.innerModel().diskSizeGB();
    }

    public Boolean dynamic() {
        return this.innerModel().dynamic();
    }

    public Integer logicalSectorBytes() {
        return this.innerModel().logicalSectorBytes();
    }

    public Integer physicalSectorBytes() {
        return this.innerModel().physicalSectorBytes();
    }

    public HyperVGeneration hyperVGeneration() {
        return this.innerModel().hyperVGeneration();
    }

    public DiskFileFormat diskFileFormat() {
        return this.innerModel().diskFileFormat();
    }

    public ProvisioningStateEnum provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String containerId() {
        return this.innerModel().containerId();
    }

    public VirtualHardDiskStatus status() {
        return this.innerModel().status();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public VirtualHardDisksInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azurestackhci.AzureStackHciManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String virtualHardDiskName;

    private VirtualHardDisksUpdateRequest updateVirtualHardDisks;

    public VirtualHardDisksImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public VirtualHardDisks create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualHardDisksOperations()
                .createOrUpdate(resourceGroupName, virtualHardDiskName, this.innerModel(), Context.NONE);
        return this;
    }

    public VirtualHardDisks create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualHardDisksOperations()
                .createOrUpdate(resourceGroupName, virtualHardDiskName, this.innerModel(), context);
        return this;
    }

    VirtualHardDisksImpl(String name, com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = new VirtualHardDisksInner();
        this.serviceManager = serviceManager;
        this.virtualHardDiskName = name;
    }

    public VirtualHardDisksImpl update() {
        this.updateVirtualHardDisks = new VirtualHardDisksUpdateRequest();
        return this;
    }

    public VirtualHardDisks apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualHardDisksOperations()
                .update(resourceGroupName, virtualHardDiskName, updateVirtualHardDisks, Context.NONE);
        return this;
    }

    public VirtualHardDisks apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualHardDisksOperations()
                .update(resourceGroupName, virtualHardDiskName, updateVirtualHardDisks, context);
        return this;
    }

    VirtualHardDisksImpl(
        VirtualHardDisksInner innerObject,
        com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.virtualHardDiskName = Utils.getValueFromIdByName(innerObject.id(), "virtualHardDisks");
    }

    public VirtualHardDisks refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualHardDisksOperations()
                .getByResourceGroupWithResponse(resourceGroupName, virtualHardDiskName, Context.NONE)
                .getValue();
        return this;
    }

    public VirtualHardDisks refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualHardDisksOperations()
                .getByResourceGroupWithResponse(resourceGroupName, virtualHardDiskName, context)
                .getValue();
        return this;
    }

    public VirtualHardDisksImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public VirtualHardDisksImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public VirtualHardDisksImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateVirtualHardDisks.withTags(tags);
            return this;
        }
    }

    public VirtualHardDisksImpl withExtendedLocation(ExtendedLocation extendedLocation) {
        this.innerModel().withExtendedLocation(extendedLocation);
        return this;
    }

    public VirtualHardDisksImpl withBlockSizeBytes(Integer blockSizeBytes) {
        this.innerModel().withBlockSizeBytes(blockSizeBytes);
        return this;
    }

    public VirtualHardDisksImpl withDiskSizeGB(Long diskSizeGB) {
        this.innerModel().withDiskSizeGB(diskSizeGB);
        return this;
    }

    public VirtualHardDisksImpl withDynamic(Boolean dynamic) {
        this.innerModel().withDynamic(dynamic);
        return this;
    }

    public VirtualHardDisksImpl withLogicalSectorBytes(Integer logicalSectorBytes) {
        this.innerModel().withLogicalSectorBytes(logicalSectorBytes);
        return this;
    }

    public VirtualHardDisksImpl withPhysicalSectorBytes(Integer physicalSectorBytes) {
        this.innerModel().withPhysicalSectorBytes(physicalSectorBytes);
        return this;
    }

    public VirtualHardDisksImpl withHyperVGeneration(HyperVGeneration hyperVGeneration) {
        this.innerModel().withHyperVGeneration(hyperVGeneration);
        return this;
    }

    public VirtualHardDisksImpl withDiskFileFormat(DiskFileFormat diskFileFormat) {
        this.innerModel().withDiskFileFormat(diskFileFormat);
        return this;
    }

    public VirtualHardDisksImpl withContainerId(String containerId) {
        this.innerModel().withContainerId(containerId);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
