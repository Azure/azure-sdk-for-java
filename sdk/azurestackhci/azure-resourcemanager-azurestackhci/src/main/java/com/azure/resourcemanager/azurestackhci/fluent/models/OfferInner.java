// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azurestackhci.models.SkuMappings;
import java.io.IOException;
import java.util.List;

/**
 * Offer details.
 */
@Fluent
public final class OfferInner extends ProxyResource {
    /*
     * Offer properties.
     */
    private OfferProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * The type of the resource.
     */
    private String type;

    /**
     * Creates an instance of OfferInner class.
     */
    public OfferInner() {
    }

    /**
     * Get the innerProperties property: Offer properties.
     * 
     * @return the innerProperties value.
     */
    private OfferProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the provisioningState property: Provisioning State.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the publisherId property: Identifier of the Publisher for the offer.
     * 
     * @return the publisherId value.
     */
    public String publisherId() {
        return this.innerProperties() == null ? null : this.innerProperties().publisherId();
    }

    /**
     * Set the publisherId property: Identifier of the Publisher for the offer.
     * 
     * @param publisherId the publisherId value to set.
     * @return the OfferInner object itself.
     */
    public OfferInner withPublisherId(String publisherId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OfferProperties();
        }
        this.innerProperties().withPublisherId(publisherId);
        return this;
    }

    /**
     * Get the content property: JSON serialized catalog content of the offer.
     * 
     * @return the content value.
     */
    public String content() {
        return this.innerProperties() == null ? null : this.innerProperties().content();
    }

    /**
     * Set the content property: JSON serialized catalog content of the offer.
     * 
     * @param content the content value to set.
     * @return the OfferInner object itself.
     */
    public OfferInner withContent(String content) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OfferProperties();
        }
        this.innerProperties().withContent(content);
        return this;
    }

    /**
     * Get the contentVersion property: The API version of the catalog service used to serve the catalog content.
     * 
     * @return the contentVersion value.
     */
    public String contentVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().contentVersion();
    }

    /**
     * Set the contentVersion property: The API version of the catalog service used to serve the catalog content.
     * 
     * @param contentVersion the contentVersion value to set.
     * @return the OfferInner object itself.
     */
    public OfferInner withContentVersion(String contentVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OfferProperties();
        }
        this.innerProperties().withContentVersion(contentVersion);
        return this;
    }

    /**
     * Get the skuMappings property: Array of SKU mappings.
     * 
     * @return the skuMappings value.
     */
    public List<SkuMappings> skuMappings() {
        return this.innerProperties() == null ? null : this.innerProperties().skuMappings();
    }

    /**
     * Set the skuMappings property: Array of SKU mappings.
     * 
     * @param skuMappings the skuMappings value to set.
     * @return the OfferInner object itself.
     */
    public OfferInner withSkuMappings(List<SkuMappings> skuMappings) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OfferProperties();
        }
        this.innerProperties().withSkuMappings(skuMappings);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OfferInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OfferInner if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OfferInner.
     */
    public static OfferInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OfferInner deserializedOfferInner = new OfferInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedOfferInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedOfferInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedOfferInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedOfferInner.innerProperties = OfferProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedOfferInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOfferInner;
        });
    }
}
