// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ECE action plan deployment status for AzureStackHCI Cluster.
 */
@Immutable
public final class EceActionStatus implements JsonSerializable<EceActionStatus> {
    /*
     * Status of ECE action AzureStackHCI Cluster Deployment.
     */
    private String status;

    /*
     * List of steps of AzureStackHCI Cluster Deployment.
     */
    private List<DeploymentStep> steps;

    /**
     * Creates an instance of EceActionStatus class.
     */
    public EceActionStatus() {
    }

    /**
     * Get the status property: Status of ECE action AzureStackHCI Cluster Deployment.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the steps property: List of steps of AzureStackHCI Cluster Deployment.
     * 
     * @return the steps value.
     */
    public List<DeploymentStep> steps() {
        return this.steps;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (steps() != null) {
            steps().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EceActionStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EceActionStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EceActionStatus.
     */
    public static EceActionStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EceActionStatus deserializedEceActionStatus = new EceActionStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedEceActionStatus.status = reader.getString();
                } else if ("steps".equals(fieldName)) {
                    List<DeploymentStep> steps = reader.readArray(reader1 -> DeploymentStep.fromJson(reader1));
                    deserializedEceActionStatus.steps = steps;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEceActionStatus;
        });
    }
}
