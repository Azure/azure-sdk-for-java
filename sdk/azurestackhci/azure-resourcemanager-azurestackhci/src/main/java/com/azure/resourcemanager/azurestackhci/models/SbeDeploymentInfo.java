// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Solution builder extension (SBE) package and manifest information for the solution builder extension staged for
 * AzureStackHCI cluster deployment.
 */
@Fluent
public final class SbeDeploymentInfo implements JsonSerializable<SbeDeploymentInfo> {
    /*
     * SBE package version.
     */
    private String version;

    /*
     * SBE family name.
     */
    private String family;

    /*
     * SBE manifest publisher.
     */
    private String publisher;

    /*
     * SBE Manifest Source.
     */
    private String sbeManifestSource;

    /*
     * SBE Manifest Creation Date.
     */
    private OffsetDateTime sbeManifestCreationDate;

    /**
     * Creates an instance of SbeDeploymentInfo class.
     */
    public SbeDeploymentInfo() {
    }

    /**
     * Get the version property: SBE package version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: SBE package version.
     * 
     * @param version the version value to set.
     * @return the SbeDeploymentInfo object itself.
     */
    public SbeDeploymentInfo withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the family property: SBE family name.
     * 
     * @return the family value.
     */
    public String family() {
        return this.family;
    }

    /**
     * Set the family property: SBE family name.
     * 
     * @param family the family value to set.
     * @return the SbeDeploymentInfo object itself.
     */
    public SbeDeploymentInfo withFamily(String family) {
        this.family = family;
        return this;
    }

    /**
     * Get the publisher property: SBE manifest publisher.
     * 
     * @return the publisher value.
     */
    public String publisher() {
        return this.publisher;
    }

    /**
     * Set the publisher property: SBE manifest publisher.
     * 
     * @param publisher the publisher value to set.
     * @return the SbeDeploymentInfo object itself.
     */
    public SbeDeploymentInfo withPublisher(String publisher) {
        this.publisher = publisher;
        return this;
    }

    /**
     * Get the sbeManifestSource property: SBE Manifest Source.
     * 
     * @return the sbeManifestSource value.
     */
    public String sbeManifestSource() {
        return this.sbeManifestSource;
    }

    /**
     * Set the sbeManifestSource property: SBE Manifest Source.
     * 
     * @param sbeManifestSource the sbeManifestSource value to set.
     * @return the SbeDeploymentInfo object itself.
     */
    public SbeDeploymentInfo withSbeManifestSource(String sbeManifestSource) {
        this.sbeManifestSource = sbeManifestSource;
        return this;
    }

    /**
     * Get the sbeManifestCreationDate property: SBE Manifest Creation Date.
     * 
     * @return the sbeManifestCreationDate value.
     */
    public OffsetDateTime sbeManifestCreationDate() {
        return this.sbeManifestCreationDate;
    }

    /**
     * Set the sbeManifestCreationDate property: SBE Manifest Creation Date.
     * 
     * @param sbeManifestCreationDate the sbeManifestCreationDate value to set.
     * @return the SbeDeploymentInfo object itself.
     */
    public SbeDeploymentInfo withSbeManifestCreationDate(OffsetDateTime sbeManifestCreationDate) {
        this.sbeManifestCreationDate = sbeManifestCreationDate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeStringField("family", this.family);
        jsonWriter.writeStringField("publisher", this.publisher);
        jsonWriter.writeStringField("sbeManifestSource", this.sbeManifestSource);
        jsonWriter.writeStringField("sbeManifestCreationDate",
            this.sbeManifestCreationDate == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.sbeManifestCreationDate));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SbeDeploymentInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SbeDeploymentInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SbeDeploymentInfo.
     */
    public static SbeDeploymentInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SbeDeploymentInfo deserializedSbeDeploymentInfo = new SbeDeploymentInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedSbeDeploymentInfo.version = reader.getString();
                } else if ("family".equals(fieldName)) {
                    deserializedSbeDeploymentInfo.family = reader.getString();
                } else if ("publisher".equals(fieldName)) {
                    deserializedSbeDeploymentInfo.publisher = reader.getString();
                } else if ("sbeManifestSource".equals(fieldName)) {
                    deserializedSbeDeploymentInfo.sbeManifestSource = reader.getString();
                } else if ("sbeManifestCreationDate".equals(fieldName)) {
                    deserializedSbeDeploymentInfo.sbeManifestCreationDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSbeDeploymentInfo;
        });
    }
}
