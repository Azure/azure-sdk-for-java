// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azurestackhci.models.ExtendedLocation;
import com.azure.resourcemanager.azurestackhci.models.GuestAgentInstallStatus;
import com.azure.resourcemanager.azurestackhci.models.HttpProxyConfiguration;
import com.azure.resourcemanager.azurestackhci.models.Identity;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningStateEnum;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachineInstancePropertiesHardwareProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachineInstancePropertiesNetworkProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachineInstancePropertiesOsProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachineInstancePropertiesSecurityProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachineInstancePropertiesStorageProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachineInstanceStatus;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachineInstanceView;
import java.io.IOException;

/**
 * The virtual machine instance resource definition.
 */
@Fluent
public final class VirtualMachineInstanceInner extends ProxyResource {
    /*
     * Properties under the virtual machine instance resource
     */
    private VirtualMachineInstanceProperties innerProperties;

    /*
     * The extendedLocation of the resource.
     */
    private ExtendedLocation extendedLocation;

    /*
     * Identity for the resource.
     */
    private Identity identity;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of VirtualMachineInstanceInner class.
     */
    public VirtualMachineInstanceInner() {
    }

    /**
     * Get the innerProperties property: Properties under the virtual machine instance resource.
     * 
     * @return the innerProperties value.
     */
    private VirtualMachineInstanceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the extendedLocation property: The extendedLocation of the resource.
     * 
     * @return the extendedLocation value.
     */
    public ExtendedLocation extendedLocation() {
        return this.extendedLocation;
    }

    /**
     * Set the extendedLocation property: The extendedLocation of the resource.
     * 
     * @param extendedLocation the extendedLocation value to set.
     * @return the VirtualMachineInstanceInner object itself.
     */
    public VirtualMachineInstanceInner withExtendedLocation(ExtendedLocation extendedLocation) {
        this.extendedLocation = extendedLocation;
        return this;
    }

    /**
     * Get the identity property: Identity for the resource.
     * 
     * @return the identity value.
     */
    public Identity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Identity for the resource.
     * 
     * @param identity the identity value to set.
     * @return the VirtualMachineInstanceInner object itself.
     */
    public VirtualMachineInstanceInner withIdentity(Identity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the hardwareProfile property: HardwareProfile - Specifies the hardware settings for the virtual machine
     * instance.
     * 
     * @return the hardwareProfile value.
     */
    public VirtualMachineInstancePropertiesHardwareProfile hardwareProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().hardwareProfile();
    }

    /**
     * Set the hardwareProfile property: HardwareProfile - Specifies the hardware settings for the virtual machine
     * instance.
     * 
     * @param hardwareProfile the hardwareProfile value to set.
     * @return the VirtualMachineInstanceInner object itself.
     */
    public VirtualMachineInstanceInner
        withHardwareProfile(VirtualMachineInstancePropertiesHardwareProfile hardwareProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineInstanceProperties();
        }
        this.innerProperties().withHardwareProfile(hardwareProfile);
        return this;
    }

    /**
     * Get the networkProfile property: NetworkProfile - describes the network configuration the virtual machine
     * instance.
     * 
     * @return the networkProfile value.
     */
    public VirtualMachineInstancePropertiesNetworkProfile networkProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().networkProfile();
    }

    /**
     * Set the networkProfile property: NetworkProfile - describes the network configuration the virtual machine
     * instance.
     * 
     * @param networkProfile the networkProfile value to set.
     * @return the VirtualMachineInstanceInner object itself.
     */
    public VirtualMachineInstanceInner
        withNetworkProfile(VirtualMachineInstancePropertiesNetworkProfile networkProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineInstanceProperties();
        }
        this.innerProperties().withNetworkProfile(networkProfile);
        return this;
    }

    /**
     * Get the osProfile property: OsProfile - describes the configuration of the operating system and sets login data.
     * 
     * @return the osProfile value.
     */
    public VirtualMachineInstancePropertiesOsProfile osProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().osProfile();
    }

    /**
     * Set the osProfile property: OsProfile - describes the configuration of the operating system and sets login data.
     * 
     * @param osProfile the osProfile value to set.
     * @return the VirtualMachineInstanceInner object itself.
     */
    public VirtualMachineInstanceInner withOsProfile(VirtualMachineInstancePropertiesOsProfile osProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineInstanceProperties();
        }
        this.innerProperties().withOsProfile(osProfile);
        return this;
    }

    /**
     * Get the securityProfile property: SecurityProfile - Specifies the security settings for the virtual machine
     * instance.
     * 
     * @return the securityProfile value.
     */
    public VirtualMachineInstancePropertiesSecurityProfile securityProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().securityProfile();
    }

    /**
     * Set the securityProfile property: SecurityProfile - Specifies the security settings for the virtual machine
     * instance.
     * 
     * @param securityProfile the securityProfile value to set.
     * @return the VirtualMachineInstanceInner object itself.
     */
    public VirtualMachineInstanceInner
        withSecurityProfile(VirtualMachineInstancePropertiesSecurityProfile securityProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineInstanceProperties();
        }
        this.innerProperties().withSecurityProfile(securityProfile);
        return this;
    }

    /**
     * Get the storageProfile property: StorageProfile - contains information about the disks and storage information
     * for the virtual machine instance.
     * 
     * @return the storageProfile value.
     */
    public VirtualMachineInstancePropertiesStorageProfile storageProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().storageProfile();
    }

    /**
     * Set the storageProfile property: StorageProfile - contains information about the disks and storage information
     * for the virtual machine instance.
     * 
     * @param storageProfile the storageProfile value to set.
     * @return the VirtualMachineInstanceInner object itself.
     */
    public VirtualMachineInstanceInner
        withStorageProfile(VirtualMachineInstancePropertiesStorageProfile storageProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineInstanceProperties();
        }
        this.innerProperties().withStorageProfile(storageProfile);
        return this;
    }

    /**
     * Get the httpProxyConfig property: HTTP Proxy configuration for the VM.
     * 
     * @return the httpProxyConfig value.
     */
    public HttpProxyConfiguration httpProxyConfig() {
        return this.innerProperties() == null ? null : this.innerProperties().httpProxyConfig();
    }

    /**
     * Set the httpProxyConfig property: HTTP Proxy configuration for the VM.
     * 
     * @param httpProxyConfig the httpProxyConfig value to set.
     * @return the VirtualMachineInstanceInner object itself.
     */
    public VirtualMachineInstanceInner withHttpProxyConfig(HttpProxyConfiguration httpProxyConfig) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineInstanceProperties();
        }
        this.innerProperties().withHttpProxyConfig(httpProxyConfig);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the virtual machine instance.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the instanceView property: The virtual machine instance view.
     * 
     * @return the instanceView value.
     */
    public VirtualMachineInstanceView instanceView() {
        return this.innerProperties() == null ? null : this.innerProperties().instanceView();
    }

    /**
     * Get the status property: The observed state of virtual machine instances.
     * 
     * @return the status value.
     */
    public VirtualMachineInstanceStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the guestAgentInstallStatus property: Guest agent install status.
     * 
     * @return the guestAgentInstallStatus value.
     */
    public GuestAgentInstallStatus guestAgentInstallStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().guestAgentInstallStatus();
    }

    /**
     * Set the guestAgentInstallStatus property: Guest agent install status.
     * 
     * @param guestAgentInstallStatus the guestAgentInstallStatus value to set.
     * @return the VirtualMachineInstanceInner object itself.
     */
    public VirtualMachineInstanceInner withGuestAgentInstallStatus(GuestAgentInstallStatus guestAgentInstallStatus) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineInstanceProperties();
        }
        this.innerProperties().withGuestAgentInstallStatus(guestAgentInstallStatus);
        return this;
    }

    /**
     * Get the vmId property: Unique identifier for the vm resource.
     * 
     * @return the vmId value.
     */
    public String vmId() {
        return this.innerProperties() == null ? null : this.innerProperties().vmId();
    }

    /**
     * Get the resourceUid property: Unique identifier defined by ARC to identify the guest of the VM.
     * 
     * @return the resourceUid value.
     */
    public String resourceUid() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceUid();
    }

    /**
     * Set the resourceUid property: Unique identifier defined by ARC to identify the guest of the VM.
     * 
     * @param resourceUid the resourceUid value to set.
     * @return the VirtualMachineInstanceInner object itself.
     */
    public VirtualMachineInstanceInner withResourceUid(String resourceUid) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineInstanceProperties();
        }
        this.innerProperties().withResourceUid(resourceUid);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (extendedLocation() != null) {
            extendedLocation().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("extendedLocation", this.extendedLocation);
        jsonWriter.writeJsonField("identity", this.identity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineInstanceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineInstanceInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VirtualMachineInstanceInner.
     */
    public static VirtualMachineInstanceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineInstanceInner deserializedVirtualMachineInstanceInner = new VirtualMachineInstanceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedVirtualMachineInstanceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedVirtualMachineInstanceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedVirtualMachineInstanceInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedVirtualMachineInstanceInner.innerProperties
                        = VirtualMachineInstanceProperties.fromJson(reader);
                } else if ("extendedLocation".equals(fieldName)) {
                    deserializedVirtualMachineInstanceInner.extendedLocation = ExtendedLocation.fromJson(reader);
                } else if ("identity".equals(fieldName)) {
                    deserializedVirtualMachineInstanceInner.identity = Identity.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedVirtualMachineInstanceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineInstanceInner;
        });
    }
}
