// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The IpPool model.
 */
@Fluent
public final class IpPool implements JsonSerializable<IpPool> {
    /*
     * Name of the IP-Pool
     */
    private String name;

    /*
     * Type of the IP Pool [vm, vippool]
     */
    private IpPoolTypeEnum ipPoolType;

    /*
     * Start of the IP address pool
     */
    private String start;

    /*
     * End of the IP address pool
     */
    private String end;

    /*
     * The info property.
     */
    private IpPoolInfo info;

    /**
     * Creates an instance of IpPool class.
     */
    public IpPool() {
    }

    /**
     * Get the name property: Name of the IP-Pool.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the IP-Pool.
     * 
     * @param name the name value to set.
     * @return the IpPool object itself.
     */
    public IpPool withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the ipPoolType property: Type of the IP Pool [vm, vippool].
     * 
     * @return the ipPoolType value.
     */
    public IpPoolTypeEnum ipPoolType() {
        return this.ipPoolType;
    }

    /**
     * Set the ipPoolType property: Type of the IP Pool [vm, vippool].
     * 
     * @param ipPoolType the ipPoolType value to set.
     * @return the IpPool object itself.
     */
    public IpPool withIpPoolType(IpPoolTypeEnum ipPoolType) {
        this.ipPoolType = ipPoolType;
        return this;
    }

    /**
     * Get the start property: Start of the IP address pool.
     * 
     * @return the start value.
     */
    public String start() {
        return this.start;
    }

    /**
     * Set the start property: Start of the IP address pool.
     * 
     * @param start the start value to set.
     * @return the IpPool object itself.
     */
    public IpPool withStart(String start) {
        this.start = start;
        return this;
    }

    /**
     * Get the end property: End of the IP address pool.
     * 
     * @return the end value.
     */
    public String end() {
        return this.end;
    }

    /**
     * Set the end property: End of the IP address pool.
     * 
     * @param end the end value to set.
     * @return the IpPool object itself.
     */
    public IpPool withEnd(String end) {
        this.end = end;
        return this;
    }

    /**
     * Get the info property: The info property.
     * 
     * @return the info value.
     */
    public IpPoolInfo info() {
        return this.info;
    }

    /**
     * Set the info property: The info property.
     * 
     * @param info the info value to set.
     * @return the IpPool object itself.
     */
    public IpPool withInfo(IpPoolInfo info) {
        this.info = info;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (info() != null) {
            info().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("ipPoolType", this.ipPoolType == null ? null : this.ipPoolType.toString());
        jsonWriter.writeStringField("start", this.start);
        jsonWriter.writeStringField("end", this.end);
        jsonWriter.writeJsonField("info", this.info);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IpPool from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IpPool if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the IpPool.
     */
    public static IpPool fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IpPool deserializedIpPool = new IpPool();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedIpPool.name = reader.getString();
                } else if ("ipPoolType".equals(fieldName)) {
                    deserializedIpPool.ipPoolType = IpPoolTypeEnum.fromString(reader.getString());
                } else if ("start".equals(fieldName)) {
                    deserializedIpPool.start = reader.getString();
                } else if ("end".equals(fieldName)) {
                    deserializedIpPool.end = reader.getString();
                } else if ("info".equals(fieldName)) {
                    deserializedIpPool.info = IpPoolInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIpPool;
        });
    }
}
