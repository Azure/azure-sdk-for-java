// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.azurestackhci.models.VirtualNetworkPropertiesSubnetsPropertiesItemsItem;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** RouteTablePropertiesFormat route Table resource. */
@Fluent
public final class Components3Iu67JSchemasVirtualnetworkpropertiesPropertiesSubnetsItemsPropertiesRoutetableProperties {
    /*
     * Routes - Collection of routes contained within a route table.
     */
    @JsonProperty(value = "routes")
    private List<VirtualNetworkPropertiesSubnetsPropertiesItemsItem> routes;

    /**
     * Creates an instance of
     * Components3Iu67JSchemasVirtualnetworkpropertiesPropertiesSubnetsItemsPropertiesRoutetableProperties class.
     */
    public Components3Iu67JSchemasVirtualnetworkpropertiesPropertiesSubnetsItemsPropertiesRoutetableProperties() {
    }

    /**
     * Get the routes property: Routes - Collection of routes contained within a route table.
     *
     * @return the routes value.
     */
    public List<VirtualNetworkPropertiesSubnetsPropertiesItemsItem> routes() {
        return this.routes;
    }

    /**
     * Set the routes property: Routes - Collection of routes contained within a route table.
     *
     * @param routes the routes value to set.
     * @return the Components3Iu67JSchemasVirtualnetworkpropertiesPropertiesSubnetsItemsPropertiesRoutetableProperties
     *     object itself.
     */
    public Components3Iu67JSchemasVirtualnetworkpropertiesPropertiesSubnetsItemsPropertiesRoutetableProperties
        withRoutes(List<VirtualNetworkPropertiesSubnetsPropertiesItemsItem> routes) {
        this.routes = routes;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (routes() != null) {
            routes().forEach(e -> e.validate());
        }
    }
}
