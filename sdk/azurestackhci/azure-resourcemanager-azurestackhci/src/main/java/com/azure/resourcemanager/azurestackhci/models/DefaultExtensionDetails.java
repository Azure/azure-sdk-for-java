// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Properties for a particular default extension category.
 */
@Immutable
public final class DefaultExtensionDetails implements JsonSerializable<DefaultExtensionDetails> {
    /*
     * Default extension category
     */
    private String category;

    /*
     * Consent time for extension category
     */
    private OffsetDateTime consentTime;

    /**
     * Creates an instance of DefaultExtensionDetails class.
     */
    public DefaultExtensionDetails() {
    }

    /**
     * Get the category property: Default extension category.
     * 
     * @return the category value.
     */
    public String category() {
        return this.category;
    }

    /**
     * Get the consentTime property: Consent time for extension category.
     * 
     * @return the consentTime value.
     */
    public OffsetDateTime consentTime() {
        return this.consentTime;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DefaultExtensionDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DefaultExtensionDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DefaultExtensionDetails.
     */
    public static DefaultExtensionDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DefaultExtensionDetails deserializedDefaultExtensionDetails = new DefaultExtensionDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("category".equals(fieldName)) {
                    deserializedDefaultExtensionDetails.category = reader.getString();
                } else if ("consentTime".equals(fieldName)) {
                    deserializedDefaultExtensionDetails.consentTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDefaultExtensionDetails;
        });
    }
}
