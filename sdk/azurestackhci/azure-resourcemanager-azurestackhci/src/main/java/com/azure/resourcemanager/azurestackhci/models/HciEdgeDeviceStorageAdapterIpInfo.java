// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The StorageAdapter physical nodes of a cluster.
 */
@Immutable
public final class HciEdgeDeviceStorageAdapterIpInfo implements JsonSerializable<HciEdgeDeviceStorageAdapterIpInfo> {
    /*
     * storage adapter physical node name.
     */
    private String physicalNode;

    /*
     * The IPv4 address assigned to each storage adapter physical node on your Azure Stack HCI cluster.
     */
    private String ipv4Address;

    /*
     * The SubnetMask address assigned to each storage adapter physical node on your Azure Stack HCI cluster.
     */
    private String subnetMask;

    /**
     * Creates an instance of HciEdgeDeviceStorageAdapterIpInfo class.
     */
    public HciEdgeDeviceStorageAdapterIpInfo() {
    }

    /**
     * Get the physicalNode property: storage adapter physical node name.
     * 
     * @return the physicalNode value.
     */
    public String physicalNode() {
        return this.physicalNode;
    }

    /**
     * Get the ipv4Address property: The IPv4 address assigned to each storage adapter physical node on your Azure Stack
     * HCI cluster.
     * 
     * @return the ipv4Address value.
     */
    public String ipv4Address() {
        return this.ipv4Address;
    }

    /**
     * Get the subnetMask property: The SubnetMask address assigned to each storage adapter physical node on your Azure
     * Stack HCI cluster.
     * 
     * @return the subnetMask value.
     */
    public String subnetMask() {
        return this.subnetMask;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HciEdgeDeviceStorageAdapterIpInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HciEdgeDeviceStorageAdapterIpInfo if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HciEdgeDeviceStorageAdapterIpInfo.
     */
    public static HciEdgeDeviceStorageAdapterIpInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HciEdgeDeviceStorageAdapterIpInfo deserializedHciEdgeDeviceStorageAdapterIpInfo
                = new HciEdgeDeviceStorageAdapterIpInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("physicalNode".equals(fieldName)) {
                    deserializedHciEdgeDeviceStorageAdapterIpInfo.physicalNode = reader.getString();
                } else if ("ipv4Address".equals(fieldName)) {
                    deserializedHciEdgeDeviceStorageAdapterIpInfo.ipv4Address = reader.getString();
                } else if ("subnetMask".equals(fieldName)) {
                    deserializedHciEdgeDeviceStorageAdapterIpInfo.subnetMask = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHciEdgeDeviceStorageAdapterIpInfo;
        });
    }
}
