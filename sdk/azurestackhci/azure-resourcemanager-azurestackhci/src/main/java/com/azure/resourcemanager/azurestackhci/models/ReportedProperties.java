// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Reported properties pushed from edge device.
 */
@Immutable
public class ReportedProperties implements JsonSerializable<ReportedProperties> {
    /*
     * edge device state.
     */
    private DeviceState deviceState;

    /*
     * Extensions details for edge device.
     */
    private ExtensionProfile extensionProfile;

    /**
     * Creates an instance of ReportedProperties class.
     */
    public ReportedProperties() {
    }

    /**
     * Get the deviceState property: edge device state.
     * 
     * @return the deviceState value.
     */
    public DeviceState deviceState() {
        return this.deviceState;
    }

    /**
     * Set the deviceState property: edge device state.
     * 
     * @param deviceState the deviceState value to set.
     * @return the ReportedProperties object itself.
     */
    ReportedProperties withDeviceState(DeviceState deviceState) {
        this.deviceState = deviceState;
        return this;
    }

    /**
     * Get the extensionProfile property: Extensions details for edge device.
     * 
     * @return the extensionProfile value.
     */
    public ExtensionProfile extensionProfile() {
        return this.extensionProfile;
    }

    /**
     * Set the extensionProfile property: Extensions details for edge device.
     * 
     * @param extensionProfile the extensionProfile value to set.
     * @return the ReportedProperties object itself.
     */
    ReportedProperties withExtensionProfile(ExtensionProfile extensionProfile) {
        this.extensionProfile = extensionProfile;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (extensionProfile() != null) {
            extensionProfile().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReportedProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReportedProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReportedProperties.
     */
    public static ReportedProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReportedProperties deserializedReportedProperties = new ReportedProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deviceState".equals(fieldName)) {
                    deserializedReportedProperties.deviceState = DeviceState.fromString(reader.getString());
                } else if ("extensionProfile".equals(fieldName)) {
                    deserializedReportedProperties.extensionProfile = ExtensionProfile.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReportedProperties;
        });
    }
}
