// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Remote Support Node Settings of the cluster.
 */
@Immutable
public final class RemoteSupportNodeSettings implements JsonSerializable<RemoteSupportNodeSettings> {
    /*
     * Arc ResourceId of the Node
     */
    private String arcResourceId;

    /*
     * Remote Support Access Connection State on the Node
     */
    private String state;

    /*
     * Remote Support Enablement Request Created TimeStamp on the Node
     */
    private OffsetDateTime createdAt;

    /*
     * Remote Support Enablement Request Updated TimeStamp on the Node
     */
    private OffsetDateTime updatedAt;

    /*
     * Remote Support Access Connection Status on the Node
     */
    private String connectionStatus;

    /*
     * Remote Support Access Connection Error Message on the Node
     */
    private String connectionErrorMessage;

    /*
     * Remote Support Transcript location on the node
     */
    private String transcriptLocation;

    /**
     * Creates an instance of RemoteSupportNodeSettings class.
     */
    public RemoteSupportNodeSettings() {
    }

    /**
     * Get the arcResourceId property: Arc ResourceId of the Node.
     * 
     * @return the arcResourceId value.
     */
    public String arcResourceId() {
        return this.arcResourceId;
    }

    /**
     * Get the state property: Remote Support Access Connection State on the Node.
     * 
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Get the createdAt property: Remote Support Enablement Request Created TimeStamp on the Node.
     * 
     * @return the createdAt value.
     */
    public OffsetDateTime createdAt() {
        return this.createdAt;
    }

    /**
     * Get the updatedAt property: Remote Support Enablement Request Updated TimeStamp on the Node.
     * 
     * @return the updatedAt value.
     */
    public OffsetDateTime updatedAt() {
        return this.updatedAt;
    }

    /**
     * Get the connectionStatus property: Remote Support Access Connection Status on the Node.
     * 
     * @return the connectionStatus value.
     */
    public String connectionStatus() {
        return this.connectionStatus;
    }

    /**
     * Get the connectionErrorMessage property: Remote Support Access Connection Error Message on the Node.
     * 
     * @return the connectionErrorMessage value.
     */
    public String connectionErrorMessage() {
        return this.connectionErrorMessage;
    }

    /**
     * Get the transcriptLocation property: Remote Support Transcript location on the node.
     * 
     * @return the transcriptLocation value.
     */
    public String transcriptLocation() {
        return this.transcriptLocation;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RemoteSupportNodeSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RemoteSupportNodeSettings if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RemoteSupportNodeSettings.
     */
    public static RemoteSupportNodeSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RemoteSupportNodeSettings deserializedRemoteSupportNodeSettings = new RemoteSupportNodeSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("arcResourceId".equals(fieldName)) {
                    deserializedRemoteSupportNodeSettings.arcResourceId = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedRemoteSupportNodeSettings.state = reader.getString();
                } else if ("createdAt".equals(fieldName)) {
                    deserializedRemoteSupportNodeSettings.createdAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedAt".equals(fieldName)) {
                    deserializedRemoteSupportNodeSettings.updatedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("connectionStatus".equals(fieldName)) {
                    deserializedRemoteSupportNodeSettings.connectionStatus = reader.getString();
                } else if ("connectionErrorMessage".equals(fieldName)) {
                    deserializedRemoteSupportNodeSettings.connectionErrorMessage = reader.getString();
                } else if ("transcriptLocation".equals(fieldName)) {
                    deserializedRemoteSupportNodeSettings.transcriptLocation = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRemoteSupportNodeSettings;
        });
    }
}
