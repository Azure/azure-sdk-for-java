// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azurestackhci.models.DiskFileFormat;
import com.azure.resourcemanager.azurestackhci.models.ExtendedLocation;
import com.azure.resourcemanager.azurestackhci.models.HyperVGeneration;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningStateEnum;
import com.azure.resourcemanager.azurestackhci.models.VirtualHardDiskStatus;
import java.io.IOException;
import java.util.Map;

/**
 * The virtual hard disk resource definition.
 */
@Fluent
public final class VirtualHardDisksInner extends Resource {
    /*
     * Properties under the virtual hard disk resource
     */
    private VirtualHardDiskProperties innerProperties;

    /*
     * The extendedLocation of the resource.
     */
    private ExtendedLocation extendedLocation;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of VirtualHardDisksInner class.
     */
    public VirtualHardDisksInner() {
    }

    /**
     * Get the innerProperties property: Properties under the virtual hard disk resource.
     * 
     * @return the innerProperties value.
     */
    private VirtualHardDiskProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the extendedLocation property: The extendedLocation of the resource.
     * 
     * @return the extendedLocation value.
     */
    public ExtendedLocation extendedLocation() {
        return this.extendedLocation;
    }

    /**
     * Set the extendedLocation property: The extendedLocation of the resource.
     * 
     * @param extendedLocation the extendedLocation value to set.
     * @return the VirtualHardDisksInner object itself.
     */
    public VirtualHardDisksInner withExtendedLocation(ExtendedLocation extendedLocation) {
        this.extendedLocation = extendedLocation;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VirtualHardDisksInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VirtualHardDisksInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the blockSizeBytes property: The blockSizeBytes property.
     * 
     * @return the blockSizeBytes value.
     */
    public Integer blockSizeBytes() {
        return this.innerProperties() == null ? null : this.innerProperties().blockSizeBytes();
    }

    /**
     * Set the blockSizeBytes property: The blockSizeBytes property.
     * 
     * @param blockSizeBytes the blockSizeBytes value to set.
     * @return the VirtualHardDisksInner object itself.
     */
    public VirtualHardDisksInner withBlockSizeBytes(Integer blockSizeBytes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualHardDiskProperties();
        }
        this.innerProperties().withBlockSizeBytes(blockSizeBytes);
        return this;
    }

    /**
     * Get the diskSizeGB property: Size of the disk in GB.
     * 
     * @return the diskSizeGB value.
     */
    public Long diskSizeGB() {
        return this.innerProperties() == null ? null : this.innerProperties().diskSizeGB();
    }

    /**
     * Set the diskSizeGB property: Size of the disk in GB.
     * 
     * @param diskSizeGB the diskSizeGB value to set.
     * @return the VirtualHardDisksInner object itself.
     */
    public VirtualHardDisksInner withDiskSizeGB(Long diskSizeGB) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualHardDiskProperties();
        }
        this.innerProperties().withDiskSizeGB(diskSizeGB);
        return this;
    }

    /**
     * Get the dynamic property: Boolean for enabling dynamic sizing on the virtual hard disk.
     * 
     * @return the dynamic value.
     */
    public Boolean dynamic() {
        return this.innerProperties() == null ? null : this.innerProperties().dynamic();
    }

    /**
     * Set the dynamic property: Boolean for enabling dynamic sizing on the virtual hard disk.
     * 
     * @param dynamic the dynamic value to set.
     * @return the VirtualHardDisksInner object itself.
     */
    public VirtualHardDisksInner withDynamic(Boolean dynamic) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualHardDiskProperties();
        }
        this.innerProperties().withDynamic(dynamic);
        return this;
    }

    /**
     * Get the logicalSectorBytes property: The logicalSectorBytes property.
     * 
     * @return the logicalSectorBytes value.
     */
    public Integer logicalSectorBytes() {
        return this.innerProperties() == null ? null : this.innerProperties().logicalSectorBytes();
    }

    /**
     * Set the logicalSectorBytes property: The logicalSectorBytes property.
     * 
     * @param logicalSectorBytes the logicalSectorBytes value to set.
     * @return the VirtualHardDisksInner object itself.
     */
    public VirtualHardDisksInner withLogicalSectorBytes(Integer logicalSectorBytes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualHardDiskProperties();
        }
        this.innerProperties().withLogicalSectorBytes(logicalSectorBytes);
        return this;
    }

    /**
     * Get the physicalSectorBytes property: The physicalSectorBytes property.
     * 
     * @return the physicalSectorBytes value.
     */
    public Integer physicalSectorBytes() {
        return this.innerProperties() == null ? null : this.innerProperties().physicalSectorBytes();
    }

    /**
     * Set the physicalSectorBytes property: The physicalSectorBytes property.
     * 
     * @param physicalSectorBytes the physicalSectorBytes value to set.
     * @return the VirtualHardDisksInner object itself.
     */
    public VirtualHardDisksInner withPhysicalSectorBytes(Integer physicalSectorBytes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualHardDiskProperties();
        }
        this.innerProperties().withPhysicalSectorBytes(physicalSectorBytes);
        return this;
    }

    /**
     * Get the hyperVGeneration property: The hypervisor generation of the Virtual Machine [V1, V2].
     * 
     * @return the hyperVGeneration value.
     */
    public HyperVGeneration hyperVGeneration() {
        return this.innerProperties() == null ? null : this.innerProperties().hyperVGeneration();
    }

    /**
     * Set the hyperVGeneration property: The hypervisor generation of the Virtual Machine [V1, V2].
     * 
     * @param hyperVGeneration the hyperVGeneration value to set.
     * @return the VirtualHardDisksInner object itself.
     */
    public VirtualHardDisksInner withHyperVGeneration(HyperVGeneration hyperVGeneration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualHardDiskProperties();
        }
        this.innerProperties().withHyperVGeneration(hyperVGeneration);
        return this;
    }

    /**
     * Get the diskFileFormat property: The format of the actual VHD file [vhd, vhdx].
     * 
     * @return the diskFileFormat value.
     */
    public DiskFileFormat diskFileFormat() {
        return this.innerProperties() == null ? null : this.innerProperties().diskFileFormat();
    }

    /**
     * Set the diskFileFormat property: The format of the actual VHD file [vhd, vhdx].
     * 
     * @param diskFileFormat the diskFileFormat value to set.
     * @return the VirtualHardDisksInner object itself.
     */
    public VirtualHardDisksInner withDiskFileFormat(DiskFileFormat diskFileFormat) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualHardDiskProperties();
        }
        this.innerProperties().withDiskFileFormat(diskFileFormat);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the virtual hard disk.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the containerId property: Storage ContainerID of the storage container to be used for VHD.
     * 
     * @return the containerId value.
     */
    public String containerId() {
        return this.innerProperties() == null ? null : this.innerProperties().containerId();
    }

    /**
     * Set the containerId property: Storage ContainerID of the storage container to be used for VHD.
     * 
     * @param containerId the containerId value to set.
     * @return the VirtualHardDisksInner object itself.
     */
    public VirtualHardDisksInner withContainerId(String containerId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualHardDiskProperties();
        }
        this.innerProperties().withContainerId(containerId);
        return this;
    }

    /**
     * Get the status property: The observed state of virtual hard disks.
     * 
     * @return the status value.
     */
    public VirtualHardDiskStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (extendedLocation() != null) {
            extendedLocation().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("extendedLocation", this.extendedLocation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualHardDisksInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualHardDisksInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VirtualHardDisksInner.
     */
    public static VirtualHardDisksInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualHardDisksInner deserializedVirtualHardDisksInner = new VirtualHardDisksInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedVirtualHardDisksInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedVirtualHardDisksInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedVirtualHardDisksInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedVirtualHardDisksInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedVirtualHardDisksInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedVirtualHardDisksInner.innerProperties = VirtualHardDiskProperties.fromJson(reader);
                } else if ("extendedLocation".equals(fieldName)) {
                    deserializedVirtualHardDisksInner.extendedLocation = ExtendedLocation.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedVirtualHardDisksInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualHardDisksInner;
        });
    }
}
