// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurestackhci.fluent.models.VirtualMachinesInner;
import java.util.Map;

/** An immutable client-side representation of VirtualMachines. */
public interface VirtualMachines {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the extendedLocation property: The extendedLocation of the resource.
     *
     * @return the extendedLocation value.
     */
    ExtendedLocation extendedLocation();

    /**
     * Gets the identity property: Identity for the resource.
     *
     * @return the identity value.
     */
    Identity identity();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the hardwareProfile property: HardwareProfile - Specifies the hardware settings for the virtual machine.
     *
     * @return the hardwareProfile value.
     */
    VirtualMachinePropertiesHardwareProfile hardwareProfile();

    /**
     * Gets the networkProfile property: NetworkProfile - describes the network configuration the virtual machine.
     *
     * @return the networkProfile value.
     */
    VirtualMachinePropertiesNetworkProfile networkProfile();

    /**
     * Gets the osProfile property: OsProfile - describes the configuration of the operating system and sets login data.
     *
     * @return the osProfile value.
     */
    VirtualMachinePropertiesOsProfile osProfile();

    /**
     * Gets the securityProfile property: SecurityProfile - Specifies the security settings for the virtual machine.
     *
     * @return the securityProfile value.
     */
    VirtualMachinePropertiesSecurityProfile securityProfile();

    /**
     * Gets the storageProfile property: StorageProfile - contains information about the disks and storage information
     * for the virtual machine.
     *
     * @return the storageProfile value.
     */
    VirtualMachinePropertiesStorageProfile storageProfile();

    /**
     * Gets the provisioningState property: Provisioning state of the virtual machine.
     *
     * @return the provisioningState value.
     */
    ProvisioningStateEnum provisioningState();

    /**
     * Gets the status property: The observed state of virtual machines.
     *
     * @return the status value.
     */
    VirtualMachineStatus status();

    /**
     * Gets the guestAgentProfile property: Guest agent status properties.
     *
     * @return the guestAgentProfile value.
     */
    GuestAgentProfile guestAgentProfile();

    /**
     * Gets the vmId property: Unique identifier for the vm resource.
     *
     * @return the vmId value.
     */
    String vmId();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.azurestackhci.fluent.models.VirtualMachinesInner object.
     *
     * @return the inner object.
     */
    VirtualMachinesInner innerModel();

    /** The entirety of the VirtualMachines definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }

    /** The VirtualMachines definition stages. */
    interface DefinitionStages {
        /** The first stage of the VirtualMachines definition. */
        interface Blank extends WithLocation {
        }

        /** The stage of the VirtualMachines definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /** The stage of the VirtualMachines definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the VirtualMachines definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithExtendedLocation,
                DefinitionStages.WithIdentity,
                DefinitionStages.WithHardwareProfile,
                DefinitionStages.WithNetworkProfile,
                DefinitionStages.WithOsProfile,
                DefinitionStages.WithSecurityProfile,
                DefinitionStages.WithStorageProfile,
                DefinitionStages.WithGuestAgentProfile {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            VirtualMachines create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            VirtualMachines create(Context context);
        }

        /** The stage of the VirtualMachines definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /** The stage of the VirtualMachines definition allowing to specify extendedLocation. */
        interface WithExtendedLocation {
            /**
             * Specifies the extendedLocation property: The extendedLocation of the resource..
             *
             * @param extendedLocation The extendedLocation of the resource.
             * @return the next definition stage.
             */
            WithCreate withExtendedLocation(ExtendedLocation extendedLocation);
        }

        /** The stage of the VirtualMachines definition allowing to specify identity. */
        interface WithIdentity {
            /**
             * Specifies the identity property: Identity for the resource..
             *
             * @param identity Identity for the resource.
             * @return the next definition stage.
             */
            WithCreate withIdentity(Identity identity);
        }

        /** The stage of the VirtualMachines definition allowing to specify hardwareProfile. */
        interface WithHardwareProfile {
            /**
             * Specifies the hardwareProfile property: HardwareProfile - Specifies the hardware settings for the virtual
             * machine..
             *
             * @param hardwareProfile HardwareProfile - Specifies the hardware settings for the virtual machine.
             * @return the next definition stage.
             */
            WithCreate withHardwareProfile(VirtualMachinePropertiesHardwareProfile hardwareProfile);
        }

        /** The stage of the VirtualMachines definition allowing to specify networkProfile. */
        interface WithNetworkProfile {
            /**
             * Specifies the networkProfile property: NetworkProfile - describes the network configuration the virtual
             * machine.
             *
             * @param networkProfile NetworkProfile - describes the network configuration the virtual machine.
             * @return the next definition stage.
             */
            WithCreate withNetworkProfile(VirtualMachinePropertiesNetworkProfile networkProfile);
        }

        /** The stage of the VirtualMachines definition allowing to specify osProfile. */
        interface WithOsProfile {
            /**
             * Specifies the osProfile property: OsProfile - describes the configuration of the operating system and
             * sets login data.
             *
             * @param osProfile OsProfile - describes the configuration of the operating system and sets login data.
             * @return the next definition stage.
             */
            WithCreate withOsProfile(VirtualMachinePropertiesOsProfile osProfile);
        }

        /** The stage of the VirtualMachines definition allowing to specify securityProfile. */
        interface WithSecurityProfile {
            /**
             * Specifies the securityProfile property: SecurityProfile - Specifies the security settings for the virtual
             * machine..
             *
             * @param securityProfile SecurityProfile - Specifies the security settings for the virtual machine.
             * @return the next definition stage.
             */
            WithCreate withSecurityProfile(VirtualMachinePropertiesSecurityProfile securityProfile);
        }

        /** The stage of the VirtualMachines definition allowing to specify storageProfile. */
        interface WithStorageProfile {
            /**
             * Specifies the storageProfile property: StorageProfile - contains information about the disks and storage
             * information for the virtual machine.
             *
             * @param storageProfile StorageProfile - contains information about the disks and storage information for
             *     the virtual machine.
             * @return the next definition stage.
             */
            WithCreate withStorageProfile(VirtualMachinePropertiesStorageProfile storageProfile);
        }

        /** The stage of the VirtualMachines definition allowing to specify guestAgentProfile. */
        interface WithGuestAgentProfile {
            /**
             * Specifies the guestAgentProfile property: Guest agent status properties..
             *
             * @param guestAgentProfile Guest agent status properties.
             * @return the next definition stage.
             */
            WithCreate withGuestAgentProfile(GuestAgentProfile guestAgentProfile);
        }
    }

    /**
     * Begins update for the VirtualMachines resource.
     *
     * @return the stage of resource update.
     */
    VirtualMachines.Update update();

    /** The template for VirtualMachines update. */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithProperties {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        VirtualMachines apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        VirtualMachines apply(Context context);
    }

    /** The VirtualMachines update stages. */
    interface UpdateStages {
        /** The stage of the VirtualMachines update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags.
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /** The stage of the VirtualMachines update allowing to specify properties. */
        interface WithProperties {
            /**
             * Specifies the properties property: Defines the resource properties for the update..
             *
             * @param properties Defines the resource properties for the update.
             * @return the next definition stage.
             */
            Update withProperties(VirtualMachineUpdateProperties properties);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    VirtualMachines refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    VirtualMachines refresh(Context context);

    /**
     * The operation to start a virtual machine.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start();

    /**
     * The operation to start a virtual machine.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start(Context context);

    /**
     * The operation to stop a virtual machine.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void stop();

    /**
     * The operation to stop a virtual machine.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void stop(Context context);

    /**
     * The operation to restart a virtual machine.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restart();

    /**
     * The operation to restart a virtual machine.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restart(Context context);
}
