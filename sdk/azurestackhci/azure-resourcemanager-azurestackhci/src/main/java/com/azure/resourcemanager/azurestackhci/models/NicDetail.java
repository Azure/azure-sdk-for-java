// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The NIC Detail of a device.
 */
@Fluent
public final class NicDetail implements JsonSerializable<NicDetail> {
    /*
     * Adapter Name of NIC
     */
    private String adapterName;

    /*
     * Interface Description of NIC
     */
    private String interfaceDescription;

    /*
     * Component Id of NIC
     */
    private String componentId;

    /*
     * Driver Version of NIC
     */
    private String driverVersion;

    /*
     * Subnet Mask of NIC
     */
    private String ip4Address;

    /*
     * Subnet Mask of NIC
     */
    private String subnetMask;

    /*
     * Default Gateway of NIC
     */
    private String defaultGateway;

    /*
     * DNS Servers for NIC
     */
    private List<String> dnsServers;

    /*
     * Default Isolation of Management NIC
     */
    private String defaultIsolationId;

    /**
     * Creates an instance of NicDetail class.
     */
    public NicDetail() {
    }

    /**
     * Get the adapterName property: Adapter Name of NIC.
     * 
     * @return the adapterName value.
     */
    public String adapterName() {
        return this.adapterName;
    }

    /**
     * Set the adapterName property: Adapter Name of NIC.
     * 
     * @param adapterName the adapterName value to set.
     * @return the NicDetail object itself.
     */
    public NicDetail withAdapterName(String adapterName) {
        this.adapterName = adapterName;
        return this;
    }

    /**
     * Get the interfaceDescription property: Interface Description of NIC.
     * 
     * @return the interfaceDescription value.
     */
    public String interfaceDescription() {
        return this.interfaceDescription;
    }

    /**
     * Set the interfaceDescription property: Interface Description of NIC.
     * 
     * @param interfaceDescription the interfaceDescription value to set.
     * @return the NicDetail object itself.
     */
    public NicDetail withInterfaceDescription(String interfaceDescription) {
        this.interfaceDescription = interfaceDescription;
        return this;
    }

    /**
     * Get the componentId property: Component Id of NIC.
     * 
     * @return the componentId value.
     */
    public String componentId() {
        return this.componentId;
    }

    /**
     * Set the componentId property: Component Id of NIC.
     * 
     * @param componentId the componentId value to set.
     * @return the NicDetail object itself.
     */
    public NicDetail withComponentId(String componentId) {
        this.componentId = componentId;
        return this;
    }

    /**
     * Get the driverVersion property: Driver Version of NIC.
     * 
     * @return the driverVersion value.
     */
    public String driverVersion() {
        return this.driverVersion;
    }

    /**
     * Set the driverVersion property: Driver Version of NIC.
     * 
     * @param driverVersion the driverVersion value to set.
     * @return the NicDetail object itself.
     */
    public NicDetail withDriverVersion(String driverVersion) {
        this.driverVersion = driverVersion;
        return this;
    }

    /**
     * Get the ip4Address property: Subnet Mask of NIC.
     * 
     * @return the ip4Address value.
     */
    public String ip4Address() {
        return this.ip4Address;
    }

    /**
     * Set the ip4Address property: Subnet Mask of NIC.
     * 
     * @param ip4Address the ip4Address value to set.
     * @return the NicDetail object itself.
     */
    public NicDetail withIp4Address(String ip4Address) {
        this.ip4Address = ip4Address;
        return this;
    }

    /**
     * Get the subnetMask property: Subnet Mask of NIC.
     * 
     * @return the subnetMask value.
     */
    public String subnetMask() {
        return this.subnetMask;
    }

    /**
     * Set the subnetMask property: Subnet Mask of NIC.
     * 
     * @param subnetMask the subnetMask value to set.
     * @return the NicDetail object itself.
     */
    public NicDetail withSubnetMask(String subnetMask) {
        this.subnetMask = subnetMask;
        return this;
    }

    /**
     * Get the defaultGateway property: Default Gateway of NIC.
     * 
     * @return the defaultGateway value.
     */
    public String defaultGateway() {
        return this.defaultGateway;
    }

    /**
     * Set the defaultGateway property: Default Gateway of NIC.
     * 
     * @param defaultGateway the defaultGateway value to set.
     * @return the NicDetail object itself.
     */
    public NicDetail withDefaultGateway(String defaultGateway) {
        this.defaultGateway = defaultGateway;
        return this;
    }

    /**
     * Get the dnsServers property: DNS Servers for NIC.
     * 
     * @return the dnsServers value.
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }

    /**
     * Set the dnsServers property: DNS Servers for NIC.
     * 
     * @param dnsServers the dnsServers value to set.
     * @return the NicDetail object itself.
     */
    public NicDetail withDnsServers(List<String> dnsServers) {
        this.dnsServers = dnsServers;
        return this;
    }

    /**
     * Get the defaultIsolationId property: Default Isolation of Management NIC.
     * 
     * @return the defaultIsolationId value.
     */
    public String defaultIsolationId() {
        return this.defaultIsolationId;
    }

    /**
     * Set the defaultIsolationId property: Default Isolation of Management NIC.
     * 
     * @param defaultIsolationId the defaultIsolationId value to set.
     * @return the NicDetail object itself.
     */
    public NicDetail withDefaultIsolationId(String defaultIsolationId) {
        this.defaultIsolationId = defaultIsolationId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("adapterName", this.adapterName);
        jsonWriter.writeStringField("interfaceDescription", this.interfaceDescription);
        jsonWriter.writeStringField("componentId", this.componentId);
        jsonWriter.writeStringField("driverVersion", this.driverVersion);
        jsonWriter.writeStringField("ip4Address", this.ip4Address);
        jsonWriter.writeStringField("subnetMask", this.subnetMask);
        jsonWriter.writeStringField("defaultGateway", this.defaultGateway);
        jsonWriter.writeArrayField("dnsServers", this.dnsServers, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("defaultIsolationId", this.defaultIsolationId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NicDetail from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NicDetail if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the NicDetail.
     */
    public static NicDetail fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NicDetail deserializedNicDetail = new NicDetail();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("adapterName".equals(fieldName)) {
                    deserializedNicDetail.adapterName = reader.getString();
                } else if ("interfaceDescription".equals(fieldName)) {
                    deserializedNicDetail.interfaceDescription = reader.getString();
                } else if ("componentId".equals(fieldName)) {
                    deserializedNicDetail.componentId = reader.getString();
                } else if ("driverVersion".equals(fieldName)) {
                    deserializedNicDetail.driverVersion = reader.getString();
                } else if ("ip4Address".equals(fieldName)) {
                    deserializedNicDetail.ip4Address = reader.getString();
                } else if ("subnetMask".equals(fieldName)) {
                    deserializedNicDetail.subnetMask = reader.getString();
                } else if ("defaultGateway".equals(fieldName)) {
                    deserializedNicDetail.defaultGateway = reader.getString();
                } else if ("dnsServers".equals(fieldName)) {
                    List<String> dnsServers = reader.readArray(reader1 -> reader1.getString());
                    deserializedNicDetail.dnsServers = dnsServers;
                } else if ("defaultIsolationId".equals(fieldName)) {
                    deserializedNicDetail.defaultIsolationId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNicDetail;
        });
    }
}
