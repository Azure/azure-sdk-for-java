// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azurestackhci.models.ClusterDesiredProperties;
import com.azure.resourcemanager.azurestackhci.models.ClusterReportedProperties;
import com.azure.resourcemanager.azurestackhci.models.ConnectivityStatus;
import com.azure.resourcemanager.azurestackhci.models.IsolatedVmAttestationConfiguration;
import com.azure.resourcemanager.azurestackhci.models.LogCollectionProperties;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningState;
import com.azure.resourcemanager.azurestackhci.models.RemoteSupportProperties;
import com.azure.resourcemanager.azurestackhci.models.SoftwareAssuranceProperties;
import com.azure.resourcemanager.azurestackhci.models.Status;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Cluster properties.
 */
@Fluent
public final class ClusterProperties implements JsonSerializable<ClusterProperties> {
    /*
     * Provisioning state.
     */
    private ProvisioningState provisioningState;

    /*
     * Status of the cluster agent.
     */
    private Status status;

    /*
     * Overall connectivity status for the cluster resource.
     */
    private ConnectivityStatus connectivityStatus;

    /*
     * Unique, immutable resource id.
     */
    private String cloudId;

    /*
     * Endpoint configured for management from the Azure portal.
     */
    private String cloudManagementEndpoint;

    /*
     * App id of cluster AAD identity.
     */
    private String aadClientId;

    /*
     * Tenant id of cluster AAD identity.
     */
    private String aadTenantId;

    /*
     * Object id of cluster AAD identity.
     */
    private String aadApplicationObjectId;

    /*
     * Id of cluster identity service principal.
     */
    private String aadServicePrincipalObjectId;

    /*
     * Software Assurance properties of the cluster.
     */
    private SoftwareAssuranceProperties softwareAssuranceProperties;

    /*
     * Log Collection properties of the cluster.
     */
    private LogCollectionProperties logCollectionProperties;

    /*
     * RemoteSupport properties of the cluster.
     */
    private RemoteSupportProperties remoteSupportProperties;

    /*
     * Desired properties of the cluster.
     */
    private ClusterDesiredProperties desiredProperties;

    /*
     * Properties reported by cluster agent.
     */
    private ClusterReportedProperties reportedProperties;

    /*
     * Attestation configurations for isolated VM (e.g. TVM, CVM) of the cluster.
     */
    private IsolatedVmAttestationConfiguration isolatedVmAttestationConfiguration;

    /*
     * Number of days remaining in the trial period.
     */
    private Float trialDaysRemaining;

    /*
     * Type of billing applied to the resource.
     */
    private String billingModel;

    /*
     * First cluster sync timestamp.
     */
    private OffsetDateTime registrationTimestamp;

    /*
     * Most recent cluster sync timestamp.
     */
    private OffsetDateTime lastSyncTimestamp;

    /*
     * Most recent billing meter timestamp.
     */
    private OffsetDateTime lastBillingTimestamp;

    /*
     * Region specific DataPath Endpoint of the cluster.
     */
    private String serviceEndpoint;

    /*
     * Object id of RP Service Principal
     */
    private String resourceProviderObjectId;

    /**
     * Creates an instance of ClusterProperties class.
     */
    public ClusterProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: Status of the cluster agent.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Get the connectivityStatus property: Overall connectivity status for the cluster resource.
     * 
     * @return the connectivityStatus value.
     */
    public ConnectivityStatus connectivityStatus() {
        return this.connectivityStatus;
    }

    /**
     * Get the cloudId property: Unique, immutable resource id.
     * 
     * @return the cloudId value.
     */
    public String cloudId() {
        return this.cloudId;
    }

    /**
     * Get the cloudManagementEndpoint property: Endpoint configured for management from the Azure portal.
     * 
     * @return the cloudManagementEndpoint value.
     */
    public String cloudManagementEndpoint() {
        return this.cloudManagementEndpoint;
    }

    /**
     * Set the cloudManagementEndpoint property: Endpoint configured for management from the Azure portal.
     * 
     * @param cloudManagementEndpoint the cloudManagementEndpoint value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withCloudManagementEndpoint(String cloudManagementEndpoint) {
        this.cloudManagementEndpoint = cloudManagementEndpoint;
        return this;
    }

    /**
     * Get the aadClientId property: App id of cluster AAD identity.
     * 
     * @return the aadClientId value.
     */
    public String aadClientId() {
        return this.aadClientId;
    }

    /**
     * Set the aadClientId property: App id of cluster AAD identity.
     * 
     * @param aadClientId the aadClientId value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withAadClientId(String aadClientId) {
        this.aadClientId = aadClientId;
        return this;
    }

    /**
     * Get the aadTenantId property: Tenant id of cluster AAD identity.
     * 
     * @return the aadTenantId value.
     */
    public String aadTenantId() {
        return this.aadTenantId;
    }

    /**
     * Set the aadTenantId property: Tenant id of cluster AAD identity.
     * 
     * @param aadTenantId the aadTenantId value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withAadTenantId(String aadTenantId) {
        this.aadTenantId = aadTenantId;
        return this;
    }

    /**
     * Get the aadApplicationObjectId property: Object id of cluster AAD identity.
     * 
     * @return the aadApplicationObjectId value.
     */
    public String aadApplicationObjectId() {
        return this.aadApplicationObjectId;
    }

    /**
     * Set the aadApplicationObjectId property: Object id of cluster AAD identity.
     * 
     * @param aadApplicationObjectId the aadApplicationObjectId value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withAadApplicationObjectId(String aadApplicationObjectId) {
        this.aadApplicationObjectId = aadApplicationObjectId;
        return this;
    }

    /**
     * Get the aadServicePrincipalObjectId property: Id of cluster identity service principal.
     * 
     * @return the aadServicePrincipalObjectId value.
     */
    public String aadServicePrincipalObjectId() {
        return this.aadServicePrincipalObjectId;
    }

    /**
     * Set the aadServicePrincipalObjectId property: Id of cluster identity service principal.
     * 
     * @param aadServicePrincipalObjectId the aadServicePrincipalObjectId value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withAadServicePrincipalObjectId(String aadServicePrincipalObjectId) {
        this.aadServicePrincipalObjectId = aadServicePrincipalObjectId;
        return this;
    }

    /**
     * Get the softwareAssuranceProperties property: Software Assurance properties of the cluster.
     * 
     * @return the softwareAssuranceProperties value.
     */
    public SoftwareAssuranceProperties softwareAssuranceProperties() {
        return this.softwareAssuranceProperties;
    }

    /**
     * Set the softwareAssuranceProperties property: Software Assurance properties of the cluster.
     * 
     * @param softwareAssuranceProperties the softwareAssuranceProperties value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withSoftwareAssuranceProperties(SoftwareAssuranceProperties softwareAssuranceProperties) {
        this.softwareAssuranceProperties = softwareAssuranceProperties;
        return this;
    }

    /**
     * Get the logCollectionProperties property: Log Collection properties of the cluster.
     * 
     * @return the logCollectionProperties value.
     */
    public LogCollectionProperties logCollectionProperties() {
        return this.logCollectionProperties;
    }

    /**
     * Set the logCollectionProperties property: Log Collection properties of the cluster.
     * 
     * @param logCollectionProperties the logCollectionProperties value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withLogCollectionProperties(LogCollectionProperties logCollectionProperties) {
        this.logCollectionProperties = logCollectionProperties;
        return this;
    }

    /**
     * Get the remoteSupportProperties property: RemoteSupport properties of the cluster.
     * 
     * @return the remoteSupportProperties value.
     */
    public RemoteSupportProperties remoteSupportProperties() {
        return this.remoteSupportProperties;
    }

    /**
     * Set the remoteSupportProperties property: RemoteSupport properties of the cluster.
     * 
     * @param remoteSupportProperties the remoteSupportProperties value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withRemoteSupportProperties(RemoteSupportProperties remoteSupportProperties) {
        this.remoteSupportProperties = remoteSupportProperties;
        return this;
    }

    /**
     * Get the desiredProperties property: Desired properties of the cluster.
     * 
     * @return the desiredProperties value.
     */
    public ClusterDesiredProperties desiredProperties() {
        return this.desiredProperties;
    }

    /**
     * Set the desiredProperties property: Desired properties of the cluster.
     * 
     * @param desiredProperties the desiredProperties value to set.
     * @return the ClusterProperties object itself.
     */
    public ClusterProperties withDesiredProperties(ClusterDesiredProperties desiredProperties) {
        this.desiredProperties = desiredProperties;
        return this;
    }

    /**
     * Get the reportedProperties property: Properties reported by cluster agent.
     * 
     * @return the reportedProperties value.
     */
    public ClusterReportedProperties reportedProperties() {
        return this.reportedProperties;
    }

    /**
     * Get the isolatedVmAttestationConfiguration property: Attestation configurations for isolated VM (e.g. TVM, CVM)
     * of the cluster.
     * 
     * @return the isolatedVmAttestationConfiguration value.
     */
    public IsolatedVmAttestationConfiguration isolatedVmAttestationConfiguration() {
        return this.isolatedVmAttestationConfiguration;
    }

    /**
     * Get the trialDaysRemaining property: Number of days remaining in the trial period.
     * 
     * @return the trialDaysRemaining value.
     */
    public Float trialDaysRemaining() {
        return this.trialDaysRemaining;
    }

    /**
     * Get the billingModel property: Type of billing applied to the resource.
     * 
     * @return the billingModel value.
     */
    public String billingModel() {
        return this.billingModel;
    }

    /**
     * Get the registrationTimestamp property: First cluster sync timestamp.
     * 
     * @return the registrationTimestamp value.
     */
    public OffsetDateTime registrationTimestamp() {
        return this.registrationTimestamp;
    }

    /**
     * Get the lastSyncTimestamp property: Most recent cluster sync timestamp.
     * 
     * @return the lastSyncTimestamp value.
     */
    public OffsetDateTime lastSyncTimestamp() {
        return this.lastSyncTimestamp;
    }

    /**
     * Get the lastBillingTimestamp property: Most recent billing meter timestamp.
     * 
     * @return the lastBillingTimestamp value.
     */
    public OffsetDateTime lastBillingTimestamp() {
        return this.lastBillingTimestamp;
    }

    /**
     * Get the serviceEndpoint property: Region specific DataPath Endpoint of the cluster.
     * 
     * @return the serviceEndpoint value.
     */
    public String serviceEndpoint() {
        return this.serviceEndpoint;
    }

    /**
     * Get the resourceProviderObjectId property: Object id of RP Service Principal.
     * 
     * @return the resourceProviderObjectId value.
     */
    public String resourceProviderObjectId() {
        return this.resourceProviderObjectId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (softwareAssuranceProperties() != null) {
            softwareAssuranceProperties().validate();
        }
        if (logCollectionProperties() != null) {
            logCollectionProperties().validate();
        }
        if (remoteSupportProperties() != null) {
            remoteSupportProperties().validate();
        }
        if (desiredProperties() != null) {
            desiredProperties().validate();
        }
        if (reportedProperties() != null) {
            reportedProperties().validate();
        }
        if (isolatedVmAttestationConfiguration() != null) {
            isolatedVmAttestationConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("cloudManagementEndpoint", this.cloudManagementEndpoint);
        jsonWriter.writeStringField("aadClientId", this.aadClientId);
        jsonWriter.writeStringField("aadTenantId", this.aadTenantId);
        jsonWriter.writeStringField("aadApplicationObjectId", this.aadApplicationObjectId);
        jsonWriter.writeStringField("aadServicePrincipalObjectId", this.aadServicePrincipalObjectId);
        jsonWriter.writeJsonField("softwareAssuranceProperties", this.softwareAssuranceProperties);
        jsonWriter.writeJsonField("logCollectionProperties", this.logCollectionProperties);
        jsonWriter.writeJsonField("remoteSupportProperties", this.remoteSupportProperties);
        jsonWriter.writeJsonField("desiredProperties", this.desiredProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterProperties.
     */
    public static ClusterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterProperties deserializedClusterProperties = new ClusterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedClusterProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedClusterProperties.status = Status.fromString(reader.getString());
                } else if ("connectivityStatus".equals(fieldName)) {
                    deserializedClusterProperties.connectivityStatus
                        = ConnectivityStatus.fromString(reader.getString());
                } else if ("cloudId".equals(fieldName)) {
                    deserializedClusterProperties.cloudId = reader.getString();
                } else if ("cloudManagementEndpoint".equals(fieldName)) {
                    deserializedClusterProperties.cloudManagementEndpoint = reader.getString();
                } else if ("aadClientId".equals(fieldName)) {
                    deserializedClusterProperties.aadClientId = reader.getString();
                } else if ("aadTenantId".equals(fieldName)) {
                    deserializedClusterProperties.aadTenantId = reader.getString();
                } else if ("aadApplicationObjectId".equals(fieldName)) {
                    deserializedClusterProperties.aadApplicationObjectId = reader.getString();
                } else if ("aadServicePrincipalObjectId".equals(fieldName)) {
                    deserializedClusterProperties.aadServicePrincipalObjectId = reader.getString();
                } else if ("softwareAssuranceProperties".equals(fieldName)) {
                    deserializedClusterProperties.softwareAssuranceProperties
                        = SoftwareAssuranceProperties.fromJson(reader);
                } else if ("logCollectionProperties".equals(fieldName)) {
                    deserializedClusterProperties.logCollectionProperties = LogCollectionProperties.fromJson(reader);
                } else if ("remoteSupportProperties".equals(fieldName)) {
                    deserializedClusterProperties.remoteSupportProperties = RemoteSupportProperties.fromJson(reader);
                } else if ("desiredProperties".equals(fieldName)) {
                    deserializedClusterProperties.desiredProperties = ClusterDesiredProperties.fromJson(reader);
                } else if ("reportedProperties".equals(fieldName)) {
                    deserializedClusterProperties.reportedProperties = ClusterReportedProperties.fromJson(reader);
                } else if ("isolatedVmAttestationConfiguration".equals(fieldName)) {
                    deserializedClusterProperties.isolatedVmAttestationConfiguration
                        = IsolatedVmAttestationConfiguration.fromJson(reader);
                } else if ("trialDaysRemaining".equals(fieldName)) {
                    deserializedClusterProperties.trialDaysRemaining = reader.getNullable(JsonReader::getFloat);
                } else if ("billingModel".equals(fieldName)) {
                    deserializedClusterProperties.billingModel = reader.getString();
                } else if ("registrationTimestamp".equals(fieldName)) {
                    deserializedClusterProperties.registrationTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastSyncTimestamp".equals(fieldName)) {
                    deserializedClusterProperties.lastSyncTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastBillingTimestamp".equals(fieldName)) {
                    deserializedClusterProperties.lastBillingTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("serviceEndpoint".equals(fieldName)) {
                    deserializedClusterProperties.serviceEndpoint = reader.getString();
                } else if ("resourceProviderObjectId".equals(fieldName)) {
                    deserializedClusterProperties.resourceProviderObjectId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterProperties;
        });
    }
}
