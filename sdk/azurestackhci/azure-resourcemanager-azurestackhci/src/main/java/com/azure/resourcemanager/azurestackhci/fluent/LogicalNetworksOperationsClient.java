// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.azurestackhci.fluent.models.LogicalNetworksInner;
import com.azure.resourcemanager.azurestackhci.models.LogicalNetworksUpdateRequest;

/** An instance of this class provides access to all the operations defined in LogicalNetworksOperationsClient. */
public interface LogicalNetworksOperationsClient {
    /**
     * The getByResourceGroup operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param logicalNetworkName Name of the logical network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the logical network resource definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<LogicalNetworksInner> getByResourceGroupWithResponse(
        String resourceGroupName, String logicalNetworkName, Context context);

    /**
     * The getByResourceGroup operation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param logicalNetworkName Name of the logical network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the logical network resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    LogicalNetworksInner getByResourceGroup(String resourceGroupName, String logicalNetworkName);

    /**
     * The operation to create or update a logical network. Please note some properties can be set only during logical
     * network creation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param logicalNetworkName Name of the logical network.
     * @param logicalNetworks The logical network resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the logical network resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<LogicalNetworksInner>, LogicalNetworksInner> beginCreateOrUpdate(
        String resourceGroupName, String logicalNetworkName, LogicalNetworksInner logicalNetworks);

    /**
     * The operation to create or update a logical network. Please note some properties can be set only during logical
     * network creation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param logicalNetworkName Name of the logical network.
     * @param logicalNetworks The logical network resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the logical network resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<LogicalNetworksInner>, LogicalNetworksInner> beginCreateOrUpdate(
        String resourceGroupName, String logicalNetworkName, LogicalNetworksInner logicalNetworks, Context context);

    /**
     * The operation to create or update a logical network. Please note some properties can be set only during logical
     * network creation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param logicalNetworkName Name of the logical network.
     * @param logicalNetworks The logical network resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the logical network resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    LogicalNetworksInner createOrUpdate(
        String resourceGroupName, String logicalNetworkName, LogicalNetworksInner logicalNetworks);

    /**
     * The operation to create or update a logical network. Please note some properties can be set only during logical
     * network creation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param logicalNetworkName Name of the logical network.
     * @param logicalNetworks The logical network resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the logical network resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    LogicalNetworksInner createOrUpdate(
        String resourceGroupName, String logicalNetworkName, LogicalNetworksInner logicalNetworks, Context context);

    /**
     * The operation to delete a logical network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param logicalNetworkName Name of the logical network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String logicalNetworkName);

    /**
     * The operation to delete a logical network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param logicalNetworkName Name of the logical network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String logicalNetworkName, Context context);

    /**
     * The operation to delete a logical network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param logicalNetworkName Name of the logical network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String logicalNetworkName);

    /**
     * The operation to delete a logical network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param logicalNetworkName Name of the logical network.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String logicalNetworkName, Context context);

    /**
     * The operation to update a logical network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param logicalNetworkName Name of the logical network.
     * @param logicalNetworks The logical network resource patch definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the logical network resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<LogicalNetworksInner>, LogicalNetworksInner> beginUpdate(
        String resourceGroupName, String logicalNetworkName, LogicalNetworksUpdateRequest logicalNetworks);

    /**
     * The operation to update a logical network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param logicalNetworkName Name of the logical network.
     * @param logicalNetworks The logical network resource patch definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the logical network resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<LogicalNetworksInner>, LogicalNetworksInner> beginUpdate(
        String resourceGroupName,
        String logicalNetworkName,
        LogicalNetworksUpdateRequest logicalNetworks,
        Context context);

    /**
     * The operation to update a logical network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param logicalNetworkName Name of the logical network.
     * @param logicalNetworks The logical network resource patch definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the logical network resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    LogicalNetworksInner update(
        String resourceGroupName, String logicalNetworkName, LogicalNetworksUpdateRequest logicalNetworks);

    /**
     * The operation to update a logical network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param logicalNetworkName Name of the logical network.
     * @param logicalNetworks The logical network resource patch definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the logical network resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    LogicalNetworksInner update(
        String resourceGroupName,
        String logicalNetworkName,
        LogicalNetworksUpdateRequest logicalNetworks,
        Context context);

    /**
     * Lists all of the logical networks in the specified resource group. Use the nextLink property in the response to
     * get the next page of logical networks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<LogicalNetworksInner> listByResourceGroup(String resourceGroupName);

    /**
     * Lists all of the logical networks in the specified resource group. Use the nextLink property in the response to
     * get the next page of logical networks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<LogicalNetworksInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Lists all of the logical networks in the specified subscription. Use the nextLink property in the response to get
     * the next page of logical networks.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<LogicalNetworksInner> list();

    /**
     * Lists all of the logical networks in the specified subscription. Use the nextLink property in the response to get
     * the next page of logical networks.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<LogicalNetworksInner> list(Context context);
}
