// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The PasswordCredential model.
 */
@Fluent
public final class PasswordCredentialInner implements JsonSerializable<PasswordCredentialInner> {
    /*
     * The secretText property.
     */
    private String secretText;

    /*
     * The keyId property.
     */
    private String keyId;

    /*
     * The startDateTime property.
     */
    private OffsetDateTime startDateTime;

    /*
     * The endDateTime property.
     */
    private OffsetDateTime endDateTime;

    /**
     * Creates an instance of PasswordCredentialInner class.
     */
    public PasswordCredentialInner() {
    }

    /**
     * Get the secretText property: The secretText property.
     * 
     * @return the secretText value.
     */
    public String secretText() {
        return this.secretText;
    }

    /**
     * Set the secretText property: The secretText property.
     * 
     * @param secretText the secretText value to set.
     * @return the PasswordCredentialInner object itself.
     */
    public PasswordCredentialInner withSecretText(String secretText) {
        this.secretText = secretText;
        return this;
    }

    /**
     * Get the keyId property: The keyId property.
     * 
     * @return the keyId value.
     */
    public String keyId() {
        return this.keyId;
    }

    /**
     * Set the keyId property: The keyId property.
     * 
     * @param keyId the keyId value to set.
     * @return the PasswordCredentialInner object itself.
     */
    public PasswordCredentialInner withKeyId(String keyId) {
        this.keyId = keyId;
        return this;
    }

    /**
     * Get the startDateTime property: The startDateTime property.
     * 
     * @return the startDateTime value.
     */
    public OffsetDateTime startDateTime() {
        return this.startDateTime;
    }

    /**
     * Set the startDateTime property: The startDateTime property.
     * 
     * @param startDateTime the startDateTime value to set.
     * @return the PasswordCredentialInner object itself.
     */
    public PasswordCredentialInner withStartDateTime(OffsetDateTime startDateTime) {
        this.startDateTime = startDateTime;
        return this;
    }

    /**
     * Get the endDateTime property: The endDateTime property.
     * 
     * @return the endDateTime value.
     */
    public OffsetDateTime endDateTime() {
        return this.endDateTime;
    }

    /**
     * Set the endDateTime property: The endDateTime property.
     * 
     * @param endDateTime the endDateTime value to set.
     * @return the PasswordCredentialInner object itself.
     */
    public PasswordCredentialInner withEndDateTime(OffsetDateTime endDateTime) {
        this.endDateTime = endDateTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("secretText", this.secretText);
        jsonWriter.writeStringField("keyId", this.keyId);
        jsonWriter.writeStringField("startDateTime",
            this.startDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startDateTime));
        jsonWriter.writeStringField("endDateTime",
            this.endDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endDateTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PasswordCredentialInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PasswordCredentialInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PasswordCredentialInner.
     */
    public static PasswordCredentialInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PasswordCredentialInner deserializedPasswordCredentialInner = new PasswordCredentialInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("secretText".equals(fieldName)) {
                    deserializedPasswordCredentialInner.secretText = reader.getString();
                } else if ("keyId".equals(fieldName)) {
                    deserializedPasswordCredentialInner.keyId = reader.getString();
                } else if ("startDateTime".equals(fieldName)) {
                    deserializedPasswordCredentialInner.startDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endDateTime".equals(fieldName)) {
                    deserializedPasswordCredentialInner.endDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPasswordCredentialInner;
        });
    }
}
