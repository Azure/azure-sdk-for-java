// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Properties reported by cluster agent.
 */
@Fluent
public final class ClusterReportedProperties implements JsonSerializable<ClusterReportedProperties> {
    /*
     * Name of the on-prem cluster connected to this resource.
     */
    private String clusterName;

    /*
     * Unique id generated by the on-prem cluster.
     */
    private String clusterId;

    /*
     * Version of the cluster software.
     */
    private String clusterVersion;

    /*
     * List of nodes reported by the cluster.
     */
    private List<ClusterNode> nodes;

    /*
     * Last time the cluster reported the data.
     */
    private OffsetDateTime lastUpdated;

    /*
     * IMDS attestation status of the cluster.
     */
    private ImdsAttestation imdsAttestation;

    /*
     * Level of diagnostic data emitted by the cluster.
     */
    private DiagnosticLevel diagnosticLevel;

    /*
     * Capabilities supported by the cluster.
     */
    private List<String> supportedCapabilities;

    /*
     * The node type of all the nodes of the cluster.
     */
    private ClusterNodeType clusterType;

    /*
     * The manufacturer of all the nodes of the cluster.
     */
    private String manufacturer;

    /*
     * OEM activation status of the cluster.
     */
    private OemActivation oemActivation;

    /**
     * Creates an instance of ClusterReportedProperties class.
     */
    public ClusterReportedProperties() {
    }

    /**
     * Get the clusterName property: Name of the on-prem cluster connected to this resource.
     * 
     * @return the clusterName value.
     */
    public String clusterName() {
        return this.clusterName;
    }

    /**
     * Get the clusterId property: Unique id generated by the on-prem cluster.
     * 
     * @return the clusterId value.
     */
    public String clusterId() {
        return this.clusterId;
    }

    /**
     * Get the clusterVersion property: Version of the cluster software.
     * 
     * @return the clusterVersion value.
     */
    public String clusterVersion() {
        return this.clusterVersion;
    }

    /**
     * Get the nodes property: List of nodes reported by the cluster.
     * 
     * @return the nodes value.
     */
    public List<ClusterNode> nodes() {
        return this.nodes;
    }

    /**
     * Get the lastUpdated property: Last time the cluster reported the data.
     * 
     * @return the lastUpdated value.
     */
    public OffsetDateTime lastUpdated() {
        return this.lastUpdated;
    }

    /**
     * Get the imdsAttestation property: IMDS attestation status of the cluster.
     * 
     * @return the imdsAttestation value.
     */
    public ImdsAttestation imdsAttestation() {
        return this.imdsAttestation;
    }

    /**
     * Get the diagnosticLevel property: Level of diagnostic data emitted by the cluster.
     * 
     * @return the diagnosticLevel value.
     */
    public DiagnosticLevel diagnosticLevel() {
        return this.diagnosticLevel;
    }

    /**
     * Set the diagnosticLevel property: Level of diagnostic data emitted by the cluster.
     * 
     * @param diagnosticLevel the diagnosticLevel value to set.
     * @return the ClusterReportedProperties object itself.
     */
    public ClusterReportedProperties withDiagnosticLevel(DiagnosticLevel diagnosticLevel) {
        this.diagnosticLevel = diagnosticLevel;
        return this;
    }

    /**
     * Get the supportedCapabilities property: Capabilities supported by the cluster.
     * 
     * @return the supportedCapabilities value.
     */
    public List<String> supportedCapabilities() {
        return this.supportedCapabilities;
    }

    /**
     * Get the clusterType property: The node type of all the nodes of the cluster.
     * 
     * @return the clusterType value.
     */
    public ClusterNodeType clusterType() {
        return this.clusterType;
    }

    /**
     * Get the manufacturer property: The manufacturer of all the nodes of the cluster.
     * 
     * @return the manufacturer value.
     */
    public String manufacturer() {
        return this.manufacturer;
    }

    /**
     * Get the oemActivation property: OEM activation status of the cluster.
     * 
     * @return the oemActivation value.
     */
    public OemActivation oemActivation() {
        return this.oemActivation;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nodes() != null) {
            nodes().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("diagnosticLevel",
            this.diagnosticLevel == null ? null : this.diagnosticLevel.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterReportedProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterReportedProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterReportedProperties.
     */
    public static ClusterReportedProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterReportedProperties deserializedClusterReportedProperties = new ClusterReportedProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clusterName".equals(fieldName)) {
                    deserializedClusterReportedProperties.clusterName = reader.getString();
                } else if ("clusterId".equals(fieldName)) {
                    deserializedClusterReportedProperties.clusterId = reader.getString();
                } else if ("clusterVersion".equals(fieldName)) {
                    deserializedClusterReportedProperties.clusterVersion = reader.getString();
                } else if ("nodes".equals(fieldName)) {
                    List<ClusterNode> nodes = reader.readArray(reader1 -> ClusterNode.fromJson(reader1));
                    deserializedClusterReportedProperties.nodes = nodes;
                } else if ("lastUpdated".equals(fieldName)) {
                    deserializedClusterReportedProperties.lastUpdated = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("imdsAttestation".equals(fieldName)) {
                    deserializedClusterReportedProperties.imdsAttestation
                        = ImdsAttestation.fromString(reader.getString());
                } else if ("diagnosticLevel".equals(fieldName)) {
                    deserializedClusterReportedProperties.diagnosticLevel
                        = DiagnosticLevel.fromString(reader.getString());
                } else if ("supportedCapabilities".equals(fieldName)) {
                    List<String> supportedCapabilities = reader.readArray(reader1 -> reader1.getString());
                    deserializedClusterReportedProperties.supportedCapabilities = supportedCapabilities;
                } else if ("clusterType".equals(fieldName)) {
                    deserializedClusterReportedProperties.clusterType = ClusterNodeType.fromString(reader.getString());
                } else if ("manufacturer".equals(fieldName)) {
                    deserializedClusterReportedProperties.manufacturer = reader.getString();
                } else if ("oemActivation".equals(fieldName)) {
                    deserializedClusterReportedProperties.oemActivation = OemActivation.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterReportedProperties;
        });
    }
}
