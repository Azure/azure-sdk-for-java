// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azurestackhci.models.SkuMappings;
import java.io.IOException;
import java.util.List;

/**
 * Publisher properties.
 */
@Fluent
public final class OfferProperties implements JsonSerializable<OfferProperties> {
    /*
     * Provisioning State
     */
    private String provisioningState;

    /*
     * Identifier of the Publisher for the offer
     */
    private String publisherId;

    /*
     * JSON serialized catalog content of the offer
     */
    private String content;

    /*
     * The API version of the catalog service used to serve the catalog content
     */
    private String contentVersion;

    /*
     * Array of SKU mappings
     */
    private List<SkuMappings> skuMappings;

    /**
     * Creates an instance of OfferProperties class.
     */
    public OfferProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning State.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the publisherId property: Identifier of the Publisher for the offer.
     * 
     * @return the publisherId value.
     */
    public String publisherId() {
        return this.publisherId;
    }

    /**
     * Set the publisherId property: Identifier of the Publisher for the offer.
     * 
     * @param publisherId the publisherId value to set.
     * @return the OfferProperties object itself.
     */
    public OfferProperties withPublisherId(String publisherId) {
        this.publisherId = publisherId;
        return this;
    }

    /**
     * Get the content property: JSON serialized catalog content of the offer.
     * 
     * @return the content value.
     */
    public String content() {
        return this.content;
    }

    /**
     * Set the content property: JSON serialized catalog content of the offer.
     * 
     * @param content the content value to set.
     * @return the OfferProperties object itself.
     */
    public OfferProperties withContent(String content) {
        this.content = content;
        return this;
    }

    /**
     * Get the contentVersion property: The API version of the catalog service used to serve the catalog content.
     * 
     * @return the contentVersion value.
     */
    public String contentVersion() {
        return this.contentVersion;
    }

    /**
     * Set the contentVersion property: The API version of the catalog service used to serve the catalog content.
     * 
     * @param contentVersion the contentVersion value to set.
     * @return the OfferProperties object itself.
     */
    public OfferProperties withContentVersion(String contentVersion) {
        this.contentVersion = contentVersion;
        return this;
    }

    /**
     * Get the skuMappings property: Array of SKU mappings.
     * 
     * @return the skuMappings value.
     */
    public List<SkuMappings> skuMappings() {
        return this.skuMappings;
    }

    /**
     * Set the skuMappings property: Array of SKU mappings.
     * 
     * @param skuMappings the skuMappings value to set.
     * @return the OfferProperties object itself.
     */
    public OfferProperties withSkuMappings(List<SkuMappings> skuMappings) {
        this.skuMappings = skuMappings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (skuMappings() != null) {
            skuMappings().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("publisherId", this.publisherId);
        jsonWriter.writeStringField("content", this.content);
        jsonWriter.writeStringField("contentVersion", this.contentVersion);
        jsonWriter.writeArrayField("skuMappings", this.skuMappings, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OfferProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OfferProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the OfferProperties.
     */
    public static OfferProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OfferProperties deserializedOfferProperties = new OfferProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedOfferProperties.provisioningState = reader.getString();
                } else if ("publisherId".equals(fieldName)) {
                    deserializedOfferProperties.publisherId = reader.getString();
                } else if ("content".equals(fieldName)) {
                    deserializedOfferProperties.content = reader.getString();
                } else if ("contentVersion".equals(fieldName)) {
                    deserializedOfferProperties.contentVersion = reader.getString();
                } else if ("skuMappings".equals(fieldName)) {
                    List<SkuMappings> skuMappings = reader.readArray(reader1 -> SkuMappings.fromJson(reader1));
                    deserializedOfferProperties.skuMappings = skuMappings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOfferProperties;
        });
    }
}
