// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.azurestackhci.models.SkuMappings;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Publisher properties. */
@Fluent
public final class OfferProperties {
    /*
     * Provisioning State
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * Identifier of the Publisher for the offer
     */
    @JsonProperty(value = "publisherId")
    private String publisherId;

    /*
     * JSON serialized catalog content of the offer
     */
    @JsonProperty(value = "content")
    private String content;

    /*
     * The API version of the catalog service used to serve the catalog content
     */
    @JsonProperty(value = "contentVersion")
    private String contentVersion;

    /*
     * Array of SKU mappings
     */
    @JsonProperty(value = "skuMappings")
    private List<SkuMappings> skuMappings;

    /** Creates an instance of OfferProperties class. */
    public OfferProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning State.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the publisherId property: Identifier of the Publisher for the offer.
     *
     * @return the publisherId value.
     */
    public String publisherId() {
        return this.publisherId;
    }

    /**
     * Set the publisherId property: Identifier of the Publisher for the offer.
     *
     * @param publisherId the publisherId value to set.
     * @return the OfferProperties object itself.
     */
    public OfferProperties withPublisherId(String publisherId) {
        this.publisherId = publisherId;
        return this;
    }

    /**
     * Get the content property: JSON serialized catalog content of the offer.
     *
     * @return the content value.
     */
    public String content() {
        return this.content;
    }

    /**
     * Set the content property: JSON serialized catalog content of the offer.
     *
     * @param content the content value to set.
     * @return the OfferProperties object itself.
     */
    public OfferProperties withContent(String content) {
        this.content = content;
        return this;
    }

    /**
     * Get the contentVersion property: The API version of the catalog service used to serve the catalog content.
     *
     * @return the contentVersion value.
     */
    public String contentVersion() {
        return this.contentVersion;
    }

    /**
     * Set the contentVersion property: The API version of the catalog service used to serve the catalog content.
     *
     * @param contentVersion the contentVersion value to set.
     * @return the OfferProperties object itself.
     */
    public OfferProperties withContentVersion(String contentVersion) {
        this.contentVersion = contentVersion;
        return this;
    }

    /**
     * Get the skuMappings property: Array of SKU mappings.
     *
     * @return the skuMappings value.
     */
    public List<SkuMappings> skuMappings() {
        return this.skuMappings;
    }

    /**
     * Set the skuMappings property: Array of SKU mappings.
     *
     * @param skuMappings the skuMappings value to set.
     * @return the OfferProperties object itself.
     */
    public OfferProperties withSkuMappings(List<SkuMappings> skuMappings) {
        this.skuMappings = skuMappings;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (skuMappings() != null) {
            skuMappings().forEach(e -> e.validate());
        }
    }
}
