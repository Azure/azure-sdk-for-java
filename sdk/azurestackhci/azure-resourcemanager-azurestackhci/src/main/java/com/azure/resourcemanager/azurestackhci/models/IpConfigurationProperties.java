// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** InterfaceIPConfigurationPropertiesFormat properties of IP configuration. */
@Fluent
public final class IpConfigurationProperties {
    /*
     * Gateway for network interface
     */
    @JsonProperty(value = "gateway", access = JsonProperty.Access.WRITE_ONLY)
    private String gateway;

    /*
     * prefixLength for network interface
     */
    @JsonProperty(value = "prefixLength", access = JsonProperty.Access.WRITE_ONLY)
    private String prefixLength;

    /*
     * PrivateIPAddress - Private IP address of the IP configuration.
     */
    @JsonProperty(value = "privateIPAddress")
    private String privateIpAddress;

    /*
     * Subnet - Name of Subnet bound to the IP configuration.
     */
    @JsonProperty(value = "subnet")
    private IpConfigurationPropertiesSubnet subnet;

    /** Creates an instance of IpConfigurationProperties class. */
    public IpConfigurationProperties() {
    }

    /**
     * Get the gateway property: Gateway for network interface.
     *
     * @return the gateway value.
     */
    public String gateway() {
        return this.gateway;
    }

    /**
     * Get the prefixLength property: prefixLength for network interface.
     *
     * @return the prefixLength value.
     */
    public String prefixLength() {
        return this.prefixLength;
    }

    /**
     * Get the privateIpAddress property: PrivateIPAddress - Private IP address of the IP configuration.
     *
     * @return the privateIpAddress value.
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }

    /**
     * Set the privateIpAddress property: PrivateIPAddress - Private IP address of the IP configuration.
     *
     * @param privateIpAddress the privateIpAddress value to set.
     * @return the IpConfigurationProperties object itself.
     */
    public IpConfigurationProperties withPrivateIpAddress(String privateIpAddress) {
        this.privateIpAddress = privateIpAddress;
        return this;
    }

    /**
     * Get the subnet property: Subnet - Name of Subnet bound to the IP configuration.
     *
     * @return the subnet value.
     */
    public IpConfigurationPropertiesSubnet subnet() {
        return this.subnet;
    }

    /**
     * Set the subnet property: Subnet - Name of Subnet bound to the IP configuration.
     *
     * @param subnet the subnet value to set.
     * @return the IpConfigurationProperties object itself.
     */
    public IpConfigurationProperties withSubnet(IpConfigurationPropertiesSubnet subnet) {
        this.subnet = subnet;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subnet() != null) {
            subnet().validate();
        }
    }
}
