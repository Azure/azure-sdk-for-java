// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.azurestackhci.models.GuestAgentProfile;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningStateEnum;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachinePropertiesHardwareProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachinePropertiesNetworkProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachinePropertiesOsProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachinePropertiesSecurityProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachinePropertiesStorageProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachineStatus;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Properties under the virtual machine resource. */
@Fluent
public final class VirtualMachineProperties {
    /*
     * HardwareProfile - Specifies the hardware settings for the virtual machine.
     */
    @JsonProperty(value = "hardwareProfile")
    private VirtualMachinePropertiesHardwareProfile hardwareProfile;

    /*
     * NetworkProfile - describes the network configuration the virtual machine
     */
    @JsonProperty(value = "networkProfile")
    private VirtualMachinePropertiesNetworkProfile networkProfile;

    /*
     * OsProfile - describes the configuration of the operating system and sets login data
     */
    @JsonProperty(value = "osProfile")
    private VirtualMachinePropertiesOsProfile osProfile;

    /*
     * SecurityProfile - Specifies the security settings for the virtual machine.
     */
    @JsonProperty(value = "securityProfile")
    private VirtualMachinePropertiesSecurityProfile securityProfile;

    /*
     * StorageProfile - contains information about the disks and storage information for the virtual machine
     */
    @JsonProperty(value = "storageProfile")
    private VirtualMachinePropertiesStorageProfile storageProfile;

    /*
     * Provisioning state of the virtual machine.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningStateEnum provisioningState;

    /*
     * The observed state of virtual machines
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private VirtualMachineStatus status;

    /*
     * Guest agent status properties.
     */
    @JsonProperty(value = "guestAgentProfile")
    private GuestAgentProfile guestAgentProfile;

    /*
     * Unique identifier for the vm resource.
     */
    @JsonProperty(value = "vmId", access = JsonProperty.Access.WRITE_ONLY)
    private String vmId;

    /** Creates an instance of VirtualMachineProperties class. */
    public VirtualMachineProperties() {
    }

    /**
     * Get the hardwareProfile property: HardwareProfile - Specifies the hardware settings for the virtual machine.
     *
     * @return the hardwareProfile value.
     */
    public VirtualMachinePropertiesHardwareProfile hardwareProfile() {
        return this.hardwareProfile;
    }

    /**
     * Set the hardwareProfile property: HardwareProfile - Specifies the hardware settings for the virtual machine.
     *
     * @param hardwareProfile the hardwareProfile value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties withHardwareProfile(VirtualMachinePropertiesHardwareProfile hardwareProfile) {
        this.hardwareProfile = hardwareProfile;
        return this;
    }

    /**
     * Get the networkProfile property: NetworkProfile - describes the network configuration the virtual machine.
     *
     * @return the networkProfile value.
     */
    public VirtualMachinePropertiesNetworkProfile networkProfile() {
        return this.networkProfile;
    }

    /**
     * Set the networkProfile property: NetworkProfile - describes the network configuration the virtual machine.
     *
     * @param networkProfile the networkProfile value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties withNetworkProfile(VirtualMachinePropertiesNetworkProfile networkProfile) {
        this.networkProfile = networkProfile;
        return this;
    }

    /**
     * Get the osProfile property: OsProfile - describes the configuration of the operating system and sets login data.
     *
     * @return the osProfile value.
     */
    public VirtualMachinePropertiesOsProfile osProfile() {
        return this.osProfile;
    }

    /**
     * Set the osProfile property: OsProfile - describes the configuration of the operating system and sets login data.
     *
     * @param osProfile the osProfile value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties withOsProfile(VirtualMachinePropertiesOsProfile osProfile) {
        this.osProfile = osProfile;
        return this;
    }

    /**
     * Get the securityProfile property: SecurityProfile - Specifies the security settings for the virtual machine.
     *
     * @return the securityProfile value.
     */
    public VirtualMachinePropertiesSecurityProfile securityProfile() {
        return this.securityProfile;
    }

    /**
     * Set the securityProfile property: SecurityProfile - Specifies the security settings for the virtual machine.
     *
     * @param securityProfile the securityProfile value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties withSecurityProfile(VirtualMachinePropertiesSecurityProfile securityProfile) {
        this.securityProfile = securityProfile;
        return this;
    }

    /**
     * Get the storageProfile property: StorageProfile - contains information about the disks and storage information
     * for the virtual machine.
     *
     * @return the storageProfile value.
     */
    public VirtualMachinePropertiesStorageProfile storageProfile() {
        return this.storageProfile;
    }

    /**
     * Set the storageProfile property: StorageProfile - contains information about the disks and storage information
     * for the virtual machine.
     *
     * @param storageProfile the storageProfile value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties withStorageProfile(VirtualMachinePropertiesStorageProfile storageProfile) {
        this.storageProfile = storageProfile;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the virtual machine.
     *
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: The observed state of virtual machines.
     *
     * @return the status value.
     */
    public VirtualMachineStatus status() {
        return this.status;
    }

    /**
     * Get the guestAgentProfile property: Guest agent status properties.
     *
     * @return the guestAgentProfile value.
     */
    public GuestAgentProfile guestAgentProfile() {
        return this.guestAgentProfile;
    }

    /**
     * Set the guestAgentProfile property: Guest agent status properties.
     *
     * @param guestAgentProfile the guestAgentProfile value to set.
     * @return the VirtualMachineProperties object itself.
     */
    public VirtualMachineProperties withGuestAgentProfile(GuestAgentProfile guestAgentProfile) {
        this.guestAgentProfile = guestAgentProfile;
        return this;
    }

    /**
     * Get the vmId property: Unique identifier for the vm resource.
     *
     * @return the vmId value.
     */
    public String vmId() {
        return this.vmId;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hardwareProfile() != null) {
            hardwareProfile().validate();
        }
        if (networkProfile() != null) {
            networkProfile().validate();
        }
        if (osProfile() != null) {
            osProfile().validate();
        }
        if (securityProfile() != null) {
            securityProfile().validate();
        }
        if (storageProfile() != null) {
            storageProfile().validate();
        }
        if (status() != null) {
            status().validate();
        }
        if (guestAgentProfile() != null) {
            guestAgentProfile().validate();
        }
    }
}
