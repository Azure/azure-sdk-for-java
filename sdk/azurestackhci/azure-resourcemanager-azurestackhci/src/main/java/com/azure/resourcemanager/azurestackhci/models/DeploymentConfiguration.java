// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Deployment Configuration.
 */
@Fluent
public final class DeploymentConfiguration implements JsonSerializable<DeploymentConfiguration> {
    /*
     * deployment template version
     */
    private String version;

    /*
     * Scale units will contains list of deployment data
     */
    private List<ScaleUnits> scaleUnits;

    /**
     * Creates an instance of DeploymentConfiguration class.
     */
    public DeploymentConfiguration() {
    }

    /**
     * Get the version property: deployment template version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: deployment template version.
     * 
     * @param version the version value to set.
     * @return the DeploymentConfiguration object itself.
     */
    public DeploymentConfiguration withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the scaleUnits property: Scale units will contains list of deployment data.
     * 
     * @return the scaleUnits value.
     */
    public List<ScaleUnits> scaleUnits() {
        return this.scaleUnits;
    }

    /**
     * Set the scaleUnits property: Scale units will contains list of deployment data.
     * 
     * @param scaleUnits the scaleUnits value to set.
     * @return the DeploymentConfiguration object itself.
     */
    public DeploymentConfiguration withScaleUnits(List<ScaleUnits> scaleUnits) {
        this.scaleUnits = scaleUnits;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (scaleUnits() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property scaleUnits in model DeploymentConfiguration"));
        } else {
            scaleUnits().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DeploymentConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("scaleUnits", this.scaleUnits, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("version", this.version);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeploymentConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeploymentConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeploymentConfiguration.
     */
    public static DeploymentConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeploymentConfiguration deserializedDeploymentConfiguration = new DeploymentConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scaleUnits".equals(fieldName)) {
                    List<ScaleUnits> scaleUnits = reader.readArray(reader1 -> ScaleUnits.fromJson(reader1));
                    deserializedDeploymentConfiguration.scaleUnits = scaleUnits;
                } else if ("version".equals(fieldName)) {
                    deserializedDeploymentConfiguration.version = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeploymentConfiguration;
        });
    }
}
