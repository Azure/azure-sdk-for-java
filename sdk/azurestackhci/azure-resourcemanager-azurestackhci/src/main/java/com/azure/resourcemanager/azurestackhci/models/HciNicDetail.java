// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The NIC Detail of a device.
 */
@Immutable
public final class HciNicDetail implements JsonSerializable<HciNicDetail> {
    /*
     * Adapter Name of NIC
     */
    private String adapterName;

    /*
     * Interface Description of NIC
     */
    private String interfaceDescription;

    /*
     * Component Id of NIC
     */
    private String componentId;

    /*
     * Driver Version of NIC
     */
    private String driverVersion;

    /*
     * Subnet Mask of NIC
     */
    private String ip4Address;

    /*
     * Subnet Mask of NIC
     */
    private String subnetMask;

    /*
     * Default Gateway of NIC
     */
    private String defaultGateway;

    /*
     * DNS Servers for NIC
     */
    private List<String> dnsServers;

    /*
     * Default Isolation of Management NIC
     */
    private String defaultIsolationId;

    /*
     * MAC address information of NIC.
     */
    private String macAddress;

    /*
     * The slot attached to the NIC.
     */
    private String slot;

    /*
     * The switch attached to the NIC, if any.
     */
    private String switchName;

    /*
     * The type of NIC, physical, virtual, management.
     */
    private String nicType;

    /*
     * The VLAN ID of the physical NIC.
     */
    private String vlanId;

    /*
     * The status of NIC, up, disconnected.
     */
    private String nicStatus;

    /**
     * Creates an instance of HciNicDetail class.
     */
    public HciNicDetail() {
    }

    /**
     * Get the adapterName property: Adapter Name of NIC.
     * 
     * @return the adapterName value.
     */
    public String adapterName() {
        return this.adapterName;
    }

    /**
     * Get the interfaceDescription property: Interface Description of NIC.
     * 
     * @return the interfaceDescription value.
     */
    public String interfaceDescription() {
        return this.interfaceDescription;
    }

    /**
     * Get the componentId property: Component Id of NIC.
     * 
     * @return the componentId value.
     */
    public String componentId() {
        return this.componentId;
    }

    /**
     * Get the driverVersion property: Driver Version of NIC.
     * 
     * @return the driverVersion value.
     */
    public String driverVersion() {
        return this.driverVersion;
    }

    /**
     * Get the ip4Address property: Subnet Mask of NIC.
     * 
     * @return the ip4Address value.
     */
    public String ip4Address() {
        return this.ip4Address;
    }

    /**
     * Get the subnetMask property: Subnet Mask of NIC.
     * 
     * @return the subnetMask value.
     */
    public String subnetMask() {
        return this.subnetMask;
    }

    /**
     * Get the defaultGateway property: Default Gateway of NIC.
     * 
     * @return the defaultGateway value.
     */
    public String defaultGateway() {
        return this.defaultGateway;
    }

    /**
     * Get the dnsServers property: DNS Servers for NIC.
     * 
     * @return the dnsServers value.
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }

    /**
     * Get the defaultIsolationId property: Default Isolation of Management NIC.
     * 
     * @return the defaultIsolationId value.
     */
    public String defaultIsolationId() {
        return this.defaultIsolationId;
    }

    /**
     * Get the macAddress property: MAC address information of NIC.
     * 
     * @return the macAddress value.
     */
    public String macAddress() {
        return this.macAddress;
    }

    /**
     * Get the slot property: The slot attached to the NIC.
     * 
     * @return the slot value.
     */
    public String slot() {
        return this.slot;
    }

    /**
     * Get the switchName property: The switch attached to the NIC, if any.
     * 
     * @return the switchName value.
     */
    public String switchName() {
        return this.switchName;
    }

    /**
     * Get the nicType property: The type of NIC, physical, virtual, management.
     * 
     * @return the nicType value.
     */
    public String nicType() {
        return this.nicType;
    }

    /**
     * Get the vlanId property: The VLAN ID of the physical NIC.
     * 
     * @return the vlanId value.
     */
    public String vlanId() {
        return this.vlanId;
    }

    /**
     * Get the nicStatus property: The status of NIC, up, disconnected.
     * 
     * @return the nicStatus value.
     */
    public String nicStatus() {
        return this.nicStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HciNicDetail from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HciNicDetail if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the HciNicDetail.
     */
    public static HciNicDetail fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HciNicDetail deserializedHciNicDetail = new HciNicDetail();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("adapterName".equals(fieldName)) {
                    deserializedHciNicDetail.adapterName = reader.getString();
                } else if ("interfaceDescription".equals(fieldName)) {
                    deserializedHciNicDetail.interfaceDescription = reader.getString();
                } else if ("componentId".equals(fieldName)) {
                    deserializedHciNicDetail.componentId = reader.getString();
                } else if ("driverVersion".equals(fieldName)) {
                    deserializedHciNicDetail.driverVersion = reader.getString();
                } else if ("ip4Address".equals(fieldName)) {
                    deserializedHciNicDetail.ip4Address = reader.getString();
                } else if ("subnetMask".equals(fieldName)) {
                    deserializedHciNicDetail.subnetMask = reader.getString();
                } else if ("defaultGateway".equals(fieldName)) {
                    deserializedHciNicDetail.defaultGateway = reader.getString();
                } else if ("dnsServers".equals(fieldName)) {
                    List<String> dnsServers = reader.readArray(reader1 -> reader1.getString());
                    deserializedHciNicDetail.dnsServers = dnsServers;
                } else if ("defaultIsolationId".equals(fieldName)) {
                    deserializedHciNicDetail.defaultIsolationId = reader.getString();
                } else if ("macAddress".equals(fieldName)) {
                    deserializedHciNicDetail.macAddress = reader.getString();
                } else if ("slot".equals(fieldName)) {
                    deserializedHciNicDetail.slot = reader.getString();
                } else if ("switchName".equals(fieldName)) {
                    deserializedHciNicDetail.switchName = reader.getString();
                } else if ("nicType".equals(fieldName)) {
                    deserializedHciNicDetail.nicType = reader.getString();
                } else if ("vlanId".equals(fieldName)) {
                    deserializedHciNicDetail.vlanId = reader.getString();
                } else if ("nicStatus".equals(fieldName)) {
                    deserializedHciNicDetail.nicStatus = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHciNicDetail;
        });
    }
}
