// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azurestackhci.models.CloudInitDataSource;
import com.azure.resourcemanager.azurestackhci.models.ExtendedLocation;
import com.azure.resourcemanager.azurestackhci.models.GalleryImageIdentifier;
import com.azure.resourcemanager.azurestackhci.models.GalleryImageStatus;
import com.azure.resourcemanager.azurestackhci.models.GalleryImageVersion;
import com.azure.resourcemanager.azurestackhci.models.HyperVGeneration;
import com.azure.resourcemanager.azurestackhci.models.OperatingSystemTypes;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningStateEnum;
import java.io.IOException;
import java.util.Map;

/**
 * The gallery images resource definition.
 */
@Fluent
public final class GalleryImagesInner extends Resource {
    /*
     * Properties under the gallery image resource
     */
    private GalleryImageProperties innerProperties;

    /*
     * The extendedLocation of the resource.
     */
    private ExtendedLocation extendedLocation;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of GalleryImagesInner class.
     */
    public GalleryImagesInner() {
    }

    /**
     * Get the innerProperties property: Properties under the gallery image resource.
     * 
     * @return the innerProperties value.
     */
    private GalleryImageProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the extendedLocation property: The extendedLocation of the resource.
     * 
     * @return the extendedLocation value.
     */
    public ExtendedLocation extendedLocation() {
        return this.extendedLocation;
    }

    /**
     * Set the extendedLocation property: The extendedLocation of the resource.
     * 
     * @param extendedLocation the extendedLocation value to set.
     * @return the GalleryImagesInner object itself.
     */
    public GalleryImagesInner withExtendedLocation(ExtendedLocation extendedLocation) {
        this.extendedLocation = extendedLocation;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GalleryImagesInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GalleryImagesInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the containerId property: Storage ContainerID of the storage container to be used for gallery image.
     * 
     * @return the containerId value.
     */
    public String containerId() {
        return this.innerProperties() == null ? null : this.innerProperties().containerId();
    }

    /**
     * Set the containerId property: Storage ContainerID of the storage container to be used for gallery image.
     * 
     * @param containerId the containerId value to set.
     * @return the GalleryImagesInner object itself.
     */
    public GalleryImagesInner withContainerId(String containerId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GalleryImageProperties();
        }
        this.innerProperties().withContainerId(containerId);
        return this;
    }

    /**
     * Get the imagePath property: location of the image the gallery image should be created from.
     * 
     * @return the imagePath value.
     */
    public String imagePath() {
        return this.innerProperties() == null ? null : this.innerProperties().imagePath();
    }

    /**
     * Set the imagePath property: location of the image the gallery image should be created from.
     * 
     * @param imagePath the imagePath value to set.
     * @return the GalleryImagesInner object itself.
     */
    public GalleryImagesInner withImagePath(String imagePath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GalleryImageProperties();
        }
        this.innerProperties().withImagePath(imagePath);
        return this;
    }

    /**
     * Get the osType property: Operating system type that the gallery image uses [Windows, Linux].
     * 
     * @return the osType value.
     */
    public OperatingSystemTypes osType() {
        return this.innerProperties() == null ? null : this.innerProperties().osType();
    }

    /**
     * Set the osType property: Operating system type that the gallery image uses [Windows, Linux].
     * 
     * @param osType the osType value to set.
     * @return the GalleryImagesInner object itself.
     */
    public GalleryImagesInner withOsType(OperatingSystemTypes osType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GalleryImageProperties();
        }
        this.innerProperties().withOsType(osType);
        return this;
    }

    /**
     * Get the cloudInitDataSource property: Datasource for the gallery image when provisioning with cloud-init
     * [NoCloud, Azure].
     * 
     * @return the cloudInitDataSource value.
     */
    public CloudInitDataSource cloudInitDataSource() {
        return this.innerProperties() == null ? null : this.innerProperties().cloudInitDataSource();
    }

    /**
     * Set the cloudInitDataSource property: Datasource for the gallery image when provisioning with cloud-init
     * [NoCloud, Azure].
     * 
     * @param cloudInitDataSource the cloudInitDataSource value to set.
     * @return the GalleryImagesInner object itself.
     */
    public GalleryImagesInner withCloudInitDataSource(CloudInitDataSource cloudInitDataSource) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GalleryImageProperties();
        }
        this.innerProperties().withCloudInitDataSource(cloudInitDataSource);
        return this;
    }

    /**
     * Get the hyperVGeneration property: The hypervisor generation of the Virtual Machine [V1, V2].
     * 
     * @return the hyperVGeneration value.
     */
    public HyperVGeneration hyperVGeneration() {
        return this.innerProperties() == null ? null : this.innerProperties().hyperVGeneration();
    }

    /**
     * Set the hyperVGeneration property: The hypervisor generation of the Virtual Machine [V1, V2].
     * 
     * @param hyperVGeneration the hyperVGeneration value to set.
     * @return the GalleryImagesInner object itself.
     */
    public GalleryImagesInner withHyperVGeneration(HyperVGeneration hyperVGeneration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GalleryImageProperties();
        }
        this.innerProperties().withHyperVGeneration(hyperVGeneration);
        return this;
    }

    /**
     * Get the identifier property: This is the gallery image definition identifier.
     * 
     * @return the identifier value.
     */
    public GalleryImageIdentifier identifier() {
        return this.innerProperties() == null ? null : this.innerProperties().identifier();
    }

    /**
     * Set the identifier property: This is the gallery image definition identifier.
     * 
     * @param identifier the identifier value to set.
     * @return the GalleryImagesInner object itself.
     */
    public GalleryImagesInner withIdentifier(GalleryImageIdentifier identifier) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GalleryImageProperties();
        }
        this.innerProperties().withIdentifier(identifier);
        return this;
    }

    /**
     * Get the version property: Specifies information about the gallery image version that you want to create or
     * update.
     * 
     * @return the version value.
     */
    public GalleryImageVersion version() {
        return this.innerProperties() == null ? null : this.innerProperties().version();
    }

    /**
     * Set the version property: Specifies information about the gallery image version that you want to create or
     * update.
     * 
     * @param version the version value to set.
     * @return the GalleryImagesInner object itself.
     */
    public GalleryImagesInner withVersion(GalleryImageVersion version) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GalleryImageProperties();
        }
        this.innerProperties().withVersion(version);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the gallery image.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the status property: The observed state of gallery images.
     * 
     * @return the status value.
     */
    public GalleryImageStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (extendedLocation() != null) {
            extendedLocation().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("extendedLocation", this.extendedLocation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GalleryImagesInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GalleryImagesInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GalleryImagesInner.
     */
    public static GalleryImagesInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GalleryImagesInner deserializedGalleryImagesInner = new GalleryImagesInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedGalleryImagesInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedGalleryImagesInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedGalleryImagesInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedGalleryImagesInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedGalleryImagesInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedGalleryImagesInner.innerProperties = GalleryImageProperties.fromJson(reader);
                } else if ("extendedLocation".equals(fieldName)) {
                    deserializedGalleryImagesInner.extendedLocation = ExtendedLocation.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedGalleryImagesInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGalleryImagesInner;
        });
    }
}
