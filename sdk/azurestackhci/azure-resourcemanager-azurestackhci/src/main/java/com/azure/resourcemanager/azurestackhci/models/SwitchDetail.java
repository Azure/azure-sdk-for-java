// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * List of switch details for edge device.
 */
@Immutable
public final class SwitchDetail implements JsonSerializable<SwitchDetail> {
    /*
     * The name of the switch.
     */
    private String switchName;

    /*
     * The type of the switch. e.g. external, internal.
     */
    private String switchType;

    /*
     * This represents extensions installed on virtualSwitch.
     */
    private List<SwitchExtension> extensions;

    /**
     * Creates an instance of SwitchDetail class.
     */
    public SwitchDetail() {
    }

    /**
     * Get the switchName property: The name of the switch.
     * 
     * @return the switchName value.
     */
    public String switchName() {
        return this.switchName;
    }

    /**
     * Get the switchType property: The type of the switch. e.g. external, internal.
     * 
     * @return the switchType value.
     */
    public String switchType() {
        return this.switchType;
    }

    /**
     * Get the extensions property: This represents extensions installed on virtualSwitch.
     * 
     * @return the extensions value.
     */
    public List<SwitchExtension> extensions() {
        return this.extensions;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (extensions() != null) {
            extensions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SwitchDetail from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SwitchDetail if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SwitchDetail.
     */
    public static SwitchDetail fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SwitchDetail deserializedSwitchDetail = new SwitchDetail();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("switchName".equals(fieldName)) {
                    deserializedSwitchDetail.switchName = reader.getString();
                } else if ("switchType".equals(fieldName)) {
                    deserializedSwitchDetail.switchType = reader.getString();
                } else if ("extensions".equals(fieldName)) {
                    List<SwitchExtension> extensions = reader.readArray(reader1 -> SwitchExtension.fromJson(reader1));
                    deserializedSwitchDetail.extensions = extensions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSwitchDetail;
        });
    }
}
