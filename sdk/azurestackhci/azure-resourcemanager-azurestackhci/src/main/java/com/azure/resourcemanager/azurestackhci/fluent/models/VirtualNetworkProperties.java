// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.azurestackhci.models.NetworkTypeEnum;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningStateEnum;
import com.azure.resourcemanager.azurestackhci.models.VirtualNetworkPropertiesDhcpOptions;
import com.azure.resourcemanager.azurestackhci.models.VirtualNetworkPropertiesSubnetsItem;
import com.azure.resourcemanager.azurestackhci.models.VirtualNetworkStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Properties under the virtual network resource. */
@Fluent
public final class VirtualNetworkProperties {
    /*
     * DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP
     * option for a subnet overrides VNET DHCP options.
     */
    @JsonProperty(value = "dhcpOptions")
    private VirtualNetworkPropertiesDhcpOptions dhcpOptions;

    /*
     * Type of the network
     */
    @JsonProperty(value = "networkType")
    private NetworkTypeEnum networkType;

    /*
     * Subnet - list of subnets under the virtual network
     */
    @JsonProperty(value = "subnets")
    private List<VirtualNetworkPropertiesSubnetsItem> subnets;

    /*
     * Provisioning state of the virtual network.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningStateEnum provisioningState;

    /*
     * name of the network switch to be used for VMs
     */
    @JsonProperty(value = "vmSwitchName")
    private String vmSwitchName;

    /*
     * The observed state of virtual networks
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private VirtualNetworkStatus status;

    /** Creates an instance of VirtualNetworkProperties class. */
    public VirtualNetworkProperties() {
    }

    /**
     * Get the dhcpOptions property: DhcpOptions contains an array of DNS servers available to VMs deployed in the
     * virtual network. Standard DHCP option for a subnet overrides VNET DHCP options.
     *
     * @return the dhcpOptions value.
     */
    public VirtualNetworkPropertiesDhcpOptions dhcpOptions() {
        return this.dhcpOptions;
    }

    /**
     * Set the dhcpOptions property: DhcpOptions contains an array of DNS servers available to VMs deployed in the
     * virtual network. Standard DHCP option for a subnet overrides VNET DHCP options.
     *
     * @param dhcpOptions the dhcpOptions value to set.
     * @return the VirtualNetworkProperties object itself.
     */
    public VirtualNetworkProperties withDhcpOptions(VirtualNetworkPropertiesDhcpOptions dhcpOptions) {
        this.dhcpOptions = dhcpOptions;
        return this;
    }

    /**
     * Get the networkType property: Type of the network.
     *
     * @return the networkType value.
     */
    public NetworkTypeEnum networkType() {
        return this.networkType;
    }

    /**
     * Set the networkType property: Type of the network.
     *
     * @param networkType the networkType value to set.
     * @return the VirtualNetworkProperties object itself.
     */
    public VirtualNetworkProperties withNetworkType(NetworkTypeEnum networkType) {
        this.networkType = networkType;
        return this;
    }

    /**
     * Get the subnets property: Subnet - list of subnets under the virtual network.
     *
     * @return the subnets value.
     */
    public List<VirtualNetworkPropertiesSubnetsItem> subnets() {
        return this.subnets;
    }

    /**
     * Set the subnets property: Subnet - list of subnets under the virtual network.
     *
     * @param subnets the subnets value to set.
     * @return the VirtualNetworkProperties object itself.
     */
    public VirtualNetworkProperties withSubnets(List<VirtualNetworkPropertiesSubnetsItem> subnets) {
        this.subnets = subnets;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the virtual network.
     *
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the vmSwitchName property: name of the network switch to be used for VMs.
     *
     * @return the vmSwitchName value.
     */
    public String vmSwitchName() {
        return this.vmSwitchName;
    }

    /**
     * Set the vmSwitchName property: name of the network switch to be used for VMs.
     *
     * @param vmSwitchName the vmSwitchName value to set.
     * @return the VirtualNetworkProperties object itself.
     */
    public VirtualNetworkProperties withVmSwitchName(String vmSwitchName) {
        this.vmSwitchName = vmSwitchName;
        return this;
    }

    /**
     * Get the status property: The observed state of virtual networks.
     *
     * @return the status value.
     */
    public VirtualNetworkStatus status() {
        return this.status;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dhcpOptions() != null) {
            dhcpOptions().validate();
        }
        if (subnets() != null) {
            subnets().forEach(e -> e.validate());
        }
        if (status() != null) {
            status().validate();
        }
    }
}
