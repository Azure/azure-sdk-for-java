// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.azurestackhci.models.DiskFileFormat;
import com.azure.resourcemanager.azurestackhci.models.HyperVGeneration;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningStateEnum;
import com.azure.resourcemanager.azurestackhci.models.VirtualHardDiskStatus;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Properties under the virtual hard disk resource. */
@Fluent
public final class VirtualHardDiskProperties {
    /*
     * The blockSizeBytes property.
     */
    @JsonProperty(value = "blockSizeBytes")
    private Integer blockSizeBytes;

    /*
     * Size of the disk in GB
     */
    @JsonProperty(value = "diskSizeGB")
    private Long diskSizeGB;

    /*
     * Boolean for enabling dynamic sizing on the virtual hard disk
     */
    @JsonProperty(value = "dynamic")
    private Boolean dynamic;

    /*
     * The logicalSectorBytes property.
     */
    @JsonProperty(value = "logicalSectorBytes")
    private Integer logicalSectorBytes;

    /*
     * The physicalSectorBytes property.
     */
    @JsonProperty(value = "physicalSectorBytes")
    private Integer physicalSectorBytes;

    /*
     * The hypervisor generation of the Virtual Machine [V1, V2]
     */
    @JsonProperty(value = "hyperVGeneration")
    private HyperVGeneration hyperVGeneration;

    /*
     * The format of the actual VHD file [vhd, vhdx]
     */
    @JsonProperty(value = "diskFileFormat")
    private DiskFileFormat diskFileFormat;

    /*
     * Provisioning state of the virtual hard disk.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningStateEnum provisioningState;

    /*
     * Storage ContainerID of the storage container to be used for VHD
     */
    @JsonProperty(value = "containerId")
    private String containerId;

    /*
     * The observed state of virtual hard disks
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private VirtualHardDiskStatus status;

    /** Creates an instance of VirtualHardDiskProperties class. */
    public VirtualHardDiskProperties() {
    }

    /**
     * Get the blockSizeBytes property: The blockSizeBytes property.
     *
     * @return the blockSizeBytes value.
     */
    public Integer blockSizeBytes() {
        return this.blockSizeBytes;
    }

    /**
     * Set the blockSizeBytes property: The blockSizeBytes property.
     *
     * @param blockSizeBytes the blockSizeBytes value to set.
     * @return the VirtualHardDiskProperties object itself.
     */
    public VirtualHardDiskProperties withBlockSizeBytes(Integer blockSizeBytes) {
        this.blockSizeBytes = blockSizeBytes;
        return this;
    }

    /**
     * Get the diskSizeGB property: Size of the disk in GB.
     *
     * @return the diskSizeGB value.
     */
    public Long diskSizeGB() {
        return this.diskSizeGB;
    }

    /**
     * Set the diskSizeGB property: Size of the disk in GB.
     *
     * @param diskSizeGB the diskSizeGB value to set.
     * @return the VirtualHardDiskProperties object itself.
     */
    public VirtualHardDiskProperties withDiskSizeGB(Long diskSizeGB) {
        this.diskSizeGB = diskSizeGB;
        return this;
    }

    /**
     * Get the dynamic property: Boolean for enabling dynamic sizing on the virtual hard disk.
     *
     * @return the dynamic value.
     */
    public Boolean dynamic() {
        return this.dynamic;
    }

    /**
     * Set the dynamic property: Boolean for enabling dynamic sizing on the virtual hard disk.
     *
     * @param dynamic the dynamic value to set.
     * @return the VirtualHardDiskProperties object itself.
     */
    public VirtualHardDiskProperties withDynamic(Boolean dynamic) {
        this.dynamic = dynamic;
        return this;
    }

    /**
     * Get the logicalSectorBytes property: The logicalSectorBytes property.
     *
     * @return the logicalSectorBytes value.
     */
    public Integer logicalSectorBytes() {
        return this.logicalSectorBytes;
    }

    /**
     * Set the logicalSectorBytes property: The logicalSectorBytes property.
     *
     * @param logicalSectorBytes the logicalSectorBytes value to set.
     * @return the VirtualHardDiskProperties object itself.
     */
    public VirtualHardDiskProperties withLogicalSectorBytes(Integer logicalSectorBytes) {
        this.logicalSectorBytes = logicalSectorBytes;
        return this;
    }

    /**
     * Get the physicalSectorBytes property: The physicalSectorBytes property.
     *
     * @return the physicalSectorBytes value.
     */
    public Integer physicalSectorBytes() {
        return this.physicalSectorBytes;
    }

    /**
     * Set the physicalSectorBytes property: The physicalSectorBytes property.
     *
     * @param physicalSectorBytes the physicalSectorBytes value to set.
     * @return the VirtualHardDiskProperties object itself.
     */
    public VirtualHardDiskProperties withPhysicalSectorBytes(Integer physicalSectorBytes) {
        this.physicalSectorBytes = physicalSectorBytes;
        return this;
    }

    /**
     * Get the hyperVGeneration property: The hypervisor generation of the Virtual Machine [V1, V2].
     *
     * @return the hyperVGeneration value.
     */
    public HyperVGeneration hyperVGeneration() {
        return this.hyperVGeneration;
    }

    /**
     * Set the hyperVGeneration property: The hypervisor generation of the Virtual Machine [V1, V2].
     *
     * @param hyperVGeneration the hyperVGeneration value to set.
     * @return the VirtualHardDiskProperties object itself.
     */
    public VirtualHardDiskProperties withHyperVGeneration(HyperVGeneration hyperVGeneration) {
        this.hyperVGeneration = hyperVGeneration;
        return this;
    }

    /**
     * Get the diskFileFormat property: The format of the actual VHD file [vhd, vhdx].
     *
     * @return the diskFileFormat value.
     */
    public DiskFileFormat diskFileFormat() {
        return this.diskFileFormat;
    }

    /**
     * Set the diskFileFormat property: The format of the actual VHD file [vhd, vhdx].
     *
     * @param diskFileFormat the diskFileFormat value to set.
     * @return the VirtualHardDiskProperties object itself.
     */
    public VirtualHardDiskProperties withDiskFileFormat(DiskFileFormat diskFileFormat) {
        this.diskFileFormat = diskFileFormat;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the virtual hard disk.
     *
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the containerId property: Storage ContainerID of the storage container to be used for VHD.
     *
     * @return the containerId value.
     */
    public String containerId() {
        return this.containerId;
    }

    /**
     * Set the containerId property: Storage ContainerID of the storage container to be used for VHD.
     *
     * @param containerId the containerId value to set.
     * @return the VirtualHardDiskProperties object itself.
     */
    public VirtualHardDiskProperties withContainerId(String containerId) {
        this.containerId = containerId;
        return this;
    }

    /**
     * Get the status property: The observed state of virtual hard disks.
     *
     * @return the status value.
     */
    public VirtualHardDiskStatus status() {
        return this.status;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() != null) {
            status().validate();
        }
    }
}
