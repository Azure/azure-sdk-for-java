// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurestackhci.fluent.SecuritySettingsClient;
import com.azure.resourcemanager.azurestackhci.fluent.models.SecuritySettingInner;
import com.azure.resourcemanager.azurestackhci.models.SecuritySetting;
import com.azure.resourcemanager.azurestackhci.models.SecuritySettings;

public final class SecuritySettingsImpl implements SecuritySettings {
    private static final ClientLogger LOGGER = new ClientLogger(SecuritySettingsImpl.class);

    private final SecuritySettingsClient innerClient;

    private final com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager;

    public SecuritySettingsImpl(SecuritySettingsClient innerClient,
        com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SecuritySetting> listByClusters(String resourceGroupName, String clusterName) {
        PagedIterable<SecuritySettingInner> inner = this.serviceClient().listByClusters(resourceGroupName, clusterName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SecuritySettingImpl(inner1, this.manager()));
    }

    public PagedIterable<SecuritySetting> listByClusters(String resourceGroupName, String clusterName,
        Context context) {
        PagedIterable<SecuritySettingInner> inner
            = this.serviceClient().listByClusters(resourceGroupName, clusterName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SecuritySettingImpl(inner1, this.manager()));
    }

    public Response<SecuritySetting> getWithResponse(String resourceGroupName, String clusterName,
        String securitySettingsName, Context context) {
        Response<SecuritySettingInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, clusterName, securitySettingsName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SecuritySettingImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SecuritySetting get(String resourceGroupName, String clusterName, String securitySettingsName) {
        SecuritySettingInner inner = this.serviceClient().get(resourceGroupName, clusterName, securitySettingsName);
        if (inner != null) {
            return new SecuritySettingImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String clusterName, String securitySettingsName) {
        this.serviceClient().delete(resourceGroupName, clusterName, securitySettingsName);
    }

    public void delete(String resourceGroupName, String clusterName, String securitySettingsName, Context context) {
        this.serviceClient().delete(resourceGroupName, clusterName, securitySettingsName, context);
    }

    public SecuritySetting getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String clusterName = ResourceManagerUtils.getValueFromIdByName(id, "clusters");
        if (clusterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'clusters'.", id)));
        }
        String securitySettingsName = ResourceManagerUtils.getValueFromIdByName(id, "securitySettings");
        if (securitySettingsName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'securitySettings'.", id)));
        }
        return this.getWithResponse(resourceGroupName, clusterName, securitySettingsName, Context.NONE).getValue();
    }

    public Response<SecuritySetting> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String clusterName = ResourceManagerUtils.getValueFromIdByName(id, "clusters");
        if (clusterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'clusters'.", id)));
        }
        String securitySettingsName = ResourceManagerUtils.getValueFromIdByName(id, "securitySettings");
        if (securitySettingsName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'securitySettings'.", id)));
        }
        return this.getWithResponse(resourceGroupName, clusterName, securitySettingsName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String clusterName = ResourceManagerUtils.getValueFromIdByName(id, "clusters");
        if (clusterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'clusters'.", id)));
        }
        String securitySettingsName = ResourceManagerUtils.getValueFromIdByName(id, "securitySettings");
        if (securitySettingsName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'securitySettings'.", id)));
        }
        this.delete(resourceGroupName, clusterName, securitySettingsName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String clusterName = ResourceManagerUtils.getValueFromIdByName(id, "clusters");
        if (clusterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'clusters'.", id)));
        }
        String securitySettingsName = ResourceManagerUtils.getValueFromIdByName(id, "securitySettings");
        if (securitySettingsName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'securitySettings'.", id)));
        }
        this.delete(resourceGroupName, clusterName, securitySettingsName, context);
    }

    private SecuritySettingsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurestackhci.AzureStackHciManager manager() {
        return this.serviceManager;
    }

    public SecuritySettingImpl define(String name) {
        return new SecuritySettingImpl(name, this.manager());
    }
}
