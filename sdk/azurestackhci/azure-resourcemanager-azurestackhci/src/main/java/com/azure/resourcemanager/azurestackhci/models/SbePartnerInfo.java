// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The solution builder extension (SBE) partner deployment info for cluster.
 */
@Fluent
public final class SbePartnerInfo implements JsonSerializable<SbePartnerInfo> {
    /*
     * SBE package and manifest information for the solution Builder Extension staged for AzureStackHCI cluster
     * deployment.
     */
    private SbeDeploymentInfo sbeDeploymentInfo;

    /*
     * List of SBE partner properties for AzureStackHCI cluster deployment.
     */
    private List<SbePartnerProperties> partnerProperties;

    /*
     * SBE credentials list for AzureStackHCI cluster deployment.
     */
    private List<SbeCredentials> credentialList;

    /**
     * Creates an instance of SbePartnerInfo class.
     */
    public SbePartnerInfo() {
    }

    /**
     * Get the sbeDeploymentInfo property: SBE package and manifest information for the solution Builder Extension
     * staged for AzureStackHCI cluster deployment.
     * 
     * @return the sbeDeploymentInfo value.
     */
    public SbeDeploymentInfo sbeDeploymentInfo() {
        return this.sbeDeploymentInfo;
    }

    /**
     * Set the sbeDeploymentInfo property: SBE package and manifest information for the solution Builder Extension
     * staged for AzureStackHCI cluster deployment.
     * 
     * @param sbeDeploymentInfo the sbeDeploymentInfo value to set.
     * @return the SbePartnerInfo object itself.
     */
    public SbePartnerInfo withSbeDeploymentInfo(SbeDeploymentInfo sbeDeploymentInfo) {
        this.sbeDeploymentInfo = sbeDeploymentInfo;
        return this;
    }

    /**
     * Get the partnerProperties property: List of SBE partner properties for AzureStackHCI cluster deployment.
     * 
     * @return the partnerProperties value.
     */
    public List<SbePartnerProperties> partnerProperties() {
        return this.partnerProperties;
    }

    /**
     * Set the partnerProperties property: List of SBE partner properties for AzureStackHCI cluster deployment.
     * 
     * @param partnerProperties the partnerProperties value to set.
     * @return the SbePartnerInfo object itself.
     */
    public SbePartnerInfo withPartnerProperties(List<SbePartnerProperties> partnerProperties) {
        this.partnerProperties = partnerProperties;
        return this;
    }

    /**
     * Get the credentialList property: SBE credentials list for AzureStackHCI cluster deployment.
     * 
     * @return the credentialList value.
     */
    public List<SbeCredentials> credentialList() {
        return this.credentialList;
    }

    /**
     * Set the credentialList property: SBE credentials list for AzureStackHCI cluster deployment.
     * 
     * @param credentialList the credentialList value to set.
     * @return the SbePartnerInfo object itself.
     */
    public SbePartnerInfo withCredentialList(List<SbeCredentials> credentialList) {
        this.credentialList = credentialList;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sbeDeploymentInfo() != null) {
            sbeDeploymentInfo().validate();
        }
        if (partnerProperties() != null) {
            partnerProperties().forEach(e -> e.validate());
        }
        if (credentialList() != null) {
            credentialList().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("sbeDeploymentInfo", this.sbeDeploymentInfo);
        jsonWriter.writeArrayField("partnerProperties", this.partnerProperties,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("credentialList", this.credentialList,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SbePartnerInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SbePartnerInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SbePartnerInfo.
     */
    public static SbePartnerInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SbePartnerInfo deserializedSbePartnerInfo = new SbePartnerInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sbeDeploymentInfo".equals(fieldName)) {
                    deserializedSbePartnerInfo.sbeDeploymentInfo = SbeDeploymentInfo.fromJson(reader);
                } else if ("partnerProperties".equals(fieldName)) {
                    List<SbePartnerProperties> partnerProperties
                        = reader.readArray(reader1 -> SbePartnerProperties.fromJson(reader1));
                    deserializedSbePartnerInfo.partnerProperties = partnerProperties;
                } else if ("credentialList".equals(fieldName)) {
                    List<SbeCredentials> credentialList = reader.readArray(reader1 -> SbeCredentials.fromJson(reader1));
                    deserializedSbePartnerInfo.credentialList = credentialList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSbePartnerInfo;
        });
    }
}
