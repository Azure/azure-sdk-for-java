// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurestackhci.fluent.VirtualHardDisksOperationsClient;
import com.azure.resourcemanager.azurestackhci.fluent.models.VirtualHardDisksInner;
import com.azure.resourcemanager.azurestackhci.models.VirtualHardDisks;
import com.azure.resourcemanager.azurestackhci.models.VirtualHardDisksOperations;

public final class VirtualHardDisksOperationsImpl implements VirtualHardDisksOperations {
    private static final ClientLogger LOGGER = new ClientLogger(VirtualHardDisksOperationsImpl.class);

    private final VirtualHardDisksOperationsClient innerClient;

    private final com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager;

    public VirtualHardDisksOperationsImpl(
        VirtualHardDisksOperationsClient innerClient,
        com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<VirtualHardDisks> getByResourceGroupWithResponse(
        String resourceGroupName, String virtualHardDiskName, Context context) {
        Response<VirtualHardDisksInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, virtualHardDiskName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VirtualHardDisksImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VirtualHardDisks getByResourceGroup(String resourceGroupName, String virtualHardDiskName) {
        VirtualHardDisksInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, virtualHardDiskName);
        if (inner != null) {
            return new VirtualHardDisksImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String virtualHardDiskName) {
        this.serviceClient().delete(resourceGroupName, virtualHardDiskName);
    }

    public void delete(String resourceGroupName, String virtualHardDiskName, Context context) {
        this.serviceClient().delete(resourceGroupName, virtualHardDiskName, context);
    }

    public PagedIterable<VirtualHardDisks> listByResourceGroup(String resourceGroupName) {
        PagedIterable<VirtualHardDisksInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new VirtualHardDisksImpl(inner1, this.manager()));
    }

    public PagedIterable<VirtualHardDisks> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<VirtualHardDisksInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new VirtualHardDisksImpl(inner1, this.manager()));
    }

    public PagedIterable<VirtualHardDisks> list() {
        PagedIterable<VirtualHardDisksInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new VirtualHardDisksImpl(inner1, this.manager()));
    }

    public PagedIterable<VirtualHardDisks> list(Context context) {
        PagedIterable<VirtualHardDisksInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new VirtualHardDisksImpl(inner1, this.manager()));
    }

    public VirtualHardDisks getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualHardDiskName = Utils.getValueFromIdByName(id, "virtualHardDisks");
        if (virtualHardDiskName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'virtualHardDisks'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, virtualHardDiskName, Context.NONE).getValue();
    }

    public Response<VirtualHardDisks> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualHardDiskName = Utils.getValueFromIdByName(id, "virtualHardDisks");
        if (virtualHardDiskName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'virtualHardDisks'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, virtualHardDiskName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualHardDiskName = Utils.getValueFromIdByName(id, "virtualHardDisks");
        if (virtualHardDiskName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'virtualHardDisks'.", id)));
        }
        this.delete(resourceGroupName, virtualHardDiskName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualHardDiskName = Utils.getValueFromIdByName(id, "virtualHardDisks");
        if (virtualHardDiskName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'virtualHardDisks'.", id)));
        }
        this.delete(resourceGroupName, virtualHardDiskName, context);
    }

    private VirtualHardDisksOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azurestackhci.AzureStackHciManager manager() {
        return this.serviceManager;
    }

    public VirtualHardDisksImpl define(String name) {
        return new VirtualHardDisksImpl(name, this.manager());
    }
}
