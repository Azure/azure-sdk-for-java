// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurestackhci.fluent.models.NetworkInterfacesInner;
import com.azure.resourcemanager.azurestackhci.models.ExtendedLocation;
import com.azure.resourcemanager.azurestackhci.models.InterfaceDnsSettings;
import com.azure.resourcemanager.azurestackhci.models.IpConfiguration;
import com.azure.resourcemanager.azurestackhci.models.NetworkInterfaceStatus;
import com.azure.resourcemanager.azurestackhci.models.NetworkInterfaces;
import com.azure.resourcemanager.azurestackhci.models.NetworkInterfacesUpdateRequest;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningStateEnum;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class NetworkInterfacesImpl
    implements NetworkInterfaces, NetworkInterfaces.Definition, NetworkInterfaces.Update {
    private NetworkInterfacesInner innerObject;

    private final com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ExtendedLocation extendedLocation() {
        return this.innerModel().extendedLocation();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public List<IpConfiguration> ipConfigurations() {
        List<IpConfiguration> inner = this.innerModel().ipConfigurations();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String macAddress() {
        return this.innerModel().macAddress();
    }

    public InterfaceDnsSettings dnsSettings() {
        return this.innerModel().dnsSettings();
    }

    public ProvisioningStateEnum provisioningState() {
        return this.innerModel().provisioningState();
    }

    public NetworkInterfaceStatus status() {
        return this.innerModel().status();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public NetworkInterfacesInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azurestackhci.AzureStackHciManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String networkInterfaceName;

    private NetworkInterfacesUpdateRequest updateNetworkInterfaces;

    public NetworkInterfacesImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public NetworkInterfaces create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkInterfacesOperations()
                .createOrUpdate(resourceGroupName, networkInterfaceName, this.innerModel(), Context.NONE);
        return this;
    }

    public NetworkInterfaces create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkInterfacesOperations()
                .createOrUpdate(resourceGroupName, networkInterfaceName, this.innerModel(), context);
        return this;
    }

    NetworkInterfacesImpl(String name, com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = new NetworkInterfacesInner();
        this.serviceManager = serviceManager;
        this.networkInterfaceName = name;
    }

    public NetworkInterfacesImpl update() {
        this.updateNetworkInterfaces = new NetworkInterfacesUpdateRequest();
        return this;
    }

    public NetworkInterfaces apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkInterfacesOperations()
                .update(resourceGroupName, networkInterfaceName, updateNetworkInterfaces, Context.NONE);
        return this;
    }

    public NetworkInterfaces apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkInterfacesOperations()
                .update(resourceGroupName, networkInterfaceName, updateNetworkInterfaces, context);
        return this;
    }

    NetworkInterfacesImpl(
        NetworkInterfacesInner innerObject,
        com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.networkInterfaceName = Utils.getValueFromIdByName(innerObject.id(), "networkInterfaces");
    }

    public NetworkInterfaces refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkInterfacesOperations()
                .getByResourceGroupWithResponse(resourceGroupName, networkInterfaceName, Context.NONE)
                .getValue();
        return this;
    }

    public NetworkInterfaces refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getNetworkInterfacesOperations()
                .getByResourceGroupWithResponse(resourceGroupName, networkInterfaceName, context)
                .getValue();
        return this;
    }

    public NetworkInterfacesImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public NetworkInterfacesImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public NetworkInterfacesImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateNetworkInterfaces.withTags(tags);
            return this;
        }
    }

    public NetworkInterfacesImpl withExtendedLocation(ExtendedLocation extendedLocation) {
        this.innerModel().withExtendedLocation(extendedLocation);
        return this;
    }

    public NetworkInterfacesImpl withIpConfigurations(List<IpConfiguration> ipConfigurations) {
        this.innerModel().withIpConfigurations(ipConfigurations);
        return this;
    }

    public NetworkInterfacesImpl withMacAddress(String macAddress) {
        this.innerModel().withMacAddress(macAddress);
        return this;
    }

    public NetworkInterfacesImpl withDnsSettings(InterfaceDnsSettings dnsSettings) {
        this.innerModel().withDnsSettings(dnsSettings);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
