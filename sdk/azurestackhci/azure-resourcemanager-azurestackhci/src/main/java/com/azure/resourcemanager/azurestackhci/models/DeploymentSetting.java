// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurestackhci.fluent.models.DeploymentSettingInner;
import java.util.List;

/**
 * An immutable client-side representation of DeploymentSetting.
 */
public interface DeploymentSetting {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the provisioningState property: DeploymentSetting provisioning state.
     * 
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the arcNodeResourceIds property: Azure resource ids of Arc machines to be part of cluster.
     * 
     * @return the arcNodeResourceIds value.
     */
    List<String> arcNodeResourceIds();

    /**
     * Gets the deploymentMode property: The deployment mode for cluster deployment.
     * 
     * @return the deploymentMode value.
     */
    DeploymentMode deploymentMode();

    /**
     * Gets the operationType property: The intended operation for a cluster.
     * 
     * @return the operationType value.
     */
    OperationType operationType();

    /**
     * Gets the deploymentConfiguration property: Scale units will contains list of deployment data.
     * 
     * @return the deploymentConfiguration value.
     */
    DeploymentConfiguration deploymentConfiguration();

    /**
     * Gets the reportedProperties property: Deployment Status reported from cluster.
     * 
     * @return the reportedProperties value.
     */
    EceReportedProperties reportedProperties();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.azurestackhci.fluent.models.DeploymentSettingInner object.
     * 
     * @return the inner object.
     */
    DeploymentSettingInner innerModel();

    /**
     * The entirety of the DeploymentSetting definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The DeploymentSetting definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the DeploymentSetting definition.
         */
        interface Blank extends WithParentResource {
        }

        /**
         * The stage of the DeploymentSetting definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, clusterName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param clusterName The name of the cluster.
             * @return the next definition stage.
             */
            WithCreate withExistingCluster(String resourceGroupName, String clusterName);
        }

        /**
         * The stage of the DeploymentSetting definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithArcNodeResourceIds, DefinitionStages.WithDeploymentMode,
            DefinitionStages.WithOperationType, DefinitionStages.WithDeploymentConfiguration {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            DeploymentSetting create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            DeploymentSetting create(Context context);
        }

        /**
         * The stage of the DeploymentSetting definition allowing to specify arcNodeResourceIds.
         */
        interface WithArcNodeResourceIds {
            /**
             * Specifies the arcNodeResourceIds property: Azure resource ids of Arc machines to be part of cluster..
             * 
             * @param arcNodeResourceIds Azure resource ids of Arc machines to be part of cluster.
             * @return the next definition stage.
             */
            WithCreate withArcNodeResourceIds(List<String> arcNodeResourceIds);
        }

        /**
         * The stage of the DeploymentSetting definition allowing to specify deploymentMode.
         */
        interface WithDeploymentMode {
            /**
             * Specifies the deploymentMode property: The deployment mode for cluster deployment..
             * 
             * @param deploymentMode The deployment mode for cluster deployment.
             * @return the next definition stage.
             */
            WithCreate withDeploymentMode(DeploymentMode deploymentMode);
        }

        /**
         * The stage of the DeploymentSetting definition allowing to specify operationType.
         */
        interface WithOperationType {
            /**
             * Specifies the operationType property: The intended operation for a cluster..
             * 
             * @param operationType The intended operation for a cluster.
             * @return the next definition stage.
             */
            WithCreate withOperationType(OperationType operationType);
        }

        /**
         * The stage of the DeploymentSetting definition allowing to specify deploymentConfiguration.
         */
        interface WithDeploymentConfiguration {
            /**
             * Specifies the deploymentConfiguration property: Scale units will contains list of deployment data.
             * 
             * @param deploymentConfiguration Scale units will contains list of deployment data.
             * @return the next definition stage.
             */
            WithCreate withDeploymentConfiguration(DeploymentConfiguration deploymentConfiguration);
        }
    }

    /**
     * Begins update for the DeploymentSetting resource.
     * 
     * @return the stage of resource update.
     */
    DeploymentSetting.Update update();

    /**
     * The template for DeploymentSetting update.
     */
    interface Update extends UpdateStages.WithArcNodeResourceIds, UpdateStages.WithDeploymentMode,
        UpdateStages.WithOperationType, UpdateStages.WithDeploymentConfiguration {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        DeploymentSetting apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        DeploymentSetting apply(Context context);
    }

    /**
     * The DeploymentSetting update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the DeploymentSetting update allowing to specify arcNodeResourceIds.
         */
        interface WithArcNodeResourceIds {
            /**
             * Specifies the arcNodeResourceIds property: Azure resource ids of Arc machines to be part of cluster..
             * 
             * @param arcNodeResourceIds Azure resource ids of Arc machines to be part of cluster.
             * @return the next definition stage.
             */
            Update withArcNodeResourceIds(List<String> arcNodeResourceIds);
        }

        /**
         * The stage of the DeploymentSetting update allowing to specify deploymentMode.
         */
        interface WithDeploymentMode {
            /**
             * Specifies the deploymentMode property: The deployment mode for cluster deployment..
             * 
             * @param deploymentMode The deployment mode for cluster deployment.
             * @return the next definition stage.
             */
            Update withDeploymentMode(DeploymentMode deploymentMode);
        }

        /**
         * The stage of the DeploymentSetting update allowing to specify operationType.
         */
        interface WithOperationType {
            /**
             * Specifies the operationType property: The intended operation for a cluster..
             * 
             * @param operationType The intended operation for a cluster.
             * @return the next definition stage.
             */
            Update withOperationType(OperationType operationType);
        }

        /**
         * The stage of the DeploymentSetting update allowing to specify deploymentConfiguration.
         */
        interface WithDeploymentConfiguration {
            /**
             * Specifies the deploymentConfiguration property: Scale units will contains list of deployment data.
             * 
             * @param deploymentConfiguration Scale units will contains list of deployment data.
             * @return the next definition stage.
             */
            Update withDeploymentConfiguration(DeploymentConfiguration deploymentConfiguration);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    DeploymentSetting refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    DeploymentSetting refresh(Context context);
}
