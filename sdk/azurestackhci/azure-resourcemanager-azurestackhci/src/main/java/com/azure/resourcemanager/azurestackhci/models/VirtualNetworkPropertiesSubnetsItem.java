// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.azurestackhci.fluent.models.VirtualNetworkPropertiesSubnetsItemAutoGenerated;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Subnet subnet in a virtual network resource. */
@Fluent
public final class VirtualNetworkPropertiesSubnetsItem {
    /*
     * Name - The name of the resource that is unique within a resource group. This name can be used to access the
     * resource.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * SubnetProperties - Properties of the subnet.
     */
    @JsonProperty(value = "properties")
    private VirtualNetworkPropertiesSubnetsItemAutoGenerated innerProperties;

    /** Creates an instance of VirtualNetworkPropertiesSubnetsItem class. */
    public VirtualNetworkPropertiesSubnetsItem() {
    }

    /**
     * Get the name property: Name - The name of the resource that is unique within a resource group. This name can be
     * used to access the resource.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name - The name of the resource that is unique within a resource group. This name can be
     * used to access the resource.
     *
     * @param name the name value to set.
     * @return the VirtualNetworkPropertiesSubnetsItem object itself.
     */
    public VirtualNetworkPropertiesSubnetsItem withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the innerProperties property: SubnetProperties - Properties of the subnet.
     *
     * @return the innerProperties value.
     */
    private VirtualNetworkPropertiesSubnetsItemAutoGenerated innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the addressPrefix property: Cidr for this subnet - IPv4, IPv6.
     *
     * @return the addressPrefix value.
     */
    public String addressPrefix() {
        return this.innerProperties() == null ? null : this.innerProperties().addressPrefix();
    }

    /**
     * Set the addressPrefix property: Cidr for this subnet - IPv4, IPv6.
     *
     * @param addressPrefix the addressPrefix value to set.
     * @return the VirtualNetworkPropertiesSubnetsItem object itself.
     */
    public VirtualNetworkPropertiesSubnetsItem withAddressPrefix(String addressPrefix) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualNetworkPropertiesSubnetsItemAutoGenerated();
        }
        this.innerProperties().withAddressPrefix(addressPrefix);
        return this;
    }

    /**
     * Get the addressPrefixes property: AddressPrefixes - List of address prefixes for the subnet.
     *
     * @return the addressPrefixes value.
     */
    public List<String> addressPrefixes() {
        return this.innerProperties() == null ? null : this.innerProperties().addressPrefixes();
    }

    /**
     * Set the addressPrefixes property: AddressPrefixes - List of address prefixes for the subnet.
     *
     * @param addressPrefixes the addressPrefixes value to set.
     * @return the VirtualNetworkPropertiesSubnetsItem object itself.
     */
    public VirtualNetworkPropertiesSubnetsItem withAddressPrefixes(List<String> addressPrefixes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualNetworkPropertiesSubnetsItemAutoGenerated();
        }
        this.innerProperties().withAddressPrefixes(addressPrefixes);
        return this;
    }

    /**
     * Get the ipAllocationMethod property: IPAllocationMethod - The IP address allocation method. Possible values
     * include: 'Static', 'Dynamic'.
     *
     * @return the ipAllocationMethod value.
     */
    public IpAllocationMethodEnum ipAllocationMethod() {
        return this.innerProperties() == null ? null : this.innerProperties().ipAllocationMethod();
    }

    /**
     * Set the ipAllocationMethod property: IPAllocationMethod - The IP address allocation method. Possible values
     * include: 'Static', 'Dynamic'.
     *
     * @param ipAllocationMethod the ipAllocationMethod value to set.
     * @return the VirtualNetworkPropertiesSubnetsItem object itself.
     */
    public VirtualNetworkPropertiesSubnetsItem withIpAllocationMethod(IpAllocationMethodEnum ipAllocationMethod) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualNetworkPropertiesSubnetsItemAutoGenerated();
        }
        this.innerProperties().withIpAllocationMethod(ipAllocationMethod);
        return this;
    }

    /**
     * Get the ipConfigurationReferences property: IPConfigurationReferences - list of IPConfigurationReferences.
     *
     * @return the ipConfigurationReferences value.
     */
    public List<VirtualNetworkPropertiesSubnetsItemAutoGeneratedIpConfigurationReference> ipConfigurationReferences() {
        return this.innerProperties() == null ? null : this.innerProperties().ipConfigurationReferences();
    }

    /**
     * Set the ipConfigurationReferences property: IPConfigurationReferences - list of IPConfigurationReferences.
     *
     * @param ipConfigurationReferences the ipConfigurationReferences value to set.
     * @return the VirtualNetworkPropertiesSubnetsItem object itself.
     */
    public VirtualNetworkPropertiesSubnetsItem withIpConfigurationReferences(
        List<VirtualNetworkPropertiesSubnetsItemAutoGeneratedIpConfigurationReference> ipConfigurationReferences) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualNetworkPropertiesSubnetsItemAutoGenerated();
        }
        this.innerProperties().withIpConfigurationReferences(ipConfigurationReferences);
        return this;
    }

    /**
     * Get the routeTable property: RouteTable for the subnet.
     *
     * @return the routeTable value.
     */
    public ComponentsI4F0MhSchemasVirtualnetworkpropertiesPropertiesSubnetsItemsPropertiesRoutetable routeTable() {
        return this.innerProperties() == null ? null : this.innerProperties().routeTable();
    }

    /**
     * Set the routeTable property: RouteTable for the subnet.
     *
     * @param routeTable the routeTable value to set.
     * @return the VirtualNetworkPropertiesSubnetsItem object itself.
     */
    public VirtualNetworkPropertiesSubnetsItem withRouteTable(
        ComponentsI4F0MhSchemasVirtualnetworkpropertiesPropertiesSubnetsItemsPropertiesRoutetable routeTable) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualNetworkPropertiesSubnetsItemAutoGenerated();
        }
        this.innerProperties().withRouteTable(routeTable);
        return this;
    }

    /**
     * Get the ipPools property: network associated pool of IP Addresses.
     *
     * @return the ipPools value.
     */
    public List<IpPool> ipPools() {
        return this.innerProperties() == null ? null : this.innerProperties().ipPools();
    }

    /**
     * Set the ipPools property: network associated pool of IP Addresses.
     *
     * @param ipPools the ipPools value to set.
     * @return the VirtualNetworkPropertiesSubnetsItem object itself.
     */
    public VirtualNetworkPropertiesSubnetsItem withIpPools(List<IpPool> ipPools) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualNetworkPropertiesSubnetsItemAutoGenerated();
        }
        this.innerProperties().withIpPools(ipPools);
        return this;
    }

    /**
     * Get the vlan property: Vlan to use for the subnet.
     *
     * @return the vlan value.
     */
    public Integer vlan() {
        return this.innerProperties() == null ? null : this.innerProperties().vlan();
    }

    /**
     * Set the vlan property: Vlan to use for the subnet.
     *
     * @param vlan the vlan value to set.
     * @return the VirtualNetworkPropertiesSubnetsItem object itself.
     */
    public VirtualNetworkPropertiesSubnetsItem withVlan(Integer vlan) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualNetworkPropertiesSubnetsItemAutoGenerated();
        }
        this.innerProperties().withVlan(vlan);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
