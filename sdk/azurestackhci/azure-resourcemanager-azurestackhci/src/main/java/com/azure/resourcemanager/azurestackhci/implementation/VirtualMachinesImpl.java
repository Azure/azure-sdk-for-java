// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurestackhci.fluent.models.VirtualMachinesInner;
import com.azure.resourcemanager.azurestackhci.models.ExtendedLocation;
import com.azure.resourcemanager.azurestackhci.models.GuestAgentProfile;
import com.azure.resourcemanager.azurestackhci.models.Identity;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningStateEnum;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachinePropertiesHardwareProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachinePropertiesNetworkProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachinePropertiesOsProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachinePropertiesSecurityProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachinePropertiesStorageProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachineStatus;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachineUpdateProperties;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachines;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachinesUpdateRequest;
import java.util.Collections;
import java.util.Map;

public final class VirtualMachinesImpl implements VirtualMachines, VirtualMachines.Definition, VirtualMachines.Update {
    private VirtualMachinesInner innerObject;

    private final com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ExtendedLocation extendedLocation() {
        return this.innerModel().extendedLocation();
    }

    public Identity identity() {
        return this.innerModel().identity();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public VirtualMachinePropertiesHardwareProfile hardwareProfile() {
        return this.innerModel().hardwareProfile();
    }

    public VirtualMachinePropertiesNetworkProfile networkProfile() {
        return this.innerModel().networkProfile();
    }

    public VirtualMachinePropertiesOsProfile osProfile() {
        return this.innerModel().osProfile();
    }

    public VirtualMachinePropertiesSecurityProfile securityProfile() {
        return this.innerModel().securityProfile();
    }

    public VirtualMachinePropertiesStorageProfile storageProfile() {
        return this.innerModel().storageProfile();
    }

    public ProvisioningStateEnum provisioningState() {
        return this.innerModel().provisioningState();
    }

    public VirtualMachineStatus status() {
        return this.innerModel().status();
    }

    public GuestAgentProfile guestAgentProfile() {
        return this.innerModel().guestAgentProfile();
    }

    public String vmId() {
        return this.innerModel().vmId();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public VirtualMachinesInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azurestackhci.AzureStackHciManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String virtualMachineName;

    private VirtualMachinesUpdateRequest updateVirtualMachines;

    public VirtualMachinesImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public VirtualMachines create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualMachinesOperations()
                .createOrUpdate(resourceGroupName, virtualMachineName, this.innerModel(), Context.NONE);
        return this;
    }

    public VirtualMachines create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualMachinesOperations()
                .createOrUpdate(resourceGroupName, virtualMachineName, this.innerModel(), context);
        return this;
    }

    VirtualMachinesImpl(String name, com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = new VirtualMachinesInner();
        this.serviceManager = serviceManager;
        this.virtualMachineName = name;
    }

    public VirtualMachinesImpl update() {
        this.updateVirtualMachines = new VirtualMachinesUpdateRequest();
        return this;
    }

    public VirtualMachines apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualMachinesOperations()
                .update(resourceGroupName, virtualMachineName, updateVirtualMachines, Context.NONE);
        return this;
    }

    public VirtualMachines apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualMachinesOperations()
                .update(resourceGroupName, virtualMachineName, updateVirtualMachines, context);
        return this;
    }

    VirtualMachinesImpl(
        VirtualMachinesInner innerObject, com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.virtualMachineName = Utils.getValueFromIdByName(innerObject.id(), "virtualMachines");
    }

    public VirtualMachines refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualMachinesOperations()
                .getByResourceGroupWithResponse(resourceGroupName, virtualMachineName, Context.NONE)
                .getValue();
        return this;
    }

    public VirtualMachines refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getVirtualMachinesOperations()
                .getByResourceGroupWithResponse(resourceGroupName, virtualMachineName, context)
                .getValue();
        return this;
    }

    public void start() {
        serviceManager.virtualMachinesOperations().start(resourceGroupName, virtualMachineName);
    }

    public void start(Context context) {
        serviceManager.virtualMachinesOperations().start(resourceGroupName, virtualMachineName, context);
    }

    public void stop() {
        serviceManager.virtualMachinesOperations().stop(resourceGroupName, virtualMachineName);
    }

    public void stop(Context context) {
        serviceManager.virtualMachinesOperations().stop(resourceGroupName, virtualMachineName, context);
    }

    public void restart() {
        serviceManager.virtualMachinesOperations().restart(resourceGroupName, virtualMachineName);
    }

    public void restart(Context context) {
        serviceManager.virtualMachinesOperations().restart(resourceGroupName, virtualMachineName, context);
    }

    public VirtualMachinesImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public VirtualMachinesImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public VirtualMachinesImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateVirtualMachines.withTags(tags);
            return this;
        }
    }

    public VirtualMachinesImpl withExtendedLocation(ExtendedLocation extendedLocation) {
        this.innerModel().withExtendedLocation(extendedLocation);
        return this;
    }

    public VirtualMachinesImpl withIdentity(Identity identity) {
        this.innerModel().withIdentity(identity);
        return this;
    }

    public VirtualMachinesImpl withHardwareProfile(VirtualMachinePropertiesHardwareProfile hardwareProfile) {
        this.innerModel().withHardwareProfile(hardwareProfile);
        return this;
    }

    public VirtualMachinesImpl withNetworkProfile(VirtualMachinePropertiesNetworkProfile networkProfile) {
        this.innerModel().withNetworkProfile(networkProfile);
        return this;
    }

    public VirtualMachinesImpl withOsProfile(VirtualMachinePropertiesOsProfile osProfile) {
        this.innerModel().withOsProfile(osProfile);
        return this;
    }

    public VirtualMachinesImpl withSecurityProfile(VirtualMachinePropertiesSecurityProfile securityProfile) {
        this.innerModel().withSecurityProfile(securityProfile);
        return this;
    }

    public VirtualMachinesImpl withStorageProfile(VirtualMachinePropertiesStorageProfile storageProfile) {
        this.innerModel().withStorageProfile(storageProfile);
        return this;
    }

    public VirtualMachinesImpl withGuestAgentProfile(GuestAgentProfile guestAgentProfile) {
        this.innerModel().withGuestAgentProfile(guestAgentProfile);
        return this;
    }

    public VirtualMachinesImpl withProperties(VirtualMachineUpdateProperties properties) {
        this.updateVirtualMachines.withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
