// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The StorageNetworks of a cluster.
 */
@Fluent
public final class StorageNetworks implements JsonSerializable<StorageNetworks> {
    /*
     * Name of the storage network.
     */
    private String name;

    /*
     * Name of the storage network adapter.
     */
    private String networkAdapterName;

    /*
     * ID specified for the VLAN storage network. This setting is applied to the network interfaces that route the
     * storage and VM migration traffic.
     */
    private String vlanId;

    /**
     * Creates an instance of StorageNetworks class.
     */
    public StorageNetworks() {
    }

    /**
     * Get the name property: Name of the storage network.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the storage network.
     * 
     * @param name the name value to set.
     * @return the StorageNetworks object itself.
     */
    public StorageNetworks withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the networkAdapterName property: Name of the storage network adapter.
     * 
     * @return the networkAdapterName value.
     */
    public String networkAdapterName() {
        return this.networkAdapterName;
    }

    /**
     * Set the networkAdapterName property: Name of the storage network adapter.
     * 
     * @param networkAdapterName the networkAdapterName value to set.
     * @return the StorageNetworks object itself.
     */
    public StorageNetworks withNetworkAdapterName(String networkAdapterName) {
        this.networkAdapterName = networkAdapterName;
        return this;
    }

    /**
     * Get the vlanId property: ID specified for the VLAN storage network. This setting is applied to the network
     * interfaces that route the storage and VM migration traffic.
     * 
     * @return the vlanId value.
     */
    public String vlanId() {
        return this.vlanId;
    }

    /**
     * Set the vlanId property: ID specified for the VLAN storage network. This setting is applied to the network
     * interfaces that route the storage and VM migration traffic.
     * 
     * @param vlanId the vlanId value to set.
     * @return the StorageNetworks object itself.
     */
    public StorageNetworks withVlanId(String vlanId) {
        this.vlanId = vlanId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("networkAdapterName", this.networkAdapterName);
        jsonWriter.writeStringField("vlanId", this.vlanId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageNetworks from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageNetworks if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageNetworks.
     */
    public static StorageNetworks fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageNetworks deserializedStorageNetworks = new StorageNetworks();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedStorageNetworks.name = reader.getString();
                } else if ("networkAdapterName".equals(fieldName)) {
                    deserializedStorageNetworks.networkAdapterName = reader.getString();
                } else if ("vlanId".equals(fieldName)) {
                    deserializedStorageNetworks.vlanId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageNetworks;
        });
    }
}
