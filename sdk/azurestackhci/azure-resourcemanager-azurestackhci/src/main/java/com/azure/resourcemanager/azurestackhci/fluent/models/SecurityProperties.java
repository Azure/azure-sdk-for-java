// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azurestackhci.models.ComplianceAssignmentType;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningState;
import com.azure.resourcemanager.azurestackhci.models.SecurityComplianceStatus;
import java.io.IOException;

/**
 * Security properties of the resource.
 */
@Fluent
public final class SecurityProperties implements JsonSerializable<SecurityProperties> {
    /*
     * Secured Core Compliance Assignment
     */
    private ComplianceAssignmentType securedCoreComplianceAssignment;

    /*
     * WDAC Compliance Assignment
     */
    private ComplianceAssignmentType wdacComplianceAssignment;

    /*
     * SMB encryption for intra-cluster traffic Compliance Assignment
     */
    private ComplianceAssignmentType smbEncryptionForIntraClusterTrafficComplianceAssignment;

    /*
     * Security Compliance Status
     */
    private SecurityComplianceStatus securityComplianceStatus;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of SecurityProperties class.
     */
    public SecurityProperties() {
    }

    /**
     * Get the securedCoreComplianceAssignment property: Secured Core Compliance Assignment.
     * 
     * @return the securedCoreComplianceAssignment value.
     */
    public ComplianceAssignmentType securedCoreComplianceAssignment() {
        return this.securedCoreComplianceAssignment;
    }

    /**
     * Set the securedCoreComplianceAssignment property: Secured Core Compliance Assignment.
     * 
     * @param securedCoreComplianceAssignment the securedCoreComplianceAssignment value to set.
     * @return the SecurityProperties object itself.
     */
    public SecurityProperties
        withSecuredCoreComplianceAssignment(ComplianceAssignmentType securedCoreComplianceAssignment) {
        this.securedCoreComplianceAssignment = securedCoreComplianceAssignment;
        return this;
    }

    /**
     * Get the wdacComplianceAssignment property: WDAC Compliance Assignment.
     * 
     * @return the wdacComplianceAssignment value.
     */
    public ComplianceAssignmentType wdacComplianceAssignment() {
        return this.wdacComplianceAssignment;
    }

    /**
     * Set the wdacComplianceAssignment property: WDAC Compliance Assignment.
     * 
     * @param wdacComplianceAssignment the wdacComplianceAssignment value to set.
     * @return the SecurityProperties object itself.
     */
    public SecurityProperties withWdacComplianceAssignment(ComplianceAssignmentType wdacComplianceAssignment) {
        this.wdacComplianceAssignment = wdacComplianceAssignment;
        return this;
    }

    /**
     * Get the smbEncryptionForIntraClusterTrafficComplianceAssignment property: SMB encryption for intra-cluster
     * traffic Compliance Assignment.
     * 
     * @return the smbEncryptionForIntraClusterTrafficComplianceAssignment value.
     */
    public ComplianceAssignmentType smbEncryptionForIntraClusterTrafficComplianceAssignment() {
        return this.smbEncryptionForIntraClusterTrafficComplianceAssignment;
    }

    /**
     * Set the smbEncryptionForIntraClusterTrafficComplianceAssignment property: SMB encryption for intra-cluster
     * traffic Compliance Assignment.
     * 
     * @param smbEncryptionForIntraClusterTrafficComplianceAssignment the
     * smbEncryptionForIntraClusterTrafficComplianceAssignment value to set.
     * @return the SecurityProperties object itself.
     */
    public SecurityProperties withSmbEncryptionForIntraClusterTrafficComplianceAssignment(
        ComplianceAssignmentType smbEncryptionForIntraClusterTrafficComplianceAssignment) {
        this.smbEncryptionForIntraClusterTrafficComplianceAssignment
            = smbEncryptionForIntraClusterTrafficComplianceAssignment;
        return this;
    }

    /**
     * Get the securityComplianceStatus property: Security Compliance Status.
     * 
     * @return the securityComplianceStatus value.
     */
    public SecurityComplianceStatus securityComplianceStatus() {
        return this.securityComplianceStatus;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The status of the last operation.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the SecurityProperties object itself.
     */
    public SecurityProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (securityComplianceStatus() != null) {
            securityComplianceStatus().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("securedCoreComplianceAssignment",
            this.securedCoreComplianceAssignment == null ? null : this.securedCoreComplianceAssignment.toString());
        jsonWriter.writeStringField("wdacComplianceAssignment",
            this.wdacComplianceAssignment == null ? null : this.wdacComplianceAssignment.toString());
        jsonWriter.writeStringField("smbEncryptionForIntraClusterTrafficComplianceAssignment",
            this.smbEncryptionForIntraClusterTrafficComplianceAssignment == null
                ? null
                : this.smbEncryptionForIntraClusterTrafficComplianceAssignment.toString());
        jsonWriter.writeStringField("provisioningState",
            this.provisioningState == null ? null : this.provisioningState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecurityProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecurityProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SecurityProperties.
     */
    public static SecurityProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecurityProperties deserializedSecurityProperties = new SecurityProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("securedCoreComplianceAssignment".equals(fieldName)) {
                    deserializedSecurityProperties.securedCoreComplianceAssignment
                        = ComplianceAssignmentType.fromString(reader.getString());
                } else if ("wdacComplianceAssignment".equals(fieldName)) {
                    deserializedSecurityProperties.wdacComplianceAssignment
                        = ComplianceAssignmentType.fromString(reader.getString());
                } else if ("smbEncryptionForIntraClusterTrafficComplianceAssignment".equals(fieldName)) {
                    deserializedSecurityProperties.smbEncryptionForIntraClusterTrafficComplianceAssignment
                        = ComplianceAssignmentType.fromString(reader.getString());
                } else if ("securityComplianceStatus".equals(fieldName)) {
                    deserializedSecurityProperties.securityComplianceStatus = SecurityComplianceStatus.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSecurityProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecurityProperties;
        });
    }
}
