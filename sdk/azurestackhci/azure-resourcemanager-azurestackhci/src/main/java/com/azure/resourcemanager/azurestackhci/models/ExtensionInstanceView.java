// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Describes the Extension Instance View. */
@Fluent
public final class ExtensionInstanceView {
    /*
     * The extension name.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Specifies the type of the extension; an example is "MicrosoftMonitoringAgent".
     */
    @JsonProperty(value = "type")
    private String type;

    /*
     * Specifies the version of the script handler.
     */
    @JsonProperty(value = "typeHandlerVersion")
    private String typeHandlerVersion;

    /*
     * Instance view status.
     */
    @JsonProperty(value = "status")
    private ExtensionInstanceViewStatus status;

    /** Creates an instance of ExtensionInstanceView class. */
    public ExtensionInstanceView() {
    }

    /**
     * Get the name property: The extension name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The extension name.
     *
     * @param name the name value to set.
     * @return the ExtensionInstanceView object itself.
     */
    public ExtensionInstanceView withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: Specifies the type of the extension; an example is "MicrosoftMonitoringAgent".
     *
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: Specifies the type of the extension; an example is "MicrosoftMonitoringAgent".
     *
     * @param type the type value to set.
     * @return the ExtensionInstanceView object itself.
     */
    public ExtensionInstanceView withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the typeHandlerVersion property: Specifies the version of the script handler.
     *
     * @return the typeHandlerVersion value.
     */
    public String typeHandlerVersion() {
        return this.typeHandlerVersion;
    }

    /**
     * Set the typeHandlerVersion property: Specifies the version of the script handler.
     *
     * @param typeHandlerVersion the typeHandlerVersion value to set.
     * @return the ExtensionInstanceView object itself.
     */
    public ExtensionInstanceView withTypeHandlerVersion(String typeHandlerVersion) {
        this.typeHandlerVersion = typeHandlerVersion;
        return this;
    }

    /**
     * Get the status property: Instance view status.
     *
     * @return the status value.
     */
    public ExtensionInstanceViewStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Instance view status.
     *
     * @param status the status value to set.
     * @return the ExtensionInstanceView object itself.
     */
    public ExtensionInstanceView withStatus(ExtensionInstanceViewStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() != null) {
            status().validate();
        }
    }
}
