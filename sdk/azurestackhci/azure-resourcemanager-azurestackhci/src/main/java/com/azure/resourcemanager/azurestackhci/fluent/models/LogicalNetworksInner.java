// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.azurestackhci.models.ExtendedLocation;
import com.azure.resourcemanager.azurestackhci.models.LogicalNetworkPropertiesDhcpOptions;
import com.azure.resourcemanager.azurestackhci.models.LogicalNetworkStatus;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningStateEnum;
import com.azure.resourcemanager.azurestackhci.models.Subnet;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The logical network resource definition. */
@Fluent
public final class LogicalNetworksInner extends Resource {
    /*
     * Properties under the logical network resource
     */
    @JsonProperty(value = "properties")
    private LogicalNetworkProperties innerProperties;

    /*
     * The extendedLocation of the resource.
     */
    @JsonProperty(value = "extendedLocation")
    private ExtendedLocation extendedLocation;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of LogicalNetworksInner class. */
    public LogicalNetworksInner() {
    }

    /**
     * Get the innerProperties property: Properties under the logical network resource.
     *
     * @return the innerProperties value.
     */
    private LogicalNetworkProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the extendedLocation property: The extendedLocation of the resource.
     *
     * @return the extendedLocation value.
     */
    public ExtendedLocation extendedLocation() {
        return this.extendedLocation;
    }

    /**
     * Set the extendedLocation property: The extendedLocation of the resource.
     *
     * @param extendedLocation the extendedLocation value to set.
     * @return the LogicalNetworksInner object itself.
     */
    public LogicalNetworksInner withExtendedLocation(ExtendedLocation extendedLocation) {
        this.extendedLocation = extendedLocation;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public LogicalNetworksInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LogicalNetworksInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the dhcpOptions property: DhcpOptions contains an array of DNS servers available to VMs deployed in the
     * logical network. Standard DHCP option for a subnet overrides logical network DHCP options.
     *
     * @return the dhcpOptions value.
     */
    public LogicalNetworkPropertiesDhcpOptions dhcpOptions() {
        return this.innerProperties() == null ? null : this.innerProperties().dhcpOptions();
    }

    /**
     * Set the dhcpOptions property: DhcpOptions contains an array of DNS servers available to VMs deployed in the
     * logical network. Standard DHCP option for a subnet overrides logical network DHCP options.
     *
     * @param dhcpOptions the dhcpOptions value to set.
     * @return the LogicalNetworksInner object itself.
     */
    public LogicalNetworksInner withDhcpOptions(LogicalNetworkPropertiesDhcpOptions dhcpOptions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LogicalNetworkProperties();
        }
        this.innerProperties().withDhcpOptions(dhcpOptions);
        return this;
    }

    /**
     * Get the subnets property: Subnet - list of subnets under the logical network.
     *
     * @return the subnets value.
     */
    public List<Subnet> subnets() {
        return this.innerProperties() == null ? null : this.innerProperties().subnets();
    }

    /**
     * Set the subnets property: Subnet - list of subnets under the logical network.
     *
     * @param subnets the subnets value to set.
     * @return the LogicalNetworksInner object itself.
     */
    public LogicalNetworksInner withSubnets(List<Subnet> subnets) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LogicalNetworkProperties();
        }
        this.innerProperties().withSubnets(subnets);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the logical network.
     *
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the vmSwitchName property: name of the network switch to be used for VMs.
     *
     * @return the vmSwitchName value.
     */
    public String vmSwitchName() {
        return this.innerProperties() == null ? null : this.innerProperties().vmSwitchName();
    }

    /**
     * Set the vmSwitchName property: name of the network switch to be used for VMs.
     *
     * @param vmSwitchName the vmSwitchName value to set.
     * @return the LogicalNetworksInner object itself.
     */
    public LogicalNetworksInner withVmSwitchName(String vmSwitchName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LogicalNetworkProperties();
        }
        this.innerProperties().withVmSwitchName(vmSwitchName);
        return this;
    }

    /**
     * Get the status property: The observed state of logical networks.
     *
     * @return the status value.
     */
    public LogicalNetworkStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (extendedLocation() != null) {
            extendedLocation().validate();
        }
    }
}
