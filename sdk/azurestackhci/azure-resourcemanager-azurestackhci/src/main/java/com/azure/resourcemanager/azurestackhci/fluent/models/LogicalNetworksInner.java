// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.azurestackhci.models.ExtendedLocation;
import com.azure.resourcemanager.azurestackhci.models.LogicalNetworkPropertiesDhcpOptions;
import com.azure.resourcemanager.azurestackhci.models.LogicalNetworkStatus;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningStateEnum;
import com.azure.resourcemanager.azurestackhci.models.Subnet;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The logical network resource definition.
 */
@Fluent
public final class LogicalNetworksInner extends Resource {
    /*
     * Properties under the logical network resource
     */
    private LogicalNetworkProperties innerProperties;

    /*
     * The extendedLocation of the resource.
     */
    private ExtendedLocation extendedLocation;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of LogicalNetworksInner class.
     */
    public LogicalNetworksInner() {
    }

    /**
     * Get the innerProperties property: Properties under the logical network resource.
     * 
     * @return the innerProperties value.
     */
    private LogicalNetworkProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the extendedLocation property: The extendedLocation of the resource.
     * 
     * @return the extendedLocation value.
     */
    public ExtendedLocation extendedLocation() {
        return this.extendedLocation;
    }

    /**
     * Set the extendedLocation property: The extendedLocation of the resource.
     * 
     * @param extendedLocation the extendedLocation value to set.
     * @return the LogicalNetworksInner object itself.
     */
    public LogicalNetworksInner withExtendedLocation(ExtendedLocation extendedLocation) {
        this.extendedLocation = extendedLocation;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogicalNetworksInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LogicalNetworksInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the dhcpOptions property: DhcpOptions contains an array of DNS servers available to VMs deployed in the
     * logical network. Standard DHCP option for a subnet overrides logical network DHCP options.
     * 
     * @return the dhcpOptions value.
     */
    public LogicalNetworkPropertiesDhcpOptions dhcpOptions() {
        return this.innerProperties() == null ? null : this.innerProperties().dhcpOptions();
    }

    /**
     * Set the dhcpOptions property: DhcpOptions contains an array of DNS servers available to VMs deployed in the
     * logical network. Standard DHCP option for a subnet overrides logical network DHCP options.
     * 
     * @param dhcpOptions the dhcpOptions value to set.
     * @return the LogicalNetworksInner object itself.
     */
    public LogicalNetworksInner withDhcpOptions(LogicalNetworkPropertiesDhcpOptions dhcpOptions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LogicalNetworkProperties();
        }
        this.innerProperties().withDhcpOptions(dhcpOptions);
        return this;
    }

    /**
     * Get the subnets property: Subnet - list of subnets under the logical network.
     * 
     * @return the subnets value.
     */
    public List<Subnet> subnets() {
        return this.innerProperties() == null ? null : this.innerProperties().subnets();
    }

    /**
     * Set the subnets property: Subnet - list of subnets under the logical network.
     * 
     * @param subnets the subnets value to set.
     * @return the LogicalNetworksInner object itself.
     */
    public LogicalNetworksInner withSubnets(List<Subnet> subnets) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LogicalNetworkProperties();
        }
        this.innerProperties().withSubnets(subnets);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the logical network.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStateEnum provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the vmSwitchName property: name of the network switch to be used for VMs.
     * 
     * @return the vmSwitchName value.
     */
    public String vmSwitchName() {
        return this.innerProperties() == null ? null : this.innerProperties().vmSwitchName();
    }

    /**
     * Set the vmSwitchName property: name of the network switch to be used for VMs.
     * 
     * @param vmSwitchName the vmSwitchName value to set.
     * @return the LogicalNetworksInner object itself.
     */
    public LogicalNetworksInner withVmSwitchName(String vmSwitchName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LogicalNetworkProperties();
        }
        this.innerProperties().withVmSwitchName(vmSwitchName);
        return this;
    }

    /**
     * Get the status property: The observed state of logical networks.
     * 
     * @return the status value.
     */
    public LogicalNetworkStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (extendedLocation() != null) {
            extendedLocation().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("extendedLocation", this.extendedLocation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LogicalNetworksInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LogicalNetworksInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LogicalNetworksInner.
     */
    public static LogicalNetworksInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LogicalNetworksInner deserializedLogicalNetworksInner = new LogicalNetworksInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedLogicalNetworksInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedLogicalNetworksInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedLogicalNetworksInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedLogicalNetworksInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedLogicalNetworksInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedLogicalNetworksInner.innerProperties = LogicalNetworkProperties.fromJson(reader);
                } else if ("extendedLocation".equals(fieldName)) {
                    deserializedLogicalNetworksInner.extendedLocation = ExtendedLocation.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedLogicalNetworksInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLogicalNetworksInner;
        });
    }
}
