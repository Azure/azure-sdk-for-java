// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The device Configuration for HCI device.
 */
@Immutable
public final class HciReportedProperties extends ReportedProperties {
    /*
     * HCI device network information.
     */
    private HciNetworkProfile networkProfile;

    /*
     * HCI device OS specific information.
     */
    private HciOsProfile osProfile;

    /*
     * Solution builder extension (SBE) deployment package information.
     */
    private SbeDeploymentPackageInfo sbeDeploymentPackageInfo;

    /*
     * edge device state.
     */
    private DeviceState deviceState;

    /*
     * Extensions details for edge device.
     */
    private ExtensionProfile extensionProfile;

    /**
     * Creates an instance of HciReportedProperties class.
     */
    public HciReportedProperties() {
    }

    /**
     * Get the networkProfile property: HCI device network information.
     * 
     * @return the networkProfile value.
     */
    public HciNetworkProfile networkProfile() {
        return this.networkProfile;
    }

    /**
     * Get the osProfile property: HCI device OS specific information.
     * 
     * @return the osProfile value.
     */
    public HciOsProfile osProfile() {
        return this.osProfile;
    }

    /**
     * Get the sbeDeploymentPackageInfo property: Solution builder extension (SBE) deployment package information.
     * 
     * @return the sbeDeploymentPackageInfo value.
     */
    public SbeDeploymentPackageInfo sbeDeploymentPackageInfo() {
        return this.sbeDeploymentPackageInfo;
    }

    /**
     * Get the deviceState property: edge device state.
     * 
     * @return the deviceState value.
     */
    @Override
    public DeviceState deviceState() {
        return this.deviceState;
    }

    /**
     * Get the extensionProfile property: Extensions details for edge device.
     * 
     * @return the extensionProfile value.
     */
    @Override
    public ExtensionProfile extensionProfile() {
        return this.extensionProfile;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (networkProfile() != null) {
            networkProfile().validate();
        }
        if (osProfile() != null) {
            osProfile().validate();
        }
        if (sbeDeploymentPackageInfo() != null) {
            sbeDeploymentPackageInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HciReportedProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HciReportedProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HciReportedProperties.
     */
    public static HciReportedProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HciReportedProperties deserializedHciReportedProperties = new HciReportedProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deviceState".equals(fieldName)) {
                    deserializedHciReportedProperties.deviceState = DeviceState.fromString(reader.getString());
                } else if ("extensionProfile".equals(fieldName)) {
                    deserializedHciReportedProperties.extensionProfile = ExtensionProfile.fromJson(reader);
                } else if ("networkProfile".equals(fieldName)) {
                    deserializedHciReportedProperties.networkProfile = HciNetworkProfile.fromJson(reader);
                } else if ("osProfile".equals(fieldName)) {
                    deserializedHciReportedProperties.osProfile = HciOsProfile.fromJson(reader);
                } else if ("sbeDeploymentPackageInfo".equals(fieldName)) {
                    deserializedHciReportedProperties.sbeDeploymentPackageInfo
                        = SbeDeploymentPackageInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHciReportedProperties;
        });
    }
}
