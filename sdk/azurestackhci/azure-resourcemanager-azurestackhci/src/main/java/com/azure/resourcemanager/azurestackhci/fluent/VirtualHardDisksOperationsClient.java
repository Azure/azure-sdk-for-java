// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.azurestackhci.fluent.models.VirtualHardDisksInner;
import com.azure.resourcemanager.azurestackhci.models.VirtualHardDisksUpdateRequest;

/** An instance of this class provides access to all the operations defined in VirtualHardDisksOperationsClient. */
public interface VirtualHardDisksOperationsClient {
    /**
     * Gets a virtual hard disk.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualHardDiskName Name of the virtual hard disk.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a virtual hard disk along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<VirtualHardDisksInner> getByResourceGroupWithResponse(
        String resourceGroupName, String virtualHardDiskName, Context context);

    /**
     * Gets a virtual hard disk.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualHardDiskName Name of the virtual hard disk.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a virtual hard disk.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    VirtualHardDisksInner getByResourceGroup(String resourceGroupName, String virtualHardDiskName);

    /**
     * The operation to create or update a virtual hard disk. Please note some properties can be set only during virtual
     * hard disk creation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualHardDiskName Name of the virtual hard disk.
     * @param virtualHardDisks The virtual hard disk resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the virtual hard disk resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<VirtualHardDisksInner>, VirtualHardDisksInner> beginCreateOrUpdate(
        String resourceGroupName, String virtualHardDiskName, VirtualHardDisksInner virtualHardDisks);

    /**
     * The operation to create or update a virtual hard disk. Please note some properties can be set only during virtual
     * hard disk creation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualHardDiskName Name of the virtual hard disk.
     * @param virtualHardDisks The virtual hard disk resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the virtual hard disk resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<VirtualHardDisksInner>, VirtualHardDisksInner> beginCreateOrUpdate(
        String resourceGroupName, String virtualHardDiskName, VirtualHardDisksInner virtualHardDisks, Context context);

    /**
     * The operation to create or update a virtual hard disk. Please note some properties can be set only during virtual
     * hard disk creation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualHardDiskName Name of the virtual hard disk.
     * @param virtualHardDisks The virtual hard disk resource definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the virtual hard disk resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    VirtualHardDisksInner createOrUpdate(
        String resourceGroupName, String virtualHardDiskName, VirtualHardDisksInner virtualHardDisks);

    /**
     * The operation to create or update a virtual hard disk. Please note some properties can be set only during virtual
     * hard disk creation.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualHardDiskName Name of the virtual hard disk.
     * @param virtualHardDisks The virtual hard disk resource definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the virtual hard disk resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    VirtualHardDisksInner createOrUpdate(
        String resourceGroupName, String virtualHardDiskName, VirtualHardDisksInner virtualHardDisks, Context context);

    /**
     * The operation to delete a virtual hard disk.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualHardDiskName Name of the virtual hard disk.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String virtualHardDiskName);

    /**
     * The operation to delete a virtual hard disk.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualHardDiskName Name of the virtual hard disk.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String virtualHardDiskName, Context context);

    /**
     * The operation to delete a virtual hard disk.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualHardDiskName Name of the virtual hard disk.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String virtualHardDiskName);

    /**
     * The operation to delete a virtual hard disk.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualHardDiskName Name of the virtual hard disk.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String virtualHardDiskName, Context context);

    /**
     * The operation to update a virtual hard disk.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualHardDiskName Name of the virtual hard disk.
     * @param virtualHardDisks The virtual hard disk resource patch definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the virtual hard disk resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<VirtualHardDisksInner>, VirtualHardDisksInner> beginUpdate(
        String resourceGroupName, String virtualHardDiskName, VirtualHardDisksUpdateRequest virtualHardDisks);

    /**
     * The operation to update a virtual hard disk.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualHardDiskName Name of the virtual hard disk.
     * @param virtualHardDisks The virtual hard disk resource patch definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the virtual hard disk resource definition.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<VirtualHardDisksInner>, VirtualHardDisksInner> beginUpdate(
        String resourceGroupName,
        String virtualHardDiskName,
        VirtualHardDisksUpdateRequest virtualHardDisks,
        Context context);

    /**
     * The operation to update a virtual hard disk.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualHardDiskName Name of the virtual hard disk.
     * @param virtualHardDisks The virtual hard disk resource patch definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the virtual hard disk resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    VirtualHardDisksInner update(
        String resourceGroupName, String virtualHardDiskName, VirtualHardDisksUpdateRequest virtualHardDisks);

    /**
     * The operation to update a virtual hard disk.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualHardDiskName Name of the virtual hard disk.
     * @param virtualHardDisks The virtual hard disk resource patch definition.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the virtual hard disk resource definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    VirtualHardDisksInner update(
        String resourceGroupName,
        String virtualHardDiskName,
        VirtualHardDisksUpdateRequest virtualHardDisks,
        Context context);

    /**
     * Lists all of the virtual hard disks in the specified resource group. Use the nextLink property in the response to
     * get the next page of virtual hard disks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<VirtualHardDisksInner> listByResourceGroup(String resourceGroupName);

    /**
     * Lists all of the virtual hard disks in the specified resource group. Use the nextLink property in the response to
     * get the next page of virtual hard disks.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<VirtualHardDisksInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Lists all of the virtual hard disks in the specified subscription. Use the nextLink property in the response to
     * get the next page of virtual hard disks.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<VirtualHardDisksInner> list();

    /**
     * Lists all of the virtual hard disks in the specified subscription. Use the nextLink property in the response to
     * get the next page of virtual hard disks.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<VirtualHardDisksInner> list(Context context);
}
