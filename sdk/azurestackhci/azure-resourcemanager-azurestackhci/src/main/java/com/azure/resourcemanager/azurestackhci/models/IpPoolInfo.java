// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The IpPoolInfo model.
 */
@Immutable
public final class IpPoolInfo implements JsonSerializable<IpPoolInfo> {
    /*
     * Number of IP addresses allocated from the IP Pool
     */
    private String used;

    /*
     * Number of IP addresses available in the IP Pool
     */
    private String available;

    /**
     * Creates an instance of IpPoolInfo class.
     */
    public IpPoolInfo() {
    }

    /**
     * Get the used property: Number of IP addresses allocated from the IP Pool.
     * 
     * @return the used value.
     */
    public String used() {
        return this.used;
    }

    /**
     * Get the available property: Number of IP addresses available in the IP Pool.
     * 
     * @return the available value.
     */
    public String available() {
        return this.available;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IpPoolInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IpPoolInfo if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the IpPoolInfo.
     */
    public static IpPoolInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IpPoolInfo deserializedIpPoolInfo = new IpPoolInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("used".equals(fieldName)) {
                    deserializedIpPoolInfo.used = reader.getString();
                } else if ("available".equals(fieldName)) {
                    deserializedIpPoolInfo.available = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIpPoolInfo;
        });
    }
}
