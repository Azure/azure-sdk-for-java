// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurestackhci.models.GuestCredential;
import com.azure.resourcemanager.azurestackhci.models.HttpProxyConfiguration;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningAction;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Defines the GuestAgent. */
@Fluent
public final class GuestAgentInner extends ProxyResource {
    /*
     * Resource properties.
     */
    @JsonProperty(value = "properties", required = true)
    private GuestAgentProperties innerProperties = new GuestAgentProperties();

    /** Creates an instance of GuestAgentInner class. */
    public GuestAgentInner() {
    }

    /**
     * Get the innerProperties property: Resource properties.
     *
     * @return the innerProperties value.
     */
    private GuestAgentProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the credentials property: Username / Password Credentials to provision guest agent.
     *
     * @return the credentials value.
     */
    public GuestCredential credentials() {
        return this.innerProperties() == null ? null : this.innerProperties().credentials();
    }

    /**
     * Set the credentials property: Username / Password Credentials to provision guest agent.
     *
     * @param credentials the credentials value to set.
     * @return the GuestAgentInner object itself.
     */
    public GuestAgentInner withCredentials(GuestCredential credentials) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GuestAgentProperties();
        }
        this.innerProperties().withCredentials(credentials);
        return this;
    }

    /**
     * Get the httpProxyConfig property: HTTP Proxy configuration for the VM.
     *
     * @return the httpProxyConfig value.
     */
    public HttpProxyConfiguration httpProxyConfig() {
        return this.innerProperties() == null ? null : this.innerProperties().httpProxyConfig();
    }

    /**
     * Set the httpProxyConfig property: HTTP Proxy configuration for the VM.
     *
     * @param httpProxyConfig the httpProxyConfig value to set.
     * @return the GuestAgentInner object itself.
     */
    public GuestAgentInner withHttpProxyConfig(HttpProxyConfiguration httpProxyConfig) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GuestAgentProperties();
        }
        this.innerProperties().withHttpProxyConfig(httpProxyConfig);
        return this;
    }

    /**
     * Get the provisioningAction property: The guest agent provisioning action.
     *
     * @return the provisioningAction value.
     */
    public ProvisioningAction provisioningAction() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningAction();
    }

    /**
     * Set the provisioningAction property: The guest agent provisioning action.
     *
     * @param provisioningAction the provisioningAction value to set.
     * @return the GuestAgentInner object itself.
     */
    public GuestAgentInner withProvisioningAction(ProvisioningAction provisioningAction) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GuestAgentProperties();
        }
        this.innerProperties().withProvisioningAction(provisioningAction);
        return this;
    }

    /**
     * Get the status property: The guest agent status.
     *
     * @return the status value.
     */
    public String status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the provisioningState property: The provisioning state.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property innerProperties in model GuestAgentInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GuestAgentInner.class);
}
