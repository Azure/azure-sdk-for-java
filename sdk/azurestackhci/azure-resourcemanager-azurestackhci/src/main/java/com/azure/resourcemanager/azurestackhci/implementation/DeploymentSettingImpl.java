// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurestackhci.fluent.models.DeploymentSettingInner;
import com.azure.resourcemanager.azurestackhci.models.DeploymentConfiguration;
import com.azure.resourcemanager.azurestackhci.models.DeploymentMode;
import com.azure.resourcemanager.azurestackhci.models.DeploymentSetting;
import com.azure.resourcemanager.azurestackhci.models.EceReportedProperties;
import com.azure.resourcemanager.azurestackhci.models.OperationType;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningState;
import java.util.Collections;
import java.util.List;

public final class DeploymentSettingImpl
    implements DeploymentSetting, DeploymentSetting.Definition, DeploymentSetting.Update {
    private DeploymentSettingInner innerObject;

    private final com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public List<String> arcNodeResourceIds() {
        List<String> inner = this.innerModel().arcNodeResourceIds();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public DeploymentMode deploymentMode() {
        return this.innerModel().deploymentMode();
    }

    public OperationType operationType() {
        return this.innerModel().operationType();
    }

    public DeploymentConfiguration deploymentConfiguration() {
        return this.innerModel().deploymentConfiguration();
    }

    public EceReportedProperties reportedProperties() {
        return this.innerModel().reportedProperties();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public DeploymentSettingInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azurestackhci.AzureStackHciManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String clusterName;

    private String deploymentSettingsName;

    public DeploymentSettingImpl withExistingCluster(String resourceGroupName, String clusterName) {
        this.resourceGroupName = resourceGroupName;
        this.clusterName = clusterName;
        return this;
    }

    public DeploymentSetting create() {
        this.innerObject = serviceManager.serviceClient()
            .getDeploymentSettings()
            .createOrUpdate(resourceGroupName, clusterName, deploymentSettingsName, this.innerModel(), Context.NONE);
        return this;
    }

    public DeploymentSetting create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getDeploymentSettings()
            .createOrUpdate(resourceGroupName, clusterName, deploymentSettingsName, this.innerModel(), context);
        return this;
    }

    DeploymentSettingImpl(String name, com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = new DeploymentSettingInner();
        this.serviceManager = serviceManager;
        this.deploymentSettingsName = name;
    }

    public DeploymentSettingImpl update() {
        return this;
    }

    public DeploymentSetting apply() {
        this.innerObject = serviceManager.serviceClient()
            .getDeploymentSettings()
            .createOrUpdate(resourceGroupName, clusterName, deploymentSettingsName, this.innerModel(), Context.NONE);
        return this;
    }

    public DeploymentSetting apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getDeploymentSettings()
            .createOrUpdate(resourceGroupName, clusterName, deploymentSettingsName, this.innerModel(), context);
        return this;
    }

    DeploymentSettingImpl(DeploymentSettingInner innerObject,
        com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.clusterName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "clusters");
        this.deploymentSettingsName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "deploymentSettings");
    }

    public DeploymentSetting refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getDeploymentSettings()
            .getWithResponse(resourceGroupName, clusterName, deploymentSettingsName, Context.NONE)
            .getValue();
        return this;
    }

    public DeploymentSetting refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getDeploymentSettings()
            .getWithResponse(resourceGroupName, clusterName, deploymentSettingsName, context)
            .getValue();
        return this;
    }

    public DeploymentSettingImpl withArcNodeResourceIds(List<String> arcNodeResourceIds) {
        this.innerModel().withArcNodeResourceIds(arcNodeResourceIds);
        return this;
    }

    public DeploymentSettingImpl withDeploymentMode(DeploymentMode deploymentMode) {
        this.innerModel().withDeploymentMode(deploymentMode);
        return this;
    }

    public DeploymentSettingImpl withOperationType(OperationType operationType) {
        this.innerModel().withOperationType(operationType);
        return this;
    }

    public DeploymentSettingImpl withDeploymentConfiguration(DeploymentConfiguration deploymentConfiguration) {
        this.innerModel().withDeploymentConfiguration(deploymentConfiguration);
        return this;
    }
}
