// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Progress representation of the update run steps.
 */
@Fluent
public final class Step implements JsonSerializable<Step> {
    /*
     * Name of the step.
     */
    private String name;

    /*
     * More detailed description of the step.
     */
    private String description;

    /*
     * Error message, specified if the step is in a failed state.
     */
    private String errorMessage;

    /*
     * Status of the step, bubbled up from the ECE action plan for installation attempts. Values are: 'Success',
     * 'Error', 'InProgress', and 'Unknown status'.
     */
    private String status;

    /*
     * When the step started, or empty if it has not started executing.
     */
    private OffsetDateTime startTimeUtc;

    /*
     * When the step reached a terminal state.
     */
    private OffsetDateTime endTimeUtc;

    /*
     * Completion time of this step or the last completed sub-step.
     */
    private OffsetDateTime lastUpdatedTimeUtc;

    /*
     * Expected execution time of a given step. This is optionally authored in the update action plan and can be empty.
     */
    private String expectedExecutionTime;

    /*
     * Recursive model for child steps of this step.
     */
    private List<Step> steps;

    /**
     * Creates an instance of Step class.
     */
    public Step() {
    }

    /**
     * Get the name property: Name of the step.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the step.
     * 
     * @param name the name value to set.
     * @return the Step object itself.
     */
    public Step withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the description property: More detailed description of the step.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: More detailed description of the step.
     * 
     * @param description the description value to set.
     * @return the Step object itself.
     */
    public Step withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the errorMessage property: Error message, specified if the step is in a failed state.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Set the errorMessage property: Error message, specified if the step is in a failed state.
     * 
     * @param errorMessage the errorMessage value to set.
     * @return the Step object itself.
     */
    public Step withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Get the status property: Status of the step, bubbled up from the ECE action plan for installation attempts.
     * Values are: 'Success', 'Error', 'InProgress', and 'Unknown status'.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the step, bubbled up from the ECE action plan for installation attempts.
     * Values are: 'Success', 'Error', 'InProgress', and 'Unknown status'.
     * 
     * @param status the status value to set.
     * @return the Step object itself.
     */
    public Step withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the startTimeUtc property: When the step started, or empty if it has not started executing.
     * 
     * @return the startTimeUtc value.
     */
    public OffsetDateTime startTimeUtc() {
        return this.startTimeUtc;
    }

    /**
     * Set the startTimeUtc property: When the step started, or empty if it has not started executing.
     * 
     * @param startTimeUtc the startTimeUtc value to set.
     * @return the Step object itself.
     */
    public Step withStartTimeUtc(OffsetDateTime startTimeUtc) {
        this.startTimeUtc = startTimeUtc;
        return this;
    }

    /**
     * Get the endTimeUtc property: When the step reached a terminal state.
     * 
     * @return the endTimeUtc value.
     */
    public OffsetDateTime endTimeUtc() {
        return this.endTimeUtc;
    }

    /**
     * Set the endTimeUtc property: When the step reached a terminal state.
     * 
     * @param endTimeUtc the endTimeUtc value to set.
     * @return the Step object itself.
     */
    public Step withEndTimeUtc(OffsetDateTime endTimeUtc) {
        this.endTimeUtc = endTimeUtc;
        return this;
    }

    /**
     * Get the lastUpdatedTimeUtc property: Completion time of this step or the last completed sub-step.
     * 
     * @return the lastUpdatedTimeUtc value.
     */
    public OffsetDateTime lastUpdatedTimeUtc() {
        return this.lastUpdatedTimeUtc;
    }

    /**
     * Set the lastUpdatedTimeUtc property: Completion time of this step or the last completed sub-step.
     * 
     * @param lastUpdatedTimeUtc the lastUpdatedTimeUtc value to set.
     * @return the Step object itself.
     */
    public Step withLastUpdatedTimeUtc(OffsetDateTime lastUpdatedTimeUtc) {
        this.lastUpdatedTimeUtc = lastUpdatedTimeUtc;
        return this;
    }

    /**
     * Get the expectedExecutionTime property: Expected execution time of a given step. This is optionally authored in
     * the update action plan and can be empty.
     * 
     * @return the expectedExecutionTime value.
     */
    public String expectedExecutionTime() {
        return this.expectedExecutionTime;
    }

    /**
     * Set the expectedExecutionTime property: Expected execution time of a given step. This is optionally authored in
     * the update action plan and can be empty.
     * 
     * @param expectedExecutionTime the expectedExecutionTime value to set.
     * @return the Step object itself.
     */
    public Step withExpectedExecutionTime(String expectedExecutionTime) {
        this.expectedExecutionTime = expectedExecutionTime;
        return this;
    }

    /**
     * Get the steps property: Recursive model for child steps of this step.
     * 
     * @return the steps value.
     */
    public List<Step> steps() {
        return this.steps;
    }

    /**
     * Set the steps property: Recursive model for child steps of this step.
     * 
     * @param steps the steps value to set.
     * @return the Step object itself.
     */
    public Step withSteps(List<Step> steps) {
        this.steps = steps;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (steps() != null) {
            steps().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("errorMessage", this.errorMessage);
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("startTimeUtc",
            this.startTimeUtc == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTimeUtc));
        jsonWriter.writeStringField("endTimeUtc",
            this.endTimeUtc == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTimeUtc));
        jsonWriter.writeStringField("lastUpdatedTimeUtc",
            this.lastUpdatedTimeUtc == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUpdatedTimeUtc));
        jsonWriter.writeStringField("expectedExecutionTime", this.expectedExecutionTime);
        jsonWriter.writeArrayField("steps", this.steps, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Step from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Step if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Step.
     */
    public static Step fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Step deserializedStep = new Step();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedStep.name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedStep.description = reader.getString();
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedStep.errorMessage = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedStep.status = reader.getString();
                } else if ("startTimeUtc".equals(fieldName)) {
                    deserializedStep.startTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTimeUtc".equals(fieldName)) {
                    deserializedStep.endTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastUpdatedTimeUtc".equals(fieldName)) {
                    deserializedStep.lastUpdatedTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("expectedExecutionTime".equals(fieldName)) {
                    deserializedStep.expectedExecutionTime = reader.getString();
                } else if ("steps".equals(fieldName)) {
                    List<Step> steps = reader.readArray(reader1 -> Step.fromJson(reader1));
                    deserializedStep.steps = steps;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStep;
        });
    }
}
