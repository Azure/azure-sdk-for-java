// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.fluent.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Progress representation of the update run steps. */
@Fluent
public final class Step {
    /*
     * Name of the step.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * More detailed description of the step.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * Error message, specified if the step is in a failed state.
     */
    @JsonProperty(value = "errorMessage")
    private String errorMessage;

    /*
     * Status of the step, bubbled up from the ECE action plan for installation attempts. Values are: 'Success',
     * 'Error', 'InProgress', and 'Unknown status'.
     */
    @JsonProperty(value = "status")
    private String status;

    /*
     * When the step started, or empty if it has not started executing.
     */
    @JsonProperty(value = "startTimeUtc")
    private OffsetDateTime startTimeUtc;

    /*
     * When the step reached a terminal state.
     */
    @JsonProperty(value = "endTimeUtc")
    private OffsetDateTime endTimeUtc;

    /*
     * Completion time of this step or the last completed sub-step.
     */
    @JsonProperty(value = "lastUpdatedTimeUtc")
    private OffsetDateTime lastUpdatedTimeUtc;

    /*
     * Expected execution time of a given step. This is optionally authored in the update action plan and can be empty.
     */
    @JsonProperty(value = "expectedExecutionTime")
    private String expectedExecutionTime;

    /*
     * Recursive model for child steps of this step.
     */
    @JsonProperty(value = "steps")
    private List<Step> steps;

    /** Creates an instance of Step class. */
    public Step() {
    }

    /**
     * Get the name property: Name of the step.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the step.
     *
     * @param name the name value to set.
     * @return the Step object itself.
     */
    public Step withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the description property: More detailed description of the step.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: More detailed description of the step.
     *
     * @param description the description value to set.
     * @return the Step object itself.
     */
    public Step withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the errorMessage property: Error message, specified if the step is in a failed state.
     *
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Set the errorMessage property: Error message, specified if the step is in a failed state.
     *
     * @param errorMessage the errorMessage value to set.
     * @return the Step object itself.
     */
    public Step withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Get the status property: Status of the step, bubbled up from the ECE action plan for installation attempts.
     * Values are: 'Success', 'Error', 'InProgress', and 'Unknown status'.
     *
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the step, bubbled up from the ECE action plan for installation attempts.
     * Values are: 'Success', 'Error', 'InProgress', and 'Unknown status'.
     *
     * @param status the status value to set.
     * @return the Step object itself.
     */
    public Step withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the startTimeUtc property: When the step started, or empty if it has not started executing.
     *
     * @return the startTimeUtc value.
     */
    public OffsetDateTime startTimeUtc() {
        return this.startTimeUtc;
    }

    /**
     * Set the startTimeUtc property: When the step started, or empty if it has not started executing.
     *
     * @param startTimeUtc the startTimeUtc value to set.
     * @return the Step object itself.
     */
    public Step withStartTimeUtc(OffsetDateTime startTimeUtc) {
        this.startTimeUtc = startTimeUtc;
        return this;
    }

    /**
     * Get the endTimeUtc property: When the step reached a terminal state.
     *
     * @return the endTimeUtc value.
     */
    public OffsetDateTime endTimeUtc() {
        return this.endTimeUtc;
    }

    /**
     * Set the endTimeUtc property: When the step reached a terminal state.
     *
     * @param endTimeUtc the endTimeUtc value to set.
     * @return the Step object itself.
     */
    public Step withEndTimeUtc(OffsetDateTime endTimeUtc) {
        this.endTimeUtc = endTimeUtc;
        return this;
    }

    /**
     * Get the lastUpdatedTimeUtc property: Completion time of this step or the last completed sub-step.
     *
     * @return the lastUpdatedTimeUtc value.
     */
    public OffsetDateTime lastUpdatedTimeUtc() {
        return this.lastUpdatedTimeUtc;
    }

    /**
     * Set the lastUpdatedTimeUtc property: Completion time of this step or the last completed sub-step.
     *
     * @param lastUpdatedTimeUtc the lastUpdatedTimeUtc value to set.
     * @return the Step object itself.
     */
    public Step withLastUpdatedTimeUtc(OffsetDateTime lastUpdatedTimeUtc) {
        this.lastUpdatedTimeUtc = lastUpdatedTimeUtc;
        return this;
    }

    /**
     * Get the expectedExecutionTime property: Expected execution time of a given step. This is optionally authored in
     * the update action plan and can be empty.
     *
     * @return the expectedExecutionTime value.
     */
    public String expectedExecutionTime() {
        return this.expectedExecutionTime;
    }

    /**
     * Set the expectedExecutionTime property: Expected execution time of a given step. This is optionally authored in
     * the update action plan and can be empty.
     *
     * @param expectedExecutionTime the expectedExecutionTime value to set.
     * @return the Step object itself.
     */
    public Step withExpectedExecutionTime(String expectedExecutionTime) {
        this.expectedExecutionTime = expectedExecutionTime;
        return this;
    }

    /**
     * Get the steps property: Recursive model for child steps of this step.
     *
     * @return the steps value.
     */
    public List<Step> steps() {
        return this.steps;
    }

    /**
     * Set the steps property: Recursive model for child steps of this step.
     *
     * @param steps the steps value to set.
     * @return the Step object itself.
     */
    public Step withSteps(List<Step> steps) {
        this.steps = steps;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (steps() != null) {
            steps().forEach(e -> e.validate());
        }
    }
}
