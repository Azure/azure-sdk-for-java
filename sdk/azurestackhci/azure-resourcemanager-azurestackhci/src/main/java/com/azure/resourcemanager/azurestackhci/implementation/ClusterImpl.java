// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurestackhci.fluent.models.ClusterInner;
import com.azure.resourcemanager.azurestackhci.models.Cluster;
import com.azure.resourcemanager.azurestackhci.models.ClusterReportedProperties;
import com.azure.resourcemanager.azurestackhci.models.ClusterUpdate;
import com.azure.resourcemanager.azurestackhci.models.CreatedByType;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningState;
import com.azure.resourcemanager.azurestackhci.models.Status;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.Map;

public final class ClusterImpl implements Cluster, Cluster.Definition, Cluster.Update {
    private ClusterInner innerObject;

    private final com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Status status() {
        return this.innerModel().status();
    }

    public String cloudId() {
        return this.innerModel().cloudId();
    }

    public String aadClientId() {
        return this.innerModel().aadClientId();
    }

    public String aadTenantId() {
        return this.innerModel().aadTenantId();
    }

    public ClusterReportedProperties reportedProperties() {
        return this.innerModel().reportedProperties();
    }

    public Float trialDaysRemaining() {
        return this.innerModel().trialDaysRemaining();
    }

    public String billingModel() {
        return this.innerModel().billingModel();
    }

    public OffsetDateTime registrationTimestamp() {
        return this.innerModel().registrationTimestamp();
    }

    public OffsetDateTime lastSyncTimestamp() {
        return this.innerModel().lastSyncTimestamp();
    }

    public OffsetDateTime lastBillingTimestamp() {
        return this.innerModel().lastBillingTimestamp();
    }

    public String createdBy() {
        return this.innerModel().createdBy();
    }

    public CreatedByType createdByType() {
        return this.innerModel().createdByType();
    }

    public OffsetDateTime createdAt() {
        return this.innerModel().createdAt();
    }

    public String lastModifiedBy() {
        return this.innerModel().lastModifiedBy();
    }

    public CreatedByType lastModifiedByType() {
        return this.innerModel().lastModifiedByType();
    }

    public OffsetDateTime lastModifiedAt() {
        return this.innerModel().lastModifiedAt();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public ClusterInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azurestackhci.AzureStackHciManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String clusterName;

    private ClusterUpdate updateCluster;

    public ClusterImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Cluster create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getClusters()
                .createWithResponse(resourceGroupName, clusterName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public Cluster create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getClusters()
                .createWithResponse(resourceGroupName, clusterName, this.innerModel(), context)
                .getValue();
        return this;
    }

    ClusterImpl(String name, com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = new ClusterInner();
        this.serviceManager = serviceManager;
        this.clusterName = name;
    }

    public ClusterImpl update() {
        this.updateCluster = new ClusterUpdate();
        return this;
    }

    public Cluster apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getClusters()
                .updateWithResponse(resourceGroupName, clusterName, updateCluster, Context.NONE)
                .getValue();
        return this;
    }

    public Cluster apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getClusters()
                .updateWithResponse(resourceGroupName, clusterName, updateCluster, context)
                .getValue();
        return this;
    }

    ClusterImpl(ClusterInner innerObject, com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.clusterName = Utils.getValueFromIdByName(innerObject.id(), "clusters");
    }

    public Cluster refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getClusters()
                .getByResourceGroupWithResponse(resourceGroupName, clusterName, Context.NONE)
                .getValue();
        return this;
    }

    public Cluster refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getClusters()
                .getByResourceGroupWithResponse(resourceGroupName, clusterName, context)
                .getValue();
        return this;
    }

    public ClusterImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ClusterImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ClusterImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateCluster.withTags(tags);
            return this;
        }
    }

    public ClusterImpl withAadClientId(String aadClientId) {
        this.innerModel().withAadClientId(aadClientId);
        return this;
    }

    public ClusterImpl withAadTenantId(String aadTenantId) {
        this.innerModel().withAadTenantId(aadTenantId);
        return this;
    }

    public ClusterImpl withReportedProperties(ClusterReportedProperties reportedProperties) {
        this.innerModel().withReportedProperties(reportedProperties);
        return this;
    }

    public ClusterImpl withCreatedBy(String createdBy) {
        this.innerModel().withCreatedBy(createdBy);
        return this;
    }

    public ClusterImpl withCreatedByType(CreatedByType createdByType) {
        this.innerModel().withCreatedByType(createdByType);
        return this;
    }

    public ClusterImpl withCreatedAt(OffsetDateTime createdAt) {
        this.innerModel().withCreatedAt(createdAt);
        return this;
    }

    public ClusterImpl withLastModifiedBy(String lastModifiedBy) {
        this.innerModel().withLastModifiedBy(lastModifiedBy);
        return this;
    }

    public ClusterImpl withLastModifiedByType(CreatedByType lastModifiedByType) {
        this.innerModel().withLastModifiedByType(lastModifiedByType);
        return this;
    }

    public ClusterImpl withLastModifiedAt(OffsetDateTime lastModifiedAt) {
        this.innerModel().withLastModifiedAt(lastModifiedAt);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
