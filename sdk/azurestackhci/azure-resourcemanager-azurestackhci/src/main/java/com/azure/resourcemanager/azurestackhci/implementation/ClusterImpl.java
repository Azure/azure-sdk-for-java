// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurestackhci.fluent.models.ClusterInner;
import com.azure.resourcemanager.azurestackhci.models.Cluster;
import com.azure.resourcemanager.azurestackhci.models.ClusterDesiredProperties;
import com.azure.resourcemanager.azurestackhci.models.ClusterIdentityResponse;
import com.azure.resourcemanager.azurestackhci.models.ClusterPatch;
import com.azure.resourcemanager.azurestackhci.models.ClusterReportedProperties;
import com.azure.resourcemanager.azurestackhci.models.ConnectivityStatus;
import com.azure.resourcemanager.azurestackhci.models.IsolatedVmAttestationConfiguration;
import com.azure.resourcemanager.azurestackhci.models.LogCollectionProperties;
import com.azure.resourcemanager.azurestackhci.models.LogCollectionRequest;
import com.azure.resourcemanager.azurestackhci.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningState;
import com.azure.resourcemanager.azurestackhci.models.RemoteSupportProperties;
import com.azure.resourcemanager.azurestackhci.models.RemoteSupportRequest;
import com.azure.resourcemanager.azurestackhci.models.SoftwareAssuranceChangeRequest;
import com.azure.resourcemanager.azurestackhci.models.SoftwareAssuranceProperties;
import com.azure.resourcemanager.azurestackhci.models.Status;
import com.azure.resourcemanager.azurestackhci.models.UploadCertificateRequest;
import com.azure.resourcemanager.azurestackhci.models.UserAssignedIdentity;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.Map;
import java.util.UUID;

public final class ClusterImpl implements Cluster, Cluster.Definition, Cluster.Update {
    private ClusterInner innerObject;

    private final com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public UUID principalId() {
        return this.innerModel().principalId();
    }

    public UUID tenantId() {
        return this.innerModel().tenantId();
    }

    public ManagedServiceIdentityType typeIdentityType() {
        return this.innerModel().typeIdentityType();
    }

    public Map<String, UserAssignedIdentity> userAssignedIdentities() {
        Map<String, UserAssignedIdentity> inner = this.innerModel().userAssignedIdentities();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Status status() {
        return this.innerModel().status();
    }

    public ConnectivityStatus connectivityStatus() {
        return this.innerModel().connectivityStatus();
    }

    public String cloudId() {
        return this.innerModel().cloudId();
    }

    public String cloudManagementEndpoint() {
        return this.innerModel().cloudManagementEndpoint();
    }

    public String aadClientId() {
        return this.innerModel().aadClientId();
    }

    public String aadTenantId() {
        return this.innerModel().aadTenantId();
    }

    public String aadApplicationObjectId() {
        return this.innerModel().aadApplicationObjectId();
    }

    public String aadServicePrincipalObjectId() {
        return this.innerModel().aadServicePrincipalObjectId();
    }

    public SoftwareAssuranceProperties softwareAssuranceProperties() {
        return this.innerModel().softwareAssuranceProperties();
    }

    public LogCollectionProperties logCollectionProperties() {
        return this.innerModel().logCollectionProperties();
    }

    public RemoteSupportProperties remoteSupportProperties() {
        return this.innerModel().remoteSupportProperties();
    }

    public ClusterDesiredProperties desiredProperties() {
        return this.innerModel().desiredProperties();
    }

    public ClusterReportedProperties reportedProperties() {
        return this.innerModel().reportedProperties();
    }

    public IsolatedVmAttestationConfiguration isolatedVmAttestationConfiguration() {
        return this.innerModel().isolatedVmAttestationConfiguration();
    }

    public Float trialDaysRemaining() {
        return this.innerModel().trialDaysRemaining();
    }

    public String billingModel() {
        return this.innerModel().billingModel();
    }

    public OffsetDateTime registrationTimestamp() {
        return this.innerModel().registrationTimestamp();
    }

    public OffsetDateTime lastSyncTimestamp() {
        return this.innerModel().lastSyncTimestamp();
    }

    public OffsetDateTime lastBillingTimestamp() {
        return this.innerModel().lastBillingTimestamp();
    }

    public String serviceEndpoint() {
        return this.innerModel().serviceEndpoint();
    }

    public String resourceProviderObjectId() {
        return this.innerModel().resourceProviderObjectId();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ClusterInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.azurestackhci.AzureStackHciManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String clusterName;

    private ClusterPatch updateCluster;

    public ClusterImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Cluster create() {
        this.innerObject = serviceManager.serviceClient()
            .getClusters()
            .createWithResponse(resourceGroupName, clusterName, this.innerModel(), Context.NONE)
            .getValue();
        return this;
    }

    public Cluster create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getClusters()
            .createWithResponse(resourceGroupName, clusterName, this.innerModel(), context)
            .getValue();
        return this;
    }

    ClusterImpl(String name, com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = new ClusterInner();
        this.serviceManager = serviceManager;
        this.clusterName = name;
    }

    public ClusterImpl update() {
        this.updateCluster = new ClusterPatch();
        return this;
    }

    public Cluster apply() {
        this.innerObject = serviceManager.serviceClient()
            .getClusters()
            .updateWithResponse(resourceGroupName, clusterName, updateCluster, Context.NONE)
            .getValue();
        return this;
    }

    public Cluster apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getClusters()
            .updateWithResponse(resourceGroupName, clusterName, updateCluster, context)
            .getValue();
        return this;
    }

    ClusterImpl(ClusterInner innerObject, com.azure.resourcemanager.azurestackhci.AzureStackHciManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.clusterName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "clusters");
    }

    public Cluster refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getClusters()
            .getByResourceGroupWithResponse(resourceGroupName, clusterName, Context.NONE)
            .getValue();
        return this;
    }

    public Cluster refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getClusters()
            .getByResourceGroupWithResponse(resourceGroupName, clusterName, context)
            .getValue();
        return this;
    }

    public void uploadCertificate(UploadCertificateRequest uploadCertificateRequest) {
        serviceManager.clusters().uploadCertificate(resourceGroupName, clusterName, uploadCertificateRequest);
    }

    public void uploadCertificate(UploadCertificateRequest uploadCertificateRequest, Context context) {
        serviceManager.clusters().uploadCertificate(resourceGroupName, clusterName, uploadCertificateRequest, context);
    }

    public ClusterIdentityResponse createIdentity() {
        return serviceManager.clusters().createIdentity(resourceGroupName, clusterName);
    }

    public ClusterIdentityResponse createIdentity(Context context) {
        return serviceManager.clusters().createIdentity(resourceGroupName, clusterName, context);
    }

    public Cluster extendSoftwareAssuranceBenefit(SoftwareAssuranceChangeRequest softwareAssuranceChangeRequest) {
        return serviceManager.clusters()
            .extendSoftwareAssuranceBenefit(resourceGroupName, clusterName, softwareAssuranceChangeRequest);
    }

    public Cluster extendSoftwareAssuranceBenefit(SoftwareAssuranceChangeRequest softwareAssuranceChangeRequest,
        Context context) {
        return serviceManager.clusters()
            .extendSoftwareAssuranceBenefit(resourceGroupName, clusterName, softwareAssuranceChangeRequest, context);
    }

    public Cluster triggerLogCollection(LogCollectionRequest logCollectionRequest) {
        return serviceManager.clusters().triggerLogCollection(resourceGroupName, clusterName, logCollectionRequest);
    }

    public Cluster triggerLogCollection(LogCollectionRequest logCollectionRequest, Context context) {
        return serviceManager.clusters()
            .triggerLogCollection(resourceGroupName, clusterName, logCollectionRequest, context);
    }

    public Cluster configureRemoteSupport(RemoteSupportRequest remoteSupportRequest) {
        return serviceManager.clusters().configureRemoteSupport(resourceGroupName, clusterName, remoteSupportRequest);
    }

    public Cluster configureRemoteSupport(RemoteSupportRequest remoteSupportRequest, Context context) {
        return serviceManager.clusters()
            .configureRemoteSupport(resourceGroupName, clusterName, remoteSupportRequest, context);
    }

    public ClusterImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ClusterImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ClusterImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateCluster.withTags(tags);
            return this;
        }
    }

    public ClusterImpl withTypeIdentityType(ManagedServiceIdentityType typeIdentityType) {
        this.innerModel().withTypeIdentityType(typeIdentityType);
        return this;
    }

    public ClusterImpl withUserAssignedIdentities(Map<String, UserAssignedIdentity> userAssignedIdentities) {
        if (isInCreateMode()) {
            this.innerModel().withUserAssignedIdentities(userAssignedIdentities);
            return this;
        } else {
            this.updateCluster.withUserAssignedIdentities(userAssignedIdentities);
            return this;
        }
    }

    public ClusterImpl withCloudManagementEndpoint(String cloudManagementEndpoint) {
        if (isInCreateMode()) {
            this.innerModel().withCloudManagementEndpoint(cloudManagementEndpoint);
            return this;
        } else {
            this.updateCluster.withCloudManagementEndpoint(cloudManagementEndpoint);
            return this;
        }
    }

    public ClusterImpl withAadClientId(String aadClientId) {
        if (isInCreateMode()) {
            this.innerModel().withAadClientId(aadClientId);
            return this;
        } else {
            this.updateCluster.withAadClientId(aadClientId);
            return this;
        }
    }

    public ClusterImpl withAadTenantId(String aadTenantId) {
        if (isInCreateMode()) {
            this.innerModel().withAadTenantId(aadTenantId);
            return this;
        } else {
            this.updateCluster.withAadTenantId(aadTenantId);
            return this;
        }
    }

    public ClusterImpl withAadApplicationObjectId(String aadApplicationObjectId) {
        this.innerModel().withAadApplicationObjectId(aadApplicationObjectId);
        return this;
    }

    public ClusterImpl withAadServicePrincipalObjectId(String aadServicePrincipalObjectId) {
        this.innerModel().withAadServicePrincipalObjectId(aadServicePrincipalObjectId);
        return this;
    }

    public ClusterImpl withSoftwareAssuranceProperties(SoftwareAssuranceProperties softwareAssuranceProperties) {
        this.innerModel().withSoftwareAssuranceProperties(softwareAssuranceProperties);
        return this;
    }

    public ClusterImpl withLogCollectionProperties(LogCollectionProperties logCollectionProperties) {
        this.innerModel().withLogCollectionProperties(logCollectionProperties);
        return this;
    }

    public ClusterImpl withRemoteSupportProperties(RemoteSupportProperties remoteSupportProperties) {
        this.innerModel().withRemoteSupportProperties(remoteSupportProperties);
        return this;
    }

    public ClusterImpl withDesiredProperties(ClusterDesiredProperties desiredProperties) {
        if (isInCreateMode()) {
            this.innerModel().withDesiredProperties(desiredProperties);
            return this;
        } else {
            this.updateCluster.withDesiredProperties(desiredProperties);
            return this;
        }
    }

    public ClusterImpl withType(ManagedServiceIdentityType type) {
        this.updateCluster.withType(type);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
