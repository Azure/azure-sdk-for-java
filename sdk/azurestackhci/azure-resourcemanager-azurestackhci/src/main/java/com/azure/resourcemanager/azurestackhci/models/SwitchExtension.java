// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * This represents extensions installed on virtualSwitch.
 */
@Immutable
public final class SwitchExtension implements JsonSerializable<SwitchExtension> {
    /*
     * Unique identifier for virtualSwitch.
     */
    private String switchId;

    /*
     * This will show extension name for virtualSwitch.
     */
    private String extensionName;

    /*
     * This represents whether extension is enabled on virtualSwitch.
     */
    private Boolean extensionEnabled;

    /**
     * Creates an instance of SwitchExtension class.
     */
    public SwitchExtension() {
    }

    /**
     * Get the switchId property: Unique identifier for virtualSwitch.
     * 
     * @return the switchId value.
     */
    public String switchId() {
        return this.switchId;
    }

    /**
     * Get the extensionName property: This will show extension name for virtualSwitch.
     * 
     * @return the extensionName value.
     */
    public String extensionName() {
        return this.extensionName;
    }

    /**
     * Get the extensionEnabled property: This represents whether extension is enabled on virtualSwitch.
     * 
     * @return the extensionEnabled value.
     */
    public Boolean extensionEnabled() {
        return this.extensionEnabled;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SwitchExtension from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SwitchExtension if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SwitchExtension.
     */
    public static SwitchExtension fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SwitchExtension deserializedSwitchExtension = new SwitchExtension();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("switchId".equals(fieldName)) {
                    deserializedSwitchExtension.switchId = reader.getString();
                } else if ("extensionName".equals(fieldName)) {
                    deserializedSwitchExtension.extensionName = reader.getString();
                } else if ("extensionEnabled".equals(fieldName)) {
                    deserializedSwitchExtension.extensionEnabled = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSwitchExtension;
        });
    }
}
