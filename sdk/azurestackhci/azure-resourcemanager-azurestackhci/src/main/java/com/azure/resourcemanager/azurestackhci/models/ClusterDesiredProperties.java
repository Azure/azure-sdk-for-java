// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Desired properties of the cluster.
 */
@Fluent
public final class ClusterDesiredProperties implements JsonSerializable<ClusterDesiredProperties> {
    /*
     * Desired state of Windows Server Subscription.
     */
    private WindowsServerSubscription windowsServerSubscription;

    /*
     * Desired level of diagnostic data emitted by the cluster.
     */
    private DiagnosticLevel diagnosticLevel;

    /**
     * Creates an instance of ClusterDesiredProperties class.
     */
    public ClusterDesiredProperties() {
    }

    /**
     * Get the windowsServerSubscription property: Desired state of Windows Server Subscription.
     * 
     * @return the windowsServerSubscription value.
     */
    public WindowsServerSubscription windowsServerSubscription() {
        return this.windowsServerSubscription;
    }

    /**
     * Set the windowsServerSubscription property: Desired state of Windows Server Subscription.
     * 
     * @param windowsServerSubscription the windowsServerSubscription value to set.
     * @return the ClusterDesiredProperties object itself.
     */
    public ClusterDesiredProperties withWindowsServerSubscription(WindowsServerSubscription windowsServerSubscription) {
        this.windowsServerSubscription = windowsServerSubscription;
        return this;
    }

    /**
     * Get the diagnosticLevel property: Desired level of diagnostic data emitted by the cluster.
     * 
     * @return the diagnosticLevel value.
     */
    public DiagnosticLevel diagnosticLevel() {
        return this.diagnosticLevel;
    }

    /**
     * Set the diagnosticLevel property: Desired level of diagnostic data emitted by the cluster.
     * 
     * @param diagnosticLevel the diagnosticLevel value to set.
     * @return the ClusterDesiredProperties object itself.
     */
    public ClusterDesiredProperties withDiagnosticLevel(DiagnosticLevel diagnosticLevel) {
        this.diagnosticLevel = diagnosticLevel;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("windowsServerSubscription",
            this.windowsServerSubscription == null ? null : this.windowsServerSubscription.toString());
        jsonWriter.writeStringField("diagnosticLevel",
            this.diagnosticLevel == null ? null : this.diagnosticLevel.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterDesiredProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterDesiredProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterDesiredProperties.
     */
    public static ClusterDesiredProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterDesiredProperties deserializedClusterDesiredProperties = new ClusterDesiredProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("windowsServerSubscription".equals(fieldName)) {
                    deserializedClusterDesiredProperties.windowsServerSubscription
                        = WindowsServerSubscription.fromString(reader.getString());
                } else if ("diagnosticLevel".equals(fieldName)) {
                    deserializedClusterDesiredProperties.diagnosticLevel
                        = DiagnosticLevel.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterDesiredProperties;
        });
    }
}
