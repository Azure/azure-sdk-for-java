// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.resourcemanager.azurestackhci.models.AdapterPropertyOverrides;
import com.azure.resourcemanager.azurestackhci.models.DeploymentCluster;
import com.azure.resourcemanager.azurestackhci.models.DeploymentConfiguration;
import com.azure.resourcemanager.azurestackhci.models.DeploymentData;
import com.azure.resourcemanager.azurestackhci.models.DeploymentMode;
import com.azure.resourcemanager.azurestackhci.models.DeploymentSecuritySettings;
import com.azure.resourcemanager.azurestackhci.models.HostNetwork;
import com.azure.resourcemanager.azurestackhci.models.InfrastructureNetwork;
import com.azure.resourcemanager.azurestackhci.models.Intents;
import com.azure.resourcemanager.azurestackhci.models.IpPools;
import com.azure.resourcemanager.azurestackhci.models.Observability;
import com.azure.resourcemanager.azurestackhci.models.OptionalServices;
import com.azure.resourcemanager.azurestackhci.models.PhysicalNodes;
import com.azure.resourcemanager.azurestackhci.models.QosPolicyOverrides;
import com.azure.resourcemanager.azurestackhci.models.ScaleUnits;
import com.azure.resourcemanager.azurestackhci.models.Storage;
import com.azure.resourcemanager.azurestackhci.models.StorageNetworks;
import com.azure.resourcemanager.azurestackhci.models.VirtualSwitchConfigurationOverrides;
import java.util.Arrays;

/**
 * Samples for DeploymentSettings CreateOrUpdate.
 */
public final class DeploymentSettingsCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/stable/2024-01-01/examples/
     * PutDeploymentSettings.json
     */
    /**
     * Sample code: Create Deployment Settings.
     * 
     * @param manager Entry point to AzurestackhciManager.
     */
    public static void createDeploymentSettings(com.azure.resourcemanager.azurestackhci.AzurestackhciManager manager) {
        manager.deploymentSettings()
            .define("default")
            .withExistingCluster("test-rg", "myCluster")
            .withArcNodeResourceIds(Arrays.asList(
                "/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/ArcInstance-rg/providers/Microsoft.HybridCompute/machines/Node-1",
                "/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/ArcInstance-rg/providers/Microsoft.HybridCompute/machines/Node-2"))
            .withDeploymentMode(DeploymentMode.DEPLOY)
            .withDeploymentConfiguration(new DeploymentConfiguration().withVersion("string")
                .withScaleUnits(Arrays.asList(new ScaleUnits().withDeploymentData(new DeploymentData()
                    .withSecuritySettings(new DeploymentSecuritySettings().withHvciProtection(true)
                        .withDrtmProtection(true)
                        .withDriftControlEnforced(true)
                        .withCredentialGuardEnforced(false)
                        .withSmbSigningEnforced(true)
                        .withSmbClusterEncryption(false)
                        .withSideChannelMitigationEnforced(true)
                        .withBitlockerBootVolume(true)
                        .withBitlockerDataVolumes(true)
                        .withWdacEnforced(true))
                    .withObservability(new Observability().withStreamingDataClient(true)
                        .withEuLocation(false)
                        .withEpisodicDataUpload(true))
                    .withCluster(new DeploymentCluster().withName("testHCICluster")
                        .withWitnessType("Cloud")
                        .withWitnessPath("Cloud")
                        .withCloudAccountName("myasestoragacct")
                        .withAzureServiceEndpoint("core.windows.net"))
                    .withStorage(new Storage().withConfigurationMode("Express"))
                    .withNamingPrefix("ms169")
                    .withDomainFqdn("ASZ1PLab8.nttest.microsoft.com")
                    .withInfrastructureNetwork(Arrays.asList(new InfrastructureNetwork().withSubnetMask("255.255.248.0")
                        .withGateway("255.255.248.0")
                        .withIpPools(Arrays
                            .asList(new IpPools().withStartingAddress("10.57.48.60").withEndingAddress("10.57.48.66")))
                        .withDnsServers(Arrays.asList("10.57.50.90"))))
                    .withPhysicalNodes(
                        Arrays.asList(new PhysicalNodes().withName("ms169host").withIpv4Address("10.57.51.224"),
                            new PhysicalNodes().withName("ms154host").withIpv4Address("10.57.53.236")))
                    .withHostNetwork(new HostNetwork()
                        .withIntents(Arrays.asList(new Intents().withName("Compute_Management")
                            .withTrafficType(Arrays.asList("Compute", "Management"))
                            .withAdapter(Arrays.asList("Port2"))
                            .withOverrideVirtualSwitchConfiguration(false)
                            .withVirtualSwitchConfigurationOverrides(
                                new VirtualSwitchConfigurationOverrides().withEnableIov("True")
                                    .withLoadBalancingAlgorithm("HyperVPort"))
                            .withOverrideQosPolicy(false)
                            .withQosPolicyOverrides(new QosPolicyOverrides().withPriorityValue8021ActionCluster("7")
                                .withPriorityValue8021ActionSmb("3")
                                .withBandwidthPercentageSmb("50"))
                            .withOverrideAdapterProperty(false)
                            .withAdapterPropertyOverrides(new AdapterPropertyOverrides().withJumboPacket("1514")
                                .withNetworkDirect("Enabled")
                                .withNetworkDirectTechnology("iWARP"))))
                        .withStorageNetworks(Arrays.asList(new StorageNetworks().withName("Storage1Network")
                            .withNetworkAdapterName("Port3")
                            .withVlanId("5")))
                        .withStorageConnectivitySwitchless(true))
                    .withAdouPath("OU=ms169,DC=ASZ1PLab8,DC=nttest,DC=microsoft,DC=com")
                    .withSecretsLocation("fakeTokenPlaceholder")
                    .withOptionalServices(new OptionalServices().withCustomLocation("customLocationName"))))))
            .create();
    }
}
