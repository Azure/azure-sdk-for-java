// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.models.DeploymentSettingAdapterPropertyOverrides;
import com.azure.resourcemanager.azurestackhci.models.DeploymentSettingHostNetwork;
import com.azure.resourcemanager.azurestackhci.models.DeploymentSettingIntents;
import com.azure.resourcemanager.azurestackhci.models.DeploymentSettingStorageAdapterIpInfo;
import com.azure.resourcemanager.azurestackhci.models.DeploymentSettingStorageNetworks;
import com.azure.resourcemanager.azurestackhci.models.DeploymentSettingVirtualSwitchConfigurationOverrides;
import com.azure.resourcemanager.azurestackhci.models.QosPolicyOverrides;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DeploymentSettingHostNetworkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DeploymentSettingHostNetwork model = BinaryData.fromString(
            "{\"intents\":[{\"name\":\"xcto\",\"trafficType\":[\"kdmoi\",\"postmgrcfbunrm\"],\"adapter\":[\"hhkxbp\",\"jy\"],\"overrideVirtualSwitchConfiguration\":false,\"virtualSwitchConfigurationOverrides\":{\"enableIov\":\"j\",\"loadBalancingAlgorithm\":\"gudivkrtswbxqz\"},\"overrideQosPolicy\":false,\"qosPolicyOverrides\":{\"priorityValue8021Action_Cluster\":\"auvjfdxxivet\",\"priorityValue8021Action_SMB\":\"cqaqtdoqmcbx\",\"bandwidthPercentage_SMB\":\"vxysl\"},\"overrideAdapterProperty\":true,\"adapterPropertyOverrides\":{\"jumboPacket\":\"xoblytkbl\",\"networkDirect\":\"ewwwfbkrvrnsv\",\"networkDirectTechnology\":\"q\"}},{\"name\":\"hxcr\",\"trafficType\":[\"ovasrruvwbhsqfsu\",\"cgjbirxbp\"],\"adapter\":[\"rfbjf\",\"twss\",\"t\"],\"overrideVirtualSwitchConfiguration\":false,\"virtualSwitchConfigurationOverrides\":{\"enableIov\":\"zbexilzznfqqnvw\",\"loadBalancingAlgorithm\":\"qtaruoujmkcjhwq\"},\"overrideQosPolicy\":true,\"qosPolicyOverrides\":{\"priorityValue8021Action_Cluster\":\"bnw\",\"priorityValue8021Action_SMB\":\"wgdrjervnaenqp\",\"bandwidthPercentage_SMB\":\"indoygmifthnzd\"},\"overrideAdapterProperty\":false,\"adapterPropertyOverrides\":{\"jumboPacket\":\"nayqi\",\"networkDirect\":\"nduhavhqlkthum\",\"networkDirectTechnology\":\"olbgycduiertgccy\"}}],\"storageNetworks\":[{\"name\":\"l\",\"networkAdapterName\":\"slqlfmmdn\",\"vlanId\":\"glzpswiydm\",\"storageAdapterIPInfo\":[{\"physicalNode\":\"zdxss\",\"ipv4Address\":\"bzmnvdfznud\",\"subnetMask\":\"dvxzbncblylpst\"}]},{\"name\":\"hh\",\"networkAdapterName\":\"rzdzucerscdnt\",\"vlanId\":\"vfiwjmygtdss\",\"storageAdapterIPInfo\":[{\"physicalNode\":\"mweriofzpy\",\"ipv4Address\":\"emwabnet\",\"subnetMask\":\"hszhedplvwiwu\"},{\"physicalNode\":\"wmbesldnkw\",\"ipv4Address\":\"pp\",\"subnetMask\":\"lcxog\"}]}],\"storageConnectivitySwitchless\":true,\"enableStorageAutoIp\":true}")
            .toObject(DeploymentSettingHostNetwork.class);
        Assertions.assertEquals("xcto", model.intents().get(0).name());
        Assertions.assertEquals("kdmoi", model.intents().get(0).trafficType().get(0));
        Assertions.assertEquals("hhkxbp", model.intents().get(0).adapter().get(0));
        Assertions.assertEquals(false, model.intents().get(0).overrideVirtualSwitchConfiguration());
        Assertions.assertEquals("j", model.intents().get(0).virtualSwitchConfigurationOverrides().enableIov());
        Assertions.assertEquals("gudivkrtswbxqz",
            model.intents().get(0).virtualSwitchConfigurationOverrides().loadBalancingAlgorithm());
        Assertions.assertEquals(false, model.intents().get(0).overrideQosPolicy());
        Assertions.assertEquals("auvjfdxxivet",
            model.intents().get(0).qosPolicyOverrides().priorityValue8021ActionCluster());
        Assertions.assertEquals("cqaqtdoqmcbx",
            model.intents().get(0).qosPolicyOverrides().priorityValue8021ActionSmb());
        Assertions.assertEquals("vxysl", model.intents().get(0).qosPolicyOverrides().bandwidthPercentageSmb());
        Assertions.assertEquals(true, model.intents().get(0).overrideAdapterProperty());
        Assertions.assertEquals("xoblytkbl", model.intents().get(0).adapterPropertyOverrides().jumboPacket());
        Assertions.assertEquals("ewwwfbkrvrnsv", model.intents().get(0).adapterPropertyOverrides().networkDirect());
        Assertions.assertEquals("q", model.intents().get(0).adapterPropertyOverrides().networkDirectTechnology());
        Assertions.assertEquals("l", model.storageNetworks().get(0).name());
        Assertions.assertEquals("slqlfmmdn", model.storageNetworks().get(0).networkAdapterName());
        Assertions.assertEquals("glzpswiydm", model.storageNetworks().get(0).vlanId());
        Assertions.assertEquals("zdxss", model.storageNetworks().get(0).storageAdapterIpInfo().get(0).physicalNode());
        Assertions.assertEquals("bzmnvdfznud",
            model.storageNetworks().get(0).storageAdapterIpInfo().get(0).ipv4Address());
        Assertions.assertEquals("dvxzbncblylpst",
            model.storageNetworks().get(0).storageAdapterIpInfo().get(0).subnetMask());
        Assertions.assertEquals(true, model.storageConnectivitySwitchless());
        Assertions.assertEquals(true, model.enableStorageAutoIp());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DeploymentSettingHostNetwork model = new DeploymentSettingHostNetwork()
            .withIntents(Arrays.asList(
                new DeploymentSettingIntents().withName("xcto")
                    .withTrafficType(Arrays.asList("kdmoi", "postmgrcfbunrm"))
                    .withAdapter(Arrays.asList("hhkxbp", "jy"))
                    .withOverrideVirtualSwitchConfiguration(false)
                    .withVirtualSwitchConfigurationOverrides(
                        new DeploymentSettingVirtualSwitchConfigurationOverrides().withEnableIov("j")
                            .withLoadBalancingAlgorithm("gudivkrtswbxqz"))
                    .withOverrideQosPolicy(false)
                    .withQosPolicyOverrides(new QosPolicyOverrides().withPriorityValue8021ActionCluster("auvjfdxxivet")
                        .withPriorityValue8021ActionSmb("cqaqtdoqmcbx")
                        .withBandwidthPercentageSmb("vxysl"))
                    .withOverrideAdapterProperty(true)
                    .withAdapterPropertyOverrides(new DeploymentSettingAdapterPropertyOverrides()
                        .withJumboPacket("xoblytkbl")
                        .withNetworkDirect("ewwwfbkrvrnsv")
                        .withNetworkDirectTechnology("q")),
                new DeploymentSettingIntents().withName("hxcr")
                    .withTrafficType(Arrays.asList("ovasrruvwbhsqfsu", "cgjbirxbp"))
                    .withAdapter(Arrays.asList("rfbjf", "twss", "t"))
                    .withOverrideVirtualSwitchConfiguration(false)
                    .withVirtualSwitchConfigurationOverrides(
                        new DeploymentSettingVirtualSwitchConfigurationOverrides().withEnableIov("zbexilzznfqqnvw")
                            .withLoadBalancingAlgorithm("qtaruoujmkcjhwq"))
                    .withOverrideQosPolicy(true)
                    .withQosPolicyOverrides(new QosPolicyOverrides().withPriorityValue8021ActionCluster("bnw")
                        .withPriorityValue8021ActionSmb("wgdrjervnaenqp")
                        .withBandwidthPercentageSmb("indoygmifthnzd"))
                    .withOverrideAdapterProperty(false)
                    .withAdapterPropertyOverrides(
                        new DeploymentSettingAdapterPropertyOverrides().withJumboPacket("nayqi")
                            .withNetworkDirect("nduhavhqlkthum")
                            .withNetworkDirectTechnology("olbgycduiertgccy"))))
            .withStorageNetworks(Arrays.asList(
                new DeploymentSettingStorageNetworks().withName("l")
                    .withNetworkAdapterName("slqlfmmdn")
                    .withVlanId("glzpswiydm")
                    .withStorageAdapterIpInfo(
                        Arrays.asList(new DeploymentSettingStorageAdapterIpInfo().withPhysicalNode("zdxss")
                            .withIpv4Address("bzmnvdfznud")
                            .withSubnetMask("dvxzbncblylpst"))),
                new DeploymentSettingStorageNetworks().withName("hh")
                    .withNetworkAdapterName("rzdzucerscdnt")
                    .withVlanId("vfiwjmygtdss")
                    .withStorageAdapterIpInfo(Arrays.asList(
                        new DeploymentSettingStorageAdapterIpInfo().withPhysicalNode("mweriofzpy")
                            .withIpv4Address("emwabnet")
                            .withSubnetMask("hszhedplvwiwu"),
                        new DeploymentSettingStorageAdapterIpInfo().withPhysicalNode("wmbesldnkw")
                            .withIpv4Address("pp")
                            .withSubnetMask("lcxog")))))
            .withStorageConnectivitySwitchless(true)
            .withEnableStorageAutoIp(true);
        model = BinaryData.fromObject(model).toObject(DeploymentSettingHostNetwork.class);
        Assertions.assertEquals("xcto", model.intents().get(0).name());
        Assertions.assertEquals("kdmoi", model.intents().get(0).trafficType().get(0));
        Assertions.assertEquals("hhkxbp", model.intents().get(0).adapter().get(0));
        Assertions.assertEquals(false, model.intents().get(0).overrideVirtualSwitchConfiguration());
        Assertions.assertEquals("j", model.intents().get(0).virtualSwitchConfigurationOverrides().enableIov());
        Assertions.assertEquals("gudivkrtswbxqz",
            model.intents().get(0).virtualSwitchConfigurationOverrides().loadBalancingAlgorithm());
        Assertions.assertEquals(false, model.intents().get(0).overrideQosPolicy());
        Assertions.assertEquals("auvjfdxxivet",
            model.intents().get(0).qosPolicyOverrides().priorityValue8021ActionCluster());
        Assertions.assertEquals("cqaqtdoqmcbx",
            model.intents().get(0).qosPolicyOverrides().priorityValue8021ActionSmb());
        Assertions.assertEquals("vxysl", model.intents().get(0).qosPolicyOverrides().bandwidthPercentageSmb());
        Assertions.assertEquals(true, model.intents().get(0).overrideAdapterProperty());
        Assertions.assertEquals("xoblytkbl", model.intents().get(0).adapterPropertyOverrides().jumboPacket());
        Assertions.assertEquals("ewwwfbkrvrnsv", model.intents().get(0).adapterPropertyOverrides().networkDirect());
        Assertions.assertEquals("q", model.intents().get(0).adapterPropertyOverrides().networkDirectTechnology());
        Assertions.assertEquals("l", model.storageNetworks().get(0).name());
        Assertions.assertEquals("slqlfmmdn", model.storageNetworks().get(0).networkAdapterName());
        Assertions.assertEquals("glzpswiydm", model.storageNetworks().get(0).vlanId());
        Assertions.assertEquals("zdxss", model.storageNetworks().get(0).storageAdapterIpInfo().get(0).physicalNode());
        Assertions.assertEquals("bzmnvdfznud",
            model.storageNetworks().get(0).storageAdapterIpInfo().get(0).ipv4Address());
        Assertions.assertEquals("dvxzbncblylpst",
            model.storageNetworks().get(0).storageAdapterIpInfo().get(0).subnetMask());
        Assertions.assertEquals(true, model.storageConnectivitySwitchless());
        Assertions.assertEquals(true, model.enableStorageAutoIp());
    }
}
