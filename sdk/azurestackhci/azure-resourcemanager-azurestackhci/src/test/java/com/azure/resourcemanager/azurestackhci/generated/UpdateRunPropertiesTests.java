// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.fluent.models.Step;
import com.azure.resourcemanager.azurestackhci.fluent.models.UpdateRunProperties;
import com.azure.resourcemanager.azurestackhci.models.UpdateRunPropertiesState;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class UpdateRunPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UpdateRunProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Updating\",\"timeStarted\":\"2021-03-05T11:05:18Z\",\"lastUpdatedTime\":\"2021-02-01T08:02:04Z\",\"duration\":\"bn\",\"state\":\"Unknown\",\"progress\":{\"name\":\"xs\",\"description\":\"rntvlwijp\",\"errorMessage\":\"texoqqpwc\",\"status\":\"ufmhrunc\",\"startTimeUtc\":\"2021-09-21T16:25:56Z\",\"endTimeUtc\":\"2021-09-21T10:04:50Z\",\"lastUpdatedTimeUtc\":\"2021-08-20T13:44:39Z\",\"expectedExecutionTime\":\"dqzh\",\"steps\":[{\"name\":\"dunqnd\",\"description\":\"pchrqbn\",\"errorMessage\":\"rcgegydcwboxjum\",\"status\":\"qoli\",\"startTimeUtc\":\"2021-06-22T06:33:09Z\",\"endTimeUtc\":\"2021-05-10T13:24:14Z\",\"lastUpdatedTimeUtc\":\"2021-05-20T12:59:42Z\",\"expectedExecutionTime\":\"ubrjtl\",\"steps\":[{\"name\":\"uojrngiflr\",\"description\":\"asccbiui\",\"errorMessage\":\"dlyjdf\",\"status\":\"mkyoqufdvruzsl\",\"startTimeUtc\":\"2021-03-20T10:33:48Z\",\"endTimeUtc\":\"2021-04-15T06:18:59Z\",\"lastUpdatedTimeUtc\":\"2021-07-08T06:56:22Z\",\"expectedExecutionTime\":\"nmdxotngfd\",\"steps\":[{},{},{},{}]},{\"name\":\"yzihgrkyuizabsn\",\"description\":\"pphoj\",\"errorMessage\":\"vyhyhsgzfc\",\"status\":\"gomfgbeglq\",\"startTimeUtc\":\"2021-11-28T19:12:57Z\",\"endTimeUtc\":\"2021-06-10T19:13:40Z\",\"lastUpdatedTimeUtc\":\"2021-11-28T14:13:42Z\",\"expectedExecutionTime\":\"tnluankrr\",\"steps\":[{},{},{}]}]},{\"name\":\"ebtijvacvbmqzbqq\",\"description\":\"aj\",\"errorMessage\":\"wxacevehj\",\"status\":\"yxoaf\",\"startTimeUtc\":\"2021-03-08T11:58:40Z\",\"endTimeUtc\":\"2021-05-13T08:39:20Z\",\"lastUpdatedTimeUtc\":\"2021-06-28T21:13:43Z\",\"expectedExecutionTime\":\"eyl\",\"steps\":[{\"name\":\"gv\",\"description\":\"r\",\"errorMessage\":\"hriypoqeyhlqhy\",\"status\":\"rlpyznuciqdsmexi\",\"startTimeUtc\":\"2021-11-16T11:22:07Z\",\"endTimeUtc\":\"2021-08-01T15:36:59Z\",\"lastUpdatedTimeUtc\":\"2021-02-09T12:29:35Z\",\"expectedExecutionTime\":\"asiibmiybnnust\",\"steps\":[{},{},{},{}]},{\"name\":\"hnmgixhcm\",\"description\":\"mqfoudorh\",\"errorMessage\":\"yyprotwyp\",\"status\":\"d\",\"startTimeUtc\":\"2021-09-21T05:34:17Z\",\"endTimeUtc\":\"2021-09-26T18:20:07Z\",\"lastUpdatedTimeUtc\":\"2021-05-18T07:53:38Z\",\"expectedExecutionTime\":\"jkavl\",\"steps\":[{}]},{\"name\":\"mftpmdtz\",\"description\":\"ltfvnz\",\"errorMessage\":\"jtotpvopvpbd\",\"status\":\"qgqqihedsvqwthmk\",\"startTimeUtc\":\"2021-10-27T11:08:26Z\",\"endTimeUtc\":\"2021-10-29T01:22:50Z\",\"lastUpdatedTimeUtc\":\"2021-10-11T18:19:24Z\",\"expectedExecutionTime\":\"sgqcwdho\",\"steps\":[{},{}]},{\"name\":\"mcdzsufcohdxbz\",\"description\":\"cmuapcvhd\",\"errorMessage\":\"v\",\"status\":\"qxeysko\",\"startTimeUtc\":\"2020-12-31T09:10:56Z\",\"endTimeUtc\":\"2021-04-16T10:18:40Z\",\"lastUpdatedTimeUtc\":\"2021-02-01T01:33:34Z\",\"expectedExecutionTime\":\"bgbzbowxeqoclj\",\"steps\":[{},{},{},{}]}]}]}}")
            .toObject(UpdateRunProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-05T11:05:18Z"), model.timeStarted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-01T08:02:04Z"), model.lastUpdatedTime());
        Assertions.assertEquals("bn", model.duration());
        Assertions.assertEquals(UpdateRunPropertiesState.UNKNOWN, model.state());
        Assertions.assertEquals("xs", model.name());
        Assertions.assertEquals("rntvlwijp", model.description());
        Assertions.assertEquals("texoqqpwc", model.errorMessage());
        Assertions.assertEquals("ufmhrunc", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-21T16:25:56Z"), model.startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-21T10:04:50Z"), model.endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-20T13:44:39Z"), model.lastUpdatedTimeUtc());
        Assertions.assertEquals("dqzh", model.expectedExecutionTime());
        Assertions.assertEquals("dunqnd", model.steps().get(0).name());
        Assertions.assertEquals("pchrqbn", model.steps().get(0).description());
        Assertions.assertEquals("rcgegydcwboxjum", model.steps().get(0).errorMessage());
        Assertions.assertEquals("qoli", model.steps().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-22T06:33:09Z"), model.steps().get(0).startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-10T13:24:14Z"), model.steps().get(0).endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-20T12:59:42Z"),
            model.steps().get(0).lastUpdatedTimeUtc());
        Assertions.assertEquals("ubrjtl", model.steps().get(0).expectedExecutionTime());
        Assertions.assertEquals("uojrngiflr", model.steps().get(0).steps().get(0).name());
        Assertions.assertEquals("asccbiui", model.steps().get(0).steps().get(0).description());
        Assertions.assertEquals("dlyjdf", model.steps().get(0).steps().get(0).errorMessage());
        Assertions.assertEquals("mkyoqufdvruzsl", model.steps().get(0).steps().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-20T10:33:48Z"),
            model.steps().get(0).steps().get(0).startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-15T06:18:59Z"),
            model.steps().get(0).steps().get(0).endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-08T06:56:22Z"),
            model.steps().get(0).steps().get(0).lastUpdatedTimeUtc());
        Assertions.assertEquals("nmdxotngfd", model.steps().get(0).steps().get(0).expectedExecutionTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UpdateRunProperties model
            = new UpdateRunProperties().withTimeStarted(OffsetDateTime.parse("2021-03-05T11:05:18Z"))
                .withLastUpdatedTime(OffsetDateTime.parse("2021-02-01T08:02:04Z"))
                .withDuration("bn")
                .withState(UpdateRunPropertiesState.UNKNOWN)
                .withName("xs")
                .withDescription("rntvlwijp")
                .withErrorMessage("texoqqpwc")
                .withStatus("ufmhrunc")
                .withStartTimeUtc(OffsetDateTime.parse("2021-09-21T16:25:56Z"))
                .withEndTimeUtc(OffsetDateTime.parse("2021-09-21T10:04:50Z"))
                .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-08-20T13:44:39Z"))
                .withExpectedExecutionTime("dqzh")
                .withSteps(
                    Arrays
                        .asList(
                            new Step().withName("dunqnd")
                                .withDescription("pchrqbn")
                                .withErrorMessage("rcgegydcwboxjum")
                                .withStatus("qoli")
                                .withStartTimeUtc(OffsetDateTime.parse("2021-06-22T06:33:09Z"))
                                .withEndTimeUtc(OffsetDateTime.parse("2021-05-10T13:24:14Z"))
                                .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-05-20T12:59:42Z"))
                                .withExpectedExecutionTime("ubrjtl")
                                .withSteps(
                                    Arrays.asList(
                                        new Step().withName("uojrngiflr")
                                            .withDescription("asccbiui")
                                            .withErrorMessage("dlyjdf")
                                            .withStatus("mkyoqufdvruzsl")
                                            .withStartTimeUtc(OffsetDateTime.parse("2021-03-20T10:33:48Z"))
                                            .withEndTimeUtc(OffsetDateTime.parse("2021-04-15T06:18:59Z"))
                                            .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-07-08T06:56:22Z"))
                                            .withExpectedExecutionTime("nmdxotngfd")
                                            .withSteps(Arrays.asList(new Step(), new Step(), new Step(), new Step())),
                                        new Step().withName("yzihgrkyuizabsn")
                                            .withDescription("pphoj")
                                            .withErrorMessage("vyhyhsgzfc")
                                            .withStatus("gomfgbeglq")
                                            .withStartTimeUtc(OffsetDateTime.parse("2021-11-28T19:12:57Z"))
                                            .withEndTimeUtc(OffsetDateTime.parse("2021-06-10T19:13:40Z"))
                                            .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-11-28T14:13:42Z"))
                                            .withExpectedExecutionTime("tnluankrr")
                                            .withSteps(Arrays.asList(new Step(), new Step(), new Step())))),
                            new Step().withName("ebtijvacvbmqzbqq")
                                .withDescription("aj")
                                .withErrorMessage("wxacevehj")
                                .withStatus("yxoaf")
                                .withStartTimeUtc(OffsetDateTime.parse("2021-03-08T11:58:40Z"))
                                .withEndTimeUtc(OffsetDateTime.parse("2021-05-13T08:39:20Z"))
                                .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-06-28T21:13:43Z"))
                                .withExpectedExecutionTime("eyl")
                                .withSteps(Arrays.asList(
                                    new Step().withName("gv")
                                        .withDescription("r")
                                        .withErrorMessage("hriypoqeyhlqhy")
                                        .withStatus("rlpyznuciqdsmexi")
                                        .withStartTimeUtc(OffsetDateTime.parse("2021-11-16T11:22:07Z"))
                                        .withEndTimeUtc(OffsetDateTime.parse("2021-08-01T15:36:59Z"))
                                        .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-02-09T12:29:35Z"))
                                        .withExpectedExecutionTime("asiibmiybnnust")
                                        .withSteps(Arrays.asList(new Step(), new Step(), new Step(), new Step())),
                                    new Step().withName("hnmgixhcm")
                                        .withDescription("mqfoudorh")
                                        .withErrorMessage("yyprotwyp")
                                        .withStatus("d")
                                        .withStartTimeUtc(OffsetDateTime.parse("2021-09-21T05:34:17Z"))
                                        .withEndTimeUtc(OffsetDateTime.parse("2021-09-26T18:20:07Z"))
                                        .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-05-18T07:53:38Z"))
                                        .withExpectedExecutionTime("jkavl")
                                        .withSteps(Arrays.asList(new Step())),
                                    new Step().withName("mftpmdtz")
                                        .withDescription("ltfvnz")
                                        .withErrorMessage("jtotpvopvpbd")
                                        .withStatus("qgqqihedsvqwthmk")
                                        .withStartTimeUtc(OffsetDateTime.parse("2021-10-27T11:08:26Z"))
                                        .withEndTimeUtc(OffsetDateTime.parse("2021-10-29T01:22:50Z"))
                                        .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-10-11T18:19:24Z"))
                                        .withExpectedExecutionTime("sgqcwdho")
                                        .withSteps(Arrays.asList(new Step(), new Step())),
                                    new Step().withName("mcdzsufcohdxbz")
                                        .withDescription("cmuapcvhd")
                                        .withErrorMessage("v")
                                        .withStatus("qxeysko")
                                        .withStartTimeUtc(OffsetDateTime.parse("2020-12-31T09:10:56Z"))
                                        .withEndTimeUtc(OffsetDateTime.parse("2021-04-16T10:18:40Z"))
                                        .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-02-01T01:33:34Z"))
                                        .withExpectedExecutionTime("bgbzbowxeqoclj")
                                        .withSteps(Arrays.asList(new Step(), new Step(), new Step(), new Step()))))));
        model = BinaryData.fromObject(model).toObject(UpdateRunProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-05T11:05:18Z"), model.timeStarted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-01T08:02:04Z"), model.lastUpdatedTime());
        Assertions.assertEquals("bn", model.duration());
        Assertions.assertEquals(UpdateRunPropertiesState.UNKNOWN, model.state());
        Assertions.assertEquals("xs", model.name());
        Assertions.assertEquals("rntvlwijp", model.description());
        Assertions.assertEquals("texoqqpwc", model.errorMessage());
        Assertions.assertEquals("ufmhrunc", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-21T16:25:56Z"), model.startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-21T10:04:50Z"), model.endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-20T13:44:39Z"), model.lastUpdatedTimeUtc());
        Assertions.assertEquals("dqzh", model.expectedExecutionTime());
        Assertions.assertEquals("dunqnd", model.steps().get(0).name());
        Assertions.assertEquals("pchrqbn", model.steps().get(0).description());
        Assertions.assertEquals("rcgegydcwboxjum", model.steps().get(0).errorMessage());
        Assertions.assertEquals("qoli", model.steps().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-22T06:33:09Z"), model.steps().get(0).startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-10T13:24:14Z"), model.steps().get(0).endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-20T12:59:42Z"),
            model.steps().get(0).lastUpdatedTimeUtc());
        Assertions.assertEquals("ubrjtl", model.steps().get(0).expectedExecutionTime());
        Assertions.assertEquals("uojrngiflr", model.steps().get(0).steps().get(0).name());
        Assertions.assertEquals("asccbiui", model.steps().get(0).steps().get(0).description());
        Assertions.assertEquals("dlyjdf", model.steps().get(0).steps().get(0).errorMessage());
        Assertions.assertEquals("mkyoqufdvruzsl", model.steps().get(0).steps().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-20T10:33:48Z"),
            model.steps().get(0).steps().get(0).startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-15T06:18:59Z"),
            model.steps().get(0).steps().get(0).endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-08T06:56:22Z"),
            model.steps().get(0).steps().get(0).lastUpdatedTimeUtc());
        Assertions.assertEquals("nmdxotngfd", model.steps().get(0).steps().get(0).expectedExecutionTime());
    }
}
