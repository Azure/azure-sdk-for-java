// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.models.SecurityTypes;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachineInstancePropertiesSecurityProfile;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachineInstancePropertiesSecurityProfileUefiSettings;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineInstancePropertiesSecurityProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineInstancePropertiesSecurityProfile model =
            BinaryData
                .fromString(
                    "{\"enableTPM\":true,\"uefiSettings\":{\"secureBootEnabled\":false},\"securityType\":\"ConfidentialVM\"}")
                .toObject(VirtualMachineInstancePropertiesSecurityProfile.class);
        Assertions.assertEquals(true, model.enableTpm());
        Assertions.assertEquals(false, model.uefiSettings().secureBootEnabled());
        Assertions.assertEquals(SecurityTypes.CONFIDENTIAL_VM, model.securityType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineInstancePropertiesSecurityProfile model =
            new VirtualMachineInstancePropertiesSecurityProfile()
                .withEnableTpm(true)
                .withUefiSettings(
                    new VirtualMachineInstancePropertiesSecurityProfileUefiSettings().withSecureBootEnabled(false))
                .withSecurityType(SecurityTypes.CONFIDENTIAL_VM);
        model = BinaryData.fromObject(model).toObject(VirtualMachineInstancePropertiesSecurityProfile.class);
        Assertions.assertEquals(true, model.enableTpm());
        Assertions.assertEquals(false, model.uefiSettings().secureBootEnabled());
        Assertions.assertEquals(SecurityTypes.CONFIDENTIAL_VM, model.securityType());
    }
}
