// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.fluent.models.VirtualNetworkPropertiesSubnetsItemAutoGenerated;
import com.azure.resourcemanager.azurestackhci.models.ComponentsI4F0MhSchemasVirtualnetworkpropertiesPropertiesSubnetsItemsPropertiesRoutetable;
import com.azure.resourcemanager.azurestackhci.models.IpAllocationMethodEnum;
import com.azure.resourcemanager.azurestackhci.models.IpPool;
import com.azure.resourcemanager.azurestackhci.models.IpPoolInfo;
import com.azure.resourcemanager.azurestackhci.models.IpPoolTypeEnum;
import com.azure.resourcemanager.azurestackhci.models.VirtualNetworkPropertiesSubnetsItemAutoGeneratedIpConfigurationReference;
import com.azure.resourcemanager.azurestackhci.models.VirtualNetworkPropertiesSubnetsPropertiesItemsItem;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualNetworkPropertiesSubnetsItemAutoGeneratedTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualNetworkPropertiesSubnetsItemAutoGenerated model =
            BinaryData
                .fromString(
                    "{\"addressPrefix\":\"eqyj\",\"addressPrefixes\":[\"iunjxdf\"],\"ipAllocationMethod\":\"Dynamic\",\"ipConfigurationReferences\":[{\"ID\":\"cegyamlbnseqacj\"},{\"ID\":\"pilguooqjag\"},{\"ID\":\"itgueiookjbs\"}],\"routeTable\":{\"id\":\"tdtpdelqacslmo\",\"name\":\"ebnfxofvc\",\"properties\":{\"routes\":[{\"name\":\"razftxejwabmdujt\",\"properties\":{\"addressPrefix\":\"op\",\"nextHopIpAddress\":\"c\"}},{\"name\":\"urbuhhlkyqltq\",\"properties\":{\"addressPrefix\":\"gtuwkff\",\"nextHopIpAddress\":\"ktsysidfvclglxn\"}}]},\"type\":\"ijtk\"},\"ipPools\":[{\"ipPoolType\":\"vm\",\"start\":\"sfikayiansharuj\",\"end\":\"iqxf\",\"info\":{\"used\":\"qttv\",\"available\":\"pqhjpenuygbqeqq\"}}],\"vlan\":583877472}")
                .toObject(VirtualNetworkPropertiesSubnetsItemAutoGenerated.class);
        Assertions.assertEquals("eqyj", model.addressPrefix());
        Assertions.assertEquals("iunjxdf", model.addressPrefixes().get(0));
        Assertions.assertEquals(IpAllocationMethodEnum.DYNAMIC, model.ipAllocationMethod());
        Assertions.assertEquals("cegyamlbnseqacj", model.ipConfigurationReferences().get(0).id());
        Assertions.assertEquals("tdtpdelqacslmo", model.routeTable().id());
        Assertions.assertEquals("ebnfxofvc", model.routeTable().name());
        Assertions.assertEquals("ijtk", model.routeTable().type());
        Assertions.assertEquals("razftxejwabmdujt", model.routeTable().routes().get(0).name());
        Assertions.assertEquals("op", model.routeTable().routes().get(0).addressPrefix());
        Assertions.assertEquals("c", model.routeTable().routes().get(0).nextHopIpAddress());
        Assertions.assertEquals(IpPoolTypeEnum.VM, model.ipPools().get(0).ipPoolType());
        Assertions.assertEquals("sfikayiansharuj", model.ipPools().get(0).start());
        Assertions.assertEquals("iqxf", model.ipPools().get(0).end());
        Assertions.assertEquals(583877472, model.vlan());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualNetworkPropertiesSubnetsItemAutoGenerated model =
            new VirtualNetworkPropertiesSubnetsItemAutoGenerated()
                .withAddressPrefix("eqyj")
                .withAddressPrefixes(Arrays.asList("iunjxdf"))
                .withIpAllocationMethod(IpAllocationMethodEnum.DYNAMIC)
                .withIpConfigurationReferences(
                    Arrays
                        .asList(
                            new VirtualNetworkPropertiesSubnetsItemAutoGeneratedIpConfigurationReference()
                                .withId("cegyamlbnseqacj"),
                            new VirtualNetworkPropertiesSubnetsItemAutoGeneratedIpConfigurationReference()
                                .withId("pilguooqjag"),
                            new VirtualNetworkPropertiesSubnetsItemAutoGeneratedIpConfigurationReference()
                                .withId("itgueiookjbs")))
                .withRouteTable(
                    new ComponentsI4F0MhSchemasVirtualnetworkpropertiesPropertiesSubnetsItemsPropertiesRoutetable()
                        .withId("tdtpdelqacslmo")
                        .withName("ebnfxofvc")
                        .withType("ijtk")
                        .withRoutes(
                            Arrays
                                .asList(
                                    new VirtualNetworkPropertiesSubnetsPropertiesItemsItem()
                                        .withName("razftxejwabmdujt")
                                        .withAddressPrefix("op")
                                        .withNextHopIpAddress("c"),
                                    new VirtualNetworkPropertiesSubnetsPropertiesItemsItem()
                                        .withName("urbuhhlkyqltq")
                                        .withAddressPrefix("gtuwkff")
                                        .withNextHopIpAddress("ktsysidfvclglxn"))))
                .withIpPools(
                    Arrays
                        .asList(
                            new IpPool()
                                .withIpPoolType(IpPoolTypeEnum.VM)
                                .withStart("sfikayiansharuj")
                                .withEnd("iqxf")
                                .withInfo(new IpPoolInfo())))
                .withVlan(583877472);
        model = BinaryData.fromObject(model).toObject(VirtualNetworkPropertiesSubnetsItemAutoGenerated.class);
        Assertions.assertEquals("eqyj", model.addressPrefix());
        Assertions.assertEquals("iunjxdf", model.addressPrefixes().get(0));
        Assertions.assertEquals(IpAllocationMethodEnum.DYNAMIC, model.ipAllocationMethod());
        Assertions.assertEquals("cegyamlbnseqacj", model.ipConfigurationReferences().get(0).id());
        Assertions.assertEquals("tdtpdelqacslmo", model.routeTable().id());
        Assertions.assertEquals("ebnfxofvc", model.routeTable().name());
        Assertions.assertEquals("ijtk", model.routeTable().type());
        Assertions.assertEquals("razftxejwabmdujt", model.routeTable().routes().get(0).name());
        Assertions.assertEquals("op", model.routeTable().routes().get(0).addressPrefix());
        Assertions.assertEquals("c", model.routeTable().routes().get(0).nextHopIpAddress());
        Assertions.assertEquals(IpPoolTypeEnum.VM, model.ipPools().get(0).ipPoolType());
        Assertions.assertEquals("sfikayiansharuj", model.ipPools().get(0).start());
        Assertions.assertEquals("iqxf", model.ipPools().get(0).end());
        Assertions.assertEquals(583877472, model.vlan());
    }
}
