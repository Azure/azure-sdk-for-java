// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.azurestackhci.AzureStackHciManager;
import com.azure.resourcemanager.azurestackhci.models.Cluster;
import com.azure.resourcemanager.azurestackhci.models.DiagnosticLevel;
import com.azure.resourcemanager.azurestackhci.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.azurestackhci.models.SoftwareAssuranceIntent;
import com.azure.resourcemanager.azurestackhci.models.SoftwareAssuranceStatus;
import com.azure.resourcemanager.azurestackhci.models.WindowsServerSubscription;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ClustersGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"identity\":{\"principalId\":\"a453b222-24c6-42b7-818c-e7f0bfdd4b5f\",\"tenantId\":\"a25e6dcd-ca06-4d47-bd82-b3c072887c5c\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"pmeyyvpkpatlbijp\":{\"principalId\":\"989667ca-806b-43c5-aa05-7b056bebee01\",\"clientId\":\"5141fa47-98f8-46ee-80ae-de689ec762d2\"},\"ksrf\":{\"principalId\":\"0600e634-c2f0-4921-9014-0e665036abf4\",\"clientId\":\"1a0c88e8-dde6-41b1-9662-465b3b416898\"}}},\"properties\":{\"provisioningState\":\"Accepted\",\"status\":\"NotYetRegistered\",\"cloudId\":\"nbnxwcdomm\",\"cloudManagementEndpoint\":\"fqawzfgbrttui\",\"aadClientId\":\"lkiexhajlfnthiq\",\"aadTenantId\":\"uttdiygbp\",\"aadApplicationObjectId\":\"wswmt\",\"aadServicePrincipalObjectId\":\"yctww\",\"softwareAssuranceProperties\":{\"softwareAssuranceStatus\":\"Enabled\",\"softwareAssuranceIntent\":\"Enable\",\"lastUpdated\":\"2021-09-05T09:41:36Z\"},\"desiredProperties\":{\"windowsServerSubscription\":\"Disabled\",\"diagnosticLevel\":\"Basic\"},\"reportedProperties\":{\"clusterName\":\"yvneeza\",\"clusterId\":\"gh\",\"clusterVersion\":\"oqqtl\",\"nodes\":[{\"name\":\"bkrkjj\",\"id\":78.4133,\"windowsServerSubscription\":\"Disabled\",\"nodeType\":\"FirstParty\",\"ehcResourceId\":\"nq\",\"manufacturer\":\"wdogiyetesyp\",\"model\":\"dbztjhqtfbov\",\"osName\":\"nkbw\",\"osVersion\":\"njuhpsprkzya\",\"osDisplayVersion\":\"ia\",\"serialNumber\":\"xnafbw\",\"coreCount\":97.34527,\"memoryInGiB\":29.51151},{\"name\":\"uovmaonurjt\",\"id\":59.30058,\"windowsServerSubscription\":\"Enabled\",\"nodeType\":\"FirstParty\",\"ehcResourceId\":\"ecmslclbl\",\"manufacturer\":\"xltbsjuscvsf\",\"model\":\"gctmgxuupbezq\",\"osName\":\"ydrtc\",\"osVersion\":\"kdqkkyihzt\",\"osDisplayVersion\":\"qm\",\"serialNumber\":\"zgwldoychillcec\",\"coreCount\":64.80049,\"memoryInGiB\":45.09756}],\"lastUpdated\":\"2021-02-23T12:52:34Z\",\"imdsAttestation\":\"Disabled\",\"diagnosticLevel\":\"Off\",\"supportedCapabilities\":[\"qllizstac\",\"jvhrweft\"]},\"trialDaysRemaining\":91.916435,\"billingModel\":\"jp\",\"registrationTimestamp\":\"2021-12-09T22:39:35Z\",\"lastSyncTimestamp\":\"2021-09-05T09:38:44Z\",\"lastBillingTimestamp\":\"2021-06-10T02:31:17Z\",\"serviceEndpoint\":\"pwamcxtczhupeuk\",\"resourceProviderObjectId\":\"jduyyespydjfb\"},\"location\":\"yv\",\"tags\":{\"gbhgau\":\"lrtywikdmhlakuf\",\"f\":\"cdixmx\",\"oeoq\":\"sryjqgdkfno\"},\"id\":\"vjhvefgwbm\",\"name\":\"jchnta\",\"type\":\"faymxbulpz\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AzureStackHciManager manager =
            AzureStackHciManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Cluster response =
            manager
                .clusters()
                .getByResourceGroupWithResponse("azipbhpwvqsg", "yy", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("yv", response.location());
        Assertions.assertEquals("lrtywikdmhlakuf", response.tags().get("gbhgau"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, response.typeIdentityType());
        Assertions.assertEquals("fqawzfgbrttui", response.cloudManagementEndpoint());
        Assertions.assertEquals("lkiexhajlfnthiq", response.aadClientId());
        Assertions.assertEquals("uttdiygbp", response.aadTenantId());
        Assertions.assertEquals("wswmt", response.aadApplicationObjectId());
        Assertions.assertEquals("yctww", response.aadServicePrincipalObjectId());
        Assertions
            .assertEquals(
                SoftwareAssuranceStatus.ENABLED, response.softwareAssuranceProperties().softwareAssuranceStatus());
        Assertions
            .assertEquals(
                SoftwareAssuranceIntent.ENABLE, response.softwareAssuranceProperties().softwareAssuranceIntent());
        Assertions
            .assertEquals(WindowsServerSubscription.DISABLED, response.desiredProperties().windowsServerSubscription());
        Assertions.assertEquals(DiagnosticLevel.BASIC, response.desiredProperties().diagnosticLevel());
    }
}
