// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.fluent.models.ClusterInner;
import com.azure.resourcemanager.azurestackhci.models.ClusterDesiredProperties;
import com.azure.resourcemanager.azurestackhci.models.ClusterList;
import com.azure.resourcemanager.azurestackhci.models.DiagnosticLevel;
import com.azure.resourcemanager.azurestackhci.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.azurestackhci.models.SoftwareAssuranceIntent;
import com.azure.resourcemanager.azurestackhci.models.SoftwareAssuranceProperties;
import com.azure.resourcemanager.azurestackhci.models.SoftwareAssuranceStatus;
import com.azure.resourcemanager.azurestackhci.models.UserAssignedIdentity;
import com.azure.resourcemanager.azurestackhci.models.WindowsServerSubscription;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterList model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"identity\":{\"principalId\":\"2e997fed-649a-4e15-8c8a-d95584d538b4\",\"tenantId\":\"26695c8e-953a-4b50-ba74-966360f405ef\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"ap\":{\"principalId\":\"60ca5591-81b2-42b6-ab8f-946c8e8017b8\",\"clientId\":\"c13b1743-4ee4-4c24-a321-0496ef4abd73\"},\"gcue\":{\"principalId\":\"22ddfdbf-2bef-4cea-a8e5-d3668b5e9e95\",\"clientId\":\"3ae97258-4725-403a-8c3b-732141b1accd\"},\"mkdo\":{\"principalId\":\"1fe82f11-0612-4a44-ab02-9c234711d506\",\"clientId\":\"1ccf6d66-ec02-473d-a3a4-8183ceb74435\"},\"whbmd\":{\"principalId\":\"03c95574-0576-47a0-b41f-01133110192f\",\"clientId\":\"15c6b881-5c61-45be-b322-ee3b7b3e38c3\"}}},\"properties\":{\"provisioningState\":\"Failed\",\"status\":\"NotSpecified\",\"cloudId\":\"gmbmbexppbh\",\"cloudManagementEndpoint\":\"qrolfpf\",\"aadClientId\":\"algbquxigjyjg\",\"aadTenantId\":\"aoyfhrtxilnerkuj\",\"aadApplicationObjectId\":\"vlejuvfqa\",\"aadServicePrincipalObjectId\":\"lyxwjkcprbnwbx\",\"softwareAssuranceProperties\":{\"softwareAssuranceStatus\":\"Disabled\",\"softwareAssuranceIntent\":\"Enable\",\"lastUpdated\":\"2021-05-10T19:00:57Z\"},\"desiredProperties\":{\"windowsServerSubscription\":\"Disabled\",\"diagnosticLevel\":\"Enhanced\"},\"reportedProperties\":{\"clusterName\":\"jq\",\"clusterId\":\"hmuouqfprwzwbn\",\"clusterVersion\":\"itnwuizgazxufi\",\"nodes\":[{},{}],\"lastUpdated\":\"2021-02-22T18:13Z\",\"imdsAttestation\":\"Disabled\",\"diagnosticLevel\":\"Basic\",\"supportedCapabilities\":[\"dfvzwdzuhty\"]},\"trialDaysRemaining\":93.00579,\"billingModel\":\"dkfthwxmnt\",\"registrationTimestamp\":\"2021-09-03T22:18:56Z\",\"lastSyncTimestamp\":\"2021-02-01T09:39:18Z\",\"lastBillingTimestamp\":\"2021-07-09T10:48:35Z\",\"serviceEndpoint\":\"mijcmmxdcufufs\",\"resourceProviderObjectId\":\"ymzidn\"},\"location\":\"zcxtbzsgfyccsn\",\"tags\":{\"oosflnr\":\"dwzjeiach\",\"vypyqrimzinpv\":\"sfqpteehz\",\"rsoodqxhcrmnoh\":\"wjdk\",\"kwh\":\"t\"},\"id\":\"soifiyipjxsqw\",\"name\":\"gr\",\"type\":\"bznorcjxvsnby\"}],\"nextLink\":\"abnmocpcyshu\"}")
                .toObject(ClusterList.class);
        Assertions.assertEquals("zcxtbzsgfyccsn", model.value().get(0).location());
        Assertions.assertEquals("dwzjeiach", model.value().get(0).tags().get("oosflnr"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).typeIdentityType());
        Assertions.assertEquals("qrolfpf", model.value().get(0).cloudManagementEndpoint());
        Assertions.assertEquals("algbquxigjyjg", model.value().get(0).aadClientId());
        Assertions.assertEquals("aoyfhrtxilnerkuj", model.value().get(0).aadTenantId());
        Assertions.assertEquals("vlejuvfqa", model.value().get(0).aadApplicationObjectId());
        Assertions.assertEquals("lyxwjkcprbnwbx", model.value().get(0).aadServicePrincipalObjectId());
        Assertions
            .assertEquals(
                SoftwareAssuranceStatus.DISABLED,
                model.value().get(0).softwareAssuranceProperties().softwareAssuranceStatus());
        Assertions
            .assertEquals(
                SoftwareAssuranceIntent.ENABLE,
                model.value().get(0).softwareAssuranceProperties().softwareAssuranceIntent());
        Assertions
            .assertEquals(
                WindowsServerSubscription.DISABLED,
                model.value().get(0).desiredProperties().windowsServerSubscription());
        Assertions.assertEquals(DiagnosticLevel.ENHANCED, model.value().get(0).desiredProperties().diagnosticLevel());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterList model =
            new ClusterList()
                .withValue(
                    Arrays
                        .asList(
                            new ClusterInner()
                                .withLocation("zcxtbzsgfyccsn")
                                .withTags(
                                    mapOf(
                                        "oosflnr",
                                        "dwzjeiach",
                                        "vypyqrimzinpv",
                                        "sfqpteehz",
                                        "rsoodqxhcrmnoh",
                                        "wjdk",
                                        "kwh",
                                        "t"))
                                .withTypeIdentityType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                                .withUserAssignedIdentities(
                                    mapOf(
                                        "ap",
                                        new UserAssignedIdentity(),
                                        "gcue",
                                        new UserAssignedIdentity(),
                                        "mkdo",
                                        new UserAssignedIdentity(),
                                        "whbmd",
                                        new UserAssignedIdentity()))
                                .withCloudManagementEndpoint("qrolfpf")
                                .withAadClientId("algbquxigjyjg")
                                .withAadTenantId("aoyfhrtxilnerkuj")
                                .withAadApplicationObjectId("vlejuvfqa")
                                .withAadServicePrincipalObjectId("lyxwjkcprbnwbx")
                                .withSoftwareAssuranceProperties(
                                    new SoftwareAssuranceProperties()
                                        .withSoftwareAssuranceStatus(SoftwareAssuranceStatus.DISABLED)
                                        .withSoftwareAssuranceIntent(SoftwareAssuranceIntent.ENABLE))
                                .withDesiredProperties(
                                    new ClusterDesiredProperties()
                                        .withWindowsServerSubscription(WindowsServerSubscription.DISABLED)
                                        .withDiagnosticLevel(DiagnosticLevel.ENHANCED))));
        model = BinaryData.fromObject(model).toObject(ClusterList.class);
        Assertions.assertEquals("zcxtbzsgfyccsn", model.value().get(0).location());
        Assertions.assertEquals("dwzjeiach", model.value().get(0).tags().get("oosflnr"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.value().get(0).typeIdentityType());
        Assertions.assertEquals("qrolfpf", model.value().get(0).cloudManagementEndpoint());
        Assertions.assertEquals("algbquxigjyjg", model.value().get(0).aadClientId());
        Assertions.assertEquals("aoyfhrtxilnerkuj", model.value().get(0).aadTenantId());
        Assertions.assertEquals("vlejuvfqa", model.value().get(0).aadApplicationObjectId());
        Assertions.assertEquals("lyxwjkcprbnwbx", model.value().get(0).aadServicePrincipalObjectId());
        Assertions
            .assertEquals(
                SoftwareAssuranceStatus.DISABLED,
                model.value().get(0).softwareAssuranceProperties().softwareAssuranceStatus());
        Assertions
            .assertEquals(
                SoftwareAssuranceIntent.ENABLE,
                model.value().get(0).softwareAssuranceProperties().softwareAssuranceIntent());
        Assertions
            .assertEquals(
                WindowsServerSubscription.DISABLED,
                model.value().get(0).desiredProperties().windowsServerSubscription());
        Assertions.assertEquals(DiagnosticLevel.ENHANCED, model.value().get(0).desiredProperties().diagnosticLevel());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
