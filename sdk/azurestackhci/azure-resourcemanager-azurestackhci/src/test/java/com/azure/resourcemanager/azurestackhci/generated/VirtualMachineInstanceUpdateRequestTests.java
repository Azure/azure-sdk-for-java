// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.models.HardwareProfileUpdate;
import com.azure.resourcemanager.azurestackhci.models.Identity;
import com.azure.resourcemanager.azurestackhci.models.NetworkProfileUpdate;
import com.azure.resourcemanager.azurestackhci.models.NetworkProfileUpdateNetworkInterfacesItem;
import com.azure.resourcemanager.azurestackhci.models.OsProfileUpdate;
import com.azure.resourcemanager.azurestackhci.models.OsProfileUpdateLinuxConfiguration;
import com.azure.resourcemanager.azurestackhci.models.OsProfileUpdateWindowsConfiguration;
import com.azure.resourcemanager.azurestackhci.models.ResourceIdentityType;
import com.azure.resourcemanager.azurestackhci.models.StorageProfileUpdate;
import com.azure.resourcemanager.azurestackhci.models.StorageProfileUpdateDataDisksItem;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachineInstanceUpdateProperties;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachineInstanceUpdateRequest;
import com.azure.resourcemanager.azurestackhci.models.VmSizeEnum;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineInstanceUpdateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineInstanceUpdateRequest model = BinaryData.fromString(
            "{\"properties\":{\"hardwareProfile\":{\"vmSize\":\"Standard_D32s_v3\",\"processors\":1001511211,\"memoryMB\":5010159306531152149},\"storageProfile\":{\"dataDisks\":[{\"id\":\"g\"},{\"id\":\"yparybjufptbjc\"},{\"id\":\"nciuiyqvldaswvpp\"}]},\"networkProfile\":{\"networkInterfaces\":[{\"id\":\"lgcndhzxrrfcfsrh\"},{\"id\":\"gsnxuw\"},{\"id\":\"pphefsbzx\"},{\"id\":\"zxomeikjclwz\"}]},\"osProfile\":{\"computerName\":\"mwpfs\",\"linuxConfiguration\":{\"provisionVMAgent\":true,\"provisionVMConfigAgent\":true},\"windowsConfiguration\":{\"provisionVMAgent\":false,\"provisionVMConfigAgent\":false}}},\"identity\":{\"principalId\":\"yfp\",\"tenantId\":\"qi\",\"type\":\"SystemAssigned\"}}")
            .toObject(VirtualMachineInstanceUpdateRequest.class);
        Assertions.assertEquals(VmSizeEnum.STANDARD_D32S_V3, model.properties().hardwareProfile().vmSize());
        Assertions.assertEquals(1001511211, model.properties().hardwareProfile().processors());
        Assertions.assertEquals(5010159306531152149L, model.properties().hardwareProfile().memoryMB());
        Assertions.assertEquals("g", model.properties().storageProfile().dataDisks().get(0).id());
        Assertions.assertEquals("lgcndhzxrrfcfsrh",
            model.properties().networkProfile().networkInterfaces().get(0).id());
        Assertions.assertEquals("mwpfs", model.properties().osProfile().computerName());
        Assertions.assertEquals(true, model.properties().osProfile().linuxConfiguration().provisionVMAgent());
        Assertions.assertEquals(true, model.properties().osProfile().linuxConfiguration().provisionVMConfigAgent());
        Assertions.assertEquals(false, model.properties().osProfile().windowsConfiguration().provisionVMAgent());
        Assertions.assertEquals(false, model.properties().osProfile().windowsConfiguration().provisionVMConfigAgent());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineInstanceUpdateRequest model = new VirtualMachineInstanceUpdateRequest()
            .withProperties(new VirtualMachineInstanceUpdateProperties()
                .withHardwareProfile(new HardwareProfileUpdate().withVmSize(VmSizeEnum.STANDARD_D32S_V3)
                    .withProcessors(1001511211)
                    .withMemoryMB(5010159306531152149L))
                .withStorageProfile(new StorageProfileUpdate()
                    .withDataDisks(Arrays.asList(new StorageProfileUpdateDataDisksItem().withId("g"),
                        new StorageProfileUpdateDataDisksItem().withId("yparybjufptbjc"),
                        new StorageProfileUpdateDataDisksItem().withId("nciuiyqvldaswvpp"))))
                .withNetworkProfile(new NetworkProfileUpdate().withNetworkInterfaces(
                    Arrays.asList(new NetworkProfileUpdateNetworkInterfacesItem().withId("lgcndhzxrrfcfsrh"),
                        new NetworkProfileUpdateNetworkInterfacesItem().withId("gsnxuw"),
                        new NetworkProfileUpdateNetworkInterfacesItem().withId("pphefsbzx"),
                        new NetworkProfileUpdateNetworkInterfacesItem().withId("zxomeikjclwz"))))
                .withOsProfile(new OsProfileUpdate().withComputerName("mwpfs")
                    .withLinuxConfiguration(new OsProfileUpdateLinuxConfiguration().withProvisionVMAgent(true)
                        .withProvisionVMConfigAgent(true))
                    .withWindowsConfiguration(new OsProfileUpdateWindowsConfiguration().withProvisionVMAgent(false)
                        .withProvisionVMConfigAgent(false))))
            .withIdentity(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED));
        model = BinaryData.fromObject(model).toObject(VirtualMachineInstanceUpdateRequest.class);
        Assertions.assertEquals(VmSizeEnum.STANDARD_D32S_V3, model.properties().hardwareProfile().vmSize());
        Assertions.assertEquals(1001511211, model.properties().hardwareProfile().processors());
        Assertions.assertEquals(5010159306531152149L, model.properties().hardwareProfile().memoryMB());
        Assertions.assertEquals("g", model.properties().storageProfile().dataDisks().get(0).id());
        Assertions.assertEquals("lgcndhzxrrfcfsrh",
            model.properties().networkProfile().networkInterfaces().get(0).id());
        Assertions.assertEquals("mwpfs", model.properties().osProfile().computerName());
        Assertions.assertEquals(true, model.properties().osProfile().linuxConfiguration().provisionVMAgent());
        Assertions.assertEquals(true, model.properties().osProfile().linuxConfiguration().provisionVMConfigAgent());
        Assertions.assertEquals(false, model.properties().osProfile().windowsConfiguration().provisionVMAgent());
        Assertions.assertEquals(false, model.properties().osProfile().windowsConfiguration().provisionVMConfigAgent());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }
}
