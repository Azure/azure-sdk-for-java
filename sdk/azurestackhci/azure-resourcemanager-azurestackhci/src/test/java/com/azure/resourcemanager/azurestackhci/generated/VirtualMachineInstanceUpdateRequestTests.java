// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.models.HardwareProfileUpdate;
import com.azure.resourcemanager.azurestackhci.models.Identity;
import com.azure.resourcemanager.azurestackhci.models.NetworkProfileUpdate;
import com.azure.resourcemanager.azurestackhci.models.NetworkProfileUpdateNetworkInterfacesItem;
import com.azure.resourcemanager.azurestackhci.models.OsProfileUpdate;
import com.azure.resourcemanager.azurestackhci.models.OsProfileUpdateLinuxConfiguration;
import com.azure.resourcemanager.azurestackhci.models.OsProfileUpdateWindowsConfiguration;
import com.azure.resourcemanager.azurestackhci.models.ResourceIdentityType;
import com.azure.resourcemanager.azurestackhci.models.StorageProfileUpdate;
import com.azure.resourcemanager.azurestackhci.models.StorageProfileUpdateDataDisksItem;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachineInstanceUpdateProperties;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachineInstanceUpdateRequest;
import com.azure.resourcemanager.azurestackhci.models.VmSizeEnum;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineInstanceUpdateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineInstanceUpdateRequest model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"hardwareProfile\":{\"vmSize\":\"Standard_NV6\",\"processors\":97995700,\"memoryMB\":4253810910381406422},\"storageProfile\":{\"dataDisks\":[{\"id\":\"hfxobbcswsrtj\"}]},\"networkProfile\":{\"networkInterfaces\":[{\"id\":\"bpbewtghfgb\"},{\"id\":\"gw\"},{\"id\":\"vlvqhjkbegi\"},{\"id\":\"nmxiebwwaloayqc\"}]},\"osProfile\":{\"computerName\":\"tzjuzgwyzmhtxo\",\"linuxConfiguration\":{\"provisionVMAgent\":false,\"provisionVMConfigAgent\":false},\"windowsConfiguration\":{\"provisionVMAgent\":true,\"provisionVMConfigAgent\":false}}},\"identity\":{\"principalId\":\"qpsrknftguvri\",\"tenantId\":\"prwmdyvxqt\",\"type\":\"SystemAssigned\"}}")
                .toObject(VirtualMachineInstanceUpdateRequest.class);
        Assertions.assertEquals(VmSizeEnum.STANDARD_NV6, model.properties().hardwareProfile().vmSize());
        Assertions.assertEquals(97995700, model.properties().hardwareProfile().processors());
        Assertions.assertEquals(4253810910381406422L, model.properties().hardwareProfile().memoryMB());
        Assertions.assertEquals("hfxobbcswsrtj", model.properties().storageProfile().dataDisks().get(0).id());
        Assertions.assertEquals("bpbewtghfgb", model.properties().networkProfile().networkInterfaces().get(0).id());
        Assertions.assertEquals("tzjuzgwyzmhtxo", model.properties().osProfile().computerName());
        Assertions.assertEquals(false, model.properties().osProfile().linuxConfiguration().provisionVMAgent());
        Assertions.assertEquals(false, model.properties().osProfile().linuxConfiguration().provisionVMConfigAgent());
        Assertions.assertEquals(true, model.properties().osProfile().windowsConfiguration().provisionVMAgent());
        Assertions.assertEquals(false, model.properties().osProfile().windowsConfiguration().provisionVMConfigAgent());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineInstanceUpdateRequest model =
            new VirtualMachineInstanceUpdateRequest()
                .withProperties(
                    new VirtualMachineInstanceUpdateProperties()
                        .withHardwareProfile(
                            new HardwareProfileUpdate()
                                .withVmSize(VmSizeEnum.STANDARD_NV6)
                                .withProcessors(97995700)
                                .withMemoryMB(4253810910381406422L))
                        .withStorageProfile(
                            new StorageProfileUpdate()
                                .withDataDisks(
                                    Arrays.asList(new StorageProfileUpdateDataDisksItem().withId("hfxobbcswsrtj"))))
                        .withNetworkProfile(
                            new NetworkProfileUpdate()
                                .withNetworkInterfaces(
                                    Arrays
                                        .asList(
                                            new NetworkProfileUpdateNetworkInterfacesItem().withId("bpbewtghfgb"),
                                            new NetworkProfileUpdateNetworkInterfacesItem().withId("gw"),
                                            new NetworkProfileUpdateNetworkInterfacesItem().withId("vlvqhjkbegi"),
                                            new NetworkProfileUpdateNetworkInterfacesItem().withId("nmxiebwwaloayqc"))))
                        .withOsProfile(
                            new OsProfileUpdate()
                                .withComputerName("tzjuzgwyzmhtxo")
                                .withLinuxConfiguration(
                                    new OsProfileUpdateLinuxConfiguration()
                                        .withProvisionVMAgent(false)
                                        .withProvisionVMConfigAgent(false))
                                .withWindowsConfiguration(
                                    new OsProfileUpdateWindowsConfiguration()
                                        .withProvisionVMAgent(true)
                                        .withProvisionVMConfigAgent(false))))
                .withIdentity(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED));
        model = BinaryData.fromObject(model).toObject(VirtualMachineInstanceUpdateRequest.class);
        Assertions.assertEquals(VmSizeEnum.STANDARD_NV6, model.properties().hardwareProfile().vmSize());
        Assertions.assertEquals(97995700, model.properties().hardwareProfile().processors());
        Assertions.assertEquals(4253810910381406422L, model.properties().hardwareProfile().memoryMB());
        Assertions.assertEquals("hfxobbcswsrtj", model.properties().storageProfile().dataDisks().get(0).id());
        Assertions.assertEquals("bpbewtghfgb", model.properties().networkProfile().networkInterfaces().get(0).id());
        Assertions.assertEquals("tzjuzgwyzmhtxo", model.properties().osProfile().computerName());
        Assertions.assertEquals(false, model.properties().osProfile().linuxConfiguration().provisionVMAgent());
        Assertions.assertEquals(false, model.properties().osProfile().linuxConfiguration().provisionVMConfigAgent());
        Assertions.assertEquals(true, model.properties().osProfile().windowsConfiguration().provisionVMAgent());
        Assertions.assertEquals(false, model.properties().osProfile().windowsConfiguration().provisionVMConfigAgent());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }
}
