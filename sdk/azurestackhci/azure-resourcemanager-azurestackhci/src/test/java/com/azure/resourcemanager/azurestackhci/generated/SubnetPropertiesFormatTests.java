// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.fluent.models.SubnetPropertiesFormat;
import com.azure.resourcemanager.azurestackhci.models.IpAllocationMethodEnum;
import com.azure.resourcemanager.azurestackhci.models.IpPool;
import com.azure.resourcemanager.azurestackhci.models.IpPoolInfo;
import com.azure.resourcemanager.azurestackhci.models.IpPoolTypeEnum;
import com.azure.resourcemanager.azurestackhci.models.Route;
import com.azure.resourcemanager.azurestackhci.models.RouteTable;
import com.azure.resourcemanager.azurestackhci.models.SubnetPropertiesFormatIpConfigurationReferencesItem;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SubnetPropertiesFormatTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubnetPropertiesFormat model =
            BinaryData
                .fromString(
                    "{\"addressPrefix\":\"ummajtjaod\",\"addressPrefixes\":[\"nbdxk\",\"pxokajionp\",\"mexgstxgcp\",\"dg\"],\"ipAllocationMethod\":\"Static\",\"ipConfigurationReferences\":[{\"ID\":\"vdjwzrlovm\"}],\"routeTable\":{\"etag\":\"hijco\",\"name\":\"ctbzaq\",\"type\":\"sycbkbfk\",\"properties\":{\"routes\":[{\"properties\":{\"addressPrefix\":\"xxppofm\",\"nextHopIpAddress\":\"x\"},\"name\":\"jpgd\"},{\"properties\":{\"addressPrefix\":\"c\",\"nextHopIpAddress\":\"xhvpmoue\"},\"name\":\"dzxibqeojnxqbzvd\"},{\"properties\":{\"addressPrefix\":\"wndeicbtwnp\",\"nextHopIpAddress\":\"oqvuhr\"},\"name\":\"f\"}]}},\"ipPools\":[{\"name\":\"dglmjthjqkwp\",\"ipPoolType\":\"vm\",\"start\":\"xmqci\",\"end\":\"vhkhixu\",\"info\":{\"used\":\"topbobjogh\",\"available\":\"w\"}}],\"vlan\":54099605}")
                .toObject(SubnetPropertiesFormat.class);
        Assertions.assertEquals("ummajtjaod", model.addressPrefix());
        Assertions.assertEquals("nbdxk", model.addressPrefixes().get(0));
        Assertions.assertEquals(IpAllocationMethodEnum.STATIC, model.ipAllocationMethod());
        Assertions.assertEquals("vdjwzrlovm", model.ipConfigurationReferences().get(0).id());
        Assertions.assertEquals("jpgd", model.routeTable().routes().get(0).name());
        Assertions.assertEquals("xxppofm", model.routeTable().routes().get(0).addressPrefix());
        Assertions.assertEquals("x", model.routeTable().routes().get(0).nextHopIpAddress());
        Assertions.assertEquals("dglmjthjqkwp", model.ipPools().get(0).name());
        Assertions.assertEquals(IpPoolTypeEnum.VM, model.ipPools().get(0).ipPoolType());
        Assertions.assertEquals("xmqci", model.ipPools().get(0).start());
        Assertions.assertEquals("vhkhixu", model.ipPools().get(0).end());
        Assertions.assertEquals(54099605, model.vlan());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubnetPropertiesFormat model =
            new SubnetPropertiesFormat()
                .withAddressPrefix("ummajtjaod")
                .withAddressPrefixes(Arrays.asList("nbdxk", "pxokajionp", "mexgstxgcp", "dg"))
                .withIpAllocationMethod(IpAllocationMethodEnum.STATIC)
                .withIpConfigurationReferences(
                    Arrays.asList(new SubnetPropertiesFormatIpConfigurationReferencesItem().withId("vdjwzrlovm")))
                .withRouteTable(
                    new RouteTable()
                        .withRoutes(
                            Arrays
                                .asList(
                                    new Route().withName("jpgd").withAddressPrefix("xxppofm").withNextHopIpAddress("x"),
                                    new Route()
                                        .withName("dzxibqeojnxqbzvd")
                                        .withAddressPrefix("c")
                                        .withNextHopIpAddress("xhvpmoue"),
                                    new Route()
                                        .withName("f")
                                        .withAddressPrefix("wndeicbtwnp")
                                        .withNextHopIpAddress("oqvuhr"))))
                .withIpPools(
                    Arrays
                        .asList(
                            new IpPool()
                                .withName("dglmjthjqkwp")
                                .withIpPoolType(IpPoolTypeEnum.VM)
                                .withStart("xmqci")
                                .withEnd("vhkhixu")
                                .withInfo(new IpPoolInfo())))
                .withVlan(54099605);
        model = BinaryData.fromObject(model).toObject(SubnetPropertiesFormat.class);
        Assertions.assertEquals("ummajtjaod", model.addressPrefix());
        Assertions.assertEquals("nbdxk", model.addressPrefixes().get(0));
        Assertions.assertEquals(IpAllocationMethodEnum.STATIC, model.ipAllocationMethod());
        Assertions.assertEquals("vdjwzrlovm", model.ipConfigurationReferences().get(0).id());
        Assertions.assertEquals("jpgd", model.routeTable().routes().get(0).name());
        Assertions.assertEquals("xxppofm", model.routeTable().routes().get(0).addressPrefix());
        Assertions.assertEquals("x", model.routeTable().routes().get(0).nextHopIpAddress());
        Assertions.assertEquals("dglmjthjqkwp", model.ipPools().get(0).name());
        Assertions.assertEquals(IpPoolTypeEnum.VM, model.ipPools().get(0).ipPoolType());
        Assertions.assertEquals("xmqci", model.ipPools().get(0).start());
        Assertions.assertEquals("vhkhixu", model.ipPools().get(0).end());
        Assertions.assertEquals(54099605, model.vlan());
    }
}
