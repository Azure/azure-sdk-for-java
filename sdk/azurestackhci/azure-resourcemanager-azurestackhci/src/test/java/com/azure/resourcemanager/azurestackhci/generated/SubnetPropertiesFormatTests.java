// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.fluent.models.SubnetPropertiesFormat;
import com.azure.resourcemanager.azurestackhci.models.IpAllocationMethodEnum;
import com.azure.resourcemanager.azurestackhci.models.IpPool;
import com.azure.resourcemanager.azurestackhci.models.IpPoolInfo;
import com.azure.resourcemanager.azurestackhci.models.IpPoolTypeEnum;
import com.azure.resourcemanager.azurestackhci.models.Route;
import com.azure.resourcemanager.azurestackhci.models.RouteTable;
import com.azure.resourcemanager.azurestackhci.models.SubnetPropertiesFormatIpConfigurationReferencesItem;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SubnetPropertiesFormatTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubnetPropertiesFormat model = BinaryData.fromString(
            "{\"addressPrefix\":\"xlxqzvn\",\"addressPrefixes\":[\"bycucrwnamikz\",\"brqbsmswzi\",\"gfuhokzrusw\",\"vhczznvfby\"],\"ipAllocationMethod\":\"Dynamic\",\"ipConfigurationReferences\":[{\"ID\":\"wix\"}],\"routeTable\":{\"etag\":\"mwmxqhndvnoamld\",\"name\":\"haohdjhhflzokxc\",\"type\":\"pelnjetag\",\"properties\":{\"routes\":[{\"properties\":{\"addressPrefix\":\"tft\",\"nextHopIpAddress\":\"pnpbswveflocc\"},\"name\":\"mozi\"}]}},\"ipPools\":[{\"name\":\"g\",\"ipPoolType\":\"vm\",\"start\":\"xp\",\"end\":\"jcxcjxgrytfmpcyc\",\"info\":{\"used\":\"mcayk\",\"available\":\"noxuztrksx\"}},{\"name\":\"ndfcpfn\",\"ipPoolType\":\"vm\",\"start\":\"jtwkjaos\",\"end\":\"uzvoamktcqiosm\",\"info\":{\"used\":\"ahgx\",\"available\":\"lyrtltlaprlt\"}}],\"vlan\":179999920}")
            .toObject(SubnetPropertiesFormat.class);
        Assertions.assertEquals("xlxqzvn", model.addressPrefix());
        Assertions.assertEquals("bycucrwnamikz", model.addressPrefixes().get(0));
        Assertions.assertEquals(IpAllocationMethodEnum.DYNAMIC, model.ipAllocationMethod());
        Assertions.assertEquals("wix", model.ipConfigurationReferences().get(0).id());
        Assertions.assertEquals("mozi", model.routeTable().routes().get(0).name());
        Assertions.assertEquals("tft", model.routeTable().routes().get(0).addressPrefix());
        Assertions.assertEquals("pnpbswveflocc", model.routeTable().routes().get(0).nextHopIpAddress());
        Assertions.assertEquals("g", model.ipPools().get(0).name());
        Assertions.assertEquals(IpPoolTypeEnum.VM, model.ipPools().get(0).ipPoolType());
        Assertions.assertEquals("xp", model.ipPools().get(0).start());
        Assertions.assertEquals("jcxcjxgrytfmpcyc", model.ipPools().get(0).end());
        Assertions.assertEquals(179999920, model.vlan());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubnetPropertiesFormat model = new SubnetPropertiesFormat().withAddressPrefix("xlxqzvn")
            .withAddressPrefixes(Arrays.asList("bycucrwnamikz", "brqbsmswzi", "gfuhokzrusw", "vhczznvfby"))
            .withIpAllocationMethod(IpAllocationMethodEnum.DYNAMIC)
            .withIpConfigurationReferences(
                Arrays.asList(new SubnetPropertiesFormatIpConfigurationReferencesItem().withId("wix")))
            .withRouteTable(new RouteTable().withRoutes(Arrays
                .asList(new Route().withName("mozi").withAddressPrefix("tft").withNextHopIpAddress("pnpbswveflocc"))))
            .withIpPools(Arrays.asList(
                new IpPool().withName("g")
                    .withIpPoolType(IpPoolTypeEnum.VM)
                    .withStart("xp")
                    .withEnd("jcxcjxgrytfmpcyc")
                    .withInfo(new IpPoolInfo()),
                new IpPool().withName("ndfcpfn")
                    .withIpPoolType(IpPoolTypeEnum.VM)
                    .withStart("jtwkjaos")
                    .withEnd("uzvoamktcqiosm")
                    .withInfo(new IpPoolInfo())))
            .withVlan(179999920);
        model = BinaryData.fromObject(model).toObject(SubnetPropertiesFormat.class);
        Assertions.assertEquals("xlxqzvn", model.addressPrefix());
        Assertions.assertEquals("bycucrwnamikz", model.addressPrefixes().get(0));
        Assertions.assertEquals(IpAllocationMethodEnum.DYNAMIC, model.ipAllocationMethod());
        Assertions.assertEquals("wix", model.ipConfigurationReferences().get(0).id());
        Assertions.assertEquals("mozi", model.routeTable().routes().get(0).name());
        Assertions.assertEquals("tft", model.routeTable().routes().get(0).addressPrefix());
        Assertions.assertEquals("pnpbswveflocc", model.routeTable().routes().get(0).nextHopIpAddress());
        Assertions.assertEquals("g", model.ipPools().get(0).name());
        Assertions.assertEquals(IpPoolTypeEnum.VM, model.ipPools().get(0).ipPoolType());
        Assertions.assertEquals("xp", model.ipPools().get(0).start());
        Assertions.assertEquals("jcxcjxgrytfmpcyc", model.ipPools().get(0).end());
        Assertions.assertEquals(179999920, model.vlan());
    }
}
