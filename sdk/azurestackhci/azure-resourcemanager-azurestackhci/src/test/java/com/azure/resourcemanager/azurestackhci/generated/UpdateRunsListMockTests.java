// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.azurestackhci.AzureStackHciManager;
import com.azure.resourcemanager.azurestackhci.models.UpdateRun;
import com.azure.resourcemanager.azurestackhci.models.UpdateRunPropertiesState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class UpdateRunsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"location\":\"blioskkfmkmf\",\"properties\":{\"provisioningState\":\"Connected\",\"timeStarted\":\"2021-04-24T03:55:15Z\",\"lastUpdatedTime\":\"2021-09-10T08:39:41Z\",\"duration\":\"qvjcteoe\",\"state\":\"Succeeded\",\"progress\":{\"name\":\"skkzpxvjnzdpvo\",\"description\":\"jhpcn\",\"errorMessage\":\"xzfsnggytexvzilm\",\"status\":\"vzkwwwncknr\",\"startTimeUtc\":\"2021-04-14T11:24:35Z\",\"endTimeUtc\":\"2021-04-24T23:03:57Z\",\"lastUpdatedTimeUtc\":\"2021-07-01T16:16:08Z\",\"expectedExecutionTime\":\"ptjxulweuc\",\"steps\":[{\"name\":\"xqlehmc\",\"description\":\"jei\",\"errorMessage\":\"ehokamvfej\",\"status\":\"nttmbq\",\"startTimeUtc\":\"2021-08-14T09:47:54Z\",\"endTimeUtc\":\"2021-02-03T14:51:39Z\",\"lastUpdatedTimeUtc\":\"2021-10-08T17:49:14Z\",\"expectedExecutionTime\":\"okpysthhzagj\",\"steps\":[{},{},{}]}]}},\"id\":\"yrl\",\"name\":\"g\",\"type\":\"nuzejgvkveb\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AzureStackHciManager manager =
            AzureStackHciManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<UpdateRun> response =
            manager.updateRuns().list("sxzqbglcjkaysp", "hz", "dubtlmj", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("blioskkfmkmf", response.iterator().next().location());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-24T03:55:15Z"), response.iterator().next().timeStarted());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-09-10T08:39:41Z"), response.iterator().next().lastUpdatedTime());
        Assertions.assertEquals("qvjcteoe", response.iterator().next().duration());
        Assertions.assertEquals(UpdateRunPropertiesState.SUCCEEDED, response.iterator().next().state());
        Assertions.assertEquals("skkzpxvjnzdpvo", response.iterator().next().namePropertiesName());
        Assertions.assertEquals("jhpcn", response.iterator().next().description());
        Assertions.assertEquals("xzfsnggytexvzilm", response.iterator().next().errorMessage());
        Assertions.assertEquals("vzkwwwncknr", response.iterator().next().status());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-04-14T11:24:35Z"), response.iterator().next().startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-24T23:03:57Z"), response.iterator().next().endTimeUtc());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-07-01T16:16:08Z"), response.iterator().next().lastUpdatedTimeUtc());
        Assertions.assertEquals("ptjxulweuc", response.iterator().next().expectedExecutionTime());
        Assertions.assertEquals("xqlehmc", response.iterator().next().steps().get(0).name());
        Assertions.assertEquals("jei", response.iterator().next().steps().get(0).description());
        Assertions.assertEquals("ehokamvfej", response.iterator().next().steps().get(0).errorMessage());
        Assertions.assertEquals("nttmbq", response.iterator().next().steps().get(0).status());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-14T09:47:54Z"), response.iterator().next().steps().get(0).startTimeUtc());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-02-03T14:51:39Z"), response.iterator().next().steps().get(0).endTimeUtc());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-10-08T17:49:14Z"),
                response.iterator().next().steps().get(0).lastUpdatedTimeUtc());
        Assertions.assertEquals("okpysthhzagj", response.iterator().next().steps().get(0).expectedExecutionTime());
    }
}
