// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.models.HardwareProfileUpdate;
import com.azure.resourcemanager.azurestackhci.models.NetworkProfileUpdate;
import com.azure.resourcemanager.azurestackhci.models.NetworkProfileUpdateNetworkInterfacesItem;
import com.azure.resourcemanager.azurestackhci.models.StorageProfileUpdate;
import com.azure.resourcemanager.azurestackhci.models.StorageProfileUpdateDataDisksItem;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachineUpdateProperties;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachinesUpdateRequest;
import com.azure.resourcemanager.azurestackhci.models.VmSizeEnum;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachinesUpdateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachinesUpdateRequest model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"hardwareProfile\":{\"vmSize\":\"Standard_DS2_v2\",\"processors\":1960612501,\"memoryMB\":6532058938003147874},\"storageProfile\":{\"dataDisks\":[{\"id\":\"wywa\"},{\"id\":\"ihknsmjbl\"}]},\"networkProfile\":{\"networkInterfaces\":[{\"id\":\"nymzotqyr\"},{\"id\":\"zcbmqqvxmvwf\"},{\"id\":\"ayxonsupeujl\"}]}},\"tags\":{\"gsxgnxfyqon\":\"hcvsqltnzoi\"}}")
                .toObject(VirtualMachinesUpdateRequest.class);
        Assertions.assertEquals(VmSizeEnum.STANDARD_DS2_V2, model.properties().hardwareProfile().vmSize());
        Assertions.assertEquals(1960612501, model.properties().hardwareProfile().processors());
        Assertions.assertEquals(6532058938003147874L, model.properties().hardwareProfile().memoryMB());
        Assertions.assertEquals("wywa", model.properties().storageProfile().dataDisks().get(0).id());
        Assertions.assertEquals("nymzotqyr", model.properties().networkProfile().networkInterfaces().get(0).id());
        Assertions.assertEquals("hcvsqltnzoi", model.tags().get("gsxgnxfyqon"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachinesUpdateRequest model =
            new VirtualMachinesUpdateRequest()
                .withProperties(
                    new VirtualMachineUpdateProperties()
                        .withHardwareProfile(
                            new HardwareProfileUpdate()
                                .withVmSize(VmSizeEnum.STANDARD_DS2_V2)
                                .withProcessors(1960612501)
                                .withMemoryMB(6532058938003147874L))
                        .withStorageProfile(
                            new StorageProfileUpdate()
                                .withDataDisks(
                                    Arrays
                                        .asList(
                                            new StorageProfileUpdateDataDisksItem().withId("wywa"),
                                            new StorageProfileUpdateDataDisksItem().withId("ihknsmjbl"))))
                        .withNetworkProfile(
                            new NetworkProfileUpdate()
                                .withNetworkInterfaces(
                                    Arrays
                                        .asList(
                                            new NetworkProfileUpdateNetworkInterfacesItem().withId("nymzotqyr"),
                                            new NetworkProfileUpdateNetworkInterfacesItem().withId("zcbmqqvxmvwf"),
                                            new NetworkProfileUpdateNetworkInterfacesItem().withId("ayxonsupeujl")))))
                .withTags(mapOf("gsxgnxfyqon", "hcvsqltnzoi"));
        model = BinaryData.fromObject(model).toObject(VirtualMachinesUpdateRequest.class);
        Assertions.assertEquals(VmSizeEnum.STANDARD_DS2_V2, model.properties().hardwareProfile().vmSize());
        Assertions.assertEquals(1960612501, model.properties().hardwareProfile().processors());
        Assertions.assertEquals(6532058938003147874L, model.properties().hardwareProfile().memoryMB());
        Assertions.assertEquals("wywa", model.properties().storageProfile().dataDisks().get(0).id());
        Assertions.assertEquals("nymzotqyr", model.properties().networkProfile().networkInterfaces().get(0).id());
        Assertions.assertEquals("hcvsqltnzoi", model.tags().get("gsxgnxfyqon"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
