// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.models.InfrastructureNetwork;
import com.azure.resourcemanager.azurestackhci.models.IpPools;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class InfrastructureNetworkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InfrastructureNetwork model = BinaryData.fromString(
            "{\"subnetMask\":\"lylpstdb\",\"gateway\":\"xsrz\",\"ipPools\":[{\"startingAddress\":\"erscdntne\",\"endingAddress\":\"iwjmygtdssls\"},{\"startingAddress\":\"mweriofzpy\",\"endingAddress\":\"emwabnet\"},{\"startingAddress\":\"hszhedplvwiwu\",\"endingAddress\":\"wmbesldnkw\"},{\"startingAddress\":\"pp\",\"endingAddress\":\"lcxog\"}],\"dnsServers\":[\"onz\",\"nsikvmkqzeqqkdl\",\"fzxmhhvhgureodkw\"],\"useDhcp\":true}")
            .toObject(InfrastructureNetwork.class);
        Assertions.assertEquals("lylpstdb", model.subnetMask());
        Assertions.assertEquals("xsrz", model.gateway());
        Assertions.assertEquals("erscdntne", model.ipPools().get(0).startingAddress());
        Assertions.assertEquals("iwjmygtdssls", model.ipPools().get(0).endingAddress());
        Assertions.assertEquals("onz", model.dnsServers().get(0));
        Assertions.assertEquals(true, model.useDhcp());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InfrastructureNetwork model = new InfrastructureNetwork().withSubnetMask("lylpstdb")
            .withGateway("xsrz")
            .withIpPools(Arrays.asList(new IpPools().withStartingAddress("erscdntne").withEndingAddress("iwjmygtdssls"),
                new IpPools().withStartingAddress("mweriofzpy").withEndingAddress("emwabnet"),
                new IpPools().withStartingAddress("hszhedplvwiwu").withEndingAddress("wmbesldnkw"),
                new IpPools().withStartingAddress("pp").withEndingAddress("lcxog")))
            .withDnsServers(Arrays.asList("onz", "nsikvmkqzeqqkdl", "fzxmhhvhgureodkw"))
            .withUseDhcp(true);
        model = BinaryData.fromObject(model).toObject(InfrastructureNetwork.class);
        Assertions.assertEquals("lylpstdb", model.subnetMask());
        Assertions.assertEquals("xsrz", model.gateway());
        Assertions.assertEquals("erscdntne", model.ipPools().get(0).startingAddress());
        Assertions.assertEquals("iwjmygtdssls", model.ipPools().get(0).endingAddress());
        Assertions.assertEquals("onz", model.dnsServers().get(0));
        Assertions.assertEquals(true, model.useDhcp());
    }
}
