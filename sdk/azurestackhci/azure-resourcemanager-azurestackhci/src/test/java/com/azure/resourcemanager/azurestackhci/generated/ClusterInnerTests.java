// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.fluent.models.ClusterInner;
import com.azure.resourcemanager.azurestackhci.models.ClusterDesiredProperties;
import com.azure.resourcemanager.azurestackhci.models.DiagnosticLevel;
import com.azure.resourcemanager.azurestackhci.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.azurestackhci.models.SoftwareAssuranceIntent;
import com.azure.resourcemanager.azurestackhci.models.SoftwareAssuranceProperties;
import com.azure.resourcemanager.azurestackhci.models.UserAssignedIdentity;
import com.azure.resourcemanager.azurestackhci.models.WindowsServerSubscription;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterInner model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"4c1a5764-c309-4dcf-95a2-da53ff8e124e\",\"tenantId\":\"736324c6-eefd-49a6-af9a-13c5f1678b54\",\"type\":\"None\",\"userAssignedIdentities\":{\"xjnspy\":{\"principalId\":\"ccf77097-b51d-4310-b3d7-83575ef6ab88\",\"clientId\":\"7643403f-f109-4c44-ba90-54c2b4ea7864\"},\"koen\":{\"principalId\":\"b7d98e9a-cba1-4c9d-969e-e78816fb5a37\",\"clientId\":\"f20489c9-9dae-4eb1-b8ba-4a74c81f0772\"}}},\"properties\":{\"provisioningState\":\"PartiallySucceeded\",\"status\":\"ValidationInProgress\",\"connectivityStatus\":\"NotConnectedRecently\",\"cloudId\":\"tiukbldngkpoci\",\"cloudManagementEndpoint\":\"z\",\"aadClientId\":\"o\",\"aadTenantId\":\"ukgjnpiucgygevq\",\"aadApplicationObjectId\":\"typmrbpizcdrqjsd\",\"aadServicePrincipalObjectId\":\"dnfyhxdeoejzicwi\",\"softwareAssuranceProperties\":{\"softwareAssuranceStatus\":\"Enabled\",\"softwareAssuranceIntent\":\"Disable\",\"lastUpdated\":\"2021-01-13T10:46:41Z\"},\"desiredProperties\":{\"windowsServerSubscription\":\"Enabled\",\"diagnosticLevel\":\"Off\"},\"reportedProperties\":{\"clusterName\":\"hajdeyeamdpha\",\"clusterId\":\"lpbuxwgipwhonowk\",\"clusterVersion\":\"hwankixzbinjepu\",\"nodes\":[{\"name\":\"ywnuzoq\",\"id\":41.681313,\"windowsServerSubscription\":\"Enabled\",\"nodeType\":\"ThirdParty\",\"ehcResourceId\":\"kcqvyxl\",\"manufacturer\":\"zlsico\",\"model\":\"qqn\",\"osName\":\"lryav\",\"osVersion\":\"heun\",\"osDisplayVersion\":\"qhgyxzkonocukok\",\"serialNumber\":\"axuconuq\",\"coreCount\":31.20104,\"memoryInGiB\":63.630527,\"lastLicensingTimestamp\":\"2021-09-10T05:55:36Z\",\"oemActivation\":\"Enabled\"}],\"lastUpdated\":\"2021-10-05T00:39Z\",\"imdsAttestation\":\"Disabled\",\"diagnosticLevel\":\"Basic\",\"supportedCapabilities\":[\"jektcxsenh\",\"lrsf\",\"rzpwvlqdqgbiq\"],\"clusterType\":\"ThirdParty\",\"manufacturer\":\"kaet\",\"oemActivation\":\"Enabled\"},\"isolatedVmAttestationConfiguration\":{\"attestationResourceId\":\"civfsnkymuctq\",\"relyingPartyServiceEndpoint\":\"fbebrjcxer\",\"attestationServiceEndpoint\":\"wutttxfvjrbi\"},\"trialDaysRemaining\":78.7926,\"billingModel\":\"epcyvahfnlj\",\"registrationTimestamp\":\"2021-01-31T22:23:26Z\",\"lastSyncTimestamp\":\"2021-03-04T13:42:29Z\",\"lastBillingTimestamp\":\"2021-07-11T10:53:21Z\",\"serviceEndpoint\":\"j\",\"resourceProviderObjectId\":\"idokgjlj\"},\"location\":\"xgvcl\",\"tags\":{\"bijhtxfvgxbf\":\"sncghkjeszz\",\"ec\":\"mxnehmp\",\"gr\":\"godebfqkkrbmpu\"},\"id\":\"wflzlfbxzpuzy\",\"name\":\"ispnqzahmgkbrp\",\"type\":\"y\"}")
            .toObject(ClusterInner.class);
        Assertions.assertEquals("xgvcl", model.location());
        Assertions.assertEquals("sncghkjeszz", model.tags().get("bijhtxfvgxbf"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.typeIdentityType());
        Assertions.assertEquals("z", model.cloudManagementEndpoint());
        Assertions.assertEquals("o", model.aadClientId());
        Assertions.assertEquals("ukgjnpiucgygevq", model.aadTenantId());
        Assertions.assertEquals("typmrbpizcdrqjsd", model.aadApplicationObjectId());
        Assertions.assertEquals("dnfyhxdeoejzicwi", model.aadServicePrincipalObjectId());
        Assertions.assertEquals(SoftwareAssuranceIntent.DISABLE,
            model.softwareAssuranceProperties().softwareAssuranceIntent());
        Assertions.assertEquals(WindowsServerSubscription.ENABLED,
            model.desiredProperties().windowsServerSubscription());
        Assertions.assertEquals(DiagnosticLevel.OFF, model.desiredProperties().diagnosticLevel());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterInner model = new ClusterInner().withLocation("xgvcl")
            .withTags(mapOf("bijhtxfvgxbf", "sncghkjeszz", "ec", "mxnehmp", "gr", "godebfqkkrbmpu"))
            .withTypeIdentityType(ManagedServiceIdentityType.NONE)
            .withUserAssignedIdentities(mapOf("xjnspy", new UserAssignedIdentity(), "koen", new UserAssignedIdentity()))
            .withCloudManagementEndpoint("z")
            .withAadClientId("o")
            .withAadTenantId("ukgjnpiucgygevq")
            .withAadApplicationObjectId("typmrbpizcdrqjsd")
            .withAadServicePrincipalObjectId("dnfyhxdeoejzicwi")
            .withSoftwareAssuranceProperties(
                new SoftwareAssuranceProperties().withSoftwareAssuranceIntent(SoftwareAssuranceIntent.DISABLE))
            .withDesiredProperties(
                new ClusterDesiredProperties().withWindowsServerSubscription(WindowsServerSubscription.ENABLED)
                    .withDiagnosticLevel(DiagnosticLevel.OFF));
        model = BinaryData.fromObject(model).toObject(ClusterInner.class);
        Assertions.assertEquals("xgvcl", model.location());
        Assertions.assertEquals("sncghkjeszz", model.tags().get("bijhtxfvgxbf"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.typeIdentityType());
        Assertions.assertEquals("z", model.cloudManagementEndpoint());
        Assertions.assertEquals("o", model.aadClientId());
        Assertions.assertEquals("ukgjnpiucgygevq", model.aadTenantId());
        Assertions.assertEquals("typmrbpizcdrqjsd", model.aadApplicationObjectId());
        Assertions.assertEquals("dnfyhxdeoejzicwi", model.aadServicePrincipalObjectId());
        Assertions.assertEquals(SoftwareAssuranceIntent.DISABLE,
            model.softwareAssuranceProperties().softwareAssuranceIntent());
        Assertions.assertEquals(WindowsServerSubscription.ENABLED,
            model.desiredProperties().windowsServerSubscription());
        Assertions.assertEquals(DiagnosticLevel.OFF, model.desiredProperties().diagnosticLevel());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
