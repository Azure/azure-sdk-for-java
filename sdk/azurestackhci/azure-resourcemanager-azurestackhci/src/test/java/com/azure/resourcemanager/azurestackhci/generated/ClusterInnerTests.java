// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.fluent.models.ClusterInner;
import com.azure.resourcemanager.azurestackhci.models.ClusterDesiredProperties;
import com.azure.resourcemanager.azurestackhci.models.DiagnosticLevel;
import com.azure.resourcemanager.azurestackhci.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.azurestackhci.models.SoftwareAssuranceIntent;
import com.azure.resourcemanager.azurestackhci.models.SoftwareAssuranceProperties;
import com.azure.resourcemanager.azurestackhci.models.SoftwareAssuranceStatus;
import com.azure.resourcemanager.azurestackhci.models.UserAssignedIdentity;
import com.azure.resourcemanager.azurestackhci.models.WindowsServerSubscription;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterInner model =
            BinaryData
                .fromString(
                    "{\"identity\":{\"principalId\":\"5f90539b-5ebc-45b0-987a-8948be88922b\",\"tenantId\":\"40f127c9-92be-4454-9fb8-014cb512d65b\",\"type\":\"None\",\"userAssignedIdentities\":{\"pbtoqcjmkl\":{\"principalId\":\"9a5c38b8-fc3a-42f8-b68b-51ac27321a3f\",\"clientId\":\"95f0250c-25e2-4275-9779-13fcc2d68e75\"},\"bqidtqaj\":{\"principalId\":\"d9430ee1-936e-4003-b0b8-56b774044204\",\"clientId\":\"c6a7d082-fbfd-4006-b8da-8920eab89136\"}}},\"properties\":{\"provisioningState\":\"PartiallySucceeded\",\"status\":\"NotConnectedRecently\",\"cloudId\":\"dj\",\"cloudManagementEndpoint\":\"lkhbz\",\"aadClientId\":\"epgzgqexz\",\"aadTenantId\":\"c\",\"aadApplicationObjectId\":\"c\",\"aadServicePrincipalObjectId\":\"ierhhbcsglummaj\",\"softwareAssuranceProperties\":{\"softwareAssuranceStatus\":\"Disabled\",\"softwareAssuranceIntent\":\"Disable\",\"lastUpdated\":\"2021-08-20T07:04:42Z\"},\"desiredProperties\":{\"windowsServerSubscription\":\"Disabled\",\"diagnosticLevel\":\"Off\"},\"reportedProperties\":{\"clusterName\":\"xo\",\"clusterId\":\"jionpimexgstxgc\",\"clusterVersion\":\"dg\",\"nodes\":[{\"name\":\"r\",\"id\":45.24782,\"windowsServerSubscription\":\"Enabled\",\"nodeType\":\"ThirdParty\",\"ehcResourceId\":\"ovmclwhijcoejct\",\"manufacturer\":\"aqsqsycbkbfk\",\"model\":\"kdkexxp\",\"osName\":\"fmxa\",\"osVersion\":\"fjpgddtocjjxhvp\",\"osDisplayVersion\":\"uexhdzx\",\"serialNumber\":\"qeojnxqbzvddntw\",\"coreCount\":13.78758,\"memoryInGiB\":75.1224},{\"name\":\"twnpzaoqvuhrhcf\",\"id\":7.7230096,\"windowsServerSubscription\":\"Enabled\",\"nodeType\":\"FirstParty\",\"ehcResourceId\":\"jthjqkwpyei\",\"manufacturer\":\"mqc\",\"model\":\"q\",\"osName\":\"khixuigdtopbo\",\"osVersion\":\"og\",\"osDisplayVersion\":\"e\",\"serialNumber\":\"a\",\"coreCount\":51.08137,\"memoryInGiB\":31.158012},{\"name\":\"ayvvtpgvdf\",\"id\":80.9739,\"windowsServerSubscription\":\"Enabled\",\"nodeType\":\"ThirdParty\",\"ehcResourceId\":\"tqxln\",\"manufacturer\":\"lefgugnxk\",\"model\":\"dqmidtt\",\"osName\":\"rvqdra\",\"osVersion\":\"jybige\",\"osDisplayVersion\":\"qfbow\",\"serialNumber\":\"anyktzlcuiywg\",\"coreCount\":80.93234,\"memoryInGiB\":50.552242},{\"name\":\"rvynhzgpph\",\"id\":83.95377,\"windowsServerSubscription\":\"Disabled\",\"nodeType\":\"ThirdParty\",\"ehcResourceId\":\"pec\",\"manufacturer\":\"m\",\"model\":\"oo\",\"osName\":\"xlzevgbmqjqabcy\",\"osVersion\":\"ivkwlzuvccfwnfnb\",\"osDisplayVersion\":\"fionl\",\"serialNumber\":\"x\",\"coreCount\":23.5933,\"memoryInGiB\":69.87356}],\"lastUpdated\":\"2021-07-17T14:59:45Z\",\"imdsAttestation\":\"Enabled\",\"diagnosticLevel\":\"Off\",\"supportedCapabilities\":[\"qwxrjfeallnw\"]},\"trialDaysRemaining\":36.936016,\"billingModel\":\"snjampmng\",\"registrationTimestamp\":\"2021-10-17T15:10:59Z\",\"lastSyncTimestamp\":\"2021-08-06T20:55:26Z\",\"lastBillingTimestamp\":\"2021-11-12T11:29:02Z\",\"serviceEndpoint\":\"ooch\",\"resourceProviderObjectId\":\"onq\"},\"location\":\"kvlrxnj\",\"tags\":{\"enjbdlwtgrhp\":\"eipheoflokeyy\",\"umasxazjpq\":\"jp\"},\"id\":\"e\",\"name\":\"ualhbxxhejj\",\"type\":\"zvdudgwdslfhotwm\"}")
                .toObject(ClusterInner.class);
        Assertions.assertEquals("kvlrxnj", model.location());
        Assertions.assertEquals("eipheoflokeyy", model.tags().get("enjbdlwtgrhp"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.typeIdentityType());
        Assertions.assertEquals("lkhbz", model.cloudManagementEndpoint());
        Assertions.assertEquals("epgzgqexz", model.aadClientId());
        Assertions.assertEquals("c", model.aadTenantId());
        Assertions.assertEquals("c", model.aadApplicationObjectId());
        Assertions.assertEquals("ierhhbcsglummaj", model.aadServicePrincipalObjectId());
        Assertions
            .assertEquals(
                SoftwareAssuranceStatus.DISABLED, model.softwareAssuranceProperties().softwareAssuranceStatus());
        Assertions
            .assertEquals(
                SoftwareAssuranceIntent.DISABLE, model.softwareAssuranceProperties().softwareAssuranceIntent());
        Assertions
            .assertEquals(WindowsServerSubscription.DISABLED, model.desiredProperties().windowsServerSubscription());
        Assertions.assertEquals(DiagnosticLevel.OFF, model.desiredProperties().diagnosticLevel());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterInner model =
            new ClusterInner()
                .withLocation("kvlrxnj")
                .withTags(mapOf("enjbdlwtgrhp", "eipheoflokeyy", "umasxazjpq", "jp"))
                .withTypeIdentityType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(
                    mapOf("pbtoqcjmkl", new UserAssignedIdentity(), "bqidtqaj", new UserAssignedIdentity()))
                .withCloudManagementEndpoint("lkhbz")
                .withAadClientId("epgzgqexz")
                .withAadTenantId("c")
                .withAadApplicationObjectId("c")
                .withAadServicePrincipalObjectId("ierhhbcsglummaj")
                .withSoftwareAssuranceProperties(
                    new SoftwareAssuranceProperties()
                        .withSoftwareAssuranceStatus(SoftwareAssuranceStatus.DISABLED)
                        .withSoftwareAssuranceIntent(SoftwareAssuranceIntent.DISABLE))
                .withDesiredProperties(
                    new ClusterDesiredProperties()
                        .withWindowsServerSubscription(WindowsServerSubscription.DISABLED)
                        .withDiagnosticLevel(DiagnosticLevel.OFF));
        model = BinaryData.fromObject(model).toObject(ClusterInner.class);
        Assertions.assertEquals("kvlrxnj", model.location());
        Assertions.assertEquals("eipheoflokeyy", model.tags().get("enjbdlwtgrhp"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.typeIdentityType());
        Assertions.assertEquals("lkhbz", model.cloudManagementEndpoint());
        Assertions.assertEquals("epgzgqexz", model.aadClientId());
        Assertions.assertEquals("c", model.aadTenantId());
        Assertions.assertEquals("c", model.aadApplicationObjectId());
        Assertions.assertEquals("ierhhbcsglummaj", model.aadServicePrincipalObjectId());
        Assertions
            .assertEquals(
                SoftwareAssuranceStatus.DISABLED, model.softwareAssuranceProperties().softwareAssuranceStatus());
        Assertions
            .assertEquals(
                SoftwareAssuranceIntent.DISABLE, model.softwareAssuranceProperties().softwareAssuranceIntent());
        Assertions
            .assertEquals(WindowsServerSubscription.DISABLED, model.desiredProperties().windowsServerSubscription());
        Assertions.assertEquals(DiagnosticLevel.OFF, model.desiredProperties().diagnosticLevel());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
