// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.azurestackhci.AzureStackHciManager;
import com.azure.resourcemanager.azurestackhci.models.Cluster;
import com.azure.resourcemanager.azurestackhci.models.ClusterDesiredProperties;
import com.azure.resourcemanager.azurestackhci.models.DiagnosticLevel;
import com.azure.resourcemanager.azurestackhci.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.azurestackhci.models.SoftwareAssuranceIntent;
import com.azure.resourcemanager.azurestackhci.models.SoftwareAssuranceProperties;
import com.azure.resourcemanager.azurestackhci.models.SoftwareAssuranceStatus;
import com.azure.resourcemanager.azurestackhci.models.UserAssignedIdentity;
import com.azure.resourcemanager.azurestackhci.models.WindowsServerSubscription;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ClustersCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"identity\":{\"principalId\":\"b9c05469-772e-4b09-aff7-4e4a4b9ee0ab\",\"tenantId\":\"a4632961-c1c9-43ec-9089-e2439c71d03f\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"alblhtjqvq\":{\"principalId\":\"942f6b85-2990-444f-8f9a-797ca86a8a44\",\"clientId\":\"3fdbc390-e609-4375-9b4c-45304b1e1b55\"},\"eh\":{\"principalId\":\"49c40fa9-dea9-4c4e-ba61-45198a31f335\",\"clientId\":\"5c0b0a77-b5a1-4e42-b3d8-06a3bf399898\"},\"mxhzzysevus\":{\"principalId\":\"84a1dc95-ae14-43b8-905e-144886ec6309\",\"clientId\":\"084594bd-fb09-4cff-8071-d752d4eb20bc\"}}},\"properties\":{\"provisioningState\":\"Deleted\",\"status\":\"Succeeded\",\"cloudId\":\"yveimipsk\",\"cloudManagementEndpoint\":\"zatvfuzka\",\"aadClientId\":\"jvvruxwigsyei\",\"aadTenantId\":\"dsmjtgr\",\"aadApplicationObjectId\":\"dgkkile\",\"aadServicePrincipalObjectId\":\"kcsmk\",\"softwareAssuranceProperties\":{\"softwareAssuranceStatus\":\"Disabled\",\"softwareAssuranceIntent\":\"Disable\",\"lastUpdated\":\"2021-01-25T05:29:08Z\"},\"desiredProperties\":{\"windowsServerSubscription\":\"Enabled\",\"diagnosticLevel\":\"Off\"},\"reportedProperties\":{\"clusterName\":\"floygbdgwumg\",\"clusterId\":\"gdhpabgdexjddv\",\"clusterVersion\":\"aqwotmmwl\",\"nodes\":[{\"name\":\"srsxaptefh\",\"id\":77.663864,\"windowsServerSubscription\":\"Disabled\",\"nodeType\":\"FirstParty\",\"ehcResourceId\":\"ljnhvlqj\",\"manufacturer\":\"kpeeksnbksdqhj\",\"model\":\"klxesl\",\"osName\":\"hustcpoqmavnwqjw\",\"osVersion\":\"knlejjjkxybwfd\",\"osDisplayVersion\":\"jbzten\",\"serialNumber\":\"kzykjtjk\",\"coreCount\":35.755302,\"memoryInGiB\":39.99708},{\"name\":\"shcdpkupnqrmg\",\"id\":59.91635,\"windowsServerSubscription\":\"Enabled\",\"nodeType\":\"ThirdParty\",\"ehcResourceId\":\"eoiojfizfavkjzw\",\"manufacturer\":\"cyayk\",\"model\":\"fz\",\"osName\":\"fwxrzxmdew\",\"osVersion\":\"sxkrpl\",\"osDisplayVersion\":\"aze\",\"serialNumber\":\"w\",\"coreCount\":21.793896,\"memoryInGiB\":0.45596957},{\"name\":\"suhbrnn\",\"id\":8.730274,\"windowsServerSubscription\":\"Enabled\",\"nodeType\":\"ThirdParty\",\"ehcResourceId\":\"qkbiwet\",\"manufacturer\":\"zycyqiqyhg\",\"model\":\"etzlexbsfledynoj\",\"osName\":\"iuwfbzkkdtnhqsy\",\"osVersion\":\"jselpkpbafvafh\",\"osDisplayVersion\":\"ylcc\",\"serialNumber\":\"vxrh\",\"coreCount\":0.51108,\"memoryInGiB\":19.057257}],\"lastUpdated\":\"2021-01-28T03:16:15Z\",\"imdsAttestation\":\"Disabled\",\"diagnosticLevel\":\"Enhanced\",\"supportedCapabilities\":[\"bmairrhvhfnracwn\",\"qigtuujwouhdaws\",\"grbjbxsjybvitvqk\",\"y\"]},\"trialDaysRemaining\":7.9839587,\"billingModel\":\"mtggmu\",\"registrationTimestamp\":\"2021-05-02T12:21:31Z\",\"lastSyncTimestamp\":\"2021-01-31T17:58:01Z\",\"lastBillingTimestamp\":\"2021-10-26T15:32:05Z\",\"serviceEndpoint\":\"kfexlv\",\"resourceProviderObjectId\":\"oakizvoai\"},\"location\":\"a\",\"tags\":{\"phvxz\":\"uwiguyxlyk\",\"pejtl\":\"wxh\",\"rxhxkn\":\"exaonwivkcq\",\"upijubyqjfkakfq\":\"ccrmmk\"},\"id\":\"rke\",\"name\":\"yildudxjascow\",\"type\":\"f\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AzureStackHciManager manager =
            AzureStackHciManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Cluster response =
            manager
                .clusters()
                .define("vvbxiwkgfbqljnq")
                .withRegion("lwryshwddkvbxgkq")
                .withExistingResourceGroup("vodrrslblxydkxr")
                .withTags(mapOf("tymtpoiwenazer", "bwptdacarvvlf", "qalsxkd", "hzr"))
                .withTypeIdentityType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("ulehurqlr", new UserAssignedIdentity()))
                .withCloudManagementEndpoint("brxmrgch")
                .withAadClientId("pxkiyf")
                .withAadTenantId("kbajbu")
                .withAadApplicationObjectId("gd")
                .withAadServicePrincipalObjectId("sioycblevpmcl")
                .withSoftwareAssuranceProperties(
                    new SoftwareAssuranceProperties()
                        .withSoftwareAssuranceStatus(SoftwareAssuranceStatus.ENABLED)
                        .withSoftwareAssuranceIntent(SoftwareAssuranceIntent.ENABLE))
                .withDesiredProperties(
                    new ClusterDesiredProperties()
                        .withWindowsServerSubscription(WindowsServerSubscription.ENABLED)
                        .withDiagnosticLevel(DiagnosticLevel.OFF))
                .create();

        Assertions.assertEquals("a", response.location());
        Assertions.assertEquals("uwiguyxlyk", response.tags().get("phvxz"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, response.typeIdentityType());
        Assertions.assertEquals("zatvfuzka", response.cloudManagementEndpoint());
        Assertions.assertEquals("jvvruxwigsyei", response.aadClientId());
        Assertions.assertEquals("dsmjtgr", response.aadTenantId());
        Assertions.assertEquals("dgkkile", response.aadApplicationObjectId());
        Assertions.assertEquals("kcsmk", response.aadServicePrincipalObjectId());
        Assertions
            .assertEquals(
                SoftwareAssuranceStatus.DISABLED, response.softwareAssuranceProperties().softwareAssuranceStatus());
        Assertions
            .assertEquals(
                SoftwareAssuranceIntent.DISABLE, response.softwareAssuranceProperties().softwareAssuranceIntent());
        Assertions
            .assertEquals(WindowsServerSubscription.ENABLED, response.desiredProperties().windowsServerSubscription());
        Assertions.assertEquals(DiagnosticLevel.OFF, response.desiredProperties().diagnosticLevel());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
