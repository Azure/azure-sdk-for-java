// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurestackhci.AzurestackhciManager;
import com.azure.resourcemanager.azurestackhci.models.Cluster;
import com.azure.resourcemanager.azurestackhci.models.ClusterDesiredProperties;
import com.azure.resourcemanager.azurestackhci.models.DiagnosticLevel;
import com.azure.resourcemanager.azurestackhci.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.azurestackhci.models.SoftwareAssuranceIntent;
import com.azure.resourcemanager.azurestackhci.models.SoftwareAssuranceProperties;
import com.azure.resourcemanager.azurestackhci.models.UserAssignedIdentity;
import com.azure.resourcemanager.azurestackhci.models.WindowsServerSubscription;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ClustersCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"identity\":{\"principalId\":\"9d4515b1-d364-4286-b523-53e0be271a1b\",\"tenantId\":\"2e5947ba-b0a9-4c8a-ba2d-63775fe282b9\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"ldbglzout\":{\"principalId\":\"b1f63d09-3a95-43d2-af03-6a535875f273\",\"clientId\":\"150f4478-4741-49f2-8d64-1251a8eff29e\"},\"qgz\":{\"principalId\":\"ad8ca6c3-a31c-4ecf-a751-6b22a340f3ec\",\"clientId\":\"f0274715-64df-412f-94a5-e19fd9cb6d25\"}}},\"properties\":{\"provisioningState\":\"Provisioning\",\"status\":\"Disconnected\",\"connectivityStatus\":\"NotConnectedRecently\",\"cloudId\":\"snorbjg\",\"cloudManagementEndpoint\":\"zjotvmrxkhlo\",\"aadClientId\":\"vjb\",\"aadTenantId\":\"hdiqayfl\",\"aadApplicationObjectId\":\"yu\",\"aadServicePrincipalObjectId\":\"n\",\"softwareAssuranceProperties\":{\"softwareAssuranceStatus\":\"Enabled\",\"softwareAssuranceIntent\":\"Disable\",\"lastUpdated\":\"2020-12-31T19:30:49Z\"},\"desiredProperties\":{\"windowsServerSubscription\":\"Disabled\",\"diagnosticLevel\":\"Enhanced\"},\"reportedProperties\":{\"clusterName\":\"swhb\",\"clusterId\":\"bpyrowtjoxzt\",\"clusterVersion\":\"fqch\",\"nodes\":[{\"name\":\"vjnn\",\"id\":64.1754,\"windowsServerSubscription\":\"Enabled\",\"nodeType\":\"FirstParty\",\"ehcResourceId\":\"tpqpemhzcgkrep\",\"manufacturer\":\"hqyhwqw\",\"model\":\"vx\",\"osName\":\"bckmzeoxinhgr\",\"osVersion\":\"h\",\"osDisplayVersion\":\"h\",\"serialNumber\":\"uz\",\"coreCount\":30.088366,\"memoryInGiB\":98.9704,\"lastLicensingTimestamp\":\"2021-05-23T10:15:01Z\",\"oemActivation\":\"Disabled\"},{\"name\":\"gprbfaxyx\",\"id\":22.899992,\"windowsServerSubscription\":\"Enabled\",\"nodeType\":\"FirstParty\",\"ehcResourceId\":\"sexroqrndkt\",\"manufacturer\":\"vonfeeqgpkr\",\"model\":\"tbgnixxowwzkyfw\",\"osName\":\"piw\",\"osVersion\":\"ii\",\"osDisplayVersion\":\"mpepkldmaxxijv\",\"serialNumber\":\"ws\",\"coreCount\":85.34249,\"memoryInGiB\":78.20624,\"lastLicensingTimestamp\":\"2021-06-14T02:30:10Z\",\"oemActivation\":\"Disabled\"},{\"name\":\"asekwefcvoinw\",\"id\":55.155228,\"windowsServerSubscription\":\"Disabled\",\"nodeType\":\"ThirdParty\",\"ehcResourceId\":\"qicladv\",\"manufacturer\":\"davuqmcbyms\",\"model\":\"bjlquv\",\"osName\":\"zcjumvpsimioyoig\",\"osVersion\":\"miqwnnrac\",\"osDisplayVersion\":\"bbfqpspklady\",\"serialNumber\":\"nhautwukexzgpmnm\",\"coreCount\":95.00271,\"memoryInGiB\":59.921963,\"lastLicensingTimestamp\":\"2021-11-21T00:09:44Z\",\"oemActivation\":\"Enabled\"}],\"lastUpdated\":\"2021-06-14T01:30:35Z\",\"imdsAttestation\":\"Disabled\",\"diagnosticLevel\":\"Basic\",\"supportedCapabilities\":[\"vstclg\",\"rvwerfwxbsmtb\",\"jj\",\"h\"],\"clusterType\":\"ThirdParty\",\"manufacturer\":\"kwdvbtb\",\"oemActivation\":\"Disabled\"},\"isolatedVmAttestationConfiguration\":{\"attestationResourceId\":\"sqhtfpw\",\"relyingPartyServiceEndpoint\":\"byejuwyqwdqigm\",\"attestationServiceEndpoint\":\"ginz\"},\"trialDaysRemaining\":34.56601,\"billingModel\":\"jkhnjcmr\",\"registrationTimestamp\":\"2021-10-20T20:31:38Z\",\"lastSyncTimestamp\":\"2021-08-04T14:40:50Z\",\"lastBillingTimestamp\":\"2021-05-24T18:59:49Z\",\"serviceEndpoint\":\"twmlmhjnqtqeah\",\"resourceProviderObjectId\":\"dvragpokddxejhh\"},\"location\":\"guavtptb\",\"tags\":{\"fbkkwvdxaexq\":\"kqynspgbvo\",\"lpbcjtrpz\":\"kmyrljialzbnobr\"},\"id\":\"yudivbxnhsqeaeo\",\"name\":\"qelwgdhuruzytza\",\"type\":\"ogatmoljiy\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzurestackhciManager manager = AzurestackhciManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Cluster response = manager.clusters()
            .define("sxpwwztjfmkkh")
            .withRegion("uubwyvpjb")
            .withExistingResourceGroup("qgo")
            .withTags(mapOf("xkydfbwlja", "pjqduqgix"))
            .withTypeIdentityType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
            .withUserAssignedIdentities(mapOf("cgrllc", new UserAssignedIdentity(), "ovjowazhpabacom",
                new UserAssignedIdentity(), "t", new UserAssignedIdentity()))
            .withCloudManagementEndpoint("ujxcxxqn")
            .withAadClientId("qjkedwqurc")
            .withAadTenantId("jmrvvxwjongz")
            .withAadApplicationObjectId("hqqrsilcch")
            .withAadServicePrincipalObjectId("xxkan")
            .withSoftwareAssuranceProperties(
                new SoftwareAssuranceProperties().withSoftwareAssuranceIntent(SoftwareAssuranceIntent.ENABLE))
            .withDesiredProperties(
                new ClusterDesiredProperties().withWindowsServerSubscription(WindowsServerSubscription.ENABLED)
                    .withDiagnosticLevel(DiagnosticLevel.BASIC))
            .create();

        Assertions.assertEquals("guavtptb", response.location());
        Assertions.assertEquals("kqynspgbvo", response.tags().get("fbkkwvdxaexq"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.typeIdentityType());
        Assertions.assertEquals("zjotvmrxkhlo", response.cloudManagementEndpoint());
        Assertions.assertEquals("vjb", response.aadClientId());
        Assertions.assertEquals("hdiqayfl", response.aadTenantId());
        Assertions.assertEquals("yu", response.aadApplicationObjectId());
        Assertions.assertEquals("n", response.aadServicePrincipalObjectId());
        Assertions.assertEquals(SoftwareAssuranceIntent.DISABLE,
            response.softwareAssuranceProperties().softwareAssuranceIntent());
        Assertions.assertEquals(WindowsServerSubscription.DISABLED,
            response.desiredProperties().windowsServerSubscription());
        Assertions.assertEquals(DiagnosticLevel.ENHANCED, response.desiredProperties().diagnosticLevel());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
