// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.fluent.models.Step;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class StepTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Step model = BinaryData.fromString(
            "{\"name\":\"auacdixmxufrsr\",\"description\":\"qg\",\"errorMessage\":\"fnozoeoqbvjh\",\"status\":\"f\",\"startTimeUtc\":\"2021-10-26T00:53:28Z\",\"endTimeUtc\":\"2021-04-24T02:13:26Z\",\"lastUpdatedTimeUtc\":\"2021-10-16T00:36:11Z\",\"steps\":[{\"name\":\"asfaymxbulpze\",\"description\":\"b\",\"errorMessage\":\"kyojwyvfk\",\"status\":\"tsu\",\"startTimeUtc\":\"2021-07-21T14:16:01Z\",\"endTimeUtc\":\"2021-05-01T14:04:34Z\",\"lastUpdatedTimeUtc\":\"2021-03-09T06:47:13Z\",\"steps\":[{\"name\":\"zrrscub\",\"description\":\"sd\",\"errorMessage\":\"pxqwo\",\"status\":\"ffjxcjrmmuabwib\",\"startTimeUtc\":\"2021-06-26T06:26:09Z\",\"endTimeUtc\":\"2021-03-07T23:51:24Z\",\"lastUpdatedTimeUtc\":\"2021-08-28T05:06:32Z\",\"steps\":[{},{},{},{}]},{\"name\":\"e\",\"description\":\"y\",\"errorMessage\":\"amwineofvfkakp\",\"status\":\"dt\",\"startTimeUtc\":\"2021-09-18T21:27:38Z\",\"endTimeUtc\":\"2021-01-09T05:30:45Z\",\"lastUpdatedTimeUtc\":\"2021-05-03T22:13:18Z\",\"steps\":[{},{}]},{\"name\":\"jknyu\",\"description\":\"vt\",\"errorMessage\":\"pnrupzaamrdi\",\"status\":\"rekidswysk\",\"startTimeUtc\":\"2021-07-28T09:34:21Z\",\"endTimeUtc\":\"2021-09-17T17:15:37Z\",\"lastUpdatedTimeUtc\":\"2021-10-21T15:00:18Z\",\"steps\":[{},{}]}]},{\"name\":\"kutvlxhrpqhv\",\"description\":\"lcouqehbhbcdszir\",\"errorMessage\":\"an\",\"status\":\"ypmbltoormkfq\",\"startTimeUtc\":\"2021-03-07T21:54:57Z\",\"endTimeUtc\":\"2021-06-15T00:32:51Z\",\"lastUpdatedTimeUtc\":\"2021-01-20T12:15:34Z\",\"steps\":[{\"name\":\"g\",\"description\":\"lnjpnnbmjksibjgs\",\"errorMessage\":\"xxahmrnadzyqegxy\",\"status\":\"pinbmhwbjijkgqxn\",\"startTimeUtc\":\"2021-08-05T01:09:52Z\",\"endTimeUtc\":\"2021-01-13T08:15:56Z\",\"lastUpdatedTimeUtc\":\"2021-08-15T18:12:37Z\",\"steps\":[{},{}]}]},{\"name\":\"jvaannggiycwkd\",\"description\":\"awxwfek\",\"errorMessage\":\"mrrqmbzmqkratb\",\"status\":\"wbjsidbirkf\",\"startTimeUtc\":\"2021-03-09T04:12:12Z\",\"endTimeUtc\":\"2021-05-16T15:15:04Z\",\"lastUpdatedTimeUtc\":\"2021-09-30T06:21:09Z\",\"steps\":[{\"name\":\"wijymr\",\"description\":\"guzozkyew\",\"errorMessage\":\"nzhhhqos\",\"status\":\"fjkutycyarnroo\",\"startTimeUtc\":\"2021-07-16T00:31:06Z\",\"endTimeUtc\":\"2021-05-19T22:27:58Z\",\"lastUpdatedTimeUtc\":\"2021-02-09T18:52:05Z\",\"steps\":[{}]}]}]}")
            .toObject(Step.class);
        Assertions.assertEquals("auacdixmxufrsr", model.name());
        Assertions.assertEquals("qg", model.description());
        Assertions.assertEquals("fnozoeoqbvjh", model.errorMessage());
        Assertions.assertEquals("f", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-26T00:53:28Z"), model.startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-24T02:13:26Z"), model.endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-16T00:36:11Z"), model.lastUpdatedTimeUtc());
        Assertions.assertEquals("asfaymxbulpze", model.steps().get(0).name());
        Assertions.assertEquals("b", model.steps().get(0).description());
        Assertions.assertEquals("kyojwyvfk", model.steps().get(0).errorMessage());
        Assertions.assertEquals("tsu", model.steps().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-21T14:16:01Z"), model.steps().get(0).startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-01T14:04:34Z"), model.steps().get(0).endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-09T06:47:13Z"),
            model.steps().get(0).lastUpdatedTimeUtc());
        Assertions.assertEquals("zrrscub", model.steps().get(0).steps().get(0).name());
        Assertions.assertEquals("sd", model.steps().get(0).steps().get(0).description());
        Assertions.assertEquals("pxqwo", model.steps().get(0).steps().get(0).errorMessage());
        Assertions.assertEquals("ffjxcjrmmuabwib", model.steps().get(0).steps().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-26T06:26:09Z"),
            model.steps().get(0).steps().get(0).startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-07T23:51:24Z"),
            model.steps().get(0).steps().get(0).endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-28T05:06:32Z"),
            model.steps().get(0).steps().get(0).lastUpdatedTimeUtc());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Step model = new Step().withName("auacdixmxufrsr")
            .withDescription("qg")
            .withErrorMessage("fnozoeoqbvjh")
            .withStatus("f")
            .withStartTimeUtc(OffsetDateTime.parse("2021-10-26T00:53:28Z"))
            .withEndTimeUtc(OffsetDateTime.parse("2021-04-24T02:13:26Z"))
            .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-10-16T00:36:11Z"))
            .withSteps(Arrays.asList(
                new Step().withName("asfaymxbulpze")
                    .withDescription("b")
                    .withErrorMessage("kyojwyvfk")
                    .withStatus("tsu")
                    .withStartTimeUtc(OffsetDateTime.parse("2021-07-21T14:16:01Z"))
                    .withEndTimeUtc(OffsetDateTime.parse("2021-05-01T14:04:34Z"))
                    .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-03-09T06:47:13Z"))
                    .withSteps(Arrays.asList(
                        new Step().withName("zrrscub")
                            .withDescription("sd")
                            .withErrorMessage("pxqwo")
                            .withStatus("ffjxcjrmmuabwib")
                            .withStartTimeUtc(OffsetDateTime.parse("2021-06-26T06:26:09Z"))
                            .withEndTimeUtc(OffsetDateTime.parse("2021-03-07T23:51:24Z"))
                            .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-08-28T05:06:32Z"))
                            .withSteps(Arrays.asList(new Step(), new Step(), new Step(), new Step())),
                        new Step().withName("e")
                            .withDescription("y")
                            .withErrorMessage("amwineofvfkakp")
                            .withStatus("dt")
                            .withStartTimeUtc(OffsetDateTime.parse("2021-09-18T21:27:38Z"))
                            .withEndTimeUtc(OffsetDateTime.parse("2021-01-09T05:30:45Z"))
                            .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-05-03T22:13:18Z"))
                            .withSteps(Arrays.asList(new Step(), new Step())),
                        new Step().withName("jknyu")
                            .withDescription("vt")
                            .withErrorMessage("pnrupzaamrdi")
                            .withStatus("rekidswysk")
                            .withStartTimeUtc(OffsetDateTime.parse("2021-07-28T09:34:21Z"))
                            .withEndTimeUtc(OffsetDateTime.parse("2021-09-17T17:15:37Z"))
                            .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-10-21T15:00:18Z"))
                            .withSteps(Arrays.asList(new Step(), new Step())))),
                new Step().withName("kutvlxhrpqhv")
                    .withDescription("lcouqehbhbcdszir")
                    .withErrorMessage("an")
                    .withStatus("ypmbltoormkfq")
                    .withStartTimeUtc(OffsetDateTime.parse("2021-03-07T21:54:57Z"))
                    .withEndTimeUtc(OffsetDateTime.parse("2021-06-15T00:32:51Z"))
                    .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-01-20T12:15:34Z"))
                    .withSteps(Arrays.asList(new Step().withName("g")
                        .withDescription("lnjpnnbmjksibjgs")
                        .withErrorMessage("xxahmrnadzyqegxy")
                        .withStatus("pinbmhwbjijkgqxn")
                        .withStartTimeUtc(OffsetDateTime.parse("2021-08-05T01:09:52Z"))
                        .withEndTimeUtc(OffsetDateTime.parse("2021-01-13T08:15:56Z"))
                        .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-08-15T18:12:37Z"))
                        .withSteps(Arrays.asList(new Step(), new Step())))),
                new Step().withName("jvaannggiycwkd")
                    .withDescription("awxwfek")
                    .withErrorMessage("mrrqmbzmqkratb")
                    .withStatus("wbjsidbirkf")
                    .withStartTimeUtc(OffsetDateTime.parse("2021-03-09T04:12:12Z"))
                    .withEndTimeUtc(OffsetDateTime.parse("2021-05-16T15:15:04Z"))
                    .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-09-30T06:21:09Z"))
                    .withSteps(Arrays.asList(new Step().withName("wijymr")
                        .withDescription("guzozkyew")
                        .withErrorMessage("nzhhhqos")
                        .withStatus("fjkutycyarnroo")
                        .withStartTimeUtc(OffsetDateTime.parse("2021-07-16T00:31:06Z"))
                        .withEndTimeUtc(OffsetDateTime.parse("2021-05-19T22:27:58Z"))
                        .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-02-09T18:52:05Z"))
                        .withSteps(Arrays.asList(new Step()))))));
        model = BinaryData.fromObject(model).toObject(Step.class);
        Assertions.assertEquals("auacdixmxufrsr", model.name());
        Assertions.assertEquals("qg", model.description());
        Assertions.assertEquals("fnozoeoqbvjh", model.errorMessage());
        Assertions.assertEquals("f", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-26T00:53:28Z"), model.startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-24T02:13:26Z"), model.endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-16T00:36:11Z"), model.lastUpdatedTimeUtc());
        Assertions.assertEquals("asfaymxbulpze", model.steps().get(0).name());
        Assertions.assertEquals("b", model.steps().get(0).description());
        Assertions.assertEquals("kyojwyvfk", model.steps().get(0).errorMessage());
        Assertions.assertEquals("tsu", model.steps().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-21T14:16:01Z"), model.steps().get(0).startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-01T14:04:34Z"), model.steps().get(0).endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-09T06:47:13Z"),
            model.steps().get(0).lastUpdatedTimeUtc());
        Assertions.assertEquals("zrrscub", model.steps().get(0).steps().get(0).name());
        Assertions.assertEquals("sd", model.steps().get(0).steps().get(0).description());
        Assertions.assertEquals("pxqwo", model.steps().get(0).steps().get(0).errorMessage());
        Assertions.assertEquals("ffjxcjrmmuabwib", model.steps().get(0).steps().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-26T06:26:09Z"),
            model.steps().get(0).steps().get(0).startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-07T23:51:24Z"),
            model.steps().get(0).steps().get(0).endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-28T05:06:32Z"),
            model.steps().get(0).steps().get(0).lastUpdatedTimeUtc());
    }
}
