// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.fluent.models.Step;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class StepTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Step model =
            BinaryData
                .fromString(
                    "{\"name\":\"ox\",\"description\":\"dufiq\",\"errorMessage\":\"ieuzaofjchvcyyy\",\"status\":\"gdotcubiipuipwo\",\"startTimeUtc\":\"2021-03-07T12:16:32Z\",\"endTimeUtc\":\"2021-04-04T19:23Z\",\"lastUpdatedTimeUtc\":\"2021-06-06T06:49:44Z\",\"expectedExecutionTime\":\"k\",\"steps\":[{\"name\":\"hqvcimpevfgmblr\",\"description\":\"lbywdxsm\",\"errorMessage\":\"cwrwfs\",\"status\":\"fnynszqujizdvoqy\",\"startTimeUtc\":\"2021-06-13T14:37:24Z\",\"endTimeUtc\":\"2021-04-24T20:57:52Z\",\"lastUpdatedTimeUtc\":\"2021-08-16T17:07:06Z\",\"expectedExecutionTime\":\"lgy\",\"steps\":[{\"name\":\"pthjoxo\",\"description\":\"msksbp\",\"errorMessage\":\"lqol\",\"status\":\"kcgxxlxsffgcvi\",\"startTimeUtc\":\"2021-06-18T14:12Z\",\"endTimeUtc\":\"2021-03-28T18:15:03Z\",\"lastUpdatedTimeUtc\":\"2021-04-12T21:20:45Z\",\"expectedExecutionTime\":\"lyoupfgfbkju\",\"steps\":[{}]}]}]}")
                .toObject(Step.class);
        Assertions.assertEquals("ox", model.name());
        Assertions.assertEquals("dufiq", model.description());
        Assertions.assertEquals("ieuzaofjchvcyyy", model.errorMessage());
        Assertions.assertEquals("gdotcubiipuipwo", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-07T12:16:32Z"), model.startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-04T19:23Z"), model.endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-06T06:49:44Z"), model.lastUpdatedTimeUtc());
        Assertions.assertEquals("k", model.expectedExecutionTime());
        Assertions.assertEquals("hqvcimpevfgmblr", model.steps().get(0).name());
        Assertions.assertEquals("lbywdxsm", model.steps().get(0).description());
        Assertions.assertEquals("cwrwfs", model.steps().get(0).errorMessage());
        Assertions.assertEquals("fnynszqujizdvoqy", model.steps().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-13T14:37:24Z"), model.steps().get(0).startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-24T20:57:52Z"), model.steps().get(0).endTimeUtc());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-08-16T17:07:06Z"), model.steps().get(0).lastUpdatedTimeUtc());
        Assertions.assertEquals("lgy", model.steps().get(0).expectedExecutionTime());
        Assertions.assertEquals("pthjoxo", model.steps().get(0).steps().get(0).name());
        Assertions.assertEquals("msksbp", model.steps().get(0).steps().get(0).description());
        Assertions.assertEquals("lqol", model.steps().get(0).steps().get(0).errorMessage());
        Assertions.assertEquals("kcgxxlxsffgcvi", model.steps().get(0).steps().get(0).status());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-18T14:12Z"), model.steps().get(0).steps().get(0).startTimeUtc());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-28T18:15:03Z"), model.steps().get(0).steps().get(0).endTimeUtc());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-12T21:20:45Z"), model.steps().get(0).steps().get(0).lastUpdatedTimeUtc());
        Assertions.assertEquals("lyoupfgfbkju", model.steps().get(0).steps().get(0).expectedExecutionTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Step model =
            new Step()
                .withName("ox")
                .withDescription("dufiq")
                .withErrorMessage("ieuzaofjchvcyyy")
                .withStatus("gdotcubiipuipwo")
                .withStartTimeUtc(OffsetDateTime.parse("2021-03-07T12:16:32Z"))
                .withEndTimeUtc(OffsetDateTime.parse("2021-04-04T19:23Z"))
                .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-06-06T06:49:44Z"))
                .withExpectedExecutionTime("k")
                .withSteps(
                    Arrays
                        .asList(
                            new Step()
                                .withName("hqvcimpevfgmblr")
                                .withDescription("lbywdxsm")
                                .withErrorMessage("cwrwfs")
                                .withStatus("fnynszqujizdvoqy")
                                .withStartTimeUtc(OffsetDateTime.parse("2021-06-13T14:37:24Z"))
                                .withEndTimeUtc(OffsetDateTime.parse("2021-04-24T20:57:52Z"))
                                .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-08-16T17:07:06Z"))
                                .withExpectedExecutionTime("lgy")
                                .withSteps(
                                    Arrays
                                        .asList(
                                            new Step()
                                                .withName("pthjoxo")
                                                .withDescription("msksbp")
                                                .withErrorMessage("lqol")
                                                .withStatus("kcgxxlxsffgcvi")
                                                .withStartTimeUtc(OffsetDateTime.parse("2021-06-18T14:12Z"))
                                                .withEndTimeUtc(OffsetDateTime.parse("2021-03-28T18:15:03Z"))
                                                .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-04-12T21:20:45Z"))
                                                .withExpectedExecutionTime("lyoupfgfbkju")
                                                .withSteps(Arrays.asList(new Step()))))));
        model = BinaryData.fromObject(model).toObject(Step.class);
        Assertions.assertEquals("ox", model.name());
        Assertions.assertEquals("dufiq", model.description());
        Assertions.assertEquals("ieuzaofjchvcyyy", model.errorMessage());
        Assertions.assertEquals("gdotcubiipuipwo", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-07T12:16:32Z"), model.startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-04T19:23Z"), model.endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-06T06:49:44Z"), model.lastUpdatedTimeUtc());
        Assertions.assertEquals("k", model.expectedExecutionTime());
        Assertions.assertEquals("hqvcimpevfgmblr", model.steps().get(0).name());
        Assertions.assertEquals("lbywdxsm", model.steps().get(0).description());
        Assertions.assertEquals("cwrwfs", model.steps().get(0).errorMessage());
        Assertions.assertEquals("fnynszqujizdvoqy", model.steps().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-13T14:37:24Z"), model.steps().get(0).startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-24T20:57:52Z"), model.steps().get(0).endTimeUtc());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-08-16T17:07:06Z"), model.steps().get(0).lastUpdatedTimeUtc());
        Assertions.assertEquals("lgy", model.steps().get(0).expectedExecutionTime());
        Assertions.assertEquals("pthjoxo", model.steps().get(0).steps().get(0).name());
        Assertions.assertEquals("msksbp", model.steps().get(0).steps().get(0).description());
        Assertions.assertEquals("lqol", model.steps().get(0).steps().get(0).errorMessage());
        Assertions.assertEquals("kcgxxlxsffgcvi", model.steps().get(0).steps().get(0).status());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-06-18T14:12Z"), model.steps().get(0).steps().get(0).startTimeUtc());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-03-28T18:15:03Z"), model.steps().get(0).steps().get(0).endTimeUtc());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-04-12T21:20:45Z"), model.steps().get(0).steps().get(0).lastUpdatedTimeUtc());
        Assertions.assertEquals("lyoupfgfbkju", model.steps().get(0).steps().get(0).expectedExecutionTime());
    }
}
