// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.models.IpAllocationMethodEnum;
import com.azure.resourcemanager.azurestackhci.models.IpPool;
import com.azure.resourcemanager.azurestackhci.models.IpPoolInfo;
import com.azure.resourcemanager.azurestackhci.models.IpPoolTypeEnum;
import com.azure.resourcemanager.azurestackhci.models.Route;
import com.azure.resourcemanager.azurestackhci.models.RouteTable;
import com.azure.resourcemanager.azurestackhci.models.Subnet;
import com.azure.resourcemanager.azurestackhci.models.SubnetPropertiesFormatIpConfigurationReferencesItem;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SubnetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Subnet model = BinaryData.fromString(
            "{\"properties\":{\"addressPrefix\":\"nv\",\"addressPrefixes\":[\"bmikost\",\"z\",\"kiwbuqnyoph\"],\"ipAllocationMethod\":\"Dynamic\",\"ipConfigurationReferences\":[{\"ID\":\"crpfbcunez\"},{\"ID\":\"e\"},{\"ID\":\"lfwyfwlwxjwetn\"},{\"ID\":\"ihclafzv\"}],\"routeTable\":{\"etag\":\"pt\",\"name\":\"qqwzt\",\"type\":\"w\",\"properties\":{\"routes\":[{\"properties\":{},\"name\":\"waxfewzjkj\"},{\"properties\":{},\"name\":\"deqvhp\"},{\"properties\":{},\"name\":\"kkshkbffm\"}]}},\"ipPools\":[{\"name\":\"jrgywwpgjxsn\",\"ipPoolType\":\"vm\",\"start\":\"jgicgaao\",\"end\":\"ttaqutdew\",\"info\":{\"used\":\"swvr\",\"available\":\"nz\"}},{\"name\":\"gehkfkimrtixokff\",\"ipPoolType\":\"vippool\",\"start\":\"ljqepq\",\"end\":\"ixmonstshiyxg\",\"info\":{\"used\":\"fclduccbirdsv\",\"available\":\"cobiegstmninwjiz\"}}],\"vlan\":1893511353},\"name\":\"ghgshejjtbxqmu\"}")
            .toObject(Subnet.class);
        Assertions.assertEquals("ghgshejjtbxqmu", model.name());
        Assertions.assertEquals("nv", model.addressPrefix());
        Assertions.assertEquals("bmikost", model.addressPrefixes().get(0));
        Assertions.assertEquals(IpAllocationMethodEnum.DYNAMIC, model.ipAllocationMethod());
        Assertions.assertEquals("crpfbcunez", model.ipConfigurationReferences().get(0).id());
        Assertions.assertEquals("waxfewzjkj", model.routeTable().routes().get(0).name());
        Assertions.assertEquals("jrgywwpgjxsn", model.ipPools().get(0).name());
        Assertions.assertEquals(IpPoolTypeEnum.VM, model.ipPools().get(0).ipPoolType());
        Assertions.assertEquals("jgicgaao", model.ipPools().get(0).start());
        Assertions.assertEquals("ttaqutdew", model.ipPools().get(0).end());
        Assertions.assertEquals(1893511353, model.vlan());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Subnet model = new Subnet().withName("ghgshejjtbxqmu")
            .withAddressPrefix("nv")
            .withAddressPrefixes(Arrays.asList("bmikost", "z", "kiwbuqnyoph"))
            .withIpAllocationMethod(IpAllocationMethodEnum.DYNAMIC)
            .withIpConfigurationReferences(
                Arrays.asList(new SubnetPropertiesFormatIpConfigurationReferencesItem().withId("crpfbcunez"),
                    new SubnetPropertiesFormatIpConfigurationReferencesItem().withId("e"),
                    new SubnetPropertiesFormatIpConfigurationReferencesItem().withId("lfwyfwlwxjwetn"),
                    new SubnetPropertiesFormatIpConfigurationReferencesItem().withId("ihclafzv")))
            .withRouteTable(new RouteTable().withRoutes(Arrays.asList(new Route().withName("waxfewzjkj"),
                new Route().withName("deqvhp"), new Route().withName("kkshkbffm"))))
            .withIpPools(Arrays.asList(
                new IpPool().withName("jrgywwpgjxsn")
                    .withIpPoolType(IpPoolTypeEnum.VM)
                    .withStart("jgicgaao")
                    .withEnd("ttaqutdew")
                    .withInfo(new IpPoolInfo()),
                new IpPool().withName("gehkfkimrtixokff")
                    .withIpPoolType(IpPoolTypeEnum.VIPPOOL)
                    .withStart("ljqepq")
                    .withEnd("ixmonstshiyxg")
                    .withInfo(new IpPoolInfo())))
            .withVlan(1893511353);
        model = BinaryData.fromObject(model).toObject(Subnet.class);
        Assertions.assertEquals("ghgshejjtbxqmu", model.name());
        Assertions.assertEquals("nv", model.addressPrefix());
        Assertions.assertEquals("bmikost", model.addressPrefixes().get(0));
        Assertions.assertEquals(IpAllocationMethodEnum.DYNAMIC, model.ipAllocationMethod());
        Assertions.assertEquals("crpfbcunez", model.ipConfigurationReferences().get(0).id());
        Assertions.assertEquals("waxfewzjkj", model.routeTable().routes().get(0).name());
        Assertions.assertEquals("jrgywwpgjxsn", model.ipPools().get(0).name());
        Assertions.assertEquals(IpPoolTypeEnum.VM, model.ipPools().get(0).ipPoolType());
        Assertions.assertEquals("jgicgaao", model.ipPools().get(0).start());
        Assertions.assertEquals("ttaqutdew", model.ipPools().get(0).end());
        Assertions.assertEquals(1893511353, model.vlan());
    }
}
