// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.models.IpAllocationMethodEnum;
import com.azure.resourcemanager.azurestackhci.models.IpPool;
import com.azure.resourcemanager.azurestackhci.models.IpPoolInfo;
import com.azure.resourcemanager.azurestackhci.models.IpPoolTypeEnum;
import com.azure.resourcemanager.azurestackhci.models.Route;
import com.azure.resourcemanager.azurestackhci.models.RouteTable;
import com.azure.resourcemanager.azurestackhci.models.Subnet;
import com.azure.resourcemanager.azurestackhci.models.SubnetPropertiesFormatIpConfigurationReferencesItem;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SubnetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Subnet model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"addressPrefix\":\"fidfvzw\",\"addressPrefixes\":[\"htymw\"],\"ipAllocationMethod\":\"Static\",\"ipConfigurationReferences\":[{\"ID\":\"hwxmnteiwa\"},{\"ID\":\"vkmijcmmxdcuf\"},{\"ID\":\"srp\"}],\"routeTable\":{\"etag\":\"idnsezcxtb\",\"name\":\"gfycc\",\"type\":\"ewmdw\",\"properties\":{\"routes\":[{\"properties\":{},\"name\":\"h\"},{\"properties\":{},\"name\":\"sflnrosfqp\"}]}},\"ipPools\":[{\"name\":\"zzvypyqrimzinp\",\"ipPoolType\":\"vm\",\"start\":\"dkirsoodqxhcr\",\"end\":\"ohjtckw\",\"info\":{\"used\":\"oifiyipjxsqwpgr\",\"available\":\"znorcj\"}},{\"name\":\"snb\",\"ipPoolType\":\"vm\",\"start\":\"bnmo\",\"end\":\"cyshurzafbljjgp\",\"info\":{\"used\":\"qcjm\",\"available\":\"javbqidtqajz\"}},{\"name\":\"l\",\"ipPoolType\":\"vm\",\"start\":\"jkrlkhbzhfepg\",\"end\":\"qex\",\"info\":{\"used\":\"c\",\"available\":\"c\"}}],\"vlan\":1853852705},\"name\":\"rhhbcs\"}")
                .toObject(Subnet.class);
        Assertions.assertEquals("rhhbcs", model.name());
        Assertions.assertEquals("fidfvzw", model.addressPrefix());
        Assertions.assertEquals("htymw", model.addressPrefixes().get(0));
        Assertions.assertEquals(IpAllocationMethodEnum.STATIC, model.ipAllocationMethod());
        Assertions.assertEquals("hwxmnteiwa", model.ipConfigurationReferences().get(0).id());
        Assertions.assertEquals("h", model.routeTable().routes().get(0).name());
        Assertions.assertEquals("zzvypyqrimzinp", model.ipPools().get(0).name());
        Assertions.assertEquals(IpPoolTypeEnum.VM, model.ipPools().get(0).ipPoolType());
        Assertions.assertEquals("dkirsoodqxhcr", model.ipPools().get(0).start());
        Assertions.assertEquals("ohjtckw", model.ipPools().get(0).end());
        Assertions.assertEquals(1853852705, model.vlan());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Subnet model =
            new Subnet()
                .withName("rhhbcs")
                .withAddressPrefix("fidfvzw")
                .withAddressPrefixes(Arrays.asList("htymw"))
                .withIpAllocationMethod(IpAllocationMethodEnum.STATIC)
                .withIpConfigurationReferences(
                    Arrays
                        .asList(
                            new SubnetPropertiesFormatIpConfigurationReferencesItem().withId("hwxmnteiwa"),
                            new SubnetPropertiesFormatIpConfigurationReferencesItem().withId("vkmijcmmxdcuf"),
                            new SubnetPropertiesFormatIpConfigurationReferencesItem().withId("srp")))
                .withRouteTable(
                    new RouteTable()
                        .withRoutes(Arrays.asList(new Route().withName("h"), new Route().withName("sflnrosfqp"))))
                .withIpPools(
                    Arrays
                        .asList(
                            new IpPool()
                                .withName("zzvypyqrimzinp")
                                .withIpPoolType(IpPoolTypeEnum.VM)
                                .withStart("dkirsoodqxhcr")
                                .withEnd("ohjtckw")
                                .withInfo(new IpPoolInfo()),
                            new IpPool()
                                .withName("snb")
                                .withIpPoolType(IpPoolTypeEnum.VM)
                                .withStart("bnmo")
                                .withEnd("cyshurzafbljjgp")
                                .withInfo(new IpPoolInfo()),
                            new IpPool()
                                .withName("l")
                                .withIpPoolType(IpPoolTypeEnum.VM)
                                .withStart("jkrlkhbzhfepg")
                                .withEnd("qex")
                                .withInfo(new IpPoolInfo())))
                .withVlan(1853852705);
        model = BinaryData.fromObject(model).toObject(Subnet.class);
        Assertions.assertEquals("rhhbcs", model.name());
        Assertions.assertEquals("fidfvzw", model.addressPrefix());
        Assertions.assertEquals("htymw", model.addressPrefixes().get(0));
        Assertions.assertEquals(IpAllocationMethodEnum.STATIC, model.ipAllocationMethod());
        Assertions.assertEquals("hwxmnteiwa", model.ipConfigurationReferences().get(0).id());
        Assertions.assertEquals("h", model.routeTable().routes().get(0).name());
        Assertions.assertEquals("zzvypyqrimzinp", model.ipPools().get(0).name());
        Assertions.assertEquals(IpPoolTypeEnum.VM, model.ipPools().get(0).ipPoolType());
        Assertions.assertEquals("dkirsoodqxhcr", model.ipPools().get(0).start());
        Assertions.assertEquals("ohjtckw", model.ipPools().get(0).end());
        Assertions.assertEquals(1853852705, model.vlan());
    }
}
