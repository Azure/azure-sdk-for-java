// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurestackhci.AzurestackhciManager;
import com.azure.resourcemanager.azurestackhci.models.DeploymentConfiguration;
import com.azure.resourcemanager.azurestackhci.models.DeploymentData;
import com.azure.resourcemanager.azurestackhci.models.DeploymentMode;
import com.azure.resourcemanager.azurestackhci.models.DeploymentSetting;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningState;
import com.azure.resourcemanager.azurestackhci.models.ScaleUnits;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DeploymentSettingsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"arcNodeResourceIds\":[\"hoo\",\"aexbkhxjxjo\"],\"deploymentMode\":\"Deploy\",\"deploymentConfiguration\":{\"version\":\"qxrkdknko\",\"scaleUnits\":[{\"deploymentData\":{}}]},\"reportedProperties\":{\"validationStatus\":{\"status\":\"b\",\"steps\":[{},{},{}]},\"deploymentStatus\":{\"status\":\"zamicb\",\"steps\":[{},{}]}}},\"id\":\"dgzsez\",\"name\":\"uxk\",\"type\":\"uairaabmdlqjb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzurestackhciManager manager = AzurestackhciManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DeploymentSetting response = manager.deploymentSettings()
            .define("mhmnulwemp")
            .withExistingCluster("ekdfqnhttwd", "wrczfjjnnuxxrk")
            .withProvisioningState(ProvisioningState.NOT_SPECIFIED)
            .withArcNodeResourceIds(Arrays.asList("hjulrsulwzpflu", "nawmhhgzotfriyrg"))
            .withDeploymentMode(DeploymentMode.VALIDATE)
            .withDeploymentConfiguration(new DeploymentConfiguration().withVersion("kvzwxxyxhighctx")
                .withScaleUnits(Arrays.asList(new ScaleUnits().withDeploymentData(new DeploymentData()),
                    new ScaleUnits().withDeploymentData(new DeploymentData()),
                    new ScaleUnits().withDeploymentData(new DeploymentData()))))
            .create();

        Assertions.assertEquals(ProvisioningState.SUCCEEDED, response.provisioningState());
        Assertions.assertEquals("hoo", response.arcNodeResourceIds().get(0));
        Assertions.assertEquals(DeploymentMode.DEPLOY, response.deploymentMode());
        Assertions.assertEquals("qxrkdknko", response.deploymentConfiguration().version());
    }
}
