// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.models.ClusterDesiredProperties;
import com.azure.resourcemanager.azurestackhci.models.ClusterPatch;
import com.azure.resourcemanager.azurestackhci.models.DiagnosticLevel;
import com.azure.resourcemanager.azurestackhci.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.azurestackhci.models.UserAssignedIdentity;
import com.azure.resourcemanager.azurestackhci.models.WindowsServerSubscription;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterPatch model = BinaryData.fromString(
            "{\"tags\":{\"uvriuhprwm\":\"cbpwxqpsrknft\",\"bexrmcq\":\"yvxqtayriwwroy\",\"e\":\"bycnojvkn\",\"zhpvgqzcjrvxd\":\"qsgzvahapj\"},\"identity\":{\"principalId\":\"34e06077-104c-4b51-9ac1-3a48ad74f926\",\"tenantId\":\"d20b714a-e903-4f97-95a6-c046c5426a82\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"ug\":{\"principalId\":\"c8c3a7ef-6f83-404b-9ee6-7846f76c41e2\",\"clientId\":\"f6d761a8-d199-4ce3-92ae-cc4967bf8cfb\"},\"ovawjvzunlu\":{\"principalId\":\"12631c29-11da-4ca6-86be-0ace9af205d9\",\"clientId\":\"5994136f-45fd-4e84-afa0-90611419e7c9\"},\"n\":{\"principalId\":\"f99cfe3b-a8b6-47e1-9597-9c03fe38c73b\",\"clientId\":\"1f21b3c0-0441-4b25-975b-645bddd46752\"}}},\"properties\":{\"cloudManagementEndpoint\":\"xipeilpjzuaejx\",\"aadClientId\":\"ltskzbbtd\",\"aadTenantId\":\"mv\",\"desiredProperties\":{\"windowsServerSubscription\":\"Disabled\",\"diagnosticLevel\":\"Off\"}}}")
            .toObject(ClusterPatch.class);
        Assertions.assertEquals("cbpwxqpsrknft", model.tags().get("uvriuhprwm"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.type());
        Assertions.assertEquals("xipeilpjzuaejx", model.cloudManagementEndpoint());
        Assertions.assertEquals("ltskzbbtd", model.aadClientId());
        Assertions.assertEquals("mv", model.aadTenantId());
        Assertions.assertEquals(WindowsServerSubscription.DISABLED,
            model.desiredProperties().windowsServerSubscription());
        Assertions.assertEquals(DiagnosticLevel.OFF, model.desiredProperties().diagnosticLevel());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterPatch model = new ClusterPatch()
            .withTags(mapOf("uvriuhprwm", "cbpwxqpsrknft", "bexrmcq", "yvxqtayriwwroy", "e", "bycnojvkn",
                "zhpvgqzcjrvxd", "qsgzvahapj"))
            .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
            .withUserAssignedIdentities(mapOf("ug", new UserAssignedIdentity(), "ovawjvzunlu",
                new UserAssignedIdentity(), "n", new UserAssignedIdentity()))
            .withCloudManagementEndpoint("xipeilpjzuaejx")
            .withAadClientId("ltskzbbtd")
            .withAadTenantId("mv")
            .withDesiredProperties(
                new ClusterDesiredProperties().withWindowsServerSubscription(WindowsServerSubscription.DISABLED)
                    .withDiagnosticLevel(DiagnosticLevel.OFF));
        model = BinaryData.fromObject(model).toObject(ClusterPatch.class);
        Assertions.assertEquals("cbpwxqpsrknft", model.tags().get("uvriuhprwm"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.type());
        Assertions.assertEquals("xipeilpjzuaejx", model.cloudManagementEndpoint());
        Assertions.assertEquals("ltskzbbtd", model.aadClientId());
        Assertions.assertEquals("mv", model.aadTenantId());
        Assertions.assertEquals(WindowsServerSubscription.DISABLED,
            model.desiredProperties().windowsServerSubscription());
        Assertions.assertEquals(DiagnosticLevel.OFF, model.desiredProperties().diagnosticLevel());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
