// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.models.ClusterDesiredProperties;
import com.azure.resourcemanager.azurestackhci.models.ClusterPatch;
import com.azure.resourcemanager.azurestackhci.models.DiagnosticLevel;
import com.azure.resourcemanager.azurestackhci.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.azurestackhci.models.UserAssignedIdentity;
import com.azure.resourcemanager.azurestackhci.models.WindowsServerSubscription;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterPatch model =
            BinaryData
                .fromString(
                    "{\"tags\":{\"ntypmrbpizcdrqj\":\"gukgjnpiucgygevq\",\"yhxdeoejzicwi\":\"dpydn\",\"bkh\":\"sjttgzfbish\"},\"identity\":{\"principalId\":\"e265f880-4545-4e61-8cfe-02a1aae8f83e\",\"tenantId\":\"362ed809-1fc4-485d-a6b8-67c2c4517cde\",\"type\":\"SystemAssigned,"
                        + " UserAssigned\",\"userAssignedIdentities\":{\"p\":{\"principalId\":\"84f40a64-e722-4ae0-8e37-6c58cde4975f\",\"clientId\":\"3c192662-2b1e-4f5f-8a02-fea4f5920e44\"}}},\"properties\":{\"cloudManagementEndpoint\":\"alpbuxwgipwhon\",\"aadClientId\":\"kgshwa\",\"aadTenantId\":\"ixzbinjeputtmryw\",\"desiredProperties\":{\"windowsServerSubscription\":\"Enabled\",\"diagnosticLevel\":\"Enhanced\"}}}")
                .toObject(ClusterPatch.class);
        Assertions.assertEquals("gukgjnpiucgygevq", model.tags().get("ntypmrbpizcdrqj"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.type());
        Assertions.assertEquals("alpbuxwgipwhon", model.cloudManagementEndpoint());
        Assertions.assertEquals("kgshwa", model.aadClientId());
        Assertions.assertEquals("ixzbinjeputtmryw", model.aadTenantId());
        Assertions
            .assertEquals(WindowsServerSubscription.ENABLED, model.desiredProperties().windowsServerSubscription());
        Assertions.assertEquals(DiagnosticLevel.ENHANCED, model.desiredProperties().diagnosticLevel());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterPatch model =
            new ClusterPatch()
                .withTags(mapOf("ntypmrbpizcdrqj", "gukgjnpiucgygevq", "yhxdeoejzicwi", "dpydn", "bkh", "sjttgzfbish"))
                .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("p", new UserAssignedIdentity()))
                .withCloudManagementEndpoint("alpbuxwgipwhon")
                .withAadClientId("kgshwa")
                .withAadTenantId("ixzbinjeputtmryw")
                .withDesiredProperties(
                    new ClusterDesiredProperties()
                        .withWindowsServerSubscription(WindowsServerSubscription.ENABLED)
                        .withDiagnosticLevel(DiagnosticLevel.ENHANCED));
        model = BinaryData.fromObject(model).toObject(ClusterPatch.class);
        Assertions.assertEquals("gukgjnpiucgygevq", model.tags().get("ntypmrbpizcdrqj"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.type());
        Assertions.assertEquals("alpbuxwgipwhon", model.cloudManagementEndpoint());
        Assertions.assertEquals("kgshwa", model.aadClientId());
        Assertions.assertEquals("ixzbinjeputtmryw", model.aadTenantId());
        Assertions
            .assertEquals(WindowsServerSubscription.ENABLED, model.desiredProperties().windowsServerSubscription());
        Assertions.assertEquals(DiagnosticLevel.ENHANCED, model.desiredProperties().diagnosticLevel());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
