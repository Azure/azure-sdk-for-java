// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.models.ClusterDesiredProperties;
import com.azure.resourcemanager.azurestackhci.models.ClusterPatch;
import com.azure.resourcemanager.azurestackhci.models.DiagnosticLevel;
import com.azure.resourcemanager.azurestackhci.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.azurestackhci.models.UserAssignedIdentity;
import com.azure.resourcemanager.azurestackhci.models.WindowsServerSubscription;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterPatch model = BinaryData.fromString(
            "{\"tags\":{\"g\":\"obglaocqxtcc\",\"wfudwpzntxhdzhl\":\"udxytlmoyrx\",\"hckfrlhrx\":\"qj\"},\"identity\":{\"principalId\":\"8fdc234c-53c0-4813-87dd-b121e95b3877\",\"tenantId\":\"2a8bc473-c127-4997-848a-ad7845311010\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"n\":{\"principalId\":\"4591a876-8dde-4f3a-8c06-8635ad202473\",\"clientId\":\"6b82c7e3-a237-4592-a66a-be65ba11f609\"},\"p\":{\"principalId\":\"d88430b7-ebad-4abd-b7cb-0693d3717b26\",\"clientId\":\"899a5674-d93b-4198-baf8-1389b5e9222c\"},\"fkuwbcrnwbmehhse\":{\"principalId\":\"1bed9df4-adc9-47bc-b116-f4b824c8fbc5\",\"clientId\":\"8b080aaa-870a-4218-a31f-389afe406244\"},\"us\":{\"principalId\":\"bda6b710-c084-4f0f-aa38-eb6481b32a25\",\"clientId\":\"5d4e1a4a-b5ee-4315-b809-ed32bacf089f\"}}},\"properties\":{\"cloudManagementEndpoint\":\"lhspkdee\",\"aadClientId\":\"ofmxagkvtmelmqkr\",\"aadTenantId\":\"hvljuahaquh\",\"desiredProperties\":{\"windowsServerSubscription\":\"Disabled\",\"diagnosticLevel\":\"Basic\"}}}")
            .toObject(ClusterPatch.class);
        Assertions.assertEquals("obglaocqxtcc", model.tags().get("g"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.type());
        Assertions.assertEquals("lhspkdee", model.cloudManagementEndpoint());
        Assertions.assertEquals("ofmxagkvtmelmqkr", model.aadClientId());
        Assertions.assertEquals("hvljuahaquh", model.aadTenantId());
        Assertions.assertEquals(WindowsServerSubscription.DISABLED,
            model.desiredProperties().windowsServerSubscription());
        Assertions.assertEquals(DiagnosticLevel.BASIC, model.desiredProperties().diagnosticLevel());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterPatch model = new ClusterPatch()
            .withTags(mapOf("g", "obglaocqxtcc", "wfudwpzntxhdzhl", "udxytlmoyrx", "hckfrlhrx", "qj"))
            .withType(ManagedServiceIdentityType.USER_ASSIGNED)
            .withUserAssignedIdentities(mapOf("n", new UserAssignedIdentity(), "p", new UserAssignedIdentity(),
                "fkuwbcrnwbmehhse", new UserAssignedIdentity(), "us", new UserAssignedIdentity()))
            .withCloudManagementEndpoint("lhspkdee")
            .withAadClientId("ofmxagkvtmelmqkr")
            .withAadTenantId("hvljuahaquh")
            .withDesiredProperties(
                new ClusterDesiredProperties().withWindowsServerSubscription(WindowsServerSubscription.DISABLED)
                    .withDiagnosticLevel(DiagnosticLevel.BASIC));
        model = BinaryData.fromObject(model).toObject(ClusterPatch.class);
        Assertions.assertEquals("obglaocqxtcc", model.tags().get("g"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.type());
        Assertions.assertEquals("lhspkdee", model.cloudManagementEndpoint());
        Assertions.assertEquals("ofmxagkvtmelmqkr", model.aadClientId());
        Assertions.assertEquals("hvljuahaquh", model.aadTenantId());
        Assertions.assertEquals(WindowsServerSubscription.DISABLED,
            model.desiredProperties().windowsServerSubscription());
        Assertions.assertEquals(DiagnosticLevel.BASIC, model.desiredProperties().diagnosticLevel());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
