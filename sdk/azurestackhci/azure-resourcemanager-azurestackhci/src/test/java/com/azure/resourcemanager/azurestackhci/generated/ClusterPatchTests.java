// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.models.ClusterDesiredProperties;
import com.azure.resourcemanager.azurestackhci.models.ClusterPatch;
import com.azure.resourcemanager.azurestackhci.models.DiagnosticLevel;
import com.azure.resourcemanager.azurestackhci.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.azurestackhci.models.UserAssignedIdentity;
import com.azure.resourcemanager.azurestackhci.models.WindowsServerSubscription;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterPatchTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterPatch model = BinaryData.fromString(
            "{\"tags\":{\"g\":\"obglaocqxtcc\",\"wfudwpzntxhdzhl\":\"udxytlmoyrx\",\"hckfrlhrx\":\"qj\"},\"identity\":{\"principalId\":\"5b5b5a7e-4f90-47b8-980d-6dc8dfda626d\",\"tenantId\":\"16cb7545-8cd6-4328-b0aa-9f346c3b939b\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"n\":{\"principalId\":\"cdf2c07b-a565-4c59-88a0-380aa53c1120\",\"clientId\":\"9af84a5d-90d6-4fda-9b19-047e2cd5eb62\"},\"p\":{\"principalId\":\"e8e9ffc2-995c-48ba-8f4a-9d5ce978fb9a\",\"clientId\":\"a7778dcb-6252-4939-ab54-cce7d591e137\"},\"fkuwbcrnwbmehhse\":{\"principalId\":\"49d6f22e-261d-4a30-b039-ad64a91c6b1b\",\"clientId\":\"b57699f3-1bbf-4eba-a1f3-2676ae7eb43d\"},\"us\":{\"principalId\":\"c78a3401-c300-4bc7-bce9-02bea3f895fd\",\"clientId\":\"93439df9-dbb4-47cc-90db-7af65f5f597d\"}}},\"properties\":{\"cloudManagementEndpoint\":\"lhspkdee\",\"aadClientId\":\"ofmxagkvtmelmqkr\",\"aadTenantId\":\"hvljuahaquh\",\"desiredProperties\":{\"windowsServerSubscription\":\"Disabled\",\"diagnosticLevel\":\"Basic\"}}}")
            .toObject(ClusterPatch.class);
        Assertions.assertEquals("obglaocqxtcc", model.tags().get("g"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.type());
        Assertions.assertEquals("lhspkdee", model.cloudManagementEndpoint());
        Assertions.assertEquals("ofmxagkvtmelmqkr", model.aadClientId());
        Assertions.assertEquals("hvljuahaquh", model.aadTenantId());
        Assertions.assertEquals(WindowsServerSubscription.DISABLED,
            model.desiredProperties().windowsServerSubscription());
        Assertions.assertEquals(DiagnosticLevel.BASIC, model.desiredProperties().diagnosticLevel());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterPatch model = new ClusterPatch()
            .withTags(mapOf("g", "obglaocqxtcc", "wfudwpzntxhdzhl", "udxytlmoyrx", "hckfrlhrx", "qj"))
            .withType(ManagedServiceIdentityType.USER_ASSIGNED)
            .withUserAssignedIdentities(mapOf("n", new UserAssignedIdentity(), "p", new UserAssignedIdentity(),
                "fkuwbcrnwbmehhse", new UserAssignedIdentity(), "us", new UserAssignedIdentity()))
            .withCloudManagementEndpoint("lhspkdee")
            .withAadClientId("ofmxagkvtmelmqkr")
            .withAadTenantId("hvljuahaquh")
            .withDesiredProperties(
                new ClusterDesiredProperties().withWindowsServerSubscription(WindowsServerSubscription.DISABLED)
                    .withDiagnosticLevel(DiagnosticLevel.BASIC));
        model = BinaryData.fromObject(model).toObject(ClusterPatch.class);
        Assertions.assertEquals("obglaocqxtcc", model.tags().get("g"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.type());
        Assertions.assertEquals("lhspkdee", model.cloudManagementEndpoint());
        Assertions.assertEquals("ofmxagkvtmelmqkr", model.aadClientId());
        Assertions.assertEquals("hvljuahaquh", model.aadTenantId());
        Assertions.assertEquals(WindowsServerSubscription.DISABLED,
            model.desiredProperties().windowsServerSubscription());
        Assertions.assertEquals(DiagnosticLevel.BASIC, model.desiredProperties().diagnosticLevel());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
