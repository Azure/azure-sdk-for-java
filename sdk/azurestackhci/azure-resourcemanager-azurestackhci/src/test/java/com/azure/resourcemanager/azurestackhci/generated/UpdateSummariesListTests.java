// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.fluent.models.UpdateSummariesInner;
import com.azure.resourcemanager.azurestackhci.models.HealthState;
import com.azure.resourcemanager.azurestackhci.models.PackageVersionInfo;
import com.azure.resourcemanager.azurestackhci.models.PrecheckResult;
import com.azure.resourcemanager.azurestackhci.models.PrecheckResultTags;
import com.azure.resourcemanager.azurestackhci.models.Severity;
import com.azure.resourcemanager.azurestackhci.models.Status;
import com.azure.resourcemanager.azurestackhci.models.UpdateSummariesList;
import com.azure.resourcemanager.azurestackhci.models.UpdateSummariesPropertiesState;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class UpdateSummariesListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UpdateSummariesList model = BinaryData.fromString(
            "{\"value\":[{\"location\":\"pyc\",\"properties\":{\"provisioningState\":\"Canceled\",\"oemFamily\":\"ocnhzqrottjzcfyj\",\"hardwareModel\":\"twrlohapqin\",\"packageVersions\":[{\"packageType\":\"yglqdhmrjzral\",\"version\":\"pjby\",\"lastUpdated\":\"2021-10-28T07:08:49Z\"},{\"packageType\":\"o\",\"version\":\"jenkyh\",\"lastUpdated\":\"2021-04-15T17:12:32Z\"},{\"packageType\":\"sqxfxjelgcmpz\",\"version\":\"hhhqxuwyv\",\"lastUpdated\":\"2021-07-18T16:57:32Z\"}],\"currentVersion\":\"yv\",\"lastUpdated\":\"2021-01-02T09:32:35Z\",\"lastChecked\":\"2021-08-20T22:21:36Z\",\"healthState\":\"Success\",\"healthCheckResult\":[{\"name\":\"zlbscmnlziji\",\"displayName\":\"ehgmvflnwyv\",\"tags\":{},\"title\":\"rerlniy\",\"status\":\"ValidationFailed\",\"severity\":\"Warning\",\"description\":\"xzutgqztwhghmupg\",\"remediation\":\"jtcdxabbujftaben\",\"targetResourceID\":\"klqpx\",\"targetResourceName\":\"cafeddw\",\"timestamp\":\"2021-08-08T17:03:57Z\",\"additionalData\":\"a\",\"healthCheckSource\":\"xud\"},{\"name\":\"hgookrtalvnbwgpb\",\"displayName\":\"eluclvdjj\",\"tags\":{},\"title\":\"rdnqodxahhxhqf\",\"status\":\"ValidationInProgress\",\"severity\":\"Hidden\",\"description\":\"qgyi\",\"remediation\":\"mchgavsczuej\",\"targetResourceID\":\"xptlghwzho\",\"targetResourceName\":\"wjjstliuhqa\",\"timestamp\":\"2021-10-08T14:11:28Z\",\"additionalData\":\"ia\",\"healthCheckSource\":\"znvodrrslblxydk\"}],\"healthCheckDate\":\"2021-02-05T05:28:17Z\",\"state\":\"NeedsAttention\"},\"id\":\"xiwkgfbql\",\"name\":\"nqkhych\",\"type\":\"c\"}],\"nextLink\":\"ulehurqlr\"}")
            .toObject(UpdateSummariesList.class);
        Assertions.assertEquals("pyc", model.value().get(0).location());
        Assertions.assertEquals("ocnhzqrottjzcfyj", model.value().get(0).oemFamily());
        Assertions.assertEquals("twrlohapqin", model.value().get(0).hardwareModel());
        Assertions.assertEquals("yglqdhmrjzral", model.value().get(0).packageVersions().get(0).packageType());
        Assertions.assertEquals("pjby", model.value().get(0).packageVersions().get(0).version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-28T07:08:49Z"),
            model.value().get(0).packageVersions().get(0).lastUpdated());
        Assertions.assertEquals("yv", model.value().get(0).currentVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-02T09:32:35Z"), model.value().get(0).lastUpdated());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-20T22:21:36Z"), model.value().get(0).lastChecked());
        Assertions.assertEquals(HealthState.SUCCESS, model.value().get(0).healthState());
        Assertions.assertEquals("zlbscmnlziji", model.value().get(0).healthCheckResult().get(0).name());
        Assertions.assertEquals("ehgmvflnwyv", model.value().get(0).healthCheckResult().get(0).displayName());
        Assertions.assertEquals("rerlniy", model.value().get(0).healthCheckResult().get(0).title());
        Assertions.assertEquals(Status.VALIDATION_FAILED, model.value().get(0).healthCheckResult().get(0).status());
        Assertions.assertEquals(Severity.WARNING, model.value().get(0).healthCheckResult().get(0).severity());
        Assertions.assertEquals("xzutgqztwhghmupg", model.value().get(0).healthCheckResult().get(0).description());
        Assertions.assertEquals("jtcdxabbujftaben", model.value().get(0).healthCheckResult().get(0).remediation());
        Assertions.assertEquals("klqpx", model.value().get(0).healthCheckResult().get(0).targetResourceId());
        Assertions.assertEquals("cafeddw", model.value().get(0).healthCheckResult().get(0).targetResourceName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-08T17:03:57Z"),
            model.value().get(0).healthCheckResult().get(0).timestamp());
        Assertions.assertEquals("a", model.value().get(0).healthCheckResult().get(0).additionalData());
        Assertions.assertEquals("xud", model.value().get(0).healthCheckResult().get(0).healthCheckSource());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-05T05:28:17Z"), model.value().get(0).healthCheckDate());
        Assertions.assertEquals(UpdateSummariesPropertiesState.NEEDS_ATTENTION, model.value().get(0).state());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UpdateSummariesList model
            = new UpdateSummariesList().withValue(Arrays.asList(new UpdateSummariesInner().withLocation("pyc")
                .withOemFamily("ocnhzqrottjzcfyj")
                .withHardwareModel("twrlohapqin")
                .withPackageVersions(Arrays.asList(
                    new PackageVersionInfo().withPackageType("yglqdhmrjzral")
                        .withVersion("pjby")
                        .withLastUpdated(OffsetDateTime.parse("2021-10-28T07:08:49Z")),
                    new PackageVersionInfo().withPackageType("o")
                        .withVersion("jenkyh")
                        .withLastUpdated(OffsetDateTime.parse("2021-04-15T17:12:32Z")),
                    new PackageVersionInfo().withPackageType("sqxfxjelgcmpz")
                        .withVersion("hhhqxuwyv")
                        .withLastUpdated(OffsetDateTime.parse("2021-07-18T16:57:32Z"))))
                .withCurrentVersion("yv")
                .withLastUpdated(OffsetDateTime.parse("2021-01-02T09:32:35Z"))
                .withLastChecked(OffsetDateTime.parse("2021-08-20T22:21:36Z"))
                .withHealthState(HealthState.SUCCESS)
                .withHealthCheckResult(Arrays.asList(
                    new PrecheckResult().withName("zlbscmnlziji")
                        .withDisplayName("ehgmvflnwyv")
                        .withTags(new PrecheckResultTags())
                        .withTitle("rerlniy")
                        .withStatus(Status.VALIDATION_FAILED)
                        .withSeverity(Severity.WARNING)
                        .withDescription("xzutgqztwhghmupg")
                        .withRemediation("jtcdxabbujftaben")
                        .withTargetResourceId("klqpx")
                        .withTargetResourceName("cafeddw")
                        .withTimestamp(OffsetDateTime.parse("2021-08-08T17:03:57Z"))
                        .withAdditionalData("a")
                        .withHealthCheckSource("xud"),
                    new PrecheckResult().withName("hgookrtalvnbwgpb")
                        .withDisplayName("eluclvdjj")
                        .withTags(new PrecheckResultTags())
                        .withTitle("rdnqodxahhxhqf")
                        .withStatus(Status.VALIDATION_IN_PROGRESS)
                        .withSeverity(Severity.HIDDEN)
                        .withDescription("qgyi")
                        .withRemediation("mchgavsczuej")
                        .withTargetResourceId("xptlghwzho")
                        .withTargetResourceName("wjjstliuhqa")
                        .withTimestamp(OffsetDateTime.parse("2021-10-08T14:11:28Z"))
                        .withAdditionalData("ia")
                        .withHealthCheckSource("znvodrrslblxydk")))
                .withHealthCheckDate(OffsetDateTime.parse("2021-02-05T05:28:17Z"))
                .withState(UpdateSummariesPropertiesState.NEEDS_ATTENTION)));
        model = BinaryData.fromObject(model).toObject(UpdateSummariesList.class);
        Assertions.assertEquals("pyc", model.value().get(0).location());
        Assertions.assertEquals("ocnhzqrottjzcfyj", model.value().get(0).oemFamily());
        Assertions.assertEquals("twrlohapqin", model.value().get(0).hardwareModel());
        Assertions.assertEquals("yglqdhmrjzral", model.value().get(0).packageVersions().get(0).packageType());
        Assertions.assertEquals("pjby", model.value().get(0).packageVersions().get(0).version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-28T07:08:49Z"),
            model.value().get(0).packageVersions().get(0).lastUpdated());
        Assertions.assertEquals("yv", model.value().get(0).currentVersion());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-02T09:32:35Z"), model.value().get(0).lastUpdated());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-20T22:21:36Z"), model.value().get(0).lastChecked());
        Assertions.assertEquals(HealthState.SUCCESS, model.value().get(0).healthState());
        Assertions.assertEquals("zlbscmnlziji", model.value().get(0).healthCheckResult().get(0).name());
        Assertions.assertEquals("ehgmvflnwyv", model.value().get(0).healthCheckResult().get(0).displayName());
        Assertions.assertEquals("rerlniy", model.value().get(0).healthCheckResult().get(0).title());
        Assertions.assertEquals(Status.VALIDATION_FAILED, model.value().get(0).healthCheckResult().get(0).status());
        Assertions.assertEquals(Severity.WARNING, model.value().get(0).healthCheckResult().get(0).severity());
        Assertions.assertEquals("xzutgqztwhghmupg", model.value().get(0).healthCheckResult().get(0).description());
        Assertions.assertEquals("jtcdxabbujftaben", model.value().get(0).healthCheckResult().get(0).remediation());
        Assertions.assertEquals("klqpx", model.value().get(0).healthCheckResult().get(0).targetResourceId());
        Assertions.assertEquals("cafeddw", model.value().get(0).healthCheckResult().get(0).targetResourceName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-08T17:03:57Z"),
            model.value().get(0).healthCheckResult().get(0).timestamp());
        Assertions.assertEquals("a", model.value().get(0).healthCheckResult().get(0).additionalData());
        Assertions.assertEquals("xud", model.value().get(0).healthCheckResult().get(0).healthCheckSource());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-05T05:28:17Z"), model.value().get(0).healthCheckDate());
        Assertions.assertEquals(UpdateSummariesPropertiesState.NEEDS_ATTENTION, model.value().get(0).state());
    }
}
