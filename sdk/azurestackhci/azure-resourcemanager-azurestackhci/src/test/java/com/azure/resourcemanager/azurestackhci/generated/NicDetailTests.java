// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.models.NicDetail;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NicDetailTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NicDetail model = BinaryData.fromString(
            "{\"adapterName\":\"vqejosovy\",\"interfaceDescription\":\"leaesi\",\"componentId\":\"qtljqobbpihehc\",\"driverVersion\":\"ybmrqbrjbbmp\",\"ip4Address\":\"lvykfrex\",\"subnetMask\":\"s\",\"defaultGateway\":\"wjksghudgzhxo\",\"dnsServers\":[\"gsv\",\"u\",\"kxibdafh\",\"kmdyomkxfbvfbh\"],\"defaultIsolationId\":\"i\"}")
            .toObject(NicDetail.class);
        Assertions.assertEquals("vqejosovy", model.adapterName());
        Assertions.assertEquals("leaesi", model.interfaceDescription());
        Assertions.assertEquals("qtljqobbpihehc", model.componentId());
        Assertions.assertEquals("ybmrqbrjbbmp", model.driverVersion());
        Assertions.assertEquals("lvykfrex", model.ip4Address());
        Assertions.assertEquals("s", model.subnetMask());
        Assertions.assertEquals("wjksghudgzhxo", model.defaultGateway());
        Assertions.assertEquals("gsv", model.dnsServers().get(0));
        Assertions.assertEquals("i", model.defaultIsolationId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NicDetail model = new NicDetail().withAdapterName("vqejosovy")
            .withInterfaceDescription("leaesi")
            .withComponentId("qtljqobbpihehc")
            .withDriverVersion("ybmrqbrjbbmp")
            .withIp4Address("lvykfrex")
            .withSubnetMask("s")
            .withDefaultGateway("wjksghudgzhxo")
            .withDnsServers(Arrays.asList("gsv", "u", "kxibdafh", "kmdyomkxfbvfbh"))
            .withDefaultIsolationId("i");
        model = BinaryData.fromObject(model).toObject(NicDetail.class);
        Assertions.assertEquals("vqejosovy", model.adapterName());
        Assertions.assertEquals("leaesi", model.interfaceDescription());
        Assertions.assertEquals("qtljqobbpihehc", model.componentId());
        Assertions.assertEquals("ybmrqbrjbbmp", model.driverVersion());
        Assertions.assertEquals("lvykfrex", model.ip4Address());
        Assertions.assertEquals("s", model.subnetMask());
        Assertions.assertEquals("wjksghudgzhxo", model.defaultGateway());
        Assertions.assertEquals("gsv", model.dnsServers().get(0));
        Assertions.assertEquals("i", model.defaultIsolationId());
    }
}
