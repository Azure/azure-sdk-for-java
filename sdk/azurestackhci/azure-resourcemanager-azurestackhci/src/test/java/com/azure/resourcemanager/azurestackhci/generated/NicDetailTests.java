// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.models.NicDetail;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NicDetailTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NicDetail model = BinaryData.fromString(
            "{\"adapterName\":\"tqlgehgppi\",\"interfaceDescription\":\"fhpfeoajvgcxtx\",\"componentId\":\"sheafid\",\"driverVersion\":\"ugsresmkssjhoi\",\"ip4Address\":\"xfkfwegprhptill\",\"subnetMask\":\"biqtgdq\",\"defaultGateway\":\"mcwsldrizetpwb\",\"dnsServers\":[\"llibphbqzmizak\",\"kan\"],\"defaultIsolationId\":\"p\"}")
            .toObject(NicDetail.class);
        Assertions.assertEquals("tqlgehgppi", model.adapterName());
        Assertions.assertEquals("fhpfeoajvgcxtx", model.interfaceDescription());
        Assertions.assertEquals("sheafid", model.componentId());
        Assertions.assertEquals("ugsresmkssjhoi", model.driverVersion());
        Assertions.assertEquals("xfkfwegprhptill", model.ip4Address());
        Assertions.assertEquals("biqtgdq", model.subnetMask());
        Assertions.assertEquals("mcwsldrizetpwb", model.defaultGateway());
        Assertions.assertEquals("llibphbqzmizak", model.dnsServers().get(0));
        Assertions.assertEquals("p", model.defaultIsolationId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NicDetail model = new NicDetail().withAdapterName("tqlgehgppi")
            .withInterfaceDescription("fhpfeoajvgcxtx")
            .withComponentId("sheafid")
            .withDriverVersion("ugsresmkssjhoi")
            .withIp4Address("xfkfwegprhptill")
            .withSubnetMask("biqtgdq")
            .withDefaultGateway("mcwsldrizetpwb")
            .withDnsServers(Arrays.asList("llibphbqzmizak", "kan"))
            .withDefaultIsolationId("p");
        model = BinaryData.fromObject(model).toObject(NicDetail.class);
        Assertions.assertEquals("tqlgehgppi", model.adapterName());
        Assertions.assertEquals("fhpfeoajvgcxtx", model.interfaceDescription());
        Assertions.assertEquals("sheafid", model.componentId());
        Assertions.assertEquals("ugsresmkssjhoi", model.driverVersion());
        Assertions.assertEquals("xfkfwegprhptill", model.ip4Address());
        Assertions.assertEquals("biqtgdq", model.subnetMask());
        Assertions.assertEquals("mcwsldrizetpwb", model.defaultGateway());
        Assertions.assertEquals("llibphbqzmizak", model.dnsServers().get(0));
        Assertions.assertEquals("p", model.defaultIsolationId());
    }
}
