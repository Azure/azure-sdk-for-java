// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.azurestackhci.AzureStackHciManager;
import com.azure.resourcemanager.azurestackhci.models.Cluster;
import com.azure.resourcemanager.azurestackhci.models.DiagnosticLevel;
import com.azure.resourcemanager.azurestackhci.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.azurestackhci.models.SoftwareAssuranceIntent;
import com.azure.resourcemanager.azurestackhci.models.SoftwareAssuranceStatus;
import com.azure.resourcemanager.azurestackhci.models.WindowsServerSubscription;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ClustersListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"identity\":{\"principalId\":\"e74d47b4-2927-41e6-9429-f4d82566dec5\",\"tenantId\":\"a28914df-0615-4f61-889c-68dcb225ed31\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"remj\":{\"principalId\":\"cf67275d-b939-4f85-9d87-3ddbec264153\",\"clientId\":\"173a3a09-1661-4402-9759-d6152f183d6c\"},\"qacigeleo\":{\"principalId\":\"9f6688d1-b259-4550-9018-4393ecf327f4\",\"clientId\":\"ff8fa602-05e0-4a3e-84bc-9334cc80253b\"},\"vqvwzkjopwbe\":{\"principalId\":\"0f9d04de-effc-4a98-8570-82d45a07b077\",\"clientId\":\"97a8b551-4229-46fe-b516-cacdf9501108\"}}},\"properties\":{\"provisioningState\":\"Accepted\",\"status\":\"NotYetRegistered\",\"cloudId\":\"dqybx\",\"cloudManagementEndpoint\":\"akxcptsoqfyiaseq\",\"aadClientId\":\"krtt\",\"aadTenantId\":\"azisgyk\",\"aadApplicationObjectId\":\"emv\",\"aadServicePrincipalObjectId\":\"bwzohmnrxxbs\",\"softwareAssuranceProperties\":{\"softwareAssuranceStatus\":\"Disabled\",\"softwareAssuranceIntent\":\"Disable\",\"lastUpdated\":\"2021-03-11T20:10:07Z\"},\"desiredProperties\":{\"windowsServerSubscription\":\"Enabled\",\"diagnosticLevel\":\"Enhanced\"},\"reportedProperties\":{\"clusterName\":\"qsgnzxojpsl\",\"clusterId\":\"jgpliuf\",\"clusterVersion\":\"woyxqvapcohhou\",\"nodes\":[{\"name\":\"oj\",\"id\":3.2066762,\"windowsServerSubscription\":\"Enabled\",\"nodeType\":\"ThirdParty\",\"ehcResourceId\":\"gdzbenr\",\"manufacturer\":\"cawetzqddt\",\"model\":\"fljhznamtua\",\"osName\":\"zwcjjncqtj\",\"osVersion\":\"izvg\",\"osDisplayVersion\":\"atzuuv\",\"serialNumber\":\"ngrebwg\",\"coreCount\":94.98158,\"memoryInGiB\":46.06248},{\"name\":\"lswva\",\"id\":11.776554,\"windowsServerSubscription\":\"Disabled\",\"nodeType\":\"FirstParty\",\"ehcResourceId\":\"oqza\",\"manufacturer\":\"nwqrjzfrgqh\",\"model\":\"hcmbuocnjrohmbp\",\"osName\":\"yx\",\"osVersion\":\"eblydyv\",\"osDisplayVersion\":\"kmrocxne\",\"serialNumber\":\"sm\",\"coreCount\":21.49707,\"memoryInGiB\":89.43345}],\"lastUpdated\":\"2021-05-01T05:25:27Z\",\"imdsAttestation\":\"Enabled\",\"diagnosticLevel\":\"Enhanced\",\"supportedCapabilities\":[\"voavyunssxl\",\"hi\",\"egjlgvvpa\",\"eksgbuxantuygd\"]},\"trialDaysRemaining\":8.260214,\"billingModel\":\"i\",\"registrationTimestamp\":\"2021-02-21T23:48:36Z\",\"lastSyncTimestamp\":\"2021-12-09T06:35:55Z\",\"lastBillingTimestamp\":\"2021-10-06T12:25:50Z\",\"serviceEndpoint\":\"ofulopmjnle\",\"resourceProviderObjectId\":\"hcbjpibk\"},\"location\":\"hu\",\"tags\":{\"yintqpbrlcy\":\"rctat\",\"y\":\"duczkgof\",\"st\":\"srucvcrrpcjtt\"},\"id\":\"jeaq\",\"name\":\"rmvvfkoxmlghktui\",\"type\":\"vrmazlpdwwexymzv\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AzureStackHciManager manager =
            AzureStackHciManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Cluster> response =
            manager.clusters().listByResourceGroup("opedbwdpyqyybxub", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("hu", response.iterator().next().location());
        Assertions.assertEquals("rctat", response.iterator().next().tags().get("yintqpbrlcy"));
        Assertions
            .assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.iterator().next().typeIdentityType());
        Assertions.assertEquals("akxcptsoqfyiaseq", response.iterator().next().cloudManagementEndpoint());
        Assertions.assertEquals("krtt", response.iterator().next().aadClientId());
        Assertions.assertEquals("azisgyk", response.iterator().next().aadTenantId());
        Assertions.assertEquals("emv", response.iterator().next().aadApplicationObjectId());
        Assertions.assertEquals("bwzohmnrxxbs", response.iterator().next().aadServicePrincipalObjectId());
        Assertions
            .assertEquals(
                SoftwareAssuranceStatus.DISABLED,
                response.iterator().next().softwareAssuranceProperties().softwareAssuranceStatus());
        Assertions
            .assertEquals(
                SoftwareAssuranceIntent.DISABLE,
                response.iterator().next().softwareAssuranceProperties().softwareAssuranceIntent());
        Assertions
            .assertEquals(
                WindowsServerSubscription.ENABLED,
                response.iterator().next().desiredProperties().windowsServerSubscription());
        Assertions
            .assertEquals(DiagnosticLevel.ENHANCED, response.iterator().next().desiredProperties().diagnosticLevel());
    }
}
