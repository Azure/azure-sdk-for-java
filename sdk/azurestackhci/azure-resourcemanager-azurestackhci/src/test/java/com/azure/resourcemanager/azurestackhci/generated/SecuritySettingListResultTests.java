// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.fluent.models.SecuritySettingInner;
import com.azure.resourcemanager.azurestackhci.models.ComplianceAssignmentType;
import com.azure.resourcemanager.azurestackhci.models.ProvisioningState;
import com.azure.resourcemanager.azurestackhci.models.SecuritySettingListResult;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SecuritySettingListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SecuritySettingListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"securedCoreComplianceAssignment\":\"ApplyAndAutoCorrect\",\"securityComplianceStatus\":{\"securedCoreCompliance\":\"NonCompliant\",\"wdacCompliance\":\"NonCompliant\",\"dataAtRestEncrypted\":\"NonCompliant\",\"dataInTransitProtected\":\"NonCompliant\",\"lastUpdated\":\"2021-09-03T07:37:13Z\"},\"provisioningState\":\"Disconnected\"},\"id\":\"jqo\",\"name\":\"bpihehcecybmrqbr\",\"type\":\"bbmpxdlvykfre\"},{\"properties\":{\"securedCoreComplianceAssignment\":\"Audit\",\"securityComplianceStatus\":{\"securedCoreCompliance\":\"NonCompliant\",\"wdacCompliance\":\"NonCompliant\",\"dataAtRestEncrypted\":\"NonCompliant\",\"dataInTransitProtected\":\"Pending\",\"lastUpdated\":\"2021-09-30T11:33:21Z\"},\"provisioningState\":\"Failed\"},\"id\":\"ogjggsvoujkxibda\",\"name\":\"hrkmdyomkxfbvfbh\",\"type\":\"y\"},{\"properties\":{\"securedCoreComplianceAssignment\":\"Audit\",\"securityComplianceStatus\":{\"securedCoreCompliance\":\"NonCompliant\",\"wdacCompliance\":\"Pending\",\"dataAtRestEncrypted\":\"Pending\",\"dataInTransitProtected\":\"Compliant\",\"lastUpdated\":\"2021-05-02T17:20:36Z\"},\"provisioningState\":\"PartiallySucceeded\"},\"id\":\"kkum\",\"name\":\"ikjcjcazt\",\"type\":\"wsnsqowx\"},{\"properties\":{\"securedCoreComplianceAssignment\":\"Audit\",\"securityComplianceStatus\":{\"securedCoreCompliance\":\"Pending\",\"wdacCompliance\":\"NonCompliant\",\"dataAtRestEncrypted\":\"Pending\",\"dataInTransitProtected\":\"Pending\",\"lastUpdated\":\"2021-03-17T10:45:22Z\"},\"provisioningState\":\"Deleting\"},\"id\":\"cvejyfdvlvhbwrn\",\"name\":\"xt\",\"type\":\"ddpqt\"}],\"nextLink\":\"hn\"}")
            .toObject(SecuritySettingListResult.class);
        Assertions.assertEquals(ComplianceAssignmentType.APPLY_AND_AUTO_CORRECT,
            model.value().get(0).securedCoreComplianceAssignment());
        Assertions.assertEquals(ProvisioningState.DISCONNECTED, model.value().get(0).provisioningState());
        Assertions.assertEquals("hn", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SecuritySettingListResult model = new SecuritySettingListResult().withValue(Arrays.asList(
            new SecuritySettingInner()
                .withSecuredCoreComplianceAssignment(ComplianceAssignmentType.APPLY_AND_AUTO_CORRECT)
                .withProvisioningState(ProvisioningState.DISCONNECTED),
            new SecuritySettingInner().withSecuredCoreComplianceAssignment(ComplianceAssignmentType.AUDIT)
                .withProvisioningState(ProvisioningState.FAILED),
            new SecuritySettingInner().withSecuredCoreComplianceAssignment(ComplianceAssignmentType.AUDIT)
                .withProvisioningState(ProvisioningState.PARTIALLY_SUCCEEDED),
            new SecuritySettingInner().withSecuredCoreComplianceAssignment(ComplianceAssignmentType.AUDIT)
                .withProvisioningState(ProvisioningState.DELETING)))
            .withNextLink("hn");
        model = BinaryData.fromObject(model).toObject(SecuritySettingListResult.class);
        Assertions.assertEquals(ComplianceAssignmentType.APPLY_AND_AUTO_CORRECT,
            model.value().get(0).securedCoreComplianceAssignment());
        Assertions.assertEquals(ProvisioningState.DISCONNECTED, model.value().get(0).provisioningState());
        Assertions.assertEquals("hn", model.nextLink());
    }
}
