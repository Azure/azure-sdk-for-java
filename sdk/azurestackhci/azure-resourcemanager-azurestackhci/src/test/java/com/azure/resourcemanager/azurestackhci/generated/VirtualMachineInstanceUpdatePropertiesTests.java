// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.models.HardwareProfileUpdate;
import com.azure.resourcemanager.azurestackhci.models.NetworkProfileUpdate;
import com.azure.resourcemanager.azurestackhci.models.NetworkProfileUpdateNetworkInterfacesItem;
import com.azure.resourcemanager.azurestackhci.models.OsProfileUpdate;
import com.azure.resourcemanager.azurestackhci.models.OsProfileUpdateLinuxConfiguration;
import com.azure.resourcemanager.azurestackhci.models.OsProfileUpdateWindowsConfiguration;
import com.azure.resourcemanager.azurestackhci.models.StorageProfileUpdate;
import com.azure.resourcemanager.azurestackhci.models.StorageProfileUpdateDataDisksItem;
import com.azure.resourcemanager.azurestackhci.models.VirtualMachineInstanceUpdateProperties;
import com.azure.resourcemanager.azurestackhci.models.VmSizeEnum;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineInstanceUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineInstanceUpdateProperties model =
            BinaryData
                .fromString(
                    "{\"hardwareProfile\":{\"vmSize\":\"Standard_NV12\",\"processors\":724820131,\"memoryMB\":4284842638181152780},\"storageProfile\":{\"dataDisks\":[{\"id\":\"cqibycnojv\"},{\"id\":\"mefqsgzvahapjyzh\"}]},\"networkProfile\":{\"networkInterfaces\":[{\"id\":\"cjrvxdjzlmwlxkv\"},{\"id\":\"fhzovawjvzunluth\"},{\"id\":\"prnxipeil\"}]},\"osProfile\":{\"computerName\":\"uaejxdultsk\",\"linuxConfiguration\":{\"provisionVMAgent\":true,\"provisionVMConfigAgent\":true},\"windowsConfiguration\":{\"provisionVMAgent\":true,\"provisionVMConfigAgent\":false}}}")
                .toObject(VirtualMachineInstanceUpdateProperties.class);
        Assertions.assertEquals(VmSizeEnum.STANDARD_NV12, model.hardwareProfile().vmSize());
        Assertions.assertEquals(724820131, model.hardwareProfile().processors());
        Assertions.assertEquals(4284842638181152780L, model.hardwareProfile().memoryMB());
        Assertions.assertEquals("cqibycnojv", model.storageProfile().dataDisks().get(0).id());
        Assertions.assertEquals("cjrvxdjzlmwlxkv", model.networkProfile().networkInterfaces().get(0).id());
        Assertions.assertEquals("uaejxdultsk", model.osProfile().computerName());
        Assertions.assertEquals(true, model.osProfile().linuxConfiguration().provisionVMAgent());
        Assertions.assertEquals(true, model.osProfile().linuxConfiguration().provisionVMConfigAgent());
        Assertions.assertEquals(true, model.osProfile().windowsConfiguration().provisionVMAgent());
        Assertions.assertEquals(false, model.osProfile().windowsConfiguration().provisionVMConfigAgent());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineInstanceUpdateProperties model =
            new VirtualMachineInstanceUpdateProperties()
                .withHardwareProfile(
                    new HardwareProfileUpdate()
                        .withVmSize(VmSizeEnum.STANDARD_NV12)
                        .withProcessors(724820131)
                        .withMemoryMB(4284842638181152780L))
                .withStorageProfile(
                    new StorageProfileUpdate()
                        .withDataDisks(
                            Arrays
                                .asList(
                                    new StorageProfileUpdateDataDisksItem().withId("cqibycnojv"),
                                    new StorageProfileUpdateDataDisksItem().withId("mefqsgzvahapjyzh"))))
                .withNetworkProfile(
                    new NetworkProfileUpdate()
                        .withNetworkInterfaces(
                            Arrays
                                .asList(
                                    new NetworkProfileUpdateNetworkInterfacesItem().withId("cjrvxdjzlmwlxkv"),
                                    new NetworkProfileUpdateNetworkInterfacesItem().withId("fhzovawjvzunluth"),
                                    new NetworkProfileUpdateNetworkInterfacesItem().withId("prnxipeil"))))
                .withOsProfile(
                    new OsProfileUpdate()
                        .withComputerName("uaejxdultsk")
                        .withLinuxConfiguration(
                            new OsProfileUpdateLinuxConfiguration()
                                .withProvisionVMAgent(true)
                                .withProvisionVMConfigAgent(true))
                        .withWindowsConfiguration(
                            new OsProfileUpdateWindowsConfiguration()
                                .withProvisionVMAgent(true)
                                .withProvisionVMConfigAgent(false)));
        model = BinaryData.fromObject(model).toObject(VirtualMachineInstanceUpdateProperties.class);
        Assertions.assertEquals(VmSizeEnum.STANDARD_NV12, model.hardwareProfile().vmSize());
        Assertions.assertEquals(724820131, model.hardwareProfile().processors());
        Assertions.assertEquals(4284842638181152780L, model.hardwareProfile().memoryMB());
        Assertions.assertEquals("cqibycnojv", model.storageProfile().dataDisks().get(0).id());
        Assertions.assertEquals("cjrvxdjzlmwlxkv", model.networkProfile().networkInterfaces().get(0).id());
        Assertions.assertEquals("uaejxdultsk", model.osProfile().computerName());
        Assertions.assertEquals(true, model.osProfile().linuxConfiguration().provisionVMAgent());
        Assertions.assertEquals(true, model.osProfile().linuxConfiguration().provisionVMConfigAgent());
        Assertions.assertEquals(true, model.osProfile().windowsConfiguration().provisionVMAgent());
        Assertions.assertEquals(false, model.osProfile().windowsConfiguration().provisionVMConfigAgent());
    }
}
