// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.models.AdapterPropertyOverrides;
import com.azure.resourcemanager.azurestackhci.models.HostNetwork;
import com.azure.resourcemanager.azurestackhci.models.Intents;
import com.azure.resourcemanager.azurestackhci.models.QosPolicyOverrides;
import com.azure.resourcemanager.azurestackhci.models.StorageNetworks;
import com.azure.resourcemanager.azurestackhci.models.VirtualSwitchConfigurationOverrides;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class HostNetworkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HostNetwork model = BinaryData.fromString(
            "{\"intents\":[{\"name\":\"qtkoievs\",\"trafficType\":[\"gqrlltmuwla\"],\"adapter\":[\"izxbmpgcjef\",\"zmuvpbttdumorppx\",\"bmnzbtbhjpgl\"],\"overrideVirtualSwitchConfiguration\":true,\"virtualSwitchConfigurationOverrides\":{\"enableIov\":\"dneu\",\"loadBalancingAlgorithm\":\"fphsdyhtozfikdow\"},\"overrideQosPolicy\":false,\"qosPolicyOverrides\":{\"priorityValue8021Action_Cluster\":\"xzxcl\",\"priorityValue8021Action_SMB\":\"thhqzonosggbh\",\"bandwidthPercentage_SMB\":\"hfwdsjnkaljutiis\"},\"overrideAdapterProperty\":true,\"adapterPropertyOverrides\":{\"jumboPacket\":\"gdkz\",\"networkDirect\":\"wkfvhqcrailvp\",\"networkDirectTechnology\":\"pfuflrw\"}},{\"name\":\"hdlxyjrxsagafcn\",\"trafficType\":[\"wqapnedgfbcvk\"],\"adapter\":[\"vpk\"],\"overrideVirtualSwitchConfiguration\":false,\"virtualSwitchConfigurationOverrides\":{\"enableIov\":\"drhvoodsotbo\",\"loadBalancingAlgorithm\":\"dopcjwvnh\"},\"overrideQosPolicy\":false,\"qosPolicyOverrides\":{\"priorityValue8021Action_Cluster\":\"gx\",\"priorityValue8021Action_SMB\":\"rslpmutwuoeg\",\"bandwidthPercentage_SMB\":\"khjwn\"},\"overrideAdapterProperty\":false,\"adapterPropertyOverrides\":{\"jumboPacket\":\"uicpd\",\"networkDirect\":\"kzzlvmbmpaxmodf\",\"networkDirectTechnology\":\"efyw\"}}],\"storageNetworks\":[{\"name\":\"vmwy\",\"networkAdapterName\":\"fouyf\",\"vlanId\":\"akcp\"},{\"name\":\"yzvqt\",\"networkAdapterName\":\"ubex\",\"vlanId\":\"zksmondj\"},{\"name\":\"uxvypomgkopkwh\",\"networkAdapterName\":\"v\",\"vlanId\":\"jqg\"}],\"storageConnectivitySwitchless\":false,\"enableStorageAutoIp\":true}")
            .toObject(HostNetwork.class);
        Assertions.assertEquals("qtkoievs", model.intents().get(0).name());
        Assertions.assertEquals("gqrlltmuwla", model.intents().get(0).trafficType().get(0));
        Assertions.assertEquals("izxbmpgcjef", model.intents().get(0).adapter().get(0));
        Assertions.assertEquals(true, model.intents().get(0).overrideVirtualSwitchConfiguration());
        Assertions.assertEquals("dneu", model.intents().get(0).virtualSwitchConfigurationOverrides().enableIov());
        Assertions.assertEquals("fphsdyhtozfikdow",
            model.intents().get(0).virtualSwitchConfigurationOverrides().loadBalancingAlgorithm());
        Assertions.assertEquals(false, model.intents().get(0).overrideQosPolicy());
        Assertions.assertEquals("xzxcl", model.intents().get(0).qosPolicyOverrides().priorityValue8021ActionCluster());
        Assertions.assertEquals("thhqzonosggbh",
            model.intents().get(0).qosPolicyOverrides().priorityValue8021ActionSmb());
        Assertions.assertEquals("hfwdsjnkaljutiis",
            model.intents().get(0).qosPolicyOverrides().bandwidthPercentageSmb());
        Assertions.assertEquals(true, model.intents().get(0).overrideAdapterProperty());
        Assertions.assertEquals("gdkz", model.intents().get(0).adapterPropertyOverrides().jumboPacket());
        Assertions.assertEquals("wkfvhqcrailvp", model.intents().get(0).adapterPropertyOverrides().networkDirect());
        Assertions.assertEquals("pfuflrw", model.intents().get(0).adapterPropertyOverrides().networkDirectTechnology());
        Assertions.assertEquals("vmwy", model.storageNetworks().get(0).name());
        Assertions.assertEquals("fouyf", model.storageNetworks().get(0).networkAdapterName());
        Assertions.assertEquals("akcp", model.storageNetworks().get(0).vlanId());
        Assertions.assertEquals(false, model.storageConnectivitySwitchless());
        Assertions.assertEquals(true, model.enableStorageAutoIp());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HostNetwork model = new HostNetwork()
            .withIntents(Arrays.asList(new Intents().withName("qtkoievs")
                .withTrafficType(Arrays.asList("gqrlltmuwla"))
                .withAdapter(Arrays.asList("izxbmpgcjef", "zmuvpbttdumorppx", "bmnzbtbhjpgl"))
                .withOverrideVirtualSwitchConfiguration(true)
                .withVirtualSwitchConfigurationOverrides(new VirtualSwitchConfigurationOverrides().withEnableIov("dneu")
                    .withLoadBalancingAlgorithm("fphsdyhtozfikdow"))
                .withOverrideQosPolicy(false)
                .withQosPolicyOverrides(new QosPolicyOverrides().withPriorityValue8021ActionCluster("xzxcl")
                    .withPriorityValue8021ActionSmb("thhqzonosggbh")
                    .withBandwidthPercentageSmb("hfwdsjnkaljutiis"))
                .withOverrideAdapterProperty(true)
                .withAdapterPropertyOverrides(new AdapterPropertyOverrides().withJumboPacket("gdkz")
                    .withNetworkDirect("wkfvhqcrailvp")
                    .withNetworkDirectTechnology("pfuflrw")),
                new Intents().withName("hdlxyjrxsagafcn")
                    .withTrafficType(Arrays.asList("wqapnedgfbcvk"))
                    .withAdapter(Arrays.asList("vpk"))
                    .withOverrideVirtualSwitchConfiguration(false)
                    .withVirtualSwitchConfigurationOverrides(
                        new VirtualSwitchConfigurationOverrides().withEnableIov("drhvoodsotbo")
                            .withLoadBalancingAlgorithm("dopcjwvnh"))
                    .withOverrideQosPolicy(false)
                    .withQosPolicyOverrides(new QosPolicyOverrides().withPriorityValue8021ActionCluster("gx")
                        .withPriorityValue8021ActionSmb("rslpmutwuoeg")
                        .withBandwidthPercentageSmb("khjwn"))
                    .withOverrideAdapterProperty(false)
                    .withAdapterPropertyOverrides(new AdapterPropertyOverrides().withJumboPacket("uicpd")
                        .withNetworkDirect("kzzlvmbmpaxmodf")
                        .withNetworkDirectTechnology("efyw"))))
            .withStorageNetworks(
                Arrays.asList(new StorageNetworks().withName("vmwy").withNetworkAdapterName("fouyf").withVlanId("akcp"),
                    new StorageNetworks().withName("yzvqt").withNetworkAdapterName("ubex").withVlanId("zksmondj"),
                    new StorageNetworks().withName("uxvypomgkopkwh").withNetworkAdapterName("v").withVlanId("jqg")))
            .withStorageConnectivitySwitchless(false)
            .withEnableStorageAutoIp(true);
        model = BinaryData.fromObject(model).toObject(HostNetwork.class);
        Assertions.assertEquals("qtkoievs", model.intents().get(0).name());
        Assertions.assertEquals("gqrlltmuwla", model.intents().get(0).trafficType().get(0));
        Assertions.assertEquals("izxbmpgcjef", model.intents().get(0).adapter().get(0));
        Assertions.assertEquals(true, model.intents().get(0).overrideVirtualSwitchConfiguration());
        Assertions.assertEquals("dneu", model.intents().get(0).virtualSwitchConfigurationOverrides().enableIov());
        Assertions.assertEquals("fphsdyhtozfikdow",
            model.intents().get(0).virtualSwitchConfigurationOverrides().loadBalancingAlgorithm());
        Assertions.assertEquals(false, model.intents().get(0).overrideQosPolicy());
        Assertions.assertEquals("xzxcl", model.intents().get(0).qosPolicyOverrides().priorityValue8021ActionCluster());
        Assertions.assertEquals("thhqzonosggbh",
            model.intents().get(0).qosPolicyOverrides().priorityValue8021ActionSmb());
        Assertions.assertEquals("hfwdsjnkaljutiis",
            model.intents().get(0).qosPolicyOverrides().bandwidthPercentageSmb());
        Assertions.assertEquals(true, model.intents().get(0).overrideAdapterProperty());
        Assertions.assertEquals("gdkz", model.intents().get(0).adapterPropertyOverrides().jumboPacket());
        Assertions.assertEquals("wkfvhqcrailvp", model.intents().get(0).adapterPropertyOverrides().networkDirect());
        Assertions.assertEquals("pfuflrw", model.intents().get(0).adapterPropertyOverrides().networkDirectTechnology());
        Assertions.assertEquals("vmwy", model.storageNetworks().get(0).name());
        Assertions.assertEquals("fouyf", model.storageNetworks().get(0).networkAdapterName());
        Assertions.assertEquals("akcp", model.storageNetworks().get(0).vlanId());
        Assertions.assertEquals(false, model.storageConnectivitySwitchless());
        Assertions.assertEquals(true, model.enableStorageAutoIp());
    }
}
