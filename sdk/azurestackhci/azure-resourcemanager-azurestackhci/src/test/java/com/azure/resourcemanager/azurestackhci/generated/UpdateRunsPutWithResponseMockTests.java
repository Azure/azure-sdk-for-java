// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurestackhci.AzureStackHciManager;
import com.azure.resourcemanager.azurestackhci.fluent.models.Step;
import com.azure.resourcemanager.azurestackhci.models.UpdateRun;
import com.azure.resourcemanager.azurestackhci.models.UpdateRunPropertiesState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class UpdateRunsPutWithResponseMockTests {
    @Test
    public void testPutWithResponse() throws Exception {
        String responseStr
            = "{\"location\":\"yyjshcybwfuppo\",\"properties\":{\"provisioningState\":\"Deleted\",\"timeStarted\":\"2021-07-04T04:46:54Z\",\"lastUpdatedTime\":\"2021-06-03T21:36:28Z\",\"duration\":\"jxdiikmoxrezsv\",\"state\":\"Succeeded\",\"progress\":{\"name\":\"ikj\",\"description\":\"ywlunpipcwybs\",\"errorMessage\":\"ncnpat\",\"status\":\"tsaebwfwhxorpwa\",\"startTimeUtc\":\"2021-06-16T08:15:31Z\",\"endTimeUtc\":\"2021-02-06T18:53Z\",\"lastUpdatedTimeUtc\":\"2021-06-24T13:27:14Z\",\"expectedExecutionTime\":\"ojfccylhtrht\",\"steps\":[{\"name\":\"jpwexcdrz\",\"description\":\"o\",\"errorMessage\":\"zxezmnr\",\"status\":\"gpjeuxsphlokfp\",\"startTimeUtc\":\"2021-04-01T17:54:10Z\",\"endTimeUtc\":\"2021-07-25T23:33:25Z\",\"lastUpdatedTimeUtc\":\"2021-09-27T10:36:11Z\",\"expectedExecutionTime\":\"fbhwbdqufvc\",\"steps\":[{}]},{\"name\":\"laqrwyam\",\"description\":\"bafeb\",\"errorMessage\":\"fk\",\"status\":\"utibhlen\",\"startTimeUtc\":\"2021-04-04T14:20:23Z\",\"endTimeUtc\":\"2021-02-01T02:39:45Z\",\"lastUpdatedTimeUtc\":\"2021-03-04T14:33:22Z\",\"expectedExecutionTime\":\"abdu\",\"steps\":[{},{}]},{\"name\":\"lghnysvlp\",\"description\":\"uukppdixqb\",\"errorMessage\":\"xvhhyqq\",\"status\":\"at\",\"startTimeUtc\":\"2021-12-07T11:56:56Z\",\"endTimeUtc\":\"2021-10-19T10:58:27Z\",\"lastUpdatedTimeUtc\":\"2021-09-24T13:47:14Z\",\"expectedExecutionTime\":\"nmtsdixc\",\"steps\":[{},{},{}]},{\"name\":\"bmgjymncjc\",\"description\":\"airwcqzoofj\",\"errorMessage\":\"jsvepfbhtleberp\",\"status\":\"jeknfqnw\",\"startTimeUtc\":\"2021-06-22T21:22:25Z\",\"endTimeUtc\":\"2021-12-06T21:58:15Z\",\"lastUpdatedTimeUtc\":\"2021-07-31T14:46:40Z\",\"expectedExecutionTime\":\"njrxgkrhwie\",\"steps\":[{},{}]}]}},\"id\":\"nowawonoehrguqlh\",\"name\":\"wafbjzmp\",\"type\":\"rguyfa\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureStackHciManager manager = AzureStackHciManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        UpdateRun response = manager.updateRuns()
            .define("rcwgzwllxzlhhf")
            .withExistingUpdate("mazdfsqxh", "qmr", "jparnpvgrszrbwt")
            .withRegion("acfculzjrmhpf")
            .withTimeStarted(OffsetDateTime.parse("2021-11-22T19:55:27Z"))
            .withLastUpdatedTime(OffsetDateTime.parse("2021-02-20T02:04:38Z"))
            .withDuration("fzxsoxinunjlzkd")
            .withState(UpdateRunPropertiesState.FAILED)
            .withNamePropertiesName("xytqq")
            .withDescription("miwdwisvnme")
            .withErrorMessage("ajamc")
            .withStatus("yh")
            .withStartTimeUtc(OffsetDateTime.parse("2021-02-08T06:18:05Z"))
            .withEndTimeUtc(OffsetDateTime.parse("2021-04-13T15:26:33Z"))
            .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-12-01T11:59:37Z"))
            .withExpectedExecutionTime("kll")
            .withSteps(Arrays.asList(
                new Step().withName("anhkigglclwalh")
                    .withDescription("bhgzphetxdq")
                    .withErrorMessage("yctajqz")
                    .withStatus("alec")
                    .withStartTimeUtc(OffsetDateTime.parse("2021-05-06T22:18:11Z"))
                    .withEndTimeUtc(OffsetDateTime.parse("2021-10-21T08:11:03Z"))
                    .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-09-17T15:16:08Z"))
                    .withExpectedExecutionTime("degyxsbfpzvo")
                    .withSteps(Arrays.asList(new Step())),
                new Step().withName("twczf")
                    .withDescription("ushlcxpblalh")
                    .withErrorMessage("zpfkis")
                    .withStatus("idqzsaaoqdsgpto")
                    .withStartTimeUtc(OffsetDateTime.parse("2021-03-27T14:06:37Z"))
                    .withEndTimeUtc(OffsetDateTime.parse("2021-01-27T18:55:40Z"))
                    .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-10-22T00:46:28Z"))
                    .withExpectedExecutionTime("cnlrt")
                    .withSteps(Arrays.asList(new Step(), new Step(), new Step(), new Step())),
                new Step().withName("zzcaoijolbuauk")
                    .withDescription("ieopexelxqdwr")
                    .withErrorMessage("yil")
                    .withStatus("ibkgxyxyau")
                    .withStartTimeUtc(OffsetDateTime.parse("2021-09-13T13:52:05Z"))
                    .withEndTimeUtc(OffsetDateTime.parse("2021-06-11T01:53:29Z"))
                    .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-03-17T10:44:28Z"))
                    .withExpectedExecutionTime("cnlt")
                    .withSteps(Arrays.asList(new Step(), new Step())),
                new Step().withName("kujsqycmm")
                    .withDescription("fablqg")
                    .withErrorMessage("bmwhrialiwr")
                    .withStatus("gnwplrrb")
                    .withStartTimeUtc(OffsetDateTime.parse("2021-09-20T03:31:15Z"))
                    .withEndTimeUtc(OffsetDateTime.parse("2021-08-26T04:38:01Z"))
                    .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-09-02T14:41:47Z"))
                    .withExpectedExecutionTime("bticuhqv")
                    .withSteps(Arrays.asList(new Step(), new Step(), new Step(), new Step()))))
            .create();

        Assertions.assertEquals("yyjshcybwfuppo", response.location());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-04T04:46:54Z"), response.timeStarted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-03T21:36:28Z"), response.lastUpdatedTime());
        Assertions.assertEquals("jxdiikmoxrezsv", response.duration());
        Assertions.assertEquals(UpdateRunPropertiesState.SUCCEEDED, response.state());
        Assertions.assertEquals("ikj", response.namePropertiesName());
        Assertions.assertEquals("ywlunpipcwybs", response.description());
        Assertions.assertEquals("ncnpat", response.errorMessage());
        Assertions.assertEquals("tsaebwfwhxorpwa", response.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-16T08:15:31Z"), response.startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-06T18:53Z"), response.endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-24T13:27:14Z"), response.lastUpdatedTimeUtc());
        Assertions.assertEquals("ojfccylhtrht", response.expectedExecutionTime());
        Assertions.assertEquals("jpwexcdrz", response.steps().get(0).name());
        Assertions.assertEquals("o", response.steps().get(0).description());
        Assertions.assertEquals("zxezmnr", response.steps().get(0).errorMessage());
        Assertions.assertEquals("gpjeuxsphlokfp", response.steps().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-01T17:54:10Z"), response.steps().get(0).startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-25T23:33:25Z"), response.steps().get(0).endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-27T10:36:11Z"),
            response.steps().get(0).lastUpdatedTimeUtc());
        Assertions.assertEquals("fbhwbdqufvc", response.steps().get(0).expectedExecutionTime());
    }
}
