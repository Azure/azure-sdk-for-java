// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.azurestackhci.AzureStackHciManager;
import com.azure.resourcemanager.azurestackhci.fluent.models.Step;
import com.azure.resourcemanager.azurestackhci.models.UpdateRun;
import com.azure.resourcemanager.azurestackhci.models.UpdateRunPropertiesState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class UpdateRunsPutWithResponseMockTests {
    @Test
    public void testPutWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"location\":\"hffbxrq\",\"properties\":{\"provisioningState\":\"Creating\",\"timeStarted\":\"2021-05-21T04:38:39Z\",\"lastUpdatedTime\":\"2021-02-11T11:24:24Z\",\"duration\":\"sdxeqztvxwmwwmjs\",\"state\":\"Unknown\",\"progress\":{\"name\":\"wamec\",\"description\":\"qioulndhzyoeojht\",\"errorMessage\":\"lhsvidmytzlnglxp\",\"status\":\"vyoanfbcswqagywv\",\"startTimeUtc\":\"2021-08-10T03:07:09Z\",\"endTimeUtc\":\"2021-04-15T12:25:34Z\",\"lastUpdatedTimeUtc\":\"2021-05-25T14:12:39Z\",\"expectedExecutionTime\":\"tpgaeukya\",\"steps\":[{\"name\":\"mwhqnucsklh\",\"description\":\"dsjtdlpbni\",\"errorMessage\":\"gazlsvbz\",\"status\":\"puoee\",\"startTimeUtc\":\"2021-09-21T07:05Z\",\"endTimeUtc\":\"2021-09-19T23:33:20Z\",\"lastUpdatedTimeUtc\":\"2021-08-28T23:11:40Z\",\"expectedExecutionTime\":\"hsy\",\"steps\":[{},{}]},{\"name\":\"renxolriyehqbe\",\"description\":\"dlh\",\"errorMessage\":\"wbdbfg\",\"status\":\"punytjl\",\"startTimeUtc\":\"2021-12-01T03:21:44Z\",\"endTimeUtc\":\"2021-01-19T23:44:06Z\",\"lastUpdatedTimeUtc\":\"2021-02-08T23:25:49Z\",\"expectedExecutionTime\":\"hubt\",\"steps\":[{},{}]},{\"name\":\"an\",\"description\":\"wllbv\",\"errorMessage\":\"zsffte\",\"status\":\"us\",\"startTimeUtc\":\"2021-07-21T04:35:12Z\",\"endTimeUtc\":\"2021-08-24T04:28:03Z\",\"lastUpdatedTimeUtc\":\"2021-04-24T16:42:52Z\",\"expectedExecutionTime\":\"vaqogfkbebauzl\",\"steps\":[{},{}]}]}},\"id\":\"xxw\",\"name\":\"f\",\"type\":\"njzudr\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AzureStackHciManager manager =
            AzureStackHciManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        UpdateRun response =
            manager
                .updateRuns()
                .define("rcwfcmfcnrjajq")
                .withExistingUpdate("itnsqxtltc", "krdpqgfhyrfr", "kkld")
                .withRegion("txjtielnzqgx")
                .withTimeStarted(OffsetDateTime.parse("2021-11-01T10:29:57Z"))
                .withLastUpdatedTime(OffsetDateTime.parse("2021-02-08T02:40:07Z"))
                .withDuration("qagynoipr")
                .withState(UpdateRunPropertiesState.IN_PROGRESS)
                .withNamePropertiesName("incryqxzx")
                .withDescription("zi")
                .withErrorMessage("qimiymqr")
                .withStatus("guhfupe")
                .withStartTimeUtc(OffsetDateTime.parse("2021-04-25T04:36:14Z"))
                .withEndTimeUtc(OffsetDateTime.parse("2021-10-20T04:19:59Z"))
                .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-09-23T06:34:16Z"))
                .withExpectedExecutionTime("bpkflanfkgxs")
                .withSteps(
                    Arrays
                        .asList(
                            new Step()
                                .withName("uzowpuohdkcpr")
                                .withDescription("kxrzt")
                                .withErrorMessage("chlutixmqru")
                                .withStatus("izcbfzmcrunfhiuc")
                                .withStartTimeUtc(OffsetDateTime.parse("2021-10-12T05:29:04Z"))
                                .withEndTimeUtc(OffsetDateTime.parse("2021-07-28T03:39:03Z"))
                                .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-10-03T05:59:53Z"))
                                .withExpectedExecutionTime("ktkrumzuedky")
                                .withSteps(Arrays.asList(new Step()))))
                .create();

        Assertions.assertEquals("hffbxrq", response.location());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-21T04:38:39Z"), response.timeStarted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-11T11:24:24Z"), response.lastUpdatedTime());
        Assertions.assertEquals("sdxeqztvxwmwwmjs", response.duration());
        Assertions.assertEquals(UpdateRunPropertiesState.UNKNOWN, response.state());
        Assertions.assertEquals("wamec", response.namePropertiesName());
        Assertions.assertEquals("qioulndhzyoeojht", response.description());
        Assertions.assertEquals("lhsvidmytzlnglxp", response.errorMessage());
        Assertions.assertEquals("vyoanfbcswqagywv", response.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-10T03:07:09Z"), response.startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-15T12:25:34Z"), response.endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-25T14:12:39Z"), response.lastUpdatedTimeUtc());
        Assertions.assertEquals("tpgaeukya", response.expectedExecutionTime());
        Assertions.assertEquals("mwhqnucsklh", response.steps().get(0).name());
        Assertions.assertEquals("dsjtdlpbni", response.steps().get(0).description());
        Assertions.assertEquals("gazlsvbz", response.steps().get(0).errorMessage());
        Assertions.assertEquals("puoee", response.steps().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-21T07:05Z"), response.steps().get(0).startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-19T23:33:20Z"), response.steps().get(0).endTimeUtc());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-08-28T23:11:40Z"), response.steps().get(0).lastUpdatedTimeUtc());
        Assertions.assertEquals("hsy", response.steps().get(0).expectedExecutionTime());
    }
}
