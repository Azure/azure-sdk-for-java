// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.azurestackhci.AzurestackhciManager;
import com.azure.resourcemanager.azurestackhci.fluent.models.Step;
import com.azure.resourcemanager.azurestackhci.models.UpdateRun;
import com.azure.resourcemanager.azurestackhci.models.UpdateRunPropertiesState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class UpdateRunsPutWithResponseMockTests {
    @Test
    public void testPutWithResponse() throws Exception {
        String responseStr
            = "{\"location\":\"ybd\",\"properties\":{\"provisioningState\":\"PartiallySucceeded\",\"timeStarted\":\"2021-11-09T16:53:46Z\",\"lastUpdatedTime\":\"2021-08-06T22:20:48Z\",\"duration\":\"pkshlojermhzic\",\"state\":\"Failed\",\"progress\":{\"name\":\"hyaaknyukibxiglh\",\"description\":\"zwxqtejpii\",\"errorMessage\":\"vtozya\",\"status\":\"jnxkbylhyyxgffk\",\"startTimeUtc\":\"2021-01-18T03:54:21Z\",\"endTimeUtc\":\"2021-08-17T02:05:23Z\",\"lastUpdatedTimeUtc\":\"2021-02-19T03:39:25Z\",\"steps\":[{\"name\":\"cnvqeons\",\"description\":\"wxlwme\",\"errorMessage\":\"ohxp\",\"status\":\"ceopvk\",\"startTimeUtc\":\"2021-01-10T20:34:45Z\",\"endTimeUtc\":\"2021-06-26T09:45:37Z\",\"lastUpdatedTimeUtc\":\"2020-12-24T08:34:06Z\",\"steps\":[{},{},{}]},{\"name\":\"bokhmmlcdyarng\",\"description\":\"jf\",\"errorMessage\":\"lqhxkasmcolmu\",\"status\":\"yvaosdkluwz\",\"startTimeUtc\":\"2021-10-17T17:31:36Z\",\"endTimeUtc\":\"2021-09-08T15:56:22Z\",\"lastUpdatedTimeUtc\":\"2021-01-03T09:17:47Z\",\"steps\":[{},{},{}]},{\"name\":\"jhubno\",\"description\":\"uqisqsqkpd\",\"errorMessage\":\"oyjpnmlviqc\",\"status\":\"zp\",\"startTimeUtc\":\"2021-08-21T05:29:12Z\",\"endTimeUtc\":\"2021-10-28T20:53:10Z\",\"lastUpdatedTimeUtc\":\"2021-05-11T21:10:59Z\",\"steps\":[{},{}]},{\"name\":\"xyr\",\"description\":\"hgvqojbxaotcgbz\",\"errorMessage\":\"btplefoi\",\"status\":\"idoxznvgvdtmuuv\",\"startTimeUtc\":\"2021-09-15T17:51:28Z\",\"endTimeUtc\":\"2021-04-29T00:14:14Z\",\"lastUpdatedTimeUtc\":\"2021-11-16T09:18:54Z\",\"steps\":[{},{},{},{}]}]}},\"id\":\"knimxlp\",\"name\":\"erxrzutylcurza\",\"type\":\"mnb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzurestackhciManager manager = AzurestackhciManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        UpdateRun response = manager.updateRuns()
            .define("vkrbzkuastaxklpr")
            .withExistingUpdate("ucumlddauqml", "feothxu", "rigrjdljlkq")
            .withRegion("l")
            .withTimeStarted(OffsetDateTime.parse("2021-06-25T16:37:46Z"))
            .withLastUpdatedTime(OffsetDateTime.parse("2021-04-27T19:14:35Z"))
            .withDuration("vscksgfyys")
            .withState(UpdateRunPropertiesState.FAILED)
            .withNamePropertiesName("afxcz")
            .withDescription("cckwrtwle")
            .withErrorMessage("veszrtlhpdhw")
            .withStatus("ctac")
            .withStartTimeUtc(OffsetDateTime.parse("2021-06-05T22:05:52Z"))
            .withEndTimeUtc(OffsetDateTime.parse("2021-06-25T10:53:07Z"))
            .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-05-29T07:50:08Z"))
            .withSteps(Arrays.asList(new Step().withName("vjxitzovnkrt")
                .withDescription("lsmnihqlcoqksyi")
                .withErrorMessage("hyxwbgbud")
                .withStatus("qdo")
                .withStartTimeUtc(OffsetDateTime.parse("2021-01-04T17:04:45Z"))
                .withEndTimeUtc(OffsetDateTime.parse("2021-01-19T13:00:40Z"))
                .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-11-10T15:25:04Z"))
                .withSteps(Arrays.asList(new Step(), new Step(), new Step(), new Step()))))
            .create();

        Assertions.assertEquals("ybd", response.location());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-09T16:53:46Z"), response.timeStarted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-06T22:20:48Z"), response.lastUpdatedTime());
        Assertions.assertEquals("pkshlojermhzic", response.duration());
        Assertions.assertEquals(UpdateRunPropertiesState.FAILED, response.state());
        Assertions.assertEquals("hyaaknyukibxiglh", response.namePropertiesName());
        Assertions.assertEquals("zwxqtejpii", response.description());
        Assertions.assertEquals("vtozya", response.errorMessage());
        Assertions.assertEquals("jnxkbylhyyxgffk", response.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-18T03:54:21Z"), response.startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-17T02:05:23Z"), response.endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-19T03:39:25Z"), response.lastUpdatedTimeUtc());
        Assertions.assertEquals("cnvqeons", response.steps().get(0).name());
        Assertions.assertEquals("wxlwme", response.steps().get(0).description());
        Assertions.assertEquals("ohxp", response.steps().get(0).errorMessage());
        Assertions.assertEquals("ceopvk", response.steps().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-10T20:34:45Z"), response.steps().get(0).startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-26T09:45:37Z"), response.steps().get(0).endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-24T08:34:06Z"),
            response.steps().get(0).lastUpdatedTimeUtc());
    }
}
