// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.models.MachineExtensionUpdate;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MachineExtensionUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MachineExtensionUpdate model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"forceUpdateTag\":\"tfmpcycilrmcayk\",\"publisher\":\"noxuztrksx\",\"type\":\"ndfcpfn\",\"typeHandlerVersion\":\"thjtwk\",\"autoUpgradeMinorVersion\":true,\"settings\":\"datarxuzvoam\",\"protectedSettings\":\"datacqiosmgbza\"},\"tags\":{\"laprlt\":\"qdlyrtl\",\"nnbsoqeqa\":\"katbhjm\",\"febwlnbmhyreeudz\":\"arvlagunbt\",\"pdqmjxlyyzglgouw\":\"av\"}}")
                .toObject(MachineExtensionUpdate.class);
        Assertions.assertEquals("qdlyrtl", model.tags().get("laprlt"));
        Assertions.assertEquals("tfmpcycilrmcayk", model.forceUpdateTag());
        Assertions.assertEquals("noxuztrksx", model.publisher());
        Assertions.assertEquals("ndfcpfn", model.type());
        Assertions.assertEquals("thjtwk", model.typeHandlerVersion());
        Assertions.assertEquals(true, model.autoUpgradeMinorVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MachineExtensionUpdate model =
            new MachineExtensionUpdate()
                .withTags(
                    mapOf(
                        "laprlt",
                        "qdlyrtl",
                        "nnbsoqeqa",
                        "katbhjm",
                        "febwlnbmhyreeudz",
                        "arvlagunbt",
                        "pdqmjxlyyzglgouw",
                        "av"))
                .withForceUpdateTag("tfmpcycilrmcayk")
                .withPublisher("noxuztrksx")
                .withType("ndfcpfn")
                .withTypeHandlerVersion("thjtwk")
                .withAutoUpgradeMinorVersion(true)
                .withSettings("datarxuzvoam")
                .withProtectedSettings("datacqiosmgbza");
        model = BinaryData.fromObject(model).toObject(MachineExtensionUpdate.class);
        Assertions.assertEquals("qdlyrtl", model.tags().get("laprlt"));
        Assertions.assertEquals("tfmpcycilrmcayk", model.forceUpdateTag());
        Assertions.assertEquals("noxuztrksx", model.publisher());
        Assertions.assertEquals("ndfcpfn", model.type());
        Assertions.assertEquals("thjtwk", model.typeHandlerVersion());
        Assertions.assertEquals(true, model.autoUpgradeMinorVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
