// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.azurestackhci.AzureStackHciManager;
import com.azure.resourcemanager.azurestackhci.models.ArcSetting;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ArcSettingsCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Moving\",\"arcInstanceResourceGroup\":\"im\",\"arcApplicationClientId\":\"zovgkkumuikj\",\"arcApplicationTenantId\":\"cazt\",\"arcServicePrincipalObjectId\":\"snsqowxwcoml\",\"arcApplicationObjectId\":\"ytwvczcswkacve\",\"aggregateState\":\"Creating\",\"perNodeDetails\":[{\"name\":\"vhb\",\"arcInstance\":\"nfxtgdd\",\"state\":\"NotSpecified\"},{\"name\":\"ehnmnaoyankco\",\"arcInstance\":\"swankltytmh\",\"state\":\"Canceled\"},{\"name\":\"nnhdrl\",\"arcInstance\":\"gjc\",\"state\":\"Provisioning\"},{\"name\":\"xhem\",\"arcInstance\":\"ywaeeczgf\",\"state\":\"Deleting\"}],\"connectivityProperties\":\"datalelssxblycsxzujk\",\"defaultExtensions\":[{\"category\":\"mdesqp\",\"consentTime\":\"2021-10-04T15:47:11Z\"},{\"category\":\"jcdoewb\",\"consentTime\":\"2021-03-14T15:25:21Z\"},{\"category\":\"t\",\"consentTime\":\"2021-03-16T10:14:22Z\"},{\"category\":\"vgp\",\"consentTime\":\"2021-10-23T07:47:56Z\"}]},\"id\":\"ugfsxzecpaxwk\",\"name\":\"fykhvuhxepmru\",\"type\":\"znabaobns\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AzureStackHciManager manager =
            AzureStackHciManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ArcSetting response =
            manager
                .arcSettings()
                .define("fiqgeaar")
                .withExistingCluster("vlnnpx", "b")
                .withArcInstanceResourceGroup("glklb")
                .withArcApplicationClientId("lidwcwvmzegjon")
                .withArcApplicationTenantId("jirwgdnqzbrfk")
                .withArcServicePrincipalObjectId("zhzmtksjci")
                .withArcApplicationObjectId("igsxcdgljplk")
                .withConnectivityProperties("datapxdlv")
                .create();

        Assertions.assertEquals("im", response.arcInstanceResourceGroup());
        Assertions.assertEquals("zovgkkumuikj", response.arcApplicationClientId());
        Assertions.assertEquals("cazt", response.arcApplicationTenantId());
        Assertions.assertEquals("snsqowxwcoml", response.arcServicePrincipalObjectId());
        Assertions.assertEquals("ytwvczcswkacve", response.arcApplicationObjectId());
    }
}
