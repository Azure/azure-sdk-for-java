// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.azurestackhci.AzureStackHciManager;
import com.azure.resourcemanager.azurestackhci.models.UpdateRun;
import com.azure.resourcemanager.azurestackhci.models.UpdateRunPropertiesState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class UpdateRunsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"location\":\"zp\",\"properties\":{\"provisioningState\":\"Error\",\"timeStarted\":\"2021-01-13T01:59Z\",\"lastUpdatedTime\":\"2021-06-28T12:13:46Z\",\"duration\":\"qbmfuvqarwz\",\"state\":\"Succeeded\",\"progress\":{\"name\":\"bluimmbw\",\"description\":\"fgtdmbvx\",\"errorMessage\":\"raokqkbudb\",\"status\":\"aokbavlyttaaknwf\",\"startTimeUtc\":\"2021-02-12T11:03:46Z\",\"endTimeUtc\":\"2021-07-02T12:02:17Z\",\"lastUpdatedTimeUtc\":\"2021-02-12T16:09:26Z\",\"expectedExecutionTime\":\"dujdigatoleksc\",\"steps\":[{\"name\":\"anqimwbzxpdcl\",\"description\":\"ka\",\"errorMessage\":\"snlaimoux\",\"status\":\"sqmu\",\"startTimeUtc\":\"2021-01-31T10:29:12Z\",\"endTimeUtc\":\"2021-11-13T03:41:22Z\",\"lastUpdatedTimeUtc\":\"2021-07-07T12:40:06Z\",\"expectedExecutionTime\":\"cziu\",\"steps\":[{}]},{\"name\":\"jrkbqsjhbtqqvyfs\",\"description\":\"rfwb\",\"errorMessage\":\"qvogfuyz\",\"status\":\"bhli\",\"startTimeUtc\":\"2021-01-27T19:28:49Z\",\"endTimeUtc\":\"2021-04-14T18:38:04Z\",\"lastUpdatedTimeUtc\":\"2020-12-21T08:41:08Z\",\"expectedExecutionTime\":\"odlikcdrdaasax\",\"steps\":[{},{},{}]},{\"name\":\"mfkwiyjvzuk\",\"description\":\"r\",\"errorMessage\":\"wnvz\",\"status\":\"n\",\"startTimeUtc\":\"2021-02-18T23:03:38Z\",\"endTimeUtc\":\"2021-05-19T01:26:48Z\",\"lastUpdatedTimeUtc\":\"2021-06-21T01:56:01Z\",\"expectedExecutionTime\":\"abjqqaxuyvymcnud\",\"steps\":[{},{},{},{}]}]}},\"id\":\"abhjx\",\"name\":\"xqweu\",\"type\":\"pmpvks\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AzureStackHciManager manager =
            AzureStackHciManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        UpdateRun response =
            manager
                .updateRuns()
                .getWithResponse("svtzarhzv", "nsqktc", "bjwzzos", "pkybtgl", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("zp", response.location());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-13T01:59Z"), response.timeStarted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-28T12:13:46Z"), response.lastUpdatedTime());
        Assertions.assertEquals("qbmfuvqarwz", response.duration());
        Assertions.assertEquals(UpdateRunPropertiesState.SUCCEEDED, response.state());
        Assertions.assertEquals("bluimmbw", response.namePropertiesName());
        Assertions.assertEquals("fgtdmbvx", response.description());
        Assertions.assertEquals("raokqkbudb", response.errorMessage());
        Assertions.assertEquals("aokbavlyttaaknwf", response.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-12T11:03:46Z"), response.startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-02T12:02:17Z"), response.endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-12T16:09:26Z"), response.lastUpdatedTimeUtc());
        Assertions.assertEquals("dujdigatoleksc", response.expectedExecutionTime());
        Assertions.assertEquals("anqimwbzxpdcl", response.steps().get(0).name());
        Assertions.assertEquals("ka", response.steps().get(0).description());
        Assertions.assertEquals("snlaimoux", response.steps().get(0).errorMessage());
        Assertions.assertEquals("sqmu", response.steps().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-31T10:29:12Z"), response.steps().get(0).startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-13T03:41:22Z"), response.steps().get(0).endTimeUtc());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-07-07T12:40:06Z"), response.steps().get(0).lastUpdatedTimeUtc());
        Assertions.assertEquals("cziu", response.steps().get(0).expectedExecutionTime());
    }
}
