// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.models.DeploymentSettingStorageAdapterIpInfo;
import com.azure.resourcemanager.azurestackhci.models.DeploymentSettingStorageNetworks;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DeploymentSettingStorageNetworksTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DeploymentSettingStorageNetworks model = BinaryData.fromString(
            "{\"name\":\"hfwdsjnkaljutiis\",\"networkAdapterName\":\"cffgdkzzewk\",\"vlanId\":\"hqcrailvpnpp\",\"storageAdapterIPInfo\":[{\"physicalNode\":\"rwdmhdlxyjrxsa\",\"ipv4Address\":\"fcnihgwq\",\"subnetMask\":\"nedgfbc\"},{\"physicalNode\":\"cvqvpkeqdcv\",\"ipv4Address\":\"hvoodsotbobzd\",\"subnetMask\":\"cjwvn\"}]}")
            .toObject(DeploymentSettingStorageNetworks.class);
        Assertions.assertEquals("hfwdsjnkaljutiis", model.name());
        Assertions.assertEquals("cffgdkzzewk", model.networkAdapterName());
        Assertions.assertEquals("hqcrailvpnpp", model.vlanId());
        Assertions.assertEquals("rwdmhdlxyjrxsa", model.storageAdapterIpInfo().get(0).physicalNode());
        Assertions.assertEquals("fcnihgwq", model.storageAdapterIpInfo().get(0).ipv4Address());
        Assertions.assertEquals("nedgfbc", model.storageAdapterIpInfo().get(0).subnetMask());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DeploymentSettingStorageNetworks model = new DeploymentSettingStorageNetworks().withName("hfwdsjnkaljutiis")
            .withNetworkAdapterName("cffgdkzzewk")
            .withVlanId("hqcrailvpnpp")
            .withStorageAdapterIpInfo(Arrays.asList(
                new DeploymentSettingStorageAdapterIpInfo().withPhysicalNode("rwdmhdlxyjrxsa")
                    .withIpv4Address("fcnihgwq")
                    .withSubnetMask("nedgfbc"),
                new DeploymentSettingStorageAdapterIpInfo().withPhysicalNode("cvqvpkeqdcv")
                    .withIpv4Address("hvoodsotbobzd")
                    .withSubnetMask("cjwvn")));
        model = BinaryData.fromObject(model).toObject(DeploymentSettingStorageNetworks.class);
        Assertions.assertEquals("hfwdsjnkaljutiis", model.name());
        Assertions.assertEquals("cffgdkzzewk", model.networkAdapterName());
        Assertions.assertEquals("hqcrailvpnpp", model.vlanId());
        Assertions.assertEquals("rwdmhdlxyjrxsa", model.storageAdapterIpInfo().get(0).physicalNode());
        Assertions.assertEquals("fcnihgwq", model.storageAdapterIpInfo().get(0).ipv4Address());
        Assertions.assertEquals("nedgfbc", model.storageAdapterIpInfo().get(0).subnetMask());
    }
}
