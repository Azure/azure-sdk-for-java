// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.fluent.models.Step;
import com.azure.resourcemanager.azurestackhci.fluent.models.UpdateRunInner;
import com.azure.resourcemanager.azurestackhci.models.UpdateRunPropertiesState;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class UpdateRunInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UpdateRunInner model =
            BinaryData
                .fromString(
                    "{\"location\":\"imwkslircizj\",\"properties\":{\"provisioningState\":\"Deleting\",\"timeStarted\":\"2021-07-27T07:50:33Z\",\"lastUpdatedTime\":\"2021-05-13T20:28:36Z\",\"duration\":\"vlhv\",\"state\":\"InProgress\",\"progress\":{\"name\":\"t\",\"description\":\"rtwnawjslbi\",\"errorMessage\":\"ojgcyzt\",\"status\":\"mznbaeqphch\",\"startTimeUtc\":\"2021-04-02T03:59:03Z\",\"endTimeUtc\":\"2021-10-09T00:59:13Z\",\"lastUpdatedTimeUtc\":\"2021-07-24T02:25:51Z\",\"expectedExecutionTime\":\"huwrykqgaifm\",\"steps\":[{\"name\":\"bydvkhbejdz\",\"description\":\"cvdsrhnj\",\"errorMessage\":\"olvtnovqfzge\",\"status\":\"dftuljltduce\",\"startTimeUtc\":\"2021-10-12T05:01:48Z\",\"endTimeUtc\":\"2021-08-03T19:11:02Z\",\"lastUpdatedTimeUtc\":\"2021-01-22T15:39:19Z\",\"expectedExecutionTime\":\"m\",\"steps\":[{}]},{\"name\":\"w\",\"description\":\"ioknssxmoj\",\"errorMessage\":\"vpkjpr\",\"status\":\"wcfzqljyxgt\",\"startTimeUtc\":\"2021-11-26T00:09:31Z\",\"endTimeUtc\":\"2021-04-06T06:50:38Z\",\"lastUpdatedTimeUtc\":\"2021-08-28T12:38:41Z\",\"expectedExecutionTime\":\"dshmkxmaehvbbx\",\"steps\":[{}]}]}},\"id\":\"pltfnhtba\",\"name\":\"kgxywr\",\"type\":\"kpyklyhp\"}")
                .toObject(UpdateRunInner.class);
        Assertions.assertEquals("imwkslircizj", model.location());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-27T07:50:33Z"), model.timeStarted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-13T20:28:36Z"), model.lastUpdatedTime());
        Assertions.assertEquals("vlhv", model.duration());
        Assertions.assertEquals(UpdateRunPropertiesState.IN_PROGRESS, model.state());
        Assertions.assertEquals("t", model.namePropertiesName());
        Assertions.assertEquals("rtwnawjslbi", model.description());
        Assertions.assertEquals("ojgcyzt", model.errorMessage());
        Assertions.assertEquals("mznbaeqphch", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-02T03:59:03Z"), model.startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-09T00:59:13Z"), model.endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-24T02:25:51Z"), model.lastUpdatedTimeUtc());
        Assertions.assertEquals("huwrykqgaifm", model.expectedExecutionTime());
        Assertions.assertEquals("bydvkhbejdz", model.steps().get(0).name());
        Assertions.assertEquals("cvdsrhnj", model.steps().get(0).description());
        Assertions.assertEquals("olvtnovqfzge", model.steps().get(0).errorMessage());
        Assertions.assertEquals("dftuljltduce", model.steps().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-12T05:01:48Z"), model.steps().get(0).startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-03T19:11:02Z"), model.steps().get(0).endTimeUtc());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-01-22T15:39:19Z"), model.steps().get(0).lastUpdatedTimeUtc());
        Assertions.assertEquals("m", model.steps().get(0).expectedExecutionTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UpdateRunInner model =
            new UpdateRunInner()
                .withLocation("imwkslircizj")
                .withTimeStarted(OffsetDateTime.parse("2021-07-27T07:50:33Z"))
                .withLastUpdatedTime(OffsetDateTime.parse("2021-05-13T20:28:36Z"))
                .withDuration("vlhv")
                .withState(UpdateRunPropertiesState.IN_PROGRESS)
                .withNamePropertiesName("t")
                .withDescription("rtwnawjslbi")
                .withErrorMessage("ojgcyzt")
                .withStatus("mznbaeqphch")
                .withStartTimeUtc(OffsetDateTime.parse("2021-04-02T03:59:03Z"))
                .withEndTimeUtc(OffsetDateTime.parse("2021-10-09T00:59:13Z"))
                .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-07-24T02:25:51Z"))
                .withExpectedExecutionTime("huwrykqgaifm")
                .withSteps(
                    Arrays
                        .asList(
                            new Step()
                                .withName("bydvkhbejdz")
                                .withDescription("cvdsrhnj")
                                .withErrorMessage("olvtnovqfzge")
                                .withStatus("dftuljltduce")
                                .withStartTimeUtc(OffsetDateTime.parse("2021-10-12T05:01:48Z"))
                                .withEndTimeUtc(OffsetDateTime.parse("2021-08-03T19:11:02Z"))
                                .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-01-22T15:39:19Z"))
                                .withExpectedExecutionTime("m")
                                .withSteps(Arrays.asList(new Step())),
                            new Step()
                                .withName("w")
                                .withDescription("ioknssxmoj")
                                .withErrorMessage("vpkjpr")
                                .withStatus("wcfzqljyxgt")
                                .withStartTimeUtc(OffsetDateTime.parse("2021-11-26T00:09:31Z"))
                                .withEndTimeUtc(OffsetDateTime.parse("2021-04-06T06:50:38Z"))
                                .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-08-28T12:38:41Z"))
                                .withExpectedExecutionTime("dshmkxmaehvbbx")
                                .withSteps(Arrays.asList(new Step()))));
        model = BinaryData.fromObject(model).toObject(UpdateRunInner.class);
        Assertions.assertEquals("imwkslircizj", model.location());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-27T07:50:33Z"), model.timeStarted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-13T20:28:36Z"), model.lastUpdatedTime());
        Assertions.assertEquals("vlhv", model.duration());
        Assertions.assertEquals(UpdateRunPropertiesState.IN_PROGRESS, model.state());
        Assertions.assertEquals("t", model.namePropertiesName());
        Assertions.assertEquals("rtwnawjslbi", model.description());
        Assertions.assertEquals("ojgcyzt", model.errorMessage());
        Assertions.assertEquals("mznbaeqphch", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-02T03:59:03Z"), model.startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-09T00:59:13Z"), model.endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-24T02:25:51Z"), model.lastUpdatedTimeUtc());
        Assertions.assertEquals("huwrykqgaifm", model.expectedExecutionTime());
        Assertions.assertEquals("bydvkhbejdz", model.steps().get(0).name());
        Assertions.assertEquals("cvdsrhnj", model.steps().get(0).description());
        Assertions.assertEquals("olvtnovqfzge", model.steps().get(0).errorMessage());
        Assertions.assertEquals("dftuljltduce", model.steps().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-12T05:01:48Z"), model.steps().get(0).startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-03T19:11:02Z"), model.steps().get(0).endTimeUtc());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-01-22T15:39:19Z"), model.steps().get(0).lastUpdatedTimeUtc());
        Assertions.assertEquals("m", model.steps().get(0).expectedExecutionTime());
    }
}
