// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.fluent.models.Step;
import com.azure.resourcemanager.azurestackhci.fluent.models.UpdateRunInner;
import com.azure.resourcemanager.azurestackhci.models.UpdateRunPropertiesState;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class UpdateRunInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UpdateRunInner model = BinaryData.fromString(
            "{\"location\":\"qmeqwigpibudqwyx\",\"properties\":{\"provisioningState\":\"InProgress\",\"timeStarted\":\"2021-06-11T15:08:27Z\",\"lastUpdatedTime\":\"2021-03-14T02:43:50Z\",\"duration\":\"nrtffyaqi\",\"state\":\"Failed\",\"progress\":{\"name\":\"ioqaqhvs\",\"description\":\"fuqyrxpdlcgqlsi\",\"errorMessage\":\"jqfrddgamquh\",\"status\":\"srsjuivfc\",\"startTimeUtc\":\"2021-02-02T15:06:24Z\",\"endTimeUtc\":\"2021-08-07T02:17:36Z\",\"lastUpdatedTimeUtc\":\"2021-01-27T18:11:59Z\",\"expectedExecutionTime\":\"zhczexrxzbujrtrh\",\"steps\":[{\"name\":\"evkh\",\"description\":\"lnzonzlrpiqywn\",\"errorMessage\":\"jtszcof\",\"status\":\"e\",\"startTimeUtc\":\"2021-11-08T03:11:49Z\",\"endTimeUtc\":\"2021-07-02T17:33:01Z\",\"lastUpdatedTimeUtc\":\"2021-11-22T18:06:29Z\",\"expectedExecutionTime\":\"vreljea\",\"steps\":[{},{},{}]},{\"name\":\"zmlovuanash\",\"description\":\"lpmjerb\",\"errorMessage\":\"elvidizozsdbccx\",\"status\":\"on\",\"startTimeUtc\":\"2021-06-26T18:58:09Z\",\"endTimeUtc\":\"2021-08-14T04:15:27Z\",\"lastUpdatedTimeUtc\":\"2021-05-09T18:26:05Z\",\"expectedExecutionTime\":\"puuw\",\"steps\":[{},{},{},{}]},{\"name\":\"uqj\",\"description\":\"zenkeifzzhmkd\",\"errorMessage\":\"vflyhbxcu\",\"status\":\"hxgsrboldfor\",\"startTimeUtc\":\"2020-12-20T04:35:15Z\",\"endTimeUtc\":\"2021-06-11T04:52:49Z\",\"lastUpdatedTimeUtc\":\"2021-02-10T16:46:43Z\",\"expectedExecutionTime\":\"bfhfovvacqp\",\"steps\":[{},{}]},{\"name\":\"dxe\",\"description\":\"abbelawumuaslzk\",\"errorMessage\":\"rwoycqucwyh\",\"status\":\"nomdrkywuhpsv\",\"startTimeUtc\":\"2021-05-26T05:35:58Z\",\"endTimeUtc\":\"2021-01-31T05:51:43Z\",\"lastUpdatedTimeUtc\":\"2021-08-15T09:05:35Z\",\"expectedExecutionTime\":\"exxwlalniexzsrz\",\"steps\":[{},{}]}]}},\"id\":\"q\",\"name\":\"yb\",\"type\":\"wwpgdakchzyvlixq\"}")
            .toObject(UpdateRunInner.class);
        Assertions.assertEquals("qmeqwigpibudqwyx", model.location());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-11T15:08:27Z"), model.timeStarted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-14T02:43:50Z"), model.lastUpdatedTime());
        Assertions.assertEquals("nrtffyaqi", model.duration());
        Assertions.assertEquals(UpdateRunPropertiesState.FAILED, model.state());
        Assertions.assertEquals("ioqaqhvs", model.namePropertiesName());
        Assertions.assertEquals("fuqyrxpdlcgqlsi", model.description());
        Assertions.assertEquals("jqfrddgamquh", model.errorMessage());
        Assertions.assertEquals("srsjuivfc", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-02T15:06:24Z"), model.startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-07T02:17:36Z"), model.endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-27T18:11:59Z"), model.lastUpdatedTimeUtc());
        Assertions.assertEquals("zhczexrxzbujrtrh", model.expectedExecutionTime());
        Assertions.assertEquals("evkh", model.steps().get(0).name());
        Assertions.assertEquals("lnzonzlrpiqywn", model.steps().get(0).description());
        Assertions.assertEquals("jtszcof", model.steps().get(0).errorMessage());
        Assertions.assertEquals("e", model.steps().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-08T03:11:49Z"), model.steps().get(0).startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-02T17:33:01Z"), model.steps().get(0).endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-22T18:06:29Z"),
            model.steps().get(0).lastUpdatedTimeUtc());
        Assertions.assertEquals("vreljea", model.steps().get(0).expectedExecutionTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UpdateRunInner model = new UpdateRunInner().withLocation("qmeqwigpibudqwyx")
            .withTimeStarted(OffsetDateTime.parse("2021-06-11T15:08:27Z"))
            .withLastUpdatedTime(OffsetDateTime.parse("2021-03-14T02:43:50Z"))
            .withDuration("nrtffyaqi")
            .withState(UpdateRunPropertiesState.FAILED)
            .withNamePropertiesName("ioqaqhvs")
            .withDescription("fuqyrxpdlcgqlsi")
            .withErrorMessage("jqfrddgamquh")
            .withStatus("srsjuivfc")
            .withStartTimeUtc(OffsetDateTime.parse("2021-02-02T15:06:24Z"))
            .withEndTimeUtc(OffsetDateTime.parse("2021-08-07T02:17:36Z"))
            .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-01-27T18:11:59Z"))
            .withExpectedExecutionTime("zhczexrxzbujrtrh")
            .withSteps(Arrays.asList(
                new Step().withName("evkh")
                    .withDescription("lnzonzlrpiqywn")
                    .withErrorMessage("jtszcof")
                    .withStatus("e")
                    .withStartTimeUtc(OffsetDateTime.parse("2021-11-08T03:11:49Z"))
                    .withEndTimeUtc(OffsetDateTime.parse("2021-07-02T17:33:01Z"))
                    .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-11-22T18:06:29Z"))
                    .withExpectedExecutionTime("vreljea")
                    .withSteps(Arrays.asList(new Step(), new Step(), new Step())),
                new Step().withName("zmlovuanash")
                    .withDescription("lpmjerb")
                    .withErrorMessage("elvidizozsdbccx")
                    .withStatus("on")
                    .withStartTimeUtc(OffsetDateTime.parse("2021-06-26T18:58:09Z"))
                    .withEndTimeUtc(OffsetDateTime.parse("2021-08-14T04:15:27Z"))
                    .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-05-09T18:26:05Z"))
                    .withExpectedExecutionTime("puuw")
                    .withSteps(Arrays.asList(new Step(), new Step(), new Step(), new Step())),
                new Step().withName("uqj")
                    .withDescription("zenkeifzzhmkd")
                    .withErrorMessage("vflyhbxcu")
                    .withStatus("hxgsrboldfor")
                    .withStartTimeUtc(OffsetDateTime.parse("2020-12-20T04:35:15Z"))
                    .withEndTimeUtc(OffsetDateTime.parse("2021-06-11T04:52:49Z"))
                    .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-02-10T16:46:43Z"))
                    .withExpectedExecutionTime("bfhfovvacqp")
                    .withSteps(Arrays.asList(new Step(), new Step())),
                new Step().withName("dxe")
                    .withDescription("abbelawumuaslzk")
                    .withErrorMessage("rwoycqucwyh")
                    .withStatus("nomdrkywuhpsv")
                    .withStartTimeUtc(OffsetDateTime.parse("2021-05-26T05:35:58Z"))
                    .withEndTimeUtc(OffsetDateTime.parse("2021-01-31T05:51:43Z"))
                    .withLastUpdatedTimeUtc(OffsetDateTime.parse("2021-08-15T09:05:35Z"))
                    .withExpectedExecutionTime("exxwlalniexzsrz")
                    .withSteps(Arrays.asList(new Step(), new Step()))));
        model = BinaryData.fromObject(model).toObject(UpdateRunInner.class);
        Assertions.assertEquals("qmeqwigpibudqwyx", model.location());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-11T15:08:27Z"), model.timeStarted());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-14T02:43:50Z"), model.lastUpdatedTime());
        Assertions.assertEquals("nrtffyaqi", model.duration());
        Assertions.assertEquals(UpdateRunPropertiesState.FAILED, model.state());
        Assertions.assertEquals("ioqaqhvs", model.namePropertiesName());
        Assertions.assertEquals("fuqyrxpdlcgqlsi", model.description());
        Assertions.assertEquals("jqfrddgamquh", model.errorMessage());
        Assertions.assertEquals("srsjuivfc", model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-02T15:06:24Z"), model.startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-07T02:17:36Z"), model.endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-27T18:11:59Z"), model.lastUpdatedTimeUtc());
        Assertions.assertEquals("zhczexrxzbujrtrh", model.expectedExecutionTime());
        Assertions.assertEquals("evkh", model.steps().get(0).name());
        Assertions.assertEquals("lnzonzlrpiqywn", model.steps().get(0).description());
        Assertions.assertEquals("jtszcof", model.steps().get(0).errorMessage());
        Assertions.assertEquals("e", model.steps().get(0).status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-08T03:11:49Z"), model.steps().get(0).startTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-02T17:33:01Z"), model.steps().get(0).endTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-22T18:06:29Z"),
            model.steps().get(0).lastUpdatedTimeUtc());
        Assertions.assertEquals("vreljea", model.steps().get(0).expectedExecutionTime());
    }
}
