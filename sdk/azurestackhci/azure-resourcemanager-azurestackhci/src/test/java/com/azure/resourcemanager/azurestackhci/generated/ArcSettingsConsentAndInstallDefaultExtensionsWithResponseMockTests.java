// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.azurestackhci.AzureStackHciManager;
import com.azure.resourcemanager.azurestackhci.models.ArcSetting;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ArcSettingsConsentAndInstallDefaultExtensionsWithResponseMockTests {
    @Test
    public void testConsentAndInstallDefaultExtensionsWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Provisioning\",\"arcInstanceResourceGroup\":\"lxrzvhqjwtr\",\"arcApplicationClientId\":\"gv\",\"arcApplicationTenantId\":\"pcrrk\",\"arcServicePrincipalObjectId\":\"awjmjsmw\",\"arcApplicationObjectId\":\"kcdxfzzzw\",\"aggregateState\":\"Canceled\",\"perNodeDetails\":[{\"name\":\"lhguyn\",\"arcInstance\":\"hlgmltxdwhmoz\",\"state\":\"PartiallySucceeded\"},{\"name\":\"vlnsnnjz\",\"arcInstance\":\"afolpymwamxqzrag\",\"state\":\"Deleting\"}],\"connectivityProperties\":\"datahtvdula\",\"defaultExtensions\":[{\"category\":\"jchcsrlzknmzla\",\"consentTime\":\"2021-01-20T21:47:05Z\"},{\"category\":\"dwv\",\"consentTime\":\"2021-01-11T07:54:11Z\"}]},\"id\":\"nzqtpjhmqrhvt\",\"name\":\"laiwdcxsmlzzh\",\"type\":\"dtxetlgydlh\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AzureStackHciManager manager =
            AzureStackHciManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ArcSetting response =
            manager
                .arcSettings()
                .consentAndInstallDefaultExtensionsWithResponse(
                    "c", "jikzoeovvtzej", "tjklntikyjuzk", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("lxrzvhqjwtr", response.arcInstanceResourceGroup());
        Assertions.assertEquals("gv", response.arcApplicationClientId());
        Assertions.assertEquals("pcrrk", response.arcApplicationTenantId());
        Assertions.assertEquals("awjmjsmw", response.arcServicePrincipalObjectId());
        Assertions.assertEquals("kcdxfzzzw", response.arcApplicationObjectId());
    }
}
