// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.models.IpConfigurationProperties;
import com.azure.resourcemanager.azurestackhci.models.IpConfigurationPropertiesSubnet;
import com.azure.resourcemanager.azurestackhci.models.PrivateIpAllocationMethodEnum;
import org.junit.jupiter.api.Assertions;

public final class IpConfigurationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IpConfigurationProperties model =
            BinaryData
                .fromString(
                    "{\"gateway\":\"f\",\"prefixLength\":\"hqkvpuvksgplsak\",\"privateIPAddress\":\"n\",\"privateIPAllocationMethod\":\"Dynamic\",\"subnet\":{\"id\":\"jphuopxodlqi\"}}")
                .toObject(IpConfigurationProperties.class);
        Assertions.assertEquals("f", model.gateway());
        Assertions.assertEquals("hqkvpuvksgplsak", model.prefixLength());
        Assertions.assertEquals("n", model.privateIpAddress());
        Assertions.assertEquals(PrivateIpAllocationMethodEnum.DYNAMIC, model.privateIpAllocationMethod());
        Assertions.assertEquals("jphuopxodlqi", model.subnet().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IpConfigurationProperties model =
            new IpConfigurationProperties()
                .withGateway("f")
                .withPrefixLength("hqkvpuvksgplsak")
                .withPrivateIpAddress("n")
                .withPrivateIpAllocationMethod(PrivateIpAllocationMethodEnum.DYNAMIC)
                .withSubnet(new IpConfigurationPropertiesSubnet().withId("jphuopxodlqi"));
        model = BinaryData.fromObject(model).toObject(IpConfigurationProperties.class);
        Assertions.assertEquals("f", model.gateway());
        Assertions.assertEquals("hqkvpuvksgplsak", model.prefixLength());
        Assertions.assertEquals("n", model.privateIpAddress());
        Assertions.assertEquals(PrivateIpAllocationMethodEnum.DYNAMIC, model.privateIpAllocationMethod());
        Assertions.assertEquals("jphuopxodlqi", model.subnet().id());
    }
}
