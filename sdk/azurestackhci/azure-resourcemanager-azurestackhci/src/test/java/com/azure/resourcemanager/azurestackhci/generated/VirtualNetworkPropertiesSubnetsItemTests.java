// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azurestackhci.models.ComponentsI4F0MhSchemasVirtualnetworkpropertiesPropertiesSubnetsItemsPropertiesRoutetable;
import com.azure.resourcemanager.azurestackhci.models.IpAllocationMethodEnum;
import com.azure.resourcemanager.azurestackhci.models.IpPool;
import com.azure.resourcemanager.azurestackhci.models.IpPoolInfo;
import com.azure.resourcemanager.azurestackhci.models.IpPoolTypeEnum;
import com.azure.resourcemanager.azurestackhci.models.VirtualNetworkPropertiesSubnetsItem;
import com.azure.resourcemanager.azurestackhci.models.VirtualNetworkPropertiesSubnetsItemAutoGeneratedIpConfigurationReference;
import com.azure.resourcemanager.azurestackhci.models.VirtualNetworkPropertiesSubnetsPropertiesItemsItem;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualNetworkPropertiesSubnetsItemTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualNetworkPropertiesSubnetsItem model =
            BinaryData
                .fromString(
                    "{\"name\":\"qtobkauxo\",\"properties\":{\"addressPrefix\":\"fphwpnu\",\"addressPrefixes\":[\"ywzejywhslw\",\"ojpllndnpdwrpqaf\"],\"ipAllocationMethod\":\"Dynamic\",\"ipConfigurationReferences\":[{\"ID\":\"n\"},{\"ID\":\"yetefyp\"},{\"ID\":\"octfjgtixrjvzuyt\"}],\"routeTable\":{\"id\":\"lmuowo\",\"name\":\"au\",\"properties\":{\"routes\":[{\"name\":\"ons\",\"properties\":{}}]},\"type\":\"wpng\"},\"ipPools\":[{\"ipPoolType\":\"vippool\",\"start\":\"xjawrt\",\"end\":\"fjmyccxlzhco\",\"info\":{\"used\":\"nekhenlusfnrdtj\",\"available\":\"xrdcqtj\"}},{\"ipPoolType\":\"vm\",\"start\":\"tgepuslvyjtcvuwk\",\"end\":\"iziesfuughtuq\",\"info\":{\"used\":\"jxeygtuhxu\",\"available\":\"buew\"}},{\"ipPoolType\":\"vm\",\"start\":\"njlx\",\"end\":\"rhwpus\",\"info\":{\"used\":\"aqehg\",\"available\":\"ohzjqatucoigeb\"}},{\"ipPoolType\":\"vippool\",\"start\":\"wfepbnwgfmx\",\"end\":\"cgbjbgdlfgt\",\"info\":{\"used\":\"naquflq\",\"available\":\"tqhamzjrw\"}}],\"vlan\":1989079400}}")
                .toObject(VirtualNetworkPropertiesSubnetsItem.class);
        Assertions.assertEquals("qtobkauxo", model.name());
        Assertions.assertEquals("fphwpnu", model.addressPrefix());
        Assertions.assertEquals("ywzejywhslw", model.addressPrefixes().get(0));
        Assertions.assertEquals(IpAllocationMethodEnum.DYNAMIC, model.ipAllocationMethod());
        Assertions.assertEquals("n", model.ipConfigurationReferences().get(0).id());
        Assertions.assertEquals("lmuowo", model.routeTable().id());
        Assertions.assertEquals("au", model.routeTable().name());
        Assertions.assertEquals("wpng", model.routeTable().type());
        Assertions.assertEquals("ons", model.routeTable().routes().get(0).name());
        Assertions.assertEquals(IpPoolTypeEnum.VIPPOOL, model.ipPools().get(0).ipPoolType());
        Assertions.assertEquals("xjawrt", model.ipPools().get(0).start());
        Assertions.assertEquals("fjmyccxlzhco", model.ipPools().get(0).end());
        Assertions.assertEquals(1989079400, model.vlan());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualNetworkPropertiesSubnetsItem model =
            new VirtualNetworkPropertiesSubnetsItem()
                .withName("qtobkauxo")
                .withAddressPrefix("fphwpnu")
                .withAddressPrefixes(Arrays.asList("ywzejywhslw", "ojpllndnpdwrpqaf"))
                .withIpAllocationMethod(IpAllocationMethodEnum.DYNAMIC)
                .withIpConfigurationReferences(
                    Arrays
                        .asList(
                            new VirtualNetworkPropertiesSubnetsItemAutoGeneratedIpConfigurationReference().withId("n"),
                            new VirtualNetworkPropertiesSubnetsItemAutoGeneratedIpConfigurationReference()
                                .withId("yetefyp"),
                            new VirtualNetworkPropertiesSubnetsItemAutoGeneratedIpConfigurationReference()
                                .withId("octfjgtixrjvzuyt")))
                .withRouteTable(
                    new ComponentsI4F0MhSchemasVirtualnetworkpropertiesPropertiesSubnetsItemsPropertiesRoutetable()
                        .withId("lmuowo")
                        .withName("au")
                        .withType("wpng")
                        .withRoutes(
                            Arrays.asList(new VirtualNetworkPropertiesSubnetsPropertiesItemsItem().withName("ons"))))
                .withIpPools(
                    Arrays
                        .asList(
                            new IpPool()
                                .withIpPoolType(IpPoolTypeEnum.VIPPOOL)
                                .withStart("xjawrt")
                                .withEnd("fjmyccxlzhco")
                                .withInfo(new IpPoolInfo()),
                            new IpPool()
                                .withIpPoolType(IpPoolTypeEnum.VM)
                                .withStart("tgepuslvyjtcvuwk")
                                .withEnd("iziesfuughtuq")
                                .withInfo(new IpPoolInfo()),
                            new IpPool()
                                .withIpPoolType(IpPoolTypeEnum.VM)
                                .withStart("njlx")
                                .withEnd("rhwpus")
                                .withInfo(new IpPoolInfo()),
                            new IpPool()
                                .withIpPoolType(IpPoolTypeEnum.VIPPOOL)
                                .withStart("wfepbnwgfmx")
                                .withEnd("cgbjbgdlfgt")
                                .withInfo(new IpPoolInfo())))
                .withVlan(1989079400);
        model = BinaryData.fromObject(model).toObject(VirtualNetworkPropertiesSubnetsItem.class);
        Assertions.assertEquals("qtobkauxo", model.name());
        Assertions.assertEquals("fphwpnu", model.addressPrefix());
        Assertions.assertEquals("ywzejywhslw", model.addressPrefixes().get(0));
        Assertions.assertEquals(IpAllocationMethodEnum.DYNAMIC, model.ipAllocationMethod());
        Assertions.assertEquals("n", model.ipConfigurationReferences().get(0).id());
        Assertions.assertEquals("lmuowo", model.routeTable().id());
        Assertions.assertEquals("au", model.routeTable().name());
        Assertions.assertEquals("wpng", model.routeTable().type());
        Assertions.assertEquals("ons", model.routeTable().routes().get(0).name());
        Assertions.assertEquals(IpPoolTypeEnum.VIPPOOL, model.ipPools().get(0).ipPoolType());
        Assertions.assertEquals("xjawrt", model.ipPools().get(0).start());
        Assertions.assertEquals("fjmyccxlzhco", model.ipPools().get(0).end());
        Assertions.assertEquals(1989079400, model.vlan());
    }
}
