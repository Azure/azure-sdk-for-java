// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestackhci.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.azurestackhci.AzureStackHciManager;
import com.azure.resourcemanager.azurestackhci.models.ArcSetting;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ArcSettingsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"DisableInProgress\",\"arcInstanceResourceGroup\":\"ecb\",\"arcApplicationClientId\":\"pwndyqlea\",\"arcApplicationTenantId\":\"klmtkhlowkx\",\"arcServicePrincipalObjectId\":\"vbrdfjmzsyzfho\",\"arcApplicationObjectId\":\"h\",\"aggregateState\":\"InProgress\",\"perNodeDetails\":[{\"name\":\"h\",\"arcInstance\":\"sjlpjrtwszhv\",\"state\":\"InProgress\"},{\"name\":\"phvtrrmhwrb\",\"arcInstance\":\"pyf\",\"state\":\"Deleting\"},{\"name\":\"vjglrocuyzlwhhme\",\"arcInstance\":\"ooclutnp\",\"state\":\"Failed\"},{\"name\":\"czj\",\"arcInstance\":\"mykyujxsglhs\",\"state\":\"PartiallyConnected\"}],\"connectivityProperties\":\"dataejylmbkzu\",\"defaultExtensions\":[{\"category\":\"rfih\",\"consentTime\":\"2021-08-14T07:35:37Z\"},{\"category\":\"wlpxuzzjg\",\"consentTime\":\"2021-05-28T23:16:03Z\"},{\"category\":\"qyhqo\",\"consentTime\":\"2021-05-06T11:57:22Z\"}]},\"id\":\"iqakydiwfbr\",\"name\":\"wpzdqtvhcspo\",\"type\":\"aqa\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AzureStackHciManager manager =
            AzureStackHciManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ArcSetting response =
            manager
                .arcSettings()
                .getWithResponse("ycjimryvwgcwwpbm", "gwe", "ydsx", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("ecb", response.arcInstanceResourceGroup());
        Assertions.assertEquals("pwndyqlea", response.arcApplicationClientId());
        Assertions.assertEquals("klmtkhlowkx", response.arcApplicationTenantId());
        Assertions.assertEquals("vbrdfjmzsyzfho", response.arcServicePrincipalObjectId());
        Assertions.assertEquals("h", response.arcApplicationObjectId());
    }
}
