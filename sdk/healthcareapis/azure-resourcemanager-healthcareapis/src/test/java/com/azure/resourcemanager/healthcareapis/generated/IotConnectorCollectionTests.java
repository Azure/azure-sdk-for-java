// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.healthcareapis.fluent.models.IotConnectorInner;
import com.azure.resourcemanager.healthcareapis.models.IotConnectorCollection;
import com.azure.resourcemanager.healthcareapis.models.IotEventHubIngestionEndpointConfiguration;
import com.azure.resourcemanager.healthcareapis.models.IotMappingProperties;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityIdentity;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import com.azure.resourcemanager.healthcareapis.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IotConnectorCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IotConnectorCollection model = BinaryData.fromString(
            "{\"nextLink\":\"ibx\",\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"ingestionEndpointConfiguration\":{\"eventHubName\":\"lmuzy\",\"consumerGroup\":\"aepdkzjanc\",\"fullyQualifiedEventHubNamespace\":\"rhdwbavxbniw\"},\"deviceMapping\":{\"content\":\"datawz\"}},\"identity\":{\"type\":\"None\",\"principalId\":\"5d68a5c6-cc0c-4bc9-955b-fcc4738a7ccf\",\"tenantId\":\"85bca115-92be-4ff7-a182-4e19aede8096\",\"userAssignedIdentities\":{\"x\":{\"principalId\":\"4c0be058-6a30-4637-9683-3d991aceda1d\",\"clientId\":\"d2e59795-5bd1-4b91-bdc9-d3a1dd3e9013\"},\"xbzpfzab\":{\"principalId\":\"fea8ad83-2c06-451c-9d0f-a62832741c74\",\"clientId\":\"bd1451f7-8be3-439e-af13-b8a3503474f6\"},\"uhxwtctyqiklbbov\":{\"principalId\":\"6f1617c1-1665-4833-8282-bf9a8b7025c2\",\"clientId\":\"aa57ca88-86d6-4ffa-80da-f3d59dff9d1e\"}}},\"tags\":{\"kfssxqukkf\":\"zbhvgyuguosv\",\"mg\":\"l\",\"vlopwiyighx\":\"xnkjzkdesl\"},\"location\":\"dwzbaiue\",\"etag\":\"a\",\"id\":\"m\",\"name\":\"yqupedeojnabckh\",\"type\":\"mtxpsiebtfh\"},{\"properties\":{\"provisioningState\":\"Verifying\",\"ingestionEndpointConfiguration\":{\"eventHubName\":\"skrdqmhjj\",\"consumerGroup\":\"tldwkyzxuutk\",\"fullyQualifiedEventHubNamespace\":\"ws\"},\"deviceMapping\":{\"content\":\"datavlxotogtwrupqsx\"}},\"identity\":{\"type\":\"None\",\"principalId\":\"7b69c255-3cec-41aa-b2ab-52b5ce3e6e6d\",\"tenantId\":\"4512e0da-a12b-400a-bb07-60dbdf9bddd1\",\"userAssignedIdentities\":{\"o\":{\"principalId\":\"a8e161c3-cfc2-4fd4-abd1-68990e63c5be\",\"clientId\":\"3aa8429b-22ba-45d7-9a13-4f13a5fd8a3a\"}}},\"tags\":{\"notyfjfcnjbkcn\":\"lo\",\"kphywpnvjto\":\"dhbt\"},\"location\":\"ermclfplphoxuscr\",\"etag\":\"bgyepsbj\",\"id\":\"azqugxywpmueefj\",\"name\":\"wfqkquj\",\"type\":\"dsuyonobgla\"}]}")
            .toObject(IotConnectorCollection.class);
        Assertions.assertEquals("ibx", model.nextLink());
        Assertions.assertEquals("a", model.value().get(0).etag());
        Assertions.assertEquals("dwzbaiue", model.value().get(0).location());
        Assertions.assertEquals("zbhvgyuguosv", model.value().get(0).tags().get("kfssxqukkf"));
        Assertions.assertEquals(ServiceManagedIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("lmuzy", model.value().get(0).ingestionEndpointConfiguration().eventHubName());
        Assertions.assertEquals("aepdkzjanc", model.value().get(0).ingestionEndpointConfiguration().consumerGroup());
        Assertions.assertEquals("rhdwbavxbniw",
            model.value().get(0).ingestionEndpointConfiguration().fullyQualifiedEventHubNamespace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IotConnectorCollection model = new IotConnectorCollection().withNextLink("ibx")
            .withValue(Arrays.asList(
                new IotConnectorInner().withEtag("a")
                    .withLocation("dwzbaiue")
                    .withTags(mapOf("kfssxqukkf", "zbhvgyuguosv", "mg", "l", "vlopwiyighx", "xnkjzkdesl"))
                    .withIdentity(new ServiceManagedIdentityIdentity().withType(ServiceManagedIdentityType.NONE)
                        .withUserAssignedIdentities(mapOf("x", new UserAssignedIdentity(), "xbzpfzab",
                            new UserAssignedIdentity(), "uhxwtctyqiklbbov", new UserAssignedIdentity())))
                    .withIngestionEndpointConfiguration(
                        new IotEventHubIngestionEndpointConfiguration().withEventHubName("lmuzy")
                            .withConsumerGroup("aepdkzjanc")
                            .withFullyQualifiedEventHubNamespace("rhdwbavxbniw"))
                    .withDeviceMapping(new IotMappingProperties().withContent("datawz")),
                new IotConnectorInner().withEtag("bgyepsbj")
                    .withLocation("ermclfplphoxuscr")
                    .withTags(mapOf("notyfjfcnjbkcn", "lo", "kphywpnvjto", "dhbt"))
                    .withIdentity(new ServiceManagedIdentityIdentity().withType(ServiceManagedIdentityType.NONE)
                        .withUserAssignedIdentities(mapOf("o", new UserAssignedIdentity())))
                    .withIngestionEndpointConfiguration(
                        new IotEventHubIngestionEndpointConfiguration().withEventHubName("skrdqmhjj")
                            .withConsumerGroup("tldwkyzxuutk")
                            .withFullyQualifiedEventHubNamespace("ws"))
                    .withDeviceMapping(new IotMappingProperties().withContent("datavlxotogtwrupqsx"))));
        model = BinaryData.fromObject(model).toObject(IotConnectorCollection.class);
        Assertions.assertEquals("ibx", model.nextLink());
        Assertions.assertEquals("a", model.value().get(0).etag());
        Assertions.assertEquals("dwzbaiue", model.value().get(0).location());
        Assertions.assertEquals("zbhvgyuguosv", model.value().get(0).tags().get("kfssxqukkf"));
        Assertions.assertEquals(ServiceManagedIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("lmuzy", model.value().get(0).ingestionEndpointConfiguration().eventHubName());
        Assertions.assertEquals("aepdkzjanc", model.value().get(0).ingestionEndpointConfiguration().consumerGroup());
        Assertions.assertEquals("rhdwbavxbniw",
            model.value().get(0).ingestionEndpointConfiguration().fullyQualifiedEventHubNamespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
