// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.healthcareapis.HealthcareApisManager;
import com.azure.resourcemanager.healthcareapis.models.IotConnector;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class IotConnectorsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Verifying\",\"ingestionEndpointConfiguration\":{\"eventHubName\":\"iut\",\"consumerGroup\":\"apzhyrpetoge\",\"fullyQualifiedEventHubNamespace\":\"oxslh\"},\"deviceMapping\":{\"content\":\"datalabrqnkkzjcjbtr\"}},\"identity\":{\"type\":\"None\",\"principalId\":\"f6de7c91-0cb3-4b4a-8e9a-75972119b06b\",\"tenantId\":\"2c478e00-03db-4fc1-ac7f-31ac6c78f19e\",\"userAssignedIdentities\":{\"jj\":{\"principalId\":\"19bb225d-28af-4c94-aebf-74ce2c02bb4f\",\"clientId\":\"dcbad938-f085-465b-851f-9840508424e3\"},\"qbeitpkxztmoob\":{\"principalId\":\"1807cdb3-18ae-422f-a20f-6c87bcba9469\",\"clientId\":\"4e147d43-af5b-4568-9d7f-76f5f8cbad63\"}}},\"tags\":{\"pimaqxzhemjyh\":\"tidgfcwq\"},\"location\":\"uj\",\"etag\":\"t\",\"id\":\"kozzwculkb\",\"name\":\"wpfaj\",\"type\":\"jwltlwtjjgu\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HealthcareApisManager manager = HealthcareApisManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        IotConnector response = manager.iotConnectors()
            .getWithResponse("qcuubgqibrta", "metttwgd", "lqxihhrmooiz", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("t", response.etag());
        Assertions.assertEquals("uj", response.location());
        Assertions.assertEquals("tidgfcwq", response.tags().get("pimaqxzhemjyh"));
        Assertions.assertEquals(ServiceManagedIdentityType.NONE, response.identity().type());
        Assertions.assertEquals("iut", response.ingestionEndpointConfiguration().eventHubName());
        Assertions.assertEquals("apzhyrpetoge", response.ingestionEndpointConfiguration().consumerGroup());
        Assertions.assertEquals("oxslh", response.ingestionEndpointConfiguration().fullyQualifiedEventHubNamespace());
    }
}
