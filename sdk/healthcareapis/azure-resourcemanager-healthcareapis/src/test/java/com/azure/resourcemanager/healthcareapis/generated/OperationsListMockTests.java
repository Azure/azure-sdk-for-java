// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.healthcareapis.HealthcareApisManager;
import com.azure.resourcemanager.healthcareapis.models.OperationDetail;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"nqndyfpchrqbn\",\"isDataAction\":true,\"display\":{\"provider\":\"egy\",\"resource\":\"wboxjumvqqo\",\"operation\":\"hrraiouaubrj\",\"description\":\"oq\"},\"origin\":\"uojrngiflr\",\"actionType\":\"Internal\",\"properties\":{\"serviceSpecification\":{\"logSpecifications\":[{\"name\":\"uimzdlyjd\",\"displayName\":\"wmkyoqufdvruzsl\",\"blobDuration\":\"j\"},{\"name\":\"ctfnmdxotng\",\"displayName\":\"gugey\",\"blobDuration\":\"hgrky\"},{\"name\":\"zabs\",\"displayName\":\"fpphoj\",\"blobDuration\":\"vyhyhsgzfc\"},{\"name\":\"gomfgbeglq\",\"displayName\":\"eohibet\",\"blobDuration\":\"uankrrfxeeeb\"}],\"metricSpecifications\":[{\"name\":\"acvbmqz\",\"displayName\":\"q\",\"displayDescription\":\"aj\",\"unit\":\"wxacevehj\",\"category\":\"yxoaf\",\"aggregationType\":\"oqltfae\",\"supportedAggregationTypes\":[\"nm\",\"gv\",\"irpghriypoqeyh\"],\"supportedTimeGrainTypes\":[\"ykprlpyznu\"],\"fillGapWithZero\":true,\"metricFilterPattern\":\"smexiitdf\",\"dimensions\":[{},{},{},{}],\"isInternal\":true,\"sourceMdmAccount\":\"iibmi\",\"sourceMdmNamespace\":\"nnust\",\"enableRegionalMdmAccount\":true,\"resourceIdDimensionNameOverride\":\"hnmgixhcm\"}]}}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HealthcareApisManager manager = HealthcareApisManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<OperationDetail> response = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("uimzdlyjd",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("wmkyoqufdvruzsl",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).displayName());
        Assertions.assertEquals("j",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).blobDuration());
        Assertions.assertEquals("acvbmqz",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("q",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("aj",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .displayDescription());
        Assertions.assertEquals("wxacevehj",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals("yxoaf",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).category());
        Assertions.assertEquals("oqltfae",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .aggregationType());
        Assertions.assertEquals("nm",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedAggregationTypes()
                .get(0));
        Assertions.assertEquals("ykprlpyznu",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedTimeGrainTypes()
                .get(0));
        Assertions.assertEquals(true,
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .fillGapWithZero());
        Assertions.assertEquals("smexiitdf",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .metricFilterPattern());
        Assertions.assertEquals(true,
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).isInternal());
        Assertions.assertEquals("iibmi",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .sourceMdmAccount());
        Assertions.assertEquals("nnust",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .sourceMdmNamespace());
        Assertions.assertEquals(true,
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .enableRegionalMdmAccount());
        Assertions.assertEquals("hnmgixhcm",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .resourceIdDimensionNameOverride());
    }
}
