// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.healthcareapis.HealthcareApisManager;
import com.azure.resourcemanager.healthcareapis.models.OperationDetail;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"name\":\"kwv\",\"isDataAction\":true,\"display\":{\"provider\":\"dfbzdixzmq\",\"resource\":\"odawopqhewjptmcg\",\"operation\":\"ostzelndlatu\",\"description\":\"zlbiojlvfhrbbpn\"},\"origin\":\"vcwwyyurmochppr\",\"actionType\":\"Internal\",\"properties\":{\"serviceSpecification\":{\"logSpecifications\":[{\"name\":\"yzejnhlbk\",\"displayName\":\"z\",\"blobDuration\":\"piljhahzvech\"}],\"metricSpecifications\":[{\"name\":\"wieholewjwiu\",\"displayName\":\"wefqsfapaqtferr\",\"displayDescription\":\"ex\",\"unit\":\"mfxapjwogqqno\",\"category\":\"udcdabtqwpwyawb\",\"aggregationType\":\"sqbuc\",\"supportedAggregationTypes\":[\"kyexaoguyaipi\",\"sdaultxij\",\"um\"],\"supportedTimeGrainTypes\":[\"azlnqnmcjngzqdqx\"],\"fillGapWithZero\":false,\"metricFilterPattern\":\"gny\",\"dimensions\":[{}],\"isInternal\":true,\"sourceMdmAccount\":\"vtuikzhajq\",\"sourceMdmNamespace\":\"cfhmlrqryxyn\",\"enableRegionalMdmAccount\":true,\"resourceIdDimensionNameOverride\":\"dpsovwxznptgo\"},{\"name\":\"ybbabpfhvfsl\",\"displayName\":\"ntjlr\",\"displayDescription\":\"jkskyr\",\"unit\":\"ovzidsx\",\"category\":\"abzmifrygznmmaxr\",\"aggregationType\":\"kzobgopxlhsln\",\"supportedAggregationTypes\":[\"ieixynllxe\",\"wcrojphslhcaw\",\"u\"],\"supportedTimeGrainTypes\":[\"dwfmvigorqjb\",\"tzh\",\"aglkafhon\"],\"fillGapWithZero\":false,\"metricFilterPattern\":\"eickpz\",\"dimensions\":[{}],\"isInternal\":true,\"sourceMdmAccount\":\"xelnwc\",\"sourceMdmNamespace\":\"yjede\",\"enableRegionalMdmAccount\":false,\"resourceIdDimensionNameOverride\":\"f\"},{\"name\":\"qscazuawxtz\",\"displayName\":\"uamwabzxrvxc\",\"displayDescription\":\"hsphaivmxyas\",\"unit\":\"vgsgzwywakoihkn\",\"category\":\"jblmljhlnymz\",\"aggregationType\":\"qyryuzcbmqqvxm\",\"supportedAggregationTypes\":[\"gtayxonsupeujlz\",\"nh\",\"vsqltnzoibgsxg\"],\"supportedTimeGrainTypes\":[\"yqo\"],\"fillGapWithZero\":false,\"metricFilterPattern\":\"ox\",\"dimensions\":[{}],\"isInternal\":false,\"sourceMdmAccount\":\"xiqxeiiqbimh\",\"sourceMdmNamespace\":\"wwinhehf\",\"enableRegionalMdmAccount\":false,\"resourceIdDimensionNameOverride\":\"vwbcblembnkbwv\"}]}}}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HealthcareApisManager manager = HealthcareApisManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<OperationDetail> response = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("yzejnhlbk",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("z",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).displayName());
        Assertions.assertEquals("piljhahzvech",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).blobDuration());
        Assertions.assertEquals("wieholewjwiu",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("wefqsfapaqtferr",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("ex", response.iterator().next().properties().serviceSpecification()
            .metricSpecifications().get(0).displayDescription());
        Assertions.assertEquals("mfxapjwogqqno",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals("udcdabtqwpwyawb",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).category());
        Assertions.assertEquals("sqbuc", response.iterator().next().properties().serviceSpecification()
            .metricSpecifications().get(0).aggregationType());
        Assertions.assertEquals("kyexaoguyaipi", response.iterator().next().properties().serviceSpecification()
            .metricSpecifications().get(0).supportedAggregationTypes().get(0));
        Assertions.assertEquals("azlnqnmcjngzqdqx", response.iterator().next().properties().serviceSpecification()
            .metricSpecifications().get(0).supportedTimeGrainTypes().get(0));
        Assertions.assertEquals(false, response.iterator().next().properties().serviceSpecification()
            .metricSpecifications().get(0).fillGapWithZero());
        Assertions.assertEquals("gny", response.iterator().next().properties().serviceSpecification()
            .metricSpecifications().get(0).metricFilterPattern());
        Assertions.assertEquals(true,
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).isInternal());
        Assertions.assertEquals("vtuikzhajq", response.iterator().next().properties().serviceSpecification()
            .metricSpecifications().get(0).sourceMdmAccount());
        Assertions.assertEquals("cfhmlrqryxyn", response.iterator().next().properties().serviceSpecification()
            .metricSpecifications().get(0).sourceMdmNamespace());
        Assertions.assertEquals(true, response.iterator().next().properties().serviceSpecification()
            .metricSpecifications().get(0).enableRegionalMdmAccount());
        Assertions.assertEquals("dpsovwxznptgo", response.iterator().next().properties().serviceSpecification()
            .metricSpecifications().get(0).resourceIdDimensionNameOverride());
    }
}
