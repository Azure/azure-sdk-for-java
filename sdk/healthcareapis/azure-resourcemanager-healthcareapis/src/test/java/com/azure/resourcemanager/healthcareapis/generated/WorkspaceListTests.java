// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.healthcareapis.fluent.models.WorkspaceInner;
import com.azure.resourcemanager.healthcareapis.models.PublicNetworkAccess;
import com.azure.resourcemanager.healthcareapis.models.WorkspaceList;
import com.azure.resourcemanager.healthcareapis.models.WorkspaceProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkspaceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkspaceList model = BinaryData.fromString(
            "{\"nextLink\":\"ajzyul\",\"value\":[{\"properties\":{\"provisioningState\":\"Moving\",\"privateEndpointConnections\":[{\"properties\":{\"privateLinkServiceConnectionState\":{}},\"id\":\"hbzhfepg\",\"name\":\"gqexzlocxs\",\"type\":\"paierh\"},{\"properties\":{\"privateLinkServiceConnectionState\":{}},\"id\":\"csglum\",\"name\":\"a\",\"type\":\"tjaodxobnb\"}],\"publicNetworkAccess\":\"Enabled\"},\"tags\":{\"onpimexgstxg\":\"okaj\"},\"location\":\"odgmaajrmvdjwz\",\"etag\":\"ovmclwhijcoejct\",\"id\":\"zaqsqsycbkbfk\",\"name\":\"ukdkexxppofmxa\",\"type\":\"c\"}]}")
            .toObject(WorkspaceList.class);
        Assertions.assertEquals("ajzyul", model.nextLink());
        Assertions.assertEquals("ovmclwhijcoejct", model.value().get(0).etag());
        Assertions.assertEquals("odgmaajrmvdjwz", model.value().get(0).location());
        Assertions.assertEquals("okaj", model.value().get(0).tags().get("onpimexgstxg"));
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.value().get(0).properties().publicNetworkAccess());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkspaceList model = new WorkspaceList().withNextLink("ajzyul")
            .withValue(Arrays.asList(new WorkspaceInner().withEtag("ovmclwhijcoejct")
                .withLocation("odgmaajrmvdjwz")
                .withTags(mapOf("onpimexgstxg", "okaj"))
                .withProperties(new WorkspaceProperties().withPublicNetworkAccess(PublicNetworkAccess.ENABLED))));
        model = BinaryData.fromObject(model).toObject(WorkspaceList.class);
        Assertions.assertEquals("ajzyul", model.nextLink());
        Assertions.assertEquals("ovmclwhijcoejct", model.value().get(0).etag());
        Assertions.assertEquals("odgmaajrmvdjwz", model.value().get(0).location());
        Assertions.assertEquals("okaj", model.value().get(0).tags().get("onpimexgstxg"));
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.value().get(0).properties().publicNetworkAccess());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
