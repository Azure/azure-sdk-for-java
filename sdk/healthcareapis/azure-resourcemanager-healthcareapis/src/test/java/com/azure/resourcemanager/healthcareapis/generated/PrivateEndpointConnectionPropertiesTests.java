// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.healthcareapis.fluent.models.PrivateEndpointConnectionProperties;
import com.azure.resourcemanager.healthcareapis.models.PrivateEndpoint;
import com.azure.resourcemanager.healthcareapis.models.PrivateEndpointServiceConnectionStatus;
import com.azure.resourcemanager.healthcareapis.models.PrivateLinkServiceConnectionState;
import org.junit.jupiter.api.Assertions;

public final class PrivateEndpointConnectionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateEndpointConnectionProperties model = BinaryData.fromString(
            "{\"privateEndpoint\":{\"id\":\"kc\"},\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"rcryuanzwuxzdxta\",\"actionsRequired\":\"lhmwhfpmrqobm\"},\"provisioningState\":\"Deleting\"}")
            .toObject(PrivateEndpointConnectionProperties.class);
        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.REJECTED,
            model.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("rcryuanzwuxzdxta", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("lhmwhfpmrqobm", model.privateLinkServiceConnectionState().actionsRequired());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateEndpointConnectionProperties model
            = new PrivateEndpointConnectionProperties().withPrivateEndpoint(new PrivateEndpoint())
                .withPrivateLinkServiceConnectionState(
                    new PrivateLinkServiceConnectionState().withStatus(PrivateEndpointServiceConnectionStatus.REJECTED)
                        .withDescription("rcryuanzwuxzdxta")
                        .withActionsRequired("lhmwhfpmrqobm"));
        model = BinaryData.fromObject(model).toObject(PrivateEndpointConnectionProperties.class);
        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.REJECTED,
            model.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("rcryuanzwuxzdxta", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("lhmwhfpmrqobm", model.privateLinkServiceConnectionState().actionsRequired());
    }
}
