// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.healthcareapis.models.IotConnectorPatchResource;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityIdentity;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import com.azure.resourcemanager.healthcareapis.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IotConnectorPatchResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IotConnectorPatchResource model = BinaryData.fromString(
            "{\"identity\":{\"type\":\"SystemAssigned,UserAssigned\",\"principalId\":\"52eafb81-8285-4515-a15c-a3f20344a4d4\",\"tenantId\":\"a9ba01d1-d710-4438-b30d-e61262fb3605\",\"userAssignedIdentities\":{\"yexz\":{\"principalId\":\"ce3f42ea-1499-4be7-adbc-02491a1242ac\",\"clientId\":\"521b7d9d-3899-41a0-babe-f998c827d493\"},\"ixhnrztf\":{\"principalId\":\"2d5170f1-759d-40c5-aa91-8fd64c40d31b\",\"clientId\":\"0ba3a7fb-e059-412d-be59-639ea013965e\"},\"bnxknalaulppg\":{\"principalId\":\"3451f2f7-4cd9-4b5c-af23-81b173dfd961\",\"clientId\":\"1b466a83-a0ef-4a1d-ace3-abc4a1b51f07\"},\"pnapnyiropuh\":{\"principalId\":\"9755c4a1-a929-4bd3-be7d-d8f202f70933\",\"clientId\":\"9fc27027-e738-4e80-aeec-077a5a83b1e3\"}}},\"tags\":{\"v\":\"vpgylgqgitxmed\",\"zzhxgktrm\":\"slynqwwnc\"}}")
            .toObject(IotConnectorPatchResource.class);
        Assertions.assertEquals("vpgylgqgitxmed", model.tags().get("v"));
        Assertions.assertEquals(ServiceManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IotConnectorPatchResource model
            = new IotConnectorPatchResource().withTags(mapOf("v", "vpgylgqgitxmed", "zzhxgktrm", "slynqwwnc"))
                .withIdentity(new ServiceManagedIdentityIdentity()
                    .withType(ServiceManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED).withUserAssignedIdentities(
                        mapOf("yexz", new UserAssignedIdentity(), "ixhnrztf", new UserAssignedIdentity(),
                            "bnxknalaulppg", new UserAssignedIdentity(), "pnapnyiropuh", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(IotConnectorPatchResource.class);
        Assertions.assertEquals("vpgylgqgitxmed", model.tags().get("v"));
        Assertions.assertEquals(ServiceManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
