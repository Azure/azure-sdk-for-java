// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.healthcareapis.models.DicomServicePatchResource;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityIdentity;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import com.azure.resourcemanager.healthcareapis.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DicomServicePatchResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DicomServicePatchResource model = BinaryData.fromString(
            "{\"identity\":{\"type\":\"None\",\"principalId\":\"4c87fef1-e639-45e5-a77d-0da187c75b66\",\"tenantId\":\"b866cb82-3aac-422a-a8cc-57183e9eeca0\",\"userAssignedIdentities\":{\"vpnazzm\":{\"principalId\":\"048bbbf5-d9e7-430d-8e78-65ad89cc098e\",\"clientId\":\"e42b0178-3da4-45dd-b67e-23d8d7369b4e\"},\"unmpxttd\":{\"principalId\":\"b8d6c373-081a-49ef-b42d-734b9e0f5bd5\",\"clientId\":\"b2aa86f0-7959-43e8-845b-34cffad9f5c2\"},\"bnlankxmyskpb\":{\"principalId\":\"36736386-06c4-4b28-b8ce-bd11a4d2c8ce\",\"clientId\":\"1433e226-da33-4070-a90e-882447517398\"}}},\"tags\":{\"qidybyx\":\"btkcxywnytnrsyn\",\"aaxdbabphlwrq\":\"zfcl\",\"hsucoc\":\"fkts\",\"ckzywbiexzfeyue\":\"nyyazttbtwwrqpue\"}}")
            .toObject(DicomServicePatchResource.class);
        Assertions.assertEquals("btkcxywnytnrsyn", model.tags().get("qidybyx"));
        Assertions.assertEquals(ServiceManagedIdentityType.NONE, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DicomServicePatchResource model = new DicomServicePatchResource()
            .withTags(mapOf("qidybyx", "btkcxywnytnrsyn", "aaxdbabphlwrq", "zfcl", "hsucoc", "fkts", "ckzywbiexzfeyue",
                "nyyazttbtwwrqpue"))
            .withIdentity(new ServiceManagedIdentityIdentity().withType(ServiceManagedIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("vpnazzm", new UserAssignedIdentity(), "unmpxttd",
                    new UserAssignedIdentity(), "bnlankxmyskpb", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(DicomServicePatchResource.class);
        Assertions.assertEquals("btkcxywnytnrsyn", model.tags().get("qidybyx"));
        Assertions.assertEquals(ServiceManagedIdentityType.NONE, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
