// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.healthcareapis.models.DicomServicePatchResource;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityIdentity;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import com.azure.resourcemanager.healthcareapis.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DicomServicePatchResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DicomServicePatchResource model = BinaryData.fromString(
            "{\"identity\":{\"type\":\"None\",\"principalId\":\"d796a918-e4e8-4cd0-80b2-468a0b39ac6c\",\"tenantId\":\"1817ad61-907a-41e5-b070-a0730b3dcd0c\",\"userAssignedIdentities\":{\"vpnazzm\":{\"principalId\":\"2d468e64-95cd-4796-b196-d6797cc9c154\",\"clientId\":\"8923b024-585c-4fa3-870f-3bd4664a5b72\"},\"unmpxttd\":{\"principalId\":\"4c965649-e70b-4f78-a28f-75753b01eaca\",\"clientId\":\"15dd40f2-cf44-487f-b865-3f64ef7933bb\"},\"bnlankxmyskpb\":{\"principalId\":\"4daee610-1d0d-4bff-9979-796d8a1b0176\",\"clientId\":\"b85be0dd-c0bd-43e9-8b89-e7e9d5f363d0\"}}},\"tags\":{\"qidybyx\":\"btkcxywnytnrsyn\",\"aaxdbabphlwrq\":\"zfcl\",\"hsucoc\":\"fkts\",\"ckzywbiexzfeyue\":\"nyyazttbtwwrqpue\"}}")
            .toObject(DicomServicePatchResource.class);
        Assertions.assertEquals("btkcxywnytnrsyn", model.tags().get("qidybyx"));
        Assertions.assertEquals(ServiceManagedIdentityType.NONE, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DicomServicePatchResource model = new DicomServicePatchResource()
            .withTags(mapOf("qidybyx", "btkcxywnytnrsyn", "aaxdbabphlwrq", "zfcl", "hsucoc", "fkts", "ckzywbiexzfeyue",
                "nyyazttbtwwrqpue"))
            .withIdentity(new ServiceManagedIdentityIdentity().withType(ServiceManagedIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("vpnazzm", new UserAssignedIdentity(), "unmpxttd",
                    new UserAssignedIdentity(), "bnlankxmyskpb", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(DicomServicePatchResource.class);
        Assertions.assertEquals("btkcxywnytnrsyn", model.tags().get("qidybyx"));
        Assertions.assertEquals(ServiceManagedIdentityType.NONE, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
