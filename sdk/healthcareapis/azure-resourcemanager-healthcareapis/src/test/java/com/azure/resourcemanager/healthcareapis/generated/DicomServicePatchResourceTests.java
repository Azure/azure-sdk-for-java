// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.healthcareapis.models.DicomServicePatchResource;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityIdentity;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import com.azure.resourcemanager.healthcareapis.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DicomServicePatchResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DicomServicePatchResource model = BinaryData.fromString(
            "{\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"611041c1-dee4-4773-b1b3-cbceca6db1fc\",\"tenantId\":\"02d1c5a8-664a-4329-a2f6-7e4b12600d0f\",\"userAssignedIdentities\":{\"vtq\":{\"principalId\":\"ae1fb8a2-59f3-48f7-b6fd-0e37224435d1\",\"clientId\":\"7453a9f4-a8c2-474c-912b-78525cf1dd9d\"},\"buynhijggm\":{\"principalId\":\"c6508bb5-c6ab-4c0b-a349-1caad0ec56b9\",\"clientId\":\"66a9de84-dd1b-44df-adf3-736f17f4b60d\"},\"siarbutrcvpn\":{\"principalId\":\"69ff1a3d-3bc3-4aa5-bc7b-b564fff21769\",\"clientId\":\"5e2838b5-de80-4300-99b8-3d377c3d5f12\"}}},\"tags\":{\"nlankxmyskpb\":\"mhjrunmpxttdbhr\",\"nrs\":\"enbtkcxywny\",\"lhaaxdbabp\":\"nlqidybyxczf\"}}")
            .toObject(DicomServicePatchResource.class);
        Assertions.assertEquals("mhjrunmpxttdbhr", model.tags().get("nlankxmyskpb"));
        Assertions.assertEquals(ServiceManagedIdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DicomServicePatchResource model = new DicomServicePatchResource()
            .withTags(mapOf("nlankxmyskpb", "mhjrunmpxttdbhr", "nrs", "enbtkcxywny", "lhaaxdbabp", "nlqidybyxczf"))
            .withIdentity(new ServiceManagedIdentityIdentity().withType(ServiceManagedIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("vtq", new UserAssignedIdentity(), "buynhijggm",
                    new UserAssignedIdentity(), "siarbutrcvpn", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(DicomServicePatchResource.class);
        Assertions.assertEquals("mhjrunmpxttdbhr", model.tags().get("nlankxmyskpb"));
        Assertions.assertEquals(ServiceManagedIdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
