// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.healthcareapis.models.DicomServicePatchResource;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityIdentity;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import com.azure.resourcemanager.healthcareapis.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DicomServicePatchResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DicomServicePatchResource model = BinaryData.fromString(
            "{\"identity\":{\"type\":\"None\",\"principalId\":\"73ee5a57-0381-4b67-b9ce-8ce4ecfa47a2\",\"tenantId\":\"d8a199c5-fd02-499d-9a47-ba1131c1d979\",\"userAssignedIdentities\":{\"vpnazzm\":{\"principalId\":\"846c75d8-d7e5-47ba-baee-aad4f6a5db27\",\"clientId\":\"be576c22-cbf1-4903-8114-3069c4cdb79a\"},\"unmpxttd\":{\"principalId\":\"482d5e1c-9e46-4ac1-80c0-87855c015e54\",\"clientId\":\"1ee8e8c1-9b64-45c9-a1a4-5c369811cb4e\"},\"bnlankxmyskpb\":{\"principalId\":\"002db037-f42d-4689-9e36-f9900a9e0a7e\",\"clientId\":\"71aa1d3f-36ca-4ac4-9eb1-6fe0e3e03134\"}}},\"tags\":{\"qidybyx\":\"btkcxywnytnrsyn\",\"aaxdbabphlwrq\":\"zfcl\",\"hsucoc\":\"fkts\",\"ckzywbiexzfeyue\":\"nyyazttbtwwrqpue\"}}")
            .toObject(DicomServicePatchResource.class);
        Assertions.assertEquals("btkcxywnytnrsyn", model.tags().get("qidybyx"));
        Assertions.assertEquals(ServiceManagedIdentityType.NONE, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DicomServicePatchResource model = new DicomServicePatchResource()
            .withTags(mapOf("qidybyx", "btkcxywnytnrsyn", "aaxdbabphlwrq", "zfcl", "hsucoc", "fkts", "ckzywbiexzfeyue",
                "nyyazttbtwwrqpue"))
            .withIdentity(new ServiceManagedIdentityIdentity().withType(ServiceManagedIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("vpnazzm", new UserAssignedIdentity(), "unmpxttd",
                    new UserAssignedIdentity(), "bnlankxmyskpb", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(DicomServicePatchResource.class);
        Assertions.assertEquals("btkcxywnytnrsyn", model.tags().get("qidybyx"));
        Assertions.assertEquals(ServiceManagedIdentityType.NONE, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
