// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.healthcareapis.models.DicomServicePatchResource;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityIdentity;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import com.azure.resourcemanager.healthcareapis.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DicomServicePatchResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DicomServicePatchResource model = BinaryData.fromString(
            "{\"identity\":{\"type\":\"None\",\"principalId\":\"d3eb8d1d-b6a2-4ea4-b0d7-a0f398a5a7e9\",\"tenantId\":\"68e12557-dd41-4e8d-9161-5e486215ac1a\",\"userAssignedIdentities\":{\"vpnazzm\":{\"principalId\":\"0892590a-e466-4f14-af36-6969b47f0ca8\",\"clientId\":\"f4d0614b-c6a9-491a-abd4-cc762d8e6bb0\"},\"unmpxttd\":{\"principalId\":\"23c6b8c1-83a9-48e9-8e53-4498be71cf81\",\"clientId\":\"634875f1-99d2-42a5-be1f-5429ea6588e1\"},\"bnlankxmyskpb\":{\"principalId\":\"aae96edc-fb0b-4bd1-9b34-63ec4cd46969\",\"clientId\":\"b4452a91-7e0f-49fb-a2cc-ba0aca4ae962\"}}},\"tags\":{\"qidybyx\":\"btkcxywnytnrsyn\",\"aaxdbabphlwrq\":\"zfcl\",\"hsucoc\":\"fkts\",\"ckzywbiexzfeyue\":\"nyyazttbtwwrqpue\"}}")
            .toObject(DicomServicePatchResource.class);
        Assertions.assertEquals("btkcxywnytnrsyn", model.tags().get("qidybyx"));
        Assertions.assertEquals(ServiceManagedIdentityType.NONE, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DicomServicePatchResource model = new DicomServicePatchResource()
            .withTags(mapOf("qidybyx", "btkcxywnytnrsyn", "aaxdbabphlwrq", "zfcl", "hsucoc", "fkts", "ckzywbiexzfeyue",
                "nyyazttbtwwrqpue"))
            .withIdentity(new ServiceManagedIdentityIdentity().withType(ServiceManagedIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("vpnazzm", new UserAssignedIdentity(), "unmpxttd",
                    new UserAssignedIdentity(), "bnlankxmyskpb", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(DicomServicePatchResource.class);
        Assertions.assertEquals("btkcxywnytnrsyn", model.tags().get("qidybyx"));
        Assertions.assertEquals(ServiceManagedIdentityType.NONE, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
