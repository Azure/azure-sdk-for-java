// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.healthcareapis.fluent.models.IotConnectorInner;
import com.azure.resourcemanager.healthcareapis.models.IotEventHubIngestionEndpointConfiguration;
import com.azure.resourcemanager.healthcareapis.models.IotMappingProperties;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityIdentity;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import com.azure.resourcemanager.healthcareapis.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IotConnectorInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IotConnectorInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Deprovisioned\",\"ingestionEndpointConfiguration\":{\"eventHubName\":\"bpbewtghfgb\",\"consumerGroup\":\"gw\",\"fullyQualifiedEventHubNamespace\":\"vlvqhjkbegi\"},\"deviceMapping\":{\"content\":\"datamxiebw\"}},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"1839fc4b-92a4-4b61-9ed1-582f37f702a8\",\"tenantId\":\"cc74e6d8-c666-4ef1-bbbc-7e9cb154cf5d\",\"userAssignedIdentities\":{\"rtzju\":{\"principalId\":\"21c38b29-7552-4f4f-9f3d-3deec4f68d03\",\"clientId\":\"40064c21-f03d-4d30-a95e-303642aad934\"},\"yzm\":{\"principalId\":\"ebab9c9d-51dd-4aef-ad46-b36128b4eeaa\",\"clientId\":\"2dde7336-81be-4a0f-81aa-e003ccaaefab\"},\"ongmtsa\":{\"principalId\":\"8b1fa1fc-a167-439a-ad01-3fb9380acecf\",\"clientId\":\"46a74b82-0ad7-4e0f-937a-c86794bacabb\"}}},\"tags\":{\"xqpsrknftguv\":\"bp\",\"riwwroy\":\"iuhprwmdyvxqta\",\"bycnojvkn\":\"bexrmcq\",\"qsgzvahapj\":\"e\"},\"location\":\"hpvgqz\",\"etag\":\"rvxdjzlmw\",\"id\":\"xkvugfhzov\",\"name\":\"wjvzunluthnn\",\"type\":\"rnxipei\"}")
            .toObject(IotConnectorInner.class);
        Assertions.assertEquals("rvxdjzlmw", model.etag());
        Assertions.assertEquals("hpvgqz", model.location());
        Assertions.assertEquals("bp", model.tags().get("xqpsrknftguv"));
        Assertions.assertEquals(ServiceManagedIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("bpbewtghfgb", model.ingestionEndpointConfiguration().eventHubName());
        Assertions.assertEquals("gw", model.ingestionEndpointConfiguration().consumerGroup());
        Assertions.assertEquals("vlvqhjkbegi",
            model.ingestionEndpointConfiguration().fullyQualifiedEventHubNamespace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IotConnectorInner model = new IotConnectorInner().withEtag("rvxdjzlmw").withLocation("hpvgqz")
            .withTags(
                mapOf("xqpsrknftguv", "bp", "riwwroy", "iuhprwmdyvxqta", "bycnojvkn", "bexrmcq", "qsgzvahapj", "e"))
            .withIdentity(new ServiceManagedIdentityIdentity().withType(ServiceManagedIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("rtzju", new UserAssignedIdentity(), "yzm",
                    new UserAssignedIdentity(), "ongmtsa", new UserAssignedIdentity())))
            .withIngestionEndpointConfiguration(
                new IotEventHubIngestionEndpointConfiguration().withEventHubName("bpbewtghfgb").withConsumerGroup("gw")
                    .withFullyQualifiedEventHubNamespace("vlvqhjkbegi"))
            .withDeviceMapping(new IotMappingProperties().withContent("datamxiebw"));
        model = BinaryData.fromObject(model).toObject(IotConnectorInner.class);
        Assertions.assertEquals("rvxdjzlmw", model.etag());
        Assertions.assertEquals("hpvgqz", model.location());
        Assertions.assertEquals("bp", model.tags().get("xqpsrknftguv"));
        Assertions.assertEquals(ServiceManagedIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("bpbewtghfgb", model.ingestionEndpointConfiguration().eventHubName());
        Assertions.assertEquals("gw", model.ingestionEndpointConfiguration().consumerGroup());
        Assertions.assertEquals("vlvqhjkbegi",
            model.ingestionEndpointConfiguration().fullyQualifiedEventHubNamespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
