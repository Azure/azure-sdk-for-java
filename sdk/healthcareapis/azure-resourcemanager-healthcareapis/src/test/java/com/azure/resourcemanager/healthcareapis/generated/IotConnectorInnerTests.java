// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.healthcareapis.fluent.models.IotConnectorInner;
import com.azure.resourcemanager.healthcareapis.models.IotEventHubIngestionEndpointConfiguration;
import com.azure.resourcemanager.healthcareapis.models.IotMappingProperties;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityIdentity;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import com.azure.resourcemanager.healthcareapis.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IotConnectorInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IotConnectorInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Accepted\",\"ingestionEndpointConfiguration\":{\"eventHubName\":\"cmgyud\",\"consumerGroup\":\"tlmoyrx\",\"fullyQualifiedEventHubNamespace\":\"fudwpznt\"},\"deviceMapping\":{\"content\":\"datazhlrqjb\"}},\"identity\":{\"type\":\"None\",\"principalId\":\"507bec27-b24c-46f4-b954-7285b04bf4cd\",\"tenantId\":\"8e21020a-cbe6-4484-bb68-754761ce72fd\",\"userAssignedIdentities\":{\"bkyvp\":{\"principalId\":\"6fb85e9f-9896-4a16-8e34-ac97b1e702c8\",\"clientId\":\"4ea66fc3-17a8-484e-b938-f794341153ab\"},\"n\":{\"principalId\":\"0e4a4a99-bcba-4d76-9dbf-457f9ee3bcb9\",\"clientId\":\"194ccb98-c19c-43d1-8838-d2820eda3593\"}}},\"tags\":{\"kafkuwbcrnwbm\":\"p\",\"us\":\"hhseyv\",\"ofmxagkvtmelmqkr\":\"tslhspkdeem\"},\"location\":\"hvljuahaquh\",\"etag\":\"hmdua\",\"id\":\"aex\",\"name\":\"pvfadmwsrcr\",\"type\":\"vxpvgomz\"}")
            .toObject(IotConnectorInner.class);
        Assertions.assertEquals("hmdua", model.etag());
        Assertions.assertEquals("hvljuahaquh", model.location());
        Assertions.assertEquals("p", model.tags().get("kafkuwbcrnwbm"));
        Assertions.assertEquals(ServiceManagedIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("cmgyud", model.ingestionEndpointConfiguration().eventHubName());
        Assertions.assertEquals("tlmoyrx", model.ingestionEndpointConfiguration().consumerGroup());
        Assertions.assertEquals("fudwpznt", model.ingestionEndpointConfiguration().fullyQualifiedEventHubNamespace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IotConnectorInner model = new IotConnectorInner().withEtag("hmdua")
            .withLocation("hvljuahaquh")
            .withTags(mapOf("kafkuwbcrnwbm", "p", "us", "hhseyv", "ofmxagkvtmelmqkr", "tslhspkdeem"))
            .withIdentity(new ServiceManagedIdentityIdentity().withType(ServiceManagedIdentityType.NONE)
                .withUserAssignedIdentities(
                    mapOf("bkyvp", new UserAssignedIdentity(), "n", new UserAssignedIdentity())))
            .withIngestionEndpointConfiguration(
                new IotEventHubIngestionEndpointConfiguration().withEventHubName("cmgyud")
                    .withConsumerGroup("tlmoyrx")
                    .withFullyQualifiedEventHubNamespace("fudwpznt"))
            .withDeviceMapping(new IotMappingProperties().withContent("datazhlrqjb"));
        model = BinaryData.fromObject(model).toObject(IotConnectorInner.class);
        Assertions.assertEquals("hmdua", model.etag());
        Assertions.assertEquals("hvljuahaquh", model.location());
        Assertions.assertEquals("p", model.tags().get("kafkuwbcrnwbm"));
        Assertions.assertEquals(ServiceManagedIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("cmgyud", model.ingestionEndpointConfiguration().eventHubName());
        Assertions.assertEquals("tlmoyrx", model.ingestionEndpointConfiguration().consumerGroup());
        Assertions.assertEquals("fudwpznt", model.ingestionEndpointConfiguration().fullyQualifiedEventHubNamespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
