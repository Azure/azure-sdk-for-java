// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.healthcareapis.fluent.models.IotConnectorInner;
import com.azure.resourcemanager.healthcareapis.models.IotEventHubIngestionEndpointConfiguration;
import com.azure.resourcemanager.healthcareapis.models.IotMappingProperties;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityIdentity;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import com.azure.resourcemanager.healthcareapis.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IotConnectorInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IotConnectorInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Accepted\",\"ingestionEndpointConfiguration\":{\"eventHubName\":\"cmgyud\",\"consumerGroup\":\"tlmoyrx\",\"fullyQualifiedEventHubNamespace\":\"fudwpznt\"},\"deviceMapping\":{\"content\":\"datazhlrqjb\"}},\"identity\":{\"type\":\"None\",\"principalId\":\"ea52b8d7-3aed-4822-be6f-4448e562e4aa\",\"tenantId\":\"e93a8256-827b-4094-bf00-f55ba5643964\",\"userAssignedIdentities\":{\"bkyvp\":{\"principalId\":\"e8576dd4-9027-4511-8834-7d1808156b5c\",\"clientId\":\"2c4c906f-4a62-4416-af6c-0843824079d0\"},\"n\":{\"principalId\":\"a5c79352-a895-4e42-bb3b-e7ac74e1a6d4\",\"clientId\":\"4c134a06-a08d-4e28-96bf-0989b9ed4ac4\"}}},\"tags\":{\"kafkuwbcrnwbm\":\"p\",\"us\":\"hhseyv\",\"ofmxagkvtmelmqkr\":\"tslhspkdeem\"},\"location\":\"hvljuahaquh\",\"etag\":\"hmdua\",\"id\":\"aex\",\"name\":\"pvfadmwsrcr\",\"type\":\"vxpvgomz\"}")
            .toObject(IotConnectorInner.class);
        Assertions.assertEquals("hmdua", model.etag());
        Assertions.assertEquals("hvljuahaquh", model.location());
        Assertions.assertEquals("p", model.tags().get("kafkuwbcrnwbm"));
        Assertions.assertEquals(ServiceManagedIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("cmgyud", model.ingestionEndpointConfiguration().eventHubName());
        Assertions.assertEquals("tlmoyrx", model.ingestionEndpointConfiguration().consumerGroup());
        Assertions.assertEquals("fudwpznt", model.ingestionEndpointConfiguration().fullyQualifiedEventHubNamespace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IotConnectorInner model = new IotConnectorInner().withEtag("hmdua")
            .withLocation("hvljuahaquh")
            .withTags(mapOf("kafkuwbcrnwbm", "p", "us", "hhseyv", "ofmxagkvtmelmqkr", "tslhspkdeem"))
            .withIdentity(new ServiceManagedIdentityIdentity().withType(ServiceManagedIdentityType.NONE)
                .withUserAssignedIdentities(
                    mapOf("bkyvp", new UserAssignedIdentity(), "n", new UserAssignedIdentity())))
            .withIngestionEndpointConfiguration(
                new IotEventHubIngestionEndpointConfiguration().withEventHubName("cmgyud")
                    .withConsumerGroup("tlmoyrx")
                    .withFullyQualifiedEventHubNamespace("fudwpznt"))
            .withDeviceMapping(new IotMappingProperties().withContent("datazhlrqjb"));
        model = BinaryData.fromObject(model).toObject(IotConnectorInner.class);
        Assertions.assertEquals("hmdua", model.etag());
        Assertions.assertEquals("hvljuahaquh", model.location());
        Assertions.assertEquals("p", model.tags().get("kafkuwbcrnwbm"));
        Assertions.assertEquals(ServiceManagedIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("cmgyud", model.ingestionEndpointConfiguration().eventHubName());
        Assertions.assertEquals("tlmoyrx", model.ingestionEndpointConfiguration().consumerGroup());
        Assertions.assertEquals("fudwpznt", model.ingestionEndpointConfiguration().fullyQualifiedEventHubNamespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
