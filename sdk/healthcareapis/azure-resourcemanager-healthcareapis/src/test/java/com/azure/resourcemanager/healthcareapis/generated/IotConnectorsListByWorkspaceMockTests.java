// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.healthcareapis.HealthcareApisManager;
import com.azure.resourcemanager.healthcareapis.models.IotConnector;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class IotConnectorsListByWorkspaceMockTests {
    @Test
    public void testListByWorkspace() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"ingestionEndpointConfiguration\":{\"eventHubName\":\"ogfnzjvusf\",\"consumerGroup\":\"dmozu\",\"fullyQualifiedEventHubNamespace\":\"lfsbtkadpysow\"},\"deviceMapping\":{\"content\":\"datagkbugrjqct\"}},\"identity\":{\"type\":\"None\",\"principalId\":\"73b979b7-6bdc-4338-8c23-0117c036200f\",\"tenantId\":\"08557f3b-ea26-4e72-ba02-98f24ff31993\",\"userAssignedIdentities\":{\"ypefojyqdhcupl\":{\"principalId\":\"b01ddd08-6de6-4e57-8927-9ad98bf53f05\",\"clientId\":\"8a8385f5-f853-41f1-83ea-66061985c08e\"},\"cwkhihi\":{\"principalId\":\"dc1eeef5-8448-4675-9383-195804e8e683\",\"clientId\":\"8ce577e5-b096-462d-82fb-a20dad5c509a\"},\"zdsqtzbsrgnow\":{\"principalId\":\"26c45e64-728e-4831-a526-31e34665e1f7\",\"clientId\":\"1511ef25-b392-40b7-915c-3aa8b1cc4a12\"},\"fgmvecactxmwo\":{\"principalId\":\"0abcf3fc-2a63-4e47-978f-d64df1f0f276\",\"clientId\":\"1076afa7-1d29-4a22-acce-97a7bbd549b5\"}}},\"tags\":{\"ekqvgqouwif\":\"owcluqo\"},\"location\":\"pjwyiv\",\"etag\":\"kfxcvhrfs\",\"id\":\"huagrttikteusqc\",\"name\":\"kvyklxubyjaffmm\",\"type\":\"bl\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HealthcareApisManager manager = HealthcareApisManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<IotConnector> response
            = manager.iotConnectors().listByWorkspace("ydwqfbylyrf", "iagtc", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("kfxcvhrfs", response.iterator().next().etag());
        Assertions.assertEquals("pjwyiv", response.iterator().next().location());
        Assertions.assertEquals("owcluqo", response.iterator().next().tags().get("ekqvgqouwif"));
        Assertions.assertEquals(ServiceManagedIdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals("ogfnzjvusf",
            response.iterator().next().ingestionEndpointConfiguration().eventHubName());
        Assertions.assertEquals("dmozu", response.iterator().next().ingestionEndpointConfiguration().consumerGroup());
        Assertions.assertEquals("lfsbtkadpysow",
            response.iterator().next().ingestionEndpointConfiguration().fullyQualifiedEventHubNamespace());
    }
}
