// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.healthcareapis.HealthcareApisManager;
import com.azure.resourcemanager.healthcareapis.models.IotConnector;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class IotConnectorsListByWorkspaceMockTests {
    @Test
    public void testListByWorkspace() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Moving\",\"ingestionEndpointConfiguration\":{\"eventHubName\":\"wiivwzjbhyzsx\",\"consumerGroup\":\"kambtrnegvmnvuqe\",\"fullyQualifiedEventHubNamespace\":\"lds\"},\"deviceMapping\":{\"content\":\"datatjb\"}},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"3cd62f20-d432-425e-b5dd-98b611982066\",\"tenantId\":\"367cee32-14a5-4c7b-b8ec-b2cf2118b1e5\",\"userAssignedIdentities\":{\"mjlxrrilozapeewc\":{\"principalId\":\"2ecbb90c-9c22-414d-9bfc-167d86961cd0\",\"clientId\":\"a981b056-8bef-4630-a8ba-818feb6a6209\"}}},\"tags\":{\"f\":\"lktwkuziycslev\",\"tqedcgzulwm\":\"ztcktyh\",\"rjvpglydzgkrvqee\":\"rqzz\"},\"location\":\"oepry\",\"etag\":\"nwy\",\"id\":\"pzdm\",\"name\":\"vzvfvaawzqadfl\",\"type\":\"z\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HealthcareApisManager manager = HealthcareApisManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<IotConnector> response
            = manager.iotConnectors().listByWorkspace("fmo", "uxrkjp", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("nwy", response.iterator().next().etag());
        Assertions.assertEquals("oepry", response.iterator().next().location());
        Assertions.assertEquals("lktwkuziycslev", response.iterator().next().tags().get("f"));
        Assertions.assertEquals(ServiceManagedIdentityType.SYSTEM_ASSIGNED,
            response.iterator().next().identity().type());
        Assertions.assertEquals("wiivwzjbhyzsx",
            response.iterator().next().ingestionEndpointConfiguration().eventHubName());
        Assertions.assertEquals("kambtrnegvmnvuqe",
            response.iterator().next().ingestionEndpointConfiguration().consumerGroup());
        Assertions.assertEquals("lds",
            response.iterator().next().ingestionEndpointConfiguration().fullyQualifiedEventHubNamespace());
    }
}
