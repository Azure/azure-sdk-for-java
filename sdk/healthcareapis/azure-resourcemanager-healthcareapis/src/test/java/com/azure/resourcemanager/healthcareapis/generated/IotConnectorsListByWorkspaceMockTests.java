// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.healthcareapis.HealthcareApisManager;
import com.azure.resourcemanager.healthcareapis.models.IotConnector;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class IotConnectorsListByWorkspaceMockTests {
    @Test
    public void testListByWorkspace() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"ingestionEndpointConfiguration\":{\"eventHubName\":\"ogfnzjvusf\",\"consumerGroup\":\"dmozu\",\"fullyQualifiedEventHubNamespace\":\"lfsbtkadpysow\"},\"deviceMapping\":{\"content\":\"datagkbugrjqct\"}},\"identity\":{\"type\":\"None\",\"principalId\":\"aab0b556-9f8f-49d2-b68b-dc15419eddd3\",\"tenantId\":\"20820cda-5b3c-4af4-bd94-c67077ad60e8\",\"userAssignedIdentities\":{\"ypefojyqdhcupl\":{\"principalId\":\"e18e6411-6996-4f39-b85d-4fff5d53140b\",\"clientId\":\"09fd4757-1c61-42c1-a505-a0384c2a83ce\"},\"cwkhihi\":{\"principalId\":\"ac357974-0ab9-48ee-b568-7dac03065da6\",\"clientId\":\"b0dc85fc-96ad-468b-8e43-faf74c8bf063\"},\"zdsqtzbsrgnow\":{\"principalId\":\"f207046b-b025-4655-9a6a-1cdbf1ec134d\",\"clientId\":\"7f9c779a-7699-4b98-9613-450d57ae9502\"},\"fgmvecactxmwo\":{\"principalId\":\"71c3b012-1c83-46ce-a219-cc5127494ac9\",\"clientId\":\"088d33b4-3663-437b-87ec-227fc4d42465\"}}},\"tags\":{\"ekqvgqouwif\":\"owcluqo\"},\"location\":\"pjwyiv\",\"etag\":\"kfxcvhrfs\",\"id\":\"huagrttikteusqc\",\"name\":\"kvyklxubyjaffmm\",\"type\":\"bl\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HealthcareApisManager manager = HealthcareApisManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<IotConnector> response
            = manager.iotConnectors().listByWorkspace("ydwqfbylyrf", "iagtc", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("kfxcvhrfs", response.iterator().next().etag());
        Assertions.assertEquals("pjwyiv", response.iterator().next().location());
        Assertions.assertEquals("owcluqo", response.iterator().next().tags().get("ekqvgqouwif"));
        Assertions.assertEquals(ServiceManagedIdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals("ogfnzjvusf",
            response.iterator().next().ingestionEndpointConfiguration().eventHubName());
        Assertions.assertEquals("dmozu", response.iterator().next().ingestionEndpointConfiguration().consumerGroup());
        Assertions.assertEquals("lfsbtkadpysow",
            response.iterator().next().ingestionEndpointConfiguration().fullyQualifiedEventHubNamespace());
    }
}
