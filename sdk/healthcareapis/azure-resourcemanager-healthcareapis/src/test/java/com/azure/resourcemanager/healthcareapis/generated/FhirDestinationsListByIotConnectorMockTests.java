// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.healthcareapis.HealthcareApisManager;
import com.azure.resourcemanager.healthcareapis.models.IotFhirDestination;
import com.azure.resourcemanager.healthcareapis.models.IotIdentityResolutionType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class FhirDestinationsListByIotConnectorMockTests {
    @Test
    public void testListByIotConnector() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"resourceIdentityResolutionType\":\"Lookup\",\"fhirServiceResourceId\":\"agr\",\"fhirMapping\":{\"content\":\"dataikteusqczkvyk\"},\"provisioningState\":\"Suspended\"},\"location\":\"jaffmmfblcqcuu\",\"etag\":\"qibrtalme\",\"id\":\"ttwgdsl\",\"name\":\"xih\",\"type\":\"rmooizqse\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HealthcareApisManager manager = HealthcareApisManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<IotFhirDestination> response = manager.fhirDestinations()
            .listByIotConnector("wifzmp", "wyivqikf", "cvhrfsp", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qibrtalme", response.iterator().next().etag());
        Assertions.assertEquals("jaffmmfblcqcuu", response.iterator().next().location());
        Assertions.assertEquals(IotIdentityResolutionType.LOOKUP,
            response.iterator().next().resourceIdentityResolutionType());
        Assertions.assertEquals("agr", response.iterator().next().fhirServiceResourceId());
    }
}
