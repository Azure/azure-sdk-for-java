// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.healthcareapis.HealthcareApisManager;
import com.azure.resourcemanager.healthcareapis.models.IotConnector;
import com.azure.resourcemanager.healthcareapis.models.IotEventHubIngestionEndpointConfiguration;
import com.azure.resourcemanager.healthcareapis.models.IotMappingProperties;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityIdentity;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import com.azure.resourcemanager.healthcareapis.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IotConnectorsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"ingestionEndpointConfiguration\":{\"eventHubName\":\"mieknlraria\",\"consumerGroup\":\"iuagydwqfbylyrfg\",\"fullyQualifiedEventHubNamespace\":\"gtcojocqwo\"},\"deviceMapping\":{\"content\":\"datazjvusfzldmo\"}},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"2d5ed349-b9ff-4741-bfa0-0275ac5f018a\",\"tenantId\":\"396af023-7671-430c-90ef-b909bcf7c4e9\",\"userAssignedIdentities\":{\"adpysownbt\":{\"principalId\":\"50c7d43d-eef9-4ed9-8b00-b42c954ffb2f\",\"clientId\":\"a25ee620-2401-4a57-93a9-ed1399e5ed60\"},\"u\":{\"principalId\":\"88d7f921-c49a-401a-b73b-7cae79cde79c\",\"clientId\":\"fa9e1c30-701c-4e9a-ac99-2361780945dc\"},\"qctojcmisof\":{\"principalId\":\"d7d2e186-0e84-4cc7-bab6-9b53be7954cf\",\"clientId\":\"5b6b7492-4b2c-4c8d-bc90-f89a5f0b1f58\"},\"pe\":{\"principalId\":\"0e24e990-1cd9-4592-939d-44c18aa5fb88\",\"clientId\":\"8abb66fb-ca69-4b3b-8fe9-6660a47a8baf\"}}},\"tags\":{\"hihihlhzdsqtzbsr\":\"yqdhcuplcplcw\"},\"location\":\"o\",\"etag\":\"jhf\",\"id\":\"mvec\",\"name\":\"ctxmwoteyowcluq\",\"type\":\"vekqvgqo\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HealthcareApisManager manager = HealthcareApisManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        IotConnector response = manager.iotConnectors()
            .define("frbbc")
            .withExistingWorkspace("tppn", "dxzxhi")
            .withRegion("kiscvwmzhwpl")
            .withTags(mapOf("ud", "unzo", "hmfdnbzydvfvfcj", "cxgkmoyxcdyui", "gorf", "aeoisrvh"))
            .withEtag("a")
            .withIdentity(new ServiceManagedIdentityIdentity().withType(ServiceManagedIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("ckh", new UserAssignedIdentity(), "vdff", new UserAssignedIdentity(),
                    "fqroudas", new UserAssignedIdentity(), "ehhr", new UserAssignedIdentity())))
            .withIngestionEndpointConfiguration(new IotEventHubIngestionEndpointConfiguration().withEventHubName("ltd")
                .withConsumerGroup("fkqojpy")
                .withFullyQualifiedEventHubNamespace("gtrd"))
            .withDeviceMapping(new IotMappingProperties().withContent("datafmzzsdymbrny"))
            .create();

        Assertions.assertEquals("jhf", response.etag());
        Assertions.assertEquals("o", response.location());
        Assertions.assertEquals("yqdhcuplcplcw", response.tags().get("hihihlhzdsqtzbsr"));
        Assertions.assertEquals(ServiceManagedIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals("mieknlraria", response.ingestionEndpointConfiguration().eventHubName());
        Assertions.assertEquals("iuagydwqfbylyrfg", response.ingestionEndpointConfiguration().consumerGroup());
        Assertions.assertEquals("gtcojocqwo",
            response.ingestionEndpointConfiguration().fullyQualifiedEventHubNamespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
