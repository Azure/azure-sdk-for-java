// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.healthcareapis.HealthcareApisManager;
import com.azure.resourcemanager.healthcareapis.models.IotConnector;
import com.azure.resourcemanager.healthcareapis.models.IotEventHubIngestionEndpointConfiguration;
import com.azure.resourcemanager.healthcareapis.models.IotMappingProperties;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityIdentity;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import com.azure.resourcemanager.healthcareapis.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IotConnectorsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"ingestionEndpointConfiguration\":{\"eventHubName\":\"mieknlraria\",\"consumerGroup\":\"iuagydwqfbylyrfg\",\"fullyQualifiedEventHubNamespace\":\"gtcojocqwo\"},\"deviceMapping\":{\"content\":\"datazjvusfzldmo\"}},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"7827107a-5b42-49eb-a040-347f750ed838\",\"tenantId\":\"5c916b13-22f5-451e-976c-ce1beb9e5436\",\"userAssignedIdentities\":{\"adpysownbt\":{\"principalId\":\"eb624e7f-580e-42fd-85bf-f4e75d3fff0c\",\"clientId\":\"29fd45b9-d18f-4fb1-92f3-c1be25798be0\"},\"u\":{\"principalId\":\"984b335a-659b-47be-9dc6-8e7b59040c18\",\"clientId\":\"aa9ac3cb-b7b8-4280-9f11-f5e0453834c9\"},\"qctojcmisof\":{\"principalId\":\"2b71c719-0229-4537-83d8-eba48180ef78\",\"clientId\":\"41f8aa3b-658e-4293-ad84-775f069e7c3b\"},\"pe\":{\"principalId\":\"d4d3658e-edc0-4775-80f5-afc076b0184b\",\"clientId\":\"3d329dcf-5f0d-4d3e-8450-7dfffe0abb14\"}}},\"tags\":{\"hihihlhzdsqtzbsr\":\"yqdhcuplcplcw\"},\"location\":\"o\",\"etag\":\"jhf\",\"id\":\"mvec\",\"name\":\"ctxmwoteyowcluq\",\"type\":\"vekqvgqo\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HealthcareApisManager manager = HealthcareApisManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        IotConnector response = manager.iotConnectors()
            .define("frbbc")
            .withExistingWorkspace("tppn", "dxzxhi")
            .withRegion("kiscvwmzhwpl")
            .withTags(mapOf("ud", "unzo", "hmfdnbzydvfvfcj", "cxgkmoyxcdyui", "gorf", "aeoisrvh"))
            .withEtag("a")
            .withIdentity(new ServiceManagedIdentityIdentity().withType(ServiceManagedIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("ckh", new UserAssignedIdentity(), "vdff", new UserAssignedIdentity(),
                    "fqroudas", new UserAssignedIdentity(), "ehhr", new UserAssignedIdentity())))
            .withIngestionEndpointConfiguration(new IotEventHubIngestionEndpointConfiguration().withEventHubName("ltd")
                .withConsumerGroup("fkqojpy")
                .withFullyQualifiedEventHubNamespace("gtrd"))
            .withDeviceMapping(new IotMappingProperties().withContent("datafmzzsdymbrny"))
            .create();

        Assertions.assertEquals("jhf", response.etag());
        Assertions.assertEquals("o", response.location());
        Assertions.assertEquals("yqdhcuplcplcw", response.tags().get("hihihlhzdsqtzbsr"));
        Assertions.assertEquals(ServiceManagedIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals("mieknlraria", response.ingestionEndpointConfiguration().eventHubName());
        Assertions.assertEquals("iuagydwqfbylyrfg", response.ingestionEndpointConfiguration().consumerGroup());
        Assertions.assertEquals("gtcojocqwo",
            response.ingestionEndpointConfiguration().fullyQualifiedEventHubNamespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
