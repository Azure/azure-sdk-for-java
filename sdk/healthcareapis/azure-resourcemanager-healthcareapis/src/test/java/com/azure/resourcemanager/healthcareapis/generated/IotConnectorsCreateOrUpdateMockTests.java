// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.healthcareapis.HealthcareApisManager;
import com.azure.resourcemanager.healthcareapis.models.IotConnector;
import com.azure.resourcemanager.healthcareapis.models.IotEventHubIngestionEndpointConfiguration;
import com.azure.resourcemanager.healthcareapis.models.IotMappingProperties;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityIdentity;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import com.azure.resourcemanager.healthcareapis.models.UserAssignedIdentity;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class IotConnectorsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"ingestionEndpointConfiguration\":{\"eventHubName\":\"mewip\",\"consumerGroup\":\"ekdxuku\",\"fullyQualifiedEventHubNamespace\":\"sjjxundxgketw\"},\"deviceMapping\":{\"content\":\"datazjhfjmhvv\"}},\"identity\":{\"type\":\"SystemAssigned,UserAssigned\",\"principalId\":\"32384b9f-7c21-4289-84df-4d6c54bfb69b\",\"tenantId\":\"31db360a-1d2b-4151-9c00-08d4f2cb10a5\",\"userAssignedIdentities\":{\"sx\":{\"principalId\":\"cfee0ff5-938c-450f-a6ed-52502b67fa51\",\"clientId\":\"241b186b-a9d9-4de8-8ce7-5ec857b04cce\"},\"fbuzjyihs\":{\"principalId\":\"6305a003-db12-4458-a8a4-26771ee748c7\",\"clientId\":\"78445c4c-cbbc-4bb2-84bc-64fb7eb527d1\"}}},\"tags\":{\"nsqyrpfoobrltt\":\"hudypohyuemsl\"},\"location\":\"sjnygqdnfwqzdzgt\",\"etag\":\"axhnfh\",\"id\":\"lyvijouwiv\",\"name\":\"xoyzunbix\",\"type\":\"rtikvcpwpg\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        HealthcareApisManager manager = HealthcareApisManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        IotConnector response = manager.iotConnectors().define("jhlfzswpchwahf").withExistingWorkspace("cse", "hwwn")
            .withRegion("xgsg").withTags(mapOf("uvyinzqodfvpgs", "fiwrxgkn")).withEtag("fgzdjtxvz")
            .withIdentity(new ServiceManagedIdentityIdentity().withType(ServiceManagedIdentityType.NONE)
                .withUserAssignedIdentities(
                    mapOf("jzh", new UserAssignedIdentity(), "xfpxtgqscja", new UserAssignedIdentity(),
                        "juhdqazkmtgguwpi", new UserAssignedIdentity(), "jcivmmg", new UserAssignedIdentity())))
            .withIngestionEndpointConfiguration(
                new IotEventHubIngestionEndpointConfiguration().withEventHubName("epgfew")
                    .withConsumerGroup("wlyxgncxyk").withFullyQualifiedEventHubNamespace("djhlimm"))
            .withDeviceMapping(new IotMappingProperties().withContent("dataf")).create();

        Assertions.assertEquals("axhnfh", response.etag());
        Assertions.assertEquals("sjnygqdnfwqzdzgt", response.location());
        Assertions.assertEquals("hudypohyuemsl", response.tags().get("nsqyrpfoobrltt"));
        Assertions.assertEquals(ServiceManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("mewip", response.ingestionEndpointConfiguration().eventHubName());
        Assertions.assertEquals("ekdxuku", response.ingestionEndpointConfiguration().consumerGroup());
        Assertions.assertEquals("sjjxundxgketw",
            response.ingestionEndpointConfiguration().fullyQualifiedEventHubNamespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
