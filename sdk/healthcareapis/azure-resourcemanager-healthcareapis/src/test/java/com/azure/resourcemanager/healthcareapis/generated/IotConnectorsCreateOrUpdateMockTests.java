// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.healthcareapis.HealthcareApisManager;
import com.azure.resourcemanager.healthcareapis.models.IotConnector;
import com.azure.resourcemanager.healthcareapis.models.IotEventHubIngestionEndpointConfiguration;
import com.azure.resourcemanager.healthcareapis.models.IotMappingProperties;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityIdentity;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import com.azure.resourcemanager.healthcareapis.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IotConnectorsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"ingestionEndpointConfiguration\":{\"eventHubName\":\"mieknlraria\",\"consumerGroup\":\"iuagydwqfbylyrfg\",\"fullyQualifiedEventHubNamespace\":\"gtcojocqwo\"},\"deviceMapping\":{\"content\":\"datazjvusfzldmo\"}},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"c1e6059d-93b6-490b-8ef7-b0e839801597\",\"tenantId\":\"b178b46f-d63e-4420-b650-05a828edd824\",\"userAssignedIdentities\":{\"adpysownbt\":{\"principalId\":\"0a174abb-c157-445e-882e-6dbd4f349ce5\",\"clientId\":\"0d64d1d3-b9e6-4d84-83e7-cb4066864541\"},\"u\":{\"principalId\":\"63a8ab47-0c61-4fcb-a416-8e5b0915b8b9\",\"clientId\":\"7b472db1-2d24-4549-9f88-7f2ac17af2b5\"},\"qctojcmisof\":{\"principalId\":\"0ea121dc-1603-4444-afaa-91cc5f627343\",\"clientId\":\"a4878590-f401-48db-a5dc-6d8c1b7fc72c\"},\"pe\":{\"principalId\":\"4cbc2935-5158-465c-921e-a666b99213d5\",\"clientId\":\"839a6055-95e1-4733-9213-18605fa4ccb0\"}}},\"tags\":{\"hihihlhzdsqtzbsr\":\"yqdhcuplcplcw\"},\"location\":\"o\",\"etag\":\"jhf\",\"id\":\"mvec\",\"name\":\"ctxmwoteyowcluq\",\"type\":\"vekqvgqo\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HealthcareApisManager manager = HealthcareApisManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        IotConnector response = manager.iotConnectors()
            .define("frbbc")
            .withExistingWorkspace("tppn", "dxzxhi")
            .withRegion("kiscvwmzhwpl")
            .withTags(mapOf("ud", "unzo", "hmfdnbzydvfvfcj", "cxgkmoyxcdyui", "gorf", "aeoisrvh"))
            .withEtag("a")
            .withIdentity(new ServiceManagedIdentityIdentity().withType(ServiceManagedIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("ckh", new UserAssignedIdentity(), "vdff", new UserAssignedIdentity(),
                    "fqroudas", new UserAssignedIdentity(), "ehhr", new UserAssignedIdentity())))
            .withIngestionEndpointConfiguration(new IotEventHubIngestionEndpointConfiguration().withEventHubName("ltd")
                .withConsumerGroup("fkqojpy")
                .withFullyQualifiedEventHubNamespace("gtrd"))
            .withDeviceMapping(new IotMappingProperties().withContent("datafmzzsdymbrny"))
            .create();

        Assertions.assertEquals("jhf", response.etag());
        Assertions.assertEquals("o", response.location());
        Assertions.assertEquals("yqdhcuplcplcw", response.tags().get("hihihlhzdsqtzbsr"));
        Assertions.assertEquals(ServiceManagedIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals("mieknlraria", response.ingestionEndpointConfiguration().eventHubName());
        Assertions.assertEquals("iuagydwqfbylyrfg", response.ingestionEndpointConfiguration().consumerGroup());
        Assertions.assertEquals("gtcojocqwo",
            response.ingestionEndpointConfiguration().fullyQualifiedEventHubNamespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
