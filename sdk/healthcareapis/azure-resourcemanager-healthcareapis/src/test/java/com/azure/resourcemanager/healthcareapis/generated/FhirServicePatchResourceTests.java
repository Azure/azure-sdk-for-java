// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.healthcareapis.models.FhirServicePatchResource;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityIdentity;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import com.azure.resourcemanager.healthcareapis.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FhirServicePatchResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FhirServicePatchResource model = BinaryData.fromString(
            "{\"identity\":{\"type\":\"SystemAssigned,UserAssigned\",\"principalId\":\"2b408401-06a1-4065-8bf1-aa6cda0251d5\",\"tenantId\":\"e3b2969a-fc74-491a-98a3-660be240d352\",\"userAssignedIdentities\":{\"fbtkuwhhmhyk\":{\"principalId\":\"b2fe9047-2c32-4dc1-9c63-56f38a09d355\",\"clientId\":\"9e141473-b308-486c-a85b-6ab9102c5ed3\"},\"xafnndlpichko\":{\"principalId\":\"017b34d3-f8f9-4b5c-85f3-bc4d988f5336\",\"clientId\":\"e3606707-838b-425d-953b-6f2f71ed06b6\"},\"cdyhbpkkpwdreqn\":{\"principalId\":\"d5d7b5af-386e-4a41-a5bf-ed5e5f73af9a\",\"clientId\":\"7a580283-6ccd-45a7-bbbd-2e1f1affff2d\"},\"qfovljxywsuws\":{\"principalId\":\"b88e2bee-d1e1-4b56-8125-b7de6825ca02\",\"clientId\":\"778c8421-c7c9-490b-ad68-bb72b71ce3d3\"}}},\"tags\":{\"r\":\"ndsytgadg\"}}")
            .toObject(FhirServicePatchResource.class);
        Assertions.assertEquals("ndsytgadg", model.tags().get("r"));
        Assertions.assertEquals(ServiceManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FhirServicePatchResource model
            = new FhirServicePatchResource().withTags(mapOf("r", "ndsytgadg"))
                .withIdentity(new ServiceManagedIdentityIdentity()
                    .withType(ServiceManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("fbtkuwhhmhyk", new UserAssignedIdentity(), "xafnndlpichko",
                        new UserAssignedIdentity(), "cdyhbpkkpwdreqn", new UserAssignedIdentity(), "qfovljxywsuws",
                        new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(FhirServicePatchResource.class);
        Assertions.assertEquals("ndsytgadg", model.tags().get("r"));
        Assertions.assertEquals(ServiceManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
