// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.healthcareapis.models.FhirServicePatchResource;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityIdentity;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import com.azure.resourcemanager.healthcareapis.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FhirServicePatchResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FhirServicePatchResource model = BinaryData.fromString(
            "{\"identity\":{\"type\":\"SystemAssigned,UserAssigned\",\"principalId\":\"6265c0e9-f575-4266-ac7e-164d8cab8aae\",\"tenantId\":\"ba074fe3-cdd2-4ea0-9f17-196c0ce23976\",\"userAssignedIdentities\":{\"fbtkuwhhmhyk\":{\"principalId\":\"704aaab8-e0f2-4341-bf39-ca705be69c84\",\"clientId\":\"56a41ab3-1ddf-4310-811b-67696727718a\"},\"xafnndlpichko\":{\"principalId\":\"1d0f3841-91b1-4e40-aac6-41580427c2dd\",\"clientId\":\"81962220-1c1b-4d6d-9737-d1babbbee5ee\"},\"cdyhbpkkpwdreqn\":{\"principalId\":\"55f63386-9c10-4e0a-b766-18dd4c267bff\",\"clientId\":\"59273ac3-d4ad-4d3a-81aa-4ebc5db27afc\"},\"qfovljxywsuws\":{\"principalId\":\"152651f9-53af-47c4-b291-3310b6ce1600\",\"clientId\":\"49104091-2dc8-42f9-97f3-99ff615ebd6b\"}}},\"tags\":{\"r\":\"ndsytgadg\"}}")
            .toObject(FhirServicePatchResource.class);
        Assertions.assertEquals("ndsytgadg", model.tags().get("r"));
        Assertions.assertEquals(ServiceManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FhirServicePatchResource model
            = new FhirServicePatchResource().withTags(mapOf("r", "ndsytgadg"))
                .withIdentity(new ServiceManagedIdentityIdentity()
                    .withType(ServiceManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("fbtkuwhhmhyk", new UserAssignedIdentity(), "xafnndlpichko",
                        new UserAssignedIdentity(), "cdyhbpkkpwdreqn", new UserAssignedIdentity(), "qfovljxywsuws",
                        new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(FhirServicePatchResource.class);
        Assertions.assertEquals("ndsytgadg", model.tags().get("r"));
        Assertions.assertEquals(ServiceManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
