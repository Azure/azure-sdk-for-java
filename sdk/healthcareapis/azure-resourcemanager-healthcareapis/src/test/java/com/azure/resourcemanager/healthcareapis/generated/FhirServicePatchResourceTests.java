// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.healthcareapis.models.FhirServicePatchResource;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityIdentity;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import com.azure.resourcemanager.healthcareapis.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FhirServicePatchResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FhirServicePatchResource model = BinaryData.fromString(
            "{\"identity\":{\"type\":\"SystemAssigned,UserAssigned\",\"principalId\":\"b46965b9-daae-4437-a87c-5fc694b0569d\",\"tenantId\":\"a44b4564-574a-44b7-8fc7-9eab89221736\",\"userAssignedIdentities\":{\"fbtkuwhhmhyk\":{\"principalId\":\"48b5f881-419a-4aa6-8f4f-c22c983bce9b\",\"clientId\":\"221f1ba6-10fb-42c0-880f-ecfc511bb5b4\"},\"xafnndlpichko\":{\"principalId\":\"229aae6e-6980-4110-9fc2-d2fecfb87508\",\"clientId\":\"8aa0aac1-703b-41f2-9fa3-53627be31a2a\"},\"cdyhbpkkpwdreqn\":{\"principalId\":\"a2087f17-57fc-4169-96ef-3f062e147676\",\"clientId\":\"f96dcac5-5bcc-46aa-b886-513f67601953\"},\"qfovljxywsuws\":{\"principalId\":\"7ec98738-d1c7-4ff4-8b50-262ce4457bd5\",\"clientId\":\"3ca883dc-1a19-42b7-9e46-505b3a335024\"}}},\"tags\":{\"r\":\"ndsytgadg\"}}")
            .toObject(FhirServicePatchResource.class);
        Assertions.assertEquals("ndsytgadg", model.tags().get("r"));
        Assertions.assertEquals(ServiceManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FhirServicePatchResource model
            = new FhirServicePatchResource().withTags(mapOf("r", "ndsytgadg"))
                .withIdentity(new ServiceManagedIdentityIdentity()
                    .withType(ServiceManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("fbtkuwhhmhyk", new UserAssignedIdentity(), "xafnndlpichko",
                        new UserAssignedIdentity(), "cdyhbpkkpwdreqn", new UserAssignedIdentity(), "qfovljxywsuws",
                        new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(FhirServicePatchResource.class);
        Assertions.assertEquals("ndsytgadg", model.tags().get("r"));
        Assertions.assertEquals(ServiceManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
