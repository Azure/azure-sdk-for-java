// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.healthcareapis.models.FhirServicePatchResource;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityIdentity;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import com.azure.resourcemanager.healthcareapis.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FhirServicePatchResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FhirServicePatchResource model = BinaryData.fromString(
            "{\"identity\":{\"type\":\"SystemAssigned,UserAssigned\",\"principalId\":\"f749d765-9260-49f3-a7e2-b2f1f5169773\",\"tenantId\":\"9eac3b5d-9cb3-4bc4-9ce4-ae8773e1637c\",\"userAssignedIdentities\":{\"fbtkuwhhmhyk\":{\"principalId\":\"f90520ff-5d6e-478a-9efb-7500beeaa218\",\"clientId\":\"15f11b91-ca5c-4647-b008-9f57f23131b4\"},\"xafnndlpichko\":{\"principalId\":\"4b699207-e211-4423-af01-8b85bd29af89\",\"clientId\":\"2687ec75-cd71-47bf-83b0-206d31b9f465\"},\"cdyhbpkkpwdreqn\":{\"principalId\":\"c777b187-cdf9-4425-8766-3467c78a7eb9\",\"clientId\":\"599a094a-e73c-47ef-810b-8325d1c89b4f\"},\"qfovljxywsuws\":{\"principalId\":\"5db76a25-aa2c-4f05-bb5d-e1feb4a335e8\",\"clientId\":\"dd852160-dfc4-425e-85a1-ef55c385176b\"}}},\"tags\":{\"r\":\"ndsytgadg\"}}")
            .toObject(FhirServicePatchResource.class);
        Assertions.assertEquals("ndsytgadg", model.tags().get("r"));
        Assertions.assertEquals(ServiceManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FhirServicePatchResource model
            = new FhirServicePatchResource().withTags(mapOf("r", "ndsytgadg"))
                .withIdentity(new ServiceManagedIdentityIdentity()
                    .withType(ServiceManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("fbtkuwhhmhyk", new UserAssignedIdentity(), "xafnndlpichko",
                        new UserAssignedIdentity(), "cdyhbpkkpwdreqn", new UserAssignedIdentity(), "qfovljxywsuws",
                        new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(FhirServicePatchResource.class);
        Assertions.assertEquals("ndsytgadg", model.tags().get("r"));
        Assertions.assertEquals(ServiceManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
