// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.generated;

import com.azure.resourcemanager.healthcareapis.models.Encryption;
import com.azure.resourcemanager.healthcareapis.models.EncryptionCustomerManagedKeyEncryption;
import com.azure.resourcemanager.healthcareapis.models.FhirServiceAcrConfiguration;
import com.azure.resourcemanager.healthcareapis.models.FhirServiceAuthenticationConfiguration;
import com.azure.resourcemanager.healthcareapis.models.FhirServiceCorsConfiguration;
import com.azure.resourcemanager.healthcareapis.models.FhirServiceExportConfiguration;
import com.azure.resourcemanager.healthcareapis.models.FhirServiceImportConfiguration;
import com.azure.resourcemanager.healthcareapis.models.FhirServiceKind;
import com.azure.resourcemanager.healthcareapis.models.ImplementationGuidesConfiguration;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityIdentity;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityType;
import com.azure.resourcemanager.healthcareapis.models.SmartDataActions;
import com.azure.resourcemanager.healthcareapis.models.SmartIdentityProviderApplication;
import com.azure.resourcemanager.healthcareapis.models.SmartIdentityProviderConfiguration;
import com.azure.resourcemanager.healthcareapis.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for FhirServices CreateOrUpdate.
 */
public final class FhirServicesCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/healthcareapis/resource-manager/Microsoft.HealthcareApis/stable/2024-03-31/examples/fhirservices/FhirServices_Create.json
     */
    /**
     * Sample code: Create or update a Fhir Service.
     * 
     * @param manager Entry point to HealthcareApisManager.
     */
    public static void
        createOrUpdateAFhirService(com.azure.resourcemanager.healthcareapis.HealthcareApisManager manager) {
        manager.fhirServices()
            .define("fhirservice1")
            .withExistingWorkspace("testRG", "workspace1")
            .withRegion("westus")
            .withTags(mapOf("additionalProp1", "string", "additionalProp2", "string", "additionalProp3", "string"))
            .withKind(FhirServiceKind.FHIR_R4)
            .withIdentity(new ServiceManagedIdentityIdentity().withType(ServiceManagedIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf(
                    "/subscriptions/subid/resourcegroups/testRG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/test-mi",
                    new UserAssignedIdentity())))
            .withAcrConfiguration(new FhirServiceAcrConfiguration().withLoginServers(Arrays.asList("test1.azurecr.io")))
            .withAuthenticationConfiguration(
                new FhirServiceAuthenticationConfiguration()
                    .withAuthority("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc")
                    .withAudience("https://azurehealthcareapis.com")
                    .withSmartProxyEnabled(true)
                    .withSmartIdentityProviders(
                        Arrays.asList(new SmartIdentityProviderConfiguration()
                            .withAuthority("https://login.b2clogin.com/11111111-1111-1111-1111-111111111111/v2.0")
                            .withApplications(Arrays.asList(new SmartIdentityProviderApplication()
                                .withClientId("22222222-2222-2222-2222-222222222222")
                                .withAudience("22222222-2222-2222-2222-222222222222")
                                .withAllowedDataActions(Arrays.asList(SmartDataActions.READ)))))))
            .withCorsConfiguration(new FhirServiceCorsConfiguration().withOrigins(Arrays.asList("*"))
                .withHeaders(Arrays.asList("*"))
                .withMethods(Arrays.asList("DELETE", "GET", "OPTIONS", "PATCH", "POST", "PUT"))
                .withMaxAge(1440)
                .withAllowCredentials(false))
            .withExportConfiguration(
                new FhirServiceExportConfiguration().withStorageAccountName("existingStorageAccount"))
            .withImportConfiguration(
                new FhirServiceImportConfiguration().withIntegrationDataStore("existingStorageAccount")
                    .withInitialImportMode(false)
                    .withEnabled(false))
            .withImplementationGuidesConfiguration(new ImplementationGuidesConfiguration().withUsCoreMissingData(false))
            .withEncryption(new Encryption().withCustomerManagedKeyEncryption(
                new EncryptionCustomerManagedKeyEncryption().withKeyEncryptionKeyUrl("fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
