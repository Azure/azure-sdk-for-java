// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The settings for Implementation Guides - defining capabilities for national standards, vendor consortiums, clinical
 * societies, etc.
 */
@Fluent
public final class ImplementationGuidesConfiguration implements JsonSerializable<ImplementationGuidesConfiguration> {
    /*
     * If US Core Missing Data requirement is enabled.
     */
    private Boolean usCoreMissingData;

    /**
     * Creates an instance of ImplementationGuidesConfiguration class.
     */
    public ImplementationGuidesConfiguration() {
    }

    /**
     * Get the usCoreMissingData property: If US Core Missing Data requirement is enabled.
     * 
     * @return the usCoreMissingData value.
     */
    public Boolean usCoreMissingData() {
        return this.usCoreMissingData;
    }

    /**
     * Set the usCoreMissingData property: If US Core Missing Data requirement is enabled.
     * 
     * @param usCoreMissingData the usCoreMissingData value to set.
     * @return the ImplementationGuidesConfiguration object itself.
     */
    public ImplementationGuidesConfiguration withUsCoreMissingData(Boolean usCoreMissingData) {
        this.usCoreMissingData = usCoreMissingData;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("usCoreMissingData", this.usCoreMissingData);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImplementationGuidesConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImplementationGuidesConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImplementationGuidesConfiguration.
     */
    public static ImplementationGuidesConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImplementationGuidesConfiguration deserializedImplementationGuidesConfiguration
                = new ImplementationGuidesConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("usCoreMissingData".equals(fieldName)) {
                    deserializedImplementationGuidesConfiguration.usCoreMissingData
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImplementationGuidesConfiguration;
        });
    }
}
