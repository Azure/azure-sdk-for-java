// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Export operation configuration information.
 */
@Fluent
public final class FhirServiceExportConfiguration implements JsonSerializable<FhirServiceExportConfiguration> {
    /*
     * The name of the default export storage account.
     */
    private String storageAccountName;

    /**
     * Creates an instance of FhirServiceExportConfiguration class.
     */
    public FhirServiceExportConfiguration() {
    }

    /**
     * Get the storageAccountName property: The name of the default export storage account.
     * 
     * @return the storageAccountName value.
     */
    public String storageAccountName() {
        return this.storageAccountName;
    }

    /**
     * Set the storageAccountName property: The name of the default export storage account.
     * 
     * @param storageAccountName the storageAccountName value to set.
     * @return the FhirServiceExportConfiguration object itself.
     */
    public FhirServiceExportConfiguration withStorageAccountName(String storageAccountName) {
        this.storageAccountName = storageAccountName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storageAccountName", this.storageAccountName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FhirServiceExportConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FhirServiceExportConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FhirServiceExportConfiguration.
     */
    public static FhirServiceExportConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FhirServiceExportConfiguration deserializedFhirServiceExportConfiguration
                = new FhirServiceExportConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageAccountName".equals(fieldName)) {
                    deserializedFhirServiceExportConfiguration.storageAccountName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFhirServiceExportConfiguration;
        });
    }
}
