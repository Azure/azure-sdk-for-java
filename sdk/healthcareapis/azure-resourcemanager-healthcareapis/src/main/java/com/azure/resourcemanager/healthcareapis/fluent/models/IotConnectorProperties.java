// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.healthcareapis.models.IotEventHubIngestionEndpointConfiguration;
import com.azure.resourcemanager.healthcareapis.models.IotMappingProperties;
import com.azure.resourcemanager.healthcareapis.models.ProvisioningState;
import java.io.IOException;

/**
 * IoT Connector properties.
 */
@Fluent
public final class IotConnectorProperties implements JsonSerializable<IotConnectorProperties> {
    /*
     * The provisioning state.
     */
    private ProvisioningState provisioningState;

    /*
     * Source configuration.
     */
    private IotEventHubIngestionEndpointConfiguration ingestionEndpointConfiguration;

    /*
     * Device Mappings.
     */
    private IotMappingProperties deviceMapping;

    /**
     * Creates an instance of IotConnectorProperties class.
     */
    public IotConnectorProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the ingestionEndpointConfiguration property: Source configuration.
     * 
     * @return the ingestionEndpointConfiguration value.
     */
    public IotEventHubIngestionEndpointConfiguration ingestionEndpointConfiguration() {
        return this.ingestionEndpointConfiguration;
    }

    /**
     * Set the ingestionEndpointConfiguration property: Source configuration.
     * 
     * @param ingestionEndpointConfiguration the ingestionEndpointConfiguration value to set.
     * @return the IotConnectorProperties object itself.
     */
    public IotConnectorProperties
        withIngestionEndpointConfiguration(IotEventHubIngestionEndpointConfiguration ingestionEndpointConfiguration) {
        this.ingestionEndpointConfiguration = ingestionEndpointConfiguration;
        return this;
    }

    /**
     * Get the deviceMapping property: Device Mappings.
     * 
     * @return the deviceMapping value.
     */
    public IotMappingProperties deviceMapping() {
        return this.deviceMapping;
    }

    /**
     * Set the deviceMapping property: Device Mappings.
     * 
     * @param deviceMapping the deviceMapping value to set.
     * @return the IotConnectorProperties object itself.
     */
    public IotConnectorProperties withDeviceMapping(IotMappingProperties deviceMapping) {
        this.deviceMapping = deviceMapping;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ingestionEndpointConfiguration() != null) {
            ingestionEndpointConfiguration().validate();
        }
        if (deviceMapping() != null) {
            deviceMapping().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("ingestionEndpointConfiguration", this.ingestionEndpointConfiguration);
        jsonWriter.writeJsonField("deviceMapping", this.deviceMapping);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IotConnectorProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IotConnectorProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IotConnectorProperties.
     */
    public static IotConnectorProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IotConnectorProperties deserializedIotConnectorProperties = new IotConnectorProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedIotConnectorProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("ingestionEndpointConfiguration".equals(fieldName)) {
                    deserializedIotConnectorProperties.ingestionEndpointConfiguration
                        = IotEventHubIngestionEndpointConfiguration.fromJson(reader);
                } else if ("deviceMapping".equals(fieldName)) {
                    deserializedIotConnectorProperties.deviceMapping = IotMappingProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIotConnectorProperties;
        });
    }
}
