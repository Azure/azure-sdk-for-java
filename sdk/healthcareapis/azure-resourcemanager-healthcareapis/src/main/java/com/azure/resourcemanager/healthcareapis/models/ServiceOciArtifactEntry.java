// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An Open Container Initiative (OCI) artifact.
 */
@Fluent
public final class ServiceOciArtifactEntry implements JsonSerializable<ServiceOciArtifactEntry> {
    /*
     * The Azure Container Registry login server.
     */
    private String loginServer;

    /*
     * The artifact name.
     */
    private String imageName;

    /*
     * The artifact digest.
     */
    private String digest;

    /**
     * Creates an instance of ServiceOciArtifactEntry class.
     */
    public ServiceOciArtifactEntry() {
    }

    /**
     * Get the loginServer property: The Azure Container Registry login server.
     * 
     * @return the loginServer value.
     */
    public String loginServer() {
        return this.loginServer;
    }

    /**
     * Set the loginServer property: The Azure Container Registry login server.
     * 
     * @param loginServer the loginServer value to set.
     * @return the ServiceOciArtifactEntry object itself.
     */
    public ServiceOciArtifactEntry withLoginServer(String loginServer) {
        this.loginServer = loginServer;
        return this;
    }

    /**
     * Get the imageName property: The artifact name.
     * 
     * @return the imageName value.
     */
    public String imageName() {
        return this.imageName;
    }

    /**
     * Set the imageName property: The artifact name.
     * 
     * @param imageName the imageName value to set.
     * @return the ServiceOciArtifactEntry object itself.
     */
    public ServiceOciArtifactEntry withImageName(String imageName) {
        this.imageName = imageName;
        return this;
    }

    /**
     * Get the digest property: The artifact digest.
     * 
     * @return the digest value.
     */
    public String digest() {
        return this.digest;
    }

    /**
     * Set the digest property: The artifact digest.
     * 
     * @param digest the digest value to set.
     * @return the ServiceOciArtifactEntry object itself.
     */
    public ServiceOciArtifactEntry withDigest(String digest) {
        this.digest = digest;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("loginServer", this.loginServer);
        jsonWriter.writeStringField("imageName", this.imageName);
        jsonWriter.writeStringField("digest", this.digest);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceOciArtifactEntry from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceOciArtifactEntry if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceOciArtifactEntry.
     */
    public static ServiceOciArtifactEntry fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceOciArtifactEntry deserializedServiceOciArtifactEntry = new ServiceOciArtifactEntry();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("loginServer".equals(fieldName)) {
                    deserializedServiceOciArtifactEntry.loginServer = reader.getString();
                } else if ("imageName".equals(fieldName)) {
                    deserializedServiceOciArtifactEntry.imageName = reader.getString();
                } else if ("digest".equals(fieldName)) {
                    deserializedServiceOciArtifactEntry.digest = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceOciArtifactEntry;
        });
    }
}
