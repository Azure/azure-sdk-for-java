// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Azure container registry configuration information.
 */
@Fluent
public final class ServiceAcrConfigurationInfo implements JsonSerializable<ServiceAcrConfigurationInfo> {
    /*
     * The list of the ACR login servers.
     */
    private List<String> loginServers;

    /*
     * The list of Open Container Initiative (OCI) artifacts.
     */
    private List<ServiceOciArtifactEntry> ociArtifacts;

    /**
     * Creates an instance of ServiceAcrConfigurationInfo class.
     */
    public ServiceAcrConfigurationInfo() {
    }

    /**
     * Get the loginServers property: The list of the ACR login servers.
     * 
     * @return the loginServers value.
     */
    public List<String> loginServers() {
        return this.loginServers;
    }

    /**
     * Set the loginServers property: The list of the ACR login servers.
     * 
     * @param loginServers the loginServers value to set.
     * @return the ServiceAcrConfigurationInfo object itself.
     */
    public ServiceAcrConfigurationInfo withLoginServers(List<String> loginServers) {
        this.loginServers = loginServers;
        return this;
    }

    /**
     * Get the ociArtifacts property: The list of Open Container Initiative (OCI) artifacts.
     * 
     * @return the ociArtifacts value.
     */
    public List<ServiceOciArtifactEntry> ociArtifacts() {
        return this.ociArtifacts;
    }

    /**
     * Set the ociArtifacts property: The list of Open Container Initiative (OCI) artifacts.
     * 
     * @param ociArtifacts the ociArtifacts value to set.
     * @return the ServiceAcrConfigurationInfo object itself.
     */
    public ServiceAcrConfigurationInfo withOciArtifacts(List<ServiceOciArtifactEntry> ociArtifacts) {
        this.ociArtifacts = ociArtifacts;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ociArtifacts() != null) {
            ociArtifacts().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("loginServers", this.loginServers, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("ociArtifacts", this.ociArtifacts, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceAcrConfigurationInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceAcrConfigurationInfo if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceAcrConfigurationInfo.
     */
    public static ServiceAcrConfigurationInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceAcrConfigurationInfo deserializedServiceAcrConfigurationInfo = new ServiceAcrConfigurationInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("loginServers".equals(fieldName)) {
                    List<String> loginServers = reader.readArray(reader1 -> reader1.getString());
                    deserializedServiceAcrConfigurationInfo.loginServers = loginServers;
                } else if ("ociArtifacts".equals(fieldName)) {
                    List<ServiceOciArtifactEntry> ociArtifacts
                        = reader.readArray(reader1 -> ServiceOciArtifactEntry.fromJson(reader1));
                    deserializedServiceAcrConfigurationInfo.ociArtifacts = ociArtifacts;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceAcrConfigurationInfo;
        });
    }
}
