// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The settings for the CORS configuration of the service instance.
 */
@Fluent
public final class CorsConfiguration implements JsonSerializable<CorsConfiguration> {
    /*
     * The origins to be allowed via CORS.
     */
    private List<String> origins;

    /*
     * The headers to be allowed via CORS.
     */
    private List<String> headers;

    /*
     * The methods to be allowed via CORS.
     */
    private List<String> methods;

    /*
     * The max age to be allowed via CORS.
     */
    private Integer maxAge;

    /*
     * If credentials are allowed via CORS.
     */
    private Boolean allowCredentials;

    /**
     * Creates an instance of CorsConfiguration class.
     */
    public CorsConfiguration() {
    }

    /**
     * Get the origins property: The origins to be allowed via CORS.
     * 
     * @return the origins value.
     */
    public List<String> origins() {
        return this.origins;
    }

    /**
     * Set the origins property: The origins to be allowed via CORS.
     * 
     * @param origins the origins value to set.
     * @return the CorsConfiguration object itself.
     */
    public CorsConfiguration withOrigins(List<String> origins) {
        this.origins = origins;
        return this;
    }

    /**
     * Get the headers property: The headers to be allowed via CORS.
     * 
     * @return the headers value.
     */
    public List<String> headers() {
        return this.headers;
    }

    /**
     * Set the headers property: The headers to be allowed via CORS.
     * 
     * @param headers the headers value to set.
     * @return the CorsConfiguration object itself.
     */
    public CorsConfiguration withHeaders(List<String> headers) {
        this.headers = headers;
        return this;
    }

    /**
     * Get the methods property: The methods to be allowed via CORS.
     * 
     * @return the methods value.
     */
    public List<String> methods() {
        return this.methods;
    }

    /**
     * Set the methods property: The methods to be allowed via CORS.
     * 
     * @param methods the methods value to set.
     * @return the CorsConfiguration object itself.
     */
    public CorsConfiguration withMethods(List<String> methods) {
        this.methods = methods;
        return this;
    }

    /**
     * Get the maxAge property: The max age to be allowed via CORS.
     * 
     * @return the maxAge value.
     */
    public Integer maxAge() {
        return this.maxAge;
    }

    /**
     * Set the maxAge property: The max age to be allowed via CORS.
     * 
     * @param maxAge the maxAge value to set.
     * @return the CorsConfiguration object itself.
     */
    public CorsConfiguration withMaxAge(Integer maxAge) {
        this.maxAge = maxAge;
        return this;
    }

    /**
     * Get the allowCredentials property: If credentials are allowed via CORS.
     * 
     * @return the allowCredentials value.
     */
    public Boolean allowCredentials() {
        return this.allowCredentials;
    }

    /**
     * Set the allowCredentials property: If credentials are allowed via CORS.
     * 
     * @param allowCredentials the allowCredentials value to set.
     * @return the CorsConfiguration object itself.
     */
    public CorsConfiguration withAllowCredentials(Boolean allowCredentials) {
        this.allowCredentials = allowCredentials;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("origins", this.origins, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("headers", this.headers, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("methods", this.methods, (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("maxAge", this.maxAge);
        jsonWriter.writeBooleanField("allowCredentials", this.allowCredentials);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CorsConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CorsConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CorsConfiguration.
     */
    public static CorsConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CorsConfiguration deserializedCorsConfiguration = new CorsConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("origins".equals(fieldName)) {
                    List<String> origins = reader.readArray(reader1 -> reader1.getString());
                    deserializedCorsConfiguration.origins = origins;
                } else if ("headers".equals(fieldName)) {
                    List<String> headers = reader.readArray(reader1 -> reader1.getString());
                    deserializedCorsConfiguration.headers = headers;
                } else if ("methods".equals(fieldName)) {
                    List<String> methods = reader.readArray(reader1 -> reader1.getString());
                    deserializedCorsConfiguration.methods = methods;
                } else if ("maxAge".equals(fieldName)) {
                    deserializedCorsConfiguration.maxAge = reader.getNullable(JsonReader::getInt);
                } else if ("allowCredentials".equals(fieldName)) {
                    deserializedCorsConfiguration.allowCredentials = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCorsConfiguration;
        });
    }
}
