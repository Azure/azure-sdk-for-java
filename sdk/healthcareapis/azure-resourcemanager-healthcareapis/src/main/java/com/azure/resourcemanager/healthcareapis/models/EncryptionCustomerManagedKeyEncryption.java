// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The encryption settings for the customer-managed key.
 */
@Fluent
public final class EncryptionCustomerManagedKeyEncryption
    implements JsonSerializable<EncryptionCustomerManagedKeyEncryption> {
    /*
     * The URL of the key to use for encryption
     */
    private String keyEncryptionKeyUrl;

    /**
     * Creates an instance of EncryptionCustomerManagedKeyEncryption class.
     */
    public EncryptionCustomerManagedKeyEncryption() {
    }

    /**
     * Get the keyEncryptionKeyUrl property: The URL of the key to use for encryption.
     * 
     * @return the keyEncryptionKeyUrl value.
     */
    public String keyEncryptionKeyUrl() {
        return this.keyEncryptionKeyUrl;
    }

    /**
     * Set the keyEncryptionKeyUrl property: The URL of the key to use for encryption.
     * 
     * @param keyEncryptionKeyUrl the keyEncryptionKeyUrl value to set.
     * @return the EncryptionCustomerManagedKeyEncryption object itself.
     */
    public EncryptionCustomerManagedKeyEncryption withKeyEncryptionKeyUrl(String keyEncryptionKeyUrl) {
        this.keyEncryptionKeyUrl = keyEncryptionKeyUrl;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyEncryptionKeyUrl", this.keyEncryptionKeyUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptionCustomerManagedKeyEncryption from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptionCustomerManagedKeyEncryption if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EncryptionCustomerManagedKeyEncryption.
     */
    public static EncryptionCustomerManagedKeyEncryption fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptionCustomerManagedKeyEncryption deserializedEncryptionCustomerManagedKeyEncryption
                = new EncryptionCustomerManagedKeyEncryption();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyEncryptionKeyUrl".equals(fieldName)) {
                    deserializedEncryptionCustomerManagedKeyEncryption.keyEncryptionKeyUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptionCustomerManagedKeyEncryption;
        });
    }
}
