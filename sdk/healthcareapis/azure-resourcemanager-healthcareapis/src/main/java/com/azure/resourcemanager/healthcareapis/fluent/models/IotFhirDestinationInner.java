// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.healthcareapis.models.IotIdentityResolutionType;
import com.azure.resourcemanager.healthcareapis.models.IotMappingProperties;
import com.azure.resourcemanager.healthcareapis.models.LocationBasedResource;
import java.io.IOException;

/**
 * IoT Connector FHIR destination definition.
 */
@Fluent
public final class IotFhirDestinationInner extends LocationBasedResource {
    /*
     * IoT FHIR Destination settings.
     */
    private IotFhirDestinationProperties innerProperties = new IotFhirDestinationProperties();

    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of IotFhirDestinationInner class.
     */
    public IotFhirDestinationInner() {
    }

    /**
     * Get the innerProperties property: IoT FHIR Destination settings.
     * 
     * @return the innerProperties value.
     */
    private IotFhirDestinationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IotFhirDestinationInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IotFhirDestinationInner withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the resourceIdentityResolutionType property: Determines how resource identity is resolved on the destination.
     * 
     * @return the resourceIdentityResolutionType value.
     */
    public IotIdentityResolutionType resourceIdentityResolutionType() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceIdentityResolutionType();
    }

    /**
     * Set the resourceIdentityResolutionType property: Determines how resource identity is resolved on the destination.
     * 
     * @param resourceIdentityResolutionType the resourceIdentityResolutionType value to set.
     * @return the IotFhirDestinationInner object itself.
     */
    public IotFhirDestinationInner
        withResourceIdentityResolutionType(IotIdentityResolutionType resourceIdentityResolutionType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IotFhirDestinationProperties();
        }
        this.innerProperties().withResourceIdentityResolutionType(resourceIdentityResolutionType);
        return this;
    }

    /**
     * Get the fhirServiceResourceId property: Fully qualified resource id of the FHIR service to connect to.
     * 
     * @return the fhirServiceResourceId value.
     */
    public String fhirServiceResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().fhirServiceResourceId();
    }

    /**
     * Set the fhirServiceResourceId property: Fully qualified resource id of the FHIR service to connect to.
     * 
     * @param fhirServiceResourceId the fhirServiceResourceId value to set.
     * @return the IotFhirDestinationInner object itself.
     */
    public IotFhirDestinationInner withFhirServiceResourceId(String fhirServiceResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IotFhirDestinationProperties();
        }
        this.innerProperties().withFhirServiceResourceId(fhirServiceResourceId);
        return this;
    }

    /**
     * Get the fhirMapping property: FHIR Mappings.
     * 
     * @return the fhirMapping value.
     */
    public IotMappingProperties fhirMapping() {
        return this.innerProperties() == null ? null : this.innerProperties().fhirMapping();
    }

    /**
     * Set the fhirMapping property: FHIR Mappings.
     * 
     * @param fhirMapping the fhirMapping value to set.
     * @return the IotFhirDestinationInner object itself.
     */
    public IotFhirDestinationInner withFhirMapping(IotMappingProperties fhirMapping) {
        if (this.innerProperties() == null) {
            this.innerProperties = new IotFhirDestinationProperties();
        }
        this.innerProperties().withFhirMapping(fhirMapping);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model IotFhirDestinationInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IotFhirDestinationInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("etag", etag());
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IotFhirDestinationInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IotFhirDestinationInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IotFhirDestinationInner.
     */
    public static IotFhirDestinationInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IotFhirDestinationInner deserializedIotFhirDestinationInner = new IotFhirDestinationInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedIotFhirDestinationInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedIotFhirDestinationInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedIotFhirDestinationInner.type = reader.getString();
                } else if ("etag".equals(fieldName)) {
                    deserializedIotFhirDestinationInner.withEtag(reader.getString());
                } else if ("location".equals(fieldName)) {
                    deserializedIotFhirDestinationInner.withLocation(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    deserializedIotFhirDestinationInner.innerProperties = IotFhirDestinationProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedIotFhirDestinationInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIotFhirDestinationInner;
        });
    }
}
