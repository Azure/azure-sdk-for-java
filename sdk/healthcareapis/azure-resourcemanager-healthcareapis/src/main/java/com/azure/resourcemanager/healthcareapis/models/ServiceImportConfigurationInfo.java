// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Import operation configuration information.
 */
@Fluent
public final class ServiceImportConfigurationInfo implements JsonSerializable<ServiceImportConfigurationInfo> {
    /*
     * The name of the default integration storage account.
     */
    private String integrationDataStore;

    /*
     * If the FHIR service is in InitialImportMode.
     */
    private Boolean initialImportMode;

    /*
     * If the import operation is enabled.
     */
    private Boolean enabled;

    /**
     * Creates an instance of ServiceImportConfigurationInfo class.
     */
    public ServiceImportConfigurationInfo() {
    }

    /**
     * Get the integrationDataStore property: The name of the default integration storage account.
     * 
     * @return the integrationDataStore value.
     */
    public String integrationDataStore() {
        return this.integrationDataStore;
    }

    /**
     * Set the integrationDataStore property: The name of the default integration storage account.
     * 
     * @param integrationDataStore the integrationDataStore value to set.
     * @return the ServiceImportConfigurationInfo object itself.
     */
    public ServiceImportConfigurationInfo withIntegrationDataStore(String integrationDataStore) {
        this.integrationDataStore = integrationDataStore;
        return this;
    }

    /**
     * Get the initialImportMode property: If the FHIR service is in InitialImportMode.
     * 
     * @return the initialImportMode value.
     */
    public Boolean initialImportMode() {
        return this.initialImportMode;
    }

    /**
     * Set the initialImportMode property: If the FHIR service is in InitialImportMode.
     * 
     * @param initialImportMode the initialImportMode value to set.
     * @return the ServiceImportConfigurationInfo object itself.
     */
    public ServiceImportConfigurationInfo withInitialImportMode(Boolean initialImportMode) {
        this.initialImportMode = initialImportMode;
        return this;
    }

    /**
     * Get the enabled property: If the import operation is enabled.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: If the import operation is enabled.
     * 
     * @param enabled the enabled value to set.
     * @return the ServiceImportConfigurationInfo object itself.
     */
    public ServiceImportConfigurationInfo withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("integrationDataStore", this.integrationDataStore);
        jsonWriter.writeBooleanField("initialImportMode", this.initialImportMode);
        jsonWriter.writeBooleanField("enabled", this.enabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceImportConfigurationInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceImportConfigurationInfo if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceImportConfigurationInfo.
     */
    public static ServiceImportConfigurationInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceImportConfigurationInfo deserializedServiceImportConfigurationInfo
                = new ServiceImportConfigurationInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("integrationDataStore".equals(fieldName)) {
                    deserializedServiceImportConfigurationInfo.integrationDataStore = reader.getString();
                } else if ("initialImportMode".equals(fieldName)) {
                    deserializedServiceImportConfigurationInfo.initialImportMode
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("enabled".equals(fieldName)) {
                    deserializedServiceImportConfigurationInfo.enabled = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceImportConfigurationInfo;
        });
    }
}
