// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Managed service identity (system assigned and/or user assigned identities).
 */
@Fluent
public class ServiceManagedIdentity implements JsonSerializable<ServiceManagedIdentity> {
    /*
     * Setting indicating whether the service has a managed identity associated with it.
     */
    private ServiceManagedIdentityIdentity identity;

    /**
     * Creates an instance of ServiceManagedIdentity class.
     */
    public ServiceManagedIdentity() {
    }

    /**
     * Get the identity property: Setting indicating whether the service has a managed identity associated with it.
     * 
     * @return the identity value.
     */
    public ServiceManagedIdentityIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Setting indicating whether the service has a managed identity associated with it.
     * 
     * @param identity the identity value to set.
     * @return the ServiceManagedIdentity object itself.
     */
    public ServiceManagedIdentity withIdentity(ServiceManagedIdentityIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("identity", this.identity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceManagedIdentity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceManagedIdentity if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceManagedIdentity.
     */
    public static ServiceManagedIdentity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceManagedIdentity deserializedServiceManagedIdentity = new ServiceManagedIdentity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("identity".equals(fieldName)) {
                    deserializedServiceManagedIdentity.identity = ServiceManagedIdentityIdentity.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceManagedIdentity;
        });
    }
}
