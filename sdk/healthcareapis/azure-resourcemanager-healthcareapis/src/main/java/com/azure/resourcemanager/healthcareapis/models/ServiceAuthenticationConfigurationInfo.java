// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Authentication configuration information.
 */
@Fluent
public final class ServiceAuthenticationConfigurationInfo
    implements JsonSerializable<ServiceAuthenticationConfigurationInfo> {
    /*
     * The authority url for the service
     */
    private String authority;

    /*
     * The audience url for the service
     */
    private String audience;

    /*
     * If the SMART on FHIR proxy is enabled
     */
    private Boolean smartProxyEnabled;

    /**
     * Creates an instance of ServiceAuthenticationConfigurationInfo class.
     */
    public ServiceAuthenticationConfigurationInfo() {
    }

    /**
     * Get the authority property: The authority url for the service.
     * 
     * @return the authority value.
     */
    public String authority() {
        return this.authority;
    }

    /**
     * Set the authority property: The authority url for the service.
     * 
     * @param authority the authority value to set.
     * @return the ServiceAuthenticationConfigurationInfo object itself.
     */
    public ServiceAuthenticationConfigurationInfo withAuthority(String authority) {
        this.authority = authority;
        return this;
    }

    /**
     * Get the audience property: The audience url for the service.
     * 
     * @return the audience value.
     */
    public String audience() {
        return this.audience;
    }

    /**
     * Set the audience property: The audience url for the service.
     * 
     * @param audience the audience value to set.
     * @return the ServiceAuthenticationConfigurationInfo object itself.
     */
    public ServiceAuthenticationConfigurationInfo withAudience(String audience) {
        this.audience = audience;
        return this;
    }

    /**
     * Get the smartProxyEnabled property: If the SMART on FHIR proxy is enabled.
     * 
     * @return the smartProxyEnabled value.
     */
    public Boolean smartProxyEnabled() {
        return this.smartProxyEnabled;
    }

    /**
     * Set the smartProxyEnabled property: If the SMART on FHIR proxy is enabled.
     * 
     * @param smartProxyEnabled the smartProxyEnabled value to set.
     * @return the ServiceAuthenticationConfigurationInfo object itself.
     */
    public ServiceAuthenticationConfigurationInfo withSmartProxyEnabled(Boolean smartProxyEnabled) {
        this.smartProxyEnabled = smartProxyEnabled;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("authority", this.authority);
        jsonWriter.writeStringField("audience", this.audience);
        jsonWriter.writeBooleanField("smartProxyEnabled", this.smartProxyEnabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceAuthenticationConfigurationInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceAuthenticationConfigurationInfo if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceAuthenticationConfigurationInfo.
     */
    public static ServiceAuthenticationConfigurationInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceAuthenticationConfigurationInfo deserializedServiceAuthenticationConfigurationInfo
                = new ServiceAuthenticationConfigurationInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authority".equals(fieldName)) {
                    deserializedServiceAuthenticationConfigurationInfo.authority = reader.getString();
                } else if ("audience".equals(fieldName)) {
                    deserializedServiceAuthenticationConfigurationInfo.audience = reader.getString();
                } else if ("smartProxyEnabled".equals(fieldName)) {
                    deserializedServiceAuthenticationConfigurationInfo.smartProxyEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceAuthenticationConfigurationInfo;
        });
    }
}
