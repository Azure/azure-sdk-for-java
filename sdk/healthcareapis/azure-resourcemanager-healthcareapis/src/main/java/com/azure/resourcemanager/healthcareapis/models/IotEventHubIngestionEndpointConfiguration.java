// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Event Hub ingestion endpoint configuration.
 */
@Fluent
public final class IotEventHubIngestionEndpointConfiguration
    implements JsonSerializable<IotEventHubIngestionEndpointConfiguration> {
    /*
     * Event Hub name to connect to.
     */
    private String eventHubName;

    /*
     * Consumer group of the event hub to connected to.
     */
    private String consumerGroup;

    /*
     * Fully qualified namespace of the Event Hub to connect to.
     */
    private String fullyQualifiedEventHubNamespace;

    /**
     * Creates an instance of IotEventHubIngestionEndpointConfiguration class.
     */
    public IotEventHubIngestionEndpointConfiguration() {
    }

    /**
     * Get the eventHubName property: Event Hub name to connect to.
     * 
     * @return the eventHubName value.
     */
    public String eventHubName() {
        return this.eventHubName;
    }

    /**
     * Set the eventHubName property: Event Hub name to connect to.
     * 
     * @param eventHubName the eventHubName value to set.
     * @return the IotEventHubIngestionEndpointConfiguration object itself.
     */
    public IotEventHubIngestionEndpointConfiguration withEventHubName(String eventHubName) {
        this.eventHubName = eventHubName;
        return this;
    }

    /**
     * Get the consumerGroup property: Consumer group of the event hub to connected to.
     * 
     * @return the consumerGroup value.
     */
    public String consumerGroup() {
        return this.consumerGroup;
    }

    /**
     * Set the consumerGroup property: Consumer group of the event hub to connected to.
     * 
     * @param consumerGroup the consumerGroup value to set.
     * @return the IotEventHubIngestionEndpointConfiguration object itself.
     */
    public IotEventHubIngestionEndpointConfiguration withConsumerGroup(String consumerGroup) {
        this.consumerGroup = consumerGroup;
        return this;
    }

    /**
     * Get the fullyQualifiedEventHubNamespace property: Fully qualified namespace of the Event Hub to connect to.
     * 
     * @return the fullyQualifiedEventHubNamespace value.
     */
    public String fullyQualifiedEventHubNamespace() {
        return this.fullyQualifiedEventHubNamespace;
    }

    /**
     * Set the fullyQualifiedEventHubNamespace property: Fully qualified namespace of the Event Hub to connect to.
     * 
     * @param fullyQualifiedEventHubNamespace the fullyQualifiedEventHubNamespace value to set.
     * @return the IotEventHubIngestionEndpointConfiguration object itself.
     */
    public IotEventHubIngestionEndpointConfiguration
        withFullyQualifiedEventHubNamespace(String fullyQualifiedEventHubNamespace) {
        this.fullyQualifiedEventHubNamespace = fullyQualifiedEventHubNamespace;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("eventHubName", this.eventHubName);
        jsonWriter.writeStringField("consumerGroup", this.consumerGroup);
        jsonWriter.writeStringField("fullyQualifiedEventHubNamespace", this.fullyQualifiedEventHubNamespace);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IotEventHubIngestionEndpointConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IotEventHubIngestionEndpointConfiguration if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IotEventHubIngestionEndpointConfiguration.
     */
    public static IotEventHubIngestionEndpointConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IotEventHubIngestionEndpointConfiguration deserializedIotEventHubIngestionEndpointConfiguration
                = new IotEventHubIngestionEndpointConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("eventHubName".equals(fieldName)) {
                    deserializedIotEventHubIngestionEndpointConfiguration.eventHubName = reader.getString();
                } else if ("consumerGroup".equals(fieldName)) {
                    deserializedIotEventHubIngestionEndpointConfiguration.consumerGroup = reader.getString();
                } else if ("fullyQualifiedEventHubNamespace".equals(fieldName)) {
                    deserializedIotEventHubIngestionEndpointConfiguration.fullyQualifiedEventHubNamespace
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIotEventHubIngestionEndpointConfiguration;
        });
    }
}
