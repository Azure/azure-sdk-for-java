// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.healthcareapis.models.ActionType;
import com.azure.resourcemanager.healthcareapis.models.OperationDisplay;
import com.azure.resourcemanager.healthcareapis.models.OperationProperties;
import java.io.IOException;

/**
 * Service REST API operation.
 */
@Fluent
public final class OperationDetailInner implements JsonSerializable<OperationDetailInner> {
    /*
     * Name of the operation
     */
    private String name;

    /*
     * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for
     * ARM/control-plane operations.
     */
    private Boolean isDataAction;

    /*
     * Display of the operation
     */
    private OperationDisplay display;

    /*
     * Default value is 'user,system'.
     */
    private String origin;

    /*
     * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
     */
    private ActionType actionType;

    /*
     * Properties of the operation
     */
    private OperationProperties properties;

    /**
     * Creates an instance of OperationDetailInner class.
     */
    public OperationDetailInner() {
    }

    /**
     * Get the name property: Name of the operation.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the isDataAction property: Whether the operation applies to data-plane. This is "true" for data-plane
     * operations and "false" for ARM/control-plane operations.
     * 
     * @return the isDataAction value.
     */
    public Boolean isDataAction() {
        return this.isDataAction;
    }

    /**
     * Get the display property: Display of the operation.
     * 
     * @return the display value.
     */
    public OperationDisplay display() {
        return this.display;
    }

    /**
     * Set the display property: Display of the operation.
     * 
     * @param display the display value to set.
     * @return the OperationDetailInner object itself.
     */
    public OperationDetailInner withDisplay(OperationDisplay display) {
        this.display = display;
        return this;
    }

    /**
     * Get the origin property: Default value is 'user,system'.
     * 
     * @return the origin value.
     */
    public String origin() {
        return this.origin;
    }

    /**
     * Get the actionType property: Enum. Indicates the action type. "Internal" refers to actions that are for internal
     * only APIs.
     * 
     * @return the actionType value.
     */
    public ActionType actionType() {
        return this.actionType;
    }

    /**
     * Get the properties property: Properties of the operation.
     * 
     * @return the properties value.
     */
    public OperationProperties properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Properties of the operation.
     * 
     * @param properties the properties value to set.
     * @return the OperationDetailInner object itself.
     */
    public OperationDetailInner withProperties(OperationProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (display() != null) {
            display().validate();
        }
        if (properties() != null) {
            properties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("display", this.display);
        jsonWriter.writeJsonField("properties", this.properties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperationDetailInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperationDetailInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OperationDetailInner.
     */
    public static OperationDetailInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperationDetailInner deserializedOperationDetailInner = new OperationDetailInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedOperationDetailInner.name = reader.getString();
                } else if ("isDataAction".equals(fieldName)) {
                    deserializedOperationDetailInner.isDataAction = reader.getNullable(JsonReader::getBoolean);
                } else if ("display".equals(fieldName)) {
                    deserializedOperationDetailInner.display = OperationDisplay.fromJson(reader);
                } else if ("origin".equals(fieldName)) {
                    deserializedOperationDetailInner.origin = reader.getString();
                } else if ("actionType".equals(fieldName)) {
                    deserializedOperationDetailInner.actionType = ActionType.fromString(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    deserializedOperationDetailInner.properties = OperationProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperationDetailInner;
        });
    }
}
