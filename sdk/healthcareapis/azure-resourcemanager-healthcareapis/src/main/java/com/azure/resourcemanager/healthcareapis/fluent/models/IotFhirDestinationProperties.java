// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.healthcareapis.models.IotDestinationProperties;
import com.azure.resourcemanager.healthcareapis.models.IotIdentityResolutionType;
import com.azure.resourcemanager.healthcareapis.models.IotMappingProperties;
import com.azure.resourcemanager.healthcareapis.models.ProvisioningState;
import java.io.IOException;

/**
 * IoT Connector destination properties for an Azure FHIR service.
 */
@Fluent
public final class IotFhirDestinationProperties extends IotDestinationProperties {
    /*
     * Determines how resource identity is resolved on the destination.
     */
    private IotIdentityResolutionType resourceIdentityResolutionType;

    /*
     * Fully qualified resource id of the FHIR service to connect to.
     */
    private String fhirServiceResourceId;

    /*
     * FHIR Mappings
     */
    private IotMappingProperties fhirMapping;

    /*
     * The provisioning state.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of IotFhirDestinationProperties class.
     */
    public IotFhirDestinationProperties() {
    }

    /**
     * Get the resourceIdentityResolutionType property: Determines how resource identity is resolved on the destination.
     * 
     * @return the resourceIdentityResolutionType value.
     */
    public IotIdentityResolutionType resourceIdentityResolutionType() {
        return this.resourceIdentityResolutionType;
    }

    /**
     * Set the resourceIdentityResolutionType property: Determines how resource identity is resolved on the destination.
     * 
     * @param resourceIdentityResolutionType the resourceIdentityResolutionType value to set.
     * @return the IotFhirDestinationProperties object itself.
     */
    public IotFhirDestinationProperties
        withResourceIdentityResolutionType(IotIdentityResolutionType resourceIdentityResolutionType) {
        this.resourceIdentityResolutionType = resourceIdentityResolutionType;
        return this;
    }

    /**
     * Get the fhirServiceResourceId property: Fully qualified resource id of the FHIR service to connect to.
     * 
     * @return the fhirServiceResourceId value.
     */
    public String fhirServiceResourceId() {
        return this.fhirServiceResourceId;
    }

    /**
     * Set the fhirServiceResourceId property: Fully qualified resource id of the FHIR service to connect to.
     * 
     * @param fhirServiceResourceId the fhirServiceResourceId value to set.
     * @return the IotFhirDestinationProperties object itself.
     */
    public IotFhirDestinationProperties withFhirServiceResourceId(String fhirServiceResourceId) {
        this.fhirServiceResourceId = fhirServiceResourceId;
        return this;
    }

    /**
     * Get the fhirMapping property: FHIR Mappings.
     * 
     * @return the fhirMapping value.
     */
    public IotMappingProperties fhirMapping() {
        return this.fhirMapping;
    }

    /**
     * Set the fhirMapping property: FHIR Mappings.
     * 
     * @param fhirMapping the fhirMapping value to set.
     * @return the IotFhirDestinationProperties object itself.
     */
    public IotFhirDestinationProperties withFhirMapping(IotMappingProperties fhirMapping) {
        this.fhirMapping = fhirMapping;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state.
     * 
     * @return the provisioningState value.
     */
    @Override
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (resourceIdentityResolutionType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceIdentityResolutionType in model IotFhirDestinationProperties"));
        }
        if (fhirServiceResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property fhirServiceResourceId in model IotFhirDestinationProperties"));
        }
        if (fhirMapping() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property fhirMapping in model IotFhirDestinationProperties"));
        } else {
            fhirMapping().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IotFhirDestinationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceIdentityResolutionType",
            this.resourceIdentityResolutionType == null ? null : this.resourceIdentityResolutionType.toString());
        jsonWriter.writeStringField("fhirServiceResourceId", this.fhirServiceResourceId);
        jsonWriter.writeJsonField("fhirMapping", this.fhirMapping);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IotFhirDestinationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IotFhirDestinationProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IotFhirDestinationProperties.
     */
    public static IotFhirDestinationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IotFhirDestinationProperties deserializedIotFhirDestinationProperties = new IotFhirDestinationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedIotFhirDestinationProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("resourceIdentityResolutionType".equals(fieldName)) {
                    deserializedIotFhirDestinationProperties.resourceIdentityResolutionType
                        = IotIdentityResolutionType.fromString(reader.getString());
                } else if ("fhirServiceResourceId".equals(fieldName)) {
                    deserializedIotFhirDestinationProperties.fhirServiceResourceId = reader.getString();
                } else if ("fhirMapping".equals(fieldName)) {
                    deserializedIotFhirDestinationProperties.fhirMapping = IotMappingProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIotFhirDestinationProperties;
        });
    }
}
