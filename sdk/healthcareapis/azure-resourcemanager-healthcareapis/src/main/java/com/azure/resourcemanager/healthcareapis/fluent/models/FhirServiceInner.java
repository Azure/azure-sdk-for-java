// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.healthcareapis.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.healthcareapis.models.Encryption;
import com.azure.resourcemanager.healthcareapis.models.FhirServiceAcrConfiguration;
import com.azure.resourcemanager.healthcareapis.models.FhirServiceAuthenticationConfiguration;
import com.azure.resourcemanager.healthcareapis.models.FhirServiceCorsConfiguration;
import com.azure.resourcemanager.healthcareapis.models.FhirServiceExportConfiguration;
import com.azure.resourcemanager.healthcareapis.models.FhirServiceImportConfiguration;
import com.azure.resourcemanager.healthcareapis.models.FhirServiceKind;
import com.azure.resourcemanager.healthcareapis.models.ImplementationGuidesConfiguration;
import com.azure.resourcemanager.healthcareapis.models.PrivateEndpointConnection;
import com.azure.resourcemanager.healthcareapis.models.ProvisioningState;
import com.azure.resourcemanager.healthcareapis.models.PublicNetworkAccess;
import com.azure.resourcemanager.healthcareapis.models.ResourceVersionPolicyConfiguration;
import com.azure.resourcemanager.healthcareapis.models.ServiceEventState;
import com.azure.resourcemanager.healthcareapis.models.ServiceManagedIdentityIdentity;
import com.azure.resourcemanager.healthcareapis.models.TaggedResource;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The description of Fhir Service.
 */
@Fluent
public final class FhirServiceInner extends TaggedResource {
    /*
     * The kind of the service.
     */
    private FhirServiceKind kind;

    /*
     * Fhir Service configuration.
     */
    private FhirServiceProperties innerProperties;

    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    private SystemData systemData;

    /*
     * Setting indicating whether the service has a managed identity associated with it.
     */
    private ServiceManagedIdentityIdentity identity;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of FhirServiceInner class.
     */
    public FhirServiceInner() {
    }

    /**
     * Get the kind property: The kind of the service.
     * 
     * @return the kind value.
     */
    public FhirServiceKind kind() {
        return this.kind;
    }

    /**
     * Set the kind property: The kind of the service.
     * 
     * @param kind the kind value to set.
     * @return the FhirServiceInner object itself.
     */
    public FhirServiceInner withKind(FhirServiceKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the innerProperties property: Fhir Service configuration.
     * 
     * @return the innerProperties value.
     */
    private FhirServiceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the identity property: Setting indicating whether the service has a managed identity associated with it.
     * 
     * @return the identity value.
     */
    public ServiceManagedIdentityIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Setting indicating whether the service has a managed identity associated with it.
     * 
     * @param identity the identity value to set.
     * @return the FhirServiceInner object itself.
     */
    public FhirServiceInner withIdentity(ServiceManagedIdentityIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FhirServiceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FhirServiceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FhirServiceInner withEtag(String etag) {
        super.withEtag(etag);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the acrConfiguration property: Fhir Service Azure container registry configuration.
     * 
     * @return the acrConfiguration value.
     */
    public FhirServiceAcrConfiguration acrConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().acrConfiguration();
    }

    /**
     * Set the acrConfiguration property: Fhir Service Azure container registry configuration.
     * 
     * @param acrConfiguration the acrConfiguration value to set.
     * @return the FhirServiceInner object itself.
     */
    public FhirServiceInner withAcrConfiguration(FhirServiceAcrConfiguration acrConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FhirServiceProperties();
        }
        this.innerProperties().withAcrConfiguration(acrConfiguration);
        return this;
    }

    /**
     * Get the authenticationConfiguration property: Fhir Service authentication configuration.
     * 
     * @return the authenticationConfiguration value.
     */
    public FhirServiceAuthenticationConfiguration authenticationConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().authenticationConfiguration();
    }

    /**
     * Set the authenticationConfiguration property: Fhir Service authentication configuration.
     * 
     * @param authenticationConfiguration the authenticationConfiguration value to set.
     * @return the FhirServiceInner object itself.
     */
    public FhirServiceInner
        withAuthenticationConfiguration(FhirServiceAuthenticationConfiguration authenticationConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FhirServiceProperties();
        }
        this.innerProperties().withAuthenticationConfiguration(authenticationConfiguration);
        return this;
    }

    /**
     * Get the corsConfiguration property: Fhir Service Cors configuration.
     * 
     * @return the corsConfiguration value.
     */
    public FhirServiceCorsConfiguration corsConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().corsConfiguration();
    }

    /**
     * Set the corsConfiguration property: Fhir Service Cors configuration.
     * 
     * @param corsConfiguration the corsConfiguration value to set.
     * @return the FhirServiceInner object itself.
     */
    public FhirServiceInner withCorsConfiguration(FhirServiceCorsConfiguration corsConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FhirServiceProperties();
        }
        this.innerProperties().withCorsConfiguration(corsConfiguration);
        return this;
    }

    /**
     * Get the exportConfiguration property: Fhir Service export configuration.
     * 
     * @return the exportConfiguration value.
     */
    public FhirServiceExportConfiguration exportConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().exportConfiguration();
    }

    /**
     * Set the exportConfiguration property: Fhir Service export configuration.
     * 
     * @param exportConfiguration the exportConfiguration value to set.
     * @return the FhirServiceInner object itself.
     */
    public FhirServiceInner withExportConfiguration(FhirServiceExportConfiguration exportConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FhirServiceProperties();
        }
        this.innerProperties().withExportConfiguration(exportConfiguration);
        return this;
    }

    /**
     * Get the privateEndpointConnections property: The list of private endpoint connections that are set up for this
     * resource.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnection> privateEndpointConnections() {
        return this.innerProperties() == null ? null : this.innerProperties().privateEndpointConnections();
    }

    /**
     * Get the publicNetworkAccess property: Control permission for data plane traffic coming from public networks while
     * private endpoint is enabled.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.innerProperties() == null ? null : this.innerProperties().publicNetworkAccess();
    }

    /**
     * Set the publicNetworkAccess property: Control permission for data plane traffic coming from public networks while
     * private endpoint is enabled.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the FhirServiceInner object itself.
     */
    public FhirServiceInner withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FhirServiceProperties();
        }
        this.innerProperties().withPublicNetworkAccess(publicNetworkAccess);
        return this;
    }

    /**
     * Get the eventState property: Fhir Service event support status.
     * 
     * @return the eventState value.
     */
    public ServiceEventState eventState() {
        return this.innerProperties() == null ? null : this.innerProperties().eventState();
    }

    /**
     * Get the resourceVersionPolicyConfiguration property: Determines tracking of history for resources.
     * 
     * @return the resourceVersionPolicyConfiguration value.
     */
    public ResourceVersionPolicyConfiguration resourceVersionPolicyConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceVersionPolicyConfiguration();
    }

    /**
     * Set the resourceVersionPolicyConfiguration property: Determines tracking of history for resources.
     * 
     * @param resourceVersionPolicyConfiguration the resourceVersionPolicyConfiguration value to set.
     * @return the FhirServiceInner object itself.
     */
    public FhirServiceInner
        withResourceVersionPolicyConfiguration(ResourceVersionPolicyConfiguration resourceVersionPolicyConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FhirServiceProperties();
        }
        this.innerProperties().withResourceVersionPolicyConfiguration(resourceVersionPolicyConfiguration);
        return this;
    }

    /**
     * Get the importConfiguration property: Fhir Service import configuration.
     * 
     * @return the importConfiguration value.
     */
    public FhirServiceImportConfiguration importConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().importConfiguration();
    }

    /**
     * Set the importConfiguration property: Fhir Service import configuration.
     * 
     * @param importConfiguration the importConfiguration value to set.
     * @return the FhirServiceInner object itself.
     */
    public FhirServiceInner withImportConfiguration(FhirServiceImportConfiguration importConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FhirServiceProperties();
        }
        this.innerProperties().withImportConfiguration(importConfiguration);
        return this;
    }

    /**
     * Get the implementationGuidesConfiguration property: Implementation Guides configuration.
     * 
     * @return the implementationGuidesConfiguration value.
     */
    public ImplementationGuidesConfiguration implementationGuidesConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().implementationGuidesConfiguration();
    }

    /**
     * Set the implementationGuidesConfiguration property: Implementation Guides configuration.
     * 
     * @param implementationGuidesConfiguration the implementationGuidesConfiguration value to set.
     * @return the FhirServiceInner object itself.
     */
    public FhirServiceInner
        withImplementationGuidesConfiguration(ImplementationGuidesConfiguration implementationGuidesConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FhirServiceProperties();
        }
        this.innerProperties().withImplementationGuidesConfiguration(implementationGuidesConfiguration);
        return this;
    }

    /**
     * Get the encryption property: The encryption settings of the FHIR service.
     * 
     * @return the encryption value.
     */
    public Encryption encryption() {
        return this.innerProperties() == null ? null : this.innerProperties().encryption();
    }

    /**
     * Set the encryption property: The encryption settings of the FHIR service.
     * 
     * @param encryption the encryption value to set.
     * @return the FhirServiceInner object itself.
     */
    public FhirServiceInner withEncryption(Encryption encryption) {
        if (this.innerProperties() == null) {
            this.innerProperties = new FhirServiceProperties();
        }
        this.innerProperties().withEncryption(encryption);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("etag", etag());
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("identity", this.identity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FhirServiceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FhirServiceInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FhirServiceInner.
     */
    public static FhirServiceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FhirServiceInner deserializedFhirServiceInner = new FhirServiceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedFhirServiceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedFhirServiceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedFhirServiceInner.type = reader.getString();
                } else if ("etag".equals(fieldName)) {
                    deserializedFhirServiceInner.withEtag(reader.getString());
                } else if ("location".equals(fieldName)) {
                    deserializedFhirServiceInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedFhirServiceInner.withTags(tags);
                } else if ("kind".equals(fieldName)) {
                    deserializedFhirServiceInner.kind = FhirServiceKind.fromString(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    deserializedFhirServiceInner.innerProperties = FhirServiceProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedFhirServiceInner.systemData = SystemData.fromJson(reader);
                } else if ("identity".equals(fieldName)) {
                    deserializedFhirServiceInner.identity = ServiceManagedIdentityIdentity.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFhirServiceInner;
        });
    }
}
