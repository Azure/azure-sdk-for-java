/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * def
 */

package com.microsoft.azure.management.healthcareapis.v2020_03_30.implementation;

import com.microsoft.azure.arm.resources.collection.implementation.GroupableResourcesCoreImpl;
import com.microsoft.azure.management.healthcareapis.v2020_03_30.Services;
import com.microsoft.azure.management.healthcareapis.v2020_03_30.ServicesDescription;
import rx.Observable;
import rx.Completable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import com.microsoft.azure.arm.resources.ResourceUtilsCore;
import com.microsoft.azure.arm.utils.RXMapper;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.healthcareapis.v2020_03_30.ServicesNameAvailabilityInfo;
import com.microsoft.azure.management.healthcareapis.v2020_03_30.CheckNameAvailabilityParameters;

class ServicesImpl extends GroupableResourcesCoreImpl<ServicesDescription, ServicesDescriptionImpl, ServicesDescriptionInner, ServicesInner, HealthcareApisManager>  implements Services {
    protected ServicesImpl(HealthcareApisManager manager) {
        super(manager.inner().services(), manager);
    }

    @Override
    protected Observable<ServicesDescriptionInner> getInnerAsync(String resourceGroupName, String name) {
        ServicesInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    protected Completable deleteInnerAsync(String resourceGroupName, String name) {
        ServicesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<String> deleteByIdsAsync(Collection<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return Observable.empty();
        }
        Collection<Observable<String>> observables = new ArrayList<>();
        for (String id : ids) {
            final String resourceGroupName = ResourceUtilsCore.groupFromResourceId(id);
            final String name = ResourceUtilsCore.nameFromResourceId(id);
            Observable<String> o = RXMapper.map(this.inner().deleteAsync(resourceGroupName, name), id);
            observables.add(o);
        }
        return Observable.mergeDelayError(observables);
    }

    @Override
    public Observable<String> deleteByIdsAsync(String...ids) {
        return this.deleteByIdsAsync(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public void deleteByIds(Collection<String> ids) {
        if (ids != null && !ids.isEmpty()) {
            this.deleteByIdsAsync(ids).toBlocking().last();
        }
    }

    @Override
    public void deleteByIds(String...ids) {
        this.deleteByIds(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public PagedList<ServicesDescription> listByResourceGroup(String resourceGroupName) {
        ServicesInner client = this.inner();
        return this.wrapList(client.listByResourceGroup(resourceGroupName));
    }

    @Override
    public Observable<ServicesDescription> listByResourceGroupAsync(String resourceGroupName) {
        ServicesInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMapIterable(new Func1<Page<ServicesDescriptionInner>, Iterable<ServicesDescriptionInner>>() {
            @Override
            public Iterable<ServicesDescriptionInner> call(Page<ServicesDescriptionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ServicesDescriptionInner, ServicesDescription>() {
            @Override
            public ServicesDescription call(ServicesDescriptionInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public PagedList<ServicesDescription> list() {
        ServicesInner client = this.inner();
        return this.wrapList(client.list());
    }

    @Override
    public Observable<ServicesDescription> listAsync() {
        ServicesInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<ServicesDescriptionInner>, Iterable<ServicesDescriptionInner>>() {
            @Override
            public Iterable<ServicesDescriptionInner> call(Page<ServicesDescriptionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ServicesDescriptionInner, ServicesDescription>() {
            @Override
            public ServicesDescription call(ServicesDescriptionInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public ServicesDescriptionImpl define(String name) {
        return wrapModel(name);
    }

    @Override
    public Observable<ServicesNameAvailabilityInfo> checkNameAvailabilityAsync(CheckNameAvailabilityParameters checkNameAvailabilityInputs) {
        ServicesInner client = this.inner();
        return client.checkNameAvailabilityAsync(checkNameAvailabilityInputs)
        .map(new Func1<ServicesNameAvailabilityInfoInner, ServicesNameAvailabilityInfo>() {
            @Override
            public ServicesNameAvailabilityInfo call(ServicesNameAvailabilityInfoInner inner) {
                return new ServicesNameAvailabilityInfoImpl(inner, manager());
            }
        });
    }

    @Override
    protected ServicesDescriptionImpl wrapModel(ServicesDescriptionInner inner) {
        return  new ServicesDescriptionImpl(inner.name(), inner, manager());
    }

    @Override
    protected ServicesDescriptionImpl wrapModel(String name) {
        return new ServicesDescriptionImpl(name, new ServicesDescriptionInner(), this.manager());
    }

}
