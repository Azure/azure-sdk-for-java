/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.healthcareapis.v2020_03_15.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.healthcareapis.v2020_03_15.CheckNameAvailabilityParameters;
import com.microsoft.azure.management.healthcareapis.v2020_03_15.ServicesPatchDescription;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Services.
 */
public class ServicesInner implements InnerSupportsGet<ServicesDescriptionInner>, InnerSupportsDelete<Void>, InnerSupportsListing<ServicesDescriptionInner> {
    /** The Retrofit service to perform REST calls. */
    private ServicesService service;
    /** The service client containing this operation class. */
    private HealthcareApisManagementClientImpl client;

    /**
     * Initializes an instance of ServicesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ServicesInner(Retrofit retrofit, HealthcareApisManagementClientImpl client) {
        this.service = retrofit.create(ServicesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Services to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ServicesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.healthcareapis.v2020_03_15.Services getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthcareApis/services/{resourceName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.healthcareapis.v2020_03_15.Services createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthcareApis/services/{resourceName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Body ServicesDescriptionInner serviceDescription, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.healthcareapis.v2020_03_15.Services beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthcareApis/services/{resourceName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Body ServicesDescriptionInner serviceDescription, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.healthcareapis.v2020_03_15.Services update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthcareApis/services/{resourceName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ServicesPatchDescription servicePatchDescription, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.healthcareapis.v2020_03_15.Services beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthcareApis/services/{resourceName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ServicesPatchDescription servicePatchDescription, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.healthcareapis.v2020_03_15.Services delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthcareApis/services/{resourceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.healthcareapis.v2020_03_15.Services beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthcareApis/services/{resourceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("resourceName") String resourceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.healthcareapis.v2020_03_15.Services list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.HealthcareApis/services")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.healthcareapis.v2020_03_15.Services listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthcareApis/services")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.healthcareapis.v2020_03_15.Services checkNameAvailability" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.HealthcareApis/checkNameAvailability")
        Observable<Response<ResponseBody>> checkNameAvailability(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Body CheckNameAvailabilityParameters checkNameAvailabilityInputs, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.healthcareapis.v2020_03_15.Services listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.healthcareapis.v2020_03_15.Services listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServicesDescriptionInner object if successful.
     */
    public ServicesDescriptionInner getByResourceGroup(String resourceGroupName, String resourceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().single().body();
    }

    /**
     * Get the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServicesDescriptionInner> getByResourceGroupAsync(String resourceGroupName, String resourceName, final ServiceCallback<ServicesDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Get the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServicesDescriptionInner object
     */
    public Observable<ServicesDescriptionInner> getByResourceGroupAsync(String resourceGroupName, String resourceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<ServicesDescriptionInner>, ServicesDescriptionInner>() {
            @Override
            public ServicesDescriptionInner call(ServiceResponse<ServicesDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServicesDescriptionInner object
     */
    public Observable<ServiceResponse<ServicesDescriptionInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServicesDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<ServicesDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServicesDescriptionInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServicesDescriptionInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ServicesDescriptionInner, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ServicesDescriptionInner>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Create or update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param serviceDescription The service instance metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServicesDescriptionInner object if successful.
     */
    public ServicesDescriptionInner createOrUpdate(String resourceGroupName, String resourceName, ServicesDescriptionInner serviceDescription) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, serviceDescription).toBlocking().last().body();
    }

    /**
     * Create or update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param serviceDescription The service instance metadata.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServicesDescriptionInner> createOrUpdateAsync(String resourceGroupName, String resourceName, ServicesDescriptionInner serviceDescription, final ServiceCallback<ServicesDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, serviceDescription), serviceCallback);
    }

    /**
     * Create or update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param serviceDescription The service instance metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServicesDescriptionInner> createOrUpdateAsync(String resourceGroupName, String resourceName, ServicesDescriptionInner serviceDescription) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, serviceDescription).map(new Func1<ServiceResponse<ServicesDescriptionInner>, ServicesDescriptionInner>() {
            @Override
            public ServicesDescriptionInner call(ServiceResponse<ServicesDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param serviceDescription The service instance metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ServicesDescriptionInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String resourceName, ServicesDescriptionInner serviceDescription) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (serviceDescription == null) {
            throw new IllegalArgumentException("Parameter serviceDescription is required and cannot be null.");
        }
        Validator.validate(serviceDescription);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), serviceDescription, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ServicesDescriptionInner>() { }.getType());
    }

    /**
     * Create or update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param serviceDescription The service instance metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServicesDescriptionInner object if successful.
     */
    public ServicesDescriptionInner beginCreateOrUpdate(String resourceGroupName, String resourceName, ServicesDescriptionInner serviceDescription) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, serviceDescription).toBlocking().single().body();
    }

    /**
     * Create or update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param serviceDescription The service instance metadata.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServicesDescriptionInner> beginCreateOrUpdateAsync(String resourceGroupName, String resourceName, ServicesDescriptionInner serviceDescription, final ServiceCallback<ServicesDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, serviceDescription), serviceCallback);
    }

    /**
     * Create or update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param serviceDescription The service instance metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServicesDescriptionInner object
     */
    public Observable<ServicesDescriptionInner> beginCreateOrUpdateAsync(String resourceGroupName, String resourceName, ServicesDescriptionInner serviceDescription) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, resourceName, serviceDescription).map(new Func1<ServiceResponse<ServicesDescriptionInner>, ServicesDescriptionInner>() {
            @Override
            public ServicesDescriptionInner call(ServiceResponse<ServicesDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param serviceDescription The service instance metadata.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServicesDescriptionInner object
     */
    public Observable<ServiceResponse<ServicesDescriptionInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String resourceName, ServicesDescriptionInner serviceDescription) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (serviceDescription == null) {
            throw new IllegalArgumentException("Parameter serviceDescription is required and cannot be null.");
        }
        Validator.validate(serviceDescription);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), serviceDescription, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServicesDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<ServicesDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServicesDescriptionInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServicesDescriptionInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ServicesDescriptionInner, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ServicesDescriptionInner>() { }.getType())
                .register(201, new TypeToken<ServicesDescriptionInner>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServicesDescriptionInner object if successful.
     */
    public ServicesDescriptionInner update(String resourceGroupName, String resourceName) {
        return updateWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().last().body();
    }

    /**
     * Update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServicesDescriptionInner> updateAsync(String resourceGroupName, String resourceName, final ServiceCallback<ServicesDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServicesDescriptionInner> updateAsync(String resourceGroupName, String resourceName) {
        return updateWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<ServicesDescriptionInner>, ServicesDescriptionInner>() {
            @Override
            public ServicesDescriptionInner call(ServiceResponse<ServicesDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ServicesDescriptionInner>> updateWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        ServicesPatchDescription servicePatchDescription = new ServicesPatchDescription();
        servicePatchDescription.withTags(null);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), servicePatchDescription, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ServicesDescriptionInner>() { }.getType());
    }
    /**
     * Update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param tags Instance tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServicesDescriptionInner object if successful.
     */
    public ServicesDescriptionInner update(String resourceGroupName, String resourceName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, resourceName, tags).toBlocking().last().body();
    }

    /**
     * Update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param tags Instance tags
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServicesDescriptionInner> updateAsync(String resourceGroupName, String resourceName, Map<String, String> tags, final ServiceCallback<ServicesDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, resourceName, tags), serviceCallback);
    }

    /**
     * Update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param tags Instance tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServicesDescriptionInner> updateAsync(String resourceGroupName, String resourceName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, resourceName, tags).map(new Func1<ServiceResponse<ServicesDescriptionInner>, ServicesDescriptionInner>() {
            @Override
            public ServicesDescriptionInner call(ServiceResponse<ServicesDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param tags Instance tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ServicesDescriptionInner>> updateWithServiceResponseAsync(String resourceGroupName, String resourceName, Map<String, String> tags) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        ServicesPatchDescription servicePatchDescription = new ServicesPatchDescription();
        servicePatchDescription.withTags(tags);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), servicePatchDescription, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ServicesDescriptionInner>() { }.getType());
    }

    /**
     * Update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServicesDescriptionInner object if successful.
     */
    public ServicesDescriptionInner beginUpdate(String resourceGroupName, String resourceName) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().single().body();
    }

    /**
     * Update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServicesDescriptionInner> beginUpdateAsync(String resourceGroupName, String resourceName, final ServiceCallback<ServicesDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServicesDescriptionInner object
     */
    public Observable<ServicesDescriptionInner> beginUpdateAsync(String resourceGroupName, String resourceName) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<ServicesDescriptionInner>, ServicesDescriptionInner>() {
            @Override
            public ServicesDescriptionInner call(ServiceResponse<ServicesDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServicesDescriptionInner object
     */
    public Observable<ServiceResponse<ServicesDescriptionInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        ServicesPatchDescription servicePatchDescription = new ServicesPatchDescription();
        servicePatchDescription.withTags(null);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), servicePatchDescription, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServicesDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<ServicesDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServicesDescriptionInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param tags Instance tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServicesDescriptionInner object if successful.
     */
    public ServicesDescriptionInner beginUpdate(String resourceGroupName, String resourceName, Map<String, String> tags) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, resourceName, tags).toBlocking().single().body();
    }

    /**
     * Update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param tags Instance tags
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServicesDescriptionInner> beginUpdateAsync(String resourceGroupName, String resourceName, Map<String, String> tags, final ServiceCallback<ServicesDescriptionInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, resourceName, tags), serviceCallback);
    }

    /**
     * Update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param tags Instance tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServicesDescriptionInner object
     */
    public Observable<ServicesDescriptionInner> beginUpdateAsync(String resourceGroupName, String resourceName, Map<String, String> tags) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, resourceName, tags).map(new Func1<ServiceResponse<ServicesDescriptionInner>, ServicesDescriptionInner>() {
            @Override
            public ServicesDescriptionInner call(ServiceResponse<ServicesDescriptionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update the metadata of a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param tags Instance tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServicesDescriptionInner object
     */
    public Observable<ServiceResponse<ServicesDescriptionInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String resourceName, Map<String, String> tags) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        ServicesPatchDescription servicePatchDescription = new ServicesPatchDescription();
        servicePatchDescription.withTags(tags);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), servicePatchDescription, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServicesDescriptionInner>>>() {
                @Override
                public Observable<ServiceResponse<ServicesDescriptionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServicesDescriptionInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServicesDescriptionInner> beginUpdateDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ServicesDescriptionInner, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ServicesDescriptionInner>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Delete a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String resourceName) {
        deleteWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().last().body();
    }

    /**
     * Delete a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String resourceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Delete a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String resourceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String resourceName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, resourceName).toBlocking().single().body();
    }

    /**
     * Delete a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String resourceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, resourceName), serviceCallback);
    }

    /**
     * Delete a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String resourceName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, resourceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a service instance.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param resourceName The name of the service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String resourceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, resourceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get all the service instances in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ServicesDescriptionInner&gt; object if successful.
     */
    public PagedList<ServicesDescriptionInner> list() {
        ServiceResponse<Page<ServicesDescriptionInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<ServicesDescriptionInner>(response.body()) {
            @Override
            public Page<ServicesDescriptionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all the service instances in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ServicesDescriptionInner>> listAsync(final ListOperationCallback<ServicesDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<ServicesDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServicesDescriptionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all the service instances in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServicesDescriptionInner&gt; object
     */
    public Observable<Page<ServicesDescriptionInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<ServicesDescriptionInner>>, Page<ServicesDescriptionInner>>() {
                @Override
                public Page<ServicesDescriptionInner> call(ServiceResponse<Page<ServicesDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all the service instances in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServicesDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<ServicesDescriptionInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<ServicesDescriptionInner>>, Observable<ServiceResponse<Page<ServicesDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServicesDescriptionInner>>> call(ServiceResponse<Page<ServicesDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all the service instances in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ServicesDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ServicesDescriptionInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ServicesDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServicesDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ServicesDescriptionInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ServicesDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ServicesDescriptionInner>> listDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ServicesDescriptionInner>, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ServicesDescriptionInner>>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get all the service instances in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ServicesDescriptionInner&gt; object if successful.
     */
    public PagedList<ServicesDescriptionInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<ServicesDescriptionInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<ServicesDescriptionInner>(response.body()) {
            @Override
            public Page<ServicesDescriptionInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all the service instances in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ServicesDescriptionInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<ServicesDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<ServicesDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServicesDescriptionInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all the service instances in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServicesDescriptionInner&gt; object
     */
    public Observable<Page<ServicesDescriptionInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<ServicesDescriptionInner>>, Page<ServicesDescriptionInner>>() {
                @Override
                public Page<ServicesDescriptionInner> call(ServiceResponse<Page<ServicesDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all the service instances in a resource group.
     *
     * @param resourceGroupName The name of the resource group that contains the service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServicesDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<ServicesDescriptionInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<ServicesDescriptionInner>>, Observable<ServiceResponse<Page<ServicesDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServicesDescriptionInner>>> call(ServiceResponse<Page<ServicesDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all the service instances in a resource group.
     *
    ServiceResponse<PageImpl<ServicesDescriptionInner>> * @param resourceGroupName The name of the resource group that contains the service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ServicesDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ServicesDescriptionInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ServicesDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServicesDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ServicesDescriptionInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ServicesDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ServicesDescriptionInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ServicesDescriptionInner>, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ServicesDescriptionInner>>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Check if a service instance name is available.
     *
     * @param checkNameAvailabilityInputs Set the name parameter in the CheckNameAvailabilityParameters structure to the name of the service instance to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServicesNameAvailabilityInfoInner object if successful.
     */
    public ServicesNameAvailabilityInfoInner checkNameAvailability(CheckNameAvailabilityParameters checkNameAvailabilityInputs) {
        return checkNameAvailabilityWithServiceResponseAsync(checkNameAvailabilityInputs).toBlocking().single().body();
    }

    /**
     * Check if a service instance name is available.
     *
     * @param checkNameAvailabilityInputs Set the name parameter in the CheckNameAvailabilityParameters structure to the name of the service instance to check.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServicesNameAvailabilityInfoInner> checkNameAvailabilityAsync(CheckNameAvailabilityParameters checkNameAvailabilityInputs, final ServiceCallback<ServicesNameAvailabilityInfoInner> serviceCallback) {
        return ServiceFuture.fromResponse(checkNameAvailabilityWithServiceResponseAsync(checkNameAvailabilityInputs), serviceCallback);
    }

    /**
     * Check if a service instance name is available.
     *
     * @param checkNameAvailabilityInputs Set the name parameter in the CheckNameAvailabilityParameters structure to the name of the service instance to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServicesNameAvailabilityInfoInner object
     */
    public Observable<ServicesNameAvailabilityInfoInner> checkNameAvailabilityAsync(CheckNameAvailabilityParameters checkNameAvailabilityInputs) {
        return checkNameAvailabilityWithServiceResponseAsync(checkNameAvailabilityInputs).map(new Func1<ServiceResponse<ServicesNameAvailabilityInfoInner>, ServicesNameAvailabilityInfoInner>() {
            @Override
            public ServicesNameAvailabilityInfoInner call(ServiceResponse<ServicesNameAvailabilityInfoInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Check if a service instance name is available.
     *
     * @param checkNameAvailabilityInputs Set the name parameter in the CheckNameAvailabilityParameters structure to the name of the service instance to check.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServicesNameAvailabilityInfoInner object
     */
    public Observable<ServiceResponse<ServicesNameAvailabilityInfoInner>> checkNameAvailabilityWithServiceResponseAsync(CheckNameAvailabilityParameters checkNameAvailabilityInputs) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (checkNameAvailabilityInputs == null) {
            throw new IllegalArgumentException("Parameter checkNameAvailabilityInputs is required and cannot be null.");
        }
        Validator.validate(checkNameAvailabilityInputs);
        return service.checkNameAvailability(this.client.subscriptionId(), this.client.apiVersion(), checkNameAvailabilityInputs, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServicesNameAvailabilityInfoInner>>>() {
                @Override
                public Observable<ServiceResponse<ServicesNameAvailabilityInfoInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServicesNameAvailabilityInfoInner> clientResponse = checkNameAvailabilityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServicesNameAvailabilityInfoInner> checkNameAvailabilityDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ServicesNameAvailabilityInfoInner, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ServicesNameAvailabilityInfoInner>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get all the service instances in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ServicesDescriptionInner&gt; object if successful.
     */
    public PagedList<ServicesDescriptionInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ServicesDescriptionInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ServicesDescriptionInner>(response.body()) {
            @Override
            public Page<ServicesDescriptionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all the service instances in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ServicesDescriptionInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ServicesDescriptionInner>> serviceFuture, final ListOperationCallback<ServicesDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ServicesDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServicesDescriptionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all the service instances in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServicesDescriptionInner&gt; object
     */
    public Observable<Page<ServicesDescriptionInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ServicesDescriptionInner>>, Page<ServicesDescriptionInner>>() {
                @Override
                public Page<ServicesDescriptionInner> call(ServiceResponse<Page<ServicesDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all the service instances in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServicesDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<ServicesDescriptionInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ServicesDescriptionInner>>, Observable<ServiceResponse<Page<ServicesDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServicesDescriptionInner>>> call(ServiceResponse<Page<ServicesDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all the service instances in a subscription.
     *
    ServiceResponse<PageImpl<ServicesDescriptionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ServicesDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ServicesDescriptionInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ServicesDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServicesDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ServicesDescriptionInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ServicesDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ServicesDescriptionInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ServicesDescriptionInner>, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ServicesDescriptionInner>>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

    /**
     * Get all the service instances in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorDetailsInnerException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ServicesDescriptionInner&gt; object if successful.
     */
    public PagedList<ServicesDescriptionInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<ServicesDescriptionInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ServicesDescriptionInner>(response.body()) {
            @Override
            public Page<ServicesDescriptionInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all the service instances in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ServicesDescriptionInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<ServicesDescriptionInner>> serviceFuture, final ListOperationCallback<ServicesDescriptionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ServicesDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServicesDescriptionInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all the service instances in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServicesDescriptionInner&gt; object
     */
    public Observable<Page<ServicesDescriptionInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ServicesDescriptionInner>>, Page<ServicesDescriptionInner>>() {
                @Override
                public Page<ServicesDescriptionInner> call(ServiceResponse<Page<ServicesDescriptionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all the service instances in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServicesDescriptionInner&gt; object
     */
    public Observable<ServiceResponse<Page<ServicesDescriptionInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ServicesDescriptionInner>>, Observable<ServiceResponse<Page<ServicesDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServicesDescriptionInner>>> call(ServiceResponse<Page<ServicesDescriptionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all the service instances in a resource group.
     *
    ServiceResponse<PageImpl<ServicesDescriptionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ServicesDescriptionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ServicesDescriptionInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ServicesDescriptionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServicesDescriptionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ServicesDescriptionInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ServicesDescriptionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ServicesDescriptionInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorDetailsInnerException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ServicesDescriptionInner>, ErrorDetailsInnerException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ServicesDescriptionInner>>() { }.getType())
                .registerError(ErrorDetailsInnerException.class)
                .build(response);
    }

}
