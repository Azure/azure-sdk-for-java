// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.quantum.quantum.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Jobs. */
public final class JobsImpl {
    /** The proxy service used to perform REST calls. */
    private final JobsService service;

    /** The service client containing this operation class. */
    private final QuantumClientImpl client;

    /**
     * Initializes an instance of JobsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    JobsImpl(QuantumClientImpl client) {
        this.service = RestProxy.create(JobsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for QuantumClientJobs to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "QuantumClientJobs")
    private interface JobsService {
        @Get(
                "/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs")
        @ExpectedResponses({200})
        Mono<Response<BinaryData>> list(
                @HostParam("$host") String host,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                RequestOptions requestOptions,
                Context context);

        @Get(
                "/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}")
        @ExpectedResponses({200})
        Mono<Response<BinaryData>> get(
                @HostParam("$host") String host,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @PathParam("jobId") String jobId,
                RequestOptions requestOptions,
                Context context);

        @Put(
                "/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}")
        @ExpectedResponses({200, 201})
        Mono<Response<BinaryData>> create(
                @HostParam("$host") String host,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @PathParam("jobId") String jobId,
                @BodyParam("application/json") BinaryData job,
                RequestOptions requestOptions,
                Context context);

        @Delete(
                "/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}")
        @ExpectedResponses({204})
        Mono<Response<Void>> cancel(
                @HostParam("$host") String host,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @PathParam("jobId") String jobId,
                RequestOptions requestOptions,
                Context context);

        @Patch(
                "/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}")
        @ExpectedResponses({200, 204})
        Mono<Response<BinaryData>> patch(
                @HostParam("$host") String host,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @PathParam("jobId") String jobId,
                @BodyParam("application/json") BinaryData patchJob,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        Mono<Response<BinaryData>> listNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("$host") String host,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * List jobs.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             id: String
     *             name: String
     *             containerUri: String
     *             inputDataUri: String
     *             inputDataFormat: String
     *             inputParams: Object
     *             providerId: String
     *             target: String
     *             metadata: {
     *                 String: String
     *             }
     *             outputDataUri: String
     *             outputDataFormat: String
     *             status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *             creationTime: String
     *             beginExecutionTime: String
     *             endExecutionTime: String
     *             cancellationTime: String
     *             costEstimate: {
     *                 currencyCode: String
     *                 events: [
     *                     {
     *                         dimensionId: String
     *                         dimensionName: String
     *                         measureUnit: String
     *                         amountBilled: Float
     *                         amountConsumed: Float
     *                         unitPrice: Float
     *                     }
     *                 ]
     *                 estimatedTotal: Float
     *             }
     *             errorData: {
     *                 code: String
     *                 message: String
     *             }
     *             tags: [
     *                 String
     *             ]
     *         }
     *     ]
     *     count: Long
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return list of job details along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listSinglePageAsync(RequestOptions requestOptions) {
        return FluxUtil.withContext(
                        context ->
                                service.list(
                                        this.client.getHost(),
                                        this.client.getSubscriptionId(),
                                        this.client.getResourceGroupName(),
                                        this.client.getWorkspaceName(),
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * List jobs.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             id: String
     *             name: String
     *             containerUri: String
     *             inputDataUri: String
     *             inputDataFormat: String
     *             inputParams: Object
     *             providerId: String
     *             target: String
     *             metadata: {
     *                 String: String
     *             }
     *             outputDataUri: String
     *             outputDataFormat: String
     *             status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *             creationTime: String
     *             beginExecutionTime: String
     *             endExecutionTime: String
     *             cancellationTime: String
     *             costEstimate: {
     *                 currencyCode: String
     *                 events: [
     *                     {
     *                         dimensionId: String
     *                         dimensionName: String
     *                         measureUnit: String
     *                         amountBilled: Float
     *                         amountConsumed: Float
     *                         unitPrice: Float
     *                     }
     *                 ]
     *                 estimatedTotal: Float
     *             }
     *             errorData: {
     *                 code: String
     *                 message: String
     *             }
     *             tags: [
     *                 String
     *             ]
     *         }
     *     ]
     *     count: Long
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return list of job details along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listSinglePageAsync(RequestOptions requestOptions, Context context) {
        return service.list(
                        this.client.getHost(),
                        this.client.getSubscriptionId(),
                        this.client.getResourceGroupName(),
                        this.client.getWorkspaceName(),
                        requestOptions,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * List jobs.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             id: String
     *             name: String
     *             containerUri: String
     *             inputDataUri: String
     *             inputDataFormat: String
     *             inputParams: Object
     *             providerId: String
     *             target: String
     *             metadata: {
     *                 String: String
     *             }
     *             outputDataUri: String
     *             outputDataFormat: String
     *             status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *             creationTime: String
     *             beginExecutionTime: String
     *             endExecutionTime: String
     *             cancellationTime: String
     *             costEstimate: {
     *                 currencyCode: String
     *                 events: [
     *                     {
     *                         dimensionId: String
     *                         dimensionName: String
     *                         measureUnit: String
     *                         amountBilled: Float
     *                         amountConsumed: Float
     *                         unitPrice: Float
     *                     }
     *                 ]
     *                 estimatedTotal: Float
     *             }
     *             errorData: {
     *                 code: String
     *                 message: String
     *             }
     *             tags: [
     *                 String
     *             ]
     *         }
     *     ]
     *     count: Long
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return list of job details.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listAsync(RequestOptions requestOptions) {
        return new PagedFlux<>(
                () -> listSinglePageAsync(requestOptions), nextLink -> listNextSinglePageAsync(nextLink, null));
    }

    /**
     * List jobs.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             id: String
     *             name: String
     *             containerUri: String
     *             inputDataUri: String
     *             inputDataFormat: String
     *             inputParams: Object
     *             providerId: String
     *             target: String
     *             metadata: {
     *                 String: String
     *             }
     *             outputDataUri: String
     *             outputDataFormat: String
     *             status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *             creationTime: String
     *             beginExecutionTime: String
     *             endExecutionTime: String
     *             cancellationTime: String
     *             costEstimate: {
     *                 currencyCode: String
     *                 events: [
     *                     {
     *                         dimensionId: String
     *                         dimensionName: String
     *                         measureUnit: String
     *                         amountBilled: Float
     *                         amountConsumed: Float
     *                         unitPrice: Float
     *                     }
     *                 ]
     *                 estimatedTotal: Float
     *             }
     *             errorData: {
     *                 code: String
     *                 message: String
     *             }
     *             tags: [
     *                 String
     *             ]
     *         }
     *     ]
     *     count: Long
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return list of job details.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listAsync(RequestOptions requestOptions, Context context) {
        return new PagedFlux<>(
                () -> listSinglePageAsync(requestOptions, context),
                nextLink -> listNextSinglePageAsync(nextLink, null, context));
    }

    /**
     * List jobs.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             id: String
     *             name: String
     *             containerUri: String
     *             inputDataUri: String
     *             inputDataFormat: String
     *             inputParams: Object
     *             providerId: String
     *             target: String
     *             metadata: {
     *                 String: String
     *             }
     *             outputDataUri: String
     *             outputDataFormat: String
     *             status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *             creationTime: String
     *             beginExecutionTime: String
     *             endExecutionTime: String
     *             cancellationTime: String
     *             costEstimate: {
     *                 currencyCode: String
     *                 events: [
     *                     {
     *                         dimensionId: String
     *                         dimensionName: String
     *                         measureUnit: String
     *                         amountBilled: Float
     *                         amountConsumed: Float
     *                         unitPrice: Float
     *                     }
     *                 ]
     *                 estimatedTotal: Float
     *             }
     *             errorData: {
     *                 code: String
     *                 message: String
     *             }
     *             tags: [
     *                 String
     *             ]
     *         }
     *     ]
     *     count: Long
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return list of job details.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(RequestOptions requestOptions) {
        return new PagedIterable<>(listAsync(requestOptions));
    }

    /**
     * Get job by id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     containerUri: String
     *     inputDataUri: String
     *     inputDataFormat: String
     *     inputParams: Object
     *     providerId: String
     *     target: String
     *     metadata: {
     *         String: String
     *     }
     *     outputDataUri: String
     *     outputDataFormat: String
     *     status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *     creationTime: String
     *     beginExecutionTime: String
     *     endExecutionTime: String
     *     cancellationTime: String
     *     costEstimate: {
     *         currencyCode: String
     *         events: [
     *             {
     *                 dimensionId: String
     *                 dimensionName: String
     *                 measureUnit: String
     *                 amountBilled: Float
     *                 amountConsumed: Float
     *                 unitPrice: Float
     *             }
     *         ]
     *         estimatedTotal: Float
     *     }
     *     errorData: {
     *         code: String
     *         message: String
     *     }
     *     tags: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param jobId Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return job by id along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String jobId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.get(
                                this.client.getHost(),
                                this.client.getSubscriptionId(),
                                this.client.getResourceGroupName(),
                                this.client.getWorkspaceName(),
                                jobId,
                                requestOptions,
                                context));
    }

    /**
     * Get job by id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     containerUri: String
     *     inputDataUri: String
     *     inputDataFormat: String
     *     inputParams: Object
     *     providerId: String
     *     target: String
     *     metadata: {
     *         String: String
     *     }
     *     outputDataUri: String
     *     outputDataFormat: String
     *     status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *     creationTime: String
     *     beginExecutionTime: String
     *     endExecutionTime: String
     *     cancellationTime: String
     *     costEstimate: {
     *         currencyCode: String
     *         events: [
     *             {
     *                 dimensionId: String
     *                 dimensionName: String
     *                 measureUnit: String
     *                 amountBilled: Float
     *                 amountConsumed: Float
     *                 unitPrice: Float
     *             }
     *         ]
     *         estimatedTotal: Float
     *     }
     *     errorData: {
     *         code: String
     *         message: String
     *     }
     *     tags: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param jobId Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return job by id along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(
            String jobId, RequestOptions requestOptions, Context context) {
        return service.get(
                this.client.getHost(),
                this.client.getSubscriptionId(),
                this.client.getResourceGroupName(),
                this.client.getWorkspaceName(),
                jobId,
                requestOptions,
                context);
    }

    /**
     * Get job by id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     containerUri: String
     *     inputDataUri: String
     *     inputDataFormat: String
     *     inputParams: Object
     *     providerId: String
     *     target: String
     *     metadata: {
     *         String: String
     *     }
     *     outputDataUri: String
     *     outputDataFormat: String
     *     status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *     creationTime: String
     *     beginExecutionTime: String
     *     endExecutionTime: String
     *     cancellationTime: String
     *     costEstimate: {
     *         currencyCode: String
     *         events: [
     *             {
     *                 dimensionId: String
     *                 dimensionName: String
     *                 measureUnit: String
     *                 amountBilled: Float
     *                 amountConsumed: Float
     *                 unitPrice: Float
     *             }
     *         ]
     *         estimatedTotal: Float
     *     }
     *     errorData: {
     *         code: String
     *         message: String
     *     }
     *     tags: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param jobId Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return job by id along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String jobId, RequestOptions requestOptions) {
        return getWithResponseAsync(jobId, requestOptions).block();
    }

    /**
     * Create a job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     containerUri: String
     *     inputDataUri: String
     *     inputDataFormat: String
     *     inputParams: Object
     *     providerId: String
     *     target: String
     *     metadata: {
     *         String: String
     *     }
     *     outputDataUri: String
     *     outputDataFormat: String
     *     status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *     creationTime: String
     *     beginExecutionTime: String
     *     endExecutionTime: String
     *     cancellationTime: String
     *     costEstimate: {
     *         currencyCode: String
     *         events: [
     *             {
     *                 dimensionId: String
     *                 dimensionName: String
     *                 measureUnit: String
     *                 amountBilled: Float
     *                 amountConsumed: Float
     *                 unitPrice: Float
     *             }
     *         ]
     *         estimatedTotal: Float
     *     }
     *     errorData: {
     *         code: String
     *         message: String
     *     }
     *     tags: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     containerUri: String
     *     inputDataUri: String
     *     inputDataFormat: String
     *     inputParams: Object
     *     providerId: String
     *     target: String
     *     metadata: {
     *         String: String
     *     }
     *     outputDataUri: String
     *     outputDataFormat: String
     *     status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *     creationTime: String
     *     beginExecutionTime: String
     *     endExecutionTime: String
     *     cancellationTime: String
     *     costEstimate: {
     *         currencyCode: String
     *         events: [
     *             {
     *                 dimensionId: String
     *                 dimensionName: String
     *                 measureUnit: String
     *                 amountBilled: Float
     *                 amountConsumed: Float
     *                 unitPrice: Float
     *             }
     *         ]
     *         estimatedTotal: Float
     *     }
     *     errorData: {
     *         code: String
     *         message: String
     *     }
     *     tags: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param jobId Id of the job.
     * @param job The complete metadata of the job to submit.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return job details along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponseAsync(
            String jobId, BinaryData job, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.create(
                                this.client.getHost(),
                                this.client.getSubscriptionId(),
                                this.client.getResourceGroupName(),
                                this.client.getWorkspaceName(),
                                jobId,
                                job,
                                requestOptions,
                                context));
    }

    /**
     * Create a job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     containerUri: String
     *     inputDataUri: String
     *     inputDataFormat: String
     *     inputParams: Object
     *     providerId: String
     *     target: String
     *     metadata: {
     *         String: String
     *     }
     *     outputDataUri: String
     *     outputDataFormat: String
     *     status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *     creationTime: String
     *     beginExecutionTime: String
     *     endExecutionTime: String
     *     cancellationTime: String
     *     costEstimate: {
     *         currencyCode: String
     *         events: [
     *             {
     *                 dimensionId: String
     *                 dimensionName: String
     *                 measureUnit: String
     *                 amountBilled: Float
     *                 amountConsumed: Float
     *                 unitPrice: Float
     *             }
     *         ]
     *         estimatedTotal: Float
     *     }
     *     errorData: {
     *         code: String
     *         message: String
     *     }
     *     tags: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     containerUri: String
     *     inputDataUri: String
     *     inputDataFormat: String
     *     inputParams: Object
     *     providerId: String
     *     target: String
     *     metadata: {
     *         String: String
     *     }
     *     outputDataUri: String
     *     outputDataFormat: String
     *     status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *     creationTime: String
     *     beginExecutionTime: String
     *     endExecutionTime: String
     *     cancellationTime: String
     *     costEstimate: {
     *         currencyCode: String
     *         events: [
     *             {
     *                 dimensionId: String
     *                 dimensionName: String
     *                 measureUnit: String
     *                 amountBilled: Float
     *                 amountConsumed: Float
     *                 unitPrice: Float
     *             }
     *         ]
     *         estimatedTotal: Float
     *     }
     *     errorData: {
     *         code: String
     *         message: String
     *     }
     *     tags: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param jobId Id of the job.
     * @param job The complete metadata of the job to submit.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return job details along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponseAsync(
            String jobId, BinaryData job, RequestOptions requestOptions, Context context) {
        return service.create(
                this.client.getHost(),
                this.client.getSubscriptionId(),
                this.client.getResourceGroupName(),
                this.client.getWorkspaceName(),
                jobId,
                job,
                requestOptions,
                context);
    }

    /**
     * Create a job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     containerUri: String
     *     inputDataUri: String
     *     inputDataFormat: String
     *     inputParams: Object
     *     providerId: String
     *     target: String
     *     metadata: {
     *         String: String
     *     }
     *     outputDataUri: String
     *     outputDataFormat: String
     *     status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *     creationTime: String
     *     beginExecutionTime: String
     *     endExecutionTime: String
     *     cancellationTime: String
     *     costEstimate: {
     *         currencyCode: String
     *         events: [
     *             {
     *                 dimensionId: String
     *                 dimensionName: String
     *                 measureUnit: String
     *                 amountBilled: Float
     *                 amountConsumed: Float
     *                 unitPrice: Float
     *             }
     *         ]
     *         estimatedTotal: Float
     *     }
     *     errorData: {
     *         code: String
     *         message: String
     *     }
     *     tags: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     containerUri: String
     *     inputDataUri: String
     *     inputDataFormat: String
     *     inputParams: Object
     *     providerId: String
     *     target: String
     *     metadata: {
     *         String: String
     *     }
     *     outputDataUri: String
     *     outputDataFormat: String
     *     status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *     creationTime: String
     *     beginExecutionTime: String
     *     endExecutionTime: String
     *     cancellationTime: String
     *     costEstimate: {
     *         currencyCode: String
     *         events: [
     *             {
     *                 dimensionId: String
     *                 dimensionName: String
     *                 measureUnit: String
     *                 amountBilled: Float
     *                 amountConsumed: Float
     *                 unitPrice: Float
     *             }
     *         ]
     *         estimatedTotal: Float
     *     }
     *     errorData: {
     *         code: String
     *         message: String
     *     }
     *     tags: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param jobId Id of the job.
     * @param job The complete metadata of the job to submit.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return job details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(String jobId, BinaryData job, RequestOptions requestOptions) {
        return createWithResponseAsync(jobId, job, requestOptions).block();
    }

    /**
     * Cancel a job.
     *
     * @param jobId Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelWithResponseAsync(String jobId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.cancel(
                                this.client.getHost(),
                                this.client.getSubscriptionId(),
                                this.client.getResourceGroupName(),
                                this.client.getWorkspaceName(),
                                jobId,
                                requestOptions,
                                context));
    }

    /**
     * Cancel a job.
     *
     * @param jobId Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelWithResponseAsync(String jobId, RequestOptions requestOptions, Context context) {
        return service.cancel(
                this.client.getHost(),
                this.client.getSubscriptionId(),
                this.client.getResourceGroupName(),
                this.client.getWorkspaceName(),
                jobId,
                requestOptions,
                context);
    }

    /**
     * Cancel a job.
     *
     * @param jobId Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> cancelWithResponse(String jobId, RequestOptions requestOptions) {
        return cancelWithResponseAsync(jobId, requestOptions).block();
    }

    /**
     * Patch a job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         op: String(add/remove/replace/move/copy/test)
     *         path: String
     *         value: Object
     *         from: String
     *     }
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     containerUri: String
     *     inputDataUri: String
     *     inputDataFormat: String
     *     inputParams: Object
     *     providerId: String
     *     target: String
     *     metadata: {
     *         String: String
     *     }
     *     outputDataUri: String
     *     outputDataFormat: String
     *     status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *     creationTime: String
     *     beginExecutionTime: String
     *     endExecutionTime: String
     *     cancellationTime: String
     *     costEstimate: {
     *         currencyCode: String
     *         events: [
     *             {
     *                 dimensionId: String
     *                 dimensionName: String
     *                 measureUnit: String
     *                 amountBilled: Float
     *                 amountConsumed: Float
     *                 unitPrice: Float
     *             }
     *         ]
     *         estimatedTotal: Float
     *     }
     *     errorData: {
     *         code: String
     *         message: String
     *     }
     *     tags: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param jobId Id of the job.
     * @param patchJob The json patch document containing the patch operations.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return job details along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> patchWithResponseAsync(
            String jobId, BinaryData patchJob, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.patch(
                                this.client.getHost(),
                                this.client.getSubscriptionId(),
                                this.client.getResourceGroupName(),
                                this.client.getWorkspaceName(),
                                jobId,
                                patchJob,
                                requestOptions,
                                context));
    }

    /**
     * Patch a job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         op: String(add/remove/replace/move/copy/test)
     *         path: String
     *         value: Object
     *         from: String
     *     }
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     containerUri: String
     *     inputDataUri: String
     *     inputDataFormat: String
     *     inputParams: Object
     *     providerId: String
     *     target: String
     *     metadata: {
     *         String: String
     *     }
     *     outputDataUri: String
     *     outputDataFormat: String
     *     status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *     creationTime: String
     *     beginExecutionTime: String
     *     endExecutionTime: String
     *     cancellationTime: String
     *     costEstimate: {
     *         currencyCode: String
     *         events: [
     *             {
     *                 dimensionId: String
     *                 dimensionName: String
     *                 measureUnit: String
     *                 amountBilled: Float
     *                 amountConsumed: Float
     *                 unitPrice: Float
     *             }
     *         ]
     *         estimatedTotal: Float
     *     }
     *     errorData: {
     *         code: String
     *         message: String
     *     }
     *     tags: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param jobId Id of the job.
     * @param patchJob The json patch document containing the patch operations.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return job details along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> patchWithResponseAsync(
            String jobId, BinaryData patchJob, RequestOptions requestOptions, Context context) {
        return service.patch(
                this.client.getHost(),
                this.client.getSubscriptionId(),
                this.client.getResourceGroupName(),
                this.client.getWorkspaceName(),
                jobId,
                patchJob,
                requestOptions,
                context);
    }

    /**
     * Patch a job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         op: String(add/remove/replace/move/copy/test)
     *         path: String
     *         value: Object
     *         from: String
     *     }
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     containerUri: String
     *     inputDataUri: String
     *     inputDataFormat: String
     *     inputParams: Object
     *     providerId: String
     *     target: String
     *     metadata: {
     *         String: String
     *     }
     *     outputDataUri: String
     *     outputDataFormat: String
     *     status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *     creationTime: String
     *     beginExecutionTime: String
     *     endExecutionTime: String
     *     cancellationTime: String
     *     costEstimate: {
     *         currencyCode: String
     *         events: [
     *             {
     *                 dimensionId: String
     *                 dimensionName: String
     *                 measureUnit: String
     *                 amountBilled: Float
     *                 amountConsumed: Float
     *                 unitPrice: Float
     *             }
     *         ]
     *         estimatedTotal: Float
     *     }
     *     errorData: {
     *         code: String
     *         message: String
     *     }
     *     tags: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param jobId Id of the job.
     * @param patchJob The json patch document containing the patch operations.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return job details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> patchWithResponse(String jobId, BinaryData patchJob, RequestOptions requestOptions) {
        return patchWithResponseAsync(jobId, patchJob, requestOptions).block();
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             id: String
     *             name: String
     *             containerUri: String
     *             inputDataUri: String
     *             inputDataFormat: String
     *             inputParams: Object
     *             providerId: String
     *             target: String
     *             metadata: {
     *                 String: String
     *             }
     *             outputDataUri: String
     *             outputDataFormat: String
     *             status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *             creationTime: String
     *             beginExecutionTime: String
     *             endExecutionTime: String
     *             cancellationTime: String
     *             costEstimate: {
     *                 currencyCode: String
     *                 events: [
     *                     {
     *                         dimensionId: String
     *                         dimensionName: String
     *                         measureUnit: String
     *                         amountBilled: Float
     *                         amountConsumed: Float
     *                         unitPrice: Float
     *                     }
     *                 ]
     *                 estimatedTotal: Float
     *             }
     *             errorData: {
     *                 code: String
     *                 message: String
     *             }
     *             tags: [
     *                 String
     *             ]
     *         }
     *     ]
     *     count: Long
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return list of job details along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listNextSinglePageAsync(String nextLink, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                        context -> service.listNext(nextLink, this.client.getHost(), requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             id: String
     *             name: String
     *             containerUri: String
     *             inputDataUri: String
     *             inputDataFormat: String
     *             inputParams: Object
     *             providerId: String
     *             target: String
     *             metadata: {
     *                 String: String
     *             }
     *             outputDataUri: String
     *             outputDataFormat: String
     *             status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *             creationTime: String
     *             beginExecutionTime: String
     *             endExecutionTime: String
     *             cancellationTime: String
     *             costEstimate: {
     *                 currencyCode: String
     *                 events: [
     *                     {
     *                         dimensionId: String
     *                         dimensionName: String
     *                         measureUnit: String
     *                         amountBilled: Float
     *                         amountConsumed: Float
     *                         unitPrice: Float
     *                     }
     *                 ]
     *                 estimatedTotal: Float
     *             }
     *             errorData: {
     *                 code: String
     *                 message: String
     *             }
     *             tags: [
     *                 String
     *             ]
     *         }
     *     ]
     *     count: Long
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return list of job details along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        return service.listNext(nextLink, this.client.getHost(), requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
