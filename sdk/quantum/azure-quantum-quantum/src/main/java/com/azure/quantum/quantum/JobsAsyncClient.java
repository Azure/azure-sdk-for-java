// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.quantum.quantum;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.quantum.quantum.implementation.JobsImpl;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous QuantumClient type. */
@ServiceClient(builder = QuantumClientBuilder.class, isAsync = true)
public final class JobsAsyncClient {
    @Generated private final JobsImpl serviceClient;

    /**
     * Initializes an instance of Jobs client.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    JobsAsyncClient(JobsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * List jobs.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value: [
     *         {
     *             id: String
     *             name: String
     *             containerUri: String
     *             inputDataUri: String
     *             inputDataFormat: String
     *             inputParams: Object
     *             providerId: String
     *             target: String
     *             metadata: {
     *                 String: String
     *             }
     *             outputDataUri: String
     *             outputDataFormat: String
     *             status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *             creationTime: String
     *             beginExecutionTime: String
     *             endExecutionTime: String
     *             cancellationTime: String
     *             costEstimate: {
     *                 currencyCode: String
     *                 events: [
     *                     {
     *                         dimensionId: String
     *                         dimensionName: String
     *                         measureUnit: String
     *                         amountBilled: Float
     *                         amountConsumed: Float
     *                         unitPrice: Float
     *                     }
     *                 ]
     *                 estimatedTotal: Float
     *             }
     *             errorData: {
     *                 code: String
     *                 message: String
     *             }
     *             tags: [
     *                 String
     *             ]
     *         }
     *     ]
     *     count: Long
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return list of job details.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> list(RequestOptions requestOptions) {
        return this.serviceClient.listAsync(requestOptions);
    }

    /**
     * Get job by id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     containerUri: String
     *     inputDataUri: String
     *     inputDataFormat: String
     *     inputParams: Object
     *     providerId: String
     *     target: String
     *     metadata: {
     *         String: String
     *     }
     *     outputDataUri: String
     *     outputDataFormat: String
     *     status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *     creationTime: String
     *     beginExecutionTime: String
     *     endExecutionTime: String
     *     cancellationTime: String
     *     costEstimate: {
     *         currencyCode: String
     *         events: [
     *             {
     *                 dimensionId: String
     *                 dimensionName: String
     *                 measureUnit: String
     *                 amountBilled: Float
     *                 amountConsumed: Float
     *                 unitPrice: Float
     *             }
     *         ]
     *         estimatedTotal: Float
     *     }
     *     errorData: {
     *         code: String
     *         message: String
     *     }
     *     tags: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param jobId Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return job by id along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(jobId, requestOptions);
    }

    /**
     * Create a job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     containerUri: String
     *     inputDataUri: String
     *     inputDataFormat: String
     *     inputParams: Object
     *     providerId: String
     *     target: String
     *     metadata: {
     *         String: String
     *     }
     *     outputDataUri: String
     *     outputDataFormat: String
     *     status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *     creationTime: String
     *     beginExecutionTime: String
     *     endExecutionTime: String
     *     cancellationTime: String
     *     costEstimate: {
     *         currencyCode: String
     *         events: [
     *             {
     *                 dimensionId: String
     *                 dimensionName: String
     *                 measureUnit: String
     *                 amountBilled: Float
     *                 amountConsumed: Float
     *                 unitPrice: Float
     *             }
     *         ]
     *         estimatedTotal: Float
     *     }
     *     errorData: {
     *         code: String
     *         message: String
     *     }
     *     tags: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     containerUri: String
     *     inputDataUri: String
     *     inputDataFormat: String
     *     inputParams: Object
     *     providerId: String
     *     target: String
     *     metadata: {
     *         String: String
     *     }
     *     outputDataUri: String
     *     outputDataFormat: String
     *     status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *     creationTime: String
     *     beginExecutionTime: String
     *     endExecutionTime: String
     *     cancellationTime: String
     *     costEstimate: {
     *         currencyCode: String
     *         events: [
     *             {
     *                 dimensionId: String
     *                 dimensionName: String
     *                 measureUnit: String
     *                 amountBilled: Float
     *                 amountConsumed: Float
     *                 unitPrice: Float
     *             }
     *         ]
     *         estimatedTotal: Float
     *     }
     *     errorData: {
     *         code: String
     *         message: String
     *     }
     *     tags: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param jobId Id of the job.
     * @param job The complete metadata of the job to submit.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return job details along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponse(String jobId, BinaryData job, RequestOptions requestOptions) {
        return this.serviceClient.createWithResponseAsync(jobId, job, requestOptions);
    }

    /**
     * Cancel a job.
     *
     * @param jobId Id of the job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelWithResponse(String jobId, RequestOptions requestOptions) {
        return this.serviceClient.cancelWithResponseAsync(jobId, requestOptions);
    }

    /**
     * Patch a job.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         op: String(add/remove/replace/move/copy/test)
     *         path: String
     *         value: Object
     *         from: String
     *     }
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     name: String
     *     containerUri: String
     *     inputDataUri: String
     *     inputDataFormat: String
     *     inputParams: Object
     *     providerId: String
     *     target: String
     *     metadata: {
     *         String: String
     *     }
     *     outputDataUri: String
     *     outputDataFormat: String
     *     status: String(Waiting/Executing/Succeeded/Failed/Cancelled)
     *     creationTime: String
     *     beginExecutionTime: String
     *     endExecutionTime: String
     *     cancellationTime: String
     *     costEstimate: {
     *         currencyCode: String
     *         events: [
     *             {
     *                 dimensionId: String
     *                 dimensionName: String
     *                 measureUnit: String
     *                 amountBilled: Float
     *                 amountConsumed: Float
     *                 unitPrice: Float
     *             }
     *         ]
     *         estimatedTotal: Float
     *     }
     *     errorData: {
     *         code: String
     *         message: String
     *     }
     *     tags: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param jobId Id of the job.
     * @param patchJob The json patch document containing the patch operations.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return job details along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> patchWithResponse(
            String jobId, BinaryData patchJob, RequestOptions requestOptions) {
        return this.serviceClient.patchWithResponseAsync(jobId, patchJob, requestOptions);
    }
}
