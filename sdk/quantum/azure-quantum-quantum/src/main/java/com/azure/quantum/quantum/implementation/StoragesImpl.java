// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.quantum.quantum.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Storages. */
public final class StoragesImpl {
    /** The proxy service used to perform REST calls. */
    private final StoragesService service;

    /** The service client containing this operation class. */
    private final QuantumClientImpl client;

    /**
     * Initializes an instance of StoragesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    StoragesImpl(QuantumClientImpl client) {
        this.service = RestProxy.create(StoragesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for QuantumClientStorages to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "QuantumClientStorage")
    private interface StoragesService {
        @Post(
                "/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/storage/sasUri")
        @ExpectedResponses({200})
        Mono<Response<BinaryData>> sasUri(
                @HostParam("$host") String host,
                @PathParam("subscriptionId") String subscriptionId,
                @PathParam("resourceGroupName") String resourceGroupName,
                @PathParam("workspaceName") String workspaceName,
                @BodyParam("application/json") BinaryData blobDetails,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Gets a URL with SAS token for a container/blob in the storage account associated with the workspace. The SAS URL
     * can be used to upload job input and/or download job output.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     containerName: String
     *     blobName: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sasUri: String
     * }
     * }</pre>
     *
     * @param blobDetails The details (name and container) of the blob to store or download data.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return a URL with SAS token for a container/blob in the storage account associated with the workspace along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> sasUriWithResponseAsync(BinaryData blobDetails, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.sasUri(
                                this.client.getHost(),
                                this.client.getSubscriptionId(),
                                this.client.getResourceGroupName(),
                                this.client.getWorkspaceName(),
                                blobDetails,
                                requestOptions,
                                context));
    }

    /**
     * Gets a URL with SAS token for a container/blob in the storage account associated with the workspace. The SAS URL
     * can be used to upload job input and/or download job output.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     containerName: String
     *     blobName: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sasUri: String
     * }
     * }</pre>
     *
     * @param blobDetails The details (name and container) of the blob to store or download data.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return a URL with SAS token for a container/blob in the storage account associated with the workspace along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> sasUriWithResponseAsync(
            BinaryData blobDetails, RequestOptions requestOptions, Context context) {
        return service.sasUri(
                this.client.getHost(),
                this.client.getSubscriptionId(),
                this.client.getResourceGroupName(),
                this.client.getWorkspaceName(),
                blobDetails,
                requestOptions,
                context);
    }

    /**
     * Gets a URL with SAS token for a container/blob in the storage account associated with the workspace. The SAS URL
     * can be used to upload job input and/or download job output.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     containerName: String
     *     blobName: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     sasUri: String
     * }
     * }</pre>
     *
     * @param blobDetails The details (name and container) of the blob to store or download data.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @return a URL with SAS token for a container/blob in the storage account associated with the workspace along with
     *     {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> sasUriWithResponse(BinaryData blobDetails, RequestOptions requestOptions) {
        return sasUriWithResponseAsync(blobDetails, requestOptions).block();
    }
}
