// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.quantum.quantum;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestBase;
import com.azure.core.test.TestMode;
import com.azure.core.test.annotation.DoNotRecord;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ClientTests extends TestBase {
    private QuantumClientBuilder builder;

    @BeforeEach
    public void setup() {
        builder =
                new QuantumClientBuilder()
                        .subscriptionId(Configuration.getGlobalConfiguration().get("SUBSCRIPTIONID"))
                        .resourceGroupName(Configuration.getGlobalConfiguration().get("RESOURCEGROUPNAME"))
                        .workspaceName(Configuration.getGlobalConfiguration().get("WORKSPACENAME"))
                        .host(Configuration.getGlobalConfiguration().get("HOST", "https://quantum.azure.com"))
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS));
        if (getTestMode() == TestMode.PLAYBACK) {
            builder.httpClient(interceptorManager.getPlaybackClient())
                    .credential(request -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)));
        } else if (getTestMode() == TestMode.RECORD) {
            builder.addPolicy(interceptorManager.getRecordPolicy())
                    .credential(new DefaultAzureCredentialBuilder().build());
        } else if (getTestMode() == TestMode.LIVE) {
            builder.credential(new DefaultAzureCredentialBuilder().build());
        }
    }

    @Test
    @DoNotRecord(skipInPlayback = true)
    public void testClient() {
        // use the builder to create client
    }
}
