// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.quantum.jobs.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.util.List;

/** Providers status. */
@Immutable
public final class ProviderStatus implements JsonSerializable<ProviderStatus> {
    /*
     * Provider id.
     */
    private String id;

    /*
     * Provider availability.
     */
    private ProviderAvailability currentAvailability;

    /*
     * The targets property.
     */
    private List<TargetStatus> targets;

    /**
     * Creates an instance of {@link ProviderStatus}.
     */
    public ProviderStatus() {
    }

    /**
     * Get the id property: Provider id.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Get the currentAvailability property: Provider availability.
     *
     * @return the currentAvailability value.
     */
    public ProviderAvailability getCurrentAvailability() {
        return this.currentAvailability;
    }

    /**
     * Get the targets property: The targets property.
     *
     * @return the targets value.
     */
    public List<TargetStatus> getTargets() {
        return this.targets;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject().writeEndObject();
    }

    /**
     * Deserializes an instance of {@link ProviderStatus} from the passed {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link ProviderStatus}, or null if {@link JsonReader} was pointing {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static ProviderStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProviderStatus providerStatus = new ProviderStatus();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    providerStatus.id = reader.getString();
                } else if ("currentAvailability".equals(fieldName)) {
                    providerStatus.currentAvailability = ProviderAvailability.fromString(reader.getString());
                } else if ("targets".equals(fieldName)) {
                    providerStatus.targets = reader.readArray(TargetStatus::fromJson);
                } else {
                    reader.skipChildren();
                }
            }

            return providerStatus;
        });
    }
}
