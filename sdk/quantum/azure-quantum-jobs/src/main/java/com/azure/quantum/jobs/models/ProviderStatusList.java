// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.quantum.jobs.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.util.List;

/** Providers status. */
@Immutable
public final class ProviderStatusList implements JsonSerializable<ProviderStatusList> {
    /*
     * The value property.
     */
    private List<ProviderStatus> value;

    /*
     * Link to the next page of results.
     */
    private String nextLink;

    /**
     * Creates an instance of {@link ProviderStatusList}.
     */
    public ProviderStatusList() {
    }

    /**
     * Get the value property: The value property.
     *
     * @return the value value.
     */
    public List<ProviderStatus> getValue() {
        return this.value;
    }

    /**
     * Get the nextLink property: Link to the next page of results.
     *
     * @return the nextLink value.
     */
    public String getNextLink() {
        return this.nextLink;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject().writeEndObject();
    }

    /**
     * Deserializes an instance of {@link ProviderStatusList} from the passed {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link ProviderStatusList}, or null if {@link JsonReader} was pointing
     * {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static ProviderStatusList fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProviderStatusList providerStatusList = new ProviderStatusList();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    providerStatusList.value = reader.readArray(ProviderStatus::fromJson);
                } else if ("nextLink".equals(fieldName)) {
                    providerStatusList.nextLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return providerStatusList;
        });
    }
}
