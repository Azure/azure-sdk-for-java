// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.quantum.jobs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;

/** Blob details. */
@Fluent
public final class BlobDetails implements JsonSerializable<BlobDetails> {
    /*
     * The container name.
     */
    private String containerName;

    /*
     * The blob name.
     */
    private String blobName;

    /**
     * Creates an instance of {@link BlobDetails}.
     */
    public BlobDetails() {
    }

    /**
     * Get the containerName property: The container name.
     *
     * @return the containerName value.
     */
    public String getContainerName() {
        return this.containerName;
    }

    /**
     * Set the containerName property: The container name.
     *
     * @param containerName the containerName value to set.
     * @return the BlobDetails object itself.
     */
    public BlobDetails setContainerName(String containerName) {
        this.containerName = containerName;
        return this;
    }

    /**
     * Get the blobName property: The blob name.
     *
     * @return the blobName value.
     */
    public String getBlobName() {
        return this.blobName;
    }

    /**
     * Set the blobName property: The blob name.
     *
     * @param blobName the blobName value to set.
     * @return the BlobDetails object itself.
     */
    public BlobDetails setBlobName(String blobName) {
        this.blobName = blobName;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject()
            .writeStringField("containerName", containerName)
            .writeStringField("blobName", blobName)
            .writeEndObject();
    }

    /**
     * Deserializes an instance of {@link BlobDetails} from the passed {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link BlobDetails}, or null if {@link JsonReader} was pointing {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static BlobDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BlobDetails blobDetails = new BlobDetails();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("containerName".equals(fieldName)) {
                    blobDetails.containerName = reader.getString();
                } else if ("blobName".equals(fieldName)) {
                    blobDetails.blobName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return blobDetails;
        });
    }
}
