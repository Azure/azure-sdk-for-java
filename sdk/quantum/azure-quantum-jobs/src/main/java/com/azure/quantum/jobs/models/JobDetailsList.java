// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.quantum.jobs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;
import java.util.List;

/** List of job details. */
@Fluent
public final class JobDetailsList implements JsonSerializable<JobDetailsList> {
    /*
     * The value property.
     */
    private List<JobDetails> value;

    /*
     * Total records count number.
     */
    private Long count;

    /*
     * Link to the next page of results.
     */
    private String nextLink;

    /**
     * Creates an instance of {@link JobDetailsList}.
     */
    public JobDetailsList() {
    }

    /**
     * Get the value property: The value property.
     *
     * @return the value value.
     */
    public List<JobDetails> getValue() {
        return this.value;
    }

    /**
     * Get the count property: Total records count number.
     *
     * @return the count value.
     */
    public Long getCount() {
        return this.count;
    }

    /**
     * Set the count property: Total records count number.
     *
     * @param count the count value to set.
     * @return the JobDetailsList object itself.
     */
    public JobDetailsList setCount(Long count) {
        this.count = count;
        return this;
    }

    /**
     * Get the nextLink property: Link to the next page of results.
     *
     * @return the nextLink value.
     */
    public String getNextLink() {
        return this.nextLink;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject().writeNumberField("count", count).writeEndObject();
    }

    /**
     * Deserializes an instance of {@link JobDetailsList} from the passed {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link JobDetailsList}, or null if {@link JsonReader} was pointing
     * {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static JobDetailsList fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobDetailsList jobDetailsList = new JobDetailsList();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    jobDetailsList.value = reader.readArray(JobDetails::fromJson);
                } else if ("count".equals(fieldName)) {
                    jobDetailsList.count = reader.getNullable(JsonReader::getLong);
                } else if ("nextLink".equals(fieldName)) {
                    jobDetailsList.nextLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return jobDetailsList;
        });
    }
}
