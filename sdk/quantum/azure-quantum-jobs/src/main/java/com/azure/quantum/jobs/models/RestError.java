// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.quantum.jobs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;

/** Error information returned by the API. */
@Fluent
public final class RestError implements JsonSerializable<RestError> {
    /*
     * An error response from Azure.
     */
    private ErrorData error;

    /**
     * Creates an instance of {@link RestError}.
     */
    public RestError() {
    }

    /**
     * Get the error property: An error response from Azure.
     *
     * @return the error value.
     */
    public ErrorData getError() {
        return this.error;
    }

    /**
     * Set the error property: An error response from Azure.
     *
     * @param error the error value to set.
     * @return the RestError object itself.
     */
    public RestError setError(ErrorData error) {
        this.error = error;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeStartObject().writeJsonField("error", error).writeEndObject();
    }

    /**
     * Deserializes an instance of {@link RestError} from the passed {@link JsonReader}.
     *
     * @param jsonReader The {@link JsonReader} to read.
     * @return An instance of {@link RestError}, or null if {@link JsonReader} was pointing {@link JsonToken#NULL}.
     * @throws IOException If an error occurs while reading the {@link JsonReader}.
     */
    public static RestError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RestError restError = new RestError();

            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("error".equals(fieldName)) {
                    restError.error = ErrorData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return restError;
        });
    }
}
