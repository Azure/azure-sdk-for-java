// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quantum.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.quantum.fluent.models.OperationInner;
import com.azure.resourcemanager.quantum.models.OperationDisplay;
import org.junit.jupiter.api.Assertions;

public final class OperationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OperationInner model =
            BinaryData
                .fromString(
                    "{\"name\":\"odfvuefywsbp\",\"isDataAction\":false,\"display\":{\"provider\":\"hrfou\",\"resource\":\"taakc\",\"operation\":\"iyzvqtmnub\",\"description\":\"kpzksmondjmq\"}}")
                .toObject(OperationInner.class);
        Assertions.assertEquals("odfvuefywsbp", model.name());
        Assertions.assertEquals(false, model.isDataAction());
        Assertions.assertEquals("hrfou", model.display().provider());
        Assertions.assertEquals("taakc", model.display().resource());
        Assertions.assertEquals("iyzvqtmnub", model.display().operation());
        Assertions.assertEquals("kpzksmondjmq", model.display().description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OperationInner model =
            new OperationInner()
                .withName("odfvuefywsbp")
                .withIsDataAction(false)
                .withDisplay(
                    new OperationDisplay()
                        .withProvider("hrfou")
                        .withResource("taakc")
                        .withOperation("iyzvqtmnub")
                        .withDescription("kpzksmondjmq"));
        model = BinaryData.fromObject(model).toObject(OperationInner.class);
        Assertions.assertEquals("odfvuefywsbp", model.name());
        Assertions.assertEquals(false, model.isDataAction());
        Assertions.assertEquals("hrfou", model.display().provider());
        Assertions.assertEquals("taakc", model.display().resource());
        Assertions.assertEquals("iyzvqtmnub", model.display().operation());
        Assertions.assertEquals("kpzksmondjmq", model.display().description());
    }
}
