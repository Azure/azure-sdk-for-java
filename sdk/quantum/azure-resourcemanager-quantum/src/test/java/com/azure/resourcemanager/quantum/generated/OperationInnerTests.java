// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quantum.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.quantum.fluent.models.OperationInner;
import com.azure.resourcemanager.quantum.models.OperationDisplay;
import org.junit.jupiter.api.Assertions;

public final class OperationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OperationInner model =
            BinaryData
                .fromString(
                    "{\"name\":\"x\",\"isDataAction\":false,\"display\":{\"provider\":\"kphywpnvjto\",\"resource\":\"ermclfplphoxuscr\",\"operation\":\"bgyepsbj\",\"description\":\"zq\"}}")
                .toObject(OperationInner.class);
        Assertions.assertEquals("x", model.name());
        Assertions.assertEquals(false, model.isDataAction());
        Assertions.assertEquals("kphywpnvjto", model.display().provider());
        Assertions.assertEquals("ermclfplphoxuscr", model.display().resource());
        Assertions.assertEquals("bgyepsbj", model.display().operation());
        Assertions.assertEquals("zq", model.display().description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OperationInner model =
            new OperationInner()
                .withName("x")
                .withIsDataAction(false)
                .withDisplay(
                    new OperationDisplay()
                        .withProvider("kphywpnvjto")
                        .withResource("ermclfplphoxuscr")
                        .withOperation("bgyepsbj")
                        .withDescription("zq"));
        model = BinaryData.fromObject(model).toObject(OperationInner.class);
        Assertions.assertEquals("x", model.name());
        Assertions.assertEquals(false, model.isDataAction());
        Assertions.assertEquals("kphywpnvjto", model.display().provider());
        Assertions.assertEquals("ermclfplphoxuscr", model.display().resource());
        Assertions.assertEquals("bgyepsbj", model.display().operation());
        Assertions.assertEquals("zq", model.display().description());
    }
}
