// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quantum.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.quantum.models.TargetDescription;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class TargetDescriptionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TargetDescription model =
            BinaryData
                .fromString(
                    "{\"id\":\"onocukok\",\"name\":\"axuconuq\",\"description\":\"fkbey\",\"acceptedDataFormats\":[\"rmjmwvvjektc\",\"senhwlrs\",\"frzpwvlqdqgb\",\"qylihkaetckt\"],\"acceptedContentEncodings\":[\"ivfsnk\",\"m\",\"ctq\",\"jf\"]}")
                .toObject(TargetDescription.class);
        Assertions.assertEquals("onocukok", model.id());
        Assertions.assertEquals("axuconuq", model.name());
        Assertions.assertEquals("fkbey", model.description());
        Assertions.assertEquals("rmjmwvvjektc", model.acceptedDataFormats().get(0));
        Assertions.assertEquals("ivfsnk", model.acceptedContentEncodings().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TargetDescription model =
            new TargetDescription()
                .withId("onocukok")
                .withName("axuconuq")
                .withDescription("fkbey")
                .withAcceptedDataFormats(Arrays.asList("rmjmwvvjektc", "senhwlrs", "frzpwvlqdqgb", "qylihkaetckt"))
                .withAcceptedContentEncodings(Arrays.asList("ivfsnk", "m", "ctq", "jf"));
        model = BinaryData.fromObject(model).toObject(TargetDescription.class);
        Assertions.assertEquals("onocukok", model.id());
        Assertions.assertEquals("axuconuq", model.name());
        Assertions.assertEquals("fkbey", model.description());
        Assertions.assertEquals("rmjmwvvjektc", model.acceptedDataFormats().get(0));
        Assertions.assertEquals("ivfsnk", model.acceptedContentEncodings().get(0));
    }
}
