// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quantum.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.quantum.fluent.models.QuantumWorkspaceInner;
import com.azure.resourcemanager.quantum.models.QuantumWorkspaceIdentity;
import com.azure.resourcemanager.quantum.models.ResourceIdentityType;
import com.azure.resourcemanager.quantum.models.WorkspaceListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkspaceListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkspaceListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"providers\":[],\"usable\":\"Partial\",\"provisioningState\":\"Succeeded\",\"storageAccount\":\"s\",\"endpointUri\":\"nyejhkryhtnap\"},\"identity\":{\"principalId\":\"lokjyemkk\",\"tenantId\":\"ipjoxzjnchgejs\",\"type\":\"None\"},\"location\":\"ailzydehojwyahu\",\"tags\":{\"wixjsprozvcp\":\"pmqnja\",\"atscmd\":\"tegjvwmf\",\"zkrwfn\":\"pjhulsuuvmkj\",\"lwejdpv\":\"iodjp\"},\"id\":\"ryo\",\"name\":\"psoacctazakljl\",\"type\":\"hbcryffdfdosyge\"},{\"properties\":{\"providers\":[],\"usable\":\"Partial\",\"provisioningState\":\"ProviderUpdating\",\"storageAccount\":\"msbzjhcrz\",\"endpointUri\":\"dphlxaolt\"},\"identity\":{\"principalId\":\"rgqjbpfzfsinzg\",\"tenantId\":\"cjrwzoxxjtfellu\",\"type\":\"None\"},\"location\":\"tonpe\",\"tags\":{\"ypininm\":\"jkjlxofpdvhpfx\",\"po\":\"yhuybbkpod\",\"ognarxzxtheotus\":\"ginuvamih\"},\"id\":\"vyevcciqi\",\"name\":\"nhungbw\",\"type\":\"zrnf\"},{\"properties\":{\"providers\":[],\"usable\":\"Partial\",\"provisioningState\":\"ProviderProvisioning\",\"storageAccount\":\"mvtzfkufub\",\"endpointUri\":\"ofx\"},\"identity\":{\"principalId\":\"fjaeq\",\"tenantId\":\"qjbasvms\",\"type\":\"None\"},\"location\":\"lngsntnbybkzgcwr\",\"tags\":{\"jdous\":\"xxwr\",\"xbnjbiksq\":\"cqvkocrcjdkwtn\",\"ainqpjwnzlljfm\":\"gls\",\"vmgxsab\":\"pee\"},\"id\":\"yqduujit\",\"name\":\"jczdzevndh\",\"type\":\"rwpdappdsbdkvwrw\"}],\"nextLink\":\"eusnhutj\"}")
                .toObject(WorkspaceListResult.class);
        Assertions.assertEquals("ailzydehojwyahu", model.value().get(0).location());
        Assertions.assertEquals("pmqnja", model.value().get(0).tags().get("wixjsprozvcp"));
        Assertions.assertEquals(ResourceIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("s", model.value().get(0).storageAccount());
        Assertions.assertEquals("eusnhutj", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkspaceListResult model =
            new WorkspaceListResult()
                .withValue(
                    Arrays
                        .asList(
                            new QuantumWorkspaceInner()
                                .withLocation("ailzydehojwyahu")
                                .withTags(
                                    mapOf(
                                        "wixjsprozvcp",
                                        "pmqnja",
                                        "atscmd",
                                        "tegjvwmf",
                                        "zkrwfn",
                                        "pjhulsuuvmkj",
                                        "lwejdpv",
                                        "iodjp"))
                                .withIdentity(new QuantumWorkspaceIdentity().withType(ResourceIdentityType.NONE))
                                .withProviders(Arrays.asList())
                                .withStorageAccount("s"),
                            new QuantumWorkspaceInner()
                                .withLocation("tonpe")
                                .withTags(
                                    mapOf(
                                        "ypininm",
                                        "jkjlxofpdvhpfx",
                                        "po",
                                        "yhuybbkpod",
                                        "ognarxzxtheotus",
                                        "ginuvamih"))
                                .withIdentity(new QuantumWorkspaceIdentity().withType(ResourceIdentityType.NONE))
                                .withProviders(Arrays.asList())
                                .withStorageAccount("msbzjhcrz"),
                            new QuantumWorkspaceInner()
                                .withLocation("lngsntnbybkzgcwr")
                                .withTags(
                                    mapOf(
                                        "jdous",
                                        "xxwr",
                                        "xbnjbiksq",
                                        "cqvkocrcjdkwtn",
                                        "ainqpjwnzlljfm",
                                        "gls",
                                        "vmgxsab",
                                        "pee"))
                                .withIdentity(new QuantumWorkspaceIdentity().withType(ResourceIdentityType.NONE))
                                .withProviders(Arrays.asList())
                                .withStorageAccount("mvtzfkufub")))
                .withNextLink("eusnhutj");
        model = BinaryData.fromObject(model).toObject(WorkspaceListResult.class);
        Assertions.assertEquals("ailzydehojwyahu", model.value().get(0).location());
        Assertions.assertEquals("pmqnja", model.value().get(0).tags().get("wixjsprozvcp"));
        Assertions.assertEquals(ResourceIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("s", model.value().get(0).storageAccount());
        Assertions.assertEquals("eusnhutj", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
