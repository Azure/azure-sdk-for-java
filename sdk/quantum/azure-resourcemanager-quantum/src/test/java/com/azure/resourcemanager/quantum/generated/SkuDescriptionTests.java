// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quantum.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.quantum.models.PricingDetail;
import com.azure.resourcemanager.quantum.models.QuotaDimension;
import com.azure.resourcemanager.quantum.models.SkuDescription;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SkuDescriptionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SkuDescription model =
            BinaryData
                .fromString(
                    "{\"id\":\"brjcxe\",\"name\":\"uwutttxfvjrbi\",\"version\":\"hxepcyvahfnlj\",\"description\":\"qxj\",\"restrictedAccessUri\":\"ujqgidok\",\"autoAdd\":true,\"targets\":[\"oxgvclt\",\"gsncghkjeszz\",\"bijhtxfvgxbf\",\"mxnehmp\"],\"quotaDimensions\":[{\"id\":\"godebfqkkrbmpu\",\"scope\":\"riwflzlfb\",\"period\":\"puz\",\"quota\":87.497345,\"name\":\"pnq\",\"description\":\"hmgkbrpyy\",\"unit\":\"ibnuqqkpik\",\"unitPlural\":\"rgvtqag\"},{\"id\":\"uynhijg\",\"scope\":\"ebf\",\"period\":\"arbu\",\"quota\":99.74449,\"name\":\"pnazzm\",\"description\":\"runmp\",\"unit\":\"tdbhrbnla\",\"unitPlural\":\"xmyskp\"}],\"pricingDetails\":[{\"id\":\"btkcxywnytnrsyn\",\"value\":\"idybyxczf\"},{\"id\":\"haaxdbabphl\",\"value\":\"qlfktsths\"},{\"id\":\"ocmnyyazttbtwwrq\",\"value\":\"edckzywbiexzfey\"}]}")
                .toObject(SkuDescription.class);
        Assertions.assertEquals("brjcxe", model.id());
        Assertions.assertEquals("uwutttxfvjrbi", model.name());
        Assertions.assertEquals("hxepcyvahfnlj", model.version());
        Assertions.assertEquals("qxj", model.description());
        Assertions.assertEquals("ujqgidok", model.restrictedAccessUri());
        Assertions.assertEquals(true, model.autoAdd());
        Assertions.assertEquals("oxgvclt", model.targets().get(0));
        Assertions.assertEquals("godebfqkkrbmpu", model.quotaDimensions().get(0).id());
        Assertions.assertEquals("riwflzlfb", model.quotaDimensions().get(0).scope());
        Assertions.assertEquals("puz", model.quotaDimensions().get(0).period());
        Assertions.assertEquals(87.497345F, model.quotaDimensions().get(0).quota());
        Assertions.assertEquals("pnq", model.quotaDimensions().get(0).name());
        Assertions.assertEquals("hmgkbrpyy", model.quotaDimensions().get(0).description());
        Assertions.assertEquals("ibnuqqkpik", model.quotaDimensions().get(0).unit());
        Assertions.assertEquals("rgvtqag", model.quotaDimensions().get(0).unitPlural());
        Assertions.assertEquals("btkcxywnytnrsyn", model.pricingDetails().get(0).id());
        Assertions.assertEquals("idybyxczf", model.pricingDetails().get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SkuDescription model =
            new SkuDescription()
                .withId("brjcxe")
                .withName("uwutttxfvjrbi")
                .withVersion("hxepcyvahfnlj")
                .withDescription("qxj")
                .withRestrictedAccessUri("ujqgidok")
                .withAutoAdd(true)
                .withTargets(Arrays.asList("oxgvclt", "gsncghkjeszz", "bijhtxfvgxbf", "mxnehmp"))
                .withQuotaDimensions(
                    Arrays
                        .asList(
                            new QuotaDimension()
                                .withId("godebfqkkrbmpu")
                                .withScope("riwflzlfb")
                                .withPeriod("puz")
                                .withQuota(87.497345F)
                                .withName("pnq")
                                .withDescription("hmgkbrpyy")
                                .withUnit("ibnuqqkpik")
                                .withUnitPlural("rgvtqag"),
                            new QuotaDimension()
                                .withId("uynhijg")
                                .withScope("ebf")
                                .withPeriod("arbu")
                                .withQuota(99.74449F)
                                .withName("pnazzm")
                                .withDescription("runmp")
                                .withUnit("tdbhrbnla")
                                .withUnitPlural("xmyskp")))
                .withPricingDetails(
                    Arrays
                        .asList(
                            new PricingDetail().withId("btkcxywnytnrsyn").withValue("idybyxczf"),
                            new PricingDetail().withId("haaxdbabphl").withValue("qlfktsths"),
                            new PricingDetail().withId("ocmnyyazttbtwwrq").withValue("edckzywbiexzfey")));
        model = BinaryData.fromObject(model).toObject(SkuDescription.class);
        Assertions.assertEquals("brjcxe", model.id());
        Assertions.assertEquals("uwutttxfvjrbi", model.name());
        Assertions.assertEquals("hxepcyvahfnlj", model.version());
        Assertions.assertEquals("qxj", model.description());
        Assertions.assertEquals("ujqgidok", model.restrictedAccessUri());
        Assertions.assertEquals(true, model.autoAdd());
        Assertions.assertEquals("oxgvclt", model.targets().get(0));
        Assertions.assertEquals("godebfqkkrbmpu", model.quotaDimensions().get(0).id());
        Assertions.assertEquals("riwflzlfb", model.quotaDimensions().get(0).scope());
        Assertions.assertEquals("puz", model.quotaDimensions().get(0).period());
        Assertions.assertEquals(87.497345F, model.quotaDimensions().get(0).quota());
        Assertions.assertEquals("pnq", model.quotaDimensions().get(0).name());
        Assertions.assertEquals("hmgkbrpyy", model.quotaDimensions().get(0).description());
        Assertions.assertEquals("ibnuqqkpik", model.quotaDimensions().get(0).unit());
        Assertions.assertEquals("rgvtqag", model.quotaDimensions().get(0).unitPlural());
        Assertions.assertEquals("btkcxywnytnrsyn", model.pricingDetails().get(0).id());
        Assertions.assertEquals("idybyxczf", model.pricingDetails().get(0).value());
    }
}
