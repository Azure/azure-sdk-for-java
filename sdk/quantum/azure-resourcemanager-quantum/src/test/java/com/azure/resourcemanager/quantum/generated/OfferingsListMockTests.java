// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quantum.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.quantum.AzureQuantumManager;
import com.azure.resourcemanager.quantum.models.ProviderDescription;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class OfferingsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"id\":\"oegokdwbwh\",\"name\":\"z\",\"properties\":{\"description\":\"rvexztvb\",\"providerType\":\"gsfraoyzkoow\",\"company\":\"mnguxawqaldsyu\",\"defaultEndpoint\":\"imerqfobwyznk\",\"aad\":{\"applicationId\":\"utwpfhp\",\"tenantId\":\"m\"},\"managedApplication\":{\"publisherId\":\"kdsnfdsdoakgtdl\",\"offerId\":\"kzevdlhewpusds\"},\"targets\":[{\"id\":\"ogvbbejdcngq\",\"name\":\"oakufgm\",\"description\":\"rwr\",\"acceptedDataFormats\":[\"twaenuuzko\",\"bminrfdwoyuhhzi\",\"iefozbhdmsml\"],\"acceptedContentEncodings\":[\"hoftr\",\"ae\",\"u\",\"ah\"]},{\"id\":\"cslfaoqzpiyylha\",\"name\":\"swhccsphk\",\"description\":\"vwitqscyw\",\"acceptedDataFormats\":[\"woluhczbwemhair\"],\"acceptedContentEncodings\":[\"gzd\",\"msweypqwdxggicc\",\"n\"]},{\"id\":\"huexmk\",\"name\":\"lstvlzywe\",\"description\":\"zrncsdt\",\"acceptedDataFormats\":[\"siypbs\"],\"acceptedContentEncodings\":[\"tg\",\"sl\"]}],\"skus\":[{\"id\":\"cy\",\"name\":\"ukyhejhzis\",\"version\":\"fpel\",\"description\":\"p\",\"restrictedAccessUri\":\"ksrpqv\",\"autoAdd\":false,\"targets\":[\"ehtwdwrft\",\"wib\"],\"quotaDimensions\":[{}],\"pricingDetails\":[{}]}],\"quotaDimensions\":[{\"id\":\"hfwpracstwit\",\"scope\":\"hevxcced\",\"period\":\"nmdyodnwzxl\",\"quota\":58.360874,\"name\":\"nhltiugcxn\",\"description\":\"vwxqibyqunyo\",\"unit\":\"wlmdjrkv\",\"unitPlural\":\"bvfvpdbod\"}],\"pricingDimensions\":[{\"id\":\"sjq\",\"name\":\"krribdeibqi\"},{\"id\":\"kghv\",\"name\":\"dzwmkrefajpj\"},{\"id\":\"wkqnyhg\",\"name\":\"j\"}]}}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AzureQuantumManager manager =
            AzureQuantumManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ProviderDescription> response =
            manager.offerings().list("khnzbonlw", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("oegokdwbwh", response.iterator().next().id());
        Assertions.assertEquals("ogvbbejdcngq", response.iterator().next().properties().targets().get(0).id());
        Assertions.assertEquals("oakufgm", response.iterator().next().properties().targets().get(0).name());
        Assertions.assertEquals("rwr", response.iterator().next().properties().targets().get(0).description());
        Assertions
            .assertEquals(
                "twaenuuzko", response.iterator().next().properties().targets().get(0).acceptedDataFormats().get(0));
        Assertions
            .assertEquals(
                "hoftr", response.iterator().next().properties().targets().get(0).acceptedContentEncodings().get(0));
        Assertions.assertEquals("cy", response.iterator().next().properties().skus().get(0).id());
        Assertions.assertEquals("ukyhejhzis", response.iterator().next().properties().skus().get(0).name());
        Assertions.assertEquals("fpel", response.iterator().next().properties().skus().get(0).version());
        Assertions.assertEquals("p", response.iterator().next().properties().skus().get(0).description());
        Assertions.assertEquals("ksrpqv", response.iterator().next().properties().skus().get(0).restrictedAccessUri());
        Assertions.assertEquals(false, response.iterator().next().properties().skus().get(0).autoAdd());
        Assertions.assertEquals("ehtwdwrft", response.iterator().next().properties().skus().get(0).targets().get(0));
        Assertions.assertEquals("hfwpracstwit", response.iterator().next().properties().quotaDimensions().get(0).id());
        Assertions.assertEquals("hevxcced", response.iterator().next().properties().quotaDimensions().get(0).scope());
        Assertions
            .assertEquals("nmdyodnwzxl", response.iterator().next().properties().quotaDimensions().get(0).period());
        Assertions.assertEquals(58.360874F, response.iterator().next().properties().quotaDimensions().get(0).quota());
        Assertions.assertEquals("nhltiugcxn", response.iterator().next().properties().quotaDimensions().get(0).name());
        Assertions
            .assertEquals(
                "vwxqibyqunyo", response.iterator().next().properties().quotaDimensions().get(0).description());
        Assertions.assertEquals("wlmdjrkv", response.iterator().next().properties().quotaDimensions().get(0).unit());
        Assertions
            .assertEquals("bvfvpdbod", response.iterator().next().properties().quotaDimensions().get(0).unitPlural());
        Assertions.assertEquals("sjq", response.iterator().next().properties().pricingDimensions().get(0).id());
        Assertions
            .assertEquals("krribdeibqi", response.iterator().next().properties().pricingDimensions().get(0).name());
    }
}
