// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quantum.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.quantum.fluent.models.OperationInner;
import com.azure.resourcemanager.quantum.models.OperationDisplay;
import com.azure.resourcemanager.quantum.models.OperationsList;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class OperationsListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OperationsList model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"wkfvhqcrailvp\",\"value\":[{\"name\":\"fuflrwdmhdlx\",\"isDataAction\":true,\"display\":{\"provider\":\"agafcnihgwqap\",\"resource\":\"dgfbcvkcvqvpke\",\"operation\":\"cvdrhvoodsot\",\"description\":\"bzdopcj\"}},{\"name\":\"nhdldwmgxcx\",\"isDataAction\":true,\"display\":{\"provider\":\"utwu\",\"resource\":\"grpkhjwniyqs\",\"operation\":\"i\",\"description\":\"dggkzzlvmbmpa\"}}]}")
                .toObject(OperationsList.class);
        Assertions.assertEquals("wkfvhqcrailvp", model.nextLink());
        Assertions.assertEquals("fuflrwdmhdlx", model.value().get(0).name());
        Assertions.assertEquals(true, model.value().get(0).isDataAction());
        Assertions.assertEquals("agafcnihgwqap", model.value().get(0).display().provider());
        Assertions.assertEquals("dgfbcvkcvqvpke", model.value().get(0).display().resource());
        Assertions.assertEquals("cvdrhvoodsot", model.value().get(0).display().operation());
        Assertions.assertEquals("bzdopcj", model.value().get(0).display().description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OperationsList model =
            new OperationsList()
                .withNextLink("wkfvhqcrailvp")
                .withValue(
                    Arrays
                        .asList(
                            new OperationInner()
                                .withName("fuflrwdmhdlx")
                                .withIsDataAction(true)
                                .withDisplay(
                                    new OperationDisplay()
                                        .withProvider("agafcnihgwqap")
                                        .withResource("dgfbcvkcvqvpke")
                                        .withOperation("cvdrhvoodsot")
                                        .withDescription("bzdopcj")),
                            new OperationInner()
                                .withName("nhdldwmgxcx")
                                .withIsDataAction(true)
                                .withDisplay(
                                    new OperationDisplay()
                                        .withProvider("utwu")
                                        .withResource("grpkhjwniyqs")
                                        .withOperation("i")
                                        .withDescription("dggkzzlvmbmpa"))));
        model = BinaryData.fromObject(model).toObject(OperationsList.class);
        Assertions.assertEquals("wkfvhqcrailvp", model.nextLink());
        Assertions.assertEquals("fuflrwdmhdlx", model.value().get(0).name());
        Assertions.assertEquals(true, model.value().get(0).isDataAction());
        Assertions.assertEquals("agafcnihgwqap", model.value().get(0).display().provider());
        Assertions.assertEquals("dgfbcvkcvqvpke", model.value().get(0).display().resource());
        Assertions.assertEquals("cvdrhvoodsot", model.value().get(0).display().operation());
        Assertions.assertEquals("bzdopcj", model.value().get(0).display().description());
    }
}
