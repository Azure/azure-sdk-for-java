// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quantum.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.quantum.fluent.models.OperationInner;
import com.azure.resourcemanager.quantum.models.OperationDisplay;
import com.azure.resourcemanager.quantum.models.OperationsList;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class OperationsListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OperationsList model = BinaryData.fromString(
            "{\"nextLink\":\"gaokonzmnsikv\",\"value\":[{\"name\":\"ze\",\"isDataAction\":true,\"display\":{\"provider\":\"tfz\",\"resource\":\"hhvh\",\"operation\":\"r\",\"description\":\"dkwobdagx\"}}]}")
            .toObject(OperationsList.class);
        Assertions.assertEquals("gaokonzmnsikv", model.nextLink());
        Assertions.assertEquals("ze", model.value().get(0).name());
        Assertions.assertEquals(true, model.value().get(0).isDataAction());
        Assertions.assertEquals("tfz", model.value().get(0).display().provider());
        Assertions.assertEquals("hhvh", model.value().get(0).display().resource());
        Assertions.assertEquals("r", model.value().get(0).display().operation());
        Assertions.assertEquals("dkwobdagx", model.value().get(0).display().description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OperationsList model = new OperationsList().withNextLink("gaokonzmnsikv").withValue(
            Arrays.asList(new OperationInner().withName("ze").withIsDataAction(true).withDisplay(new OperationDisplay()
                .withProvider("tfz").withResource("hhvh").withOperation("r").withDescription("dkwobdagx"))));
        model = BinaryData.fromObject(model).toObject(OperationsList.class);
        Assertions.assertEquals("gaokonzmnsikv", model.nextLink());
        Assertions.assertEquals("ze", model.value().get(0).name());
        Assertions.assertEquals(true, model.value().get(0).isDataAction());
        Assertions.assertEquals("tfz", model.value().get(0).display().provider());
        Assertions.assertEquals("hhvh", model.value().get(0).display().resource());
        Assertions.assertEquals("r", model.value().get(0).display().operation());
        Assertions.assertEquals("dkwobdagx", model.value().get(0).display().description());
    }
}
