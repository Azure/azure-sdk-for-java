// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quantum.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * List of api keys to be generated.
 */
@Fluent
public final class ApiKeys implements JsonSerializable<ApiKeys> {
    /*
     * A list of api key names.
     */
    private List<KeyType> keys;

    /**
     * Creates an instance of ApiKeys class.
     */
    public ApiKeys() {
    }

    /**
     * Get the keys property: A list of api key names.
     * 
     * @return the keys value.
     */
    public List<KeyType> keys() {
        return this.keys;
    }

    /**
     * Set the keys property: A list of api key names.
     * 
     * @param keys the keys value to set.
     * @return the ApiKeys object itself.
     */
    public ApiKeys withKeys(List<KeyType> keys) {
        this.keys = keys;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("keys", this.keys,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApiKeys from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApiKeys if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the ApiKeys.
     */
    public static ApiKeys fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApiKeys deserializedApiKeys = new ApiKeys();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keys".equals(fieldName)) {
                    List<KeyType> keys = reader.readArray(reader1 -> KeyType.fromString(reader1.getString()));
                    deserializedApiKeys.keys = keys;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApiKeys;
        });
    }
}
