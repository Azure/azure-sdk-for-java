// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quantum.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Provider's Managed-Application info.
 */
@Immutable
public final class ProviderPropertiesManagedApplication
    implements JsonSerializable<ProviderPropertiesManagedApplication> {
    /*
     * Provider's publisher id.
     */
    private String publisherId;

    /*
     * Provider's offer id.
     */
    private String offerId;

    /**
     * Creates an instance of ProviderPropertiesManagedApplication class.
     */
    public ProviderPropertiesManagedApplication() {
    }

    /**
     * Get the publisherId property: Provider's publisher id.
     * 
     * @return the publisherId value.
     */
    public String publisherId() {
        return this.publisherId;
    }

    /**
     * Get the offerId property: Provider's offer id.
     * 
     * @return the offerId value.
     */
    public String offerId() {
        return this.offerId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProviderPropertiesManagedApplication from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProviderPropertiesManagedApplication if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProviderPropertiesManagedApplication.
     */
    public static ProviderPropertiesManagedApplication fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProviderPropertiesManagedApplication deserializedProviderPropertiesManagedApplication
                = new ProviderPropertiesManagedApplication();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("publisherId".equals(fieldName)) {
                    deserializedProviderPropertiesManagedApplication.publisherId = reader.getString();
                } else if ("offerId".equals(fieldName)) {
                    deserializedProviderPropertiesManagedApplication.offerId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProviderPropertiesManagedApplication;
        });
    }
}
