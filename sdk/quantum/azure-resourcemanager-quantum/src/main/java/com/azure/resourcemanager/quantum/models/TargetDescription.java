// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quantum.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Information about a Target. A target is the component that can process a specific type of Job.
 */
@Fluent
public final class TargetDescription implements JsonSerializable<TargetDescription> {
    /*
     * Unique target id.
     */
    private String id;

    /*
     * Display name of this target.
     */
    private String name;

    /*
     * A description about this target.
     */
    private String description;

    /*
     * List of data formats accepted by this target.
     */
    private List<String> acceptedDataFormats;

    /*
     * List of content encodings accepted by this target.
     */
    private List<String> acceptedContentEncodings;

    /**
     * Creates an instance of TargetDescription class.
     */
    public TargetDescription() {
    }

    /**
     * Get the id property: Unique target id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Unique target id.
     * 
     * @param id the id value to set.
     * @return the TargetDescription object itself.
     */
    public TargetDescription withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Display name of this target.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Display name of this target.
     * 
     * @param name the name value to set.
     * @return the TargetDescription object itself.
     */
    public TargetDescription withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the description property: A description about this target.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: A description about this target.
     * 
     * @param description the description value to set.
     * @return the TargetDescription object itself.
     */
    public TargetDescription withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the acceptedDataFormats property: List of data formats accepted by this target.
     * 
     * @return the acceptedDataFormats value.
     */
    public List<String> acceptedDataFormats() {
        return this.acceptedDataFormats;
    }

    /**
     * Set the acceptedDataFormats property: List of data formats accepted by this target.
     * 
     * @param acceptedDataFormats the acceptedDataFormats value to set.
     * @return the TargetDescription object itself.
     */
    public TargetDescription withAcceptedDataFormats(List<String> acceptedDataFormats) {
        this.acceptedDataFormats = acceptedDataFormats;
        return this;
    }

    /**
     * Get the acceptedContentEncodings property: List of content encodings accepted by this target.
     * 
     * @return the acceptedContentEncodings value.
     */
    public List<String> acceptedContentEncodings() {
        return this.acceptedContentEncodings;
    }

    /**
     * Set the acceptedContentEncodings property: List of content encodings accepted by this target.
     * 
     * @param acceptedContentEncodings the acceptedContentEncodings value to set.
     * @return the TargetDescription object itself.
     */
    public TargetDescription withAcceptedContentEncodings(List<String> acceptedContentEncodings) {
        this.acceptedContentEncodings = acceptedContentEncodings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("acceptedDataFormats", this.acceptedDataFormats,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("acceptedContentEncodings", this.acceptedContentEncodings,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TargetDescription from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TargetDescription if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TargetDescription.
     */
    public static TargetDescription fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TargetDescription deserializedTargetDescription = new TargetDescription();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedTargetDescription.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedTargetDescription.name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedTargetDescription.description = reader.getString();
                } else if ("acceptedDataFormats".equals(fieldName)) {
                    List<String> acceptedDataFormats = reader.readArray(reader1 -> reader1.getString());
                    deserializedTargetDescription.acceptedDataFormats = acceptedDataFormats;
                } else if ("acceptedContentEncodings".equals(fieldName)) {
                    List<String> acceptedContentEncodings = reader.readArray(reader1 -> reader1.getString());
                    deserializedTargetDescription.acceptedContentEncodings = acceptedContentEncodings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTargetDescription;
        });
    }
}
