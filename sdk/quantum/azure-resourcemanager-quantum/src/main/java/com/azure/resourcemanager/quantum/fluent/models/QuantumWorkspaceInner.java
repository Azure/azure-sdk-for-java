// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quantum.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.quantum.models.Provider;
import com.azure.resourcemanager.quantum.models.ProvisioningStatus;
import com.azure.resourcemanager.quantum.models.QuantumWorkspaceIdentity;
import com.azure.resourcemanager.quantum.models.UsableStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The resource proxy definition object for quantum workspace. */
@Fluent
public final class QuantumWorkspaceInner extends Resource {
    /*
     * Gets or sets the properties. Define quantum workspace's specific properties.
     */
    @JsonProperty(value = "properties")
    private WorkspaceResourceProperties innerProperties;

    /*
     * Managed Identity information.
     */
    @JsonProperty(value = "identity")
    private QuantumWorkspaceIdentity identity;

    /*
     * System metadata
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of QuantumWorkspaceInner class. */
    public QuantumWorkspaceInner() {
    }

    /**
     * Get the innerProperties property: Gets or sets the properties. Define quantum workspace's specific properties.
     *
     * @return the innerProperties value.
     */
    private WorkspaceResourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the identity property: Managed Identity information.
     *
     * @return the identity value.
     */
    public QuantumWorkspaceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: Managed Identity information.
     *
     * @param identity the identity value to set.
     * @return the QuantumWorkspaceInner object itself.
     */
    public QuantumWorkspaceInner withIdentity(QuantumWorkspaceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the systemData property: System metadata.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public QuantumWorkspaceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public QuantumWorkspaceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the providers property: List of Providers selected for this Workspace.
     *
     * @return the providers value.
     */
    public List<Provider> providers() {
        return this.innerProperties() == null ? null : this.innerProperties().providers();
    }

    /**
     * Set the providers property: List of Providers selected for this Workspace.
     *
     * @param providers the providers value to set.
     * @return the QuantumWorkspaceInner object itself.
     */
    public QuantumWorkspaceInner withProviders(List<Provider> providers) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WorkspaceResourceProperties();
        }
        this.innerProperties().withProviders(providers);
        return this;
    }

    /**
     * Get the usable property: Whether the current workspace is ready to accept Jobs.
     *
     * @return the usable value.
     */
    public UsableStatus usable() {
        return this.innerProperties() == null ? null : this.innerProperties().usable();
    }

    /**
     * Get the provisioningState property: Provisioning status field.
     *
     * @return the provisioningState value.
     */
    public ProvisioningStatus provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the storageAccount property: ARM Resource Id of the storage account associated with this workspace.
     *
     * @return the storageAccount value.
     */
    public String storageAccount() {
        return this.innerProperties() == null ? null : this.innerProperties().storageAccount();
    }

    /**
     * Set the storageAccount property: ARM Resource Id of the storage account associated with this workspace.
     *
     * @param storageAccount the storageAccount value to set.
     * @return the QuantumWorkspaceInner object itself.
     */
    public QuantumWorkspaceInner withStorageAccount(String storageAccount) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WorkspaceResourceProperties();
        }
        this.innerProperties().withStorageAccount(storageAccount);
        return this;
    }

    /**
     * Get the endpointUri property: The URI of the workspace endpoint.
     *
     * @return the endpointUri value.
     */
    public String endpointUri() {
        return this.innerProperties() == null ? null : this.innerProperties().endpointUri();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
    }
}
