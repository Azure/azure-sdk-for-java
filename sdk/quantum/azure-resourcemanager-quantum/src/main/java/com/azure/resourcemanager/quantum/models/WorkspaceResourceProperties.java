// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quantum.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of a Workspace.
 */
@Fluent
public final class WorkspaceResourceProperties implements JsonSerializable<WorkspaceResourceProperties> {
    /*
     * List of Providers selected for this Workspace
     */
    private List<Provider> providers;

    /*
     * Whether the current workspace is ready to accept Jobs.
     */
    private UsableStatus usable;

    /*
     * Provisioning status field
     */
    private ProvisioningStatus provisioningState;

    /*
     * ARM Resource Id of the storage account associated with this workspace.
     */
    private String storageAccount;

    /*
     * The URI of the workspace endpoint.
     */
    private String endpointUri;

    /*
     * Indicator of enablement of the Quantum workspace Api keys.
     */
    private Boolean apiKeyEnabled;

    /**
     * Creates an instance of WorkspaceResourceProperties class.
     */
    public WorkspaceResourceProperties() {
    }

    /**
     * Get the providers property: List of Providers selected for this Workspace.
     * 
     * @return the providers value.
     */
    public List<Provider> providers() {
        return this.providers;
    }

    /**
     * Set the providers property: List of Providers selected for this Workspace.
     * 
     * @param providers the providers value to set.
     * @return the WorkspaceResourceProperties object itself.
     */
    public WorkspaceResourceProperties withProviders(List<Provider> providers) {
        this.providers = providers;
        return this;
    }

    /**
     * Get the usable property: Whether the current workspace is ready to accept Jobs.
     * 
     * @return the usable value.
     */
    public UsableStatus usable() {
        return this.usable;
    }

    /**
     * Get the provisioningState property: Provisioning status field.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStatus provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the storageAccount property: ARM Resource Id of the storage account associated with this workspace.
     * 
     * @return the storageAccount value.
     */
    public String storageAccount() {
        return this.storageAccount;
    }

    /**
     * Set the storageAccount property: ARM Resource Id of the storage account associated with this workspace.
     * 
     * @param storageAccount the storageAccount value to set.
     * @return the WorkspaceResourceProperties object itself.
     */
    public WorkspaceResourceProperties withStorageAccount(String storageAccount) {
        this.storageAccount = storageAccount;
        return this;
    }

    /**
     * Get the endpointUri property: The URI of the workspace endpoint.
     * 
     * @return the endpointUri value.
     */
    public String endpointUri() {
        return this.endpointUri;
    }

    /**
     * Get the apiKeyEnabled property: Indicator of enablement of the Quantum workspace Api keys.
     * 
     * @return the apiKeyEnabled value.
     */
    public Boolean apiKeyEnabled() {
        return this.apiKeyEnabled;
    }

    /**
     * Set the apiKeyEnabled property: Indicator of enablement of the Quantum workspace Api keys.
     * 
     * @param apiKeyEnabled the apiKeyEnabled value to set.
     * @return the WorkspaceResourceProperties object itself.
     */
    public WorkspaceResourceProperties withApiKeyEnabled(Boolean apiKeyEnabled) {
        this.apiKeyEnabled = apiKeyEnabled;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (providers() != null) {
            providers().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("providers", this.providers, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("storageAccount", this.storageAccount);
        jsonWriter.writeBooleanField("apiKeyEnabled", this.apiKeyEnabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkspaceResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkspaceResourceProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkspaceResourceProperties.
     */
    public static WorkspaceResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkspaceResourceProperties deserializedWorkspaceResourceProperties = new WorkspaceResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("providers".equals(fieldName)) {
                    List<Provider> providers = reader.readArray(reader1 -> Provider.fromJson(reader1));
                    deserializedWorkspaceResourceProperties.providers = providers;
                } else if ("usable".equals(fieldName)) {
                    deserializedWorkspaceResourceProperties.usable = UsableStatus.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedWorkspaceResourceProperties.provisioningState
                        = ProvisioningStatus.fromString(reader.getString());
                } else if ("storageAccount".equals(fieldName)) {
                    deserializedWorkspaceResourceProperties.storageAccount = reader.getString();
                } else if ("endpointUri".equals(fieldName)) {
                    deserializedWorkspaceResourceProperties.endpointUri = reader.getString();
                } else if ("apiKeyEnabled".equals(fieldName)) {
                    deserializedWorkspaceResourceProperties.apiKeyEnabled = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkspaceResourceProperties;
        });
    }
}
