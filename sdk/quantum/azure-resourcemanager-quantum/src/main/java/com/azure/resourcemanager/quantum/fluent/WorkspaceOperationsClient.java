// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quantum.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.quantum.fluent.models.CheckNameAvailabilityResultInner;
import com.azure.resourcemanager.quantum.fluent.models.ListKeysResultInner;
import com.azure.resourcemanager.quantum.models.ApiKeys;
import com.azure.resourcemanager.quantum.models.CheckNameAvailabilityParameters;

/**
 * An instance of this class provides access to all the operations defined in WorkspaceOperationsClient.
 */
public interface WorkspaceOperationsClient {
    /**
     * Check the availability of the resource name.
     * 
     * @param locationName Location.
     * @param checkNameAvailabilityParameters The name and type of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of check name availability along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CheckNameAvailabilityResultInner> checkNameAvailabilityWithResponse(String locationName,
        CheckNameAvailabilityParameters checkNameAvailabilityParameters, Context context);

    /**
     * Check the availability of the resource name.
     * 
     * @param locationName Location.
     * @param checkNameAvailabilityParameters The name and type of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of check name availability.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CheckNameAvailabilityResultInner checkNameAvailability(String locationName,
        CheckNameAvailabilityParameters checkNameAvailabilityParameters);

    /**
     * Get the keys to use with the Quantum APIs. A key is used to authenticate and authorize access to the Quantum REST
     * APIs. Only one key is needed at a time; two are given to provide seamless key regeneration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the quantum workspace resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the keys to use with the Quantum APIs along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ListKeysResultInner> listKeysWithResponse(String resourceGroupName, String workspaceName, Context context);

    /**
     * Get the keys to use with the Quantum APIs. A key is used to authenticate and authorize access to the Quantum REST
     * APIs. Only one key is needed at a time; two are given to provide seamless key regeneration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the quantum workspace resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the keys to use with the Quantum APIs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ListKeysResultInner listKeys(String resourceGroupName, String workspaceName);

    /**
     * Regenerate either the primary or secondary key for use with the Quantum APIs. The old key will stop working
     * immediately.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the quantum workspace resource.
     * @param keySpecification Which key to regenerate: primary or secondary.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> regenerateKeysWithResponse(String resourceGroupName, String workspaceName, ApiKeys keySpecification,
        Context context);

    /**
     * Regenerate either the primary or secondary key for use with the Quantum APIs. The old key will stop working
     * immediately.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the quantum workspace resource.
     * @param keySpecification Which key to regenerate: primary or secondary.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void regenerateKeys(String resourceGroupName, String workspaceName, ApiKeys keySpecification);
}
