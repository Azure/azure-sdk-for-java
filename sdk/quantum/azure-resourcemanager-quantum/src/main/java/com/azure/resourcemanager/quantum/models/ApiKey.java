// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quantum.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Azure quantum workspace Api key details.
 */
@Fluent
public final class ApiKey implements JsonSerializable<ApiKey> {
    /*
     * The creation time of the api key.
     */
    private OffsetDateTime createdAt;

    /*
     * The Api key.
     */
    private String key;

    /**
     * Creates an instance of ApiKey class.
     */
    public ApiKey() {
    }

    /**
     * Get the createdAt property: The creation time of the api key.
     * 
     * @return the createdAt value.
     */
    public OffsetDateTime createdAt() {
        return this.createdAt;
    }

    /**
     * Set the createdAt property: The creation time of the api key.
     * 
     * @param createdAt the createdAt value to set.
     * @return the ApiKey object itself.
     */
    public ApiKey withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Get the key property: The Api key.
     * 
     * @return the key value.
     */
    public String key() {
        return this.key;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("createdAt",
            this.createdAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdAt));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApiKey from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApiKey if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the ApiKey.
     */
    public static ApiKey fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApiKey deserializedApiKey = new ApiKey();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("createdAt".equals(fieldName)) {
                    deserializedApiKey.createdAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("key".equals(fieldName)) {
                    deserializedApiKey.key = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApiKey;
        });
    }
}
