// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quantum.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Provider properties.
 */
@Fluent
public final class ProviderProperties implements JsonSerializable<ProviderProperties> {
    /*
     * A description about this provider.
     */
    private String description;

    /*
     * Provider type.
     */
    private String providerType;

    /*
     * Company name.
     */
    private String company;

    /*
     * Provider's default endpoint.
     */
    private String defaultEndpoint;

    /*
     * Azure Active Directory info.
     */
    private ProviderPropertiesAad aad;

    /*
     * Provider's Managed-Application info
     */
    private ProviderPropertiesManagedApplication managedApplication;

    /*
     * The list of targets available from this provider.
     */
    private List<TargetDescription> targets;

    /*
     * The list of skus available from this provider.
     */
    private List<SkuDescription> skus;

    /*
     * The list of quota dimensions from the provider.
     */
    private List<QuotaDimension> quotaDimensions;

    /*
     * The list of pricing dimensions from the provider.
     */
    private List<PricingDimension> pricingDimensions;

    /**
     * Creates an instance of ProviderProperties class.
     */
    public ProviderProperties() {
    }

    /**
     * Get the description property: A description about this provider.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the providerType property: Provider type.
     * 
     * @return the providerType value.
     */
    public String providerType() {
        return this.providerType;
    }

    /**
     * Get the company property: Company name.
     * 
     * @return the company value.
     */
    public String company() {
        return this.company;
    }

    /**
     * Get the defaultEndpoint property: Provider's default endpoint.
     * 
     * @return the defaultEndpoint value.
     */
    public String defaultEndpoint() {
        return this.defaultEndpoint;
    }

    /**
     * Get the aad property: Azure Active Directory info.
     * 
     * @return the aad value.
     */
    public ProviderPropertiesAad aad() {
        return this.aad;
    }

    /**
     * Set the aad property: Azure Active Directory info.
     * 
     * @param aad the aad value to set.
     * @return the ProviderProperties object itself.
     */
    public ProviderProperties withAad(ProviderPropertiesAad aad) {
        this.aad = aad;
        return this;
    }

    /**
     * Get the managedApplication property: Provider's Managed-Application info.
     * 
     * @return the managedApplication value.
     */
    public ProviderPropertiesManagedApplication managedApplication() {
        return this.managedApplication;
    }

    /**
     * Set the managedApplication property: Provider's Managed-Application info.
     * 
     * @param managedApplication the managedApplication value to set.
     * @return the ProviderProperties object itself.
     */
    public ProviderProperties withManagedApplication(ProviderPropertiesManagedApplication managedApplication) {
        this.managedApplication = managedApplication;
        return this;
    }

    /**
     * Get the targets property: The list of targets available from this provider.
     * 
     * @return the targets value.
     */
    public List<TargetDescription> targets() {
        return this.targets;
    }

    /**
     * Set the targets property: The list of targets available from this provider.
     * 
     * @param targets the targets value to set.
     * @return the ProviderProperties object itself.
     */
    public ProviderProperties withTargets(List<TargetDescription> targets) {
        this.targets = targets;
        return this;
    }

    /**
     * Get the skus property: The list of skus available from this provider.
     * 
     * @return the skus value.
     */
    public List<SkuDescription> skus() {
        return this.skus;
    }

    /**
     * Set the skus property: The list of skus available from this provider.
     * 
     * @param skus the skus value to set.
     * @return the ProviderProperties object itself.
     */
    public ProviderProperties withSkus(List<SkuDescription> skus) {
        this.skus = skus;
        return this;
    }

    /**
     * Get the quotaDimensions property: The list of quota dimensions from the provider.
     * 
     * @return the quotaDimensions value.
     */
    public List<QuotaDimension> quotaDimensions() {
        return this.quotaDimensions;
    }

    /**
     * Set the quotaDimensions property: The list of quota dimensions from the provider.
     * 
     * @param quotaDimensions the quotaDimensions value to set.
     * @return the ProviderProperties object itself.
     */
    public ProviderProperties withQuotaDimensions(List<QuotaDimension> quotaDimensions) {
        this.quotaDimensions = quotaDimensions;
        return this;
    }

    /**
     * Get the pricingDimensions property: The list of pricing dimensions from the provider.
     * 
     * @return the pricingDimensions value.
     */
    public List<PricingDimension> pricingDimensions() {
        return this.pricingDimensions;
    }

    /**
     * Set the pricingDimensions property: The list of pricing dimensions from the provider.
     * 
     * @param pricingDimensions the pricingDimensions value to set.
     * @return the ProviderProperties object itself.
     */
    public ProviderProperties withPricingDimensions(List<PricingDimension> pricingDimensions) {
        this.pricingDimensions = pricingDimensions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (aad() != null) {
            aad().validate();
        }
        if (managedApplication() != null) {
            managedApplication().validate();
        }
        if (targets() != null) {
            targets().forEach(e -> e.validate());
        }
        if (skus() != null) {
            skus().forEach(e -> e.validate());
        }
        if (quotaDimensions() != null) {
            quotaDimensions().forEach(e -> e.validate());
        }
        if (pricingDimensions() != null) {
            pricingDimensions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("aad", this.aad);
        jsonWriter.writeJsonField("managedApplication", this.managedApplication);
        jsonWriter.writeArrayField("targets", this.targets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("skus", this.skus, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("quotaDimensions", this.quotaDimensions,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("pricingDimensions", this.pricingDimensions,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProviderProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProviderProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProviderProperties.
     */
    public static ProviderProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProviderProperties deserializedProviderProperties = new ProviderProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedProviderProperties.description = reader.getString();
                } else if ("providerType".equals(fieldName)) {
                    deserializedProviderProperties.providerType = reader.getString();
                } else if ("company".equals(fieldName)) {
                    deserializedProviderProperties.company = reader.getString();
                } else if ("defaultEndpoint".equals(fieldName)) {
                    deserializedProviderProperties.defaultEndpoint = reader.getString();
                } else if ("aad".equals(fieldName)) {
                    deserializedProviderProperties.aad = ProviderPropertiesAad.fromJson(reader);
                } else if ("managedApplication".equals(fieldName)) {
                    deserializedProviderProperties.managedApplication
                        = ProviderPropertiesManagedApplication.fromJson(reader);
                } else if ("targets".equals(fieldName)) {
                    List<TargetDescription> targets = reader.readArray(reader1 -> TargetDescription.fromJson(reader1));
                    deserializedProviderProperties.targets = targets;
                } else if ("skus".equals(fieldName)) {
                    List<SkuDescription> skus = reader.readArray(reader1 -> SkuDescription.fromJson(reader1));
                    deserializedProviderProperties.skus = skus;
                } else if ("quotaDimensions".equals(fieldName)) {
                    List<QuotaDimension> quotaDimensions
                        = reader.readArray(reader1 -> QuotaDimension.fromJson(reader1));
                    deserializedProviderProperties.quotaDimensions = quotaDimensions;
                } else if ("pricingDimensions".equals(fieldName)) {
                    List<PricingDimension> pricingDimensions
                        = reader.readArray(reader1 -> PricingDimension.fromJson(reader1));
                    deserializedProviderProperties.pricingDimensions = pricingDimensions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProviderProperties;
        });
    }
}
