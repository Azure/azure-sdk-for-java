// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.microsoft.azure.quantum;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.util.Context;
import com.microsoft.azure.quantum.models.ProviderStatus;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ProvidersClient. */
public interface ProvidersClient {
    /**
     * Get provider status.
     *
     * @throws com.microsoft.azure.quantum.models.RestErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return provider status.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<PagedResponse<ProviderStatus>> getStatusSinglePageAsync();

    /**
     * Get provider status.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.microsoft.azure.quantum.models.RestErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return provider status.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<PagedResponse<ProviderStatus>> getStatusSinglePageAsync(Context context);

    /**
     * Get provider status.
     *
     * @throws com.microsoft.azure.quantum.models.RestErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return provider status.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<ProviderStatus> getStatusAsync();

    /**
     * Get provider status.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.microsoft.azure.quantum.models.RestErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return provider status.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedFlux<ProviderStatus> getStatusAsync(Context context);

    /**
     * Get provider status.
     *
     * @throws com.microsoft.azure.quantum.models.RestErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return provider status.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProviderStatus> getStatus();

    /**
     * Get provider status.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.microsoft.azure.quantum.models.RestErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return provider status.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProviderStatus> getStatus(Context context);

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.microsoft.azure.quantum.models.RestErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return providers status.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<PagedResponse<ProviderStatus>> getStatusNextSinglePageAsync(String nextLink);

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.microsoft.azure.quantum.models.RestErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return providers status.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<PagedResponse<ProviderStatus>> getStatusNextSinglePageAsync(String nextLink, Context context);
}
