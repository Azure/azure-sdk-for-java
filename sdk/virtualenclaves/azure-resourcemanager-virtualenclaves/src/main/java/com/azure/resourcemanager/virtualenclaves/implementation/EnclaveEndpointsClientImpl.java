// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.virtualenclaves.fluent.EnclaveEndpointsClient;
import com.azure.resourcemanager.virtualenclaves.fluent.models.ApprovalActionResponseInner;
import com.azure.resourcemanager.virtualenclaves.fluent.models.EnclaveEndpointResourceInner;
import com.azure.resourcemanager.virtualenclaves.implementation.models.EnclaveEndpointResourceListResult;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalCallbackRequest;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalDeletionCallbackRequest;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveEndpointPatchModel;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in EnclaveEndpointsClient.
 */
public final class EnclaveEndpointsClientImpl implements EnclaveEndpointsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final EnclaveEndpointsService service;

    /**
     * The service client containing this operation class.
     */
    private final VirtualEnclavesManagementClientImpl client;

    /**
     * Initializes an instance of EnclaveEndpointsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    EnclaveEndpointsClientImpl(VirtualEnclavesManagementClientImpl client) {
        this.service
            = RestProxy.create(EnclaveEndpointsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for VirtualEnclavesManagementClientEnclaveEndpoints to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "VirtualEnclavesManagementClientEnclaveEndpoints")
    public interface EnclaveEndpointsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EnclaveEndpointResourceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName,
            @PathParam("enclaveEndpointName") String enclaveEndpointName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<EnclaveEndpointResourceInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName,
            @PathParam("enclaveEndpointName") String enclaveEndpointName, @HeaderParam("Accept") String accept,
            Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName,
            @PathParam("enclaveEndpointName") String enclaveEndpointName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") EnclaveEndpointResourceInner resource, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName,
            @PathParam("enclaveEndpointName") String enclaveEndpointName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") EnclaveEndpointResourceInner resource, Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName,
            @PathParam("enclaveEndpointName") String enclaveEndpointName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") EnclaveEndpointPatchModel properties, Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName,
            @PathParam("enclaveEndpointName") String enclaveEndpointName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") EnclaveEndpointPatchModel properties, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName,
            @PathParam("enclaveEndpointName") String enclaveEndpointName, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName,
            @PathParam("enclaveEndpointName") String enclaveEndpointName, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EnclaveEndpointResourceListResult>> listByEnclaveResource(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<EnclaveEndpointResourceListResult> listByEnclaveResourceSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EnclaveEndpointResourceListResult>> listBySubscription(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("virtualEnclaveName") String virtualEnclaveName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<EnclaveEndpointResourceListResult> listBySubscriptionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("virtualEnclaveName") String virtualEnclaveName, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}/handleApprovalCreation")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> handleApprovalCreation(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName,
            @PathParam("enclaveEndpointName") String enclaveEndpointName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ApprovalCallbackRequest body, Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}/handleApprovalCreation")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> handleApprovalCreationSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName,
            @PathParam("enclaveEndpointName") String enclaveEndpointName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ApprovalCallbackRequest body, Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}/handleApprovalDeletion")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> handleApprovalDeletion(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName,
            @PathParam("enclaveEndpointName") String enclaveEndpointName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ApprovalDeletionCallbackRequest body, Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}/handleApprovalDeletion")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> handleApprovalDeletionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName,
            @PathParam("enclaveEndpointName") String enclaveEndpointName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ApprovalDeletionCallbackRequest body, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EnclaveEndpointResourceListResult>> listByEnclaveResourceNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<EnclaveEndpointResourceListResult> listByEnclaveResourceNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EnclaveEndpointResourceListResult>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<EnclaveEndpointResourceListResult> listBySubscriptionNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a EnclaveEndpointResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<EnclaveEndpointResourceInner>> getWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a EnclaveEndpointResource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EnclaveEndpointResourceInner> getAsync(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName) {
        return getWithResponseAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a EnclaveEndpointResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<EnclaveEndpointResourceInner> getWithResponse(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, Context context) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, virtualEnclaveName, enclaveEndpointName, accept, context);
    }

    /**
     * Get a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a EnclaveEndpointResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EnclaveEndpointResourceInner get(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName) {
        return getWithResponse(resourceGroupName, virtualEnclaveName, enclaveEndpointName, Context.NONE).getValue();
    }

    /**
     * Create a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, EnclaveEndpointResourceInner resource) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName,
                contentType, accept, resource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, EnclaveEndpointResourceInner resource) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName, contentType,
            accept, resource, Context.NONE);
    }

    /**
     * Create a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, EnclaveEndpointResourceInner resource, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName, contentType,
            accept, resource, context);
    }

    /**
     * Create a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<EnclaveEndpointResourceInner>, EnclaveEndpointResourceInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
        EnclaveEndpointResourceInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, resource);
        return this.client.<EnclaveEndpointResourceInner, EnclaveEndpointResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), EnclaveEndpointResourceInner.class, EnclaveEndpointResourceInner.class,
            this.client.getContext());
    }

    /**
     * Create a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<EnclaveEndpointResourceInner>, EnclaveEndpointResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
        EnclaveEndpointResourceInner resource) {
        Response<BinaryData> response
            = createOrUpdateWithResponse(resourceGroupName, virtualEnclaveName, enclaveEndpointName, resource);
        return this.client.<EnclaveEndpointResourceInner, EnclaveEndpointResourceInner>getLroResult(response,
            EnclaveEndpointResourceInner.class, EnclaveEndpointResourceInner.class, Context.NONE);
    }

    /**
     * Create a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<EnclaveEndpointResourceInner>, EnclaveEndpointResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
        EnclaveEndpointResourceInner resource, Context context) {
        Response<BinaryData> response
            = createOrUpdateWithResponse(resourceGroupName, virtualEnclaveName, enclaveEndpointName, resource, context);
        return this.client.<EnclaveEndpointResourceInner, EnclaveEndpointResourceInner>getLroResult(response,
            EnclaveEndpointResourceInner.class, EnclaveEndpointResourceInner.class, context);
    }

    /**
     * Create a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EnclaveEndpointResourceInner> createOrUpdateAsync(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, EnclaveEndpointResourceInner resource) {
        return beginCreateOrUpdateAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, resource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EnclaveEndpointResourceInner createOrUpdate(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, EnclaveEndpointResourceInner resource) {
        return beginCreateOrUpdate(resourceGroupName, virtualEnclaveName, enclaveEndpointName, resource)
            .getFinalResult();
    }

    /**
     * Create a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EnclaveEndpointResourceInner createOrUpdate(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, EnclaveEndpointResourceInner resource, Context context) {
        return beginCreateOrUpdate(resourceGroupName, virtualEnclaveName, enclaveEndpointName, resource, context)
            .getFinalResult();
    }

    /**
     * Update a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, EnclaveEndpointPatchModel properties) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName,
                contentType, accept, properties, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, EnclaveEndpointPatchModel properties) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName, contentType,
            accept, properties, Context.NONE);
    }

    /**
     * Update a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, EnclaveEndpointPatchModel properties, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName, contentType,
            accept, properties, context);
    }

    /**
     * Update a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<EnclaveEndpointResourceInner>, EnclaveEndpointResourceInner> beginUpdateAsync(
        String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
        EnclaveEndpointPatchModel properties) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, properties);
        return this.client.<EnclaveEndpointResourceInner, EnclaveEndpointResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), EnclaveEndpointResourceInner.class, EnclaveEndpointResourceInner.class,
            this.client.getContext());
    }

    /**
     * Update a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<EnclaveEndpointResourceInner>, EnclaveEndpointResourceInner> beginUpdate(
        String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
        EnclaveEndpointPatchModel properties) {
        Response<BinaryData> response
            = updateWithResponse(resourceGroupName, virtualEnclaveName, enclaveEndpointName, properties);
        return this.client.<EnclaveEndpointResourceInner, EnclaveEndpointResourceInner>getLroResult(response,
            EnclaveEndpointResourceInner.class, EnclaveEndpointResourceInner.class, Context.NONE);
    }

    /**
     * Update a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<EnclaveEndpointResourceInner>, EnclaveEndpointResourceInner> beginUpdate(
        String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
        EnclaveEndpointPatchModel properties, Context context) {
        Response<BinaryData> response
            = updateWithResponse(resourceGroupName, virtualEnclaveName, enclaveEndpointName, properties, context);
        return this.client.<EnclaveEndpointResourceInner, EnclaveEndpointResourceInner>getLroResult(response,
            EnclaveEndpointResourceInner.class, EnclaveEndpointResourceInner.class, context);
    }

    /**
     * Update a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EnclaveEndpointResourceInner> updateAsync(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, EnclaveEndpointPatchModel properties) {
        return beginUpdateAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, properties).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EnclaveEndpointResourceInner update(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, EnclaveEndpointPatchModel properties) {
        return beginUpdate(resourceGroupName, virtualEnclaveName, enclaveEndpointName, properties).getFinalResult();
    }

    /**
     * Update a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return enclaveEndpoint Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EnclaveEndpointResourceInner update(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, EnclaveEndpointPatchModel properties, Context context) {
        return beginUpdate(resourceGroupName, virtualEnclaveName, enclaveEndpointName, properties, context)
            .getFinalResult();
    }

    /**
     * Delete a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName) {
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName, Context.NONE);
    }

    /**
     * Delete a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, Context context) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName, context);
    }

    /**
     * Delete a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName) {
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, virtualEnclaveName, enclaveEndpointName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, Context context) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, virtualEnclaveName, enclaveEndpointName, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Delete a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName) {
        return beginDeleteAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName) {
        beginDelete(resourceGroupName, virtualEnclaveName, enclaveEndpointName).getFinalResult();
    }

    /**
     * Delete a EnclaveEndpointResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
        Context context) {
        beginDelete(resourceGroupName, virtualEnclaveName, enclaveEndpointName, context).getFinalResult();
    }

    /**
     * List EnclaveEndpointResource resources by EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EnclaveEndpointResourceInner>>
        listByEnclaveResourceSinglePageAsync(String resourceGroupName, String virtualEnclaveName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByEnclaveResource(this.client.getEndpoint(), this.client.getApiVersion(),
                    this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, accept, context))
            .<PagedResponse<EnclaveEndpointResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List EnclaveEndpointResource resources by EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EnclaveEndpointResourceInner> listByEnclaveResourceAsync(String resourceGroupName,
        String virtualEnclaveName) {
        return new PagedFlux<>(() -> listByEnclaveResourceSinglePageAsync(resourceGroupName, virtualEnclaveName),
            nextLink -> listByEnclaveResourceNextSinglePageAsync(nextLink));
    }

    /**
     * List EnclaveEndpointResource resources by EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EnclaveEndpointResourceInner> listByEnclaveResourceSinglePage(String resourceGroupName,
        String virtualEnclaveName) {
        final String accept = "application/json";
        Response<EnclaveEndpointResourceListResult> res
            = service.listByEnclaveResourceSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List EnclaveEndpointResource resources by EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EnclaveEndpointResourceInner> listByEnclaveResourceSinglePage(String resourceGroupName,
        String virtualEnclaveName, Context context) {
        final String accept = "application/json";
        Response<EnclaveEndpointResourceListResult> res
            = service.listByEnclaveResourceSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List EnclaveEndpointResource resources by EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EnclaveEndpointResourceInner> listByEnclaveResource(String resourceGroupName,
        String virtualEnclaveName) {
        return new PagedIterable<>(() -> listByEnclaveResourceSinglePage(resourceGroupName, virtualEnclaveName),
            nextLink -> listByEnclaveResourceNextSinglePage(nextLink));
    }

    /**
     * List EnclaveEndpointResource resources by EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EnclaveEndpointResourceInner> listByEnclaveResource(String resourceGroupName,
        String virtualEnclaveName, Context context) {
        return new PagedIterable<>(
            () -> listByEnclaveResourceSinglePage(resourceGroupName, virtualEnclaveName, context),
            nextLink -> listByEnclaveResourceNextSinglePage(nextLink, context));
    }

    /**
     * List EnclaveEndpointResource resources by subscription ID.
     * 
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EnclaveEndpointResourceInner>>
        listBySubscriptionSinglePageAsync(String virtualEnclaveName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBySubscription(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), virtualEnclaveName, accept, context))
            .<PagedResponse<EnclaveEndpointResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List EnclaveEndpointResource resources by subscription ID.
     * 
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EnclaveEndpointResourceInner> listBySubscriptionAsync(String virtualEnclaveName) {
        return new PagedFlux<>(() -> listBySubscriptionSinglePageAsync(virtualEnclaveName),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * List EnclaveEndpointResource resources by subscription ID.
     * 
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EnclaveEndpointResourceInner> listBySubscriptionSinglePage(String virtualEnclaveName) {
        final String accept = "application/json";
        Response<EnclaveEndpointResourceListResult> res = service.listBySubscriptionSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), virtualEnclaveName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List EnclaveEndpointResource resources by subscription ID.
     * 
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EnclaveEndpointResourceInner> listBySubscriptionSinglePage(String virtualEnclaveName,
        Context context) {
        final String accept = "application/json";
        Response<EnclaveEndpointResourceListResult> res = service.listBySubscriptionSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), virtualEnclaveName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List EnclaveEndpointResource resources by subscription ID.
     * 
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EnclaveEndpointResourceInner> listBySubscription(String virtualEnclaveName) {
        return new PagedIterable<>(() -> listBySubscriptionSinglePage(virtualEnclaveName),
            nextLink -> listBySubscriptionNextSinglePage(nextLink));
    }

    /**
     * List EnclaveEndpointResource resources by subscription ID.
     * 
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EnclaveEndpointResourceInner> listBySubscription(String virtualEnclaveName, Context context) {
        return new PagedIterable<>(() -> listBySubscriptionSinglePage(virtualEnclaveName, context),
            nextLink -> listBySubscriptionNextSinglePage(nextLink, context));
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> handleApprovalCreationWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, ApprovalCallbackRequest body) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.handleApprovalCreation(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName,
                enclaveEndpointName, contentType, accept, body, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> handleApprovalCreationWithResponse(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, ApprovalCallbackRequest body) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.handleApprovalCreationSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName, contentType,
            accept, body, Context.NONE);
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> handleApprovalCreationWithResponse(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, ApprovalCallbackRequest body, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.handleApprovalCreationSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName, contentType,
            accept, body, context);
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ApprovalActionResponseInner>, ApprovalActionResponseInner>
        beginHandleApprovalCreationAsync(String resourceGroupName, String virtualEnclaveName,
            String enclaveEndpointName, ApprovalCallbackRequest body) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = handleApprovalCreationWithResponseAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body);
        return this.client.<ApprovalActionResponseInner, ApprovalActionResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), ApprovalActionResponseInner.class, ApprovalActionResponseInner.class,
            this.client.getContext());
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalActionResponseInner>, ApprovalActionResponseInner> beginHandleApprovalCreation(
        String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName, ApprovalCallbackRequest body) {
        Response<BinaryData> response
            = handleApprovalCreationWithResponse(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body);
        return this.client.<ApprovalActionResponseInner, ApprovalActionResponseInner>getLroResult(response,
            ApprovalActionResponseInner.class, ApprovalActionResponseInner.class, Context.NONE);
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalActionResponseInner>, ApprovalActionResponseInner> beginHandleApprovalCreation(
        String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName, ApprovalCallbackRequest body,
        Context context) {
        Response<BinaryData> response = handleApprovalCreationWithResponse(resourceGroupName, virtualEnclaveName,
            enclaveEndpointName, body, context);
        return this.client.<ApprovalActionResponseInner, ApprovalActionResponseInner>getLroResult(response,
            ApprovalActionResponseInner.class, ApprovalActionResponseInner.class, context);
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApprovalActionResponseInner> handleApprovalCreationAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, ApprovalCallbackRequest body) {
        return beginHandleApprovalCreationAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalActionResponseInner handleApprovalCreation(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, ApprovalCallbackRequest body) {
        return beginHandleApprovalCreation(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body)
            .getFinalResult();
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalActionResponseInner handleApprovalCreation(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, ApprovalCallbackRequest body, Context context) {
        return beginHandleApprovalCreation(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body, context)
            .getFinalResult();
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> handleApprovalDeletionWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, ApprovalDeletionCallbackRequest body) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.handleApprovalDeletion(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName,
                enclaveEndpointName, contentType, accept, body, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> handleApprovalDeletionWithResponse(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, ApprovalDeletionCallbackRequest body) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.handleApprovalDeletionSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName, contentType,
            accept, body, Context.NONE);
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> handleApprovalDeletionWithResponse(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, ApprovalDeletionCallbackRequest body, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.handleApprovalDeletionSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, enclaveEndpointName, contentType,
            accept, body, context);
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ApprovalActionResponseInner>, ApprovalActionResponseInner>
        beginHandleApprovalDeletionAsync(String resourceGroupName, String virtualEnclaveName,
            String enclaveEndpointName, ApprovalDeletionCallbackRequest body) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = handleApprovalDeletionWithResponseAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body);
        return this.client.<ApprovalActionResponseInner, ApprovalActionResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), ApprovalActionResponseInner.class, ApprovalActionResponseInner.class,
            this.client.getContext());
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalActionResponseInner>, ApprovalActionResponseInner> beginHandleApprovalDeletion(
        String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
        ApprovalDeletionCallbackRequest body) {
        Response<BinaryData> response
            = handleApprovalDeletionWithResponse(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body);
        return this.client.<ApprovalActionResponseInner, ApprovalActionResponseInner>getLroResult(response,
            ApprovalActionResponseInner.class, ApprovalActionResponseInner.class, Context.NONE);
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalActionResponseInner>, ApprovalActionResponseInner> beginHandleApprovalDeletion(
        String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
        ApprovalDeletionCallbackRequest body, Context context) {
        Response<BinaryData> response = handleApprovalDeletionWithResponse(resourceGroupName, virtualEnclaveName,
            enclaveEndpointName, body, context);
        return this.client.<ApprovalActionResponseInner, ApprovalActionResponseInner>getLroResult(response,
            ApprovalActionResponseInner.class, ApprovalActionResponseInner.class, context);
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApprovalActionResponseInner> handleApprovalDeletionAsync(String resourceGroupName,
        String virtualEnclaveName, String enclaveEndpointName, ApprovalDeletionCallbackRequest body) {
        return beginHandleApprovalDeletionAsync(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalActionResponseInner handleApprovalDeletion(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, ApprovalDeletionCallbackRequest body) {
        return beginHandleApprovalDeletion(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body)
            .getFinalResult();
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param enclaveEndpointName The name of the Enclave Endpoint Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalActionResponseInner handleApprovalDeletion(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, ApprovalDeletionCallbackRequest body, Context context) {
        return beginHandleApprovalDeletion(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body, context)
            .getFinalResult();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EnclaveEndpointResourceInner>>
        listByEnclaveResourceNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByEnclaveResourceNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<EnclaveEndpointResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EnclaveEndpointResourceInner> listByEnclaveResourceNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<EnclaveEndpointResourceListResult> res
            = service.listByEnclaveResourceNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EnclaveEndpointResourceInner> listByEnclaveResourceNextSinglePage(String nextLink,
        Context context) {
        final String accept = "application/json";
        Response<EnclaveEndpointResourceListResult> res
            = service.listByEnclaveResourceNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EnclaveEndpointResourceInner>> listBySubscriptionNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<EnclaveEndpointResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EnclaveEndpointResourceInner> listBySubscriptionNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<EnclaveEndpointResourceListResult> res
            = service.listBySubscriptionNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveEndpointResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EnclaveEndpointResourceInner> listBySubscriptionNextSinglePage(String nextLink,
        Context context) {
        final String accept = "application/json";
        Response<EnclaveEndpointResourceListResult> res
            = service.listBySubscriptionNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }
}
