// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.virtualenclaves.fluent.models.WorkloadResourceInner;
import com.azure.resourcemanager.virtualenclaves.models.WorkloadPatchModel;

/**
 * An instance of this class provides access to all the operations defined in WorkloadsClient.
 */
public interface WorkloadsClient {
    /**
     * Get a WorkloadResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param workloadName The name of the workloadResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a WorkloadResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<WorkloadResourceInner> getWithResponse(String resourceGroupName, String virtualEnclaveName,
        String workloadName, Context context);

    /**
     * Get a WorkloadResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param workloadName The name of the workloadResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a WorkloadResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WorkloadResourceInner get(String resourceGroupName, String virtualEnclaveName, String workloadName);

    /**
     * Create a WorkloadResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param workloadName The name of the workloadResource Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of workload Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<WorkloadResourceInner>, WorkloadResourceInner> beginCreateOrUpdate(String resourceGroupName,
        String virtualEnclaveName, String workloadName, WorkloadResourceInner resource);

    /**
     * Create a WorkloadResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param workloadName The name of the workloadResource Resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of workload Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<WorkloadResourceInner>, WorkloadResourceInner> beginCreateOrUpdate(String resourceGroupName,
        String virtualEnclaveName, String workloadName, WorkloadResourceInner resource, Context context);

    /**
     * Create a WorkloadResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param workloadName The name of the workloadResource Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workload Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WorkloadResourceInner createOrUpdate(String resourceGroupName, String virtualEnclaveName, String workloadName,
        WorkloadResourceInner resource);

    /**
     * Create a WorkloadResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param workloadName The name of the workloadResource Resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workload Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WorkloadResourceInner createOrUpdate(String resourceGroupName, String virtualEnclaveName, String workloadName,
        WorkloadResourceInner resource, Context context);

    /**
     * Update a WorkloadResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param workloadName The name of the workloadResource Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of workload Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<WorkloadResourceInner>, WorkloadResourceInner> beginUpdate(String resourceGroupName,
        String virtualEnclaveName, String workloadName, WorkloadPatchModel properties);

    /**
     * Update a WorkloadResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param workloadName The name of the workloadResource Resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of workload Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<WorkloadResourceInner>, WorkloadResourceInner> beginUpdate(String resourceGroupName,
        String virtualEnclaveName, String workloadName, WorkloadPatchModel properties, Context context);

    /**
     * Update a WorkloadResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param workloadName The name of the workloadResource Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workload Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WorkloadResourceInner update(String resourceGroupName, String virtualEnclaveName, String workloadName,
        WorkloadPatchModel properties);

    /**
     * Update a WorkloadResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param workloadName The name of the workloadResource Resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return workload Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    WorkloadResourceInner update(String resourceGroupName, String virtualEnclaveName, String workloadName,
        WorkloadPatchModel properties, Context context);

    /**
     * Delete a WorkloadResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param workloadName The name of the workloadResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String virtualEnclaveName,
        String workloadName);

    /**
     * Delete a WorkloadResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param workloadName The name of the workloadResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String virtualEnclaveName,
        String workloadName, Context context);

    /**
     * Delete a WorkloadResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param workloadName The name of the workloadResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String virtualEnclaveName, String workloadName);

    /**
     * Delete a WorkloadResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param workloadName The name of the workloadResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String virtualEnclaveName, String workloadName, Context context);

    /**
     * List WorkloadResource resources by EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WorkloadResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<WorkloadResourceInner> listByEnclaveResource(String resourceGroupName, String virtualEnclaveName);

    /**
     * List WorkloadResource resources by EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WorkloadResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<WorkloadResourceInner> listByEnclaveResource(String resourceGroupName, String virtualEnclaveName,
        Context context);

    /**
     * List WorkloadResource resources by subscription ID.
     * 
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WorkloadResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<WorkloadResourceInner> listBySubscription(String virtualEnclaveName);

    /**
     * List WorkloadResource resources by subscription ID.
     * 
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a WorkloadResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<WorkloadResourceInner> listBySubscription(String virtualEnclaveName, Context context);
}
