// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * TransitOption Properties.
 */
@Fluent
public final class TransitOption implements JsonSerializable<TransitOption> {
    /*
     * Transit Option Type.
     */
    private TransitOptionType type;

    /*
     * Transit Option Params
     */
    private TransitOptionParams params;

    /**
     * Creates an instance of TransitOption class.
     */
    public TransitOption() {
    }

    /**
     * Get the type property: Transit Option Type.
     * 
     * @return the type value.
     */
    public TransitOptionType type() {
        return this.type;
    }

    /**
     * Set the type property: Transit Option Type.
     * 
     * @param type the type value to set.
     * @return the TransitOption object itself.
     */
    public TransitOption withType(TransitOptionType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the params property: Transit Option Params.
     * 
     * @return the params value.
     */
    public TransitOptionParams params() {
        return this.params;
    }

    /**
     * Set the params property: Transit Option Params.
     * 
     * @param params the params value to set.
     * @return the TransitOption object itself.
     */
    public TransitOption withParams(TransitOptionParams params) {
        this.params = params;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("params", this.params);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TransitOption from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TransitOption if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TransitOption.
     */
    public static TransitOption fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TransitOption deserializedTransitOption = new TransitOption();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedTransitOption.type = TransitOptionType.fromString(reader.getString());
                } else if ("params".equals(fieldName)) {
                    deserializedTransitOption.params = TransitOptionParams.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTransitOption;
        });
    }
}
