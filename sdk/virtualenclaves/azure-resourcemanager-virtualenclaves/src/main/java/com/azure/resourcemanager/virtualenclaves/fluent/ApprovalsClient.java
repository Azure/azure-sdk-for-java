// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.virtualenclaves.fluent.models.ApprovalActionResponseInner;
import com.azure.resourcemanager.virtualenclaves.fluent.models.ApprovalResourceInner;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalActionRequest;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalPatchModel;

/**
 * An instance of this class provides access to all the operations defined in ApprovalsClient.
 */
public interface ApprovalsClient {
    /**
     * Get a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ApprovalResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ApprovalResourceInner> getWithResponse(String resourceUri, String approvalName, Context context);

    /**
     * Get a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ApprovalResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ApprovalResourceInner get(String resourceUri, String approvalName);

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ApprovalResourceInner>, ApprovalResourceInner> beginCreateOrUpdate(String resourceUri,
        String approvalName, ApprovalResourceInner resource);

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ApprovalResourceInner>, ApprovalResourceInner> beginCreateOrUpdate(String resourceUri,
        String approvalName, ApprovalResourceInner resource, Context context);

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ApprovalResourceInner createOrUpdate(String resourceUri, String approvalName, ApprovalResourceInner resource);

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ApprovalResourceInner createOrUpdate(String resourceUri, String approvalName, ApprovalResourceInner resource,
        Context context);

    /**
     * List ApprovalResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ApprovalResourceInner> listByParent(String resourceUri);

    /**
     * List ApprovalResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ApprovalResourceInner> listByParent(String resourceUri, Context context);

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ApprovalResourceInner>, ApprovalResourceInner> beginUpdate(String resourceUri,
        String approvalName, ApprovalPatchModel properties);

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ApprovalResourceInner>, ApprovalResourceInner> beginUpdate(String resourceUri,
        String approvalName, ApprovalPatchModel properties, Context context);

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ApprovalResourceInner update(String resourceUri, String approvalName, ApprovalPatchModel properties);

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ApprovalResourceInner update(String resourceUri, String approvalName, ApprovalPatchModel properties,
        Context context);

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceUri, String approvalName);

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceUri, String approvalName, Context context);

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceUri, String approvalName);

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceUri, String approvalName, Context context);

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ApprovalActionResponseInner>, ApprovalActionResponseInner>
        beginNotifyInitiator(String resourceUri, String approvalName, ApprovalActionRequest body);

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ApprovalActionResponseInner>, ApprovalActionResponseInner>
        beginNotifyInitiator(String resourceUri, String approvalName, ApprovalActionRequest body, Context context);

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ApprovalActionResponseInner notifyInitiator(String resourceUri, String approvalName, ApprovalActionRequest body);

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ApprovalActionResponseInner notifyInitiator(String resourceUri, String approvalName, ApprovalActionRequest body,
        Context context);
}
