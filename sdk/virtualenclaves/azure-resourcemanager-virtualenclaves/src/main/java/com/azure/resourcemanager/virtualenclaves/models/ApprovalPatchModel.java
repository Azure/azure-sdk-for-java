// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Approvals patch model.
 */
@Fluent
public final class ApprovalPatchModel implements JsonSerializable<ApprovalPatchModel> {
    /*
     * Approval Patch properties
     */
    private ApprovalPatchProperties properties;

    /**
     * Creates an instance of ApprovalPatchModel class.
     */
    public ApprovalPatchModel() {
    }

    /**
     * Get the properties property: Approval Patch properties.
     * 
     * @return the properties value.
     */
    public ApprovalPatchProperties properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Approval Patch properties.
     * 
     * @param properties the properties value to set.
     * @return the ApprovalPatchModel object itself.
     */
    public ApprovalPatchModel withProperties(ApprovalPatchProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.properties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApprovalPatchModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApprovalPatchModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApprovalPatchModel.
     */
    public static ApprovalPatchModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApprovalPatchModel deserializedApprovalPatchModel = new ApprovalPatchModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedApprovalPatchModel.properties = ApprovalPatchProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApprovalPatchModel;
        });
    }
}
