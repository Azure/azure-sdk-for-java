// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Enclave Connection Resource properties.
 */
@Fluent
public final class EnclaveConnectionProperties implements JsonSerializable<EnclaveConnectionProperties> {
    /*
     * The state of the enclaveConnection.
     */
    private EnclaveConnectionState state;

    /*
     * Community Resource Id.
     */
    private String communityResourceId;

    /*
     * Source Resource Id.
     */
    private String sourceResourceId;

    /*
     * Source CIDR.
     */
    private String sourceCidr;

    /*
     * Destination Endpoint Resource Id.
     */
    private String destinationEndpointId;

    /*
     * Provisioning State.
     */
    private ProvisioningState provisioningState;

    /*
     * List of resource ids modified by enclave Connections.
     */
    private List<String> resourceCollection;

    /**
     * Creates an instance of EnclaveConnectionProperties class.
     */
    public EnclaveConnectionProperties() {
    }

    /**
     * Get the state property: The state of the enclaveConnection.
     * 
     * @return the state value.
     */
    public EnclaveConnectionState state() {
        return this.state;
    }

    /**
     * Get the communityResourceId property: Community Resource Id.
     * 
     * @return the communityResourceId value.
     */
    public String communityResourceId() {
        return this.communityResourceId;
    }

    /**
     * Set the communityResourceId property: Community Resource Id.
     * 
     * @param communityResourceId the communityResourceId value to set.
     * @return the EnclaveConnectionProperties object itself.
     */
    public EnclaveConnectionProperties withCommunityResourceId(String communityResourceId) {
        this.communityResourceId = communityResourceId;
        return this;
    }

    /**
     * Get the sourceResourceId property: Source Resource Id.
     * 
     * @return the sourceResourceId value.
     */
    public String sourceResourceId() {
        return this.sourceResourceId;
    }

    /**
     * Set the sourceResourceId property: Source Resource Id.
     * 
     * @param sourceResourceId the sourceResourceId value to set.
     * @return the EnclaveConnectionProperties object itself.
     */
    public EnclaveConnectionProperties withSourceResourceId(String sourceResourceId) {
        this.sourceResourceId = sourceResourceId;
        return this;
    }

    /**
     * Get the sourceCidr property: Source CIDR.
     * 
     * @return the sourceCidr value.
     */
    public String sourceCidr() {
        return this.sourceCidr;
    }

    /**
     * Set the sourceCidr property: Source CIDR.
     * 
     * @param sourceCidr the sourceCidr value to set.
     * @return the EnclaveConnectionProperties object itself.
     */
    public EnclaveConnectionProperties withSourceCidr(String sourceCidr) {
        this.sourceCidr = sourceCidr;
        return this;
    }

    /**
     * Get the destinationEndpointId property: Destination Endpoint Resource Id.
     * 
     * @return the destinationEndpointId value.
     */
    public String destinationEndpointId() {
        return this.destinationEndpointId;
    }

    /**
     * Set the destinationEndpointId property: Destination Endpoint Resource Id.
     * 
     * @param destinationEndpointId the destinationEndpointId value to set.
     * @return the EnclaveConnectionProperties object itself.
     */
    public EnclaveConnectionProperties withDestinationEndpointId(String destinationEndpointId) {
        this.destinationEndpointId = destinationEndpointId;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning State.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the resourceCollection property: List of resource ids modified by enclave Connections.
     * 
     * @return the resourceCollection value.
     */
    public List<String> resourceCollection() {
        return this.resourceCollection;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("communityResourceId", this.communityResourceId);
        jsonWriter.writeStringField("sourceResourceId", this.sourceResourceId);
        jsonWriter.writeStringField("destinationEndpointId", this.destinationEndpointId);
        jsonWriter.writeStringField("sourceCidr", this.sourceCidr);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnclaveConnectionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnclaveConnectionProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EnclaveConnectionProperties.
     */
    public static EnclaveConnectionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnclaveConnectionProperties deserializedEnclaveConnectionProperties = new EnclaveConnectionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("communityResourceId".equals(fieldName)) {
                    deserializedEnclaveConnectionProperties.communityResourceId = reader.getString();
                } else if ("sourceResourceId".equals(fieldName)) {
                    deserializedEnclaveConnectionProperties.sourceResourceId = reader.getString();
                } else if ("destinationEndpointId".equals(fieldName)) {
                    deserializedEnclaveConnectionProperties.destinationEndpointId = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedEnclaveConnectionProperties.state
                        = EnclaveConnectionState.fromString(reader.getString());
                } else if ("sourceCidr".equals(fieldName)) {
                    deserializedEnclaveConnectionProperties.sourceCidr = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedEnclaveConnectionProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("resourceCollection".equals(fieldName)) {
                    List<String> resourceCollection = reader.readArray(reader1 -> reader1.getString());
                    deserializedEnclaveConnectionProperties.resourceCollection = resourceCollection;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnclaveConnectionProperties;
        });
    }
}
