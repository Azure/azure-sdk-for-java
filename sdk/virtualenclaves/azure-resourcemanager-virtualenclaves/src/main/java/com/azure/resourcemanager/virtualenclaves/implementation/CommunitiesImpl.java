// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.virtualenclaves.fluent.CommunitiesClient;
import com.azure.resourcemanager.virtualenclaves.fluent.models.CheckAddressSpaceAvailabilityResponseInner;
import com.azure.resourcemanager.virtualenclaves.fluent.models.CommunityResourceInner;
import com.azure.resourcemanager.virtualenclaves.models.CheckAddressSpaceAvailabilityRequest;
import com.azure.resourcemanager.virtualenclaves.models.CheckAddressSpaceAvailabilityResponse;
import com.azure.resourcemanager.virtualenclaves.models.Communities;
import com.azure.resourcemanager.virtualenclaves.models.CommunityResource;

public final class CommunitiesImpl implements Communities {
    private static final ClientLogger LOGGER = new ClientLogger(CommunitiesImpl.class);

    private final CommunitiesClient innerClient;

    private final com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager serviceManager;

    public CommunitiesImpl(CommunitiesClient innerClient,
        com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<CommunityResource> getByResourceGroupWithResponse(String resourceGroupName, String communityName,
        Context context) {
        Response<CommunityResourceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, communityName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CommunityResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CommunityResource getByResourceGroup(String resourceGroupName, String communityName) {
        CommunityResourceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, communityName);
        if (inner != null) {
            return new CommunityResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String communityName) {
        this.serviceClient().delete(resourceGroupName, communityName);
    }

    public void delete(String resourceGroupName, String communityName, Context context) {
        this.serviceClient().delete(resourceGroupName, communityName, context);
    }

    public PagedIterable<CommunityResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<CommunityResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CommunityResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<CommunityResource> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<CommunityResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CommunityResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<CommunityResource> list() {
        PagedIterable<CommunityResourceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CommunityResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<CommunityResource> list(Context context) {
        PagedIterable<CommunityResourceInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CommunityResourceImpl(inner1, this.manager()));
    }

    public Response<CheckAddressSpaceAvailabilityResponse> checkAddressSpaceAvailabilityWithResponse(
        String resourceGroupName, String communityName,
        CheckAddressSpaceAvailabilityRequest checkAddressSpaceAvailabilityRequest, Context context) {
        Response<CheckAddressSpaceAvailabilityResponseInner> inner = this.serviceClient()
            .checkAddressSpaceAvailabilityWithResponse(resourceGroupName, communityName,
                checkAddressSpaceAvailabilityRequest, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CheckAddressSpaceAvailabilityResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CheckAddressSpaceAvailabilityResponse checkAddressSpaceAvailability(String resourceGroupName,
        String communityName, CheckAddressSpaceAvailabilityRequest checkAddressSpaceAvailabilityRequest) {
        CheckAddressSpaceAvailabilityResponseInner inner = this.serviceClient()
            .checkAddressSpaceAvailability(resourceGroupName, communityName, checkAddressSpaceAvailabilityRequest);
        if (inner != null) {
            return new CheckAddressSpaceAvailabilityResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CommunityResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String communityName = ResourceManagerUtils.getValueFromIdByName(id, "communities");
        if (communityName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'communities'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, communityName, Context.NONE).getValue();
    }

    public Response<CommunityResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String communityName = ResourceManagerUtils.getValueFromIdByName(id, "communities");
        if (communityName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'communities'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, communityName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String communityName = ResourceManagerUtils.getValueFromIdByName(id, "communities");
        if (communityName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'communities'.", id)));
        }
        this.delete(resourceGroupName, communityName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String communityName = ResourceManagerUtils.getValueFromIdByName(id, "communities");
        if (communityName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'communities'.", id)));
        }
        this.delete(resourceGroupName, communityName, context);
    }

    private CommunitiesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager manager() {
        return this.serviceManager;
    }

    public CommunityResourceImpl define(String name) {
        return new CommunityResourceImpl(name, this.manager());
    }
}
