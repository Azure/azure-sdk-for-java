// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Virtual Enclave Patchable Properties.
 */
@Fluent
public final class VirtualEnclavePatchProperties implements JsonSerializable<VirtualEnclavePatchProperties> {
    /*
     * Virtual Network.
     */
    private EnclaveVirtualNetworkModel enclaveVirtualNetwork;

    /*
     * Deploy Bastion service (True or False).
     */
    private Boolean bastionEnabled;

    /*
     * Enclave role assignments
     */
    private List<RoleAssignmentItem> enclaveRoleAssignments;

    /*
     * Workload role assignments
     */
    private List<RoleAssignmentItem> workloadRoleAssignments;

    /*
     * Enclave specific policies
     */
    private List<GovernedServiceItem> governedServiceList;

    /*
     * Enclave default settings.
     */
    private EnclaveDefaultSettingsPatchModel enclaveDefaultSettings;

    /*
     * Maintenance Mode configuration.
     */
    private MaintenanceModeConfigurationPatchModel maintenanceModeConfiguration;

    /**
     * Creates an instance of VirtualEnclavePatchProperties class.
     */
    public VirtualEnclavePatchProperties() {
    }

    /**
     * Get the enclaveVirtualNetwork property: Virtual Network.
     * 
     * @return the enclaveVirtualNetwork value.
     */
    public EnclaveVirtualNetworkModel enclaveVirtualNetwork() {
        return this.enclaveVirtualNetwork;
    }

    /**
     * Set the enclaveVirtualNetwork property: Virtual Network.
     * 
     * @param enclaveVirtualNetwork the enclaveVirtualNetwork value to set.
     * @return the VirtualEnclavePatchProperties object itself.
     */
    public VirtualEnclavePatchProperties withEnclaveVirtualNetwork(EnclaveVirtualNetworkModel enclaveVirtualNetwork) {
        this.enclaveVirtualNetwork = enclaveVirtualNetwork;
        return this;
    }

    /**
     * Get the bastionEnabled property: Deploy Bastion service (True or False).
     * 
     * @return the bastionEnabled value.
     */
    public Boolean bastionEnabled() {
        return this.bastionEnabled;
    }

    /**
     * Set the bastionEnabled property: Deploy Bastion service (True or False).
     * 
     * @param bastionEnabled the bastionEnabled value to set.
     * @return the VirtualEnclavePatchProperties object itself.
     */
    public VirtualEnclavePatchProperties withBastionEnabled(Boolean bastionEnabled) {
        this.bastionEnabled = bastionEnabled;
        return this;
    }

    /**
     * Get the enclaveRoleAssignments property: Enclave role assignments.
     * 
     * @return the enclaveRoleAssignments value.
     */
    public List<RoleAssignmentItem> enclaveRoleAssignments() {
        return this.enclaveRoleAssignments;
    }

    /**
     * Set the enclaveRoleAssignments property: Enclave role assignments.
     * 
     * @param enclaveRoleAssignments the enclaveRoleAssignments value to set.
     * @return the VirtualEnclavePatchProperties object itself.
     */
    public VirtualEnclavePatchProperties withEnclaveRoleAssignments(List<RoleAssignmentItem> enclaveRoleAssignments) {
        this.enclaveRoleAssignments = enclaveRoleAssignments;
        return this;
    }

    /**
     * Get the workloadRoleAssignments property: Workload role assignments.
     * 
     * @return the workloadRoleAssignments value.
     */
    public List<RoleAssignmentItem> workloadRoleAssignments() {
        return this.workloadRoleAssignments;
    }

    /**
     * Set the workloadRoleAssignments property: Workload role assignments.
     * 
     * @param workloadRoleAssignments the workloadRoleAssignments value to set.
     * @return the VirtualEnclavePatchProperties object itself.
     */
    public VirtualEnclavePatchProperties withWorkloadRoleAssignments(List<RoleAssignmentItem> workloadRoleAssignments) {
        this.workloadRoleAssignments = workloadRoleAssignments;
        return this;
    }

    /**
     * Get the governedServiceList property: Enclave specific policies.
     * 
     * @return the governedServiceList value.
     */
    public List<GovernedServiceItem> governedServiceList() {
        return this.governedServiceList;
    }

    /**
     * Set the governedServiceList property: Enclave specific policies.
     * 
     * @param governedServiceList the governedServiceList value to set.
     * @return the VirtualEnclavePatchProperties object itself.
     */
    public VirtualEnclavePatchProperties withGovernedServiceList(List<GovernedServiceItem> governedServiceList) {
        this.governedServiceList = governedServiceList;
        return this;
    }

    /**
     * Get the enclaveDefaultSettings property: Enclave default settings.
     * 
     * @return the enclaveDefaultSettings value.
     */
    public EnclaveDefaultSettingsPatchModel enclaveDefaultSettings() {
        return this.enclaveDefaultSettings;
    }

    /**
     * Set the enclaveDefaultSettings property: Enclave default settings.
     * 
     * @param enclaveDefaultSettings the enclaveDefaultSettings value to set.
     * @return the VirtualEnclavePatchProperties object itself.
     */
    public VirtualEnclavePatchProperties
        withEnclaveDefaultSettings(EnclaveDefaultSettingsPatchModel enclaveDefaultSettings) {
        this.enclaveDefaultSettings = enclaveDefaultSettings;
        return this;
    }

    /**
     * Get the maintenanceModeConfiguration property: Maintenance Mode configuration.
     * 
     * @return the maintenanceModeConfiguration value.
     */
    public MaintenanceModeConfigurationPatchModel maintenanceModeConfiguration() {
        return this.maintenanceModeConfiguration;
    }

    /**
     * Set the maintenanceModeConfiguration property: Maintenance Mode configuration.
     * 
     * @param maintenanceModeConfiguration the maintenanceModeConfiguration value to set.
     * @return the VirtualEnclavePatchProperties object itself.
     */
    public VirtualEnclavePatchProperties
        withMaintenanceModeConfiguration(MaintenanceModeConfigurationPatchModel maintenanceModeConfiguration) {
        this.maintenanceModeConfiguration = maintenanceModeConfiguration;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("enclaveVirtualNetwork", this.enclaveVirtualNetwork);
        jsonWriter.writeBooleanField("bastionEnabled", this.bastionEnabled);
        jsonWriter.writeArrayField("enclaveRoleAssignments", this.enclaveRoleAssignments,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("workloadRoleAssignments", this.workloadRoleAssignments,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("governedServiceList", this.governedServiceList,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("enclaveDefaultSettings", this.enclaveDefaultSettings);
        jsonWriter.writeJsonField("maintenanceModeConfiguration", this.maintenanceModeConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualEnclavePatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualEnclavePatchProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VirtualEnclavePatchProperties.
     */
    public static VirtualEnclavePatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualEnclavePatchProperties deserializedVirtualEnclavePatchProperties
                = new VirtualEnclavePatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enclaveVirtualNetwork".equals(fieldName)) {
                    deserializedVirtualEnclavePatchProperties.enclaveVirtualNetwork
                        = EnclaveVirtualNetworkModel.fromJson(reader);
                } else if ("bastionEnabled".equals(fieldName)) {
                    deserializedVirtualEnclavePatchProperties.bastionEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("enclaveRoleAssignments".equals(fieldName)) {
                    List<RoleAssignmentItem> enclaveRoleAssignments
                        = reader.readArray(reader1 -> RoleAssignmentItem.fromJson(reader1));
                    deserializedVirtualEnclavePatchProperties.enclaveRoleAssignments = enclaveRoleAssignments;
                } else if ("workloadRoleAssignments".equals(fieldName)) {
                    List<RoleAssignmentItem> workloadRoleAssignments
                        = reader.readArray(reader1 -> RoleAssignmentItem.fromJson(reader1));
                    deserializedVirtualEnclavePatchProperties.workloadRoleAssignments = workloadRoleAssignments;
                } else if ("governedServiceList".equals(fieldName)) {
                    List<GovernedServiceItem> governedServiceList
                        = reader.readArray(reader1 -> GovernedServiceItem.fromJson(reader1));
                    deserializedVirtualEnclavePatchProperties.governedServiceList = governedServiceList;
                } else if ("enclaveDefaultSettings".equals(fieldName)) {
                    deserializedVirtualEnclavePatchProperties.enclaveDefaultSettings
                        = EnclaveDefaultSettingsPatchModel.fromJson(reader);
                } else if ("maintenanceModeConfiguration".equals(fieldName)) {
                    deserializedVirtualEnclavePatchProperties.maintenanceModeConfiguration
                        = MaintenanceModeConfigurationPatchModel.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualEnclavePatchProperties;
        });
    }
}
