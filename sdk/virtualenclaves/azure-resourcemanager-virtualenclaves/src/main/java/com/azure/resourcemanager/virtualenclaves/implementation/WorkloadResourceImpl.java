// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.virtualenclaves.fluent.models.WorkloadResourceInner;
import com.azure.resourcemanager.virtualenclaves.models.WorkloadPatchModel;
import com.azure.resourcemanager.virtualenclaves.models.WorkloadPatchProperties;
import com.azure.resourcemanager.virtualenclaves.models.WorkloadProperties;
import com.azure.resourcemanager.virtualenclaves.models.WorkloadResource;
import java.util.Collections;
import java.util.Map;

public final class WorkloadResourceImpl
    implements WorkloadResource, WorkloadResource.Definition, WorkloadResource.Update {
    private WorkloadResourceInner innerObject;

    private final com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public WorkloadProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public WorkloadResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String virtualEnclaveName;

    private String workloadName;

    private WorkloadPatchModel updateProperties;

    public WorkloadResourceImpl withExistingVirtualEnclave(String resourceGroupName, String virtualEnclaveName) {
        this.resourceGroupName = resourceGroupName;
        this.virtualEnclaveName = virtualEnclaveName;
        return this;
    }

    public WorkloadResource create() {
        this.innerObject = serviceManager.serviceClient()
            .getWorkloads()
            .createOrUpdate(resourceGroupName, virtualEnclaveName, workloadName, this.innerModel(), Context.NONE);
        return this;
    }

    public WorkloadResource create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getWorkloads()
            .createOrUpdate(resourceGroupName, virtualEnclaveName, workloadName, this.innerModel(), context);
        return this;
    }

    WorkloadResourceImpl(String name, com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager serviceManager) {
        this.innerObject = new WorkloadResourceInner();
        this.serviceManager = serviceManager;
        this.workloadName = name;
    }

    public WorkloadResourceImpl update() {
        this.updateProperties = new WorkloadPatchModel();
        return this;
    }

    public WorkloadResource apply() {
        this.innerObject = serviceManager.serviceClient()
            .getWorkloads()
            .update(resourceGroupName, virtualEnclaveName, workloadName, updateProperties, Context.NONE);
        return this;
    }

    public WorkloadResource apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getWorkloads()
            .update(resourceGroupName, virtualEnclaveName, workloadName, updateProperties, context);
        return this;
    }

    WorkloadResourceImpl(WorkloadResourceInner innerObject,
        com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.virtualEnclaveName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "virtualEnclaves");
        this.workloadName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "workloads");
    }

    public WorkloadResource refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getWorkloads()
            .getWithResponse(resourceGroupName, virtualEnclaveName, workloadName, Context.NONE)
            .getValue();
        return this;
    }

    public WorkloadResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getWorkloads()
            .getWithResponse(resourceGroupName, virtualEnclaveName, workloadName, context)
            .getValue();
        return this;
    }

    public WorkloadResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public WorkloadResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public WorkloadResourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public WorkloadResourceImpl withProperties(WorkloadProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public WorkloadResourceImpl withProperties(WorkloadPatchProperties properties) {
        this.updateProperties.withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel() == null || this.innerModel().id() == null;
    }
}
