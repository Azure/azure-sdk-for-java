// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Workload patchable Properties.
 */
@Fluent
public final class WorkloadPatchProperties implements JsonSerializable<WorkloadPatchProperties> {
    /*
     * List of resource group ids.
     */
    private List<String> resourceGroupCollection;

    /**
     * Creates an instance of WorkloadPatchProperties class.
     */
    public WorkloadPatchProperties() {
    }

    /**
     * Get the resourceGroupCollection property: List of resource group ids.
     * 
     * @return the resourceGroupCollection value.
     */
    public List<String> resourceGroupCollection() {
        return this.resourceGroupCollection;
    }

    /**
     * Set the resourceGroupCollection property: List of resource group ids.
     * 
     * @param resourceGroupCollection the resourceGroupCollection value to set.
     * @return the WorkloadPatchProperties object itself.
     */
    public WorkloadPatchProperties withResourceGroupCollection(List<String> resourceGroupCollection) {
        this.resourceGroupCollection = resourceGroupCollection;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("resourceGroupCollection", this.resourceGroupCollection,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkloadPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkloadPatchProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkloadPatchProperties.
     */
    public static WorkloadPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkloadPatchProperties deserializedWorkloadPatchProperties = new WorkloadPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceGroupCollection".equals(fieldName)) {
                    List<String> resourceGroupCollection = reader.readArray(reader1 -> reader1.getString());
                    deserializedWorkloadPatchProperties.resourceGroupCollection = resourceGroupCollection;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkloadPatchProperties;
        });
    }
}
