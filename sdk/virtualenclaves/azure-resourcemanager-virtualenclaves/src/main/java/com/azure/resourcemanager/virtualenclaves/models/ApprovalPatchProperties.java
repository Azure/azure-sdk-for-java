// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Approvals patch properties.
 */
@Fluent
public final class ApprovalPatchProperties implements JsonSerializable<ApprovalPatchProperties> {
    /*
     * Parameter for optimizing query results
     */
    private String parentResourceId;

    /*
     * Parameter for optimizing query results
     */
    private String grandparentResourceId;

    /*
     * List of approvers for the approval request
     */
    private List<Approver> approvers;

    /*
     * Ticket ID for the approval request
     */
    private String ticketId;

    /*
     * Approval request creation time
     */
    private OffsetDateTime createdAt;

    /*
     * Approval request state change time, time at which approval request state changed from pending to approved or
     * rejected.
     */
    private OffsetDateTime stateChangedAt;

    /*
     * Request metadata for the approval request.
     */
    private RequestMetadataUpdatableProperties requestMetadata;

    /**
     * Creates an instance of ApprovalPatchProperties class.
     */
    public ApprovalPatchProperties() {
    }

    /**
     * Get the parentResourceId property: Parameter for optimizing query results.
     * 
     * @return the parentResourceId value.
     */
    public String parentResourceId() {
        return this.parentResourceId;
    }

    /**
     * Set the parentResourceId property: Parameter for optimizing query results.
     * 
     * @param parentResourceId the parentResourceId value to set.
     * @return the ApprovalPatchProperties object itself.
     */
    public ApprovalPatchProperties withParentResourceId(String parentResourceId) {
        this.parentResourceId = parentResourceId;
        return this;
    }

    /**
     * Get the grandparentResourceId property: Parameter for optimizing query results.
     * 
     * @return the grandparentResourceId value.
     */
    public String grandparentResourceId() {
        return this.grandparentResourceId;
    }

    /**
     * Set the grandparentResourceId property: Parameter for optimizing query results.
     * 
     * @param grandparentResourceId the grandparentResourceId value to set.
     * @return the ApprovalPatchProperties object itself.
     */
    public ApprovalPatchProperties withGrandparentResourceId(String grandparentResourceId) {
        this.grandparentResourceId = grandparentResourceId;
        return this;
    }

    /**
     * Get the approvers property: List of approvers for the approval request.
     * 
     * @return the approvers value.
     */
    public List<Approver> approvers() {
        return this.approvers;
    }

    /**
     * Set the approvers property: List of approvers for the approval request.
     * 
     * @param approvers the approvers value to set.
     * @return the ApprovalPatchProperties object itself.
     */
    public ApprovalPatchProperties withApprovers(List<Approver> approvers) {
        this.approvers = approvers;
        return this;
    }

    /**
     * Get the ticketId property: Ticket ID for the approval request.
     * 
     * @return the ticketId value.
     */
    public String ticketId() {
        return this.ticketId;
    }

    /**
     * Set the ticketId property: Ticket ID for the approval request.
     * 
     * @param ticketId the ticketId value to set.
     * @return the ApprovalPatchProperties object itself.
     */
    public ApprovalPatchProperties withTicketId(String ticketId) {
        this.ticketId = ticketId;
        return this;
    }

    /**
     * Get the createdAt property: Approval request creation time.
     * 
     * @return the createdAt value.
     */
    public OffsetDateTime createdAt() {
        return this.createdAt;
    }

    /**
     * Set the createdAt property: Approval request creation time.
     * 
     * @param createdAt the createdAt value to set.
     * @return the ApprovalPatchProperties object itself.
     */
    public ApprovalPatchProperties withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Get the stateChangedAt property: Approval request state change time, time at which approval request state changed
     * from pending to approved or rejected.
     * 
     * @return the stateChangedAt value.
     */
    public OffsetDateTime stateChangedAt() {
        return this.stateChangedAt;
    }

    /**
     * Set the stateChangedAt property: Approval request state change time, time at which approval request state changed
     * from pending to approved or rejected.
     * 
     * @param stateChangedAt the stateChangedAt value to set.
     * @return the ApprovalPatchProperties object itself.
     */
    public ApprovalPatchProperties withStateChangedAt(OffsetDateTime stateChangedAt) {
        this.stateChangedAt = stateChangedAt;
        return this;
    }

    /**
     * Get the requestMetadata property: Request metadata for the approval request.
     * 
     * @return the requestMetadata value.
     */
    public RequestMetadataUpdatableProperties requestMetadata() {
        return this.requestMetadata;
    }

    /**
     * Set the requestMetadata property: Request metadata for the approval request.
     * 
     * @param requestMetadata the requestMetadata value to set.
     * @return the ApprovalPatchProperties object itself.
     */
    public ApprovalPatchProperties withRequestMetadata(RequestMetadataUpdatableProperties requestMetadata) {
        this.requestMetadata = requestMetadata;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("requestMetadata", this.requestMetadata);
        jsonWriter.writeStringField("parentResourceId", this.parentResourceId);
        jsonWriter.writeStringField("grandparentResourceId", this.grandparentResourceId);
        jsonWriter.writeArrayField("approvers", this.approvers, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("ticketId", this.ticketId);
        jsonWriter.writeStringField("createdAt",
            this.createdAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdAt));
        jsonWriter.writeStringField("stateChangedAt",
            this.stateChangedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.stateChangedAt));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApprovalPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApprovalPatchProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApprovalPatchProperties.
     */
    public static ApprovalPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApprovalPatchProperties deserializedApprovalPatchProperties = new ApprovalPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("requestMetadata".equals(fieldName)) {
                    deserializedApprovalPatchProperties.requestMetadata
                        = RequestMetadataUpdatableProperties.fromJson(reader);
                } else if ("parentResourceId".equals(fieldName)) {
                    deserializedApprovalPatchProperties.parentResourceId = reader.getString();
                } else if ("grandparentResourceId".equals(fieldName)) {
                    deserializedApprovalPatchProperties.grandparentResourceId = reader.getString();
                } else if ("approvers".equals(fieldName)) {
                    List<Approver> approvers = reader.readArray(reader1 -> Approver.fromJson(reader1));
                    deserializedApprovalPatchProperties.approvers = approvers;
                } else if ("ticketId".equals(fieldName)) {
                    deserializedApprovalPatchProperties.ticketId = reader.getString();
                } else if ("createdAt".equals(fieldName)) {
                    deserializedApprovalPatchProperties.createdAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("stateChangedAt".equals(fieldName)) {
                    deserializedApprovalPatchProperties.stateChangedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApprovalPatchProperties;
        });
    }
}
