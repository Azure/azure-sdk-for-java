// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.virtualenclaves.fluent.EnclaveEndpointsClient;
import com.azure.resourcemanager.virtualenclaves.fluent.models.ApprovalActionResponseInner;
import com.azure.resourcemanager.virtualenclaves.fluent.models.EnclaveEndpointResourceInner;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalActionResponse;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalCallbackRequest;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalDeletionCallbackRequest;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveEndpointResource;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveEndpoints;

public final class EnclaveEndpointsImpl implements EnclaveEndpoints {
    private static final ClientLogger LOGGER = new ClientLogger(EnclaveEndpointsImpl.class);

    private final EnclaveEndpointsClient innerClient;

    private final com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager serviceManager;

    public EnclaveEndpointsImpl(EnclaveEndpointsClient innerClient,
        com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<EnclaveEndpointResource> getWithResponse(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, Context context) {
        Response<EnclaveEndpointResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, virtualEnclaveName, enclaveEndpointName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new EnclaveEndpointResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public EnclaveEndpointResource get(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName) {
        EnclaveEndpointResourceInner inner
            = this.serviceClient().get(resourceGroupName, virtualEnclaveName, enclaveEndpointName);
        if (inner != null) {
            return new EnclaveEndpointResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName) {
        this.serviceClient().delete(resourceGroupName, virtualEnclaveName, enclaveEndpointName);
    }

    public void delete(String resourceGroupName, String virtualEnclaveName, String enclaveEndpointName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, virtualEnclaveName, enclaveEndpointName, context);
    }

    public PagedIterable<EnclaveEndpointResource> listByEnclaveResource(String resourceGroupName,
        String virtualEnclaveName) {
        PagedIterable<EnclaveEndpointResourceInner> inner
            = this.serviceClient().listByEnclaveResource(resourceGroupName, virtualEnclaveName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EnclaveEndpointResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<EnclaveEndpointResource> listByEnclaveResource(String resourceGroupName,
        String virtualEnclaveName, Context context) {
        PagedIterable<EnclaveEndpointResourceInner> inner
            = this.serviceClient().listByEnclaveResource(resourceGroupName, virtualEnclaveName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EnclaveEndpointResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<EnclaveEndpointResource> listBySubscription(String virtualEnclaveName) {
        PagedIterable<EnclaveEndpointResourceInner> inner = this.serviceClient().listBySubscription(virtualEnclaveName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EnclaveEndpointResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<EnclaveEndpointResource> listBySubscription(String virtualEnclaveName, Context context) {
        PagedIterable<EnclaveEndpointResourceInner> inner
            = this.serviceClient().listBySubscription(virtualEnclaveName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new EnclaveEndpointResourceImpl(inner1, this.manager()));
    }

    public ApprovalActionResponse handleApprovalCreation(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, ApprovalCallbackRequest body) {
        ApprovalActionResponseInner inner = this.serviceClient()
            .handleApprovalCreation(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body);
        if (inner != null) {
            return new ApprovalActionResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ApprovalActionResponse handleApprovalCreation(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, ApprovalCallbackRequest body, Context context) {
        ApprovalActionResponseInner inner = this.serviceClient()
            .handleApprovalCreation(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body, context);
        if (inner != null) {
            return new ApprovalActionResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ApprovalActionResponse handleApprovalDeletion(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, ApprovalDeletionCallbackRequest body) {
        ApprovalActionResponseInner inner = this.serviceClient()
            .handleApprovalDeletion(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body);
        if (inner != null) {
            return new ApprovalActionResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ApprovalActionResponse handleApprovalDeletion(String resourceGroupName, String virtualEnclaveName,
        String enclaveEndpointName, ApprovalDeletionCallbackRequest body, Context context) {
        ApprovalActionResponseInner inner = this.serviceClient()
            .handleApprovalDeletion(resourceGroupName, virtualEnclaveName, enclaveEndpointName, body, context);
        if (inner != null) {
            return new ApprovalActionResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public EnclaveEndpointResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualEnclaveName = ResourceManagerUtils.getValueFromIdByName(id, "virtualEnclaves");
        if (virtualEnclaveName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualEnclaves'.", id)));
        }
        String enclaveEndpointName = ResourceManagerUtils.getValueFromIdByName(id, "enclaveEndpoints");
        if (enclaveEndpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'enclaveEndpoints'.", id)));
        }
        return this.getWithResponse(resourceGroupName, virtualEnclaveName, enclaveEndpointName, Context.NONE)
            .getValue();
    }

    public Response<EnclaveEndpointResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualEnclaveName = ResourceManagerUtils.getValueFromIdByName(id, "virtualEnclaves");
        if (virtualEnclaveName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualEnclaves'.", id)));
        }
        String enclaveEndpointName = ResourceManagerUtils.getValueFromIdByName(id, "enclaveEndpoints");
        if (enclaveEndpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'enclaveEndpoints'.", id)));
        }
        return this.getWithResponse(resourceGroupName, virtualEnclaveName, enclaveEndpointName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualEnclaveName = ResourceManagerUtils.getValueFromIdByName(id, "virtualEnclaves");
        if (virtualEnclaveName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualEnclaves'.", id)));
        }
        String enclaveEndpointName = ResourceManagerUtils.getValueFromIdByName(id, "enclaveEndpoints");
        if (enclaveEndpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'enclaveEndpoints'.", id)));
        }
        this.delete(resourceGroupName, virtualEnclaveName, enclaveEndpointName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualEnclaveName = ResourceManagerUtils.getValueFromIdByName(id, "virtualEnclaves");
        if (virtualEnclaveName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualEnclaves'.", id)));
        }
        String enclaveEndpointName = ResourceManagerUtils.getValueFromIdByName(id, "enclaveEndpoints");
        if (enclaveEndpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'enclaveEndpoints'.", id)));
        }
        this.delete(resourceGroupName, virtualEnclaveName, enclaveEndpointName, context);
    }

    private EnclaveEndpointsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager manager() {
        return this.serviceManager;
    }

    public EnclaveEndpointResourceImpl define(String name) {
        return new EnclaveEndpointResourceImpl(name, this.manager());
    }
}
