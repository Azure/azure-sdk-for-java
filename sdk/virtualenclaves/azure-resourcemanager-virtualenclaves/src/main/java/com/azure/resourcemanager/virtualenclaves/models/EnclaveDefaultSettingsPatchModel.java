// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Virtual Enclave Default Settings.
 */
@Fluent
public final class EnclaveDefaultSettingsPatchModel implements JsonSerializable<EnclaveDefaultSettingsPatchModel> {
    /*
     * Diagnostic Destination.
     */
    private DiagnosticDestination diagnosticDestination;

    /**
     * Creates an instance of EnclaveDefaultSettingsPatchModel class.
     */
    public EnclaveDefaultSettingsPatchModel() {
    }

    /**
     * Get the diagnosticDestination property: Diagnostic Destination.
     * 
     * @return the diagnosticDestination value.
     */
    public DiagnosticDestination diagnosticDestination() {
        return this.diagnosticDestination;
    }

    /**
     * Set the diagnosticDestination property: Diagnostic Destination.
     * 
     * @param diagnosticDestination the diagnosticDestination value to set.
     * @return the EnclaveDefaultSettingsPatchModel object itself.
     */
    public EnclaveDefaultSettingsPatchModel withDiagnosticDestination(DiagnosticDestination diagnosticDestination) {
        this.diagnosticDestination = diagnosticDestination;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("diagnosticDestination",
            this.diagnosticDestination == null ? null : this.diagnosticDestination.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnclaveDefaultSettingsPatchModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnclaveDefaultSettingsPatchModel if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EnclaveDefaultSettingsPatchModel.
     */
    public static EnclaveDefaultSettingsPatchModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnclaveDefaultSettingsPatchModel deserializedEnclaveDefaultSettingsPatchModel
                = new EnclaveDefaultSettingsPatchModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diagnosticDestination".equals(fieldName)) {
                    deserializedEnclaveDefaultSettingsPatchModel.diagnosticDestination
                        = DiagnosticDestination.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnclaveDefaultSettingsPatchModel;
        });
    }
}
