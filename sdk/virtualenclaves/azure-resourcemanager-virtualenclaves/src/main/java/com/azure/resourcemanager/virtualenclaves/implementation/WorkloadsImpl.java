// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.virtualenclaves.fluent.WorkloadsClient;
import com.azure.resourcemanager.virtualenclaves.fluent.models.WorkloadResourceInner;
import com.azure.resourcemanager.virtualenclaves.models.WorkloadResource;
import com.azure.resourcemanager.virtualenclaves.models.Workloads;

public final class WorkloadsImpl implements Workloads {
    private static final ClientLogger LOGGER = new ClientLogger(WorkloadsImpl.class);

    private final WorkloadsClient innerClient;

    private final com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager serviceManager;

    public WorkloadsImpl(WorkloadsClient innerClient,
        com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<WorkloadResource> getWithResponse(String resourceGroupName, String virtualEnclaveName,
        String workloadName, Context context) {
        Response<WorkloadResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, virtualEnclaveName, workloadName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new WorkloadResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public WorkloadResource get(String resourceGroupName, String virtualEnclaveName, String workloadName) {
        WorkloadResourceInner inner = this.serviceClient().get(resourceGroupName, virtualEnclaveName, workloadName);
        if (inner != null) {
            return new WorkloadResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String virtualEnclaveName, String workloadName) {
        this.serviceClient().delete(resourceGroupName, virtualEnclaveName, workloadName);
    }

    public void delete(String resourceGroupName, String virtualEnclaveName, String workloadName, Context context) {
        this.serviceClient().delete(resourceGroupName, virtualEnclaveName, workloadName, context);
    }

    public PagedIterable<WorkloadResource> listByEnclaveResource(String resourceGroupName, String virtualEnclaveName) {
        PagedIterable<WorkloadResourceInner> inner
            = this.serviceClient().listByEnclaveResource(resourceGroupName, virtualEnclaveName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new WorkloadResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<WorkloadResource> listByEnclaveResource(String resourceGroupName, String virtualEnclaveName,
        Context context) {
        PagedIterable<WorkloadResourceInner> inner
            = this.serviceClient().listByEnclaveResource(resourceGroupName, virtualEnclaveName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new WorkloadResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<WorkloadResource> listBySubscription(String virtualEnclaveName) {
        PagedIterable<WorkloadResourceInner> inner = this.serviceClient().listBySubscription(virtualEnclaveName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new WorkloadResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<WorkloadResource> listBySubscription(String virtualEnclaveName, Context context) {
        PagedIterable<WorkloadResourceInner> inner
            = this.serviceClient().listBySubscription(virtualEnclaveName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new WorkloadResourceImpl(inner1, this.manager()));
    }

    public WorkloadResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualEnclaveName = ResourceManagerUtils.getValueFromIdByName(id, "virtualEnclaves");
        if (virtualEnclaveName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualEnclaves'.", id)));
        }
        String workloadName = ResourceManagerUtils.getValueFromIdByName(id, "workloads");
        if (workloadName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workloads'.", id)));
        }
        return this.getWithResponse(resourceGroupName, virtualEnclaveName, workloadName, Context.NONE).getValue();
    }

    public Response<WorkloadResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualEnclaveName = ResourceManagerUtils.getValueFromIdByName(id, "virtualEnclaves");
        if (virtualEnclaveName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualEnclaves'.", id)));
        }
        String workloadName = ResourceManagerUtils.getValueFromIdByName(id, "workloads");
        if (workloadName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workloads'.", id)));
        }
        return this.getWithResponse(resourceGroupName, virtualEnclaveName, workloadName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualEnclaveName = ResourceManagerUtils.getValueFromIdByName(id, "virtualEnclaves");
        if (virtualEnclaveName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualEnclaves'.", id)));
        }
        String workloadName = ResourceManagerUtils.getValueFromIdByName(id, "workloads");
        if (workloadName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workloads'.", id)));
        }
        this.delete(resourceGroupName, virtualEnclaveName, workloadName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualEnclaveName = ResourceManagerUtils.getValueFromIdByName(id, "virtualEnclaves");
        if (virtualEnclaveName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'virtualEnclaves'.", id)));
        }
        String workloadName = ResourceManagerUtils.getValueFromIdByName(id, "workloads");
        if (workloadName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'workloads'.", id)));
        }
        this.delete(resourceGroupName, virtualEnclaveName, workloadName, context);
    }

    private WorkloadsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager manager() {
        return this.serviceManager;
    }

    public WorkloadResourceImpl define(String name) {
        return new WorkloadResourceImpl(name, this.manager());
    }
}
