// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Approver Metadata for approvals request.
 */
@Fluent
public final class Approver implements JsonSerializable<Approver> {
    /*
     * Entra ObjectID of the approver
     */
    private String approverEntraId;

    /*
     * Action Performed by approver
     */
    private ActionPerformed actionPerformed;

    /*
     * approval request last updated at
     */
    private OffsetDateTime lastUpdatedAt;

    /**
     * Creates an instance of Approver class.
     */
    public Approver() {
    }

    /**
     * Get the approverEntraId property: Entra ObjectID of the approver.
     * 
     * @return the approverEntraId value.
     */
    public String approverEntraId() {
        return this.approverEntraId;
    }

    /**
     * Set the approverEntraId property: Entra ObjectID of the approver.
     * 
     * @param approverEntraId the approverEntraId value to set.
     * @return the Approver object itself.
     */
    public Approver withApproverEntraId(String approverEntraId) {
        this.approverEntraId = approverEntraId;
        return this;
    }

    /**
     * Get the actionPerformed property: Action Performed by approver.
     * 
     * @return the actionPerformed value.
     */
    public ActionPerformed actionPerformed() {
        return this.actionPerformed;
    }

    /**
     * Set the actionPerformed property: Action Performed by approver.
     * 
     * @param actionPerformed the actionPerformed value to set.
     * @return the Approver object itself.
     */
    public Approver withActionPerformed(ActionPerformed actionPerformed) {
        this.actionPerformed = actionPerformed;
        return this;
    }

    /**
     * Get the lastUpdatedAt property: approval request last updated at.
     * 
     * @return the lastUpdatedAt value.
     */
    public OffsetDateTime lastUpdatedAt() {
        return this.lastUpdatedAt;
    }

    /**
     * Set the lastUpdatedAt property: approval request last updated at.
     * 
     * @param lastUpdatedAt the lastUpdatedAt value to set.
     * @return the Approver object itself.
     */
    public Approver withLastUpdatedAt(OffsetDateTime lastUpdatedAt) {
        this.lastUpdatedAt = lastUpdatedAt;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("approverEntraId", this.approverEntraId);
        jsonWriter.writeStringField("lastUpdatedAt",
            this.lastUpdatedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastUpdatedAt));
        jsonWriter.writeStringField("actionPerformed",
            this.actionPerformed == null ? null : this.actionPerformed.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Approver from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Approver if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Approver.
     */
    public static Approver fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Approver deserializedApprover = new Approver();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("approverEntraId".equals(fieldName)) {
                    deserializedApprover.approverEntraId = reader.getString();
                } else if ("lastUpdatedAt".equals(fieldName)) {
                    deserializedApprover.lastUpdatedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("actionPerformed".equals(fieldName)) {
                    deserializedApprover.actionPerformed = ActionPerformed.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApprover;
        });
    }
}
