// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * ApprovalSettings Properties.
 */
@Fluent
public final class ApprovalSettingsPatchProperties implements JsonSerializable<ApprovalSettingsPatchProperties> {
    /*
     * List of mandatory approvers for the approval request
     */
    private List<MandatoryApprover> mandatoryApprovers;

    /**
     * Creates an instance of ApprovalSettingsPatchProperties class.
     */
    public ApprovalSettingsPatchProperties() {
    }

    /**
     * Get the mandatoryApprovers property: List of mandatory approvers for the approval request.
     * 
     * @return the mandatoryApprovers value.
     */
    public List<MandatoryApprover> mandatoryApprovers() {
        return this.mandatoryApprovers;
    }

    /**
     * Set the mandatoryApprovers property: List of mandatory approvers for the approval request.
     * 
     * @param mandatoryApprovers the mandatoryApprovers value to set.
     * @return the ApprovalSettingsPatchProperties object itself.
     */
    public ApprovalSettingsPatchProperties withMandatoryApprovers(List<MandatoryApprover> mandatoryApprovers) {
        this.mandatoryApprovers = mandatoryApprovers;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("mandatoryApprovers", this.mandatoryApprovers,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApprovalSettingsPatchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApprovalSettingsPatchProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApprovalSettingsPatchProperties.
     */
    public static ApprovalSettingsPatchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApprovalSettingsPatchProperties deserializedApprovalSettingsPatchProperties
                = new ApprovalSettingsPatchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mandatoryApprovers".equals(fieldName)) {
                    List<MandatoryApprover> mandatoryApprovers
                        = reader.readArray(reader1 -> MandatoryApprover.fromJson(reader1));
                    deserializedApprovalSettingsPatchProperties.mandatoryApprovers = mandatoryApprovers;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApprovalSettingsPatchProperties;
        });
    }
}
