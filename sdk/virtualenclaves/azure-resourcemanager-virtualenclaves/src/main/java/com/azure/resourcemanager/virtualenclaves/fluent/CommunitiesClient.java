// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.virtualenclaves.fluent.models.CheckAddressSpaceAvailabilityResponseInner;
import com.azure.resourcemanager.virtualenclaves.fluent.models.CommunityResourceInner;
import com.azure.resourcemanager.virtualenclaves.models.CheckAddressSpaceAvailabilityRequest;
import com.azure.resourcemanager.virtualenclaves.models.CommunityPatchModel;

/**
 * An instance of this class provides access to all the operations defined in CommunitiesClient.
 */
public interface CommunitiesClient {
    /**
     * Get a CommunityResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a CommunityResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CommunityResourceInner> getByResourceGroupWithResponse(String resourceGroupName, String communityName,
        Context context);

    /**
     * Get a CommunityResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a CommunityResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommunityResourceInner getByResourceGroup(String resourceGroupName, String communityName);

    /**
     * Create a CommunityResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of community Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CommunityResourceInner>, CommunityResourceInner> beginCreateOrUpdate(String resourceGroupName,
        String communityName, CommunityResourceInner resource);

    /**
     * Create a CommunityResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of community Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CommunityResourceInner>, CommunityResourceInner> beginCreateOrUpdate(String resourceGroupName,
        String communityName, CommunityResourceInner resource, Context context);

    /**
     * Create a CommunityResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return community Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommunityResourceInner createOrUpdate(String resourceGroupName, String communityName,
        CommunityResourceInner resource);

    /**
     * Create a CommunityResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return community Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommunityResourceInner createOrUpdate(String resourceGroupName, String communityName,
        CommunityResourceInner resource, Context context);

    /**
     * Update a CommunityResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of community Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CommunityResourceInner>, CommunityResourceInner> beginUpdate(String resourceGroupName,
        String communityName, CommunityPatchModel properties);

    /**
     * Update a CommunityResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of community Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CommunityResourceInner>, CommunityResourceInner> beginUpdate(String resourceGroupName,
        String communityName, CommunityPatchModel properties, Context context);

    /**
     * Update a CommunityResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return community Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommunityResourceInner update(String resourceGroupName, String communityName, CommunityPatchModel properties);

    /**
     * Update a CommunityResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return community Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CommunityResourceInner update(String resourceGroupName, String communityName, CommunityPatchModel properties,
        Context context);

    /**
     * Delete a CommunityResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String communityName);

    /**
     * Delete a CommunityResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String communityName, Context context);

    /**
     * Delete a CommunityResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String communityName);

    /**
     * Delete a CommunityResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String communityName, Context context);

    /**
     * List CommunityResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a CommunityResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CommunityResourceInner> listByResourceGroup(String resourceGroupName);

    /**
     * List CommunityResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a CommunityResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CommunityResourceInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List CommunityResource resources by subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a CommunityResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CommunityResourceInner> list();

    /**
     * List CommunityResource resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a CommunityResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CommunityResourceInner> list(Context context);

    /**
     * Checks that the IP Address Space to be allocated for this Community is available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param checkAddressSpaceAvailabilityRequest Check IP Address Space request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of availability of the requested address space along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CheckAddressSpaceAvailabilityResponseInner> checkAddressSpaceAvailabilityWithResponse(
        String resourceGroupName, String communityName,
        CheckAddressSpaceAvailabilityRequest checkAddressSpaceAvailabilityRequest, Context context);

    /**
     * Checks that the IP Address Space to be allocated for this Community is available.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param communityName The name of the communityResource Resource.
     * @param checkAddressSpaceAvailabilityRequest Check IP Address Space request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of availability of the requested address space.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CheckAddressSpaceAvailabilityResponseInner checkAddressSpaceAvailability(String resourceGroupName,
        String communityName, CheckAddressSpaceAvailabilityRequest checkAddressSpaceAvailabilityRequest);
}
