// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.virtualenclaves.fluent.TransitHubsClient;
import com.azure.resourcemanager.virtualenclaves.fluent.models.TransitHubResourceInner;
import com.azure.resourcemanager.virtualenclaves.models.TransitHubResource;
import com.azure.resourcemanager.virtualenclaves.models.TransitHubs;

public final class TransitHubsImpl implements TransitHubs {
    private static final ClientLogger LOGGER = new ClientLogger(TransitHubsImpl.class);

    private final TransitHubsClient innerClient;

    private final com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager serviceManager;

    public TransitHubsImpl(TransitHubsClient innerClient,
        com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<TransitHubResource> getWithResponse(String resourceGroupName, String communityName,
        String transitHubName, Context context) {
        Response<TransitHubResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, communityName, transitHubName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new TransitHubResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public TransitHubResource get(String resourceGroupName, String communityName, String transitHubName) {
        TransitHubResourceInner inner = this.serviceClient().get(resourceGroupName, communityName, transitHubName);
        if (inner != null) {
            return new TransitHubResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String communityName, String transitHubName) {
        this.serviceClient().delete(resourceGroupName, communityName, transitHubName);
    }

    public void delete(String resourceGroupName, String communityName, String transitHubName, Context context) {
        this.serviceClient().delete(resourceGroupName, communityName, transitHubName, context);
    }

    public PagedIterable<TransitHubResource> listByCommunityResource(String resourceGroupName, String communityName) {
        PagedIterable<TransitHubResourceInner> inner
            = this.serviceClient().listByCommunityResource(resourceGroupName, communityName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TransitHubResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<TransitHubResource> listByCommunityResource(String resourceGroupName, String communityName,
        Context context) {
        PagedIterable<TransitHubResourceInner> inner
            = this.serviceClient().listByCommunityResource(resourceGroupName, communityName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TransitHubResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<TransitHubResource> listBySubscription(String communityName) {
        PagedIterable<TransitHubResourceInner> inner = this.serviceClient().listBySubscription(communityName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TransitHubResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<TransitHubResource> listBySubscription(String communityName, Context context) {
        PagedIterable<TransitHubResourceInner> inner = this.serviceClient().listBySubscription(communityName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TransitHubResourceImpl(inner1, this.manager()));
    }

    public TransitHubResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String communityName = ResourceManagerUtils.getValueFromIdByName(id, "communities");
        if (communityName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'communities'.", id)));
        }
        String transitHubName = ResourceManagerUtils.getValueFromIdByName(id, "transitHubs");
        if (transitHubName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'transitHubs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, communityName, transitHubName, Context.NONE).getValue();
    }

    public Response<TransitHubResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String communityName = ResourceManagerUtils.getValueFromIdByName(id, "communities");
        if (communityName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'communities'.", id)));
        }
        String transitHubName = ResourceManagerUtils.getValueFromIdByName(id, "transitHubs");
        if (transitHubName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'transitHubs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, communityName, transitHubName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String communityName = ResourceManagerUtils.getValueFromIdByName(id, "communities");
        if (communityName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'communities'.", id)));
        }
        String transitHubName = ResourceManagerUtils.getValueFromIdByName(id, "transitHubs");
        if (transitHubName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'transitHubs'.", id)));
        }
        this.delete(resourceGroupName, communityName, transitHubName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String communityName = ResourceManagerUtils.getValueFromIdByName(id, "communities");
        if (communityName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'communities'.", id)));
        }
        String transitHubName = ResourceManagerUtils.getValueFromIdByName(id, "transitHubs");
        if (transitHubName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'transitHubs'.", id)));
        }
        this.delete(resourceGroupName, communityName, transitHubName, context);
    }

    private TransitHubsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager manager() {
        return this.serviceManager;
    }

    public TransitHubResourceImpl define(String name) {
        return new TransitHubResourceImpl(name, this.manager());
    }
}
