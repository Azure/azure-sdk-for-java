// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response of availability of the requested address space.
 */
@Immutable
public final class CheckAddressSpaceAvailabilityResponseInner
    implements JsonSerializable<CheckAddressSpaceAvailabilityResponseInner> {
    /*
     * Boolean representing whether the address space is available.
     */
    private boolean value;

    /**
     * Creates an instance of CheckAddressSpaceAvailabilityResponseInner class.
     */
    private CheckAddressSpaceAvailabilityResponseInner() {
    }

    /**
     * Get the value property: Boolean representing whether the address space is available.
     * 
     * @return the value value.
     */
    public boolean value() {
        return this.value;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CheckAddressSpaceAvailabilityResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CheckAddressSpaceAvailabilityResponseInner if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CheckAddressSpaceAvailabilityResponseInner.
     */
    public static CheckAddressSpaceAvailabilityResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CheckAddressSpaceAvailabilityResponseInner deserializedCheckAddressSpaceAvailabilityResponseInner
                = new CheckAddressSpaceAvailabilityResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    deserializedCheckAddressSpaceAvailabilityResponseInner.value = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCheckAddressSpaceAvailabilityResponseInner;
        });
    }
}
