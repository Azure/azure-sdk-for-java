// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.virtualenclaves.fluent.models.EnclaveConnectionResourceInner;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalActionResponse;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalCallbackRequest;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalDeletionCallbackRequest;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveConnectionPatchModel;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveConnectionPatchProperties;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveConnectionProperties;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveConnectionResource;
import java.util.Collections;
import java.util.Map;

public final class EnclaveConnectionResourceImpl
    implements EnclaveConnectionResource, EnclaveConnectionResource.Definition, EnclaveConnectionResource.Update {
    private EnclaveConnectionResourceInner innerObject;

    private final com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public EnclaveConnectionProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public EnclaveConnectionResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String enclaveConnectionName;

    private EnclaveConnectionPatchModel updateProperties;

    public EnclaveConnectionResourceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public EnclaveConnectionResource create() {
        this.innerObject = serviceManager.serviceClient()
            .getEnclaveConnections()
            .createOrUpdate(resourceGroupName, enclaveConnectionName, this.innerModel(), Context.NONE);
        return this;
    }

    public EnclaveConnectionResource create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getEnclaveConnections()
            .createOrUpdate(resourceGroupName, enclaveConnectionName, this.innerModel(), context);
        return this;
    }

    EnclaveConnectionResourceImpl(String name,
        com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager serviceManager) {
        this.innerObject = new EnclaveConnectionResourceInner();
        this.serviceManager = serviceManager;
        this.enclaveConnectionName = name;
    }

    public EnclaveConnectionResourceImpl update() {
        this.updateProperties = new EnclaveConnectionPatchModel();
        return this;
    }

    public EnclaveConnectionResource apply() {
        this.innerObject = serviceManager.serviceClient()
            .getEnclaveConnections()
            .update(resourceGroupName, enclaveConnectionName, updateProperties, Context.NONE);
        return this;
    }

    public EnclaveConnectionResource apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getEnclaveConnections()
            .update(resourceGroupName, enclaveConnectionName, updateProperties, context);
        return this;
    }

    EnclaveConnectionResourceImpl(EnclaveConnectionResourceInner innerObject,
        com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.enclaveConnectionName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "enclaveConnections");
    }

    public EnclaveConnectionResource refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getEnclaveConnections()
            .getByResourceGroupWithResponse(resourceGroupName, enclaveConnectionName, Context.NONE)
            .getValue();
        return this;
    }

    public EnclaveConnectionResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getEnclaveConnections()
            .getByResourceGroupWithResponse(resourceGroupName, enclaveConnectionName, context)
            .getValue();
        return this;
    }

    public ApprovalActionResponse handleApprovalCreation(ApprovalCallbackRequest body) {
        return serviceManager.enclaveConnections()
            .handleApprovalCreation(resourceGroupName, enclaveConnectionName, body);
    }

    public ApprovalActionResponse handleApprovalCreation(ApprovalCallbackRequest body, Context context) {
        return serviceManager.enclaveConnections()
            .handleApprovalCreation(resourceGroupName, enclaveConnectionName, body, context);
    }

    public ApprovalActionResponse handleApprovalDeletion(ApprovalDeletionCallbackRequest body) {
        return serviceManager.enclaveConnections()
            .handleApprovalDeletion(resourceGroupName, enclaveConnectionName, body);
    }

    public ApprovalActionResponse handleApprovalDeletion(ApprovalDeletionCallbackRequest body, Context context) {
        return serviceManager.enclaveConnections()
            .handleApprovalDeletion(resourceGroupName, enclaveConnectionName, body, context);
    }

    public EnclaveConnectionResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public EnclaveConnectionResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public EnclaveConnectionResourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public EnclaveConnectionResourceImpl withProperties(EnclaveConnectionProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public EnclaveConnectionResourceImpl withProperties(EnclaveConnectionPatchProperties properties) {
        this.updateProperties.withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel() == null || this.innerModel().id() == null;
    }
}
