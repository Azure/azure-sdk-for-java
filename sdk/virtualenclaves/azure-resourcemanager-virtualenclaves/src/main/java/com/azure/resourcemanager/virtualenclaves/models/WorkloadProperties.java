// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Workload Resource properties.
 */
@Fluent
public final class WorkloadProperties implements JsonSerializable<WorkloadProperties> {
    /*
     * Provisioning State.
     */
    private ProvisioningState provisioningState;

    /*
     * List of resource group ids.
     */
    private List<String> resourceGroupCollection;

    /*
     * Managed On Behalf Of Configuration.
     */
    private ManagedOnBehalfOfConfiguration managedOnBehalfOfConfiguration;

    /**
     * Creates an instance of WorkloadProperties class.
     */
    public WorkloadProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning State.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the resourceGroupCollection property: List of resource group ids.
     * 
     * @return the resourceGroupCollection value.
     */
    public List<String> resourceGroupCollection() {
        return this.resourceGroupCollection;
    }

    /**
     * Set the resourceGroupCollection property: List of resource group ids.
     * 
     * @param resourceGroupCollection the resourceGroupCollection value to set.
     * @return the WorkloadProperties object itself.
     */
    public WorkloadProperties withResourceGroupCollection(List<String> resourceGroupCollection) {
        this.resourceGroupCollection = resourceGroupCollection;
        return this;
    }

    /**
     * Get the managedOnBehalfOfConfiguration property: Managed On Behalf Of Configuration.
     * 
     * @return the managedOnBehalfOfConfiguration value.
     */
    public ManagedOnBehalfOfConfiguration managedOnBehalfOfConfiguration() {
        return this.managedOnBehalfOfConfiguration;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("resourceGroupCollection", this.resourceGroupCollection,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkloadProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkloadProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkloadProperties.
     */
    public static WorkloadProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkloadProperties deserializedWorkloadProperties = new WorkloadProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedWorkloadProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("resourceGroupCollection".equals(fieldName)) {
                    List<String> resourceGroupCollection = reader.readArray(reader1 -> reader1.getString());
                    deserializedWorkloadProperties.resourceGroupCollection = resourceGroupCollection;
                } else if ("managedOnBehalfOfConfiguration".equals(fieldName)) {
                    deserializedWorkloadProperties.managedOnBehalfOfConfiguration
                        = ManagedOnBehalfOfConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkloadProperties;
        });
    }
}
