// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of Approvals.
 */
public interface Approvals {
    /**
     * Get a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ApprovalResource along with {@link Response}.
     */
    Response<ApprovalResource> getWithResponse(String resourceUri, String approvalName, Context context);

    /**
     * Get a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ApprovalResource.
     */
    ApprovalResource get(String resourceUri, String approvalName);

    /**
     * List ApprovalResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ApprovalResource> listByParent(String resourceUri);

    /**
     * List ApprovalResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ApprovalResource> listByParent(String resourceUri, Context context);

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceUri, String approvalName);

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceUri, String approvalName, Context context);

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    ApprovalActionResponse notifyInitiator(String resourceUri, String approvalName, ApprovalActionRequest body);

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    ApprovalActionResponse notifyInitiator(String resourceUri, String approvalName, ApprovalActionRequest body,
        Context context);

    /**
     * Get a ApprovalResource.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ApprovalResource along with {@link Response}.
     */
    ApprovalResource getById(String id);

    /**
     * Get a ApprovalResource.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ApprovalResource along with {@link Response}.
     */
    Response<ApprovalResource> getByIdWithResponse(String id, Context context);

    /**
     * Delete a ApprovalResource.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a ApprovalResource.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new ApprovalResource resource.
     * 
     * @param name resource name.
     * @return the first stage of the new ApprovalResource definition.
     */
    ApprovalResource.DefinitionStages.Blank define(String name);
}
