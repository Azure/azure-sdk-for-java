// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Approver Metadata for approvals request.
 */
@Fluent
public final class MandatoryApprover implements JsonSerializable<MandatoryApprover> {
    /*
     * EntraId of the approver
     */
    private String approverEntraId;

    /**
     * Creates an instance of MandatoryApprover class.
     */
    public MandatoryApprover() {
    }

    /**
     * Get the approverEntraId property: EntraId of the approver.
     * 
     * @return the approverEntraId value.
     */
    public String approverEntraId() {
        return this.approverEntraId;
    }

    /**
     * Set the approverEntraId property: EntraId of the approver.
     * 
     * @param approverEntraId the approverEntraId value to set.
     * @return the MandatoryApprover object itself.
     */
    public MandatoryApprover withApproverEntraId(String approverEntraId) {
        this.approverEntraId = approverEntraId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("approverEntraId", this.approverEntraId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MandatoryApprover from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MandatoryApprover if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MandatoryApprover.
     */
    public static MandatoryApprover fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MandatoryApprover deserializedMandatoryApprover = new MandatoryApprover();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("approverEntraId".equals(fieldName)) {
                    deserializedMandatoryApprover.approverEntraId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMandatoryApprover;
        });
    }
}
