// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.virtualenclaves.fluent.ApprovalsClient;
import com.azure.resourcemanager.virtualenclaves.fluent.models.ApprovalActionResponseInner;
import com.azure.resourcemanager.virtualenclaves.fluent.models.ApprovalResourceInner;
import com.azure.resourcemanager.virtualenclaves.implementation.models.ApprovalResourceListResult;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalActionRequest;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalPatchModel;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ApprovalsClient.
 */
public final class ApprovalsClientImpl implements ApprovalsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ApprovalsService service;

    /**
     * The service client containing this operation class.
     */
    private final VirtualEnclavesManagementClientImpl client;

    /**
     * Initializes an instance of ApprovalsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ApprovalsClientImpl(VirtualEnclavesManagementClientImpl client) {
        this.service
            = RestProxy.create(ApprovalsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for VirtualEnclavesManagementClientApprovals to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "VirtualEnclavesManagementClientApprovals")
    public interface ApprovalsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApprovalResourceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("approvalName") String approvalName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ApprovalResourceInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("approvalName") String approvalName, @HeaderParam("Accept") String accept, Context context);

        @Put("/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("approvalName") String approvalName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") ApprovalResourceInner resource,
            Context context);

        @Put("/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("approvalName") String approvalName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") ApprovalResourceInner resource,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{resourceUri}/providers/Microsoft.Mission/approvals")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApprovalResourceListResult>> listByParent(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{resourceUri}/providers/Microsoft.Mission/approvals")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ApprovalResourceListResult> listByParentSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri, @HeaderParam("Accept") String accept,
            Context context);

        @Patch("/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("approvalName") String approvalName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") ApprovalPatchModel properties,
            Context context);

        @Patch("/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("approvalName") String approvalName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") ApprovalPatchModel properties,
            Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("approvalName") String approvalName, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("approvalName") String approvalName, Context context);

        @Post("/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}/notifyInitiator")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> notifyInitiator(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("approvalName") String approvalName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") ApprovalActionRequest body,
            Context context);

        @Post("/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}/notifyInitiator")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> notifyInitiatorSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @PathParam("approvalName") String approvalName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") ApprovalActionRequest body,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApprovalResourceListResult>> listByParentNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ApprovalResourceListResult> listByParentNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ApprovalResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApprovalResourceInner>> getWithResponseAsync(String resourceUri, String approvalName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                approvalName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ApprovalResource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApprovalResourceInner> getAsync(String resourceUri, String approvalName) {
        return getWithResponseAsync(resourceUri, approvalName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ApprovalResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ApprovalResourceInner> getWithResponse(String resourceUri, String approvalName, Context context) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, approvalName,
            accept, context);
    }

    /**
     * Get a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ApprovalResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalResourceInner get(String resourceUri, String approvalName) {
        return getWithResponse(resourceUri, approvalName, Context.NONE).getValue();
    }

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceUri, String approvalName,
        ApprovalResourceInner resource) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceUri, approvalName, contentType, accept, resource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceUri, String approvalName,
        ApprovalResourceInner resource) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
            approvalName, contentType, accept, resource, Context.NONE);
    }

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceUri, String approvalName,
        ApprovalResourceInner resource, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
            approvalName, contentType, accept, resource, context);
    }

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ApprovalResourceInner>, ApprovalResourceInner>
        beginCreateOrUpdateAsync(String resourceUri, String approvalName, ApprovalResourceInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceUri, approvalName, resource);
        return this.client.<ApprovalResourceInner, ApprovalResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), ApprovalResourceInner.class, ApprovalResourceInner.class,
            this.client.getContext());
    }

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalResourceInner>, ApprovalResourceInner> beginCreateOrUpdate(String resourceUri,
        String approvalName, ApprovalResourceInner resource) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceUri, approvalName, resource);
        return this.client.<ApprovalResourceInner, ApprovalResourceInner>getLroResult(response,
            ApprovalResourceInner.class, ApprovalResourceInner.class, Context.NONE);
    }

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalResourceInner>, ApprovalResourceInner> beginCreateOrUpdate(String resourceUri,
        String approvalName, ApprovalResourceInner resource, Context context) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceUri, approvalName, resource, context);
        return this.client.<ApprovalResourceInner, ApprovalResourceInner>getLroResult(response,
            ApprovalResourceInner.class, ApprovalResourceInner.class, context);
    }

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApprovalResourceInner> createOrUpdateAsync(String resourceUri, String approvalName,
        ApprovalResourceInner resource) {
        return beginCreateOrUpdateAsync(resourceUri, approvalName, resource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalResourceInner createOrUpdate(String resourceUri, String approvalName,
        ApprovalResourceInner resource) {
        return beginCreateOrUpdate(resourceUri, approvalName, resource).getFinalResult();
    }

    /**
     * Create a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalResourceInner createOrUpdate(String resourceUri, String approvalName, ApprovalResourceInner resource,
        Context context) {
        return beginCreateOrUpdate(resourceUri, approvalName, resource, context).getFinalResult();
    }

    /**
     * List ApprovalResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ApprovalResourceInner>> listByParentSinglePageAsync(String resourceUri) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByParent(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceUri, accept, context))
            .<PagedResponse<ApprovalResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List ApprovalResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ApprovalResourceInner> listByParentAsync(String resourceUri) {
        return new PagedFlux<>(() -> listByParentSinglePageAsync(resourceUri),
            nextLink -> listByParentNextSinglePageAsync(nextLink));
    }

    /**
     * List ApprovalResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ApprovalResourceInner> listByParentSinglePage(String resourceUri) {
        final String accept = "application/json";
        Response<ApprovalResourceListResult> res = service.listByParentSync(this.client.getEndpoint(),
            this.client.getApiVersion(), resourceUri, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List ApprovalResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ApprovalResourceInner> listByParentSinglePage(String resourceUri, Context context) {
        final String accept = "application/json";
        Response<ApprovalResourceListResult> res = service.listByParentSync(this.client.getEndpoint(),
            this.client.getApiVersion(), resourceUri, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List ApprovalResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ApprovalResourceInner> listByParent(String resourceUri) {
        return new PagedIterable<>(() -> listByParentSinglePage(resourceUri),
            nextLink -> listByParentNextSinglePage(nextLink));
    }

    /**
     * List ApprovalResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ApprovalResourceInner> listByParent(String resourceUri, Context context) {
        return new PagedIterable<>(() -> listByParentSinglePage(resourceUri, context),
            nextLink -> listByParentNextSinglePage(nextLink, context));
    }

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceUri, String approvalName,
        ApprovalPatchModel properties) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                approvalName, contentType, accept, properties, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceUri, String approvalName,
        ApprovalPatchModel properties) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, approvalName,
            contentType, accept, properties, Context.NONE);
    }

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceUri, String approvalName,
        ApprovalPatchModel properties, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, approvalName,
            contentType, accept, properties, context);
    }

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ApprovalResourceInner>, ApprovalResourceInner> beginUpdateAsync(String resourceUri,
        String approvalName, ApprovalPatchModel properties) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceUri, approvalName, properties);
        return this.client.<ApprovalResourceInner, ApprovalResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), ApprovalResourceInner.class, ApprovalResourceInner.class,
            this.client.getContext());
    }

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalResourceInner>, ApprovalResourceInner> beginUpdate(String resourceUri,
        String approvalName, ApprovalPatchModel properties) {
        Response<BinaryData> response = updateWithResponse(resourceUri, approvalName, properties);
        return this.client.<ApprovalResourceInner, ApprovalResourceInner>getLroResult(response,
            ApprovalResourceInner.class, ApprovalResourceInner.class, Context.NONE);
    }

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalResourceInner>, ApprovalResourceInner> beginUpdate(String resourceUri,
        String approvalName, ApprovalPatchModel properties, Context context) {
        Response<BinaryData> response = updateWithResponse(resourceUri, approvalName, properties, context);
        return this.client.<ApprovalResourceInner, ApprovalResourceInner>getLroResult(response,
            ApprovalResourceInner.class, ApprovalResourceInner.class, context);
    }

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApprovalResourceInner> updateAsync(String resourceUri, String approvalName,
        ApprovalPatchModel properties) {
        return beginUpdateAsync(resourceUri, approvalName, properties).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalResourceInner update(String resourceUri, String approvalName, ApprovalPatchModel properties) {
        return beginUpdate(resourceUri, approvalName, properties).getFinalResult();
    }

    /**
     * Update a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return approval Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalResourceInner update(String resourceUri, String approvalName, ApprovalPatchModel properties,
        Context context) {
        return beginUpdate(resourceUri, approvalName, properties, context).getFinalResult();
    }

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceUri, String approvalName) {
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
                approvalName, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceUri, String approvalName) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, approvalName,
            Context.NONE);
    }

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceUri, String approvalName, Context context) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri, approvalName,
            context);
    }

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceUri, String approvalName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceUri, approvalName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceUri, String approvalName) {
        Response<BinaryData> response = deleteWithResponse(resourceUri, approvalName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceUri, String approvalName, Context context) {
        Response<BinaryData> response = deleteWithResponse(resourceUri, approvalName, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceUri, String approvalName) {
        return beginDeleteAsync(resourceUri, approvalName).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceUri, String approvalName) {
        beginDelete(resourceUri, approvalName).getFinalResult();
    }

    /**
     * Delete a ApprovalResource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceUri, String approvalName, Context context) {
        beginDelete(resourceUri, approvalName, context).getFinalResult();
    }

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> notifyInitiatorWithResponseAsync(String resourceUri, String approvalName,
        ApprovalActionRequest body) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.notifyInitiator(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceUri, approvalName, contentType, accept, body, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> notifyInitiatorWithResponse(String resourceUri, String approvalName,
        ApprovalActionRequest body) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.notifyInitiatorSync(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
            approvalName, contentType, accept, body, Context.NONE);
    }

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> notifyInitiatorWithResponse(String resourceUri, String approvalName,
        ApprovalActionRequest body, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.notifyInitiatorSync(this.client.getEndpoint(), this.client.getApiVersion(), resourceUri,
            approvalName, contentType, accept, body, context);
    }

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ApprovalActionResponseInner>, ApprovalActionResponseInner>
        beginNotifyInitiatorAsync(String resourceUri, String approvalName, ApprovalActionRequest body) {
        Mono<Response<Flux<ByteBuffer>>> mono = notifyInitiatorWithResponseAsync(resourceUri, approvalName, body);
        return this.client.<ApprovalActionResponseInner, ApprovalActionResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), ApprovalActionResponseInner.class, ApprovalActionResponseInner.class,
            this.client.getContext());
    }

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalActionResponseInner>, ApprovalActionResponseInner>
        beginNotifyInitiator(String resourceUri, String approvalName, ApprovalActionRequest body) {
        Response<BinaryData> response = notifyInitiatorWithResponse(resourceUri, approvalName, body);
        return this.client.<ApprovalActionResponseInner, ApprovalActionResponseInner>getLroResult(response,
            ApprovalActionResponseInner.class, ApprovalActionResponseInner.class, Context.NONE);
    }

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalActionResponseInner>, ApprovalActionResponseInner>
        beginNotifyInitiator(String resourceUri, String approvalName, ApprovalActionRequest body, Context context) {
        Response<BinaryData> response = notifyInitiatorWithResponse(resourceUri, approvalName, body, context);
        return this.client.<ApprovalActionResponseInner, ApprovalActionResponseInner>getLroResult(response,
            ApprovalActionResponseInner.class, ApprovalActionResponseInner.class, context);
    }

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApprovalActionResponseInner> notifyInitiatorAsync(String resourceUri, String approvalName,
        ApprovalActionRequest body) {
        return beginNotifyInitiatorAsync(resourceUri, approvalName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalActionResponseInner notifyInitiator(String resourceUri, String approvalName,
        ApprovalActionRequest body) {
        return beginNotifyInitiator(resourceUri, approvalName, body).getFinalResult();
    }

    /**
     * Upon receiving approval or rejection from approver, this facilitates actions on approval resource.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param approvalName The name of the approvals resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalActionResponseInner notifyInitiator(String resourceUri, String approvalName,
        ApprovalActionRequest body, Context context) {
        return beginNotifyInitiator(resourceUri, approvalName, body, context).getFinalResult();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ApprovalResourceInner>> listByParentNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByParentNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ApprovalResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ApprovalResourceInner> listByParentNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<ApprovalResourceListResult> res
            = service.listByParentNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a ApprovalResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ApprovalResourceInner> listByParentNextSinglePage(String nextLink, Context context) {
        final String accept = "application/json";
        Response<ApprovalResourceListResult> res
            = service.listByParentNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }
}
