// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Enclave Virtual Network Properties.
 */
@Fluent
public final class EnclaveVirtualNetworkModel implements JsonSerializable<EnclaveVirtualNetworkModel> {
    /*
     * Network Name.
     */
    private String networkName;

    /*
     * Network Size.
     */
    private String networkSize;

    /*
     * Custom CIDR Range.
     */
    private String customCidrRange;

    /*
     * Subnet Configurations.
     */
    private List<SubnetConfiguration> subnetConfigurations;

    /*
     * Allow Subnet Communication.
     */
    private Boolean allowSubnetCommunication;

    /**
     * Creates an instance of EnclaveVirtualNetworkModel class.
     */
    public EnclaveVirtualNetworkModel() {
    }

    /**
     * Get the networkName property: Network Name.
     * 
     * @return the networkName value.
     */
    public String networkName() {
        return this.networkName;
    }

    /**
     * Set the networkName property: Network Name.
     * 
     * @param networkName the networkName value to set.
     * @return the EnclaveVirtualNetworkModel object itself.
     */
    public EnclaveVirtualNetworkModel withNetworkName(String networkName) {
        this.networkName = networkName;
        return this;
    }

    /**
     * Get the networkSize property: Network Size.
     * 
     * @return the networkSize value.
     */
    public String networkSize() {
        return this.networkSize;
    }

    /**
     * Set the networkSize property: Network Size.
     * 
     * @param networkSize the networkSize value to set.
     * @return the EnclaveVirtualNetworkModel object itself.
     */
    public EnclaveVirtualNetworkModel withNetworkSize(String networkSize) {
        this.networkSize = networkSize;
        return this;
    }

    /**
     * Get the customCidrRange property: Custom CIDR Range.
     * 
     * @return the customCidrRange value.
     */
    public String customCidrRange() {
        return this.customCidrRange;
    }

    /**
     * Set the customCidrRange property: Custom CIDR Range.
     * 
     * @param customCidrRange the customCidrRange value to set.
     * @return the EnclaveVirtualNetworkModel object itself.
     */
    public EnclaveVirtualNetworkModel withCustomCidrRange(String customCidrRange) {
        this.customCidrRange = customCidrRange;
        return this;
    }

    /**
     * Get the subnetConfigurations property: Subnet Configurations.
     * 
     * @return the subnetConfigurations value.
     */
    public List<SubnetConfiguration> subnetConfigurations() {
        return this.subnetConfigurations;
    }

    /**
     * Set the subnetConfigurations property: Subnet Configurations.
     * 
     * @param subnetConfigurations the subnetConfigurations value to set.
     * @return the EnclaveVirtualNetworkModel object itself.
     */
    public EnclaveVirtualNetworkModel withSubnetConfigurations(List<SubnetConfiguration> subnetConfigurations) {
        this.subnetConfigurations = subnetConfigurations;
        return this;
    }

    /**
     * Get the allowSubnetCommunication property: Allow Subnet Communication.
     * 
     * @return the allowSubnetCommunication value.
     */
    public Boolean allowSubnetCommunication() {
        return this.allowSubnetCommunication;
    }

    /**
     * Set the allowSubnetCommunication property: Allow Subnet Communication.
     * 
     * @param allowSubnetCommunication the allowSubnetCommunication value to set.
     * @return the EnclaveVirtualNetworkModel object itself.
     */
    public EnclaveVirtualNetworkModel withAllowSubnetCommunication(Boolean allowSubnetCommunication) {
        this.allowSubnetCommunication = allowSubnetCommunication;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("networkName", this.networkName);
        jsonWriter.writeStringField("networkSize", this.networkSize);
        jsonWriter.writeStringField("customCidrRange", this.customCidrRange);
        jsonWriter.writeArrayField("subnetConfigurations", this.subnetConfigurations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("allowSubnetCommunication", this.allowSubnetCommunication);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnclaveVirtualNetworkModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnclaveVirtualNetworkModel if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EnclaveVirtualNetworkModel.
     */
    public static EnclaveVirtualNetworkModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnclaveVirtualNetworkModel deserializedEnclaveVirtualNetworkModel = new EnclaveVirtualNetworkModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("networkName".equals(fieldName)) {
                    deserializedEnclaveVirtualNetworkModel.networkName = reader.getString();
                } else if ("networkSize".equals(fieldName)) {
                    deserializedEnclaveVirtualNetworkModel.networkSize = reader.getString();
                } else if ("customCidrRange".equals(fieldName)) {
                    deserializedEnclaveVirtualNetworkModel.customCidrRange = reader.getString();
                } else if ("subnetConfigurations".equals(fieldName)) {
                    List<SubnetConfiguration> subnetConfigurations
                        = reader.readArray(reader1 -> SubnetConfiguration.fromJson(reader1));
                    deserializedEnclaveVirtualNetworkModel.subnetConfigurations = subnetConfigurations;
                } else if ("allowSubnetCommunication".equals(fieldName)) {
                    deserializedEnclaveVirtualNetworkModel.allowSubnetCommunication
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnclaveVirtualNetworkModel;
        });
    }
}
