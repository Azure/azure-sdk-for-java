// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.virtualenclaves.fluent.VirtualEnclavesClient;
import com.azure.resourcemanager.virtualenclaves.fluent.models.ApprovalActionResponseInner;
import com.azure.resourcemanager.virtualenclaves.fluent.models.EnclaveResourceInner;
import com.azure.resourcemanager.virtualenclaves.implementation.models.EnclaveResourceListResult;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalCallbackRequest;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalDeletionCallbackRequest;
import com.azure.resourcemanager.virtualenclaves.models.VirtualEnclavePatchModel;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in VirtualEnclavesClient.
 */
public final class VirtualEnclavesClientImpl implements VirtualEnclavesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final VirtualEnclavesService service;

    /**
     * The service client containing this operation class.
     */
    private final VirtualEnclavesManagementClientImpl client;

    /**
     * Initializes an instance of VirtualEnclavesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    VirtualEnclavesClientImpl(VirtualEnclavesManagementClientImpl client) {
        this.service
            = RestProxy.create(VirtualEnclavesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for VirtualEnclavesManagementClientVirtualEnclaves to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "VirtualEnclavesManagementClientVirtualEnclaves")
    public interface VirtualEnclavesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EnclaveResourceInner>> getByResourceGroup(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<EnclaveResourceInner> getByResourceGroupSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName, @HeaderParam("Accept") String accept,
            Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") EnclaveResourceInner resource,
            Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") EnclaveResourceInner resource,
            Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") VirtualEnclavePatchModel properties,
            Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") VirtualEnclavePatchModel properties,
            Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EnclaveResourceListResult>> listByResourceGroup(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<EnclaveResourceListResult> listByResourceGroupSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EnclaveResourceListResult>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<EnclaveResourceListResult> listSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/handleApprovalCreation")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> handleApprovalCreation(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") ApprovalCallbackRequest body,
            Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/handleApprovalCreation")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> handleApprovalCreationSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") ApprovalCallbackRequest body,
            Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/handleApprovalDeletion")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> handleApprovalDeletion(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") ApprovalDeletionCallbackRequest body,
            Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/handleApprovalDeletion")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> handleApprovalDeletionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("virtualEnclaveName") String virtualEnclaveName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") ApprovalDeletionCallbackRequest body,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EnclaveResourceListResult>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<EnclaveResourceListResult> listByResourceGroupNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<EnclaveResourceListResult>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<EnclaveResourceListResult> listBySubscriptionNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a EnclaveResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<EnclaveResourceInner>> getByResourceGroupWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a EnclaveResource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EnclaveResourceInner> getByResourceGroupAsync(String resourceGroupName, String virtualEnclaveName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, virtualEnclaveName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a EnclaveResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<EnclaveResourceInner> getByResourceGroupWithResponse(String resourceGroupName,
        String virtualEnclaveName, Context context) {
        final String accept = "application/json";
        return service.getByResourceGroupSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, accept, context);
    }

    /**
     * Get a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a EnclaveResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EnclaveResourceInner getByResourceGroup(String resourceGroupName, String virtualEnclaveName) {
        return getByResourceGroupWithResponse(resourceGroupName, virtualEnclaveName, Context.NONE).getValue();
    }

    /**
     * Create a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual Enclave Model Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, EnclaveResourceInner resource) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, contentType, accept, resource,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual Enclave Model Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String virtualEnclaveName,
        EnclaveResourceInner resource) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, contentType, accept, resource,
            Context.NONE);
    }

    /**
     * Create a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual Enclave Model Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String virtualEnclaveName,
        EnclaveResourceInner resource, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, contentType, accept, resource,
            context);
    }

    /**
     * Create a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of virtual Enclave Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<EnclaveResourceInner>, EnclaveResourceInner>
        beginCreateOrUpdateAsync(String resourceGroupName, String virtualEnclaveName, EnclaveResourceInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, virtualEnclaveName, resource);
        return this.client.<EnclaveResourceInner, EnclaveResourceInner>getLroResult(mono, this.client.getHttpPipeline(),
            EnclaveResourceInner.class, EnclaveResourceInner.class, this.client.getContext());
    }

    /**
     * Create a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of virtual Enclave Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<EnclaveResourceInner>, EnclaveResourceInner>
        beginCreateOrUpdate(String resourceGroupName, String virtualEnclaveName, EnclaveResourceInner resource) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, virtualEnclaveName, resource);
        return this.client.<EnclaveResourceInner, EnclaveResourceInner>getLroResult(response,
            EnclaveResourceInner.class, EnclaveResourceInner.class, Context.NONE);
    }

    /**
     * Create a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of virtual Enclave Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<EnclaveResourceInner>, EnclaveResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String virtualEnclaveName, EnclaveResourceInner resource, Context context) {
        Response<BinaryData> response
            = createOrUpdateWithResponse(resourceGroupName, virtualEnclaveName, resource, context);
        return this.client.<EnclaveResourceInner, EnclaveResourceInner>getLroResult(response,
            EnclaveResourceInner.class, EnclaveResourceInner.class, context);
    }

    /**
     * Create a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual Enclave Model Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EnclaveResourceInner> createOrUpdateAsync(String resourceGroupName, String virtualEnclaveName,
        EnclaveResourceInner resource) {
        return beginCreateOrUpdateAsync(resourceGroupName, virtualEnclaveName, resource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual Enclave Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EnclaveResourceInner createOrUpdate(String resourceGroupName, String virtualEnclaveName,
        EnclaveResourceInner resource) {
        return beginCreateOrUpdate(resourceGroupName, virtualEnclaveName, resource).getFinalResult();
    }

    /**
     * Create a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual Enclave Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EnclaveResourceInner createOrUpdate(String resourceGroupName, String virtualEnclaveName,
        EnclaveResourceInner resource, Context context) {
        return beginCreateOrUpdate(resourceGroupName, virtualEnclaveName, resource, context).getFinalResult();
    }

    /**
     * Update a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual Enclave Model Resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, VirtualEnclavePatchModel properties) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, contentType, accept, properties,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual Enclave Model Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String virtualEnclaveName,
        VirtualEnclavePatchModel properties) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, contentType, accept, properties,
            Context.NONE);
    }

    /**
     * Update a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual Enclave Model Resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String virtualEnclaveName,
        VirtualEnclavePatchModel properties, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, contentType, accept, properties,
            context);
    }

    /**
     * Update a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of virtual Enclave Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<EnclaveResourceInner>, EnclaveResourceInner>
        beginUpdateAsync(String resourceGroupName, String virtualEnclaveName, VirtualEnclavePatchModel properties) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, virtualEnclaveName, properties);
        return this.client.<EnclaveResourceInner, EnclaveResourceInner>getLroResult(mono, this.client.getHttpPipeline(),
            EnclaveResourceInner.class, EnclaveResourceInner.class, this.client.getContext());
    }

    /**
     * Update a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of virtual Enclave Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<EnclaveResourceInner>, EnclaveResourceInner> beginUpdate(String resourceGroupName,
        String virtualEnclaveName, VirtualEnclavePatchModel properties) {
        Response<BinaryData> response = updateWithResponse(resourceGroupName, virtualEnclaveName, properties);
        return this.client.<EnclaveResourceInner, EnclaveResourceInner>getLroResult(response,
            EnclaveResourceInner.class, EnclaveResourceInner.class, Context.NONE);
    }

    /**
     * Update a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of virtual Enclave Model Resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<EnclaveResourceInner>, EnclaveResourceInner> beginUpdate(String resourceGroupName,
        String virtualEnclaveName, VirtualEnclavePatchModel properties, Context context) {
        Response<BinaryData> response = updateWithResponse(resourceGroupName, virtualEnclaveName, properties, context);
        return this.client.<EnclaveResourceInner, EnclaveResourceInner>getLroResult(response,
            EnclaveResourceInner.class, EnclaveResourceInner.class, context);
    }

    /**
     * Update a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual Enclave Model Resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<EnclaveResourceInner> updateAsync(String resourceGroupName, String virtualEnclaveName,
        VirtualEnclavePatchModel properties) {
        return beginUpdateAsync(resourceGroupName, virtualEnclaveName, properties).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual Enclave Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EnclaveResourceInner update(String resourceGroupName, String virtualEnclaveName,
        VirtualEnclavePatchModel properties) {
        return beginUpdate(resourceGroupName, virtualEnclaveName, properties).getFinalResult();
    }

    /**
     * Update a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return virtual Enclave Model Resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public EnclaveResourceInner update(String resourceGroupName, String virtualEnclaveName,
        VirtualEnclavePatchModel properties, Context context) {
        return beginUpdate(resourceGroupName, virtualEnclaveName, properties, context).getFinalResult();
    }

    /**
     * Delete a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName) {
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String virtualEnclaveName) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, Context.NONE);
    }

    /**
     * Delete a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String virtualEnclaveName,
        Context context) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, context);
    }

    /**
     * Delete a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String virtualEnclaveName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, virtualEnclaveName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String virtualEnclaveName) {
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, virtualEnclaveName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String virtualEnclaveName,
        Context context) {
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, virtualEnclaveName, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Delete a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String virtualEnclaveName) {
        return beginDeleteAsync(resourceGroupName, virtualEnclaveName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String virtualEnclaveName) {
        beginDelete(resourceGroupName, virtualEnclaveName).getFinalResult();
    }

    /**
     * Delete a EnclaveResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String virtualEnclaveName, Context context) {
        beginDelete(resourceGroupName, virtualEnclaveName, context).getFinalResult();
    }

    /**
     * List EnclaveResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EnclaveResourceInner>> listByResourceGroupSinglePageAsync(String resourceGroupName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, accept, context))
            .<PagedResponse<EnclaveResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List EnclaveResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EnclaveResourceInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * List EnclaveResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EnclaveResourceInner> listByResourceGroupSinglePage(String resourceGroupName) {
        final String accept = "application/json";
        Response<EnclaveResourceListResult> res = service.listByResourceGroupSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List EnclaveResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EnclaveResourceInner> listByResourceGroupSinglePage(String resourceGroupName,
        Context context) {
        final String accept = "application/json";
        Response<EnclaveResourceListResult> res = service.listByResourceGroupSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List EnclaveResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EnclaveResourceInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(() -> listByResourceGroupSinglePage(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePage(nextLink));
    }

    /**
     * List EnclaveResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EnclaveResourceInner> listByResourceGroup(String resourceGroupName, Context context) {
        return new PagedIterable<>(() -> listByResourceGroupSinglePage(resourceGroupName, context),
            nextLink -> listByResourceGroupNextSinglePage(nextLink, context));
    }

    /**
     * List EnclaveResource resources by subscription ID.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EnclaveResourceInner>> listSinglePageAsync() {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), accept, context))
            .<PagedResponse<EnclaveResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List EnclaveResource resources by subscription ID.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<EnclaveResourceInner> listAsync() {
        return new PagedFlux<>(() -> listSinglePageAsync(),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * List EnclaveResource resources by subscription ID.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EnclaveResourceInner> listSinglePage() {
        final String accept = "application/json";
        Response<EnclaveResourceListResult> res = service.listSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List EnclaveResource resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EnclaveResourceInner> listSinglePage(Context context) {
        final String accept = "application/json";
        Response<EnclaveResourceListResult> res = service.listSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List EnclaveResource resources by subscription ID.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EnclaveResourceInner> list() {
        return new PagedIterable<>(() -> listSinglePage(), nextLink -> listBySubscriptionNextSinglePage(nextLink));
    }

    /**
     * List EnclaveResource resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<EnclaveResourceInner> list(Context context) {
        return new PagedIterable<>(() -> listSinglePage(context),
            nextLink -> listBySubscriptionNextSinglePage(nextLink, context));
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> handleApprovalCreationWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, ApprovalCallbackRequest body) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.handleApprovalCreation(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName,
                contentType, accept, body, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> handleApprovalCreationWithResponse(String resourceGroupName, String virtualEnclaveName,
        ApprovalCallbackRequest body) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.handleApprovalCreationSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, contentType, accept, body,
            Context.NONE);
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> handleApprovalCreationWithResponse(String resourceGroupName, String virtualEnclaveName,
        ApprovalCallbackRequest body, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.handleApprovalCreationSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, contentType, accept, body, context);
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ApprovalActionResponseInner>, ApprovalActionResponseInner>
        beginHandleApprovalCreationAsync(String resourceGroupName, String virtualEnclaveName,
            ApprovalCallbackRequest body) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = handleApprovalCreationWithResponseAsync(resourceGroupName, virtualEnclaveName, body);
        return this.client.<ApprovalActionResponseInner, ApprovalActionResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), ApprovalActionResponseInner.class, ApprovalActionResponseInner.class,
            this.client.getContext());
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalActionResponseInner>, ApprovalActionResponseInner>
        beginHandleApprovalCreation(String resourceGroupName, String virtualEnclaveName, ApprovalCallbackRequest body) {
        Response<BinaryData> response = handleApprovalCreationWithResponse(resourceGroupName, virtualEnclaveName, body);
        return this.client.<ApprovalActionResponseInner, ApprovalActionResponseInner>getLroResult(response,
            ApprovalActionResponseInner.class, ApprovalActionResponseInner.class, Context.NONE);
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalActionResponseInner>, ApprovalActionResponseInner> beginHandleApprovalCreation(
        String resourceGroupName, String virtualEnclaveName, ApprovalCallbackRequest body, Context context) {
        Response<BinaryData> response
            = handleApprovalCreationWithResponse(resourceGroupName, virtualEnclaveName, body, context);
        return this.client.<ApprovalActionResponseInner, ApprovalActionResponseInner>getLroResult(response,
            ApprovalActionResponseInner.class, ApprovalActionResponseInner.class, context);
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApprovalActionResponseInner> handleApprovalCreationAsync(String resourceGroupName,
        String virtualEnclaveName, ApprovalCallbackRequest body) {
        return beginHandleApprovalCreationAsync(resourceGroupName, virtualEnclaveName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalActionResponseInner handleApprovalCreation(String resourceGroupName, String virtualEnclaveName,
        ApprovalCallbackRequest body) {
        return beginHandleApprovalCreation(resourceGroupName, virtualEnclaveName, body).getFinalResult();
    }

    /**
     * Callback that triggers on approval state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalActionResponseInner handleApprovalCreation(String resourceGroupName, String virtualEnclaveName,
        ApprovalCallbackRequest body, Context context) {
        return beginHandleApprovalCreation(resourceGroupName, virtualEnclaveName, body, context).getFinalResult();
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> handleApprovalDeletionWithResponseAsync(String resourceGroupName,
        String virtualEnclaveName, ApprovalDeletionCallbackRequest body) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.handleApprovalDeletion(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName,
                contentType, accept, body, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> handleApprovalDeletionWithResponse(String resourceGroupName, String virtualEnclaveName,
        ApprovalDeletionCallbackRequest body) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.handleApprovalDeletionSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, contentType, accept, body,
            Context.NONE);
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> handleApprovalDeletionWithResponse(String resourceGroupName, String virtualEnclaveName,
        ApprovalDeletionCallbackRequest body, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.handleApprovalDeletionSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, virtualEnclaveName, contentType, accept, body, context);
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ApprovalActionResponseInner>, ApprovalActionResponseInner>
        beginHandleApprovalDeletionAsync(String resourceGroupName, String virtualEnclaveName,
            ApprovalDeletionCallbackRequest body) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = handleApprovalDeletionWithResponseAsync(resourceGroupName, virtualEnclaveName, body);
        return this.client.<ApprovalActionResponseInner, ApprovalActionResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), ApprovalActionResponseInner.class, ApprovalActionResponseInner.class,
            this.client.getContext());
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalActionResponseInner>, ApprovalActionResponseInner> beginHandleApprovalDeletion(
        String resourceGroupName, String virtualEnclaveName, ApprovalDeletionCallbackRequest body) {
        Response<BinaryData> response = handleApprovalDeletionWithResponse(resourceGroupName, virtualEnclaveName, body);
        return this.client.<ApprovalActionResponseInner, ApprovalActionResponseInner>getLroResult(response,
            ApprovalActionResponseInner.class, ApprovalActionResponseInner.class, Context.NONE);
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApprovalActionResponseInner>, ApprovalActionResponseInner> beginHandleApprovalDeletion(
        String resourceGroupName, String virtualEnclaveName, ApprovalDeletionCallbackRequest body, Context context) {
        Response<BinaryData> response
            = handleApprovalDeletionWithResponse(resourceGroupName, virtualEnclaveName, body, context);
        return this.client.<ApprovalActionResponseInner, ApprovalActionResponseInner>getLroResult(response,
            ApprovalActionResponseInner.class, ApprovalActionResponseInner.class, context);
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApprovalActionResponseInner> handleApprovalDeletionAsync(String resourceGroupName,
        String virtualEnclaveName, ApprovalDeletionCallbackRequest body) {
        return beginHandleApprovalDeletionAsync(resourceGroupName, virtualEnclaveName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalActionResponseInner handleApprovalDeletion(String resourceGroupName, String virtualEnclaveName,
        ApprovalDeletionCallbackRequest body) {
        return beginHandleApprovalDeletion(resourceGroupName, virtualEnclaveName, body).getFinalResult();
    }

    /**
     * Callback that triggers on approval deletion state change.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param virtualEnclaveName The name of the enclaveResource Resource.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApprovalActionResponseInner handleApprovalDeletion(String resourceGroupName, String virtualEnclaveName,
        ApprovalDeletionCallbackRequest body, Context context) {
        return beginHandleApprovalDeletion(resourceGroupName, virtualEnclaveName, body, context).getFinalResult();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EnclaveResourceInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<EnclaveResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EnclaveResourceInner> listByResourceGroupNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<EnclaveResourceListResult> res
            = service.listByResourceGroupNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EnclaveResourceInner> listByResourceGroupNextSinglePage(String nextLink, Context context) {
        final String accept = "application/json";
        Response<EnclaveResourceListResult> res
            = service.listByResourceGroupNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<EnclaveResourceInner>> listBySubscriptionNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<EnclaveResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EnclaveResourceInner> listBySubscriptionNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<EnclaveResourceListResult> res
            = service.listBySubscriptionNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a EnclaveResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<EnclaveResourceInner> listBySubscriptionNextSinglePage(String nextLink, Context context) {
        final String accept = "application/json";
        Response<EnclaveResourceListResult> res
            = service.listBySubscriptionNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }
}
