// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.virtualenclaves.fluent.CommunityEndpointsClient;
import com.azure.resourcemanager.virtualenclaves.fluent.models.ApprovalActionResponseInner;
import com.azure.resourcemanager.virtualenclaves.fluent.models.CommunityEndpointResourceInner;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalActionResponse;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalCallbackRequest;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalDeletionCallbackRequest;
import com.azure.resourcemanager.virtualenclaves.models.CommunityEndpointResource;
import com.azure.resourcemanager.virtualenclaves.models.CommunityEndpoints;

public final class CommunityEndpointsImpl implements CommunityEndpoints {
    private static final ClientLogger LOGGER = new ClientLogger(CommunityEndpointsImpl.class);

    private final CommunityEndpointsClient innerClient;

    private final com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager serviceManager;

    public CommunityEndpointsImpl(CommunityEndpointsClient innerClient,
        com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<CommunityEndpointResource> getWithResponse(String resourceGroupName, String communityName,
        String communityEndpointName, Context context) {
        Response<CommunityEndpointResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, communityName, communityEndpointName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CommunityEndpointResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CommunityEndpointResource get(String resourceGroupName, String communityName, String communityEndpointName) {
        CommunityEndpointResourceInner inner
            = this.serviceClient().get(resourceGroupName, communityName, communityEndpointName);
        if (inner != null) {
            return new CommunityEndpointResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String communityName, String communityEndpointName) {
        this.serviceClient().delete(resourceGroupName, communityName, communityEndpointName);
    }

    public void delete(String resourceGroupName, String communityName, String communityEndpointName, Context context) {
        this.serviceClient().delete(resourceGroupName, communityName, communityEndpointName, context);
    }

    public PagedIterable<CommunityEndpointResource> listByCommunityResource(String resourceGroupName,
        String communityName) {
        PagedIterable<CommunityEndpointResourceInner> inner
            = this.serviceClient().listByCommunityResource(resourceGroupName, communityName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CommunityEndpointResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<CommunityEndpointResource> listByCommunityResource(String resourceGroupName,
        String communityName, Context context) {
        PagedIterable<CommunityEndpointResourceInner> inner
            = this.serviceClient().listByCommunityResource(resourceGroupName, communityName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CommunityEndpointResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<CommunityEndpointResource> listBySubscription(String communityName) {
        PagedIterable<CommunityEndpointResourceInner> inner = this.serviceClient().listBySubscription(communityName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CommunityEndpointResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<CommunityEndpointResource> listBySubscription(String communityName, Context context) {
        PagedIterable<CommunityEndpointResourceInner> inner
            = this.serviceClient().listBySubscription(communityName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new CommunityEndpointResourceImpl(inner1, this.manager()));
    }

    public ApprovalActionResponse handleApprovalCreation(String resourceGroupName, String communityName,
        String communityEndpointName, ApprovalCallbackRequest body) {
        ApprovalActionResponseInner inner = this.serviceClient()
            .handleApprovalCreation(resourceGroupName, communityName, communityEndpointName, body);
        if (inner != null) {
            return new ApprovalActionResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ApprovalActionResponse handleApprovalCreation(String resourceGroupName, String communityName,
        String communityEndpointName, ApprovalCallbackRequest body, Context context) {
        ApprovalActionResponseInner inner = this.serviceClient()
            .handleApprovalCreation(resourceGroupName, communityName, communityEndpointName, body, context);
        if (inner != null) {
            return new ApprovalActionResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ApprovalActionResponse handleApprovalDeletion(String resourceGroupName, String communityName,
        String communityEndpointName, ApprovalDeletionCallbackRequest body) {
        ApprovalActionResponseInner inner = this.serviceClient()
            .handleApprovalDeletion(resourceGroupName, communityName, communityEndpointName, body);
        if (inner != null) {
            return new ApprovalActionResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ApprovalActionResponse handleApprovalDeletion(String resourceGroupName, String communityName,
        String communityEndpointName, ApprovalDeletionCallbackRequest body, Context context) {
        ApprovalActionResponseInner inner = this.serviceClient()
            .handleApprovalDeletion(resourceGroupName, communityName, communityEndpointName, body, context);
        if (inner != null) {
            return new ApprovalActionResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CommunityEndpointResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String communityName = ResourceManagerUtils.getValueFromIdByName(id, "communities");
        if (communityName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'communities'.", id)));
        }
        String communityEndpointName = ResourceManagerUtils.getValueFromIdByName(id, "communityEndpoints");
        if (communityEndpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'communityEndpoints'.", id)));
        }
        return this.getWithResponse(resourceGroupName, communityName, communityEndpointName, Context.NONE).getValue();
    }

    public Response<CommunityEndpointResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String communityName = ResourceManagerUtils.getValueFromIdByName(id, "communities");
        if (communityName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'communities'.", id)));
        }
        String communityEndpointName = ResourceManagerUtils.getValueFromIdByName(id, "communityEndpoints");
        if (communityEndpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'communityEndpoints'.", id)));
        }
        return this.getWithResponse(resourceGroupName, communityName, communityEndpointName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String communityName = ResourceManagerUtils.getValueFromIdByName(id, "communities");
        if (communityName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'communities'.", id)));
        }
        String communityEndpointName = ResourceManagerUtils.getValueFromIdByName(id, "communityEndpoints");
        if (communityEndpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'communityEndpoints'.", id)));
        }
        this.delete(resourceGroupName, communityName, communityEndpointName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String communityName = ResourceManagerUtils.getValueFromIdByName(id, "communities");
        if (communityName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'communities'.", id)));
        }
        String communityEndpointName = ResourceManagerUtils.getValueFromIdByName(id, "communityEndpoints");
        if (communityEndpointName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'communityEndpoints'.", id)));
        }
        this.delete(resourceGroupName, communityName, communityEndpointName, context);
    }

    private CommunityEndpointsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager manager() {
        return this.serviceManager;
    }

    public CommunityEndpointResourceImpl define(String name) {
        return new CommunityEndpointResourceImpl(name, this.manager());
    }
}
