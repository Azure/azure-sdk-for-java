// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.resourcemanager.virtualenclaves.models.CommunityEndpointDestinationRule;
import com.azure.resourcemanager.virtualenclaves.models.CommunityEndpointPatchProperties;
import com.azure.resourcemanager.virtualenclaves.models.CommunityEndpointProtocol;
import com.azure.resourcemanager.virtualenclaves.models.CommunityEndpointResource;
import com.azure.resourcemanager.virtualenclaves.models.DestinationType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for CommunityEndpoints Update.
 */
public final class CommunityEndpointsUpdateSamples {
    /*
     * x-ms-original-file: 2025-05-01-preview/CommunityEndpoints_Update.json
     */
    /**
     * Sample code: CommunityEndpoints_Update.
     * 
     * @param manager Entry point to VirtualEnclavesManager.
     */
    public static void
        communityEndpointsUpdate(com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager manager) {
        CommunityEndpointResource resource = manager.communityEndpoints()
            .getWithResponse("rgopenapi", "TestMyCommunity", "TestMyCommunityEndpoint",
                com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withTags(mapOf("sampletag", "samplevalue"))
            .withProperties(new CommunityEndpointPatchProperties().withRuleCollection(
                Arrays.asList(new CommunityEndpointDestinationRule().withDestinationType(DestinationType.FQDN)
                    .withProtocols(Arrays.asList(CommunityEndpointProtocol.TCP))
                    .withTransitHubResourceId(
                        "/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/testrg/providers/Microsoft.Mission/communities/TestMyCommunity/transitHubs/TestThName")
                    .withDestination("foo.example.com")
                    .withPorts("443"))))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
