// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.resourcemanager.virtualenclaves.models.ActionPerformed;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalProperties;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalStatus;
import com.azure.resourcemanager.virtualenclaves.models.Approver;
import com.azure.resourcemanager.virtualenclaves.models.RequestMetadata;
import java.time.OffsetDateTime;
import java.util.Arrays;

/**
 * Samples for Approval CreateOrUpdate.
 */
public final class ApprovalCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2025-05-01-preview/Approvals_CreateOrUpdate.json
     */
    /**
     * Sample code: Approval_CreateOrUpdate.
     * 
     * @param manager Entry point to VirtualEnclavesManager.
     */
    public static void
        approvalCreateOrUpdate(com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager manager) {
        manager.approvals()
            .define("TestApprovals")
            .withExistingResourceUri(
                "subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.Mission/enclaveconnections/TestMyEnclaveConnection")
            .withProperties(new ApprovalProperties().withParentResourceId(
                "/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/microsoft.mission/virtualenclaves/TestMyEnclave")
                .withGrandparentResourceId(
                    "/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/testrg/providers/Microsoft.Mission/communities/TestMyCommunity")
                .withApprovers(Arrays.asList(new Approver().withApproverEntraId("00000000-0000-0000-0000-000000000000")
                    .withActionPerformed(ActionPerformed.APPROVED)
                    .withLastUpdatedAt(OffsetDateTime.parse("2023-03-17T20:43:17.760Z"))))
                .withTicketId("string")
                .withCreatedAt(OffsetDateTime.parse("2023-03-17T20:43:17.760Z"))
                .withStateChangedAt(OffsetDateTime.parse("2023-03-17T20:43:17.760Z"))
                .withRequestMetadata(new RequestMetadata().withResourceAction("string")
                    .withApprovalCallbackRoute("approvalCallback")
                    .withApprovalCallbackPayload("{\n  \"key1\": \"value1\",\n  \"key2\": \"value2\"\n}")
                    .withApprovalStatus(ApprovalStatus.APPROVED)))
            .create();
    }
}
