// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.resourcemanager.virtualenclaves.models.ApprovalPolicy;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalSettings;
import com.azure.resourcemanager.virtualenclaves.models.CommunityProperties;
import com.azure.resourcemanager.virtualenclaves.models.FirewallSKU;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItem;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemEnforcement;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemOption;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemPolicyAction;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModel;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelJustification;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelMode;
import com.azure.resourcemanager.virtualenclaves.models.ManagedServiceIdentity;
import com.azure.resourcemanager.virtualenclaves.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.virtualenclaves.models.MandatoryApprover;
import com.azure.resourcemanager.virtualenclaves.models.Principal;
import com.azure.resourcemanager.virtualenclaves.models.PrincipalType;
import com.azure.resourcemanager.virtualenclaves.models.RoleAssignmentItem;
import com.azure.resourcemanager.virtualenclaves.models.ServiceIdentifier;
import com.azure.resourcemanager.virtualenclaves.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Community CreateOrUpdate.
 */
public final class CommunityCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2025-05-01-preview/Community_CreateOrUpdate.json
     */
    /**
     * Sample code: Community_CreateOrUpdate.
     * 
     * @param manager Entry point to VirtualEnclavesManager.
     */
    public static void
        communityCreateOrUpdate(com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager manager) {
        manager.communities()
            .define("TestMyCommunity")
            .withRegion("westcentralus")
            .withExistingResourceGroup("rgopenapi")
            .withTags(mapOf("sampletag", "samplevalue"))
            .withProperties(new CommunityProperties().withAddressSpace("10.0.0.0/24")
                .withDnsServers(Arrays.asList("azure.net"))
                .withGovernedServiceList(Arrays.asList(
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.AKS)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.NONE),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.APP_SERVICE)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.NONE),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.CONTAINER_REGISTRY)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.NONE),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.COSMOS_DB)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.NONE),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.KEY_VAULT)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.NONE),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.MICROSOFT_SQL)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.NONE),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.MONITORING)
                        .withOption(GovernedServiceItemOption.fromString("Not Applicable"))
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.NONE),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.POSTGRE_SQL)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.NONE),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.SERVICE_BUS)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.NONE),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.STORAGE)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.NONE),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.AZURE_FIREWALLS)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.NONE),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.INSIGHTS)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.NONE),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.LOGIC)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.NONE),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.PRIVATE_DNSZONES)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.NONE),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.DATA_CONNECTORS)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.NONE)))
                .withCommunityRoleAssignments(Arrays.asList(new RoleAssignmentItem()
                    .withRoleDefinitionId("b24988ac-6180-42a0-ab88-20f7382dd24c")
                    .withPrincipals(Arrays.asList(
                        new Principal().withId("01234567-89ab-ef01-2345-0123456789ab").withType(PrincipalType.GROUP),
                        new Principal().withId("355a6bb0-abc0-4cba-000d-12a345b678c0").withType(PrincipalType.USER))),
                    new RoleAssignmentItem().withRoleDefinitionId("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9")
                        .withPrincipals(Arrays.asList(new Principal().withId("355a6bb0-abc0-4cba-000d-12a345b678c9")
                            .withType(PrincipalType.USER)))))
                .withFirewallSku(FirewallSKU.STANDARD)
                .withApprovalSettings(new ApprovalSettings().withEndpointCreation(ApprovalPolicy.NOT_REQUIRED)
                    .withEndpointUpdate(ApprovalPolicy.REQUIRED)
                    .withEndpointDeletion(ApprovalPolicy.NOT_REQUIRED)
                    .withConnectionCreation(ApprovalPolicy.REQUIRED)
                    .withConnectionUpdate(ApprovalPolicy.REQUIRED)
                    .withConnectionDeletion(ApprovalPolicy.NOT_REQUIRED)
                    .withEnclaveCreation(ApprovalPolicy.NOT_REQUIRED)
                    .withEnclaveDeletion(ApprovalPolicy.NOT_REQUIRED)
                    .withMaintenanceMode(ApprovalPolicy.NOT_REQUIRED)
                    .withServiceCatalogDeployment(ApprovalPolicy.NOT_REQUIRED)
                    .withNotificationOnApprovalCreation(ApprovalPolicy.NOT_REQUIRED)
                    .withNotificationOnApprovalAction(ApprovalPolicy.NOT_REQUIRED)
                    .withNotificationOnApprovalDeletion(ApprovalPolicy.NOT_REQUIRED)
                    .withMandatoryApprovers(Arrays
                        .asList(new MandatoryApprover().withApproverEntraId("00000000-0000-0000-0000-000000000000")))
                    .withMinimumApproversRequired(0L))
                .withMaintenanceModeConfiguration(new MaintenanceModeConfigurationModel()
                    .withMode(MaintenanceModeConfigurationModelMode.OFF)
                    .withPrincipals(Arrays.asList(
                        new Principal().withId("355a6bb0-abc0-4cba-000d-12a345b678c9").withType(PrincipalType.USER)))
                    .withJustification(MaintenanceModeConfigurationModelJustification.OFF)))
            .withIdentity(new ManagedServiceIdentity()
                .withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf(
                    "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1",
                    new UserAssignedIdentity())))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
