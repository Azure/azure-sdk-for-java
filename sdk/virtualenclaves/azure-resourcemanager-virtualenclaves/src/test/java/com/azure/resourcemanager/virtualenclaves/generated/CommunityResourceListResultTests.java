// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.virtualenclaves.implementation.models.CommunityResourceListResult;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalPolicy;
import com.azure.resourcemanager.virtualenclaves.models.CommunityPropertiesPolicyOverride;
import com.azure.resourcemanager.virtualenclaves.models.FirewallSKU;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemEnforcement;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemOption;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemPolicyAction;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelJustification;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelMode;
import com.azure.resourcemanager.virtualenclaves.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.virtualenclaves.models.PrincipalType;
import com.azure.resourcemanager.virtualenclaves.models.ServiceIdentifier;
import org.junit.jupiter.api.Assertions;

public final class CommunityResourceListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CommunityResourceListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"addressSpace\":\"kgjubgdknnqvsazn\",\"dnsServers\":[\"orudsgsa\"],\"provisioningState\":\"Updating\",\"resourceCollection\":[\"grauwjuetaebur\"],\"managedResourceGroupName\":\"dmovsm\",\"managedOnBehalfOfConfiguration\":{\"moboBrokerResources\":[{}]},\"governedServiceList\":[{\"serviceId\":\"AKS\",\"serviceName\":\"oefki\",\"option\":\"ExceptionOnly\",\"enforcement\":\"Disabled\",\"policyAction\":\"AuditOnly\",\"initiatives\":[\"mqlgk\",\"btndo\"]}],\"policyOverride\":\"Enclave\",\"communityRoleAssignments\":[{\"roleDefinitionId\":\"jcntuj\",\"principals\":[{\"id\":\"jed\",\"type\":\"User\"}]},{\"roleDefinitionId\":\"wwa\",\"principals\":[{\"id\":\"ojvdcpzfoqo\",\"type\":\"ServicePrincipal\"},{\"id\":\"cybxa\",\"type\":\"Group\"}]},{\"roleDefinitionId\":\"gszufoxciqopid\",\"principals\":[{\"id\":\"ciodhkhaz\",\"type\":\"Group\"},{\"id\":\"hnzbonl\",\"type\":\"User\"},{\"id\":\"toego\",\"type\":\"User\"},{\"id\":\"wbw\",\"type\":\"ServicePrincipal\"}]}],\"firewallSku\":\"Basic\",\"approvalSettings\":{\"endpointCreation\":\"Required\",\"endpointUpdate\":\"NotRequired\",\"endpointDeletion\":\"NotRequired\",\"connectionCreation\":\"Required\",\"connectionUpdate\":\"Required\",\"connectionDeletion\":\"NotRequired\",\"enclaveCreation\":\"NotRequired\",\"enclaveDeletion\":\"Required\",\"maintenanceMode\":\"Required\",\"serviceCatalogDeployment\":\"NotRequired\",\"notificationOnApprovalCreation\":\"NotRequired\",\"notificationOnApprovalAction\":\"Required\",\"notificationOnApprovalDeletion\":\"Required\",\"mandatoryApprovers\":[{\"approverEntraId\":\"guxawqaldsyuuxi\"},{\"approverEntraId\":\"erqf\"},{\"approverEntraId\":\"bw\"}],\"minimumApproversRequired\":3779692403616997891},\"maintenanceModeConfiguration\":{\"mode\":\"CanNotDelete\",\"principals\":[{\"id\":\"t\",\"type\":\"Group\"},{\"id\":\"fhpagmhrskdsnf\",\"type\":\"ServicePrincipal\"}],\"justification\":\"Governance\"}},\"identity\":{\"principalId\":\"gtdlmk\",\"tenantId\":\"evdlh\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"akufgmjz\":{\"principalId\":\"dsttwvo\",\"clientId\":\"bbejdcngqqm\"},\"nrfdw\":{\"principalId\":\"rdgrtw\",\"clientId\":\"nuuzkopbm\"}}},\"location\":\"uhhziuiefozbhdm\",\"tags\":{\"hxicslfaoqz\":\"mzqhoftrmaequi\"},\"id\":\"iyylhalnswhccsp\",\"name\":\"kaivwit\",\"type\":\"scywuggwoluhc\"}],\"nextLink\":\"wem\"}")
            .toObject(CommunityResourceListResult.class);
        Assertions.assertEquals("uhhziuiefozbhdm", model.value().get(0).location());
        Assertions.assertEquals("mzqhoftrmaequi", model.value().get(0).tags().get("hxicslfaoqz"));
        Assertions.assertEquals("kgjubgdknnqvsazn", model.value().get(0).properties().addressSpace());
        Assertions.assertEquals("orudsgsa", model.value().get(0).properties().dnsServers().get(0));
        Assertions.assertEquals(ServiceIdentifier.AKS,
            model.value().get(0).properties().governedServiceList().get(0).serviceId());
        Assertions.assertEquals(GovernedServiceItemOption.EXCEPTION_ONLY,
            model.value().get(0).properties().governedServiceList().get(0).option());
        Assertions.assertEquals(GovernedServiceItemEnforcement.DISABLED,
            model.value().get(0).properties().governedServiceList().get(0).enforcement());
        Assertions.assertEquals(GovernedServiceItemPolicyAction.AUDIT_ONLY,
            model.value().get(0).properties().governedServiceList().get(0).policyAction());
        Assertions.assertEquals(CommunityPropertiesPolicyOverride.ENCLAVE,
            model.value().get(0).properties().policyOverride());
        Assertions.assertEquals("jcntuj",
            model.value().get(0).properties().communityRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("jed",
            model.value().get(0).properties().communityRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.USER,
            model.value().get(0).properties().communityRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals(FirewallSKU.BASIC, model.value().get(0).properties().firewallSku());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            model.value().get(0).properties().approvalSettings().endpointCreation());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            model.value().get(0).properties().approvalSettings().endpointUpdate());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            model.value().get(0).properties().approvalSettings().endpointDeletion());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            model.value().get(0).properties().approvalSettings().connectionCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            model.value().get(0).properties().approvalSettings().connectionUpdate());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            model.value().get(0).properties().approvalSettings().connectionDeletion());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            model.value().get(0).properties().approvalSettings().enclaveCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            model.value().get(0).properties().approvalSettings().enclaveDeletion());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            model.value().get(0).properties().approvalSettings().maintenanceMode());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            model.value().get(0).properties().approvalSettings().serviceCatalogDeployment());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            model.value().get(0).properties().approvalSettings().notificationOnApprovalCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            model.value().get(0).properties().approvalSettings().notificationOnApprovalAction());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            model.value().get(0).properties().approvalSettings().notificationOnApprovalDeletion());
        Assertions.assertEquals("guxawqaldsyuuxi",
            model.value().get(0).properties().approvalSettings().mandatoryApprovers().get(0).approverEntraId());
        Assertions.assertEquals(3779692403616997891L,
            model.value().get(0).properties().approvalSettings().minimumApproversRequired());
        Assertions.assertEquals(MaintenanceModeConfigurationModelMode.CAN_NOT_DELETE,
            model.value().get(0).properties().maintenanceModeConfiguration().mode());
        Assertions.assertEquals("t",
            model.value().get(0).properties().maintenanceModeConfiguration().principals().get(0).id());
        Assertions.assertEquals(PrincipalType.GROUP,
            model.value().get(0).properties().maintenanceModeConfiguration().principals().get(0).type());
        Assertions.assertEquals(MaintenanceModeConfigurationModelJustification.GOVERNANCE,
            model.value().get(0).properties().maintenanceModeConfiguration().justification());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            model.value().get(0).identity().type());
        Assertions.assertEquals("wem", model.nextLink());
    }
}
