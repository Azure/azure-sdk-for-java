// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalSettingsPatchProperties;
import com.azure.resourcemanager.virtualenclaves.models.CommunityPatchModel;
import com.azure.resourcemanager.virtualenclaves.models.CommunityPatchProperties;
import com.azure.resourcemanager.virtualenclaves.models.CommunityPropertiesPolicyOverride;
import com.azure.resourcemanager.virtualenclaves.models.FirewallSKU;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItem;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemEnforcement;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemOption;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemPolicyAction;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelJustification;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelMode;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationPatchModel;
import com.azure.resourcemanager.virtualenclaves.models.ManagedServiceIdentity;
import com.azure.resourcemanager.virtualenclaves.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.virtualenclaves.models.MandatoryApprover;
import com.azure.resourcemanager.virtualenclaves.models.Principal;
import com.azure.resourcemanager.virtualenclaves.models.PrincipalType;
import com.azure.resourcemanager.virtualenclaves.models.RoleAssignmentItem;
import com.azure.resourcemanager.virtualenclaves.models.ServiceIdentifier;
import com.azure.resourcemanager.virtualenclaves.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CommunityPatchModelTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CommunityPatchModel model = BinaryData.fromString(
            "{\"properties\":{\"dnsServers\":[\"dsytgadgvr\",\"ea\",\"neqn\"],\"governedServiceList\":[{\"serviceId\":\"AKS\",\"serviceName\":\"lquuijfqkacewii\",\"option\":\"Deny\",\"enforcement\":\"Disabled\",\"policyAction\":\"AuditOnly\",\"initiatives\":[\"wifto\",\"qkvpuvksgplsakn\",\"n\",\"synljphuopxodl\"]},{\"serviceId\":\"Logic\",\"serviceName\":\"ntorzihleosjswsr\",\"option\":\"NotApplicable\",\"enforcement\":\"Enabled\",\"policyAction\":\"AuditOnly\",\"initiatives\":[\"c\",\"ckqqzqioxiysui\",\"zynkedya\"]},{\"serviceId\":\"Storage\",\"serviceName\":\"yhqmibzyhwi\",\"option\":\"ExceptionOnly\",\"enforcement\":\"Enabled\",\"policyAction\":\"Enforce\",\"initiatives\":[\"cdpu\",\"nzgmwznmabik\"]},{\"serviceId\":\"DataConnectors\",\"serviceName\":\"rgjhxb\",\"option\":\"Deny\",\"enforcement\":\"Disabled\",\"policyAction\":\"AuditOnly\",\"initiatives\":[\"dmtnc\",\"ok\",\"tllxdyhgsyocogj\",\"tdtbnnhadooc\"]}],\"policyOverride\":\"None\",\"communityRoleAssignments\":[{\"roleDefinitionId\":\"khnvpam\",\"principals\":[{\"id\":\"qqu\",\"type\":\"ServicePrincipal\"}]},{\"roleDefinitionId\":\"ik\",\"principals\":[{\"id\":\"gxk\",\"type\":\"User\"},{\"id\":\"la\",\"type\":\"Group\"},{\"id\":\"elwuipi\",\"type\":\"Group\"},{\"id\":\"jzkzi\",\"type\":\"ServicePrincipal\"}]},{\"roleDefinitionId\":\"vvcnayr\",\"principals\":[{\"id\":\"nxxmueedndrdv\",\"type\":\"User\"},{\"id\":\"kwqqtchealmf\",\"type\":\"ServicePrincipal\"},{\"id\":\"d\",\"type\":\"ServicePrincipal\"}]},{\"roleDefinitionId\":\"ygdvwv\",\"principals\":[{\"id\":\"ohgwxrtfudxepxg\",\"type\":\"User\"},{\"id\":\"agvrvmnpkuk\",\"type\":\"ServicePrincipal\"},{\"id\":\"i\",\"type\":\"ServicePrincipal\"}]}],\"firewallSku\":\"Premium\",\"approvalSettings\":{\"mandatoryApprovers\":[{\"approverEntraId\":\"imfnjhfjx\"}]},\"maintenanceModeConfiguration\":{\"mode\":\"Advanced\",\"principals\":[{\"id\":\"kfoqreyfkzikfj\",\"type\":\"ServicePrincipal\"},{\"id\":\"n\",\"type\":\"Group\"}],\"justification\":\"Networking\"}},\"tags\":{\"feaenwab\":\"czelpcirel\",\"oz\":\"atklddxbjhwuaa\"},\"identity\":{\"principalId\":\"ph\",\"tenantId\":\"ulpjr\",\"type\":\"None\",\"userAssignedIdentities\":{\"qumiek\":{\"principalId\":\"rvimjwosytxitcsk\",\"clientId\":\"k\"},\"db\":{\"principalId\":\"zzikhlyfjhdg\",\"clientId\":\"gebdunygaeq\"},\"dmjsjqb\":{\"principalId\":\"atpxl\",\"clientId\":\"xcyjmoadsuvarmy\"},\"n\":{\"principalId\":\"hyxxrwlycoduhpk\",\"clientId\":\"gymare\"}}}}")
            .toObject(CommunityPatchModel.class);
        Assertions.assertEquals("dsytgadgvr", model.properties().dnsServers().get(0));
        Assertions.assertEquals(ServiceIdentifier.AKS, model.properties().governedServiceList().get(0).serviceId());
        Assertions.assertEquals(GovernedServiceItemOption.DENY,
            model.properties().governedServiceList().get(0).option());
        Assertions.assertEquals(GovernedServiceItemEnforcement.DISABLED,
            model.properties().governedServiceList().get(0).enforcement());
        Assertions.assertEquals(GovernedServiceItemPolicyAction.AUDIT_ONLY,
            model.properties().governedServiceList().get(0).policyAction());
        Assertions.assertEquals(CommunityPropertiesPolicyOverride.NONE, model.properties().policyOverride());
        Assertions.assertEquals("khnvpam", model.properties().communityRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("qqu", model.properties().communityRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.SERVICE_PRINCIPAL,
            model.properties().communityRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals(FirewallSKU.PREMIUM, model.properties().firewallSku());
        Assertions.assertEquals("imfnjhfjx",
            model.properties().approvalSettings().mandatoryApprovers().get(0).approverEntraId());
        Assertions.assertEquals(MaintenanceModeConfigurationModelMode.ADVANCED,
            model.properties().maintenanceModeConfiguration().mode());
        Assertions.assertEquals("kfoqreyfkzikfj",
            model.properties().maintenanceModeConfiguration().principals().get(0).id());
        Assertions.assertEquals(PrincipalType.SERVICE_PRINCIPAL,
            model.properties().maintenanceModeConfiguration().principals().get(0).type());
        Assertions.assertEquals(MaintenanceModeConfigurationModelJustification.NETWORKING,
            model.properties().maintenanceModeConfiguration().justification());
        Assertions.assertEquals("czelpcirel", model.tags().get("feaenwab"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CommunityPatchModel model = new CommunityPatchModel()
            .withProperties(new CommunityPatchProperties().withDnsServers(Arrays.asList("dsytgadgvr", "ea", "neqn"))
                .withGovernedServiceList(Arrays.asList(
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.AKS)
                        .withOption(GovernedServiceItemOption.DENY)
                        .withEnforcement(GovernedServiceItemEnforcement.DISABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.AUDIT_ONLY),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.LOGIC)
                        .withOption(GovernedServiceItemOption.NOT_APPLICABLE)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.AUDIT_ONLY),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.STORAGE)
                        .withOption(GovernedServiceItemOption.EXCEPTION_ONLY)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.ENFORCE),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.DATA_CONNECTORS)
                        .withOption(GovernedServiceItemOption.DENY)
                        .withEnforcement(GovernedServiceItemEnforcement.DISABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.AUDIT_ONLY)))
                .withPolicyOverride(CommunityPropertiesPolicyOverride.NONE)
                .withCommunityRoleAssignments(Arrays.asList(
                    new RoleAssignmentItem().withRoleDefinitionId("khnvpam")
                        .withPrincipals(
                            Arrays.asList(new Principal().withId("qqu").withType(PrincipalType.SERVICE_PRINCIPAL))),
                    new RoleAssignmentItem().withRoleDefinitionId("ik")
                        .withPrincipals(Arrays.asList(new Principal().withId("gxk").withType(PrincipalType.USER),
                            new Principal().withId("la").withType(PrincipalType.GROUP),
                            new Principal().withId("elwuipi").withType(PrincipalType.GROUP),
                            new Principal().withId("jzkzi").withType(PrincipalType.SERVICE_PRINCIPAL))),
                    new RoleAssignmentItem().withRoleDefinitionId("vvcnayr")
                        .withPrincipals(
                            Arrays.asList(new Principal().withId("nxxmueedndrdv").withType(PrincipalType.USER),
                                new Principal().withId("kwqqtchealmf").withType(PrincipalType.SERVICE_PRINCIPAL),
                                new Principal().withId("d").withType(PrincipalType.SERVICE_PRINCIPAL))),
                    new RoleAssignmentItem().withRoleDefinitionId("ygdvwv")
                        .withPrincipals(
                            Arrays.asList(new Principal().withId("ohgwxrtfudxepxg").withType(PrincipalType.USER),
                                new Principal().withId("agvrvmnpkuk").withType(PrincipalType.SERVICE_PRINCIPAL),
                                new Principal().withId("i").withType(PrincipalType.SERVICE_PRINCIPAL)))))
                .withFirewallSku(FirewallSKU.PREMIUM)
                .withApprovalSettings(new ApprovalSettingsPatchProperties()
                    .withMandatoryApprovers(Arrays.asList(new MandatoryApprover().withApproverEntraId("imfnjhfjx"))))
                .withMaintenanceModeConfiguration(new MaintenanceModeConfigurationPatchModel()
                    .withMode(MaintenanceModeConfigurationModelMode.ADVANCED)
                    .withPrincipals(Arrays.asList(
                        new Principal().withId("kfoqreyfkzikfj").withType(PrincipalType.SERVICE_PRINCIPAL),
                        new Principal().withId("n").withType(PrincipalType.GROUP)))
                    .withJustification(MaintenanceModeConfigurationModelJustification.NETWORKING)))
            .withTags(mapOf("feaenwab", "czelpcirel", "oz", "atklddxbjhwuaa"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(
                    mapOf("qumiek", new UserAssignedIdentity(), "db", new UserAssignedIdentity(), "dmjsjqb",
                        new UserAssignedIdentity(), "n", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(CommunityPatchModel.class);
        Assertions.assertEquals("dsytgadgvr", model.properties().dnsServers().get(0));
        Assertions.assertEquals(ServiceIdentifier.AKS, model.properties().governedServiceList().get(0).serviceId());
        Assertions.assertEquals(GovernedServiceItemOption.DENY,
            model.properties().governedServiceList().get(0).option());
        Assertions.assertEquals(GovernedServiceItemEnforcement.DISABLED,
            model.properties().governedServiceList().get(0).enforcement());
        Assertions.assertEquals(GovernedServiceItemPolicyAction.AUDIT_ONLY,
            model.properties().governedServiceList().get(0).policyAction());
        Assertions.assertEquals(CommunityPropertiesPolicyOverride.NONE, model.properties().policyOverride());
        Assertions.assertEquals("khnvpam", model.properties().communityRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("qqu", model.properties().communityRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.SERVICE_PRINCIPAL,
            model.properties().communityRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals(FirewallSKU.PREMIUM, model.properties().firewallSku());
        Assertions.assertEquals("imfnjhfjx",
            model.properties().approvalSettings().mandatoryApprovers().get(0).approverEntraId());
        Assertions.assertEquals(MaintenanceModeConfigurationModelMode.ADVANCED,
            model.properties().maintenanceModeConfiguration().mode());
        Assertions.assertEquals("kfoqreyfkzikfj",
            model.properties().maintenanceModeConfiguration().principals().get(0).id());
        Assertions.assertEquals(PrincipalType.SERVICE_PRINCIPAL,
            model.properties().maintenanceModeConfiguration().principals().get(0).type());
        Assertions.assertEquals(MaintenanceModeConfigurationModelJustification.NETWORKING,
            model.properties().maintenanceModeConfiguration().justification());
        Assertions.assertEquals("czelpcirel", model.tags().get("feaenwab"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
