// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager;
import com.azure.resourcemanager.virtualenclaves.models.ActionPerformed;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalProperties;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalResource;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalStatus;
import com.azure.resourcemanager.virtualenclaves.models.Approver;
import com.azure.resourcemanager.virtualenclaves.models.RequestMetadata;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApprovalsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"parentResourceId\":\"ejdoqeykg\",\"grandparentResourceId\":\"yg\",\"approvers\":[{\"approverEntraId\":\"fgqka\",\"actionPerformed\":\"Rejected\",\"lastUpdatedAt\":\"2021-11-01T21:18:59Z\"},{\"approverEntraId\":\"xtlgflwfg\",\"actionPerformed\":\"Rejected\",\"lastUpdatedAt\":\"2021-02-15T16:06:18Z\"},{\"approverEntraId\":\"ci\",\"actionPerformed\":\"Rejected\",\"lastUpdatedAt\":\"2021-01-09T07:32:44Z\"},{\"approverEntraId\":\"atlijjjr\",\"actionPerformed\":\"Approved\",\"lastUpdatedAt\":\"2021-11-25T12:06:38Z\"}],\"ticketId\":\"a\",\"createdAt\":\"2021-05-04T16:44:59Z\",\"stateChangedAt\":\"2021-01-27T10:11:39Z\",\"requestMetadata\":{\"resourceAction\":\"kvccxetyvkunmig\",\"approvalCallbackRoute\":\"hi\",\"approvalCallbackPayload\":\"gqogjwpindedva\",\"approvalStatus\":\"Approved\"}},\"id\":\"hmedeilbjywfcfxz\",\"name\":\"rzzihvwypus\",\"type\":\"vjslczwcii\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        VirtualEnclavesManager manager = VirtualEnclavesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ApprovalResource response = manager.approvals()
            .define("xwmzwdfkbnrz")
            .withExistingResourceUri("afjrqpjiyrqjcrg")
            .withProperties(new ApprovalProperties().withParentResourceId("tbqctqjfgx")
                .withGrandparentResourceId("aetgzdgvpyigd")
                .withApprovers(Arrays.asList(
                    new Approver().withApproverEntraId("ilzdcduwj")
                        .withActionPerformed(ActionPerformed.REJECTED)
                        .withLastUpdatedAt(OffsetDateTime.parse("2021-02-24T04:50:53Z")),
                    new Approver().withApproverEntraId("gucaif")
                        .withActionPerformed(ActionPerformed.REJECTED)
                        .withLastUpdatedAt(OffsetDateTime.parse("2021-11-02T00:32:54Z"))))
                .withTicketId("wgilfjqqac")
                .withCreatedAt(OffsetDateTime.parse("2021-05-30T22:07:48Z"))
                .withStateChangedAt(OffsetDateTime.parse("2021-09-28T16:45:06Z"))
                .withRequestMetadata(new RequestMetadata().withResourceAction("dcvjwc")
                    .withApprovalCallbackRoute("iakeciqc")
                    .withApprovalCallbackPayload("rtui")
                    .withApprovalStatus(ApprovalStatus.APPROVED)))
            .create();

        Assertions.assertEquals("ejdoqeykg", response.properties().parentResourceId());
        Assertions.assertEquals("yg", response.properties().grandparentResourceId());
        Assertions.assertEquals("fgqka", response.properties().approvers().get(0).approverEntraId());
        Assertions.assertEquals(ActionPerformed.REJECTED, response.properties().approvers().get(0).actionPerformed());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-01T21:18:59Z"),
            response.properties().approvers().get(0).lastUpdatedAt());
        Assertions.assertEquals("a", response.properties().ticketId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-04T16:44:59Z"), response.properties().createdAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-27T10:11:39Z"), response.properties().stateChangedAt());
        Assertions.assertEquals("kvccxetyvkunmig", response.properties().requestMetadata().resourceAction());
        Assertions.assertEquals("hi", response.properties().requestMetadata().approvalCallbackRoute());
        Assertions.assertEquals("gqogjwpindedva", response.properties().requestMetadata().approvalCallbackPayload());
        Assertions.assertEquals(ApprovalStatus.APPROVED, response.properties().requestMetadata().approvalStatus());
    }
}
