// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.virtualenclaves.fluent.models.CommunityResourceInner;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalPolicy;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalSettings;
import com.azure.resourcemanager.virtualenclaves.models.CommunityProperties;
import com.azure.resourcemanager.virtualenclaves.models.CommunityPropertiesPolicyOverride;
import com.azure.resourcemanager.virtualenclaves.models.FirewallSKU;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItem;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemEnforcement;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemOption;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemPolicyAction;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModel;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelJustification;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelMode;
import com.azure.resourcemanager.virtualenclaves.models.ManagedServiceIdentity;
import com.azure.resourcemanager.virtualenclaves.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.virtualenclaves.models.MandatoryApprover;
import com.azure.resourcemanager.virtualenclaves.models.Principal;
import com.azure.resourcemanager.virtualenclaves.models.PrincipalType;
import com.azure.resourcemanager.virtualenclaves.models.RoleAssignmentItem;
import com.azure.resourcemanager.virtualenclaves.models.ServiceIdentifier;
import com.azure.resourcemanager.virtualenclaves.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CommunityResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CommunityResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"addressSpace\":\"cwzzhxgktr\",\"dnsServers\":[\"cnapkteoell\",\"pt\",\"d\",\"gpfqbuace\"],\"provisioningState\":\"Running\",\"resourceCollection\":[\"rhhuaopppcqeqx\",\"lzdahzxctobgbkdm\"],\"managedResourceGroupName\":\"zpostmgrcfbu\",\"managedOnBehalfOfConfiguration\":{\"moboBrokerResources\":[{\"id\":\"jhhkxbp\"},{\"id\":\"ymjhxxjyngudivkr\"},{\"id\":\"wbxqzvszjfau\"},{\"id\":\"fdxxivetvtcqaqtd\"}]},\"governedServiceList\":[{\"serviceId\":\"Monitoring\",\"serviceName\":\"xv\",\"option\":\"Deny\",\"enforcement\":\"Enabled\",\"policyAction\":\"None\",\"initiatives\":[\"sfxobl\",\"tkblmpewww\",\"bkrvrnsvshqj\"]},{\"serviceId\":\"Storage\",\"serviceName\":\"crsbfovasr\",\"option\":\"Allow\",\"enforcement\":\"Disabled\",\"policyAction\":\"None\",\"initiatives\":[\"sub\",\"gjb\",\"rxbpyb\",\"rfbjf\"]},{\"serviceId\":\"MicrosoftSQL\",\"serviceName\":\"ssotftpv\",\"option\":\"NotApplicable\",\"enforcement\":\"Enabled\",\"policyAction\":\"Enforce\",\"initiatives\":[\"nfqqnvwp\",\"qtaruoujmkcjhwq\",\"tjrybnwjewgdr\",\"ervnaenqpehi\"]}],\"policyOverride\":\"Enclave\",\"communityRoleAssignments\":[{\"roleDefinitionId\":\"mifthnzdnd\",\"principals\":[{\"id\":\"nayqi\",\"type\":\"User\"},{\"id\":\"nduhavhqlkthum\",\"type\":\"Group\"},{\"id\":\"olbgycduiertgccy\",\"type\":\"Group\"}]},{\"roleDefinitionId\":\"aolps\",\"principals\":[{\"id\":\"lfmmdnbbglzpswi\",\"type\":\"User\"},{\"id\":\"mcwyhzdxssadb\",\"type\":\"ServicePrincipal\"},{\"id\":\"nvdfznuda\",\"type\":\"User\"}]},{\"roleDefinitionId\":\"vxzbncb\",\"principals\":[{\"id\":\"pstdbhhxsrzd\",\"type\":\"User\"},{\"id\":\"cers\",\"type\":\"ServicePrincipal\"},{\"id\":\"ntnev\",\"type\":\"ServicePrincipal\"},{\"id\":\"wjmy\",\"type\":\"Group\"}]}],\"firewallSku\":\"Basic\",\"approvalSettings\":{\"endpointCreation\":\"Required\",\"endpointUpdate\":\"NotRequired\",\"endpointDeletion\":\"NotRequired\",\"connectionCreation\":\"NotRequired\",\"connectionUpdate\":\"Required\",\"connectionDeletion\":\"NotRequired\",\"enclaveCreation\":\"Required\",\"enclaveDeletion\":\"NotRequired\",\"maintenanceMode\":\"NotRequired\",\"serviceCatalogDeployment\":\"Required\",\"notificationOnApprovalCreation\":\"Required\",\"notificationOnApprovalAction\":\"NotRequired\",\"notificationOnApprovalDeletion\":\"Required\",\"mandatoryApprovers\":[{\"approverEntraId\":\"zhedplvwiw\"},{\"approverEntraId\":\"bmwmbesldnkw\"},{\"approverEntraId\":\"tppjflcx\"}],\"minimumApproversRequired\":3058762238955275057},\"maintenanceModeConfiguration\":{\"mode\":\"Off\",\"principals\":[{\"id\":\"m\",\"type\":\"User\"}],\"justification\":\"Governance\"}},\"identity\":{\"principalId\":\"kqze\",\"tenantId\":\"kdltfzxmhhvhg\",\"type\":\"None\",\"userAssignedIdentities\":{\"xndlkzgxhu\":{\"principalId\":\"kwobdagxtibq\",\"clientId\":\"bxwakbog\"},\"lrb\":{\"principalId\":\"plbpodxun\",\"clientId\":\"ebxmubyynt\"}}},\"location\":\"koievseo\",\"tags\":{\"mpgcjefuzmuvpbt\":\"rlltmuwlauwzizx\"},\"id\":\"d\",\"name\":\"morppxebmnzbtbh\",\"type\":\"pglkf\"}")
            .toObject(CommunityResourceInner.class);
        Assertions.assertEquals("koievseo", model.location());
        Assertions.assertEquals("rlltmuwlauwzizx", model.tags().get("mpgcjefuzmuvpbt"));
        Assertions.assertEquals("cwzzhxgktr", model.properties().addressSpace());
        Assertions.assertEquals("cnapkteoell", model.properties().dnsServers().get(0));
        Assertions.assertEquals(ServiceIdentifier.MONITORING,
            model.properties().governedServiceList().get(0).serviceId());
        Assertions.assertEquals(GovernedServiceItemOption.DENY,
            model.properties().governedServiceList().get(0).option());
        Assertions.assertEquals(GovernedServiceItemEnforcement.ENABLED,
            model.properties().governedServiceList().get(0).enforcement());
        Assertions.assertEquals(GovernedServiceItemPolicyAction.NONE,
            model.properties().governedServiceList().get(0).policyAction());
        Assertions.assertEquals(CommunityPropertiesPolicyOverride.ENCLAVE, model.properties().policyOverride());
        Assertions.assertEquals("mifthnzdnd", model.properties().communityRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("nayqi", model.properties().communityRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.USER,
            model.properties().communityRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals(FirewallSKU.BASIC, model.properties().firewallSku());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.properties().approvalSettings().endpointCreation());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.properties().approvalSettings().endpointUpdate());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.properties().approvalSettings().endpointDeletion());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            model.properties().approvalSettings().connectionCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.properties().approvalSettings().connectionUpdate());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            model.properties().approvalSettings().connectionDeletion());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.properties().approvalSettings().enclaveCreation());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.properties().approvalSettings().enclaveDeletion());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.properties().approvalSettings().maintenanceMode());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            model.properties().approvalSettings().serviceCatalogDeployment());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            model.properties().approvalSettings().notificationOnApprovalCreation());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            model.properties().approvalSettings().notificationOnApprovalAction());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            model.properties().approvalSettings().notificationOnApprovalDeletion());
        Assertions.assertEquals("zhedplvwiw",
            model.properties().approvalSettings().mandatoryApprovers().get(0).approverEntraId());
        Assertions.assertEquals(3058762238955275057L, model.properties().approvalSettings().minimumApproversRequired());
        Assertions.assertEquals(MaintenanceModeConfigurationModelMode.OFF,
            model.properties().maintenanceModeConfiguration().mode());
        Assertions.assertEquals("m", model.properties().maintenanceModeConfiguration().principals().get(0).id());
        Assertions.assertEquals(PrincipalType.USER,
            model.properties().maintenanceModeConfiguration().principals().get(0).type());
        Assertions.assertEquals(MaintenanceModeConfigurationModelJustification.GOVERNANCE,
            model.properties().maintenanceModeConfiguration().justification());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CommunityResourceInner model = new CommunityResourceInner().withLocation("koievseo")
            .withTags(mapOf("mpgcjefuzmuvpbt", "rlltmuwlauwzizx"))
            .withProperties(new CommunityProperties().withAddressSpace("cwzzhxgktr")
                .withDnsServers(Arrays.asList("cnapkteoell", "pt", "d", "gpfqbuace"))
                .withGovernedServiceList(Arrays.asList(
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.MONITORING)
                        .withOption(GovernedServiceItemOption.DENY)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.NONE),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.STORAGE)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.DISABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.NONE),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.MICROSOFT_SQL)
                        .withOption(GovernedServiceItemOption.NOT_APPLICABLE)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.ENFORCE)))
                .withPolicyOverride(CommunityPropertiesPolicyOverride.ENCLAVE)
                .withCommunityRoleAssignments(Arrays.asList(
                    new RoleAssignmentItem().withRoleDefinitionId("mifthnzdnd")
                        .withPrincipals(Arrays.asList(new Principal().withId("nayqi").withType(PrincipalType.USER),
                            new Principal().withId("nduhavhqlkthum").withType(PrincipalType.GROUP),
                            new Principal().withId("olbgycduiertgccy").withType(PrincipalType.GROUP))),
                    new RoleAssignmentItem().withRoleDefinitionId("aolps")
                        .withPrincipals(
                            Arrays.asList(new Principal().withId("lfmmdnbbglzpswi").withType(PrincipalType.USER),
                                new Principal().withId("mcwyhzdxssadb").withType(PrincipalType.SERVICE_PRINCIPAL),
                                new Principal().withId("nvdfznuda").withType(PrincipalType.USER))),
                    new RoleAssignmentItem().withRoleDefinitionId("vxzbncb")
                        .withPrincipals(
                            Arrays.asList(new Principal().withId("pstdbhhxsrzd").withType(PrincipalType.USER),
                                new Principal().withId("cers").withType(PrincipalType.SERVICE_PRINCIPAL),
                                new Principal().withId("ntnev").withType(PrincipalType.SERVICE_PRINCIPAL),
                                new Principal().withId("wjmy").withType(PrincipalType.GROUP)))))
                .withFirewallSku(FirewallSKU.BASIC)
                .withApprovalSettings(new ApprovalSettings().withEndpointCreation(ApprovalPolicy.REQUIRED)
                    .withEndpointUpdate(ApprovalPolicy.NOT_REQUIRED)
                    .withEndpointDeletion(ApprovalPolicy.NOT_REQUIRED)
                    .withConnectionCreation(ApprovalPolicy.NOT_REQUIRED)
                    .withConnectionUpdate(ApprovalPolicy.REQUIRED)
                    .withConnectionDeletion(ApprovalPolicy.NOT_REQUIRED)
                    .withEnclaveCreation(ApprovalPolicy.REQUIRED)
                    .withEnclaveDeletion(ApprovalPolicy.NOT_REQUIRED)
                    .withMaintenanceMode(ApprovalPolicy.NOT_REQUIRED)
                    .withServiceCatalogDeployment(ApprovalPolicy.REQUIRED)
                    .withNotificationOnApprovalCreation(ApprovalPolicy.REQUIRED)
                    .withNotificationOnApprovalAction(ApprovalPolicy.NOT_REQUIRED)
                    .withNotificationOnApprovalDeletion(ApprovalPolicy.REQUIRED)
                    .withMandatoryApprovers(Arrays.asList(new MandatoryApprover().withApproverEntraId("zhedplvwiw"),
                        new MandatoryApprover().withApproverEntraId("bmwmbesldnkw"),
                        new MandatoryApprover().withApproverEntraId("tppjflcx")))
                    .withMinimumApproversRequired(3058762238955275057L))
                .withMaintenanceModeConfiguration(
                    new MaintenanceModeConfigurationModel().withMode(MaintenanceModeConfigurationModelMode.OFF)
                        .withPrincipals(Arrays.asList(new Principal().withId("m").withType(PrincipalType.USER)))
                        .withJustification(MaintenanceModeConfigurationModelJustification.GOVERNANCE)))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(
                    mapOf("xndlkzgxhu", new UserAssignedIdentity(), "lrb", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(CommunityResourceInner.class);
        Assertions.assertEquals("koievseo", model.location());
        Assertions.assertEquals("rlltmuwlauwzizx", model.tags().get("mpgcjefuzmuvpbt"));
        Assertions.assertEquals("cwzzhxgktr", model.properties().addressSpace());
        Assertions.assertEquals("cnapkteoell", model.properties().dnsServers().get(0));
        Assertions.assertEquals(ServiceIdentifier.MONITORING,
            model.properties().governedServiceList().get(0).serviceId());
        Assertions.assertEquals(GovernedServiceItemOption.DENY,
            model.properties().governedServiceList().get(0).option());
        Assertions.assertEquals(GovernedServiceItemEnforcement.ENABLED,
            model.properties().governedServiceList().get(0).enforcement());
        Assertions.assertEquals(GovernedServiceItemPolicyAction.NONE,
            model.properties().governedServiceList().get(0).policyAction());
        Assertions.assertEquals(CommunityPropertiesPolicyOverride.ENCLAVE, model.properties().policyOverride());
        Assertions.assertEquals("mifthnzdnd", model.properties().communityRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("nayqi", model.properties().communityRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.USER,
            model.properties().communityRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals(FirewallSKU.BASIC, model.properties().firewallSku());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.properties().approvalSettings().endpointCreation());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.properties().approvalSettings().endpointUpdate());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.properties().approvalSettings().endpointDeletion());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            model.properties().approvalSettings().connectionCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.properties().approvalSettings().connectionUpdate());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            model.properties().approvalSettings().connectionDeletion());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.properties().approvalSettings().enclaveCreation());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.properties().approvalSettings().enclaveDeletion());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.properties().approvalSettings().maintenanceMode());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            model.properties().approvalSettings().serviceCatalogDeployment());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            model.properties().approvalSettings().notificationOnApprovalCreation());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            model.properties().approvalSettings().notificationOnApprovalAction());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            model.properties().approvalSettings().notificationOnApprovalDeletion());
        Assertions.assertEquals("zhedplvwiw",
            model.properties().approvalSettings().mandatoryApprovers().get(0).approverEntraId());
        Assertions.assertEquals(3058762238955275057L, model.properties().approvalSettings().minimumApproversRequired());
        Assertions.assertEquals(MaintenanceModeConfigurationModelMode.OFF,
            model.properties().maintenanceModeConfiguration().mode());
        Assertions.assertEquals("m", model.properties().maintenanceModeConfiguration().principals().get(0).id());
        Assertions.assertEquals(PrincipalType.USER,
            model.properties().maintenanceModeConfiguration().principals().get(0).type());
        Assertions.assertEquals(MaintenanceModeConfigurationModelJustification.GOVERNANCE,
            model.properties().maintenanceModeConfiguration().justification());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
