// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalActionResponse;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalCallbackRequest;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalCallbackRequestApprovalStatus;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalCallbackRequestResourceRequestAction;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class VirtualEnclavesHandleApprovalCreationMockTests {
    @Test
    public void testHandleApprovalCreation() throws Exception {
        String responseStr = "{\"message\":\"owjrmzvuporqz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        VirtualEnclavesManager manager = VirtualEnclavesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ApprovalActionResponse response = manager.virtualEnclaves()
            .handleApprovalCreation("knidib", "qjxgpnrhgovfgp",
                new ApprovalCallbackRequest()
                    .withResourceRequestAction(ApprovalCallbackRequestResourceRequestAction.UPDATE)
                    .withApprovalStatus(ApprovalCallbackRequestApprovalStatus.APPROVED)
                    .withApprovalCallbackPayload("hh"),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("owjrmzvuporqz", response.message());
    }
}
