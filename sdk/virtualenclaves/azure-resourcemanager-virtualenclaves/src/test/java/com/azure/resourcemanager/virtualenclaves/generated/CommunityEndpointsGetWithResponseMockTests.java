// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager;
import com.azure.resourcemanager.virtualenclaves.models.CommunityEndpointProtocol;
import com.azure.resourcemanager.virtualenclaves.models.CommunityEndpointResource;
import com.azure.resourcemanager.virtualenclaves.models.DestinationType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CommunityEndpointsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"ruleCollection\":[{\"destinationType\":\"PrivateNetwork\",\"protocols\":[\"ICMP\",\"HTTP\",\"ANY\",\"HTTP\"],\"transitHubResourceId\":\"nqxaekqsyk\",\"endpointRuleName\":\"jtqpkevmyltjcrsp\",\"destination\":\"l\",\"ports\":\"cclfgxannn\"},{\"destinationType\":\"FQDN\",\"protocols\":[\"UDP\",\"AH\"],\"transitHubResourceId\":\"wxigpxv\",\"endpointRuleName\":\"maupxvpi\",\"destination\":\"f\",\"ports\":\"fyzyzeyuub\"},{\"destinationType\":\"FQDN\",\"protocols\":[\"ANY\",\"UDP\"],\"transitHubResourceId\":\"toi\",\"endpointRuleName\":\"gygvfltgvdiho\",\"destination\":\"krxwet\",\"ports\":\"drcyrucpcun\"}],\"resourceCollection\":[\"dqumoenodnai\",\"nhq\"],\"provisioningState\":\"Updating\"},\"location\":\"dnelqkaad\",\"tags\":{\"anniyopetxivcnr\":\"wf\"},\"id\":\"yxnu\",\"name\":\"aephblkw\",\"type\":\"pat\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        VirtualEnclavesManager manager = VirtualEnclavesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CommunityEndpointResource response = manager.communityEndpoints()
            .getWithResponse("rkgwltxeqip", "gzdyimsfayorp", "avkjog", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("dnelqkaad", response.location());
        Assertions.assertEquals("wf", response.tags().get("anniyopetxivcnr"));
        Assertions.assertEquals(DestinationType.PRIVATE_NETWORK,
            response.properties().ruleCollection().get(0).destinationType());
        Assertions.assertEquals(CommunityEndpointProtocol.ICMP,
            response.properties().ruleCollection().get(0).protocols().get(0));
        Assertions.assertEquals("nqxaekqsyk", response.properties().ruleCollection().get(0).transitHubResourceId());
        Assertions.assertEquals("jtqpkevmyltjcrsp", response.properties().ruleCollection().get(0).endpointRuleName());
        Assertions.assertEquals("l", response.properties().ruleCollection().get(0).destination());
        Assertions.assertEquals("cclfgxannn", response.properties().ruleCollection().get(0).ports());
    }
}
