// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveEndpointDestinationRule;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveEndpointProperties;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveEndpointProtocol;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class EnclaveEndpointPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EnclaveEndpointProperties model = BinaryData.fromString(
            "{\"ruleCollection\":[{\"protocols\":[\"ANY\",\"ANY\"],\"endpointRuleName\":\"ojfmwnco\",\"destination\":\"rfh\",\"ports\":\"ctymoxoftp\"},{\"protocols\":[\"ESP\",\"ANY\"],\"endpointRuleName\":\"zuhx\",\"destination\":\"pqjlihhyusps\",\"ports\":\"sdvlmfwdgzxulucv\"},{\"protocols\":[\"ESP\",\"ICMP\",\"UDP\",\"ICMP\"],\"endpointRuleName\":\"zvxurisjnhny\",\"destination\":\"ifqjz\",\"ports\":\"mrhublwpc\"}],\"resourceCollection\":[\"trgjupauutpwoqh\"],\"provisioningState\":\"Running\"}")
            .toObject(EnclaveEndpointProperties.class);
        Assertions.assertEquals(EnclaveEndpointProtocol.ANY, model.ruleCollection().get(0).protocols().get(0));
        Assertions.assertEquals("ojfmwnco", model.ruleCollection().get(0).endpointRuleName());
        Assertions.assertEquals("rfh", model.ruleCollection().get(0).destination());
        Assertions.assertEquals("ctymoxoftp", model.ruleCollection().get(0).ports());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EnclaveEndpointProperties model = new EnclaveEndpointProperties().withRuleCollection(Arrays.asList(
            new EnclaveEndpointDestinationRule()
                .withProtocols(Arrays.asList(EnclaveEndpointProtocol.ANY, EnclaveEndpointProtocol.ANY))
                .withEndpointRuleName("ojfmwnco")
                .withDestination("rfh")
                .withPorts("ctymoxoftp"),
            new EnclaveEndpointDestinationRule()
                .withProtocols(Arrays.asList(EnclaveEndpointProtocol.ESP, EnclaveEndpointProtocol.ANY))
                .withEndpointRuleName("zuhx")
                .withDestination("pqjlihhyusps")
                .withPorts("sdvlmfwdgzxulucv"),
            new EnclaveEndpointDestinationRule()
                .withProtocols(Arrays.asList(EnclaveEndpointProtocol.ESP, EnclaveEndpointProtocol.ICMP,
                    EnclaveEndpointProtocol.UDP, EnclaveEndpointProtocol.ICMP))
                .withEndpointRuleName("zvxurisjnhny")
                .withDestination("ifqjz")
                .withPorts("mrhublwpc")));
        model = BinaryData.fromObject(model).toObject(EnclaveEndpointProperties.class);
        Assertions.assertEquals(EnclaveEndpointProtocol.ANY, model.ruleCollection().get(0).protocols().get(0));
        Assertions.assertEquals("ojfmwnco", model.ruleCollection().get(0).endpointRuleName());
        Assertions.assertEquals("rfh", model.ruleCollection().get(0).destination());
        Assertions.assertEquals("ctymoxoftp", model.ruleCollection().get(0).ports());
    }
}
