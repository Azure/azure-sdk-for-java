// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelJustification;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelMode;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationPatchModel;
import com.azure.resourcemanager.virtualenclaves.models.Principal;
import com.azure.resourcemanager.virtualenclaves.models.PrincipalType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MaintenanceModeConfigurationPatchModelTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MaintenanceModeConfigurationPatchModel model = BinaryData.fromString(
            "{\"mode\":\"On\",\"principals\":[{\"id\":\"kuwbcrnwb\",\"type\":\"User\"},{\"id\":\"hhseyv\",\"type\":\"Group\"},{\"id\":\"srtslhspkdeem\",\"type\":\"ServicePrincipal\"},{\"id\":\"fm\",\"type\":\"ServicePrincipal\"}],\"justification\":\"Networking\"}")
            .toObject(MaintenanceModeConfigurationPatchModel.class);
        Assertions.assertEquals(MaintenanceModeConfigurationModelMode.ON, model.mode());
        Assertions.assertEquals("kuwbcrnwb", model.principals().get(0).id());
        Assertions.assertEquals(PrincipalType.USER, model.principals().get(0).type());
        Assertions.assertEquals(MaintenanceModeConfigurationModelJustification.NETWORKING, model.justification());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MaintenanceModeConfigurationPatchModel model
            = new MaintenanceModeConfigurationPatchModel().withMode(MaintenanceModeConfigurationModelMode.ON)
                .withPrincipals(Arrays.asList(new Principal().withId("kuwbcrnwb").withType(PrincipalType.USER),
                    new Principal().withId("hhseyv").withType(PrincipalType.GROUP),
                    new Principal().withId("srtslhspkdeem").withType(PrincipalType.SERVICE_PRINCIPAL),
                    new Principal().withId("fm").withType(PrincipalType.SERVICE_PRINCIPAL)))
                .withJustification(MaintenanceModeConfigurationModelJustification.NETWORKING);
        model = BinaryData.fromObject(model).toObject(MaintenanceModeConfigurationPatchModel.class);
        Assertions.assertEquals(MaintenanceModeConfigurationModelMode.ON, model.mode());
        Assertions.assertEquals("kuwbcrnwb", model.principals().get(0).id());
        Assertions.assertEquals(PrincipalType.USER, model.principals().get(0).type());
        Assertions.assertEquals(MaintenanceModeConfigurationModelJustification.NETWORKING, model.justification());
    }
}
