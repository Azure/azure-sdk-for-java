// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager;
import com.azure.resourcemanager.virtualenclaves.models.WorkloadProperties;
import com.azure.resourcemanager.virtualenclaves.models.WorkloadResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"resourceGroupCollection\":[\"uxtyasiibmi\",\"bnn\",\"stgnl\",\"hnmgixhcm\"],\"managedOnBehalfOfConfiguration\":{\"moboBrokerResources\":[{\"id\":\"oudorhcgyyp\"},{\"id\":\"twypundmbxh\"},{\"id\":\"cmjkavlgorbmftpm\"}]}},\"location\":\"zfjltfvnzcyjto\",\"tags\":{\"bdb\":\"opv\",\"ibcysihsgqc\":\"qgqqihedsvqwthmk\"},\"id\":\"dhohsdtmcdzsuf\",\"name\":\"ohdxbzlmcmu\",\"type\":\"pcvhdbevwqqxeys\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        VirtualEnclavesManager manager = VirtualEnclavesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadResource response = manager.workloads()
            .define("fnmdxotn")
            .withRegion("leohibetnluankr")
            .withExistingVirtualEnclave("lzo", "hpc")
            .withTags(mapOf("mq", "eeebtijvacv", "nw", "bqqxlaj", "afgaoqlt", "acevehjkuyx", "gv", "aeylinm"))
            .withProperties(new WorkloadProperties()
                .withResourceGroupCollection(Arrays.asList("eyzihgrky", "i", "absnmfpp", "ojeevy")))
            .create();

        Assertions.assertEquals("zfjltfvnzcyjto", response.location());
        Assertions.assertEquals("opv", response.tags().get("bdb"));
        Assertions.assertEquals("uxtyasiibmi", response.properties().resourceGroupCollection().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
