// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager;
import com.azure.resourcemanager.virtualenclaves.models.TransitHubProperties;
import com.azure.resourcemanager.virtualenclaves.models.TransitHubResource;
import com.azure.resourcemanager.virtualenclaves.models.TransitHubState;
import com.azure.resourcemanager.virtualenclaves.models.TransitOption;
import com.azure.resourcemanager.virtualenclaves.models.TransitOptionParams;
import com.azure.resourcemanager.virtualenclaves.models.TransitOptionType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TransitHubsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"state\":\"PendingUpdate\",\"transitOption\":{\"type\":\"ExpressRoute\",\"params\":{\"scaleUnits\":7437458919363278602,\"remoteVirtualNetworkId\":\"lz\"}},\"resourceCollection\":[\"knyuxgvttxpn\",\"upzaamrdixtre\"]},\"location\":\"dswys\",\"tags\":{\"rpq\":\"uffgllukkutvlx\",\"bhbcdszir\":\"vmblcouqe\",\"t\":\"randoypmb\"},\"id\":\"ormkfqlwxldyk\",\"name\":\"lsygaol\",\"type\":\"jpnnbmjksibjgsj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        VirtualEnclavesManager manager = VirtualEnclavesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        TransitHubResource response = manager.transitHubs()
            .define("ufr")
            .withRegion("rsc")
            .withExistingCommunity("hulrtywikdmhla", "uflgbhgauacdixm")
            .withTags(mapOf("jxcjrmmuabwib", "wsdrnpxqwodif"))
            .withProperties(new TransitHubProperties().withState(TransitHubState.PENDING_UPDATE)
                .withTransitOption(new TransitOption().withType(TransitOptionType.PEERING)
                    .withParams(new TransitOptionParams().withScaleUnits(3604541138001569154L)
                        .withRemoteVirtualNetworkId("oqbvjhvefgwbmqj"))))
            .create();

        Assertions.assertEquals("dswys", response.location());
        Assertions.assertEquals("uffgllukkutvlx", response.tags().get("rpq"));
        Assertions.assertEquals(TransitHubState.PENDING_UPDATE, response.properties().state());
        Assertions.assertEquals(TransitOptionType.EXPRESS_ROUTE, response.properties().transitOption().type());
        Assertions.assertEquals(7437458919363278602L, response.properties().transitOption().params().scaleUnits());
        Assertions.assertEquals("lz", response.properties().transitOption().params().remoteVirtualNetworkId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
