// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveEndpointDestinationRule;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveEndpointPatchModel;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveEndpointPatchProperties;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveEndpointProtocol;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class EnclaveEndpointPatchModelTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EnclaveEndpointPatchModel model = BinaryData.fromString(
            "{\"properties\":{\"ruleCollection\":[{\"protocols\":[\"ANY\",\"ESP\"],\"endpointRuleName\":\"lhvygdyftu\",\"destination\":\"twnawjslbiwkojgc\",\"ports\":\"tsf\"},{\"protocols\":[\"TCP\",\"AH\",\"ANY\"],\"endpointRuleName\":\"ph\",\"destination\":\"qnrnrpxehuwryk\",\"ports\":\"aifmvikl\"},{\"protocols\":[\"AH\"],\"endpointRuleName\":\"hbejdznxcvdsrhnj\",\"destination\":\"olvtnovqfzge\",\"ports\":\"dftuljltduce\"}]},\"tags\":{\"ejwcwwqiok\":\"mczuo\",\"p\":\"ssxmojms\",\"kwcf\":\"jpr\",\"yxgtczh\":\"ql\"}}")
            .toObject(EnclaveEndpointPatchModel.class);
        Assertions.assertEquals(EnclaveEndpointProtocol.ANY,
            model.properties().ruleCollection().get(0).protocols().get(0));
        Assertions.assertEquals("lhvygdyftu", model.properties().ruleCollection().get(0).endpointRuleName());
        Assertions.assertEquals("twnawjslbiwkojgc", model.properties().ruleCollection().get(0).destination());
        Assertions.assertEquals("tsf", model.properties().ruleCollection().get(0).ports());
        Assertions.assertEquals("mczuo", model.tags().get("ejwcwwqiok"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EnclaveEndpointPatchModel model
            = new EnclaveEndpointPatchModel()
                .withProperties(
                    new EnclaveEndpointPatchProperties()
                        .withRuleCollection(
                            Arrays.asList(
                                new EnclaveEndpointDestinationRule()
                                    .withProtocols(
                                        Arrays.asList(EnclaveEndpointProtocol.ANY, EnclaveEndpointProtocol.ESP))
                                    .withEndpointRuleName("lhvygdyftu")
                                    .withDestination("twnawjslbiwkojgc")
                                    .withPorts("tsf"),
                                new EnclaveEndpointDestinationRule()
                                    .withProtocols(Arrays.asList(EnclaveEndpointProtocol.TCP,
                                        EnclaveEndpointProtocol.AH, EnclaveEndpointProtocol.ANY))
                                    .withEndpointRuleName("ph")
                                    .withDestination("qnrnrpxehuwryk")
                                    .withPorts("aifmvikl"),
                                new EnclaveEndpointDestinationRule()
                                    .withProtocols(Arrays.asList(EnclaveEndpointProtocol.AH))
                                    .withEndpointRuleName("hbejdznxcvdsrhnj")
                                    .withDestination("olvtnovqfzge")
                                    .withPorts("dftuljltduce"))))
                .withTags(mapOf("ejwcwwqiok", "mczuo", "p", "ssxmojms", "kwcf", "jpr", "yxgtczh", "ql"));
        model = BinaryData.fromObject(model).toObject(EnclaveEndpointPatchModel.class);
        Assertions.assertEquals(EnclaveEndpointProtocol.ANY,
            model.properties().ruleCollection().get(0).protocols().get(0));
        Assertions.assertEquals("lhvygdyftu", model.properties().ruleCollection().get(0).endpointRuleName());
        Assertions.assertEquals("twnawjslbiwkojgc", model.properties().ruleCollection().get(0).destination());
        Assertions.assertEquals("tsf", model.properties().ruleCollection().get(0).ports());
        Assertions.assertEquals("mczuo", model.tags().get("ejwcwwqiok"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
