// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.virtualenclaves.fluent.models.WorkloadResourceInner;
import com.azure.resourcemanager.virtualenclaves.models.WorkloadProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkloadResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkloadResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Deleting\",\"resourceGroupCollection\":[\"zvgnwzs\",\"mglzufcy\",\"kohdbiha\",\"ufhfcbjysa\"],\"managedOnBehalfOfConfiguration\":{\"moboBrokerResources\":[{\"id\":\"qhabifpikxwcz\"}]}},\"location\":\"scnpqxuhivy\",\"tags\":{\"rkxvdum\":\"wby\",\"xgaudccs\":\"grtfwvu\",\"jcny\":\"h\",\"kryhtnapczwlokj\":\"j\"},\"id\":\"emkkvnipjox\",\"name\":\"jnchgej\",\"type\":\"podmailzydehojwy\"}")
            .toObject(WorkloadResourceInner.class);
        Assertions.assertEquals("scnpqxuhivy", model.location());
        Assertions.assertEquals("wby", model.tags().get("rkxvdum"));
        Assertions.assertEquals("zvgnwzs", model.properties().resourceGroupCollection().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkloadResourceInner model = new WorkloadResourceInner().withLocation("scnpqxuhivy")
            .withTags(mapOf("rkxvdum", "wby", "xgaudccs", "grtfwvu", "jcny", "h", "kryhtnapczwlokj", "j"))
            .withProperties(new WorkloadProperties()
                .withResourceGroupCollection(Arrays.asList("zvgnwzs", "mglzufcy", "kohdbiha", "ufhfcbjysa")));
        model = BinaryData.fromObject(model).toObject(WorkloadResourceInner.class);
        Assertions.assertEquals("scnpqxuhivy", model.location());
        Assertions.assertEquals("wby", model.tags().get("rkxvdum"));
        Assertions.assertEquals("zvgnwzs", model.properties().resourceGroupCollection().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
