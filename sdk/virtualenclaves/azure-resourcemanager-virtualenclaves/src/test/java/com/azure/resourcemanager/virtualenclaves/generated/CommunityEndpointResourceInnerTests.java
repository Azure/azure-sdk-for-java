// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.virtualenclaves.fluent.models.CommunityEndpointResourceInner;
import com.azure.resourcemanager.virtualenclaves.models.CommunityEndpointDestinationRule;
import com.azure.resourcemanager.virtualenclaves.models.CommunityEndpointProperties;
import com.azure.resourcemanager.virtualenclaves.models.CommunityEndpointProtocol;
import com.azure.resourcemanager.virtualenclaves.models.DestinationType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CommunityEndpointResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CommunityEndpointResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"ruleCollection\":[{\"destinationType\":\"FQDN\",\"protocols\":[\"HTTPS\",\"ESP\",\"TCP\"],\"transitHubResourceId\":\"juewbcihxuuwhcjy\",\"endpointRuleName\":\"cybvpayakkudzpxg\",\"destination\":\"plmag\",\"ports\":\"cyohpfkyrkdbd\"}],\"resourceCollection\":[\"gsj\",\"mnwqj\",\"obaiyhddviaceg\"],\"provisioningState\":\"Succeeded\"},\"location\":\"tfpmvmemfnczdw\",\"tags\":{\"db\":\"alxlllchp\"},\"id\":\"evwrdnhfuk\",\"name\":\"vsjcswsmystuluqy\",\"type\":\"fcvlerch\"}")
            .toObject(CommunityEndpointResourceInner.class);
        Assertions.assertEquals("tfpmvmemfnczdw", model.location());
        Assertions.assertEquals("alxlllchp", model.tags().get("db"));
        Assertions.assertEquals(DestinationType.FQDN, model.properties().ruleCollection().get(0).destinationType());
        Assertions.assertEquals(CommunityEndpointProtocol.HTTPS,
            model.properties().ruleCollection().get(0).protocols().get(0));
        Assertions.assertEquals("juewbcihxuuwhcjy", model.properties().ruleCollection().get(0).transitHubResourceId());
        Assertions.assertEquals("cybvpayakkudzpxg", model.properties().ruleCollection().get(0).endpointRuleName());
        Assertions.assertEquals("plmag", model.properties().ruleCollection().get(0).destination());
        Assertions.assertEquals("cyohpfkyrkdbd", model.properties().ruleCollection().get(0).ports());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CommunityEndpointResourceInner model = new CommunityEndpointResourceInner().withLocation("tfpmvmemfnczdw")
            .withTags(mapOf("db", "alxlllchp"))
            .withProperties(new CommunityEndpointProperties().withRuleCollection(
                Arrays.asList(new CommunityEndpointDestinationRule().withDestinationType(DestinationType.FQDN)
                    .withProtocols(Arrays.asList(CommunityEndpointProtocol.HTTPS, CommunityEndpointProtocol.ESP,
                        CommunityEndpointProtocol.TCP))
                    .withTransitHubResourceId("juewbcihxuuwhcjy")
                    .withEndpointRuleName("cybvpayakkudzpxg")
                    .withDestination("plmag")
                    .withPorts("cyohpfkyrkdbd"))));
        model = BinaryData.fromObject(model).toObject(CommunityEndpointResourceInner.class);
        Assertions.assertEquals("tfpmvmemfnczdw", model.location());
        Assertions.assertEquals("alxlllchp", model.tags().get("db"));
        Assertions.assertEquals(DestinationType.FQDN, model.properties().ruleCollection().get(0).destinationType());
        Assertions.assertEquals(CommunityEndpointProtocol.HTTPS,
            model.properties().ruleCollection().get(0).protocols().get(0));
        Assertions.assertEquals("juewbcihxuuwhcjy", model.properties().ruleCollection().get(0).transitHubResourceId());
        Assertions.assertEquals("cybvpayakkudzpxg", model.properties().ruleCollection().get(0).endpointRuleName());
        Assertions.assertEquals("plmag", model.properties().ruleCollection().get(0).destination());
        Assertions.assertEquals("cyohpfkyrkdbd", model.properties().ruleCollection().get(0).ports());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
