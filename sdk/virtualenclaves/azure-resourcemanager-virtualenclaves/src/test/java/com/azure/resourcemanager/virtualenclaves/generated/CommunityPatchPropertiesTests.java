// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalSettingsPatchProperties;
import com.azure.resourcemanager.virtualenclaves.models.CommunityPatchProperties;
import com.azure.resourcemanager.virtualenclaves.models.CommunityPropertiesPolicyOverride;
import com.azure.resourcemanager.virtualenclaves.models.FirewallSKU;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItem;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemEnforcement;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemOption;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemPolicyAction;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelJustification;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelMode;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationPatchModel;
import com.azure.resourcemanager.virtualenclaves.models.MandatoryApprover;
import com.azure.resourcemanager.virtualenclaves.models.Principal;
import com.azure.resourcemanager.virtualenclaves.models.PrincipalType;
import com.azure.resourcemanager.virtualenclaves.models.RoleAssignmentItem;
import com.azure.resourcemanager.virtualenclaves.models.ServiceIdentifier;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class CommunityPatchPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CommunityPatchProperties model = BinaryData.fromString(
            "{\"dnsServers\":[\"qugjhkycube\",\"dgssofwqmzqal\",\"rmnjijpx\",\"cqqudf\"],\"governedServiceList\":[{\"serviceId\":\"CosmosDB\",\"serviceName\":\"aaabjyvayff\",\"option\":\"ExceptionOnly\",\"enforcement\":\"Enabled\",\"policyAction\":\"AuditOnly\",\"initiatives\":[\"ogs\",\"xnevfdnwn\",\"mewzsyyc\"]},{\"serviceId\":\"MicrosoftSQL\",\"serviceName\":\"soibjudpfrx\",\"option\":\"NotApplicable\",\"enforcement\":\"Disabled\",\"policyAction\":\"Enforce\",\"initiatives\":[\"dwkqbrq\",\"bpaxhexiilivpdt\"]},{\"serviceId\":\"AppService\",\"serviceName\":\"q\",\"option\":\"ExceptionOnly\",\"enforcement\":\"Disabled\",\"policyAction\":\"Enforce\",\"initiatives\":[\"zfgs\"]},{\"serviceId\":\"PrivateDNSZones\",\"serviceName\":\"fxrxxle\",\"option\":\"ExceptionOnly\",\"enforcement\":\"Enabled\",\"policyAction\":\"AuditOnly\",\"initiatives\":[\"wlwnwxuqlcv\"]}],\"policyOverride\":\"None\",\"communityRoleAssignments\":[{\"roleDefinitionId\":\"tdooaoj\",\"principals\":[{\"id\":\"odko\",\"type\":\"ServicePrincipal\"},{\"id\":\"bw\",\"type\":\"User\"},{\"id\":\"jhemms\",\"type\":\"ServicePrincipal\"},{\"id\":\"dkcrodt\",\"type\":\"Group\"}]},{\"roleDefinitionId\":\"nfwjlfltkacjvefk\",\"principals\":[{\"id\":\"oakggkfpag\",\"type\":\"User\"},{\"id\":\"wpu\",\"type\":\"ServicePrincipal\"}]},{\"roleDefinitionId\":\"qblylsyxkqj\",\"principals\":[{\"id\":\"ervtiagxs\",\"type\":\"ServicePrincipal\"},{\"id\":\"zuempsbzkf\",\"type\":\"Group\"}]},{\"roleDefinitionId\":\"eyvpnqicvinvkj\",\"principals\":[{\"id\":\"xrbuukzclew\",\"type\":\"Group\"},{\"id\":\"mlwpazt\",\"type\":\"User\"},{\"id\":\"ofncckwyfzqwhxxb\",\"type\":\"User\"}]}],\"firewallSku\":\"Basic\",\"approvalSettings\":{\"mandatoryApprovers\":[{\"approverEntraId\":\"eqz\"},{\"approverEntraId\":\"ppriol\"},{\"approverEntraId\":\"or\"}]},\"maintenanceModeConfiguration\":{\"mode\":\"Advanced\",\"principals\":[{\"id\":\"lmncw\",\"type\":\"ServicePrincipal\"},{\"id\":\"bqwcsdbnwdcf\",\"type\":\"User\"},{\"id\":\"cqdpfuv\",\"type\":\"Group\"},{\"id\":\"sbjjc\",\"type\":\"Group\"}],\"justification\":\"Networking\"}}")
            .toObject(CommunityPatchProperties.class);
        Assertions.assertEquals("qugjhkycube", model.dnsServers().get(0));
        Assertions.assertEquals(ServiceIdentifier.COSMOS_DB, model.governedServiceList().get(0).serviceId());
        Assertions.assertEquals(GovernedServiceItemOption.EXCEPTION_ONLY, model.governedServiceList().get(0).option());
        Assertions.assertEquals(GovernedServiceItemEnforcement.ENABLED,
            model.governedServiceList().get(0).enforcement());
        Assertions.assertEquals(GovernedServiceItemPolicyAction.AUDIT_ONLY,
            model.governedServiceList().get(0).policyAction());
        Assertions.assertEquals(CommunityPropertiesPolicyOverride.NONE, model.policyOverride());
        Assertions.assertEquals("tdooaoj", model.communityRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("odko", model.communityRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.SERVICE_PRINCIPAL,
            model.communityRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals(FirewallSKU.BASIC, model.firewallSku());
        Assertions.assertEquals("eqz", model.approvalSettings().mandatoryApprovers().get(0).approverEntraId());
        Assertions.assertEquals(MaintenanceModeConfigurationModelMode.ADVANCED,
            model.maintenanceModeConfiguration().mode());
        Assertions.assertEquals("lmncw", model.maintenanceModeConfiguration().principals().get(0).id());
        Assertions.assertEquals(PrincipalType.SERVICE_PRINCIPAL,
            model.maintenanceModeConfiguration().principals().get(0).type());
        Assertions.assertEquals(MaintenanceModeConfigurationModelJustification.NETWORKING,
            model.maintenanceModeConfiguration().justification());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CommunityPatchProperties model = new CommunityPatchProperties()
            .withDnsServers(Arrays.asList("qugjhkycube", "dgssofwqmzqal", "rmnjijpx", "cqqudf"))
            .withGovernedServiceList(Arrays.asList(
                new GovernedServiceItem().withServiceId(ServiceIdentifier.COSMOS_DB)
                    .withOption(GovernedServiceItemOption.EXCEPTION_ONLY)
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withPolicyAction(GovernedServiceItemPolicyAction.AUDIT_ONLY),
                new GovernedServiceItem().withServiceId(ServiceIdentifier.MICROSOFT_SQL)
                    .withOption(GovernedServiceItemOption.NOT_APPLICABLE)
                    .withEnforcement(GovernedServiceItemEnforcement.DISABLED)
                    .withPolicyAction(GovernedServiceItemPolicyAction.ENFORCE),
                new GovernedServiceItem().withServiceId(ServiceIdentifier.APP_SERVICE)
                    .withOption(GovernedServiceItemOption.EXCEPTION_ONLY)
                    .withEnforcement(GovernedServiceItemEnforcement.DISABLED)
                    .withPolicyAction(GovernedServiceItemPolicyAction.ENFORCE),
                new GovernedServiceItem().withServiceId(ServiceIdentifier.PRIVATE_DNSZONES)
                    .withOption(GovernedServiceItemOption.EXCEPTION_ONLY)
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withPolicyAction(GovernedServiceItemPolicyAction.AUDIT_ONLY)))
            .withPolicyOverride(CommunityPropertiesPolicyOverride.NONE)
            .withCommunityRoleAssignments(Arrays.asList(new RoleAssignmentItem().withRoleDefinitionId("tdooaoj")
                .withPrincipals(Arrays.asList(new Principal().withId("odko").withType(PrincipalType.SERVICE_PRINCIPAL),
                    new Principal().withId("bw").withType(PrincipalType.USER),
                    new Principal().withId("jhemms").withType(PrincipalType.SERVICE_PRINCIPAL),
                    new Principal().withId("dkcrodt").withType(PrincipalType.GROUP))),
                new RoleAssignmentItem().withRoleDefinitionId("nfwjlfltkacjvefk")
                    .withPrincipals(Arrays.asList(new Principal().withId("oakggkfpag").withType(PrincipalType.USER),
                        new Principal().withId("wpu").withType(PrincipalType.SERVICE_PRINCIPAL))),
                new RoleAssignmentItem().withRoleDefinitionId("qblylsyxkqj")
                    .withPrincipals(
                        Arrays.asList(new Principal().withId("ervtiagxs").withType(PrincipalType.SERVICE_PRINCIPAL),
                            new Principal().withId("zuempsbzkf").withType(PrincipalType.GROUP))),
                new RoleAssignmentItem().withRoleDefinitionId("eyvpnqicvinvkj")
                    .withPrincipals(Arrays.asList(new Principal().withId("xrbuukzclew").withType(PrincipalType.GROUP),
                        new Principal().withId("mlwpazt").withType(PrincipalType.USER),
                        new Principal().withId("ofncckwyfzqwhxxb").withType(PrincipalType.USER)))))
            .withFirewallSku(FirewallSKU.BASIC)
            .withApprovalSettings(new ApprovalSettingsPatchProperties()
                .withMandatoryApprovers(Arrays.asList(new MandatoryApprover().withApproverEntraId("eqz"),
                    new MandatoryApprover().withApproverEntraId("ppriol"),
                    new MandatoryApprover().withApproverEntraId("or"))))
            .withMaintenanceModeConfiguration(new MaintenanceModeConfigurationPatchModel()
                .withMode(MaintenanceModeConfigurationModelMode.ADVANCED)
                .withPrincipals(Arrays.asList(new Principal().withId("lmncw").withType(PrincipalType.SERVICE_PRINCIPAL),
                    new Principal().withId("bqwcsdbnwdcf").withType(PrincipalType.USER),
                    new Principal().withId("cqdpfuv").withType(PrincipalType.GROUP),
                    new Principal().withId("sbjjc").withType(PrincipalType.GROUP)))
                .withJustification(MaintenanceModeConfigurationModelJustification.NETWORKING));
        model = BinaryData.fromObject(model).toObject(CommunityPatchProperties.class);
        Assertions.assertEquals("qugjhkycube", model.dnsServers().get(0));
        Assertions.assertEquals(ServiceIdentifier.COSMOS_DB, model.governedServiceList().get(0).serviceId());
        Assertions.assertEquals(GovernedServiceItemOption.EXCEPTION_ONLY, model.governedServiceList().get(0).option());
        Assertions.assertEquals(GovernedServiceItemEnforcement.ENABLED,
            model.governedServiceList().get(0).enforcement());
        Assertions.assertEquals(GovernedServiceItemPolicyAction.AUDIT_ONLY,
            model.governedServiceList().get(0).policyAction());
        Assertions.assertEquals(CommunityPropertiesPolicyOverride.NONE, model.policyOverride());
        Assertions.assertEquals("tdooaoj", model.communityRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("odko", model.communityRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.SERVICE_PRINCIPAL,
            model.communityRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals(FirewallSKU.BASIC, model.firewallSku());
        Assertions.assertEquals("eqz", model.approvalSettings().mandatoryApprovers().get(0).approverEntraId());
        Assertions.assertEquals(MaintenanceModeConfigurationModelMode.ADVANCED,
            model.maintenanceModeConfiguration().mode());
        Assertions.assertEquals("lmncw", model.maintenanceModeConfiguration().principals().get(0).id());
        Assertions.assertEquals(PrincipalType.SERVICE_PRINCIPAL,
            model.maintenanceModeConfiguration().principals().get(0).type());
        Assertions.assertEquals(MaintenanceModeConfigurationModelJustification.NETWORKING,
            model.maintenanceModeConfiguration().justification());
    }
}
