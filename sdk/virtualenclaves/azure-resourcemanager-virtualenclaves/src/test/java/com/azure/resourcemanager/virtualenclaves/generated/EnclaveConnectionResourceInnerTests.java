// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.virtualenclaves.fluent.models.EnclaveConnectionResourceInner;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveConnectionProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class EnclaveConnectionResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EnclaveConnectionResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"state\":\"Disconnected\",\"communityResourceId\":\"tlpdn\",\"sourceResourceId\":\"itvgbmhrixkwm\",\"sourceCidr\":\"jejveg\",\"destinationEndpointId\":\"hbpnaixexccbd\",\"provisioningState\":\"Deleting\",\"resourceCollection\":[\"cexdrrvqa\",\"qkghtpwijnhy\",\"svfycxzbfv\"]},\"location\":\"wvrvmtg\",\"tags\":{\"nsxkmcwaekrrjr\":\"pyostronzmyhgfi\",\"jglikkxwslolb\":\"afxtsgum\",\"elfk\":\"pvuzlmv\",\"njwmwkpnbsazejj\":\"gplcrpwjxeznoigb\"},\"id\":\"qkagfhsxt\",\"name\":\"augzxnfaazpxdtn\",\"type\":\"dm\"}")
            .toObject(EnclaveConnectionResourceInner.class);
        Assertions.assertEquals("wvrvmtg", model.location());
        Assertions.assertEquals("pyostronzmyhgfi", model.tags().get("nsxkmcwaekrrjr"));
        Assertions.assertEquals("tlpdn", model.properties().communityResourceId());
        Assertions.assertEquals("itvgbmhrixkwm", model.properties().sourceResourceId());
        Assertions.assertEquals("jejveg", model.properties().sourceCidr());
        Assertions.assertEquals("hbpnaixexccbd", model.properties().destinationEndpointId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EnclaveConnectionResourceInner model = new EnclaveConnectionResourceInner().withLocation("wvrvmtg")
            .withTags(mapOf("nsxkmcwaekrrjr", "pyostronzmyhgfi", "jglikkxwslolb", "afxtsgum", "elfk", "pvuzlmv",
                "njwmwkpnbsazejj", "gplcrpwjxeznoigb"))
            .withProperties(new EnclaveConnectionProperties().withCommunityResourceId("tlpdn")
                .withSourceResourceId("itvgbmhrixkwm")
                .withSourceCidr("jejveg")
                .withDestinationEndpointId("hbpnaixexccbd"));
        model = BinaryData.fromObject(model).toObject(EnclaveConnectionResourceInner.class);
        Assertions.assertEquals("wvrvmtg", model.location());
        Assertions.assertEquals("pyostronzmyhgfi", model.tags().get("nsxkmcwaekrrjr"));
        Assertions.assertEquals("tlpdn", model.properties().communityResourceId());
        Assertions.assertEquals("itvgbmhrixkwm", model.properties().sourceResourceId());
        Assertions.assertEquals("jejveg", model.properties().sourceCidr());
        Assertions.assertEquals("hbpnaixexccbd", model.properties().destinationEndpointId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
