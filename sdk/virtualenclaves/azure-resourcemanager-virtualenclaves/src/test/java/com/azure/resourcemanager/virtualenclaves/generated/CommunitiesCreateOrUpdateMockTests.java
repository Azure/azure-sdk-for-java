// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalPolicy;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalSettings;
import com.azure.resourcemanager.virtualenclaves.models.CommunityProperties;
import com.azure.resourcemanager.virtualenclaves.models.CommunityPropertiesPolicyOverride;
import com.azure.resourcemanager.virtualenclaves.models.CommunityResource;
import com.azure.resourcemanager.virtualenclaves.models.FirewallSKU;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItem;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemEnforcement;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemOption;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemPolicyAction;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModel;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelJustification;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelMode;
import com.azure.resourcemanager.virtualenclaves.models.ManagedServiceIdentity;
import com.azure.resourcemanager.virtualenclaves.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.virtualenclaves.models.MandatoryApprover;
import com.azure.resourcemanager.virtualenclaves.models.Principal;
import com.azure.resourcemanager.virtualenclaves.models.PrincipalType;
import com.azure.resourcemanager.virtualenclaves.models.RoleAssignmentItem;
import com.azure.resourcemanager.virtualenclaves.models.ServiceIdentifier;
import com.azure.resourcemanager.virtualenclaves.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CommunitiesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"addressSpace\":\"gmsplzgaufcshhv\",\"dnsServers\":[\"gnxkympqan\",\"rjkixtw\",\"taoypnyghshxc\",\"lhkgmnsghp\"],\"provisioningState\":\"Succeeded\",\"resourceCollection\":[\"drwjjkhvyom\",\"c\"],\"managedResourceGroupName\":\"zvxnqmhrp\",\"managedOnBehalfOfConfiguration\":{\"moboBrokerResources\":[{\"id\":\"mkoisqcssf\"},{\"id\":\"uifmc\"},{\"id\":\"p\"},{\"id\":\"kdqzrdzsylo\"}]},\"governedServiceList\":[{\"serviceId\":\"Monitoring\",\"serviceName\":\"czzydmxzjij\",\"option\":\"ExceptionOnly\",\"enforcement\":\"Enabled\",\"policyAction\":\"Enforce\",\"initiatives\":[\"ci\"]},{\"serviceId\":\"CosmosDB\",\"serviceName\":\"efxrdcoxnbk\",\"option\":\"Deny\",\"enforcement\":\"Disabled\",\"policyAction\":\"Enforce\",\"initiatives\":[\"bnqbpizxqltgrd\",\"gypxrxvbfihwuhvc\",\"a\",\"s\"]},{\"serviceId\":\"MicrosoftSQL\",\"serviceName\":\"rblmli\",\"option\":\"ExceptionOnly\",\"enforcement\":\"Disabled\",\"policyAction\":\"None\",\"initiatives\":[\"wqagnepzwa\",\"lsbs\",\"qqqagwwrxaomzi\"]},{\"serviceId\":\"AppService\",\"serviceName\":\"rrczezkhhltnj\",\"option\":\"Allow\",\"enforcement\":\"Disabled\",\"policyAction\":\"Enforce\",\"initiatives\":[\"oyueayfbpcmsp\",\"byrrueqth\",\"mg\",\"mbscbbx\"]}],\"policyOverride\":\"None\",\"communityRoleAssignments\":[{\"roleDefinitionId\":\"iidlop\",\"principals\":[{\"id\":\"wdpyq\",\"type\":\"User\"},{\"id\":\"bxubmdna\",\"type\":\"User\"},{\"id\":\"bqwremjela\",\"type\":\"ServicePrincipal\"}]},{\"roleDefinitionId\":\"cigeleohdbvqvw\",\"principals\":[{\"id\":\"opwbeonrlkwzd\",\"type\":\"User\"},{\"id\":\"bxcea\",\"type\":\"Group\"},{\"id\":\"cptsoqfyiase\",\"type\":\"Group\"},{\"id\":\"hkrttzrazis\",\"type\":\"ServicePrincipal\"}]},{\"roleDefinitionId\":\"kiuemv\",\"principals\":[{\"id\":\"wzohm\",\"type\":\"Group\"},{\"id\":\"xxbsojklinhmd\",\"type\":\"User\"},{\"id\":\"ysprq\",\"type\":\"ServicePrincipal\"}]}],\"firewallSku\":\"Standard\",\"approvalSettings\":{\"endpointCreation\":\"Required\",\"endpointUpdate\":\"NotRequired\",\"endpointDeletion\":\"NotRequired\",\"connectionCreation\":\"Required\",\"connectionUpdate\":\"Required\",\"connectionDeletion\":\"Required\",\"enclaveCreation\":\"Required\",\"enclaveDeletion\":\"NotRequired\",\"maintenanceMode\":\"NotRequired\",\"serviceCatalogDeployment\":\"NotRequired\",\"notificationOnApprovalCreation\":\"Required\",\"notificationOnApprovalAction\":\"NotRequired\",\"notificationOnApprovalDeletion\":\"NotRequired\",\"mandatoryApprovers\":[{\"approverEntraId\":\"oucqpqojx\"},{\"approverEntraId\":\"x\"},{\"approverEntraId\":\"rzdcgdzbenribcaw\"}],\"minimumApproversRequired\":5433436523913806814},\"maintenanceModeConfiguration\":{\"mode\":\"On\",\"principals\":[{\"id\":\"wflj\",\"type\":\"User\"},{\"id\":\"namtuatmzw\",\"type\":\"Group\"},{\"id\":\"jncqtjzmi\",\"type\":\"Group\"},{\"id\":\"gbgatzuuvbxn\",\"type\":\"User\"}],\"justification\":\"Networking\"}},\"identity\":{\"principalId\":\"gahttzlswvaj\",\"tenantId\":\"utlxjoqzasunwqrj\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"ydyvkfkmro\":{\"principalId\":\"haohcmbuo\",\"clientId\":\"jrohmbpyryxameb\"},\"ucygvo\":{\"principalId\":\"nehvsmt\",\"clientId\":\"lfpya\"},\"egjlgvvpa\":{\"principalId\":\"yunssx\",\"clientId\":\"hi\"},\"ofulopmjnle\":{\"principalId\":\"ksgbuxan\",\"clientId\":\"ygdhgaqipirpiwr\"}}},\"location\":\"hcbjpibk\",\"tags\":{\"oyin\":\"uuuercta\"},\"id\":\"qpbrlc\",\"name\":\"rduczkgofxyfs\",\"type\":\"uc\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        VirtualEnclavesManager manager = VirtualEnclavesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CommunityResource response = manager.communities()
            .define("xfbvfb")
            .withRegion("yqwcabvnuil")
            .withExistingResourceGroup("ibdafhrkmdyom")
            .withTags(mapOf("ugmrmf", "aswlp", "oauk", "lrxw", "moaedsxj", "fkvcisi"))
            .withProperties(new CommunityProperties().withAddressSpace("i")
                .withDnsServers(Arrays.asList("wpg", "deimawzov"))
                .withGovernedServiceList(Arrays.asList(
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.POSTGRE_SQL)
                        .withOption(GovernedServiceItemOption.DENY)
                        .withEnforcement(GovernedServiceItemEnforcement.DISABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.ENFORCE),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.PRIVATE_DNSZONES)
                        .withOption(GovernedServiceItemOption.NOT_APPLICABLE)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.NONE),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.COSMOS_DB)
                        .withOption(GovernedServiceItemOption.ALLOW)
                        .withEnforcement(GovernedServiceItemEnforcement.DISABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.NONE),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.AZURE_FIREWALLS)
                        .withOption(GovernedServiceItemOption.EXCEPTION_ONLY)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.AUDIT_ONLY)))
                .withPolicyOverride(CommunityPropertiesPolicyOverride.NONE)
                .withCommunityRoleAssignments(Arrays.asList(new RoleAssignmentItem().withRoleDefinitionId("qlhris")
                    .withPrincipals(Arrays.asList(new Principal().withId("miii").withType(PrincipalType.GROUP),
                        new Principal().withId("gqcg").withType(PrincipalType.SERVICE_PRINCIPAL)))))
                .withFirewallSku(FirewallSKU.BASIC)
                .withApprovalSettings(new ApprovalSettings().withEndpointCreation(ApprovalPolicy.NOT_REQUIRED)
                    .withEndpointUpdate(ApprovalPolicy.NOT_REQUIRED)
                    .withEndpointDeletion(ApprovalPolicy.NOT_REQUIRED)
                    .withConnectionCreation(ApprovalPolicy.REQUIRED)
                    .withConnectionUpdate(ApprovalPolicy.NOT_REQUIRED)
                    .withConnectionDeletion(ApprovalPolicy.REQUIRED)
                    .withEnclaveCreation(ApprovalPolicy.NOT_REQUIRED)
                    .withEnclaveDeletion(ApprovalPolicy.NOT_REQUIRED)
                    .withMaintenanceMode(ApprovalPolicy.NOT_REQUIRED)
                    .withServiceCatalogDeployment(ApprovalPolicy.REQUIRED)
                    .withNotificationOnApprovalCreation(ApprovalPolicy.REQUIRED)
                    .withNotificationOnApprovalAction(ApprovalPolicy.NOT_REQUIRED)
                    .withNotificationOnApprovalDeletion(ApprovalPolicy.NOT_REQUIRED)
                    .withMandatoryApprovers(
                        Arrays.asList(new MandatoryApprover().withApproverEntraId("lwphqlkccuzgyg")))
                    .withMinimumApproversRequired(1419473330453448629L))
                .withMaintenanceModeConfiguration(
                    new MaintenanceModeConfigurationModel().withMode(MaintenanceModeConfigurationModelMode.ADVANCED)
                        .withPrincipals(
                            Arrays.asList(new Principal().withId("wgniipr").withType(PrincipalType.SERVICE_PRINCIPAL),
                                new Principal().withId("vawuwzdufypivlsb").withType(PrincipalType.USER),
                                new Principal().withId("pmcubkmifoxxkub").withType(PrincipalType.GROUP),
                                new Principal().withId("havpmhbrbqgvg").withType(PrincipalType.GROUP)))
                        .withJustification(MaintenanceModeConfigurationModelJustification.OFF)))
            .withIdentity(
                new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("ljvrcmyfqipgxhnp", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("hcbjpibk", response.location());
        Assertions.assertEquals("uuuercta", response.tags().get("oyin"));
        Assertions.assertEquals("gmsplzgaufcshhv", response.properties().addressSpace());
        Assertions.assertEquals("gnxkympqan", response.properties().dnsServers().get(0));
        Assertions.assertEquals(ServiceIdentifier.MONITORING,
            response.properties().governedServiceList().get(0).serviceId());
        Assertions.assertEquals(GovernedServiceItemOption.EXCEPTION_ONLY,
            response.properties().governedServiceList().get(0).option());
        Assertions.assertEquals(GovernedServiceItemEnforcement.ENABLED,
            response.properties().governedServiceList().get(0).enforcement());
        Assertions.assertEquals(GovernedServiceItemPolicyAction.ENFORCE,
            response.properties().governedServiceList().get(0).policyAction());
        Assertions.assertEquals(CommunityPropertiesPolicyOverride.NONE, response.properties().policyOverride());
        Assertions.assertEquals("iidlop", response.properties().communityRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("wdpyq",
            response.properties().communityRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.USER,
            response.properties().communityRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals(FirewallSKU.STANDARD, response.properties().firewallSku());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, response.properties().approvalSettings().endpointCreation());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, response.properties().approvalSettings().endpointUpdate());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.properties().approvalSettings().endpointDeletion());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, response.properties().approvalSettings().connectionCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, response.properties().approvalSettings().connectionUpdate());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, response.properties().approvalSettings().connectionDeletion());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, response.properties().approvalSettings().enclaveCreation());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.properties().approvalSettings().enclaveDeletion());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.properties().approvalSettings().maintenanceMode());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.properties().approvalSettings().serviceCatalogDeployment());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            response.properties().approvalSettings().notificationOnApprovalCreation());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.properties().approvalSettings().notificationOnApprovalAction());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.properties().approvalSettings().notificationOnApprovalDeletion());
        Assertions.assertEquals("oucqpqojx",
            response.properties().approvalSettings().mandatoryApprovers().get(0).approverEntraId());
        Assertions.assertEquals(5433436523913806814L,
            response.properties().approvalSettings().minimumApproversRequired());
        Assertions.assertEquals(MaintenanceModeConfigurationModelMode.ON,
            response.properties().maintenanceModeConfiguration().mode());
        Assertions.assertEquals("wflj", response.properties().maintenanceModeConfiguration().principals().get(0).id());
        Assertions.assertEquals(PrincipalType.USER,
            response.properties().maintenanceModeConfiguration().principals().get(0).type());
        Assertions.assertEquals(MaintenanceModeConfigurationModelJustification.NETWORKING,
            response.properties().maintenanceModeConfiguration().justification());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
