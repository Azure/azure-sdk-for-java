// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.virtualenclaves.models.TransitHubPatchModel;
import com.azure.resourcemanager.virtualenclaves.models.TransitHubPatchProperties;
import com.azure.resourcemanager.virtualenclaves.models.TransitHubState;
import com.azure.resourcemanager.virtualenclaves.models.TransitOption;
import com.azure.resourcemanager.virtualenclaves.models.TransitOptionParams;
import com.azure.resourcemanager.virtualenclaves.models.TransitOptionType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TransitHubPatchModelTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TransitHubPatchModel model = BinaryData.fromString(
            "{\"properties\":{\"state\":\"Failed\",\"transitOption\":{\"type\":\"Gateway\",\"params\":{\"scaleUnits\":1576593550947167989,\"remoteVirtualNetworkId\":\"zimejzanlfzx\"}}},\"tags\":{\"okixrjqcir\":\"rmbzo\",\"szrnwo\":\"zpfrla\"}}")
            .toObject(TransitHubPatchModel.class);
        Assertions.assertEquals(TransitHubState.FAILED, model.properties().state());
        Assertions.assertEquals(TransitOptionType.GATEWAY, model.properties().transitOption().type());
        Assertions.assertEquals(1576593550947167989L, model.properties().transitOption().params().scaleUnits());
        Assertions.assertEquals("zimejzanlfzx", model.properties().transitOption().params().remoteVirtualNetworkId());
        Assertions.assertEquals("rmbzo", model.tags().get("okixrjqcir"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TransitHubPatchModel model = new TransitHubPatchModel()
            .withProperties(new TransitHubPatchProperties().withState(TransitHubState.FAILED)
                .withTransitOption(new TransitOption().withType(TransitOptionType.GATEWAY)
                    .withParams(new TransitOptionParams().withScaleUnits(1576593550947167989L)
                        .withRemoteVirtualNetworkId("zimejzanlfzx"))))
            .withTags(mapOf("okixrjqcir", "rmbzo", "szrnwo", "zpfrla"));
        model = BinaryData.fromObject(model).toObject(TransitHubPatchModel.class);
        Assertions.assertEquals(TransitHubState.FAILED, model.properties().state());
        Assertions.assertEquals(TransitOptionType.GATEWAY, model.properties().transitOption().type());
        Assertions.assertEquals(1576593550947167989L, model.properties().transitOption().params().scaleUnits());
        Assertions.assertEquals("zimejzanlfzx", model.properties().transitOption().params().remoteVirtualNetworkId());
        Assertions.assertEquals("rmbzo", model.tags().get("okixrjqcir"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
