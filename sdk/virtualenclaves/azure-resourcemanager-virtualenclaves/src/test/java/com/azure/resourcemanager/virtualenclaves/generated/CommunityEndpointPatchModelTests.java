// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.virtualenclaves.models.CommunityEndpointDestinationRule;
import com.azure.resourcemanager.virtualenclaves.models.CommunityEndpointPatchModel;
import com.azure.resourcemanager.virtualenclaves.models.CommunityEndpointPatchProperties;
import com.azure.resourcemanager.virtualenclaves.models.CommunityEndpointProtocol;
import com.azure.resourcemanager.virtualenclaves.models.DestinationType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CommunityEndpointPatchModelTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CommunityEndpointPatchModel model = BinaryData.fromString(
            "{\"properties\":{\"ruleCollection\":[{\"destinationType\":\"PrivateNetwork\",\"protocols\":[\"ESP\",\"TCP\"],\"transitHubResourceId\":\"vzvfvaawzqadfl\",\"endpointRuleName\":\"ur\",\"destination\":\"laecxndticok\",\"ports\":\"zmlqtmldgxo\"},{\"destinationType\":\"FQDNTag\",\"protocols\":[\"ICMP\",\"TCP\"],\"transitHubResourceId\":\"kciayzri\",\"endpointRuleName\":\"hya\",\"destination\":\"vjlboxqvk\",\"ports\":\"mxho\"},{\"destinationType\":\"IPAddress\",\"protocols\":[\"ICMP\",\"HTTPS\"],\"transitHubResourceId\":\"igu\",\"endpointRuleName\":\"nraauzz\",\"destination\":\"jazysdzhezwwvaiq\",\"ports\":\"vv\"}]},\"tags\":{\"ikvylauya\":\"kphhq\"}}")
            .toObject(CommunityEndpointPatchModel.class);
        Assertions.assertEquals(DestinationType.PRIVATE_NETWORK,
            model.properties().ruleCollection().get(0).destinationType());
        Assertions.assertEquals(CommunityEndpointProtocol.ESP,
            model.properties().ruleCollection().get(0).protocols().get(0));
        Assertions.assertEquals("vzvfvaawzqadfl", model.properties().ruleCollection().get(0).transitHubResourceId());
        Assertions.assertEquals("ur", model.properties().ruleCollection().get(0).endpointRuleName());
        Assertions.assertEquals("laecxndticok", model.properties().ruleCollection().get(0).destination());
        Assertions.assertEquals("zmlqtmldgxo", model.properties().ruleCollection().get(0).ports());
        Assertions.assertEquals("kphhq", model.tags().get("ikvylauya"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CommunityEndpointPatchModel model
            = new CommunityEndpointPatchModel()
                .withProperties(
                    new CommunityEndpointPatchProperties()
                        .withRuleCollection(Arrays.asList(
                            new CommunityEndpointDestinationRule().withDestinationType(DestinationType.PRIVATE_NETWORK)
                                .withProtocols(
                                    Arrays.asList(CommunityEndpointProtocol.ESP, CommunityEndpointProtocol.TCP))
                                .withTransitHubResourceId("vzvfvaawzqadfl")
                                .withEndpointRuleName("ur")
                                .withDestination("laecxndticok")
                                .withPorts("zmlqtmldgxo"),
                            new CommunityEndpointDestinationRule().withDestinationType(DestinationType.FQDNTAG)
                                .withProtocols(
                                    Arrays.asList(CommunityEndpointProtocol.ICMP, CommunityEndpointProtocol.TCP))
                                .withTransitHubResourceId("kciayzri")
                                .withEndpointRuleName("hya")
                                .withDestination("vjlboxqvk")
                                .withPorts("mxho"),
                            new CommunityEndpointDestinationRule().withDestinationType(DestinationType.IPADDRESS)
                                .withProtocols(
                                    Arrays.asList(CommunityEndpointProtocol.ICMP, CommunityEndpointProtocol.HTTPS))
                                .withTransitHubResourceId("igu")
                                .withEndpointRuleName("nraauzz")
                                .withDestination("jazysdzhezwwvaiq")
                                .withPorts("vv"))))
                .withTags(mapOf("ikvylauya", "kphhq"));
        model = BinaryData.fromObject(model).toObject(CommunityEndpointPatchModel.class);
        Assertions.assertEquals(DestinationType.PRIVATE_NETWORK,
            model.properties().ruleCollection().get(0).destinationType());
        Assertions.assertEquals(CommunityEndpointProtocol.ESP,
            model.properties().ruleCollection().get(0).protocols().get(0));
        Assertions.assertEquals("vzvfvaawzqadfl", model.properties().ruleCollection().get(0).transitHubResourceId());
        Assertions.assertEquals("ur", model.properties().ruleCollection().get(0).endpointRuleName());
        Assertions.assertEquals("laecxndticok", model.properties().ruleCollection().get(0).destination());
        Assertions.assertEquals("zmlqtmldgxo", model.properties().ruleCollection().get(0).ports());
        Assertions.assertEquals("kphhq", model.tags().get("ikvylauya"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
