// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalPolicy;
import com.azure.resourcemanager.virtualenclaves.models.CommunityPropertiesPolicyOverride;
import com.azure.resourcemanager.virtualenclaves.models.CommunityResource;
import com.azure.resourcemanager.virtualenclaves.models.FirewallSKU;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemEnforcement;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemOption;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemPolicyAction;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelJustification;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelMode;
import com.azure.resourcemanager.virtualenclaves.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.virtualenclaves.models.PrincipalType;
import com.azure.resourcemanager.virtualenclaves.models.ServiceIdentifier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CommunitiesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"addressSpace\":\"wahzjmucftbyr\",\"dnsServers\":[\"ohkpigqfu\",\"u\",\"kzmkwklsnoxaxmqe\"],\"provisioningState\":\"Accepted\",\"resourceCollection\":[\"jnhgwydyyn\",\"svkhgbv\",\"ta\",\"arfdlpukhpyrnei\"],\"managedResourceGroupName\":\"cpeogkhnmgbrou\",\"managedOnBehalfOfConfiguration\":{\"moboBrokerResources\":[{\"id\":\"fhp\"},{\"id\":\"azjzo\"},{\"id\":\"jxhpdulontacn\"},{\"id\":\"w\"}]},\"governedServiceList\":[{\"serviceId\":\"AKS\",\"serviceName\":\"evrh\",\"option\":\"Deny\",\"enforcement\":\"Disabled\",\"policyAction\":\"None\",\"initiatives\":[\"hnsduugwbsreur\"]},{\"serviceId\":\"MicrosoftSQL\",\"serviceName\":\"fuarenlvhht\",\"option\":\"Deny\",\"enforcement\":\"Disabled\",\"policyAction\":\"AuditOnly\",\"initiatives\":[\"kyfede\",\"jboslcqxypok\",\"hminqcymczngnbdx\",\"ewuninvud\"]},{\"serviceId\":\"KeyVault\",\"serviceName\":\"aqdtvqecrqctmxxd\",\"option\":\"ExceptionOnly\",\"enforcement\":\"Disabled\",\"policyAction\":\"AuditOnly\",\"initiatives\":[\"tx\",\"vtzn\",\"pxbannovvoxc\",\"ytprwnwvroev\"]}],\"policyOverride\":\"None\",\"communityRoleAssignments\":[{\"roleDefinitionId\":\"krrro\",\"principals\":[{\"id\":\"vnsasbcrymodi\",\"type\":\"User\"}]},{\"roleDefinitionId\":\"xkl\",\"principals\":[{\"id\":\"xnazpmkml\",\"type\":\"Group\"}]},{\"roleDefinitionId\":\"evfxzopjhbzxlioh\",\"principals\":[{\"id\":\"dtfgxqbawpcbb\",\"type\":\"Group\"}]}],\"firewallSku\":\"Basic\",\"approvalSettings\":{\"endpointCreation\":\"Required\",\"endpointUpdate\":\"Required\",\"endpointDeletion\":\"Required\",\"connectionCreation\":\"NotRequired\",\"connectionUpdate\":\"Required\",\"connectionDeletion\":\"NotRequired\",\"enclaveCreation\":\"Required\",\"enclaveDeletion\":\"Required\",\"maintenanceMode\":\"Required\",\"serviceCatalogDeployment\":\"NotRequired\",\"notificationOnApprovalCreation\":\"NotRequired\",\"notificationOnApprovalAction\":\"NotRequired\",\"notificationOnApprovalDeletion\":\"Required\",\"mandatoryApprovers\":[{\"approverEntraId\":\"mhmwffpl\"}],\"minimumApproversRequired\":647940693726687760},\"maintenanceModeConfiguration\":{\"mode\":\"General\",\"principals\":[{\"id\":\"ccrrvweyoxoyyu\",\"type\":\"ServicePrincipal\"},{\"id\":\"haim\",\"type\":\"User\"},{\"id\":\"iroqbosh\",\"type\":\"ServicePrincipal\"}],\"justification\":\"Networking\"}},\"identity\":{\"principalId\":\"yyrmfsvbp\",\"tenantId\":\"bopfppdbwnup\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"hqepvufhbzehewh\":{\"principalId\":\"um\",\"clientId\":\"jcaacfdmmcpugm\"},\"krsrrmoucs\":{\"principalId\":\"hnl\",\"clientId\":\"nbldxeaclgschori\"},\"bsxtkcudfbsfarfs\":{\"principalId\":\"ldpuviy\",\"clientId\":\"aabeolhbhlvbmxuq\"}}},\"location\":\"wlkjxn\",\"tags\":{\"ksaoafcluqvox\":\"wgfstmhqykizm\"},\"id\":\"ycjimryvwgcwwpbm\",\"name\":\"gwe\",\"type\":\"ydsx\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        VirtualEnclavesManager manager = VirtualEnclavesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<CommunityResource> response
            = manager.communities().listByResourceGroup("lnlg", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wlkjxn", response.iterator().next().location());
        Assertions.assertEquals("wgfstmhqykizm", response.iterator().next().tags().get("ksaoafcluqvox"));
        Assertions.assertEquals("wahzjmucftbyr", response.iterator().next().properties().addressSpace());
        Assertions.assertEquals("ohkpigqfu", response.iterator().next().properties().dnsServers().get(0));
        Assertions.assertEquals(ServiceIdentifier.AKS,
            response.iterator().next().properties().governedServiceList().get(0).serviceId());
        Assertions.assertEquals(GovernedServiceItemOption.DENY,
            response.iterator().next().properties().governedServiceList().get(0).option());
        Assertions.assertEquals(GovernedServiceItemEnforcement.DISABLED,
            response.iterator().next().properties().governedServiceList().get(0).enforcement());
        Assertions.assertEquals(GovernedServiceItemPolicyAction.NONE,
            response.iterator().next().properties().governedServiceList().get(0).policyAction());
        Assertions.assertEquals(CommunityPropertiesPolicyOverride.NONE,
            response.iterator().next().properties().policyOverride());
        Assertions.assertEquals("krrro",
            response.iterator().next().properties().communityRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("vnsasbcrymodi",
            response.iterator().next().properties().communityRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.USER,
            response.iterator().next().properties().communityRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals(FirewallSKU.BASIC, response.iterator().next().properties().firewallSku());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            response.iterator().next().properties().approvalSettings().endpointCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            response.iterator().next().properties().approvalSettings().endpointUpdate());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            response.iterator().next().properties().approvalSettings().endpointDeletion());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.iterator().next().properties().approvalSettings().connectionCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            response.iterator().next().properties().approvalSettings().connectionUpdate());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.iterator().next().properties().approvalSettings().connectionDeletion());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            response.iterator().next().properties().approvalSettings().enclaveCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            response.iterator().next().properties().approvalSettings().enclaveDeletion());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            response.iterator().next().properties().approvalSettings().maintenanceMode());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.iterator().next().properties().approvalSettings().serviceCatalogDeployment());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.iterator().next().properties().approvalSettings().notificationOnApprovalCreation());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.iterator().next().properties().approvalSettings().notificationOnApprovalAction());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            response.iterator().next().properties().approvalSettings().notificationOnApprovalDeletion());
        Assertions.assertEquals("mhmwffpl",
            response.iterator().next().properties().approvalSettings().mandatoryApprovers().get(0).approverEntraId());
        Assertions.assertEquals(647940693726687760L,
            response.iterator().next().properties().approvalSettings().minimumApproversRequired());
        Assertions.assertEquals(MaintenanceModeConfigurationModelMode.GENERAL,
            response.iterator().next().properties().maintenanceModeConfiguration().mode());
        Assertions.assertEquals("ccrrvweyoxoyyu",
            response.iterator().next().properties().maintenanceModeConfiguration().principals().get(0).id());
        Assertions.assertEquals(PrincipalType.SERVICE_PRINCIPAL,
            response.iterator().next().properties().maintenanceModeConfiguration().principals().get(0).type());
        Assertions.assertEquals(MaintenanceModeConfigurationModelJustification.NETWORKING,
            response.iterator().next().properties().maintenanceModeConfiguration().justification());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED,
            response.iterator().next().identity().type());
    }
}
