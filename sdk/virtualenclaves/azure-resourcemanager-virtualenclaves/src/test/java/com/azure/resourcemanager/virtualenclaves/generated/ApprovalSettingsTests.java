// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalPolicy;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalSettings;
import com.azure.resourcemanager.virtualenclaves.models.MandatoryApprover;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ApprovalSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApprovalSettings model = BinaryData.fromString(
            "{\"endpointCreation\":\"NotRequired\",\"endpointUpdate\":\"NotRequired\",\"endpointDeletion\":\"NotRequired\",\"connectionCreation\":\"Required\",\"connectionUpdate\":\"NotRequired\",\"connectionDeletion\":\"Required\",\"enclaveCreation\":\"Required\",\"enclaveDeletion\":\"Required\",\"maintenanceMode\":\"NotRequired\",\"serviceCatalogDeployment\":\"Required\",\"notificationOnApprovalCreation\":\"NotRequired\",\"notificationOnApprovalAction\":\"Required\",\"notificationOnApprovalDeletion\":\"NotRequired\",\"mandatoryApprovers\":[{\"approverEntraId\":\"afnn\"},{\"approverEntraId\":\"lpichk\"},{\"approverEntraId\":\"ymkcdyhb\"},{\"approverEntraId\":\"kkpwdreqnovvq\"}],\"minimumApproversRequired\":8526417198675254199}")
            .toObject(ApprovalSettings.class);
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.endpointCreation());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.endpointUpdate());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.endpointDeletion());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.connectionCreation());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.connectionUpdate());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.connectionDeletion());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.enclaveCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.enclaveDeletion());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.maintenanceMode());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.serviceCatalogDeployment());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.notificationOnApprovalCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.notificationOnApprovalAction());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.notificationOnApprovalDeletion());
        Assertions.assertEquals("afnn", model.mandatoryApprovers().get(0).approverEntraId());
        Assertions.assertEquals(8526417198675254199L, model.minimumApproversRequired());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApprovalSettings model = new ApprovalSettings().withEndpointCreation(ApprovalPolicy.NOT_REQUIRED)
            .withEndpointUpdate(ApprovalPolicy.NOT_REQUIRED)
            .withEndpointDeletion(ApprovalPolicy.NOT_REQUIRED)
            .withConnectionCreation(ApprovalPolicy.REQUIRED)
            .withConnectionUpdate(ApprovalPolicy.NOT_REQUIRED)
            .withConnectionDeletion(ApprovalPolicy.REQUIRED)
            .withEnclaveCreation(ApprovalPolicy.REQUIRED)
            .withEnclaveDeletion(ApprovalPolicy.REQUIRED)
            .withMaintenanceMode(ApprovalPolicy.NOT_REQUIRED)
            .withServiceCatalogDeployment(ApprovalPolicy.REQUIRED)
            .withNotificationOnApprovalCreation(ApprovalPolicy.NOT_REQUIRED)
            .withNotificationOnApprovalAction(ApprovalPolicy.REQUIRED)
            .withNotificationOnApprovalDeletion(ApprovalPolicy.NOT_REQUIRED)
            .withMandatoryApprovers(Arrays.asList(new MandatoryApprover().withApproverEntraId("afnn"),
                new MandatoryApprover().withApproverEntraId("lpichk"),
                new MandatoryApprover().withApproverEntraId("ymkcdyhb"),
                new MandatoryApprover().withApproverEntraId("kkpwdreqnovvq")))
            .withMinimumApproversRequired(8526417198675254199L);
        model = BinaryData.fromObject(model).toObject(ApprovalSettings.class);
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.endpointCreation());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.endpointUpdate());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.endpointDeletion());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.connectionCreation());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.connectionUpdate());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.connectionDeletion());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.enclaveCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.enclaveDeletion());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.maintenanceMode());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.serviceCatalogDeployment());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.notificationOnApprovalCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.notificationOnApprovalAction());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.notificationOnApprovalDeletion());
        Assertions.assertEquals("afnn", model.mandatoryApprovers().get(0).approverEntraId());
        Assertions.assertEquals(8526417198675254199L, model.minimumApproversRequired());
    }
}
