// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.virtualenclaves.models.CheckAddressSpaceAvailabilityRequest;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveVirtualNetworkModel;
import com.azure.resourcemanager.virtualenclaves.models.SubnetConfiguration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class CheckAddressSpaceAvailabilityRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CheckAddressSpaceAvailabilityRequest model = BinaryData.fromString(
            "{\"communityResourceId\":\"ai\",\"enclaveVirtualNetwork\":{\"networkName\":\"brgz\",\"networkSize\":\"msweypqwdxggicc\",\"customCidrRange\":\"xqhuexm\",\"subnetConfigurations\":[{\"subnetName\":\"lstvlzywe\",\"subnetResourceId\":\"zrncsdt\",\"networkPrefixSize\":1108362585,\"subnetDelegation\":\"siypbs\",\"addressPrefix\":\"ytguslf\",\"networkSecurityGroupResourceId\":\"dcygqukyhejhz\"},{\"subnetName\":\"sx\",\"subnetResourceId\":\"pelol\",\"networkPrefixSize\":517582343,\"subnetDelegation\":\"ksrpqv\",\"addressPrefix\":\"zraehtwd\",\"networkSecurityGroupResourceId\":\"ftswibyrcdlbhsh\"},{\"subnetName\":\"wpracstwitykhev\",\"subnetResourceId\":\"cedcpnmdy\",\"networkPrefixSize\":1994704768,\"subnetDelegation\":\"wzxltjc\",\"addressPrefix\":\"hlt\",\"networkSecurityGroupResourceId\":\"gcxn\"}],\"allowSubnetCommunication\":true}}")
            .toObject(CheckAddressSpaceAvailabilityRequest.class);
        Assertions.assertEquals("ai", model.communityResourceId());
        Assertions.assertEquals("brgz", model.enclaveVirtualNetwork().networkName());
        Assertions.assertEquals("msweypqwdxggicc", model.enclaveVirtualNetwork().networkSize());
        Assertions.assertEquals("xqhuexm", model.enclaveVirtualNetwork().customCidrRange());
        Assertions.assertEquals("lstvlzywe", model.enclaveVirtualNetwork().subnetConfigurations().get(0).subnetName());
        Assertions.assertEquals(1108362585,
            model.enclaveVirtualNetwork().subnetConfigurations().get(0).networkPrefixSize());
        Assertions.assertEquals("siypbs",
            model.enclaveVirtualNetwork().subnetConfigurations().get(0).subnetDelegation());
        Assertions.assertTrue(model.enclaveVirtualNetwork().allowSubnetCommunication());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CheckAddressSpaceAvailabilityRequest model
            = new CheckAddressSpaceAvailabilityRequest().withCommunityResourceId("ai")
                .withEnclaveVirtualNetwork(new EnclaveVirtualNetworkModel().withNetworkName("brgz")
                    .withNetworkSize("msweypqwdxggicc")
                    .withCustomCidrRange("xqhuexm")
                    .withSubnetConfigurations(Arrays.asList(
                        new SubnetConfiguration().withSubnetName("lstvlzywe")
                            .withNetworkPrefixSize(1108362585)
                            .withSubnetDelegation("siypbs"),
                        new SubnetConfiguration().withSubnetName("sx")
                            .withNetworkPrefixSize(517582343)
                            .withSubnetDelegation("ksrpqv"),
                        new SubnetConfiguration().withSubnetName("wpracstwitykhev")
                            .withNetworkPrefixSize(1994704768)
                            .withSubnetDelegation("wzxltjc")))
                    .withAllowSubnetCommunication(true));
        model = BinaryData.fromObject(model).toObject(CheckAddressSpaceAvailabilityRequest.class);
        Assertions.assertEquals("ai", model.communityResourceId());
        Assertions.assertEquals("brgz", model.enclaveVirtualNetwork().networkName());
        Assertions.assertEquals("msweypqwdxggicc", model.enclaveVirtualNetwork().networkSize());
        Assertions.assertEquals("xqhuexm", model.enclaveVirtualNetwork().customCidrRange());
        Assertions.assertEquals("lstvlzywe", model.enclaveVirtualNetwork().subnetConfigurations().get(0).subnetName());
        Assertions.assertEquals(1108362585,
            model.enclaveVirtualNetwork().subnetConfigurations().get(0).networkPrefixSize());
        Assertions.assertEquals("siypbs",
            model.enclaveVirtualNetwork().subnetConfigurations().get(0).subnetDelegation());
        Assertions.assertTrue(model.enclaveVirtualNetwork().allowSubnetCommunication());
    }
}
