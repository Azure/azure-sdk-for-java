// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.virtualenclaves.fluent.models.EnclaveEndpointResourceInner;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveEndpointDestinationRule;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveEndpointProperties;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveEndpointProtocol;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class EnclaveEndpointResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EnclaveEndpointResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"ruleCollection\":[{\"protocols\":[\"ICMP\",\"ESP\",\"TCP\"],\"endpointRuleName\":\"epttwqmsniff\",\"destination\":\"mqnrojlpijnkr\",\"ports\":\"rddh\"},{\"protocols\":[\"ESP\"],\"endpointRuleName\":\"zzronasx\",\"destination\":\"tozqyzhftwesgo\",\"ports\":\"zhonnxkrlgnyhmo\"},{\"protocols\":[\"AH\"],\"endpointRuleName\":\"gthrrghxjbdhq\",\"destination\":\"cx\",\"ports\":\"rpdsof\"},{\"protocols\":[\"TCP\",\"AH\"],\"endpointRuleName\":\"vbuswd\",\"destination\":\"yybyc\",\"ports\":\"nvjsrtkfa\"}],\"resourceCollection\":[\"pqgik\",\"zirtxdyuxzejntps\",\"wgioilqukry\",\"xtqmieoxor\"],\"provisioningState\":\"Creating\"},\"location\":\"hyaomtbghhavgr\",\"tags\":{\"jzhpjbibgjmfx\":\"fo\",\"cluyovwxnbkf\":\"mv\",\"zbomvzzbtdcqvpni\":\"zzxscyhwzdgiruj\"},\"id\":\"ujviylwdshfs\",\"name\":\"n\",\"type\":\"bgye\"}")
            .toObject(EnclaveEndpointResourceInner.class);
        Assertions.assertEquals("hyaomtbghhavgr", model.location());
        Assertions.assertEquals("fo", model.tags().get("jzhpjbibgjmfx"));
        Assertions.assertEquals(EnclaveEndpointProtocol.ICMP,
            model.properties().ruleCollection().get(0).protocols().get(0));
        Assertions.assertEquals("epttwqmsniff", model.properties().ruleCollection().get(0).endpointRuleName());
        Assertions.assertEquals("mqnrojlpijnkr", model.properties().ruleCollection().get(0).destination());
        Assertions.assertEquals("rddh", model.properties().ruleCollection().get(0).ports());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EnclaveEndpointResourceInner model = new EnclaveEndpointResourceInner().withLocation("hyaomtbghhavgr")
            .withTags(mapOf("jzhpjbibgjmfx", "fo", "cluyovwxnbkf", "mv", "zbomvzzbtdcqvpni", "zzxscyhwzdgiruj"))
            .withProperties(new EnclaveEndpointProperties().withRuleCollection(Arrays.asList(
                new EnclaveEndpointDestinationRule()
                    .withProtocols(Arrays.asList(EnclaveEndpointProtocol.ICMP, EnclaveEndpointProtocol.ESP,
                        EnclaveEndpointProtocol.TCP))
                    .withEndpointRuleName("epttwqmsniff")
                    .withDestination("mqnrojlpijnkr")
                    .withPorts("rddh"),
                new EnclaveEndpointDestinationRule().withProtocols(Arrays.asList(EnclaveEndpointProtocol.ESP))
                    .withEndpointRuleName("zzronasx")
                    .withDestination("tozqyzhftwesgo")
                    .withPorts("zhonnxkrlgnyhmo"),
                new EnclaveEndpointDestinationRule().withProtocols(Arrays.asList(EnclaveEndpointProtocol.AH))
                    .withEndpointRuleName("gthrrghxjbdhq")
                    .withDestination("cx")
                    .withPorts("rpdsof"),
                new EnclaveEndpointDestinationRule()
                    .withProtocols(Arrays.asList(EnclaveEndpointProtocol.TCP, EnclaveEndpointProtocol.AH))
                    .withEndpointRuleName("vbuswd")
                    .withDestination("yybyc")
                    .withPorts("nvjsrtkfa"))));
        model = BinaryData.fromObject(model).toObject(EnclaveEndpointResourceInner.class);
        Assertions.assertEquals("hyaomtbghhavgr", model.location());
        Assertions.assertEquals("fo", model.tags().get("jzhpjbibgjmfx"));
        Assertions.assertEquals(EnclaveEndpointProtocol.ICMP,
            model.properties().ruleCollection().get(0).protocols().get(0));
        Assertions.assertEquals("epttwqmsniff", model.properties().ruleCollection().get(0).endpointRuleName());
        Assertions.assertEquals("mqnrojlpijnkr", model.properties().ruleCollection().get(0).destination());
        Assertions.assertEquals("rddh", model.properties().ruleCollection().get(0).ports());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
