// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveConnectionProperties;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveConnectionResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class EnclaveConnectionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"state\":\"Approved\",\"communityResourceId\":\"vbxgkqusyb\",\"sourceResourceId\":\"ptdacarvvl\",\"sourceCidr\":\"tymtpoiwenazer\",\"destinationEndpointId\":\"hzr\",\"provisioningState\":\"Succeeded\",\"resourceCollection\":[\"xkdnwqapf\",\"sdpcvess\",\"zhhkuuipldqqc\",\"ekvalblhtjq\"]},\"location\":\"yvwehtaemxh\",\"tags\":{\"usxivzrrryvei\":\"se\"},\"id\":\"ipsk\",\"name\":\"yzatvfuzkaft\",\"type\":\"vvruxwi\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        VirtualEnclavesManager manager = VirtualEnclavesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        EnclaveConnectionResource response = manager.enclaveConnections()
            .define("qsczpgvdwnapfdqw")
            .withRegion("xfkndlqvtwknvgm")
            .withExistingResourceGroup("zffovwmbjl")
            .withTags(
                mapOf("tgroesh", "gtywatmqaqkue", "yf", "ygzc", "faoytehqpuv", "x", "ndljdjuskbr", "mvqmtdwckygroej"))
            .withProperties(new EnclaveConnectionProperties().withCommunityResourceId("ptnuwjtkschgc")
                .withSourceResourceId("qyhleseyq")
                .withSourceCidr("vyeldot")
                .withDestinationEndpointId("v"))
            .create();

        Assertions.assertEquals("yvwehtaemxh", response.location());
        Assertions.assertEquals("se", response.tags().get("usxivzrrryvei"));
        Assertions.assertEquals("vbxgkqusyb", response.properties().communityResourceId());
        Assertions.assertEquals("ptdacarvvl", response.properties().sourceResourceId());
        Assertions.assertEquals("tymtpoiwenazer", response.properties().sourceCidr());
        Assertions.assertEquals("hzr", response.properties().destinationEndpointId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
