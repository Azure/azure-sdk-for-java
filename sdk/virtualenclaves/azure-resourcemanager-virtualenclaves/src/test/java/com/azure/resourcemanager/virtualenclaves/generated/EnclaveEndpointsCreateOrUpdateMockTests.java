// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveEndpointDestinationRule;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveEndpointProperties;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveEndpointProtocol;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveEndpointResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class EnclaveEndpointsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"ruleCollection\":[{\"protocols\":[\"ICMP\",\"TCP\",\"ANY\",\"ANY\"],\"endpointRuleName\":\"aqbzgyhfwwvuatbw\",\"destination\":\"amteuliyslpkc\",\"ports\":\"w\"},{\"protocols\":[\"ANY\"],\"endpointRuleName\":\"epmywbormcqm\",\"destination\":\"iijq\",\"ports\":\"zfboj\"},{\"protocols\":[\"UDP\",\"ESP\",\"UDP\"],\"endpointRuleName\":\"qwixvcpwnk\",\"destination\":\"wzwofalickduo\",\"ports\":\"tamtyv\"},{\"protocols\":[\"ICMP\",\"TCP\",\"TCP\"],\"endpointRuleName\":\"awnvsbcfhza\",\"destination\":\"nvhycvdimwrz\",\"ports\":\"gzgy\"}],\"resourceCollection\":[\"trwpw\",\"ryekzkd\",\"meottawj\"],\"provisioningState\":\"Succeeded\"},\"location\":\"wwhnhjtfvpn\",\"tags\":{\"jpnwynudql\":\"i\",\"lxeehuxiq\":\"zsauzp\",\"xls\":\"zlrayme\"},\"id\":\"ihmxrfdsajredn\",\"name\":\"yyshtuwgmevua\",\"type\":\"pwzyi\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        VirtualEnclavesManager manager = VirtualEnclavesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        EnclaveEndpointResource response = manager.enclaveEndpoints()
            .define("yeji")
            .withRegion("v")
            .withExistingVirtualEnclave("vbiztjofqcv", "vjufycsjmlbe")
            .withTags(mapOf("uazjcgmxitpfinz", "goaqylkjztj", "mtbdrvcqgu", "pdltkrlg", "urelyujlfyoump", "fzhompheq",
                "brzmqxucycijoclx", "kyeclcdigpta"))
            .withProperties(new EnclaveEndpointProperties().withRuleCollection(Arrays.asList(
                new EnclaveEndpointDestinationRule()
                    .withProtocols(Arrays.asList(EnclaveEndpointProtocol.UDP, EnclaveEndpointProtocol.ESP,
                        EnclaveEndpointProtocol.ICMP))
                    .withEndpointRuleName("rtudawlpjfel")
                    .withDestination("rpptcbgqnzmnhiil")
                    .withPorts("lwcjgckbbcccgzpr"),
                new EnclaveEndpointDestinationRule()
                    .withProtocols(Arrays.asList(EnclaveEndpointProtocol.AH, EnclaveEndpointProtocol.ICMP,
                        EnclaveEndpointProtocol.ESP, EnclaveEndpointProtocol.ESP))
                    .withEndpointRuleName("a")
                    .withDestination("gftipwc")
                    .withPorts("yubhiqdx"),
                new EnclaveEndpointDestinationRule()
                    .withProtocols(Arrays.asList(EnclaveEndpointProtocol.AH, EnclaveEndpointProtocol.ICMP,
                        EnclaveEndpointProtocol.ICMP, EnclaveEndpointProtocol.AH))
                    .withEndpointRuleName("zafccnuhiigb")
                    .withDestination("bui")
                    .withPorts("xvatvcr"),
                new EnclaveEndpointDestinationRule().withProtocols(Arrays.asList(EnclaveEndpointProtocol.TCP))
                    .withEndpointRuleName("bqxvhcsyhzlwxae")
                    .withDestination("vurex")
                    .withPorts("d"))))
            .create();

        Assertions.assertEquals("wwhnhjtfvpn", response.location());
        Assertions.assertEquals("i", response.tags().get("jpnwynudql"));
        Assertions.assertEquals(EnclaveEndpointProtocol.ICMP,
            response.properties().ruleCollection().get(0).protocols().get(0));
        Assertions.assertEquals("aqbzgyhfwwvuatbw", response.properties().ruleCollection().get(0).endpointRuleName());
        Assertions.assertEquals("amteuliyslpkc", response.properties().ruleCollection().get(0).destination());
        Assertions.assertEquals("w", response.properties().ruleCollection().get(0).ports());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
