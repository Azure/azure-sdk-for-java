// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager;
import com.azure.resourcemanager.virtualenclaves.models.CheckAddressSpaceAvailabilityRequest;
import com.azure.resourcemanager.virtualenclaves.models.CheckAddressSpaceAvailabilityResponse;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveVirtualNetworkModel;
import com.azure.resourcemanager.virtualenclaves.models.SubnetConfiguration;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CommunitiesCheckAddressSpaceAvailabilityWithResponseMockTests {
    @Test
    public void testCheckAddressSpaceAvailabilityWithResponse() throws Exception {
        String responseStr = "{\"value\":true}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        VirtualEnclavesManager manager = VirtualEnclavesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CheckAddressSpaceAvailabilityResponse response = manager.communities()
            .checkAddressSpaceAvailabilityWithResponse("plkeuachtomflryt", "wfpfmdgycx",
                new CheckAddressSpaceAvailabilityRequest().withCommunityResourceId("mskwhqjjysl")
                    .withEnclaveVirtualNetwork(new EnclaveVirtualNetworkModel().withNetworkName("lpshhkvpedwqslsr")
                        .withNetworkSize("pq")
                        .withCustomCidrRange("wskondcbrwimuvqe")
                        .withSubnetConfigurations(
                            Arrays.asList(new SubnetConfiguration().withSubnetName("ovyrrleaesinu")
                                .withNetworkPrefixSize(1688205844)
                                .withSubnetDelegation("brjbbmpxdlvy")))
                        .withAllowSubnetCommunication(false)),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertTrue(response.value());
    }
}
