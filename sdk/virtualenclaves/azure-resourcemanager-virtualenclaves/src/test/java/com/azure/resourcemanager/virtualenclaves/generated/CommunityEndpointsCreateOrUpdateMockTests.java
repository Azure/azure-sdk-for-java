// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager;
import com.azure.resourcemanager.virtualenclaves.models.CommunityEndpointDestinationRule;
import com.azure.resourcemanager.virtualenclaves.models.CommunityEndpointProperties;
import com.azure.resourcemanager.virtualenclaves.models.CommunityEndpointProtocol;
import com.azure.resourcemanager.virtualenclaves.models.CommunityEndpointResource;
import com.azure.resourcemanager.virtualenclaves.models.DestinationType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CommunityEndpointsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"ruleCollection\":[{\"destinationType\":\"IPAddress\",\"protocols\":[\"ESP\",\"ESP\"],\"transitHubResourceId\":\"vadrmm\",\"endpointRuleName\":\"uawvcmjzk\",\"destination\":\"idisczskosw\",\"ports\":\"iqazugamxzkr\"},{\"destinationType\":\"PrivateNetwork\",\"protocols\":[\"ESP\",\"ICMP\",\"ICMP\"],\"transitHubResourceId\":\"nppcce\",\"endpointRuleName\":\"ztdsbeza\",\"destination\":\"f\",\"ports\":\"zxuizhyhnepkpe\"},{\"destinationType\":\"FQDNTag\",\"protocols\":[\"HTTPS\",\"ESP\",\"HTTP\",\"HTTPS\"],\"transitHubResourceId\":\"dukecp\",\"endpointRuleName\":\"azvdhctmmkosz\",\"destination\":\"blnsntrpcaqk\",\"ports\":\"f\"}],\"resourceCollection\":[\"fmhklbnld\",\"vcb\",\"hez\",\"quwusq\"],\"provisioningState\":\"Succeeded\"},\"location\":\"pbrruyu\",\"tags\":{\"jwcolbm\":\"vlm\",\"z\":\"lbnwtpcpahp\",\"ngxno\":\"vxhmtfhocnxzcmj\",\"sn\":\"rxtd\"},\"id\":\"evhdlmydid\",\"name\":\"hepfwwtjfdoes\",\"type\":\"xhmw\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        VirtualEnclavesManager manager = VirtualEnclavesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CommunityEndpointResource response
            = manager.communityEndpoints()
                .define("jpodtbl")
                .withRegion("jroumzzn")
                .withExistingCommunity("ah", "hxalybxawo")
                .withTags(mapOf("pusllywpv", "qjrhuzgfxonj"))
                .withProperties(
                    new CommunityEndpointProperties()
                        .withRuleCollection(Arrays.asList(
                            new CommunityEndpointDestinationRule().withDestinationType(DestinationType.IPADDRESS)
                                .withProtocols(
                                    Arrays.asList(CommunityEndpointProtocol.AH, CommunityEndpointProtocol.UDP))
                                .withTransitHubResourceId("qhykincn")
                                .withEndpointRuleName("mehllizhceu")
                                .withDestination("qodkadppyibngql")
                                .withPorts("ywrxw"),
                            new CommunityEndpointDestinationRule().withDestinationType(DestinationType.PRIVATE_NETWORK)
                                .withProtocols(
                                    Arrays.asList(CommunityEndpointProtocol.AH, CommunityEndpointProtocol.ICMP))
                                .withTransitHubResourceId("adswz")
                                .withEndpointRuleName("uyem")
                                .withDestination("wuowhlxlnwy")
                                .withPorts("ouvblgmo"),
                            new CommunityEndpointDestinationRule().withDestinationType(DestinationType.FQDNTAG)
                                .withProtocols(Arrays.asList(CommunityEndpointProtocol.HTTPS,
                                    CommunityEndpointProtocol.HTTP, CommunityEndpointProtocol.HTTP))
                                .withTransitHubResourceId("tdvrfmv")
                                .withEndpointRuleName("hcvjdrqc")
                                .withDestination("idhftu")
                                .withPorts("hdxlw"))))
                .create();

        Assertions.assertEquals("pbrruyu", response.location());
        Assertions.assertEquals("vlm", response.tags().get("jwcolbm"));
        Assertions.assertEquals(DestinationType.IPADDRESS,
            response.properties().ruleCollection().get(0).destinationType());
        Assertions.assertEquals(CommunityEndpointProtocol.ESP,
            response.properties().ruleCollection().get(0).protocols().get(0));
        Assertions.assertEquals("vadrmm", response.properties().ruleCollection().get(0).transitHubResourceId());
        Assertions.assertEquals("uawvcmjzk", response.properties().ruleCollection().get(0).endpointRuleName());
        Assertions.assertEquals("idisczskosw", response.properties().ruleCollection().get(0).destination());
        Assertions.assertEquals("iqazugamxzkr", response.properties().ruleCollection().get(0).ports());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
