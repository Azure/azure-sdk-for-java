// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.virtualenclaves.models.ActionPerformed;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalPatchModel;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalPatchProperties;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalStatus;
import com.azure.resourcemanager.virtualenclaves.models.Approver;
import com.azure.resourcemanager.virtualenclaves.models.RequestMetadataUpdatableProperties;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ApprovalPatchModelTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApprovalPatchModel model = BinaryData.fromString(
            "{\"properties\":{\"parentResourceId\":\"lkdghr\",\"grandparentResourceId\":\"uutlwxezwzhok\",\"approvers\":[{\"approverEntraId\":\"nhhtql\",\"actionPerformed\":\"Rejected\",\"lastUpdatedAt\":\"2021-02-03T16:42:47Z\"},{\"approverEntraId\":\"ppipifhpfeoa\",\"actionPerformed\":\"Approved\",\"lastUpdatedAt\":\"2021-07-22T11:56:16Z\"},{\"approverEntraId\":\"xtxj\",\"actionPerformed\":\"Approved\",\"lastUpdatedAt\":\"2021-04-16T00:22:41Z\"},{\"approverEntraId\":\"afidltugsres\",\"actionPerformed\":\"Rejected\",\"lastUpdatedAt\":\"2021-08-27T02:15:10Z\"}],\"ticketId\":\"oiftxfkfwegprh\",\"createdAt\":\"2021-01-06T18:32:33Z\",\"stateChangedAt\":\"2021-12-03T09:50:25Z\",\"requestMetadata\":{\"resourceAction\":\"ucb\",\"approvalCallbackRoute\":\"tgdqohmcwsldriz\",\"approvalCallbackPayload\":\"pwbralllibphbqz\",\"approvalStatus\":\"Approved\"}}}")
            .toObject(ApprovalPatchModel.class);
        Assertions.assertEquals("lkdghr", model.properties().parentResourceId());
        Assertions.assertEquals("uutlwxezwzhok", model.properties().grandparentResourceId());
        Assertions.assertEquals("nhhtql", model.properties().approvers().get(0).approverEntraId());
        Assertions.assertEquals(ActionPerformed.REJECTED, model.properties().approvers().get(0).actionPerformed());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-03T16:42:47Z"),
            model.properties().approvers().get(0).lastUpdatedAt());
        Assertions.assertEquals("oiftxfkfwegprh", model.properties().ticketId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-06T18:32:33Z"), model.properties().createdAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-03T09:50:25Z"), model.properties().stateChangedAt());
        Assertions.assertEquals("ucb", model.properties().requestMetadata().resourceAction());
        Assertions.assertEquals("tgdqohmcwsldriz", model.properties().requestMetadata().approvalCallbackRoute());
        Assertions.assertEquals("pwbralllibphbqz", model.properties().requestMetadata().approvalCallbackPayload());
        Assertions.assertEquals(ApprovalStatus.APPROVED, model.properties().requestMetadata().approvalStatus());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApprovalPatchModel model
            = new ApprovalPatchModel().withProperties(new ApprovalPatchProperties().withParentResourceId("lkdghr")
                .withGrandparentResourceId("uutlwxezwzhok")
                .withApprovers(Arrays.asList(
                    new Approver().withApproverEntraId("nhhtql")
                        .withActionPerformed(ActionPerformed.REJECTED)
                        .withLastUpdatedAt(OffsetDateTime.parse("2021-02-03T16:42:47Z")),
                    new Approver().withApproverEntraId("ppipifhpfeoa")
                        .withActionPerformed(ActionPerformed.APPROVED)
                        .withLastUpdatedAt(OffsetDateTime.parse("2021-07-22T11:56:16Z")),
                    new Approver().withApproverEntraId("xtxj")
                        .withActionPerformed(ActionPerformed.APPROVED)
                        .withLastUpdatedAt(OffsetDateTime.parse("2021-04-16T00:22:41Z")),
                    new Approver().withApproverEntraId("afidltugsres")
                        .withActionPerformed(ActionPerformed.REJECTED)
                        .withLastUpdatedAt(OffsetDateTime.parse("2021-08-27T02:15:10Z"))))
                .withTicketId("oiftxfkfwegprh")
                .withCreatedAt(OffsetDateTime.parse("2021-01-06T18:32:33Z"))
                .withStateChangedAt(OffsetDateTime.parse("2021-12-03T09:50:25Z"))
                .withRequestMetadata(new RequestMetadataUpdatableProperties().withResourceAction("ucb")
                    .withApprovalCallbackRoute("tgdqohmcwsldriz")
                    .withApprovalCallbackPayload("pwbralllibphbqz")
                    .withApprovalStatus(ApprovalStatus.APPROVED)));
        model = BinaryData.fromObject(model).toObject(ApprovalPatchModel.class);
        Assertions.assertEquals("lkdghr", model.properties().parentResourceId());
        Assertions.assertEquals("uutlwxezwzhok", model.properties().grandparentResourceId());
        Assertions.assertEquals("nhhtql", model.properties().approvers().get(0).approverEntraId());
        Assertions.assertEquals(ActionPerformed.REJECTED, model.properties().approvers().get(0).actionPerformed());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-03T16:42:47Z"),
            model.properties().approvers().get(0).lastUpdatedAt());
        Assertions.assertEquals("oiftxfkfwegprh", model.properties().ticketId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-06T18:32:33Z"), model.properties().createdAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-03T09:50:25Z"), model.properties().stateChangedAt());
        Assertions.assertEquals("ucb", model.properties().requestMetadata().resourceAction());
        Assertions.assertEquals("tgdqohmcwsldriz", model.properties().requestMetadata().approvalCallbackRoute());
        Assertions.assertEquals("pwbralllibphbqz", model.properties().requestMetadata().approvalCallbackPayload());
        Assertions.assertEquals(ApprovalStatus.APPROVED, model.properties().requestMetadata().approvalStatus());
    }
}
