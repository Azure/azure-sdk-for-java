// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalPolicy;
import com.azure.resourcemanager.virtualenclaves.models.CommunityPropertiesPolicyOverride;
import com.azure.resourcemanager.virtualenclaves.models.CommunityResource;
import com.azure.resourcemanager.virtualenclaves.models.FirewallSKU;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemEnforcement;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemOption;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemPolicyAction;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelJustification;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelMode;
import com.azure.resourcemanager.virtualenclaves.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.virtualenclaves.models.PrincipalType;
import com.azure.resourcemanager.virtualenclaves.models.ServiceIdentifier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CommunitiesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"addressSpace\":\"ohec\",\"dnsServers\":[\"pwndyqlea\",\"lklmtkhlo\",\"kxxpvbrd\",\"jmzsyzfh\"],\"provisioningState\":\"Running\",\"resourceCollection\":[\"k\",\"yych\"],\"managedResourceGroupName\":\"sjlpjrtwszhv\",\"managedOnBehalfOfConfiguration\":{\"moboBrokerResources\":[{\"id\":\"hvtrrmhwrbfdpyf\"}]},\"governedServiceList\":[{\"serviceId\":\"KeyVault\",\"serviceName\":\"jgl\",\"option\":\"NotApplicable\",\"enforcement\":\"Enabled\",\"policyAction\":\"None\",\"initiatives\":[\"hmem\",\"ooclutnp\",\"memczjkmmyk\",\"ujxsglhsr\"]},{\"serviceId\":\"KeyVault\",\"serviceName\":\"ejylmbkzu\",\"option\":\"ExceptionOnly\",\"enforcement\":\"Enabled\",\"policyAction\":\"None\",\"initiatives\":[\"tjewlpxuzzj\",\"nrefqyh\",\"otoihiqa\",\"ydiw\"]}],\"policyOverride\":\"None\",\"communityRoleAssignments\":[{\"roleDefinitionId\":\"pzdqtvhcspod\",\"principals\":[{\"id\":\"xsi\",\"type\":\"ServicePrincipal\"},{\"id\":\"etgbebjfulb\",\"type\":\"User\"},{\"id\":\"ichdlpn\",\"type\":\"User\"}]},{\"roleDefinitionId\":\"ubntnbatzviqsow\",\"principals\":[{\"id\":\"el\",\"type\":\"ServicePrincipal\"},{\"id\":\"ttcjuhplrvkmjc\",\"type\":\"User\"}]},{\"roleDefinitionId\":\"jvlgfggcvkyyliz\",\"principals\":[{\"id\":\"jpsfxsfu\",\"type\":\"ServicePrincipal\"},{\"id\":\"lvt\",\"type\":\"User\"},{\"id\":\"agb\",\"type\":\"User\"},{\"id\":\"dqlvhukoveof\",\"type\":\"User\"}]}],\"firewallSku\":\"Standard\",\"approvalSettings\":{\"endpointCreation\":\"NotRequired\",\"endpointUpdate\":\"Required\",\"endpointDeletion\":\"Required\",\"connectionCreation\":\"NotRequired\",\"connectionUpdate\":\"Required\",\"connectionDeletion\":\"Required\",\"enclaveCreation\":\"NotRequired\",\"enclaveDeletion\":\"Required\",\"maintenanceMode\":\"NotRequired\",\"serviceCatalogDeployment\":\"NotRequired\",\"notificationOnApprovalCreation\":\"NotRequired\",\"notificationOnApprovalAction\":\"NotRequired\",\"notificationOnApprovalDeletion\":\"NotRequired\",\"mandatoryApprovers\":[{\"approverEntraId\":\"uuyjucejikz\"},{\"approverEntraId\":\"eovvtzej\"},{\"approverEntraId\":\"tjklntikyjuzk\"}],\"minimumApproversRequired\":4359795110481373493},\"maintenanceModeConfiguration\":{\"mode\":\"CanNotDelete\",\"principals\":[{\"id\":\"zvhqjwtrhtgvg\",\"type\":\"Group\"}],\"justification\":\"Networking\"}},\"identity\":{\"principalId\":\"olawjmjsmwrokcdx\",\"tenantId\":\"zz\",\"type\":\"None\",\"userAssignedIdentities\":{\"sgzv\":{\"principalId\":\"itlhguyn\",\"clientId\":\"hlgmltxdwhmoz\"},\"rag\":{\"principalId\":\"snnjzfpafolpym\",\"clientId\":\"mxq\"},\"ejchcsrlz\":{\"principalId\":\"dphtv\",\"clientId\":\"lajv\"},\"nzqtpjhmqrhvt\":{\"principalId\":\"mzlanru\",\"clientId\":\"wvnph\"}}},\"location\":\"aiwdcxsmlzzhz\",\"tags\":{\"b\":\"etlgydlhqvlnnpx\",\"gjekglklby\":\"fiqgeaar\",\"hj\":\"lidwcwvmzegjon\"},\"id\":\"rwgdnqzbrfks\",\"name\":\"zhzmtksjci\",\"type\":\"digsxcdgl\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        VirtualEnclavesManager manager = VirtualEnclavesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<CommunityResource> response = manager.communities().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("aiwdcxsmlzzhz", response.iterator().next().location());
        Assertions.assertEquals("etlgydlhqvlnnpx", response.iterator().next().tags().get("b"));
        Assertions.assertEquals("ohec", response.iterator().next().properties().addressSpace());
        Assertions.assertEquals("pwndyqlea", response.iterator().next().properties().dnsServers().get(0));
        Assertions.assertEquals(ServiceIdentifier.KEY_VAULT,
            response.iterator().next().properties().governedServiceList().get(0).serviceId());
        Assertions.assertEquals(GovernedServiceItemOption.NOT_APPLICABLE,
            response.iterator().next().properties().governedServiceList().get(0).option());
        Assertions.assertEquals(GovernedServiceItemEnforcement.ENABLED,
            response.iterator().next().properties().governedServiceList().get(0).enforcement());
        Assertions.assertEquals(GovernedServiceItemPolicyAction.NONE,
            response.iterator().next().properties().governedServiceList().get(0).policyAction());
        Assertions.assertEquals(CommunityPropertiesPolicyOverride.NONE,
            response.iterator().next().properties().policyOverride());
        Assertions.assertEquals("pzdqtvhcspod",
            response.iterator().next().properties().communityRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("xsi",
            response.iterator().next().properties().communityRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.SERVICE_PRINCIPAL,
            response.iterator().next().properties().communityRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals(FirewallSKU.STANDARD, response.iterator().next().properties().firewallSku());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.iterator().next().properties().approvalSettings().endpointCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            response.iterator().next().properties().approvalSettings().endpointUpdate());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            response.iterator().next().properties().approvalSettings().endpointDeletion());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.iterator().next().properties().approvalSettings().connectionCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            response.iterator().next().properties().approvalSettings().connectionUpdate());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            response.iterator().next().properties().approvalSettings().connectionDeletion());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.iterator().next().properties().approvalSettings().enclaveCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            response.iterator().next().properties().approvalSettings().enclaveDeletion());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.iterator().next().properties().approvalSettings().maintenanceMode());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.iterator().next().properties().approvalSettings().serviceCatalogDeployment());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.iterator().next().properties().approvalSettings().notificationOnApprovalCreation());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.iterator().next().properties().approvalSettings().notificationOnApprovalAction());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.iterator().next().properties().approvalSettings().notificationOnApprovalDeletion());
        Assertions.assertEquals("uuyjucejikz",
            response.iterator().next().properties().approvalSettings().mandatoryApprovers().get(0).approverEntraId());
        Assertions.assertEquals(4359795110481373493L,
            response.iterator().next().properties().approvalSettings().minimumApproversRequired());
        Assertions.assertEquals(MaintenanceModeConfigurationModelMode.CAN_NOT_DELETE,
            response.iterator().next().properties().maintenanceModeConfiguration().mode());
        Assertions.assertEquals("zvhqjwtrhtgvg",
            response.iterator().next().properties().maintenanceModeConfiguration().principals().get(0).id());
        Assertions.assertEquals(PrincipalType.GROUP,
            response.iterator().next().properties().maintenanceModeConfiguration().principals().get(0).type());
        Assertions.assertEquals(MaintenanceModeConfigurationModelJustification.NETWORKING,
            response.iterator().next().properties().maintenanceModeConfiguration().justification());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.iterator().next().identity().type());
    }
}
