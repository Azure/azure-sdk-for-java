// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.virtualenclaves.models.DiagnosticDestination;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveDefaultSettingsPatchModel;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveVirtualNetworkModel;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItem;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemEnforcement;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemOption;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemPolicyAction;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelJustification;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelMode;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationPatchModel;
import com.azure.resourcemanager.virtualenclaves.models.Principal;
import com.azure.resourcemanager.virtualenclaves.models.PrincipalType;
import com.azure.resourcemanager.virtualenclaves.models.RoleAssignmentItem;
import com.azure.resourcemanager.virtualenclaves.models.ServiceIdentifier;
import com.azure.resourcemanager.virtualenclaves.models.SubnetConfiguration;
import com.azure.resourcemanager.virtualenclaves.models.VirtualEnclavePatchProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualEnclavePatchPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualEnclavePatchProperties model = BinaryData.fromString(
            "{\"enclaveVirtualNetwork\":{\"networkName\":\"sucocmnyyazttbtw\",\"networkSize\":\"qpuedckzywbiex\",\"customCidrRange\":\"eyueaxibxujwb\",\"subnetConfigurations\":[{\"subnetName\":\"almuzyoxaepdkzja\",\"subnetResourceId\":\"ux\",\"networkPrefixSize\":1487648770,\"subnetDelegation\":\"wbavxbniwdj\",\"addressPrefix\":\"zt\",\"networkSecurityGroupResourceId\":\"bpg\"}],\"allowSubnetCommunication\":false},\"bastionEnabled\":false,\"enclaveRoleAssignments\":[{\"roleDefinitionId\":\"zxbzpfzabglc\",\"principals\":[{\"id\":\"wtctyqi\",\"type\":\"User\"},{\"id\":\"bbovplwzbhvgyugu\",\"type\":\"User\"},{\"id\":\"vmkfssxqu\",\"type\":\"Group\"},{\"id\":\"fpl\",\"type\":\"ServicePrincipal\"}]},{\"roleDefinitionId\":\"gsxnkjzkdeslpv\",\"principals\":[{\"id\":\"wiyighxpkdw\",\"type\":\"ServicePrincipal\"},{\"id\":\"aiuebbaumnyqu\",\"type\":\"Group\"}]}],\"workloadRoleAssignments\":[{\"roleDefinitionId\":\"ojnabckhsmtxpsie\",\"principals\":[{\"id\":\"hvpesapskrdqm\",\"type\":\"ServicePrincipal\"},{\"id\":\"jdhtldwkyzxu\",\"type\":\"ServicePrincipal\"},{\"id\":\"kn\",\"type\":\"User\"}]},{\"roleDefinitionId\":\"scwsv\",\"principals\":[{\"id\":\"togt\",\"type\":\"ServicePrincipal\"},{\"id\":\"upqsx\",\"type\":\"User\"},{\"id\":\"micykvceoveilo\",\"type\":\"Group\"}]}],\"governedServiceList\":[{\"serviceId\":\"AKS\",\"serviceName\":\"jfcn\",\"option\":\"Allow\",\"enforcement\":\"Enabled\",\"policyAction\":\"AuditOnly\",\"initiatives\":[\"ttkphywpnvjtoqne\"]},{\"serviceId\":\"PrivateDNSZones\",\"serviceName\":\"lfplp\",\"option\":\"Allow\",\"enforcement\":\"Disabled\",\"policyAction\":\"None\",\"initiatives\":[\"bgyepsbj\"]},{\"serviceId\":\"PrivateDNSZones\",\"serviceName\":\"qugxywpmueefjzwf\",\"option\":\"Allow\",\"enforcement\":\"Disabled\",\"policyAction\":\"Enforce\",\"initiatives\":[\"yonobgl\",\"ocqxtccmg\",\"udxytlmoyrx\"]},{\"serviceId\":\"Insights\",\"serviceName\":\"u\",\"option\":\"Allow\",\"enforcement\":\"Disabled\",\"policyAction\":\"AuditOnly\",\"initiatives\":[\"zhlrqjb\",\"ck\"]}],\"enclaveDefaultSettings\":{\"diagnosticDestination\":\"CommunityOnly\"},\"maintenanceModeConfiguration\":{\"mode\":\"CanNotDelete\",\"principals\":[{\"id\":\"kyv\",\"type\":\"User\"},{\"id\":\"ca\",\"type\":\"Group\"}],\"justification\":\"Networking\"}}")
            .toObject(VirtualEnclavePatchProperties.class);
        Assertions.assertEquals("sucocmnyyazttbtw", model.enclaveVirtualNetwork().networkName());
        Assertions.assertEquals("qpuedckzywbiex", model.enclaveVirtualNetwork().networkSize());
        Assertions.assertEquals("eyueaxibxujwb", model.enclaveVirtualNetwork().customCidrRange());
        Assertions.assertEquals("almuzyoxaepdkzja",
            model.enclaveVirtualNetwork().subnetConfigurations().get(0).subnetName());
        Assertions.assertEquals(1487648770,
            model.enclaveVirtualNetwork().subnetConfigurations().get(0).networkPrefixSize());
        Assertions.assertEquals("wbavxbniwdj",
            model.enclaveVirtualNetwork().subnetConfigurations().get(0).subnetDelegation());
        Assertions.assertFalse(model.enclaveVirtualNetwork().allowSubnetCommunication());
        Assertions.assertFalse(model.bastionEnabled());
        Assertions.assertEquals("zxbzpfzabglc", model.enclaveRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("wtctyqi", model.enclaveRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.USER, model.enclaveRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals("ojnabckhsmtxpsie", model.workloadRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("hvpesapskrdqm", model.workloadRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.SERVICE_PRINCIPAL,
            model.workloadRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals(ServiceIdentifier.AKS, model.governedServiceList().get(0).serviceId());
        Assertions.assertEquals(GovernedServiceItemOption.ALLOW, model.governedServiceList().get(0).option());
        Assertions.assertEquals(GovernedServiceItemEnforcement.ENABLED,
            model.governedServiceList().get(0).enforcement());
        Assertions.assertEquals(GovernedServiceItemPolicyAction.AUDIT_ONLY,
            model.governedServiceList().get(0).policyAction());
        Assertions.assertEquals(DiagnosticDestination.COMMUNITY_ONLY,
            model.enclaveDefaultSettings().diagnosticDestination());
        Assertions.assertEquals(MaintenanceModeConfigurationModelMode.CAN_NOT_DELETE,
            model.maintenanceModeConfiguration().mode());
        Assertions.assertEquals("kyv", model.maintenanceModeConfiguration().principals().get(0).id());
        Assertions.assertEquals(PrincipalType.USER, model.maintenanceModeConfiguration().principals().get(0).type());
        Assertions.assertEquals(MaintenanceModeConfigurationModelJustification.NETWORKING,
            model.maintenanceModeConfiguration().justification());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualEnclavePatchProperties model = new VirtualEnclavePatchProperties()
            .withEnclaveVirtualNetwork(new EnclaveVirtualNetworkModel().withNetworkName("sucocmnyyazttbtw")
                .withNetworkSize("qpuedckzywbiex")
                .withCustomCidrRange("eyueaxibxujwb")
                .withSubnetConfigurations(Arrays.asList(new SubnetConfiguration().withSubnetName("almuzyoxaepdkzja")
                    .withNetworkPrefixSize(1487648770)
                    .withSubnetDelegation("wbavxbniwdj")))
                .withAllowSubnetCommunication(false))
            .withBastionEnabled(false)
            .withEnclaveRoleAssignments(Arrays.asList(
                new RoleAssignmentItem().withRoleDefinitionId("zxbzpfzabglc")
                    .withPrincipals(Arrays.asList(new Principal().withId("wtctyqi").withType(PrincipalType.USER),
                        new Principal().withId("bbovplwzbhvgyugu").withType(PrincipalType.USER),
                        new Principal().withId("vmkfssxqu").withType(PrincipalType.GROUP),
                        new Principal().withId("fpl").withType(PrincipalType.SERVICE_PRINCIPAL))),
                new RoleAssignmentItem().withRoleDefinitionId("gsxnkjzkdeslpv")
                    .withPrincipals(
                        Arrays.asList(new Principal().withId("wiyighxpkdw").withType(PrincipalType.SERVICE_PRINCIPAL),
                            new Principal().withId("aiuebbaumnyqu").withType(PrincipalType.GROUP)))))
            .withWorkloadRoleAssignments(
                Arrays.asList(
                    new RoleAssignmentItem().withRoleDefinitionId("ojnabckhsmtxpsie")
                        .withPrincipals(Arrays.asList(
                            new Principal().withId("hvpesapskrdqm").withType(PrincipalType.SERVICE_PRINCIPAL),
                            new Principal().withId("jdhtldwkyzxu").withType(PrincipalType.SERVICE_PRINCIPAL),
                            new Principal().withId("kn").withType(PrincipalType.USER))),
                    new RoleAssignmentItem().withRoleDefinitionId("scwsv")
                        .withPrincipals(
                            Arrays.asList(new Principal().withId("togt").withType(PrincipalType.SERVICE_PRINCIPAL),
                                new Principal().withId("upqsx").withType(PrincipalType.USER),
                                new Principal().withId("micykvceoveilo").withType(PrincipalType.GROUP)))))
            .withGovernedServiceList(Arrays.asList(
                new GovernedServiceItem().withServiceId(ServiceIdentifier.AKS)
                    .withOption(GovernedServiceItemOption.ALLOW)
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withPolicyAction(GovernedServiceItemPolicyAction.AUDIT_ONLY),
                new GovernedServiceItem().withServiceId(ServiceIdentifier.PRIVATE_DNSZONES)
                    .withOption(GovernedServiceItemOption.ALLOW)
                    .withEnforcement(GovernedServiceItemEnforcement.DISABLED)
                    .withPolicyAction(GovernedServiceItemPolicyAction.NONE),
                new GovernedServiceItem().withServiceId(ServiceIdentifier.PRIVATE_DNSZONES)
                    .withOption(GovernedServiceItemOption.ALLOW)
                    .withEnforcement(GovernedServiceItemEnforcement.DISABLED)
                    .withPolicyAction(GovernedServiceItemPolicyAction.ENFORCE),
                new GovernedServiceItem().withServiceId(ServiceIdentifier.INSIGHTS)
                    .withOption(GovernedServiceItemOption.ALLOW)
                    .withEnforcement(GovernedServiceItemEnforcement.DISABLED)
                    .withPolicyAction(GovernedServiceItemPolicyAction.AUDIT_ONLY)))
            .withEnclaveDefaultSettings(
                new EnclaveDefaultSettingsPatchModel().withDiagnosticDestination(DiagnosticDestination.COMMUNITY_ONLY))
            .withMaintenanceModeConfiguration(new MaintenanceModeConfigurationPatchModel()
                .withMode(MaintenanceModeConfigurationModelMode.CAN_NOT_DELETE)
                .withPrincipals(Arrays.asList(new Principal().withId("kyv").withType(PrincipalType.USER),
                    new Principal().withId("ca").withType(PrincipalType.GROUP)))
                .withJustification(MaintenanceModeConfigurationModelJustification.NETWORKING));
        model = BinaryData.fromObject(model).toObject(VirtualEnclavePatchProperties.class);
        Assertions.assertEquals("sucocmnyyazttbtw", model.enclaveVirtualNetwork().networkName());
        Assertions.assertEquals("qpuedckzywbiex", model.enclaveVirtualNetwork().networkSize());
        Assertions.assertEquals("eyueaxibxujwb", model.enclaveVirtualNetwork().customCidrRange());
        Assertions.assertEquals("almuzyoxaepdkzja",
            model.enclaveVirtualNetwork().subnetConfigurations().get(0).subnetName());
        Assertions.assertEquals(1487648770,
            model.enclaveVirtualNetwork().subnetConfigurations().get(0).networkPrefixSize());
        Assertions.assertEquals("wbavxbniwdj",
            model.enclaveVirtualNetwork().subnetConfigurations().get(0).subnetDelegation());
        Assertions.assertFalse(model.enclaveVirtualNetwork().allowSubnetCommunication());
        Assertions.assertFalse(model.bastionEnabled());
        Assertions.assertEquals("zxbzpfzabglc", model.enclaveRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("wtctyqi", model.enclaveRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.USER, model.enclaveRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals("ojnabckhsmtxpsie", model.workloadRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("hvpesapskrdqm", model.workloadRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.SERVICE_PRINCIPAL,
            model.workloadRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals(ServiceIdentifier.AKS, model.governedServiceList().get(0).serviceId());
        Assertions.assertEquals(GovernedServiceItemOption.ALLOW, model.governedServiceList().get(0).option());
        Assertions.assertEquals(GovernedServiceItemEnforcement.ENABLED,
            model.governedServiceList().get(0).enforcement());
        Assertions.assertEquals(GovernedServiceItemPolicyAction.AUDIT_ONLY,
            model.governedServiceList().get(0).policyAction());
        Assertions.assertEquals(DiagnosticDestination.COMMUNITY_ONLY,
            model.enclaveDefaultSettings().diagnosticDestination());
        Assertions.assertEquals(MaintenanceModeConfigurationModelMode.CAN_NOT_DELETE,
            model.maintenanceModeConfiguration().mode());
        Assertions.assertEquals("kyv", model.maintenanceModeConfiguration().principals().get(0).id());
        Assertions.assertEquals(PrincipalType.USER, model.maintenanceModeConfiguration().principals().get(0).type());
        Assertions.assertEquals(MaintenanceModeConfigurationModelJustification.NETWORKING,
            model.maintenanceModeConfiguration().justification());
    }
}
