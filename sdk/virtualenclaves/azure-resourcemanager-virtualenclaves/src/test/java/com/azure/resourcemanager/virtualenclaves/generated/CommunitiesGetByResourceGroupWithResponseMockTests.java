// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.virtualenclaves.VirtualEnclavesManager;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalPolicy;
import com.azure.resourcemanager.virtualenclaves.models.CommunityPropertiesPolicyOverride;
import com.azure.resourcemanager.virtualenclaves.models.CommunityResource;
import com.azure.resourcemanager.virtualenclaves.models.FirewallSKU;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemEnforcement;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemOption;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemPolicyAction;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelJustification;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelMode;
import com.azure.resourcemanager.virtualenclaves.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.virtualenclaves.models.PrincipalType;
import com.azure.resourcemanager.virtualenclaves.models.ServiceIdentifier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CommunitiesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"addressSpace\":\"puslvyj\",\"dnsServers\":[\"uwkasiz\",\"esfuught\",\"qfecjxeygtuhx\",\"ic\"],\"provisioningState\":\"Deleting\",\"resourceCollection\":[\"rswnjlxuzrhwp\"],\"managedResourceGroupName\":\"xjbaqehgpdohzjq\",\"managedOnBehalfOfConfiguration\":{\"moboBrokerResources\":[{\"id\":\"igebxncnwfepb\"}]},\"governedServiceList\":[{\"serviceId\":\"Logic\",\"serviceName\":\"xjg\",\"option\":\"Allow\",\"enforcement\":\"Disabled\",\"policyAction\":\"Enforce\",\"initiatives\":[\"gtdysnaqu\"]}],\"policyOverride\":\"Enclave\",\"communityRoleAssignments\":[{\"roleDefinitionId\":\"tqhamzjrw\",\"principals\":[{\"id\":\"zeqyjleziun\",\"type\":\"Group\"},{\"id\":\"dfzantkwcegy\",\"type\":\"Group\"},{\"id\":\"lbnseqac\",\"type\":\"ServicePrincipal\"},{\"id\":\"vpilg\",\"type\":\"ServicePrincipal\"}]},{\"roleDefinitionId\":\"oq\",\"principals\":[{\"id\":\"m\",\"type\":\"Group\"},{\"id\":\"tg\",\"type\":\"ServicePrincipal\"},{\"id\":\"iookjbsah\",\"type\":\"User\"},{\"id\":\"dt\",\"type\":\"ServicePrincipal\"}]},{\"roleDefinitionId\":\"elqacslmot\",\"principals\":[{\"id\":\"nfxofvcj\",\"type\":\"ServicePrincipal\"},{\"id\":\"dirazf\",\"type\":\"Group\"}]}],\"firewallSku\":\"Premium\",\"approvalSettings\":{\"endpointCreation\":\"NotRequired\",\"endpointUpdate\":\"NotRequired\",\"endpointDeletion\":\"Required\",\"connectionCreation\":\"NotRequired\",\"connectionUpdate\":\"Required\",\"connectionDeletion\":\"NotRequired\",\"enclaveCreation\":\"Required\",\"enclaveDeletion\":\"Required\",\"maintenanceMode\":\"NotRequired\",\"serviceCatalogDeployment\":\"NotRequired\",\"notificationOnApprovalCreation\":\"NotRequired\",\"notificationOnApprovalAction\":\"NotRequired\",\"notificationOnApprovalDeletion\":\"Required\",\"mandatoryApprovers\":[{\"approverEntraId\":\"tqsrogtuwkff\"}],\"minimumApproversRequired\":7729705463242282877},\"maintenanceModeConfiguration\":{\"mode\":\"CanNotDelete\",\"principals\":[{\"id\":\"dfvclglxnfu\",\"type\":\"ServicePrincipal\"}],\"justification\":\"Off\"}},\"identity\":{\"principalId\":\"sqo\",\"tenantId\":\"fikayiansharujtj\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"qqekewvnqvcdlgu\":{\"principalId\":\"yjqtt\",\"clientId\":\"kpqhjpenuygbq\"},\"vitac\":{\"principalId\":\"cmfdjwnlax\",\"clientId\":\"njqikcz\"}}},\"location\":\"mfcsserx\",\"tags\":{\"xypruuuy\":\"soxhlwntsjgqr\"},\"id\":\"nchrszizoyu\",\"name\":\"lyetndnbfqygg\",\"type\":\"g\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        VirtualEnclavesManager manager = VirtualEnclavesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CommunityResource response = manager.communities()
            .getByResourceGroupWithResponse("jxtxrdc", "tjvidt", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("mfcsserx", response.location());
        Assertions.assertEquals("soxhlwntsjgqr", response.tags().get("xypruuuy"));
        Assertions.assertEquals("puslvyj", response.properties().addressSpace());
        Assertions.assertEquals("uwkasiz", response.properties().dnsServers().get(0));
        Assertions.assertEquals(ServiceIdentifier.LOGIC,
            response.properties().governedServiceList().get(0).serviceId());
        Assertions.assertEquals(GovernedServiceItemOption.ALLOW,
            response.properties().governedServiceList().get(0).option());
        Assertions.assertEquals(GovernedServiceItemEnforcement.DISABLED,
            response.properties().governedServiceList().get(0).enforcement());
        Assertions.assertEquals(GovernedServiceItemPolicyAction.ENFORCE,
            response.properties().governedServiceList().get(0).policyAction());
        Assertions.assertEquals(CommunityPropertiesPolicyOverride.ENCLAVE, response.properties().policyOverride());
        Assertions.assertEquals("tqhamzjrw",
            response.properties().communityRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("zeqyjleziun",
            response.properties().communityRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.GROUP,
            response.properties().communityRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals(FirewallSKU.PREMIUM, response.properties().firewallSku());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.properties().approvalSettings().endpointCreation());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, response.properties().approvalSettings().endpointUpdate());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, response.properties().approvalSettings().endpointDeletion());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.properties().approvalSettings().connectionCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, response.properties().approvalSettings().connectionUpdate());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.properties().approvalSettings().connectionDeletion());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, response.properties().approvalSettings().enclaveCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, response.properties().approvalSettings().enclaveDeletion());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.properties().approvalSettings().maintenanceMode());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.properties().approvalSettings().serviceCatalogDeployment());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.properties().approvalSettings().notificationOnApprovalCreation());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED,
            response.properties().approvalSettings().notificationOnApprovalAction());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED,
            response.properties().approvalSettings().notificationOnApprovalDeletion());
        Assertions.assertEquals("tqsrogtuwkff",
            response.properties().approvalSettings().mandatoryApprovers().get(0).approverEntraId());
        Assertions.assertEquals(7729705463242282877L,
            response.properties().approvalSettings().minimumApproversRequired());
        Assertions.assertEquals(MaintenanceModeConfigurationModelMode.CAN_NOT_DELETE,
            response.properties().maintenanceModeConfiguration().mode());
        Assertions.assertEquals("dfvclglxnfu",
            response.properties().maintenanceModeConfiguration().principals().get(0).id());
        Assertions.assertEquals(PrincipalType.SERVICE_PRINCIPAL,
            response.properties().maintenanceModeConfiguration().principals().get(0).type());
        Assertions.assertEquals(MaintenanceModeConfigurationModelJustification.OFF,
            response.properties().maintenanceModeConfiguration().justification());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
    }
}
