// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.virtualenclaves.models.DiagnosticDestination;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveDefaultSettingsPatchModel;
import com.azure.resourcemanager.virtualenclaves.models.EnclaveVirtualNetworkModel;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItem;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemEnforcement;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemOption;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemPolicyAction;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelJustification;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelMode;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationPatchModel;
import com.azure.resourcemanager.virtualenclaves.models.ManagedServiceIdentity;
import com.azure.resourcemanager.virtualenclaves.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.virtualenclaves.models.Principal;
import com.azure.resourcemanager.virtualenclaves.models.PrincipalType;
import com.azure.resourcemanager.virtualenclaves.models.RoleAssignmentItem;
import com.azure.resourcemanager.virtualenclaves.models.ServiceIdentifier;
import com.azure.resourcemanager.virtualenclaves.models.SubnetConfiguration;
import com.azure.resourcemanager.virtualenclaves.models.UserAssignedIdentity;
import com.azure.resourcemanager.virtualenclaves.models.VirtualEnclavePatchModel;
import com.azure.resourcemanager.virtualenclaves.models.VirtualEnclavePatchProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VirtualEnclavePatchModelTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualEnclavePatchModel model = BinaryData.fromString(
            "{\"properties\":{\"enclaveVirtualNetwork\":{\"networkName\":\"onpc\",\"networkSize\":\"ocohslkevleg\",\"customCidrRange\":\"fbuhfmvfaxkffe\",\"subnetConfigurations\":[{\"subnetName\":\"hl\",\"subnetResourceId\":\"ez\",\"networkPrefixSize\":72720177,\"subnetDelegation\":\"hxmzsbbzoggig\",\"addressPrefix\":\"wburvjxxjnspydpt\",\"networkSecurityGroupResourceId\":\"enkouknvudw\"}],\"allowSubnetCommunication\":true},\"bastionEnabled\":true,\"enclaveRoleAssignments\":[{\"roleDefinitionId\":\"ngkpocipazy\",\"principals\":[{\"id\":\"gukgjnpiucgygevq\",\"type\":\"ServicePrincipal\"},{\"id\":\"typmrbpizcdrqjsd\",\"type\":\"ServicePrincipal\"},{\"id\":\"dnfyhxdeoejzicwi\",\"type\":\"ServicePrincipal\"}]}],\"workloadRoleAssignments\":[{\"roleDefinitionId\":\"tgzfbishcbkh\",\"principals\":[{\"id\":\"eyeam\",\"type\":\"Group\"},{\"id\":\"hagalpbuxwgipwh\",\"type\":\"Group\"},{\"id\":\"ow\",\"type\":\"ServicePrincipal\"},{\"id\":\"shwankixzbinje\",\"type\":\"ServicePrincipal\"}]},{\"roleDefinitionId\":\"ttmrywnuzoqf\",\"principals\":[{\"id\":\"qzrnkcqvyxlwhz\",\"type\":\"Group\"},{\"id\":\"icohoqqnwvl\",\"type\":\"User\"},{\"id\":\"avwhheunm\",\"type\":\"Group\"},{\"id\":\"hgyxzkonoc\",\"type\":\"ServicePrincipal\"}]}],\"governedServiceList\":[{\"serviceId\":\"Monitoring\",\"serviceName\":\"axuconuq\",\"option\":\"Deny\",\"enforcement\":\"Disabled\",\"policyAction\":\"AuditOnly\",\"initiatives\":[\"wrmjmwvvjektc\",\"senhwlrs\",\"frzpwvlqdqgb\",\"qylihkaetckt\"]},{\"serviceId\":\"ContainerRegistry\",\"serviceName\":\"ivfsnk\",\"option\":\"ExceptionOnly\",\"enforcement\":\"Disabled\",\"policyAction\":\"AuditOnly\",\"initiatives\":[\"bebrjcxerfuwuttt\",\"fvjrbirphxepcy\",\"ahfn\"]},{\"serviceId\":\"ContainerRegistry\",\"serviceName\":\"yq\",\"option\":\"Deny\",\"enforcement\":\"Enabled\",\"policyAction\":\"None\",\"initiatives\":[\"dokgjl\",\"yoxgvcltbgsnc\"]}],\"enclaveDefaultSettings\":{\"diagnosticDestination\":\"CommunityOnly\"},\"maintenanceModeConfiguration\":{\"mode\":\"CanNotDelete\",\"principals\":[{\"id\":\"hbijhtxfvgxb\",\"type\":\"ServicePrincipal\"},{\"id\":\"mxnehmp\",\"type\":\"User\"},{\"id\":\"cxgod\",\"type\":\"User\"}],\"justification\":\"Off\"}},\"identity\":{\"principalId\":\"rbmpukgri\",\"tenantId\":\"lzlfbxzpuz\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"drgvtqagn\":{\"principalId\":\"nqzahmgkbrpyyd\",\"clientId\":\"bnuqqkpik\"},\"zzmhjrunmpxttd\":{\"principalId\":\"ynhijggme\",\"clientId\":\"siarbutrcvpn\"},\"nrs\":{\"principalId\":\"rbnlankxmyskp\",\"clientId\":\"enbtkcxywny\"}}},\"tags\":{\"zfcl\":\"qidybyx\",\"fkts\":\"aaxdbabphlwrq\"}}")
            .toObject(VirtualEnclavePatchModel.class);
        Assertions.assertEquals("onpc", model.properties().enclaveVirtualNetwork().networkName());
        Assertions.assertEquals("ocohslkevleg", model.properties().enclaveVirtualNetwork().networkSize());
        Assertions.assertEquals("fbuhfmvfaxkffe", model.properties().enclaveVirtualNetwork().customCidrRange());
        Assertions.assertEquals("hl",
            model.properties().enclaveVirtualNetwork().subnetConfigurations().get(0).subnetName());
        Assertions.assertEquals(72720177,
            model.properties().enclaveVirtualNetwork().subnetConfigurations().get(0).networkPrefixSize());
        Assertions.assertEquals("hxmzsbbzoggig",
            model.properties().enclaveVirtualNetwork().subnetConfigurations().get(0).subnetDelegation());
        Assertions.assertTrue(model.properties().enclaveVirtualNetwork().allowSubnetCommunication());
        Assertions.assertTrue(model.properties().bastionEnabled());
        Assertions.assertEquals("ngkpocipazy", model.properties().enclaveRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("gukgjnpiucgygevq",
            model.properties().enclaveRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.SERVICE_PRINCIPAL,
            model.properties().enclaveRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals("tgzfbishcbkh", model.properties().workloadRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("eyeam", model.properties().workloadRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.GROUP,
            model.properties().workloadRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals(ServiceIdentifier.MONITORING,
            model.properties().governedServiceList().get(0).serviceId());
        Assertions.assertEquals(GovernedServiceItemOption.DENY,
            model.properties().governedServiceList().get(0).option());
        Assertions.assertEquals(GovernedServiceItemEnforcement.DISABLED,
            model.properties().governedServiceList().get(0).enforcement());
        Assertions.assertEquals(GovernedServiceItemPolicyAction.AUDIT_ONLY,
            model.properties().governedServiceList().get(0).policyAction());
        Assertions.assertEquals(DiagnosticDestination.COMMUNITY_ONLY,
            model.properties().enclaveDefaultSettings().diagnosticDestination());
        Assertions.assertEquals(MaintenanceModeConfigurationModelMode.CAN_NOT_DELETE,
            model.properties().maintenanceModeConfiguration().mode());
        Assertions.assertEquals("hbijhtxfvgxb",
            model.properties().maintenanceModeConfiguration().principals().get(0).id());
        Assertions.assertEquals(PrincipalType.SERVICE_PRINCIPAL,
            model.properties().maintenanceModeConfiguration().principals().get(0).type());
        Assertions.assertEquals(MaintenanceModeConfigurationModelJustification.OFF,
            model.properties().maintenanceModeConfiguration().justification());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("qidybyx", model.tags().get("zfcl"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualEnclavePatchModel model = new VirtualEnclavePatchModel()
            .withProperties(new VirtualEnclavePatchProperties()
                .withEnclaveVirtualNetwork(new EnclaveVirtualNetworkModel().withNetworkName("onpc")
                    .withNetworkSize("ocohslkevleg")
                    .withCustomCidrRange("fbuhfmvfaxkffe")
                    .withSubnetConfigurations(Arrays.asList(new SubnetConfiguration().withSubnetName("hl")
                        .withNetworkPrefixSize(72720177)
                        .withSubnetDelegation("hxmzsbbzoggig")))
                    .withAllowSubnetCommunication(true))
                .withBastionEnabled(true)
                .withEnclaveRoleAssignments(Arrays.asList(new RoleAssignmentItem().withRoleDefinitionId("ngkpocipazy")
                    .withPrincipals(Arrays.asList(
                        new Principal().withId("gukgjnpiucgygevq").withType(PrincipalType.SERVICE_PRINCIPAL),
                        new Principal().withId("typmrbpizcdrqjsd").withType(PrincipalType.SERVICE_PRINCIPAL),
                        new Principal().withId("dnfyhxdeoejzicwi").withType(PrincipalType.SERVICE_PRINCIPAL)))))
                .withWorkloadRoleAssignments(
                    Arrays
                        .asList(
                            new RoleAssignmentItem().withRoleDefinitionId("tgzfbishcbkh")
                                .withPrincipals(
                                    Arrays.asList(new Principal().withId("eyeam").withType(PrincipalType.GROUP),
                                        new Principal().withId("hagalpbuxwgipwh").withType(PrincipalType.GROUP),
                                        new Principal().withId("ow").withType(PrincipalType.SERVICE_PRINCIPAL),
                                        new Principal().withId("shwankixzbinje")
                                            .withType(PrincipalType.SERVICE_PRINCIPAL))),
                            new RoleAssignmentItem().withRoleDefinitionId("ttmrywnuzoqf")
                                .withPrincipals(Arrays.asList(
                                    new Principal().withId("qzrnkcqvyxlwhz").withType(PrincipalType.GROUP),
                                    new Principal().withId("icohoqqnwvl").withType(PrincipalType.USER),
                                    new Principal().withId("avwhheunm").withType(PrincipalType.GROUP),
                                    new Principal().withId("hgyxzkonoc").withType(PrincipalType.SERVICE_PRINCIPAL)))))
                .withGovernedServiceList(Arrays.asList(
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.MONITORING)
                        .withOption(GovernedServiceItemOption.DENY)
                        .withEnforcement(GovernedServiceItemEnforcement.DISABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.AUDIT_ONLY),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.CONTAINER_REGISTRY)
                        .withOption(GovernedServiceItemOption.EXCEPTION_ONLY)
                        .withEnforcement(GovernedServiceItemEnforcement.DISABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.AUDIT_ONLY),
                    new GovernedServiceItem().withServiceId(ServiceIdentifier.CONTAINER_REGISTRY)
                        .withOption(GovernedServiceItemOption.DENY)
                        .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                        .withPolicyAction(GovernedServiceItemPolicyAction.NONE)))
                .withEnclaveDefaultSettings(new EnclaveDefaultSettingsPatchModel()
                    .withDiagnosticDestination(DiagnosticDestination.COMMUNITY_ONLY))
                .withMaintenanceModeConfiguration(new MaintenanceModeConfigurationPatchModel()
                    .withMode(MaintenanceModeConfigurationModelMode.CAN_NOT_DELETE)
                    .withPrincipals(
                        Arrays.asList(new Principal().withId("hbijhtxfvgxb").withType(PrincipalType.SERVICE_PRINCIPAL),
                            new Principal().withId("mxnehmp").withType(PrincipalType.USER),
                            new Principal().withId("cxgod").withType(PrincipalType.USER)))
                    .withJustification(MaintenanceModeConfigurationModelJustification.OFF)))
            .withIdentity(
                new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("drgvtqagn", new UserAssignedIdentity(), "zzmhjrunmpxttd",
                        new UserAssignedIdentity(), "nrs", new UserAssignedIdentity())))
            .withTags(mapOf("zfcl", "qidybyx", "fkts", "aaxdbabphlwrq"));
        model = BinaryData.fromObject(model).toObject(VirtualEnclavePatchModel.class);
        Assertions.assertEquals("onpc", model.properties().enclaveVirtualNetwork().networkName());
        Assertions.assertEquals("ocohslkevleg", model.properties().enclaveVirtualNetwork().networkSize());
        Assertions.assertEquals("fbuhfmvfaxkffe", model.properties().enclaveVirtualNetwork().customCidrRange());
        Assertions.assertEquals("hl",
            model.properties().enclaveVirtualNetwork().subnetConfigurations().get(0).subnetName());
        Assertions.assertEquals(72720177,
            model.properties().enclaveVirtualNetwork().subnetConfigurations().get(0).networkPrefixSize());
        Assertions.assertEquals("hxmzsbbzoggig",
            model.properties().enclaveVirtualNetwork().subnetConfigurations().get(0).subnetDelegation());
        Assertions.assertTrue(model.properties().enclaveVirtualNetwork().allowSubnetCommunication());
        Assertions.assertTrue(model.properties().bastionEnabled());
        Assertions.assertEquals("ngkpocipazy", model.properties().enclaveRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("gukgjnpiucgygevq",
            model.properties().enclaveRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.SERVICE_PRINCIPAL,
            model.properties().enclaveRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals("tgzfbishcbkh", model.properties().workloadRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("eyeam", model.properties().workloadRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.GROUP,
            model.properties().workloadRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals(ServiceIdentifier.MONITORING,
            model.properties().governedServiceList().get(0).serviceId());
        Assertions.assertEquals(GovernedServiceItemOption.DENY,
            model.properties().governedServiceList().get(0).option());
        Assertions.assertEquals(GovernedServiceItemEnforcement.DISABLED,
            model.properties().governedServiceList().get(0).enforcement());
        Assertions.assertEquals(GovernedServiceItemPolicyAction.AUDIT_ONLY,
            model.properties().governedServiceList().get(0).policyAction());
        Assertions.assertEquals(DiagnosticDestination.COMMUNITY_ONLY,
            model.properties().enclaveDefaultSettings().diagnosticDestination());
        Assertions.assertEquals(MaintenanceModeConfigurationModelMode.CAN_NOT_DELETE,
            model.properties().maintenanceModeConfiguration().mode());
        Assertions.assertEquals("hbijhtxfvgxb",
            model.properties().maintenanceModeConfiguration().principals().get(0).id());
        Assertions.assertEquals(PrincipalType.SERVICE_PRINCIPAL,
            model.properties().maintenanceModeConfiguration().principals().get(0).type());
        Assertions.assertEquals(MaintenanceModeConfigurationModelJustification.OFF,
            model.properties().maintenanceModeConfiguration().justification());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("qidybyx", model.tags().get("zfcl"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
