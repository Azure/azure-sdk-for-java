// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.virtualenclaves.fluent.models.TransitHubResourceInner;
import com.azure.resourcemanager.virtualenclaves.models.TransitHubProperties;
import com.azure.resourcemanager.virtualenclaves.models.TransitHubState;
import com.azure.resourcemanager.virtualenclaves.models.TransitOption;
import com.azure.resourcemanager.virtualenclaves.models.TransitOptionParams;
import com.azure.resourcemanager.virtualenclaves.models.TransitOptionType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TransitHubResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TransitHubResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Creating\",\"state\":\"PendingUpdate\",\"transitOption\":{\"type\":\"Peering\",\"params\":{\"scaleUnits\":5250086231147283633,\"remoteVirtualNetworkId\":\"lmdjrkvfgbvfvpdb\"}},\"resourceCollection\":[\"cizsjqlhkrribdei\",\"qipqkghvxndz\",\"mkrefajpjorwkq\"]},\"location\":\"hgbijt\",\"tags\":{\"wfsdjpvkvpbj\":\"fxzsjabibsyst\",\"ncj\":\"bkzbzkd\"},\"id\":\"budurgkakmo\",\"name\":\"zhjjklffhmouwq\",\"type\":\"gzrf\"}")
            .toObject(TransitHubResourceInner.class);
        Assertions.assertEquals("hgbijt", model.location());
        Assertions.assertEquals("fxzsjabibsyst", model.tags().get("wfsdjpvkvpbj"));
        Assertions.assertEquals(TransitHubState.PENDING_UPDATE, model.properties().state());
        Assertions.assertEquals(TransitOptionType.PEERING, model.properties().transitOption().type());
        Assertions.assertEquals(5250086231147283633L, model.properties().transitOption().params().scaleUnits());
        Assertions.assertEquals("lmdjrkvfgbvfvpdb",
            model.properties().transitOption().params().remoteVirtualNetworkId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TransitHubResourceInner model = new TransitHubResourceInner().withLocation("hgbijt")
            .withTags(mapOf("wfsdjpvkvpbj", "fxzsjabibsyst", "ncj", "bkzbzkd"))
            .withProperties(new TransitHubProperties().withState(TransitHubState.PENDING_UPDATE)
                .withTransitOption(new TransitOption().withType(TransitOptionType.PEERING)
                    .withParams(new TransitOptionParams().withScaleUnits(5250086231147283633L)
                        .withRemoteVirtualNetworkId("lmdjrkvfgbvfvpdb"))));
        model = BinaryData.fromObject(model).toObject(TransitHubResourceInner.class);
        Assertions.assertEquals("hgbijt", model.location());
        Assertions.assertEquals("fxzsjabibsyst", model.tags().get("wfsdjpvkvpbj"));
        Assertions.assertEquals(TransitHubState.PENDING_UPDATE, model.properties().state());
        Assertions.assertEquals(TransitOptionType.PEERING, model.properties().transitOption().type());
        Assertions.assertEquals(5250086231147283633L, model.properties().transitOption().params().scaleUnits());
        Assertions.assertEquals("lmdjrkvfgbvfvpdb",
            model.properties().transitOption().params().remoteVirtualNetworkId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
