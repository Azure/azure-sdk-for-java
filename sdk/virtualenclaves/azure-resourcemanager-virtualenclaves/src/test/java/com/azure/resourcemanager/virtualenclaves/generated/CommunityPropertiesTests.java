// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.virtualenclaves.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalPolicy;
import com.azure.resourcemanager.virtualenclaves.models.ApprovalSettings;
import com.azure.resourcemanager.virtualenclaves.models.CommunityProperties;
import com.azure.resourcemanager.virtualenclaves.models.CommunityPropertiesPolicyOverride;
import com.azure.resourcemanager.virtualenclaves.models.FirewallSKU;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItem;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemEnforcement;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemOption;
import com.azure.resourcemanager.virtualenclaves.models.GovernedServiceItemPolicyAction;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModel;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelJustification;
import com.azure.resourcemanager.virtualenclaves.models.MaintenanceModeConfigurationModelMode;
import com.azure.resourcemanager.virtualenclaves.models.MandatoryApprover;
import com.azure.resourcemanager.virtualenclaves.models.Principal;
import com.azure.resourcemanager.virtualenclaves.models.PrincipalType;
import com.azure.resourcemanager.virtualenclaves.models.RoleAssignmentItem;
import com.azure.resourcemanager.virtualenclaves.models.ServiceIdentifier;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class CommunityPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CommunityProperties model = BinaryData.fromString(
            "{\"addressSpace\":\"hdneuelfph\",\"dnsServers\":[\"htozfikdow\",\"quuvxzxcl\",\"ithhqzon\",\"sg\"],\"provisioningState\":\"Failed\",\"resourceCollection\":[\"hfwdsjnkaljutiis\",\"acffgdkzzewkfvhq\"],\"managedResourceGroupName\":\"a\",\"managedOnBehalfOfConfiguration\":{\"moboBrokerResources\":[{\"id\":\"ppfufl\"},{\"id\":\"dmhdlxyjr\"}]},\"governedServiceList\":[{\"serviceId\":\"CosmosDB\",\"serviceName\":\"fcnihgwq\",\"option\":\"Deny\",\"enforcement\":\"Disabled\",\"policyAction\":\"Enforce\",\"initiatives\":[\"vkcvqvpkeqd\",\"vdrhvoo\",\"sotbob\",\"dopcjwvnh\"]},{\"serviceId\":\"ContainerRegistry\",\"serviceName\":\"wmgxcxrsl\",\"option\":\"Allow\",\"enforcement\":\"Enabled\",\"policyAction\":\"AuditOnly\",\"initiatives\":[\"rpkhjwn\",\"yqsluic\",\"dggkzzlvmbmpa\"]},{\"serviceId\":\"CosmosDB\",\"serviceName\":\"dfvue\",\"option\":\"Deny\",\"enforcement\":\"Enabled\",\"policyAction\":\"AuditOnly\",\"initiatives\":[\"wyhrfouyftaakc\",\"wiyzvqtmnubexkp\"]},{\"serviceId\":\"PrivateDNSZones\",\"serviceName\":\"mond\",\"option\":\"ExceptionOnly\",\"enforcement\":\"Enabled\",\"policyAction\":\"AuditOnly\",\"initiatives\":[\"mg\",\"opkwhojv\",\"ajqgxy\"]}],\"policyOverride\":\"None\",\"communityRoleAssignments\":[{\"roleDefinitionId\":\"bq\",\"principals\":[{\"id\":\"mkcxozapvh\",\"type\":\"User\"},{\"id\":\"xprglyatddc\",\"type\":\"User\"}]},{\"roleDefinitionId\":\"bcuejrjxgci\",\"principals\":[{\"id\":\"rhos\",\"type\":\"ServicePrincipal\"}]}],\"firewallSku\":\"Standard\",\"approvalSettings\":{\"endpointCreation\":\"NotRequired\",\"endpointUpdate\":\"Required\",\"endpointDeletion\":\"Required\",\"connectionCreation\":\"Required\",\"connectionUpdate\":\"Required\",\"connectionDeletion\":\"NotRequired\",\"enclaveCreation\":\"NotRequired\",\"enclaveDeletion\":\"Required\",\"maintenanceMode\":\"NotRequired\",\"serviceCatalogDeployment\":\"NotRequired\",\"notificationOnApprovalCreation\":\"NotRequired\",\"notificationOnApprovalAction\":\"NotRequired\",\"notificationOnApprovalDeletion\":\"NotRequired\",\"mandatoryApprovers\":[{\"approverEntraId\":\"ofyyvoqacpi\"},{\"approverEntraId\":\"xpbtgiwbwo\"},{\"approverEntraId\":\"nwashrtd\"},{\"approverEntraId\":\"kcnqxwbpo\"}],\"minimumApproversRequired\":8644340540999896271},\"maintenanceModeConfiguration\":{\"mode\":\"General\",\"principals\":[{\"id\":\"aasipqi\",\"type\":\"User\"},{\"id\":\"byuqerpqlp\",\"type\":\"ServicePrincipal\"}],\"justification\":\"Off\"}}")
            .toObject(CommunityProperties.class);
        Assertions.assertEquals("hdneuelfph", model.addressSpace());
        Assertions.assertEquals("htozfikdow", model.dnsServers().get(0));
        Assertions.assertEquals(ServiceIdentifier.COSMOS_DB, model.governedServiceList().get(0).serviceId());
        Assertions.assertEquals(GovernedServiceItemOption.DENY, model.governedServiceList().get(0).option());
        Assertions.assertEquals(GovernedServiceItemEnforcement.DISABLED,
            model.governedServiceList().get(0).enforcement());
        Assertions.assertEquals(GovernedServiceItemPolicyAction.ENFORCE,
            model.governedServiceList().get(0).policyAction());
        Assertions.assertEquals(CommunityPropertiesPolicyOverride.NONE, model.policyOverride());
        Assertions.assertEquals("bq", model.communityRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("mkcxozapvh", model.communityRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.USER, model.communityRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals(FirewallSKU.STANDARD, model.firewallSku());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.approvalSettings().endpointCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.approvalSettings().endpointUpdate());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.approvalSettings().endpointDeletion());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.approvalSettings().connectionCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.approvalSettings().connectionUpdate());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.approvalSettings().connectionDeletion());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.approvalSettings().enclaveCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.approvalSettings().enclaveDeletion());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.approvalSettings().maintenanceMode());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.approvalSettings().serviceCatalogDeployment());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.approvalSettings().notificationOnApprovalCreation());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.approvalSettings().notificationOnApprovalAction());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.approvalSettings().notificationOnApprovalDeletion());
        Assertions.assertEquals("ofyyvoqacpi", model.approvalSettings().mandatoryApprovers().get(0).approverEntraId());
        Assertions.assertEquals(8644340540999896271L, model.approvalSettings().minimumApproversRequired());
        Assertions.assertEquals(MaintenanceModeConfigurationModelMode.GENERAL,
            model.maintenanceModeConfiguration().mode());
        Assertions.assertEquals("aasipqi", model.maintenanceModeConfiguration().principals().get(0).id());
        Assertions.assertEquals(PrincipalType.USER, model.maintenanceModeConfiguration().principals().get(0).type());
        Assertions.assertEquals(MaintenanceModeConfigurationModelJustification.OFF,
            model.maintenanceModeConfiguration().justification());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CommunityProperties model = new CommunityProperties().withAddressSpace("hdneuelfph")
            .withDnsServers(Arrays.asList("htozfikdow", "quuvxzxcl", "ithhqzon", "sg"))
            .withGovernedServiceList(Arrays.asList(
                new GovernedServiceItem().withServiceId(ServiceIdentifier.COSMOS_DB)
                    .withOption(GovernedServiceItemOption.DENY)
                    .withEnforcement(GovernedServiceItemEnforcement.DISABLED)
                    .withPolicyAction(GovernedServiceItemPolicyAction.ENFORCE),
                new GovernedServiceItem().withServiceId(ServiceIdentifier.CONTAINER_REGISTRY)
                    .withOption(GovernedServiceItemOption.ALLOW)
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withPolicyAction(GovernedServiceItemPolicyAction.AUDIT_ONLY),
                new GovernedServiceItem().withServiceId(ServiceIdentifier.COSMOS_DB)
                    .withOption(GovernedServiceItemOption.DENY)
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withPolicyAction(GovernedServiceItemPolicyAction.AUDIT_ONLY),
                new GovernedServiceItem().withServiceId(ServiceIdentifier.PRIVATE_DNSZONES)
                    .withOption(GovernedServiceItemOption.EXCEPTION_ONLY)
                    .withEnforcement(GovernedServiceItemEnforcement.ENABLED)
                    .withPolicyAction(GovernedServiceItemPolicyAction.AUDIT_ONLY)))
            .withPolicyOverride(CommunityPropertiesPolicyOverride.NONE)
            .withCommunityRoleAssignments(Arrays.asList(
                new RoleAssignmentItem().withRoleDefinitionId("bq")
                    .withPrincipals(Arrays.asList(new Principal().withId("mkcxozapvh").withType(PrincipalType.USER),
                        new Principal().withId("xprglyatddc").withType(PrincipalType.USER))),
                new RoleAssignmentItem().withRoleDefinitionId("bcuejrjxgci")
                    .withPrincipals(
                        Arrays.asList(new Principal().withId("rhos").withType(PrincipalType.SERVICE_PRINCIPAL)))))
            .withFirewallSku(FirewallSKU.STANDARD)
            .withApprovalSettings(new ApprovalSettings().withEndpointCreation(ApprovalPolicy.NOT_REQUIRED)
                .withEndpointUpdate(ApprovalPolicy.REQUIRED)
                .withEndpointDeletion(ApprovalPolicy.REQUIRED)
                .withConnectionCreation(ApprovalPolicy.REQUIRED)
                .withConnectionUpdate(ApprovalPolicy.REQUIRED)
                .withConnectionDeletion(ApprovalPolicy.NOT_REQUIRED)
                .withEnclaveCreation(ApprovalPolicy.NOT_REQUIRED)
                .withEnclaveDeletion(ApprovalPolicy.REQUIRED)
                .withMaintenanceMode(ApprovalPolicy.NOT_REQUIRED)
                .withServiceCatalogDeployment(ApprovalPolicy.NOT_REQUIRED)
                .withNotificationOnApprovalCreation(ApprovalPolicy.NOT_REQUIRED)
                .withNotificationOnApprovalAction(ApprovalPolicy.NOT_REQUIRED)
                .withNotificationOnApprovalDeletion(ApprovalPolicy.NOT_REQUIRED)
                .withMandatoryApprovers(Arrays.asList(new MandatoryApprover().withApproverEntraId("ofyyvoqacpi"),
                    new MandatoryApprover().withApproverEntraId("xpbtgiwbwo"),
                    new MandatoryApprover().withApproverEntraId("nwashrtd"),
                    new MandatoryApprover().withApproverEntraId("kcnqxwbpo")))
                .withMinimumApproversRequired(8644340540999896271L))
            .withMaintenanceModeConfiguration(
                new MaintenanceModeConfigurationModel().withMode(MaintenanceModeConfigurationModelMode.GENERAL)
                    .withPrincipals(Arrays.asList(new Principal().withId("aasipqi").withType(PrincipalType.USER),
                        new Principal().withId("byuqerpqlp").withType(PrincipalType.SERVICE_PRINCIPAL)))
                    .withJustification(MaintenanceModeConfigurationModelJustification.OFF));
        model = BinaryData.fromObject(model).toObject(CommunityProperties.class);
        Assertions.assertEquals("hdneuelfph", model.addressSpace());
        Assertions.assertEquals("htozfikdow", model.dnsServers().get(0));
        Assertions.assertEquals(ServiceIdentifier.COSMOS_DB, model.governedServiceList().get(0).serviceId());
        Assertions.assertEquals(GovernedServiceItemOption.DENY, model.governedServiceList().get(0).option());
        Assertions.assertEquals(GovernedServiceItemEnforcement.DISABLED,
            model.governedServiceList().get(0).enforcement());
        Assertions.assertEquals(GovernedServiceItemPolicyAction.ENFORCE,
            model.governedServiceList().get(0).policyAction());
        Assertions.assertEquals(CommunityPropertiesPolicyOverride.NONE, model.policyOverride());
        Assertions.assertEquals("bq", model.communityRoleAssignments().get(0).roleDefinitionId());
        Assertions.assertEquals("mkcxozapvh", model.communityRoleAssignments().get(0).principals().get(0).id());
        Assertions.assertEquals(PrincipalType.USER, model.communityRoleAssignments().get(0).principals().get(0).type());
        Assertions.assertEquals(FirewallSKU.STANDARD, model.firewallSku());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.approvalSettings().endpointCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.approvalSettings().endpointUpdate());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.approvalSettings().endpointDeletion());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.approvalSettings().connectionCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.approvalSettings().connectionUpdate());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.approvalSettings().connectionDeletion());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.approvalSettings().enclaveCreation());
        Assertions.assertEquals(ApprovalPolicy.REQUIRED, model.approvalSettings().enclaveDeletion());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.approvalSettings().maintenanceMode());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.approvalSettings().serviceCatalogDeployment());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.approvalSettings().notificationOnApprovalCreation());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.approvalSettings().notificationOnApprovalAction());
        Assertions.assertEquals(ApprovalPolicy.NOT_REQUIRED, model.approvalSettings().notificationOnApprovalDeletion());
        Assertions.assertEquals("ofyyvoqacpi", model.approvalSettings().mandatoryApprovers().get(0).approverEntraId());
        Assertions.assertEquals(8644340540999896271L, model.approvalSettings().minimumApproversRequired());
        Assertions.assertEquals(MaintenanceModeConfigurationModelMode.GENERAL,
            model.maintenanceModeConfiguration().mode());
        Assertions.assertEquals("aasipqi", model.maintenanceModeConfiguration().principals().get(0).id());
        Assertions.assertEquals(PrincipalType.USER, model.maintenanceModeConfiguration().principals().get(0).type());
        Assertions.assertEquals(MaintenanceModeConfigurationModelJustification.OFF,
            model.maintenanceModeConfiguration().justification());
    }
}
