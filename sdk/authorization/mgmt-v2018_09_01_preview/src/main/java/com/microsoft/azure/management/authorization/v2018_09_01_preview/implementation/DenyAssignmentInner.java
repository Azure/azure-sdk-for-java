/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.authorization.v2018_09_01_preview.implementation;

import java.util.List;
import com.microsoft.azure.management.authorization.v2018_09_01_preview.DenyAssignmentPermission;
import com.microsoft.azure.management.authorization.v2018_09_01_preview.Principal;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;

/**
 * Deny Assignment.
 */
@JsonFlatten
public class DenyAssignmentInner {
    /**
     * The deny assignment ID.
     */
    @JsonProperty(value = "id", access = JsonProperty.Access.WRITE_ONLY)
    private String id;

    /**
     * The deny assignment name.
     */
    @JsonProperty(value = "name", access = JsonProperty.Access.WRITE_ONLY)
    private String name;

    /**
     * The deny assignment type.
     */
    @JsonProperty(value = "type", access = JsonProperty.Access.WRITE_ONLY)
    private String type;

    /**
     * The display name of the deny assignment.
     */
    @JsonProperty(value = "properties.denyAssignmentName")
    private String denyAssignmentName;

    /**
     * The description of the deny assignment.
     */
    @JsonProperty(value = "properties.description")
    private String description;

    /**
     * An array of permissions that are denied by the deny assignment.
     */
    @JsonProperty(value = "properties.permissions")
    private List<DenyAssignmentPermission> permissions;

    /**
     * The deny assignment scope.
     */
    @JsonProperty(value = "properties.scope")
    private String scope;

    /**
     * Determines if the deny assignment applies to child scopes. Default value
     * is false.
     */
    @JsonProperty(value = "properties.doNotApplyToChildScopes")
    private Boolean doNotApplyToChildScopes;

    /**
     * Array of principals to which the deny assignment applies.
     */
    @JsonProperty(value = "properties.principals")
    private List<Principal> principals;

    /**
     * Array of principals to which the deny assignment does not apply.
     */
    @JsonProperty(value = "properties.excludePrincipals")
    private List<Principal> excludePrincipals;

    /**
     * Specifies whether this deny assignment was created by Azure and cannot
     * be edited or deleted.
     */
    @JsonProperty(value = "properties.isSystemProtected")
    private Boolean isSystemProtected;

    /**
     * Get the deny assignment ID.
     *
     * @return the id value
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the deny assignment name.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the deny assignment type.
     *
     * @return the type value
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the display name of the deny assignment.
     *
     * @return the denyAssignmentName value
     */
    public String denyAssignmentName() {
        return this.denyAssignmentName;
    }

    /**
     * Set the display name of the deny assignment.
     *
     * @param denyAssignmentName the denyAssignmentName value to set
     * @return the DenyAssignmentInner object itself.
     */
    public DenyAssignmentInner withDenyAssignmentName(String denyAssignmentName) {
        this.denyAssignmentName = denyAssignmentName;
        return this;
    }

    /**
     * Get the description of the deny assignment.
     *
     * @return the description value
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description of the deny assignment.
     *
     * @param description the description value to set
     * @return the DenyAssignmentInner object itself.
     */
    public DenyAssignmentInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get an array of permissions that are denied by the deny assignment.
     *
     * @return the permissions value
     */
    public List<DenyAssignmentPermission> permissions() {
        return this.permissions;
    }

    /**
     * Set an array of permissions that are denied by the deny assignment.
     *
     * @param permissions the permissions value to set
     * @return the DenyAssignmentInner object itself.
     */
    public DenyAssignmentInner withPermissions(List<DenyAssignmentPermission> permissions) {
        this.permissions = permissions;
        return this;
    }

    /**
     * Get the deny assignment scope.
     *
     * @return the scope value
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the deny assignment scope.
     *
     * @param scope the scope value to set
     * @return the DenyAssignmentInner object itself.
     */
    public DenyAssignmentInner withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get determines if the deny assignment applies to child scopes. Default value is false.
     *
     * @return the doNotApplyToChildScopes value
     */
    public Boolean doNotApplyToChildScopes() {
        return this.doNotApplyToChildScopes;
    }

    /**
     * Set determines if the deny assignment applies to child scopes. Default value is false.
     *
     * @param doNotApplyToChildScopes the doNotApplyToChildScopes value to set
     * @return the DenyAssignmentInner object itself.
     */
    public DenyAssignmentInner withDoNotApplyToChildScopes(Boolean doNotApplyToChildScopes) {
        this.doNotApplyToChildScopes = doNotApplyToChildScopes;
        return this;
    }

    /**
     * Get array of principals to which the deny assignment applies.
     *
     * @return the principals value
     */
    public List<Principal> principals() {
        return this.principals;
    }

    /**
     * Set array of principals to which the deny assignment applies.
     *
     * @param principals the principals value to set
     * @return the DenyAssignmentInner object itself.
     */
    public DenyAssignmentInner withPrincipals(List<Principal> principals) {
        this.principals = principals;
        return this;
    }

    /**
     * Get array of principals to which the deny assignment does not apply.
     *
     * @return the excludePrincipals value
     */
    public List<Principal> excludePrincipals() {
        return this.excludePrincipals;
    }

    /**
     * Set array of principals to which the deny assignment does not apply.
     *
     * @param excludePrincipals the excludePrincipals value to set
     * @return the DenyAssignmentInner object itself.
     */
    public DenyAssignmentInner withExcludePrincipals(List<Principal> excludePrincipals) {
        this.excludePrincipals = excludePrincipals;
        return this;
    }

    /**
     * Get specifies whether this deny assignment was created by Azure and cannot be edited or deleted.
     *
     * @return the isSystemProtected value
     */
    public Boolean isSystemProtected() {
        return this.isSystemProtected;
    }

    /**
     * Set specifies whether this deny assignment was created by Azure and cannot be edited or deleted.
     *
     * @param isSystemProtected the isSystemProtected value to set
     * @return the DenyAssignmentInner object itself.
     */
    public DenyAssignmentInner withIsSystemProtected(Boolean isSystemProtected) {
        this.isSystemProtected = isSystemProtected;
        return this;
    }

}
