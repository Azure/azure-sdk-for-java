// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.authorization.generated.fluent.models.AccessReviewInstanceInner;
import com.azure.resourcemanager.authorization.generated.fluent.models.AccessReviewScheduleDefinitionInner;
import com.azure.resourcemanager.authorization.generated.fluent.models.AccessReviewScheduleDefinitionProperties;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewActorIdentityType;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewInstance;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewRecurrencePatternType;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewRecurrenceRangeType;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewReviewer;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewScheduleDefinition;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewScheduleDefinitionReviewersType;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewScheduleDefinitionStatus;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewScopeAssignmentState;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewScopePrincipalType;
import com.azure.resourcemanager.authorization.generated.models.DefaultDecisionType;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public final class AccessReviewScheduleDefinitionImpl
    implements AccessReviewScheduleDefinition,
        AccessReviewScheduleDefinition.Definition,
        AccessReviewScheduleDefinition.Update {
    private AccessReviewScheduleDefinitionInner innerObject;

    private final com.azure.resourcemanager.authorization.generated.AuthorizationManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String displayName() {
        return this.innerModel().displayName();
    }

    public AccessReviewScheduleDefinitionStatus status() {
        return this.innerModel().status();
    }

    public String descriptionForAdmins() {
        return this.innerModel().descriptionForAdmins();
    }

    public String descriptionForReviewers() {
        return this.innerModel().descriptionForReviewers();
    }

    public List<AccessReviewReviewer> reviewers() {
        List<AccessReviewReviewer> inner = this.innerModel().reviewers();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<AccessReviewReviewer> backupReviewers() {
        List<AccessReviewReviewer> inner = this.innerModel().backupReviewers();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public AccessReviewScheduleDefinitionReviewersType reviewersType() {
        return this.innerModel().reviewersType();
    }

    public List<AccessReviewInstance> instances() {
        List<AccessReviewInstanceInner> inner = this.innerModel().instances();
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new AccessReviewInstanceImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public String principalId() {
        return this.innerModel().principalId();
    }

    public AccessReviewActorIdentityType principalType() {
        return this.innerModel().principalType();
    }

    public String principalName() {
        return this.innerModel().principalName();
    }

    public String userPrincipalName() {
        return this.innerModel().userPrincipalName();
    }

    public Boolean mailNotificationsEnabled() {
        return this.innerModel().mailNotificationsEnabled();
    }

    public Boolean reminderNotificationsEnabled() {
        return this.innerModel().reminderNotificationsEnabled();
    }

    public Boolean defaultDecisionEnabled() {
        return this.innerModel().defaultDecisionEnabled();
    }

    public Boolean justificationRequiredOnApproval() {
        return this.innerModel().justificationRequiredOnApproval();
    }

    public DefaultDecisionType defaultDecision() {
        return this.innerModel().defaultDecision();
    }

    public Boolean autoApplyDecisionsEnabled() {
        return this.innerModel().autoApplyDecisionsEnabled();
    }

    public Boolean recommendationsEnabled() {
        return this.innerModel().recommendationsEnabled();
    }

    public Duration recommendationLookBackDuration() {
        return this.innerModel().recommendationLookBackDuration();
    }

    public Integer instanceDurationInDays() {
        return this.innerModel().instanceDurationInDays();
    }

    public AccessReviewRecurrencePatternType typePropertiesType() {
        return this.innerModel().typePropertiesType();
    }

    public Integer interval() {
        return this.innerModel().interval();
    }

    public AccessReviewRecurrenceRangeType typeRangeType() {
        return this.innerModel().typeRangeType();
    }

    public Integer numberOfOccurrences() {
        return this.innerModel().numberOfOccurrences();
    }

    public OffsetDateTime startDate() {
        return this.innerModel().startDate();
    }

    public OffsetDateTime endDate() {
        return this.innerModel().endDate();
    }

    public String resourceId() {
        return this.innerModel().resourceId();
    }

    public String roleDefinitionId() {
        return this.innerModel().roleDefinitionId();
    }

    public AccessReviewScopePrincipalType principalTypeScopePrincipalType() {
        return this.innerModel().principalTypeScopePrincipalType();
    }

    public AccessReviewScopeAssignmentState assignmentState() {
        return this.innerModel().assignmentState();
    }

    public Duration inactiveDuration() {
        return this.innerModel().inactiveDuration();
    }

    public Boolean expandNestedMemberships() {
        return this.innerModel().expandNestedMemberships();
    }

    public AccessReviewScheduleDefinitionInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.authorization.generated.AuthorizationManager manager() {
        return this.serviceManager;
    }

    private String scheduleDefinitionId;

    private AccessReviewScheduleDefinitionProperties createProperties;

    private AccessReviewScheduleDefinitionProperties updateProperties;

    public AccessReviewScheduleDefinition create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccessReviewScheduleDefinitions()
                .createOrUpdateByIdWithResponse(scheduleDefinitionId, createProperties, Context.NONE)
                .getValue();
        return this;
    }

    public AccessReviewScheduleDefinition create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccessReviewScheduleDefinitions()
                .createOrUpdateByIdWithResponse(scheduleDefinitionId, createProperties, context)
                .getValue();
        return this;
    }

    AccessReviewScheduleDefinitionImpl(
        String name, com.azure.resourcemanager.authorization.generated.AuthorizationManager serviceManager) {
        this.innerObject = new AccessReviewScheduleDefinitionInner();
        this.serviceManager = serviceManager;
        this.scheduleDefinitionId = name;
        this.createProperties = new AccessReviewScheduleDefinitionProperties();
    }

    public AccessReviewScheduleDefinitionImpl update() {
        this.updateProperties = new AccessReviewScheduleDefinitionProperties();
        return this;
    }

    public AccessReviewScheduleDefinition apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccessReviewScheduleDefinitions()
                .createOrUpdateByIdWithResponse(scheduleDefinitionId, updateProperties, Context.NONE)
                .getValue();
        return this;
    }

    public AccessReviewScheduleDefinition apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccessReviewScheduleDefinitions()
                .createOrUpdateByIdWithResponse(scheduleDefinitionId, updateProperties, context)
                .getValue();
        return this;
    }

    AccessReviewScheduleDefinitionImpl(
        AccessReviewScheduleDefinitionInner innerObject,
        com.azure.resourcemanager.authorization.generated.AuthorizationManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.scheduleDefinitionId = Utils.getValueFromIdByName(innerObject.id(), "accessReviewScheduleDefinitions");
    }

    public AccessReviewScheduleDefinition refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccessReviewScheduleDefinitions()
                .getByIdWithResponse(scheduleDefinitionId, Context.NONE)
                .getValue();
        return this;
    }

    public AccessReviewScheduleDefinition refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccessReviewScheduleDefinitions()
                .getByIdWithResponse(scheduleDefinitionId, context)
                .getValue();
        return this;
    }

    public void stop() {
        serviceManager.accessReviewScheduleDefinitions().stop(scheduleDefinitionId);
    }

    public Response<Void> stopWithResponse(Context context) {
        return serviceManager.accessReviewScheduleDefinitions().stopWithResponse(scheduleDefinitionId, context);
    }

    public AccessReviewScheduleDefinitionImpl withDisplayName(String displayName) {
        if (isInCreateMode()) {
            this.createProperties.withDisplayName(displayName);
            return this;
        } else {
            this.updateProperties.withDisplayName(displayName);
            return this;
        }
    }

    public AccessReviewScheduleDefinitionImpl withDescriptionForAdmins(String descriptionForAdmins) {
        if (isInCreateMode()) {
            this.createProperties.withDescriptionForAdmins(descriptionForAdmins);
            return this;
        } else {
            this.updateProperties.withDescriptionForAdmins(descriptionForAdmins);
            return this;
        }
    }

    public AccessReviewScheduleDefinitionImpl withDescriptionForReviewers(String descriptionForReviewers) {
        if (isInCreateMode()) {
            this.createProperties.withDescriptionForReviewers(descriptionForReviewers);
            return this;
        } else {
            this.updateProperties.withDescriptionForReviewers(descriptionForReviewers);
            return this;
        }
    }

    public AccessReviewScheduleDefinitionImpl withReviewers(List<AccessReviewReviewer> reviewers) {
        if (isInCreateMode()) {
            this.createProperties.withReviewers(reviewers);
            return this;
        } else {
            this.updateProperties.withReviewers(reviewers);
            return this;
        }
    }

    public AccessReviewScheduleDefinitionImpl withBackupReviewers(List<AccessReviewReviewer> backupReviewers) {
        if (isInCreateMode()) {
            this.createProperties.withBackupReviewers(backupReviewers);
            return this;
        } else {
            this.updateProperties.withBackupReviewers(backupReviewers);
            return this;
        }
    }

    public AccessReviewScheduleDefinitionImpl withInstances(List<AccessReviewInstanceInner> instances) {
        if (isInCreateMode()) {
            this.createProperties.withInstances(instances);
            return this;
        } else {
            this.updateProperties.withInstances(instances);
            return this;
        }
    }

    public AccessReviewScheduleDefinitionImpl withMailNotificationsEnabled(Boolean mailNotificationsEnabled) {
        if (isInCreateMode()) {
            this.createProperties.withMailNotificationsEnabled(mailNotificationsEnabled);
            return this;
        } else {
            this.updateProperties.withMailNotificationsEnabled(mailNotificationsEnabled);
            return this;
        }
    }

    public AccessReviewScheduleDefinitionImpl withReminderNotificationsEnabled(Boolean reminderNotificationsEnabled) {
        if (isInCreateMode()) {
            this.createProperties.withReminderNotificationsEnabled(reminderNotificationsEnabled);
            return this;
        } else {
            this.updateProperties.withReminderNotificationsEnabled(reminderNotificationsEnabled);
            return this;
        }
    }

    public AccessReviewScheduleDefinitionImpl withDefaultDecisionEnabled(Boolean defaultDecisionEnabled) {
        if (isInCreateMode()) {
            this.createProperties.withDefaultDecisionEnabled(defaultDecisionEnabled);
            return this;
        } else {
            this.updateProperties.withDefaultDecisionEnabled(defaultDecisionEnabled);
            return this;
        }
    }

    public AccessReviewScheduleDefinitionImpl withJustificationRequiredOnApproval(
        Boolean justificationRequiredOnApproval) {
        if (isInCreateMode()) {
            this.createProperties.withJustificationRequiredOnApproval(justificationRequiredOnApproval);
            return this;
        } else {
            this.updateProperties.withJustificationRequiredOnApproval(justificationRequiredOnApproval);
            return this;
        }
    }

    public AccessReviewScheduleDefinitionImpl withDefaultDecision(DefaultDecisionType defaultDecision) {
        if (isInCreateMode()) {
            this.createProperties.withDefaultDecision(defaultDecision);
            return this;
        } else {
            this.updateProperties.withDefaultDecision(defaultDecision);
            return this;
        }
    }

    public AccessReviewScheduleDefinitionImpl withAutoApplyDecisionsEnabled(Boolean autoApplyDecisionsEnabled) {
        if (isInCreateMode()) {
            this.createProperties.withAutoApplyDecisionsEnabled(autoApplyDecisionsEnabled);
            return this;
        } else {
            this.updateProperties.withAutoApplyDecisionsEnabled(autoApplyDecisionsEnabled);
            return this;
        }
    }

    public AccessReviewScheduleDefinitionImpl withRecommendationsEnabled(Boolean recommendationsEnabled) {
        if (isInCreateMode()) {
            this.createProperties.withRecommendationsEnabled(recommendationsEnabled);
            return this;
        } else {
            this.updateProperties.withRecommendationsEnabled(recommendationsEnabled);
            return this;
        }
    }

    public AccessReviewScheduleDefinitionImpl withRecommendationLookBackDuration(
        Duration recommendationLookBackDuration) {
        if (isInCreateMode()) {
            this.createProperties.withRecommendationLookBackDuration(recommendationLookBackDuration);
            return this;
        } else {
            this.updateProperties.withRecommendationLookBackDuration(recommendationLookBackDuration);
            return this;
        }
    }

    public AccessReviewScheduleDefinitionImpl withInstanceDurationInDays(Integer instanceDurationInDays) {
        if (isInCreateMode()) {
            this.createProperties.withInstanceDurationInDays(instanceDurationInDays);
            return this;
        } else {
            this.updateProperties.withInstanceDurationInDays(instanceDurationInDays);
            return this;
        }
    }

    public AccessReviewScheduleDefinitionImpl withType(AccessReviewRecurrencePatternType type) {
        if (isInCreateMode()) {
            this.createProperties.withType(type);
            return this;
        } else {
            this.updateProperties.withType(type);
            return this;
        }
    }

    public AccessReviewScheduleDefinitionImpl withInterval(Integer interval) {
        if (isInCreateMode()) {
            this.createProperties.withInterval(interval);
            return this;
        } else {
            this.updateProperties.withInterval(interval);
            return this;
        }
    }

    public AccessReviewScheduleDefinitionImpl withTypeRangeType(AccessReviewRecurrenceRangeType typeRangeType) {
        if (isInCreateMode()) {
            this.createProperties.withTypeRangeType(typeRangeType);
            return this;
        } else {
            this.updateProperties.withTypeRangeType(typeRangeType);
            return this;
        }
    }

    public AccessReviewScheduleDefinitionImpl withNumberOfOccurrences(Integer numberOfOccurrences) {
        if (isInCreateMode()) {
            this.createProperties.withNumberOfOccurrences(numberOfOccurrences);
            return this;
        } else {
            this.updateProperties.withNumberOfOccurrences(numberOfOccurrences);
            return this;
        }
    }

    public AccessReviewScheduleDefinitionImpl withStartDate(OffsetDateTime startDate) {
        if (isInCreateMode()) {
            this.createProperties.withStartDate(startDate);
            return this;
        } else {
            this.updateProperties.withStartDate(startDate);
            return this;
        }
    }

    public AccessReviewScheduleDefinitionImpl withEndDate(OffsetDateTime endDate) {
        if (isInCreateMode()) {
            this.createProperties.withEndDate(endDate);
            return this;
        } else {
            this.updateProperties.withEndDate(endDate);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
