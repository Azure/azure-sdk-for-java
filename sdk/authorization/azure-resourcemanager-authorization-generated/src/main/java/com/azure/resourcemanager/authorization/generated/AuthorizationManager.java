// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.authorization.generated.fluent.AuthorizationManagementClient;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewDefaultSettingsOperationsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewHistoryDefinitionInstancesImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewHistoryDefinitionInstancesOperationsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewHistoryDefinitionOperationsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewHistoryDefinitionsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewInstanceContactedReviewersImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewInstanceDecisionsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewInstanceMyDecisionsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewInstanceOperationsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewInstancesAssignedForMyApprovalsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewInstancesImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewScheduleDefinitionsAssignedForMyApprovalsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AccessReviewScheduleDefinitionsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.AuthorizationManagementClientBuilder;
import com.azure.resourcemanager.authorization.generated.implementation.OperationsImpl;
import com.azure.resourcemanager.authorization.generated.implementation.TenantLevelAccessReviewInstanceContactedReviewersImpl;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewDefaultSettingsOperations;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewHistoryDefinitionInstances;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewHistoryDefinitionInstancesOperations;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewHistoryDefinitionOperations;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewHistoryDefinitions;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewInstanceContactedReviewers;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewInstanceDecisions;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewInstanceMyDecisions;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewInstanceOperations;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewInstances;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewInstancesAssignedForMyApprovals;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewScheduleDefinitions;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewScheduleDefinitionsAssignedForMyApprovals;
import com.azure.resourcemanager.authorization.generated.models.Operations;
import com.azure.resourcemanager.authorization.generated.models.TenantLevelAccessReviewInstanceContactedReviewers;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Entry point to AuthorizationManager. Access reviews service provides the workflow for running access reviews on
 * different kind of resources.
 */
public final class AuthorizationManager {
    private Operations operations;

    private AccessReviewHistoryDefinitions accessReviewHistoryDefinitions;

    private AccessReviewHistoryDefinitionOperations accessReviewHistoryDefinitionOperations;

    private AccessReviewHistoryDefinitionInstances accessReviewHistoryDefinitionInstances;

    private AccessReviewHistoryDefinitionInstancesOperations accessReviewHistoryDefinitionInstancesOperations;

    private AccessReviewScheduleDefinitions accessReviewScheduleDefinitions;

    private AccessReviewInstances accessReviewInstances;

    private AccessReviewInstanceOperations accessReviewInstanceOperations;

    private AccessReviewInstanceDecisions accessReviewInstanceDecisions;

    private AccessReviewInstanceContactedReviewers accessReviewInstanceContactedReviewers;

    private AccessReviewDefaultSettingsOperations accessReviewDefaultSettingsOperations;

    private AccessReviewScheduleDefinitionsAssignedForMyApprovals accessReviewScheduleDefinitionsAssignedForMyApprovals;

    private AccessReviewInstancesAssignedForMyApprovals accessReviewInstancesAssignedForMyApprovals;

    private AccessReviewInstanceMyDecisions accessReviewInstanceMyDecisions;

    private TenantLevelAccessReviewInstanceContactedReviewers tenantLevelAccessReviewInstanceContactedReviewers;

    private final AuthorizationManagementClient clientObject;

    private AuthorizationManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject =
            new AuthorizationManagementClientBuilder()
                .pipeline(httpPipeline)
                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
                .subscriptionId(profile.getSubscriptionId())
                .defaultPollInterval(defaultPollInterval)
                .buildClient();
    }

    /**
     * Creates an instance of Authorization service API entry point.
     *
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Authorization service API instance.
     */
    public static AuthorizationManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of Authorization service API entry point.
     *
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the Authorization service API instance.
     */
    public static AuthorizationManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new AuthorizationManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create AuthorizationManager with optional configuration.
     *
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new AuthorizationManager.Configurable();
    }

    /** The Configurable allowing configurations to be set. */
    public static final class Configurable {
        private static final ClientLogger LOGGER = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private RetryOptions retryOptions;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the retry options for the HTTP pipeline retry policy.
         *
         * <p>This setting has no effect, if retry policy is set via {@link #withRetryPolicy(RetryPolicy)}.
         *
         * @param retryOptions the retry options for the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryOptions(RetryOptions retryOptions) {
            this.retryOptions = Objects.requireNonNull(retryOptions, "'retryOptions' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval =
                Objects.requireNonNull(defaultPollInterval, "'defaultPollInterval' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw LOGGER
                    .logExceptionAsError(new IllegalArgumentException("'defaultPollInterval' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of Authorization service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the Authorization service API instance.
         */
        public AuthorizationManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder
                .append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.authorization.generated")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder
                    .append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                if (retryOptions != null) {
                    retryPolicy = new RetryPolicy(retryOptions);
                } else {
                    retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
                }
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new AddHeadersFromContextPolicy());
            policies.add(new RequestIdPolicy());
            policies
                .addAll(
                    this
                        .policies
                        .stream()
                        .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                        .collect(Collectors.toList()));
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies
                .addAll(
                    this
                        .policies
                        .stream()
                        .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                        .collect(Collectors.toList()));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                    .httpClient(httpClient)
                    .policies(policies.toArray(new HttpPipelinePolicy[0]))
                    .build();
            return new AuthorizationManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /**
     * Gets the resource collection API of Operations.
     *
     * @return Resource collection API of Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /**
     * Gets the resource collection API of AccessReviewHistoryDefinitions.
     *
     * @return Resource collection API of AccessReviewHistoryDefinitions.
     */
    public AccessReviewHistoryDefinitions accessReviewHistoryDefinitions() {
        if (this.accessReviewHistoryDefinitions == null) {
            this.accessReviewHistoryDefinitions =
                new AccessReviewHistoryDefinitionsImpl(clientObject.getAccessReviewHistoryDefinitions(), this);
        }
        return accessReviewHistoryDefinitions;
    }

    /**
     * Gets the resource collection API of AccessReviewHistoryDefinitionOperations. It manages
     * AccessReviewHistoryDefinition.
     *
     * @return Resource collection API of AccessReviewHistoryDefinitionOperations.
     */
    public AccessReviewHistoryDefinitionOperations accessReviewHistoryDefinitionOperations() {
        if (this.accessReviewHistoryDefinitionOperations == null) {
            this.accessReviewHistoryDefinitionOperations =
                new AccessReviewHistoryDefinitionOperationsImpl(
                    clientObject.getAccessReviewHistoryDefinitionOperations(), this);
        }
        return accessReviewHistoryDefinitionOperations;
    }

    /**
     * Gets the resource collection API of AccessReviewHistoryDefinitionInstances.
     *
     * @return Resource collection API of AccessReviewHistoryDefinitionInstances.
     */
    public AccessReviewHistoryDefinitionInstances accessReviewHistoryDefinitionInstances() {
        if (this.accessReviewHistoryDefinitionInstances == null) {
            this.accessReviewHistoryDefinitionInstances =
                new AccessReviewHistoryDefinitionInstancesImpl(
                    clientObject.getAccessReviewHistoryDefinitionInstances(), this);
        }
        return accessReviewHistoryDefinitionInstances;
    }

    /**
     * Gets the resource collection API of AccessReviewHistoryDefinitionInstancesOperations.
     *
     * @return Resource collection API of AccessReviewHistoryDefinitionInstancesOperations.
     */
    public AccessReviewHistoryDefinitionInstancesOperations accessReviewHistoryDefinitionInstancesOperations() {
        if (this.accessReviewHistoryDefinitionInstancesOperations == null) {
            this.accessReviewHistoryDefinitionInstancesOperations =
                new AccessReviewHistoryDefinitionInstancesOperationsImpl(
                    clientObject.getAccessReviewHistoryDefinitionInstancesOperations(), this);
        }
        return accessReviewHistoryDefinitionInstancesOperations;
    }

    /**
     * Gets the resource collection API of AccessReviewScheduleDefinitions. It manages AccessReviewScheduleDefinition.
     *
     * @return Resource collection API of AccessReviewScheduleDefinitions.
     */
    public AccessReviewScheduleDefinitions accessReviewScheduleDefinitions() {
        if (this.accessReviewScheduleDefinitions == null) {
            this.accessReviewScheduleDefinitions =
                new AccessReviewScheduleDefinitionsImpl(clientObject.getAccessReviewScheduleDefinitions(), this);
        }
        return accessReviewScheduleDefinitions;
    }

    /**
     * Gets the resource collection API of AccessReviewInstances. It manages AccessReviewInstance.
     *
     * @return Resource collection API of AccessReviewInstances.
     */
    public AccessReviewInstances accessReviewInstances() {
        if (this.accessReviewInstances == null) {
            this.accessReviewInstances = new AccessReviewInstancesImpl(clientObject.getAccessReviewInstances(), this);
        }
        return accessReviewInstances;
    }

    /**
     * Gets the resource collection API of AccessReviewInstanceOperations.
     *
     * @return Resource collection API of AccessReviewInstanceOperations.
     */
    public AccessReviewInstanceOperations accessReviewInstanceOperations() {
        if (this.accessReviewInstanceOperations == null) {
            this.accessReviewInstanceOperations =
                new AccessReviewInstanceOperationsImpl(clientObject.getAccessReviewInstanceOperations(), this);
        }
        return accessReviewInstanceOperations;
    }

    /**
     * Gets the resource collection API of AccessReviewInstanceDecisions.
     *
     * @return Resource collection API of AccessReviewInstanceDecisions.
     */
    public AccessReviewInstanceDecisions accessReviewInstanceDecisions() {
        if (this.accessReviewInstanceDecisions == null) {
            this.accessReviewInstanceDecisions =
                new AccessReviewInstanceDecisionsImpl(clientObject.getAccessReviewInstanceDecisions(), this);
        }
        return accessReviewInstanceDecisions;
    }

    /**
     * Gets the resource collection API of AccessReviewInstanceContactedReviewers.
     *
     * @return Resource collection API of AccessReviewInstanceContactedReviewers.
     */
    public AccessReviewInstanceContactedReviewers accessReviewInstanceContactedReviewers() {
        if (this.accessReviewInstanceContactedReviewers == null) {
            this.accessReviewInstanceContactedReviewers =
                new AccessReviewInstanceContactedReviewersImpl(
                    clientObject.getAccessReviewInstanceContactedReviewers(), this);
        }
        return accessReviewInstanceContactedReviewers;
    }

    /**
     * Gets the resource collection API of AccessReviewDefaultSettingsOperations.
     *
     * @return Resource collection API of AccessReviewDefaultSettingsOperations.
     */
    public AccessReviewDefaultSettingsOperations accessReviewDefaultSettingsOperations() {
        if (this.accessReviewDefaultSettingsOperations == null) {
            this.accessReviewDefaultSettingsOperations =
                new AccessReviewDefaultSettingsOperationsImpl(
                    clientObject.getAccessReviewDefaultSettingsOperations(), this);
        }
        return accessReviewDefaultSettingsOperations;
    }

    /**
     * Gets the resource collection API of AccessReviewScheduleDefinitionsAssignedForMyApprovals.
     *
     * @return Resource collection API of AccessReviewScheduleDefinitionsAssignedForMyApprovals.
     */
    public AccessReviewScheduleDefinitionsAssignedForMyApprovals
        accessReviewScheduleDefinitionsAssignedForMyApprovals() {
        if (this.accessReviewScheduleDefinitionsAssignedForMyApprovals == null) {
            this.accessReviewScheduleDefinitionsAssignedForMyApprovals =
                new AccessReviewScheduleDefinitionsAssignedForMyApprovalsImpl(
                    clientObject.getAccessReviewScheduleDefinitionsAssignedForMyApprovals(), this);
        }
        return accessReviewScheduleDefinitionsAssignedForMyApprovals;
    }

    /**
     * Gets the resource collection API of AccessReviewInstancesAssignedForMyApprovals.
     *
     * @return Resource collection API of AccessReviewInstancesAssignedForMyApprovals.
     */
    public AccessReviewInstancesAssignedForMyApprovals accessReviewInstancesAssignedForMyApprovals() {
        if (this.accessReviewInstancesAssignedForMyApprovals == null) {
            this.accessReviewInstancesAssignedForMyApprovals =
                new AccessReviewInstancesAssignedForMyApprovalsImpl(
                    clientObject.getAccessReviewInstancesAssignedForMyApprovals(), this);
        }
        return accessReviewInstancesAssignedForMyApprovals;
    }

    /**
     * Gets the resource collection API of AccessReviewInstanceMyDecisions.
     *
     * @return Resource collection API of AccessReviewInstanceMyDecisions.
     */
    public AccessReviewInstanceMyDecisions accessReviewInstanceMyDecisions() {
        if (this.accessReviewInstanceMyDecisions == null) {
            this.accessReviewInstanceMyDecisions =
                new AccessReviewInstanceMyDecisionsImpl(clientObject.getAccessReviewInstanceMyDecisions(), this);
        }
        return accessReviewInstanceMyDecisions;
    }

    /**
     * Gets the resource collection API of TenantLevelAccessReviewInstanceContactedReviewers.
     *
     * @return Resource collection API of TenantLevelAccessReviewInstanceContactedReviewers.
     */
    public TenantLevelAccessReviewInstanceContactedReviewers tenantLevelAccessReviewInstanceContactedReviewers() {
        if (this.tenantLevelAccessReviewInstanceContactedReviewers == null) {
            this.tenantLevelAccessReviewInstanceContactedReviewers =
                new TenantLevelAccessReviewInstanceContactedReviewersImpl(
                    clientObject.getTenantLevelAccessReviewInstanceContactedReviewers(), this);
        }
        return tenantLevelAccessReviewInstanceContactedReviewers;
    }

    /**
     * @return Wrapped service client AuthorizationManagementClient providing direct access to the underlying
     *     auto-generated API implementation, based on Azure REST API.
     */
    public AuthorizationManagementClient serviceClient() {
        return this.clientObject;
    }
}
