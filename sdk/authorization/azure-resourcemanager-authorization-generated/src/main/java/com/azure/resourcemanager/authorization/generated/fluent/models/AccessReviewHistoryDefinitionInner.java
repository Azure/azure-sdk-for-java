// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewActorIdentityType;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewHistoryDefinitionStatus;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewRecurrencePatternType;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewRecurrenceRangeType;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewResult;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Access Review History Definition. */
@Fluent
public final class AccessReviewHistoryDefinitionInner extends ProxyResource {
    /*
     * Access Review History Definition properties.
     */
    @JsonProperty(value = "properties")
    private AccessReviewHistoryDefinitionProperties innerProperties;

    /**
     * Get the innerProperties property: Access Review History Definition properties.
     *
     * @return the innerProperties value.
     */
    private AccessReviewHistoryDefinitionProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the displayName property: The display name for the history definition.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: The display name for the history definition.
     *
     * @param displayName the displayName value to set.
     * @return the AccessReviewHistoryDefinitionInner object itself.
     */
    public AccessReviewHistoryDefinitionInner withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccessReviewHistoryDefinitionProperties();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the reviewHistoryPeriodStartDateTime property: Date time used when selecting review data, all reviews
     * included in data start on or after this date. For use only with one-time/non-recurring reports.
     *
     * @return the reviewHistoryPeriodStartDateTime value.
     */
    public OffsetDateTime reviewHistoryPeriodStartDateTime() {
        return this.innerProperties() == null ? null : this.innerProperties().reviewHistoryPeriodStartDateTime();
    }

    /**
     * Get the reviewHistoryPeriodEndDateTime property: Date time used when selecting review data, all reviews included
     * in data end on or before this date. For use only with one-time/non-recurring reports.
     *
     * @return the reviewHistoryPeriodEndDateTime value.
     */
    public OffsetDateTime reviewHistoryPeriodEndDateTime() {
        return this.innerProperties() == null ? null : this.innerProperties().reviewHistoryPeriodEndDateTime();
    }

    /**
     * Get the decisions property: Collection of review decisions which the history data should be filtered on. For
     * example if Approve and Deny are supplied the data will only contain review results in which the decision maker
     * approved or denied a review request.
     *
     * @return the decisions value.
     */
    public List<AccessReviewResult> decisions() {
        return this.innerProperties() == null ? null : this.innerProperties().decisions();
    }

    /**
     * Set the decisions property: Collection of review decisions which the history data should be filtered on. For
     * example if Approve and Deny are supplied the data will only contain review results in which the decision maker
     * approved or denied a review request.
     *
     * @param decisions the decisions value to set.
     * @return the AccessReviewHistoryDefinitionInner object itself.
     */
    public AccessReviewHistoryDefinitionInner withDecisions(List<AccessReviewResult> decisions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccessReviewHistoryDefinitionProperties();
        }
        this.innerProperties().withDecisions(decisions);
        return this;
    }

    /**
     * Get the status property: This read-only field specifies the of the requested review history data. This is either
     * requested, in-progress, done or error.
     *
     * @return the status value.
     */
    public AccessReviewHistoryDefinitionStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the createdDateTime property: Date time when history definition was created.
     *
     * @return the createdDateTime value.
     */
    public OffsetDateTime createdDateTime() {
        return this.innerProperties() == null ? null : this.innerProperties().createdDateTime();
    }

    /**
     * Get the scopes property: A collection of scopes used when selecting review history data.
     *
     * @return the scopes value.
     */
    public List<AccessReviewScope> scopes() {
        return this.innerProperties() == null ? null : this.innerProperties().scopes();
    }

    /**
     * Set the scopes property: A collection of scopes used when selecting review history data.
     *
     * @param scopes the scopes value to set.
     * @return the AccessReviewHistoryDefinitionInner object itself.
     */
    public AccessReviewHistoryDefinitionInner withScopes(List<AccessReviewScope> scopes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccessReviewHistoryDefinitionProperties();
        }
        this.innerProperties().withScopes(scopes);
        return this;
    }

    /**
     * Get the instances property: Set of access review history instances for this history definition.
     *
     * @return the instances value.
     */
    public List<AccessReviewHistoryInstanceInner> instances() {
        return this.innerProperties() == null ? null : this.innerProperties().instances();
    }

    /**
     * Set the instances property: Set of access review history instances for this history definition.
     *
     * @param instances the instances value to set.
     * @return the AccessReviewHistoryDefinitionInner object itself.
     */
    public AccessReviewHistoryDefinitionInner withInstances(List<AccessReviewHistoryInstanceInner> instances) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccessReviewHistoryDefinitionProperties();
        }
        this.innerProperties().withInstances(instances);
        return this;
    }

    /**
     * Get the principalId property: The identity id.
     *
     * @return the principalId value.
     */
    public String principalId() {
        return this.innerProperties() == null ? null : this.innerProperties().principalId();
    }

    /**
     * Get the principalType property: The identity type : user/servicePrincipal.
     *
     * @return the principalType value.
     */
    public AccessReviewActorIdentityType principalType() {
        return this.innerProperties() == null ? null : this.innerProperties().principalType();
    }

    /**
     * Get the principalName property: The identity display name.
     *
     * @return the principalName value.
     */
    public String principalName() {
        return this.innerProperties() == null ? null : this.innerProperties().principalName();
    }

    /**
     * Get the userPrincipalName property: The user principal name(if valid).
     *
     * @return the userPrincipalName value.
     */
    public String userPrincipalName() {
        return this.innerProperties() == null ? null : this.innerProperties().userPrincipalName();
    }

    /**
     * Get the type property: The recurrence type : weekly, monthly, etc.
     *
     * @return the type value.
     */
    public AccessReviewRecurrencePatternType typePropertiesType() {
        return this.innerProperties() == null ? null : this.innerProperties().type();
    }

    /**
     * Set the type property: The recurrence type : weekly, monthly, etc.
     *
     * @param type the type value to set.
     * @return the AccessReviewHistoryDefinitionInner object itself.
     */
    public AccessReviewHistoryDefinitionInner withTypePropertiesType(AccessReviewRecurrencePatternType type) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccessReviewHistoryDefinitionProperties();
        }
        this.innerProperties().withType(type);
        return this;
    }

    /**
     * Get the interval property: The interval for recurrence. For a quarterly review, the interval is 3 for type :
     * absoluteMonthly.
     *
     * @return the interval value.
     */
    public Integer interval() {
        return this.innerProperties() == null ? null : this.innerProperties().interval();
    }

    /**
     * Set the interval property: The interval for recurrence. For a quarterly review, the interval is 3 for type :
     * absoluteMonthly.
     *
     * @param interval the interval value to set.
     * @return the AccessReviewHistoryDefinitionInner object itself.
     */
    public AccessReviewHistoryDefinitionInner withInterval(Integer interval) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccessReviewHistoryDefinitionProperties();
        }
        this.innerProperties().withInterval(interval);
        return this;
    }

    /**
     * Get the typeRangeType property: The recurrence range type. The possible values are: endDate, noEnd, numbered.
     *
     * @return the typeRangeType value.
     */
    public AccessReviewRecurrenceRangeType typeRangeType() {
        return this.innerProperties() == null ? null : this.innerProperties().typeRangeType();
    }

    /**
     * Set the typeRangeType property: The recurrence range type. The possible values are: endDate, noEnd, numbered.
     *
     * @param typeRangeType the typeRangeType value to set.
     * @return the AccessReviewHistoryDefinitionInner object itself.
     */
    public AccessReviewHistoryDefinitionInner withTypeRangeType(AccessReviewRecurrenceRangeType typeRangeType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccessReviewHistoryDefinitionProperties();
        }
        this.innerProperties().withTypeRangeType(typeRangeType);
        return this;
    }

    /**
     * Get the numberOfOccurrences property: The number of times to repeat the access review. Required and must be
     * positive if type is numbered.
     *
     * @return the numberOfOccurrences value.
     */
    public Integer numberOfOccurrences() {
        return this.innerProperties() == null ? null : this.innerProperties().numberOfOccurrences();
    }

    /**
     * Set the numberOfOccurrences property: The number of times to repeat the access review. Required and must be
     * positive if type is numbered.
     *
     * @param numberOfOccurrences the numberOfOccurrences value to set.
     * @return the AccessReviewHistoryDefinitionInner object itself.
     */
    public AccessReviewHistoryDefinitionInner withNumberOfOccurrences(Integer numberOfOccurrences) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccessReviewHistoryDefinitionProperties();
        }
        this.innerProperties().withNumberOfOccurrences(numberOfOccurrences);
        return this;
    }

    /**
     * Get the startDate property: The DateTime when the review is scheduled to be start. This could be a date in the
     * future. Required on create.
     *
     * @return the startDate value.
     */
    public OffsetDateTime startDate() {
        return this.innerProperties() == null ? null : this.innerProperties().startDate();
    }

    /**
     * Set the startDate property: The DateTime when the review is scheduled to be start. This could be a date in the
     * future. Required on create.
     *
     * @param startDate the startDate value to set.
     * @return the AccessReviewHistoryDefinitionInner object itself.
     */
    public AccessReviewHistoryDefinitionInner withStartDate(OffsetDateTime startDate) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccessReviewHistoryDefinitionProperties();
        }
        this.innerProperties().withStartDate(startDate);
        return this;
    }

    /**
     * Get the endDate property: The DateTime when the review is scheduled to end. Required if type is endDate.
     *
     * @return the endDate value.
     */
    public OffsetDateTime endDate() {
        return this.innerProperties() == null ? null : this.innerProperties().endDate();
    }

    /**
     * Set the endDate property: The DateTime when the review is scheduled to end. Required if type is endDate.
     *
     * @param endDate the endDate value to set.
     * @return the AccessReviewHistoryDefinitionInner object itself.
     */
    public AccessReviewHistoryDefinitionInner withEndDate(OffsetDateTime endDate) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AccessReviewHistoryDefinitionProperties();
        }
        this.innerProperties().withEndDate(endDate);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
