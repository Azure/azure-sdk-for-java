// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.authorization.generated.models.AccessRecommendationType;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewActorIdentityType;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewApplyResult;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewResult;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Approval Step. */
@Fluent
public final class AccessReviewDecisionProperties {
    /*
     * Principal associated with the decision record. Can be
     * AccessReviewDecisionUserIdentity or
     * AccessReviewDecisionServicePrincipalIdentity
     */
    @JsonProperty(value = "principal", access = JsonProperty.Access.WRITE_ONLY)
    private AccessReviewDecisionIdentity innerPrincipal;

    /*
     * Resource associated with this decision record.
     */
    @JsonProperty(value = "resource", access = JsonProperty.Access.WRITE_ONLY)
    private AccessReviewDecisionResource innerResource;

    /*
     * The feature- generated recommendation shown to the reviewer.
     */
    @JsonProperty(value = "recommendation", access = JsonProperty.Access.WRITE_ONLY)
    private AccessRecommendationType recommendation;

    /*
     * The decision on the approval step. This value is initially set to
     * NotReviewed. Approvers can take action of Approve/Deny
     */
    @JsonProperty(value = "decision")
    private AccessReviewResult decision;

    /*
     * Justification provided by approvers for their action
     */
    @JsonProperty(value = "justification")
    private String justification;

    /*
     * Date Time when a decision was taken.
     */
    @JsonProperty(value = "reviewedDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime reviewedDateTime;

    /*
     * Details of the approver.
     */
    @JsonProperty(value = "reviewedBy", access = JsonProperty.Access.WRITE_ONLY)
    private AccessReviewActorIdentity innerReviewedBy;

    /*
     * The outcome of applying the decision.
     */
    @JsonProperty(value = "applyResult", access = JsonProperty.Access.WRITE_ONLY)
    private AccessReviewApplyResult applyResult;

    /*
     * The date and time when the review decision was applied.
     */
    @JsonProperty(value = "appliedDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime appliedDateTime;

    /*
     * Details of the approver.
     */
    @JsonProperty(value = "appliedBy", access = JsonProperty.Access.WRITE_ONLY)
    private AccessReviewActorIdentity innerAppliedBy;

    /**
     * Get the innerPrincipal property: Principal associated with the decision record. Can be
     * AccessReviewDecisionUserIdentity or AccessReviewDecisionServicePrincipalIdentity.
     *
     * @return the innerPrincipal value.
     */
    private AccessReviewDecisionIdentity innerPrincipal() {
        return this.innerPrincipal;
    }

    /**
     * Get the innerResource property: Resource associated with this decision record.
     *
     * @return the innerResource value.
     */
    private AccessReviewDecisionResource innerResource() {
        return this.innerResource;
    }

    /**
     * Get the recommendation property: The feature- generated recommendation shown to the reviewer.
     *
     * @return the recommendation value.
     */
    public AccessRecommendationType recommendation() {
        return this.recommendation;
    }

    /**
     * Get the decision property: The decision on the approval step. This value is initially set to NotReviewed.
     * Approvers can take action of Approve/Deny.
     *
     * @return the decision value.
     */
    public AccessReviewResult decision() {
        return this.decision;
    }

    /**
     * Set the decision property: The decision on the approval step. This value is initially set to NotReviewed.
     * Approvers can take action of Approve/Deny.
     *
     * @param decision the decision value to set.
     * @return the AccessReviewDecisionProperties object itself.
     */
    public AccessReviewDecisionProperties withDecision(AccessReviewResult decision) {
        this.decision = decision;
        return this;
    }

    /**
     * Get the justification property: Justification provided by approvers for their action.
     *
     * @return the justification value.
     */
    public String justification() {
        return this.justification;
    }

    /**
     * Set the justification property: Justification provided by approvers for their action.
     *
     * @param justification the justification value to set.
     * @return the AccessReviewDecisionProperties object itself.
     */
    public AccessReviewDecisionProperties withJustification(String justification) {
        this.justification = justification;
        return this;
    }

    /**
     * Get the reviewedDateTime property: Date Time when a decision was taken.
     *
     * @return the reviewedDateTime value.
     */
    public OffsetDateTime reviewedDateTime() {
        return this.reviewedDateTime;
    }

    /**
     * Get the innerReviewedBy property: Details of the approver.
     *
     * @return the innerReviewedBy value.
     */
    private AccessReviewActorIdentity innerReviewedBy() {
        return this.innerReviewedBy;
    }

    /**
     * Get the applyResult property: The outcome of applying the decision.
     *
     * @return the applyResult value.
     */
    public AccessReviewApplyResult applyResult() {
        return this.applyResult;
    }

    /**
     * Get the appliedDateTime property: The date and time when the review decision was applied.
     *
     * @return the appliedDateTime value.
     */
    public OffsetDateTime appliedDateTime() {
        return this.appliedDateTime;
    }

    /**
     * Get the innerAppliedBy property: Details of the approver.
     *
     * @return the innerAppliedBy value.
     */
    private AccessReviewActorIdentity innerAppliedBy() {
        return this.innerAppliedBy;
    }

    /**
     * Get the id property: The id of principal whose access was reviewed.
     *
     * @return the id value.
     */
    public String id() {
        return this.innerPrincipal() == null ? null : this.innerPrincipal().id();
    }

    /**
     * Get the displayName property: The display name of the user whose access was reviewed.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerPrincipal() == null ? null : this.innerPrincipal().displayName();
    }

    /**
     * Get the id property: The id of resource associated with a decision record.
     *
     * @return the id value.
     */
    public String idResourceId() {
        return this.innerResource() == null ? null : this.innerResource().id();
    }

    /**
     * Get the displayName property: The display name of resource associated with a decision record.
     *
     * @return the displayName value.
     */
    public String displayNameResourceDisplayName() {
        return this.innerResource() == null ? null : this.innerResource().displayName();
    }

    /**
     * Get the principalId property: The identity id.
     *
     * @return the principalId value.
     */
    public String principalId() {
        return this.innerReviewedBy() == null ? null : this.innerReviewedBy().principalId();
    }

    /**
     * Get the principalType property: The identity type : user/servicePrincipal.
     *
     * @return the principalType value.
     */
    public AccessReviewActorIdentityType principalType() {
        return this.innerReviewedBy() == null ? null : this.innerReviewedBy().principalType();
    }

    /**
     * Get the principalName property: The identity display name.
     *
     * @return the principalName value.
     */
    public String principalName() {
        return this.innerReviewedBy() == null ? null : this.innerReviewedBy().principalName();
    }

    /**
     * Get the userPrincipalName property: The user principal name(if valid).
     *
     * @return the userPrincipalName value.
     */
    public String userPrincipalName() {
        return this.innerReviewedBy() == null ? null : this.innerReviewedBy().userPrincipalName();
    }

    /**
     * Get the principalId property: The identity id.
     *
     * @return the principalId value.
     */
    public String principalIdAppliedByPrincipalId() {
        return this.innerAppliedBy() == null ? null : this.innerAppliedBy().principalId();
    }

    /**
     * Get the principalType property: The identity type : user/servicePrincipal.
     *
     * @return the principalType value.
     */
    public AccessReviewActorIdentityType principalTypeAppliedByPrincipalType() {
        return this.innerAppliedBy() == null ? null : this.innerAppliedBy().principalType();
    }

    /**
     * Get the principalName property: The identity display name.
     *
     * @return the principalName value.
     */
    public String principalNameAppliedByPrincipalName() {
        return this.innerAppliedBy() == null ? null : this.innerAppliedBy().principalName();
    }

    /**
     * Get the userPrincipalName property: The user principal name(if valid).
     *
     * @return the userPrincipalName value.
     */
    public String userPrincipalNameAppliedByUserPrincipalName() {
        return this.innerAppliedBy() == null ? null : this.innerAppliedBy().userPrincipalName();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerPrincipal() != null) {
            innerPrincipal().validate();
        }
        if (innerResource() != null) {
            innerResource().validate();
        }
        if (innerReviewedBy() != null) {
            innerReviewedBy().validate();
        }
        if (innerAppliedBy() != null) {
            innerAppliedBy().validate();
        }
    }
}
