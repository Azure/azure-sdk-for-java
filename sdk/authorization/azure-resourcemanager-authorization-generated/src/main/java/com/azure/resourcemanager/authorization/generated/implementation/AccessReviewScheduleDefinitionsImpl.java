// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.authorization.generated.fluent.AccessReviewScheduleDefinitionsClient;
import com.azure.resourcemanager.authorization.generated.fluent.models.AccessReviewScheduleDefinitionInner;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewScheduleDefinition;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewScheduleDefinitions;

public final class AccessReviewScheduleDefinitionsImpl implements AccessReviewScheduleDefinitions {
    private static final ClientLogger LOGGER = new ClientLogger(AccessReviewScheduleDefinitionsImpl.class);

    private final AccessReviewScheduleDefinitionsClient innerClient;

    private final com.azure.resourcemanager.authorization.generated.AuthorizationManager serviceManager;

    public AccessReviewScheduleDefinitionsImpl(
        AccessReviewScheduleDefinitionsClient innerClient,
        com.azure.resourcemanager.authorization.generated.AuthorizationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AccessReviewScheduleDefinition> list() {
        PagedIterable<AccessReviewScheduleDefinitionInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new AccessReviewScheduleDefinitionImpl(inner1, this.manager()));
    }

    public PagedIterable<AccessReviewScheduleDefinition> list(String filter, Context context) {
        PagedIterable<AccessReviewScheduleDefinitionInner> inner = this.serviceClient().list(filter, context);
        return Utils.mapPage(inner, inner1 -> new AccessReviewScheduleDefinitionImpl(inner1, this.manager()));
    }

    public AccessReviewScheduleDefinition getById(String scheduleDefinitionId) {
        AccessReviewScheduleDefinitionInner inner = this.serviceClient().getById(scheduleDefinitionId);
        if (inner != null) {
            return new AccessReviewScheduleDefinitionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AccessReviewScheduleDefinition> getByIdWithResponse(String scheduleDefinitionId, Context context) {
        Response<AccessReviewScheduleDefinitionInner> inner =
            this.serviceClient().getByIdWithResponse(scheduleDefinitionId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AccessReviewScheduleDefinitionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteById(String scheduleDefinitionId) {
        this.serviceClient().deleteById(scheduleDefinitionId);
    }

    public Response<Void> deleteByIdWithResponse(String scheduleDefinitionId, Context context) {
        return this.serviceClient().deleteByIdWithResponse(scheduleDefinitionId, context);
    }

    public void stop(String scheduleDefinitionId) {
        this.serviceClient().stop(scheduleDefinitionId);
    }

    public Response<Void> stopWithResponse(String scheduleDefinitionId, Context context) {
        return this.serviceClient().stopWithResponse(scheduleDefinitionId, context);
    }

    private AccessReviewScheduleDefinitionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.authorization.generated.AuthorizationManager manager() {
        return this.serviceManager;
    }

    public AccessReviewScheduleDefinitionImpl define(String name) {
        return new AccessReviewScheduleDefinitionImpl(name, this.manager());
    }
}
