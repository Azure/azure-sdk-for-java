// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.authorization.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewActorIdentityType;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewRecurrencePatternType;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewRecurrenceRangeType;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewReviewer;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewScheduleDefinitionReviewersType;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewScheduleDefinitionStatus;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewScopeAssignmentState;
import com.azure.resourcemanager.authorization.generated.models.AccessReviewScopePrincipalType;
import com.azure.resourcemanager.authorization.generated.models.DefaultDecisionType;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.List;

/** Access Review. */
@Fluent
public final class AccessReviewScheduleDefinitionProperties {
    /*
     * The display name for the schedule definition.
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * This read-only field specifies the status of an accessReview.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private AccessReviewScheduleDefinitionStatus status;

    /*
     * The description provided by the access review creator and visible to
     * admins.
     */
    @JsonProperty(value = "descriptionForAdmins")
    private String descriptionForAdmins;

    /*
     * The description provided by the access review creator to be shown to
     * reviewers.
     */
    @JsonProperty(value = "descriptionForReviewers")
    private String descriptionForReviewers;

    /*
     * The user or other identity who created this review.
     */
    @JsonProperty(value = "createdBy", access = JsonProperty.Access.WRITE_ONLY)
    private AccessReviewActorIdentity innerCreatedBy;

    /*
     * Access Review Settings.
     */
    @JsonProperty(value = "settings")
    private AccessReviewScheduleSettings innerSettings;

    /*
     * This is used to define what to include in scope of the review. The scope
     * definition includes the resourceId and roleDefinitionId.
     */
    @JsonProperty(value = "scope", access = JsonProperty.Access.WRITE_ONLY)
    private AccessReviewScope innerScope;

    /*
     * This is the collection of reviewers.
     */
    @JsonProperty(value = "reviewers")
    private List<AccessReviewReviewer> reviewers;

    /*
     * This is the collection of backup reviewers.
     */
    @JsonProperty(value = "backupReviewers")
    private List<AccessReviewReviewer> backupReviewers;

    /*
     * This field specifies the type of reviewers for a review. Usually for a
     * review, reviewers are explicitly assigned. However, in some cases, the
     * reviewers may not be assigned and instead be chosen dynamically. For
     * example managers review or self review.
     */
    @JsonProperty(value = "reviewersType", access = JsonProperty.Access.WRITE_ONLY)
    private AccessReviewScheduleDefinitionReviewersType reviewersType;

    /*
     * This is the collection of instances returned when one does an expand on
     * it.
     */
    @JsonProperty(value = "instances")
    private List<AccessReviewInstanceInner> instances;

    /**
     * Get the displayName property: The display name for the schedule definition.
     *
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name for the schedule definition.
     *
     * @param displayName the displayName value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the status property: This read-only field specifies the status of an accessReview.
     *
     * @return the status value.
     */
    public AccessReviewScheduleDefinitionStatus status() {
        return this.status;
    }

    /**
     * Get the descriptionForAdmins property: The description provided by the access review creator and visible to
     * admins.
     *
     * @return the descriptionForAdmins value.
     */
    public String descriptionForAdmins() {
        return this.descriptionForAdmins;
    }

    /**
     * Set the descriptionForAdmins property: The description provided by the access review creator and visible to
     * admins.
     *
     * @param descriptionForAdmins the descriptionForAdmins value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withDescriptionForAdmins(String descriptionForAdmins) {
        this.descriptionForAdmins = descriptionForAdmins;
        return this;
    }

    /**
     * Get the descriptionForReviewers property: The description provided by the access review creator to be shown to
     * reviewers.
     *
     * @return the descriptionForReviewers value.
     */
    public String descriptionForReviewers() {
        return this.descriptionForReviewers;
    }

    /**
     * Set the descriptionForReviewers property: The description provided by the access review creator to be shown to
     * reviewers.
     *
     * @param descriptionForReviewers the descriptionForReviewers value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withDescriptionForReviewers(String descriptionForReviewers) {
        this.descriptionForReviewers = descriptionForReviewers;
        return this;
    }

    /**
     * Get the innerCreatedBy property: The user or other identity who created this review.
     *
     * @return the innerCreatedBy value.
     */
    private AccessReviewActorIdentity innerCreatedBy() {
        return this.innerCreatedBy;
    }

    /**
     * Get the innerSettings property: Access Review Settings.
     *
     * @return the innerSettings value.
     */
    private AccessReviewScheduleSettings innerSettings() {
        return this.innerSettings;
    }

    /**
     * Get the innerScope property: This is used to define what to include in scope of the review. The scope definition
     * includes the resourceId and roleDefinitionId.
     *
     * @return the innerScope value.
     */
    private AccessReviewScope innerScope() {
        return this.innerScope;
    }

    /**
     * Get the reviewers property: This is the collection of reviewers.
     *
     * @return the reviewers value.
     */
    public List<AccessReviewReviewer> reviewers() {
        return this.reviewers;
    }

    /**
     * Set the reviewers property: This is the collection of reviewers.
     *
     * @param reviewers the reviewers value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withReviewers(List<AccessReviewReviewer> reviewers) {
        this.reviewers = reviewers;
        return this;
    }

    /**
     * Get the backupReviewers property: This is the collection of backup reviewers.
     *
     * @return the backupReviewers value.
     */
    public List<AccessReviewReviewer> backupReviewers() {
        return this.backupReviewers;
    }

    /**
     * Set the backupReviewers property: This is the collection of backup reviewers.
     *
     * @param backupReviewers the backupReviewers value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withBackupReviewers(List<AccessReviewReviewer> backupReviewers) {
        this.backupReviewers = backupReviewers;
        return this;
    }

    /**
     * Get the reviewersType property: This field specifies the type of reviewers for a review. Usually for a review,
     * reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be
     * chosen dynamically. For example managers review or self review.
     *
     * @return the reviewersType value.
     */
    public AccessReviewScheduleDefinitionReviewersType reviewersType() {
        return this.reviewersType;
    }

    /**
     * Get the instances property: This is the collection of instances returned when one does an expand on it.
     *
     * @return the instances value.
     */
    public List<AccessReviewInstanceInner> instances() {
        return this.instances;
    }

    /**
     * Set the instances property: This is the collection of instances returned when one does an expand on it.
     *
     * @param instances the instances value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withInstances(List<AccessReviewInstanceInner> instances) {
        this.instances = instances;
        return this;
    }

    /**
     * Get the principalId property: The identity id.
     *
     * @return the principalId value.
     */
    public String principalId() {
        return this.innerCreatedBy() == null ? null : this.innerCreatedBy().principalId();
    }

    /**
     * Get the principalType property: The identity type : user/servicePrincipal.
     *
     * @return the principalType value.
     */
    public AccessReviewActorIdentityType principalType() {
        return this.innerCreatedBy() == null ? null : this.innerCreatedBy().principalType();
    }

    /**
     * Get the principalName property: The identity display name.
     *
     * @return the principalName value.
     */
    public String principalName() {
        return this.innerCreatedBy() == null ? null : this.innerCreatedBy().principalName();
    }

    /**
     * Get the userPrincipalName property: The user principal name(if valid).
     *
     * @return the userPrincipalName value.
     */
    public String userPrincipalName() {
        return this.innerCreatedBy() == null ? null : this.innerCreatedBy().userPrincipalName();
    }

    /**
     * Get the mailNotificationsEnabled property: Flag to indicate whether sending mails to reviewers and the review
     * creator is enabled.
     *
     * @return the mailNotificationsEnabled value.
     */
    public Boolean mailNotificationsEnabled() {
        return this.innerSettings() == null ? null : this.innerSettings().mailNotificationsEnabled();
    }

    /**
     * Set the mailNotificationsEnabled property: Flag to indicate whether sending mails to reviewers and the review
     * creator is enabled.
     *
     * @param mailNotificationsEnabled the mailNotificationsEnabled value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withMailNotificationsEnabled(Boolean mailNotificationsEnabled) {
        if (this.innerSettings() == null) {
            this.innerSettings = new AccessReviewScheduleSettings();
        }
        this.innerSettings().withMailNotificationsEnabled(mailNotificationsEnabled);
        return this;
    }

    /**
     * Get the reminderNotificationsEnabled property: Flag to indicate whether sending reminder emails to reviewers are
     * enabled.
     *
     * @return the reminderNotificationsEnabled value.
     */
    public Boolean reminderNotificationsEnabled() {
        return this.innerSettings() == null ? null : this.innerSettings().reminderNotificationsEnabled();
    }

    /**
     * Set the reminderNotificationsEnabled property: Flag to indicate whether sending reminder emails to reviewers are
     * enabled.
     *
     * @param reminderNotificationsEnabled the reminderNotificationsEnabled value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withReminderNotificationsEnabled(
        Boolean reminderNotificationsEnabled) {
        if (this.innerSettings() == null) {
            this.innerSettings = new AccessReviewScheduleSettings();
        }
        this.innerSettings().withReminderNotificationsEnabled(reminderNotificationsEnabled);
        return this;
    }

    /**
     * Get the defaultDecisionEnabled property: Flag to indicate whether reviewers are required to provide a
     * justification when reviewing access.
     *
     * @return the defaultDecisionEnabled value.
     */
    public Boolean defaultDecisionEnabled() {
        return this.innerSettings() == null ? null : this.innerSettings().defaultDecisionEnabled();
    }

    /**
     * Set the defaultDecisionEnabled property: Flag to indicate whether reviewers are required to provide a
     * justification when reviewing access.
     *
     * @param defaultDecisionEnabled the defaultDecisionEnabled value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withDefaultDecisionEnabled(Boolean defaultDecisionEnabled) {
        if (this.innerSettings() == null) {
            this.innerSettings = new AccessReviewScheduleSettings();
        }
        this.innerSettings().withDefaultDecisionEnabled(defaultDecisionEnabled);
        return this;
    }

    /**
     * Get the justificationRequiredOnApproval property: Flag to indicate whether the reviewer is required to pass
     * justification when recording a decision.
     *
     * @return the justificationRequiredOnApproval value.
     */
    public Boolean justificationRequiredOnApproval() {
        return this.innerSettings() == null ? null : this.innerSettings().justificationRequiredOnApproval();
    }

    /**
     * Set the justificationRequiredOnApproval property: Flag to indicate whether the reviewer is required to pass
     * justification when recording a decision.
     *
     * @param justificationRequiredOnApproval the justificationRequiredOnApproval value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withJustificationRequiredOnApproval(
        Boolean justificationRequiredOnApproval) {
        if (this.innerSettings() == null) {
            this.innerSettings = new AccessReviewScheduleSettings();
        }
        this.innerSettings().withJustificationRequiredOnApproval(justificationRequiredOnApproval);
        return this;
    }

    /**
     * Get the defaultDecision property: This specifies the behavior for the autoReview feature when an access review
     * completes.
     *
     * @return the defaultDecision value.
     */
    public DefaultDecisionType defaultDecision() {
        return this.innerSettings() == null ? null : this.innerSettings().defaultDecision();
    }

    /**
     * Set the defaultDecision property: This specifies the behavior for the autoReview feature when an access review
     * completes.
     *
     * @param defaultDecision the defaultDecision value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withDefaultDecision(DefaultDecisionType defaultDecision) {
        if (this.innerSettings() == null) {
            this.innerSettings = new AccessReviewScheduleSettings();
        }
        this.innerSettings().withDefaultDecision(defaultDecision);
        return this;
    }

    /**
     * Get the autoApplyDecisionsEnabled property: Flag to indicate whether auto-apply capability, to automatically
     * change the target object access resource, is enabled. If not enabled, a user must, after the review completes,
     * apply the access review.
     *
     * @return the autoApplyDecisionsEnabled value.
     */
    public Boolean autoApplyDecisionsEnabled() {
        return this.innerSettings() == null ? null : this.innerSettings().autoApplyDecisionsEnabled();
    }

    /**
     * Set the autoApplyDecisionsEnabled property: Flag to indicate whether auto-apply capability, to automatically
     * change the target object access resource, is enabled. If not enabled, a user must, after the review completes,
     * apply the access review.
     *
     * @param autoApplyDecisionsEnabled the autoApplyDecisionsEnabled value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withAutoApplyDecisionsEnabled(Boolean autoApplyDecisionsEnabled) {
        if (this.innerSettings() == null) {
            this.innerSettings = new AccessReviewScheduleSettings();
        }
        this.innerSettings().withAutoApplyDecisionsEnabled(autoApplyDecisionsEnabled);
        return this;
    }

    /**
     * Get the recommendationsEnabled property: Flag to indicate whether showing recommendations to reviewers is
     * enabled.
     *
     * @return the recommendationsEnabled value.
     */
    public Boolean recommendationsEnabled() {
        return this.innerSettings() == null ? null : this.innerSettings().recommendationsEnabled();
    }

    /**
     * Set the recommendationsEnabled property: Flag to indicate whether showing recommendations to reviewers is
     * enabled.
     *
     * @param recommendationsEnabled the recommendationsEnabled value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withRecommendationsEnabled(Boolean recommendationsEnabled) {
        if (this.innerSettings() == null) {
            this.innerSettings = new AccessReviewScheduleSettings();
        }
        this.innerSettings().withRecommendationsEnabled(recommendationsEnabled);
        return this;
    }

    /**
     * Get the recommendationLookBackDuration property: Recommendations for access reviews are calculated by looking
     * back at 30 days of data(w.r.t the start date of the review) by default. However, in some scenarios, customers
     * want to change how far back to look at and want to configure 60 days, 90 days, etc. instead. This setting allows
     * customers to configure this duration. The value should be in ISO 8601 format
     * (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval
     * string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds)).
     *
     * @return the recommendationLookBackDuration value.
     */
    public Duration recommendationLookBackDuration() {
        return this.innerSettings() == null ? null : this.innerSettings().recommendationLookBackDuration();
    }

    /**
     * Set the recommendationLookBackDuration property: Recommendations for access reviews are calculated by looking
     * back at 30 days of data(w.r.t the start date of the review) by default. However, in some scenarios, customers
     * want to change how far back to look at and want to configure 60 days, 90 days, etc. instead. This setting allows
     * customers to configure this duration. The value should be in ISO 8601 format
     * (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval
     * string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds)).
     *
     * @param recommendationLookBackDuration the recommendationLookBackDuration value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withRecommendationLookBackDuration(
        Duration recommendationLookBackDuration) {
        if (this.innerSettings() == null) {
            this.innerSettings = new AccessReviewScheduleSettings();
        }
        this.innerSettings().withRecommendationLookBackDuration(recommendationLookBackDuration);
        return this;
    }

    /**
     * Get the instanceDurationInDays property: The duration in days for an instance.
     *
     * @return the instanceDurationInDays value.
     */
    public Integer instanceDurationInDays() {
        return this.innerSettings() == null ? null : this.innerSettings().instanceDurationInDays();
    }

    /**
     * Set the instanceDurationInDays property: The duration in days for an instance.
     *
     * @param instanceDurationInDays the instanceDurationInDays value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withInstanceDurationInDays(Integer instanceDurationInDays) {
        if (this.innerSettings() == null) {
            this.innerSettings = new AccessReviewScheduleSettings();
        }
        this.innerSettings().withInstanceDurationInDays(instanceDurationInDays);
        return this;
    }

    /**
     * Get the type property: The recurrence type : weekly, monthly, etc.
     *
     * @return the type value.
     */
    public AccessReviewRecurrencePatternType type() {
        return this.innerSettings() == null ? null : this.innerSettings().type();
    }

    /**
     * Set the type property: The recurrence type : weekly, monthly, etc.
     *
     * @param type the type value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withType(AccessReviewRecurrencePatternType type) {
        if (this.innerSettings() == null) {
            this.innerSettings = new AccessReviewScheduleSettings();
        }
        this.innerSettings().withType(type);
        return this;
    }

    /**
     * Get the interval property: The interval for recurrence. For a quarterly review, the interval is 3 for type :
     * absoluteMonthly.
     *
     * @return the interval value.
     */
    public Integer interval() {
        return this.innerSettings() == null ? null : this.innerSettings().interval();
    }

    /**
     * Set the interval property: The interval for recurrence. For a quarterly review, the interval is 3 for type :
     * absoluteMonthly.
     *
     * @param interval the interval value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withInterval(Integer interval) {
        if (this.innerSettings() == null) {
            this.innerSettings = new AccessReviewScheduleSettings();
        }
        this.innerSettings().withInterval(interval);
        return this;
    }

    /**
     * Get the typeRangeType property: The recurrence range type. The possible values are: endDate, noEnd, numbered.
     *
     * @return the typeRangeType value.
     */
    public AccessReviewRecurrenceRangeType typeRangeType() {
        return this.innerSettings() == null ? null : this.innerSettings().typeRangeType();
    }

    /**
     * Set the typeRangeType property: The recurrence range type. The possible values are: endDate, noEnd, numbered.
     *
     * @param typeRangeType the typeRangeType value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withTypeRangeType(AccessReviewRecurrenceRangeType typeRangeType) {
        if (this.innerSettings() == null) {
            this.innerSettings = new AccessReviewScheduleSettings();
        }
        this.innerSettings().withTypeRangeType(typeRangeType);
        return this;
    }

    /**
     * Get the numberOfOccurrences property: The number of times to repeat the access review. Required and must be
     * positive if type is numbered.
     *
     * @return the numberOfOccurrences value.
     */
    public Integer numberOfOccurrences() {
        return this.innerSettings() == null ? null : this.innerSettings().numberOfOccurrences();
    }

    /**
     * Set the numberOfOccurrences property: The number of times to repeat the access review. Required and must be
     * positive if type is numbered.
     *
     * @param numberOfOccurrences the numberOfOccurrences value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withNumberOfOccurrences(Integer numberOfOccurrences) {
        if (this.innerSettings() == null) {
            this.innerSettings = new AccessReviewScheduleSettings();
        }
        this.innerSettings().withNumberOfOccurrences(numberOfOccurrences);
        return this;
    }

    /**
     * Get the startDate property: The DateTime when the review is scheduled to be start. This could be a date in the
     * future. Required on create.
     *
     * @return the startDate value.
     */
    public OffsetDateTime startDate() {
        return this.innerSettings() == null ? null : this.innerSettings().startDate();
    }

    /**
     * Set the startDate property: The DateTime when the review is scheduled to be start. This could be a date in the
     * future. Required on create.
     *
     * @param startDate the startDate value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withStartDate(OffsetDateTime startDate) {
        if (this.innerSettings() == null) {
            this.innerSettings = new AccessReviewScheduleSettings();
        }
        this.innerSettings().withStartDate(startDate);
        return this;
    }

    /**
     * Get the endDate property: The DateTime when the review is scheduled to end. Required if type is endDate.
     *
     * @return the endDate value.
     */
    public OffsetDateTime endDate() {
        return this.innerSettings() == null ? null : this.innerSettings().endDate();
    }

    /**
     * Set the endDate property: The DateTime when the review is scheduled to end. Required if type is endDate.
     *
     * @param endDate the endDate value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withEndDate(OffsetDateTime endDate) {
        if (this.innerSettings() == null) {
            this.innerSettings = new AccessReviewScheduleSettings();
        }
        this.innerSettings().withEndDate(endDate);
        return this;
    }

    /**
     * Get the resourceId property: ResourceId in which this review is getting created.
     *
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.innerScope() == null ? null : this.innerScope().resourceId();
    }

    /**
     * Get the roleDefinitionId property: This is used to indicate the role being reviewed.
     *
     * @return the roleDefinitionId value.
     */
    public String roleDefinitionId() {
        return this.innerScope() == null ? null : this.innerScope().roleDefinitionId();
    }

    /**
     * Get the principalType property: The identity type user/servicePrincipal to review.
     *
     * @return the principalType value.
     */
    public AccessReviewScopePrincipalType principalTypeScopePrincipalType() {
        return this.innerScope() == null ? null : this.innerScope().principalType();
    }

    /**
     * Get the assignmentState property: The role assignment state eligible/active to review.
     *
     * @return the assignmentState value.
     */
    public AccessReviewScopeAssignmentState assignmentState() {
        return this.innerScope() == null ? null : this.innerScope().assignmentState();
    }

    /**
     * Get the inactiveDuration property: Duration users are inactive for. The value should be in ISO 8601 format
     * (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval
     * string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds)).
     *
     * @return the inactiveDuration value.
     */
    public Duration inactiveDuration() {
        return this.innerScope() == null ? null : this.innerScope().inactiveDuration();
    }

    /**
     * Set the inactiveDuration property: Duration users are inactive for. The value should be in ISO 8601 format
     * (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval
     * string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds)).
     *
     * @param inactiveDuration the inactiveDuration value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withInactiveDuration(Duration inactiveDuration) {
        if (this.innerScope() == null) {
            this.innerScope = new AccessReviewScope();
        }
        this.innerScope().withInactiveDuration(inactiveDuration);
        return this;
    }

    /**
     * Get the expandNestedMemberships property: Flag to indicate whether to expand nested memberships or not.
     *
     * @return the expandNestedMemberships value.
     */
    public Boolean expandNestedMemberships() {
        return this.innerScope() == null ? null : this.innerScope().expandNestedMemberships();
    }

    /**
     * Set the expandNestedMemberships property: Flag to indicate whether to expand nested memberships or not.
     *
     * @param expandNestedMemberships the expandNestedMemberships value to set.
     * @return the AccessReviewScheduleDefinitionProperties object itself.
     */
    public AccessReviewScheduleDefinitionProperties withExpandNestedMemberships(Boolean expandNestedMemberships) {
        if (this.innerScope() == null) {
            this.innerScope = new AccessReviewScope();
        }
        this.innerScope().withExpandNestedMemberships(expandNestedMemberships);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerCreatedBy() != null) {
            innerCreatedBy().validate();
        }
        if (innerSettings() != null) {
            innerSettings().validate();
        }
        if (innerScope() != null) {
            innerScope().validate();
        }
        if (reviewers() != null) {
            reviewers().forEach(e -> e.validate());
        }
        if (backupReviewers() != null) {
            backupReviewers().forEach(e -> e.validate());
        }
        if (instances() != null) {
            instances().forEach(e -> e.validate());
        }
    }
}
