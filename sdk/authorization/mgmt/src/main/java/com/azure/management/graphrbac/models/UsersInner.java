// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.graphrbac.models;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.management.graphrbac.UserCreateParameters;
import com.azure.management.graphrbac.UserGetMemberGroupsParameters;
import com.azure.management.graphrbac.UserUpdateParameters;
import com.azure.management.graphrbac.implementation.GraphErrorException;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * Users.
 */
public final class UsersInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private UsersService service;

    /**
     * The service client containing this operation class.
     */
    private GraphRbacManagementClientImpl client;

    /**
     * Initializes an instance of UsersInner.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    public UsersInner(GraphRbacManagementClientImpl client) {
        this.service = RestProxy.create(UsersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * GraphRbacManagementClientUsers to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "GraphRbacManagementClientUsers")
    private interface UsersService {
        @Post("/{tenantID}/users")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<UserInner>> create(@HostParam("$host") String host, @PathParam("tenantID") String tenantID, @BodyParam("application/json") UserCreateParameters parameters, @QueryParam("api-version") String apiVersion);

        @Get("/{tenantID}/users")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<UserListResultInner>> list(@HostParam("$host") String host, @QueryParam("$filter") String filter, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);

        @Get("/{tenantID}/users/{upnOrObjectId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<UserInner>> get(@HostParam("$host") String host, @PathParam("upnOrObjectId") String upnOrObjectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);

        @Patch("/{tenantID}/users/{upnOrObjectId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<Response<Void>> update(@HostParam("$host") String host, @PathParam("upnOrObjectId") String upnOrObjectId, @PathParam("tenantID") String tenantID, @BodyParam("application/json") UserUpdateParameters parameters, @QueryParam("api-version") String apiVersion);

        @Delete("/{tenantID}/users/{upnOrObjectId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String host, @PathParam("upnOrObjectId") String upnOrObjectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);

        @Post("/{tenantID}/users/{objectId}/getMemberGroups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<UserGetMemberGroupsResultInner>> getMemberGroups(@HostParam("$host") String host, @PathParam("objectId") String objectId, @PathParam("tenantID") String tenantID, @BodyParam("application/json") UserGetMemberGroupsParameters parameters, @QueryParam("api-version") String apiVersion);

        @Get("/{tenantID}/{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<UserListResultInner>> listNext(@HostParam("$host") String host, @PathParam(value = "nextLink", encoded = true) String nextLink, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);
    }

    /**
     * Create a new user.
     * 
     * @param parameters Request parameters for creating a new work or school account user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<UserInner>> createWithResponseAsync(UserCreateParameters parameters) {
        return service.create(this.client.getHost(), this.client.getTenantID(), parameters, this.client.getApiVersion());
    }

    /**
     * Create a new user.
     * 
     * @param parameters Request parameters for creating a new work or school account user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UserInner> createAsync(UserCreateParameters parameters) {
        return createWithResponseAsync(parameters)
            .flatMap((SimpleResponse<UserInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Create a new user.
     * 
     * @param parameters Request parameters for creating a new work or school account user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UserInner create(UserCreateParameters parameters) {
        return createAsync(parameters).block();
    }

    /**
     * Gets list of users for the current tenant.
     * 
     * @param filter MISSING路SCHEMA-DESCRIPTION-STRING.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<UserInner>> listSinglePageAsync(String filter) {
        return service.list(this.client.getHost(), filter, this.client.getTenantID(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().getValue(),
            res.getValue().getOdatanextLink(),
            null));
    }

    /**
     * Gets list of users for the current tenant.
     * 
     * @param filter MISSING路SCHEMA-DESCRIPTION-STRING.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<UserInner> listAsync(String filter) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(filter),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets list of users for the current tenant.
     * 
     * @param filter MISSING路SCHEMA-DESCRIPTION-STRING.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UserInner> list(String filter) {
        return new PagedIterable<>(listAsync(filter));
    }

    /**
     * Gets user information from the directory.
     * 
     * @param upnOrObjectId MISSING路SCHEMA-DESCRIPTION-STRING.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<UserInner>> getWithResponseAsync(String upnOrObjectId) {
        return service.get(this.client.getHost(), upnOrObjectId, this.client.getTenantID(), this.client.getApiVersion());
    }

    /**
     * Gets user information from the directory.
     * 
     * @param upnOrObjectId MISSING路SCHEMA-DESCRIPTION-STRING.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UserInner> getAsync(String upnOrObjectId) {
        return getWithResponseAsync(upnOrObjectId)
            .flatMap((SimpleResponse<UserInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Gets user information from the directory.
     * 
     * @param upnOrObjectId MISSING路SCHEMA-DESCRIPTION-STRING.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UserInner get(String upnOrObjectId) {
        return getAsync(upnOrObjectId).block();
    }

    /**
     * Updates a user.
     * 
     * @param upnOrObjectId MISSING路SCHEMA-DESCRIPTION-STRING.
     * @param parameters Request parameters for updating an existing work or school account user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateWithResponseAsync(String upnOrObjectId, UserUpdateParameters parameters) {
        return service.update(this.client.getHost(), upnOrObjectId, this.client.getTenantID(), parameters, this.client.getApiVersion());
    }

    /**
     * Updates a user.
     * 
     * @param upnOrObjectId MISSING路SCHEMA-DESCRIPTION-STRING.
     * @param parameters Request parameters for updating an existing work or school account user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateAsync(String upnOrObjectId, UserUpdateParameters parameters) {
        return updateWithResponseAsync(upnOrObjectId, parameters)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Updates a user.
     * 
     * @param upnOrObjectId MISSING路SCHEMA-DESCRIPTION-STRING.
     * @param parameters Request parameters for updating an existing work or school account user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void update(String upnOrObjectId, UserUpdateParameters parameters) {
        updateAsync(upnOrObjectId, parameters).block();
    }

    /**
     * Delete a user.
     * 
     * @param upnOrObjectId MISSING路SCHEMA-DESCRIPTION-STRING.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String upnOrObjectId) {
        return service.delete(this.client.getHost(), upnOrObjectId, this.client.getTenantID(), this.client.getApiVersion());
    }

    /**
     * Delete a user.
     * 
     * @param upnOrObjectId MISSING路SCHEMA-DESCRIPTION-STRING.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String upnOrObjectId) {
        return deleteWithResponseAsync(upnOrObjectId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete a user.
     * 
     * @param upnOrObjectId MISSING路SCHEMA-DESCRIPTION-STRING.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String upnOrObjectId) {
        deleteAsync(upnOrObjectId).block();
    }

    /**
     * Gets a collection that contains the object IDs of the groups of which the user is a member.
     * 
     * @param objectId MISSING路SCHEMA-DESCRIPTION-STRING.
     * @param parameters Request parameters for GetMemberGroups API call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getMemberGroupsSinglePageAsync(String objectId, UserGetMemberGroupsParameters parameters) {
        return service.getMemberGroups(this.client.getHost(), objectId, this.client.getTenantID(), parameters, this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().getValue(),
            null,
            null));
    }

    /**
     * Gets a collection that contains the object IDs of the groups of which the user is a member.
     * 
     * @param objectId MISSING路SCHEMA-DESCRIPTION-STRING.
     * @param parameters Request parameters for GetMemberGroups API call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<String> getMemberGroupsAsync(String objectId, UserGetMemberGroupsParameters parameters) {
        return new PagedFlux<>(
            () -> getMemberGroupsSinglePageAsync(objectId, parameters));
    }

    /**
     * Gets a collection that contains the object IDs of the groups of which the user is a member.
     * 
     * @param objectId MISSING路SCHEMA-DESCRIPTION-STRING.
     * @param parameters Request parameters for GetMemberGroups API call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> getMemberGroups(String objectId, UserGetMemberGroupsParameters parameters) {
        return new PagedIterable<>(getMemberGroupsAsync(objectId, parameters));
    }

    /**
     * Gets a list of users for the current tenant.
     * 
     * @param nextLink MISSING路SCHEMA-DESCRIPTION-STRING.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<UserInner>> listNextSinglePageAsync(String nextLink) {
        return service.listNext(this.client.getHost(), nextLink, this.client.getTenantID(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().getValue(),
            res.getValue().getOdatanextLink(),
            null));
    }
}
