// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.standbypool.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.standbypool.fluent.models.StandbyVirtualMachinePoolResourceInner;
import com.azure.resourcemanager.standbypool.models.StandbyVirtualMachinePoolElasticityProfile;
import com.azure.resourcemanager.standbypool.models.StandbyVirtualMachinePoolResourceProperties;
import com.azure.resourcemanager.standbypool.models.VirtualMachineState;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StandbyVirtualMachinePoolResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StandbyVirtualMachinePoolResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"elasticityProfile\":{\"maxReadyCapacity\":5470433313051888734,\"minReadyCapacity\":7911846487069687431},\"virtualMachineState\":\"Deallocated\",\"attachedVirtualMachineScaleSetId\":\"wzsymglzufcy\",\"provisioningState\":\"Canceled\"},\"location\":\"dbihanufhfcbj\",\"tags\":{\"xqhabi\":\"git\"},\"id\":\"pikxwczbyscnpqxu\",\"name\":\"ivyqniwbybrkxvd\",\"type\":\"mjgr\"}")
            .toObject(StandbyVirtualMachinePoolResourceInner.class);
        Assertions.assertEquals("dbihanufhfcbj", model.location());
        Assertions.assertEquals("git", model.tags().get("xqhabi"));
        Assertions.assertEquals(5470433313051888734L, model.properties().elasticityProfile().maxReadyCapacity());
        Assertions.assertEquals(7911846487069687431L, model.properties().elasticityProfile().minReadyCapacity());
        Assertions.assertEquals(VirtualMachineState.DEALLOCATED, model.properties().virtualMachineState());
        Assertions.assertEquals("wzsymglzufcy", model.properties().attachedVirtualMachineScaleSetId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StandbyVirtualMachinePoolResourceInner model
            = new StandbyVirtualMachinePoolResourceInner().withLocation("dbihanufhfcbj")
                .withTags(mapOf("xqhabi", "git"))
                .withProperties(new StandbyVirtualMachinePoolResourceProperties()
                    .withElasticityProfile(
                        new StandbyVirtualMachinePoolElasticityProfile().withMaxReadyCapacity(5470433313051888734L)
                            .withMinReadyCapacity(7911846487069687431L))
                    .withVirtualMachineState(VirtualMachineState.DEALLOCATED)
                    .withAttachedVirtualMachineScaleSetId("wzsymglzufcy"));
        model = BinaryData.fromObject(model).toObject(StandbyVirtualMachinePoolResourceInner.class);
        Assertions.assertEquals("dbihanufhfcbj", model.location());
        Assertions.assertEquals("git", model.tags().get("xqhabi"));
        Assertions.assertEquals(5470433313051888734L, model.properties().elasticityProfile().maxReadyCapacity());
        Assertions.assertEquals(7911846487069687431L, model.properties().elasticityProfile().minReadyCapacity());
        Assertions.assertEquals(VirtualMachineState.DEALLOCATED, model.properties().virtualMachineState());
        Assertions.assertEquals("wzsymglzufcy", model.properties().attachedVirtualMachineScaleSetId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
