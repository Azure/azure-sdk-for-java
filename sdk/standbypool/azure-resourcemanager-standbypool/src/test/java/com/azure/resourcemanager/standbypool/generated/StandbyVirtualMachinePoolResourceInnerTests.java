// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.standbypool.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.standbypool.fluent.models.StandbyVirtualMachinePoolResourceInner;
import com.azure.resourcemanager.standbypool.models.StandbyVirtualMachinePoolElasticityProfile;
import com.azure.resourcemanager.standbypool.models.StandbyVirtualMachinePoolResourceProperties;
import com.azure.resourcemanager.standbypool.models.VirtualMachineState;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StandbyVirtualMachinePoolResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StandbyVirtualMachinePoolResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"elasticityProfile\":{\"maxReadyCapacity\":7928784198213019505},\"virtualMachineState\":\"Deallocated\",\"attachedVirtualMachineScaleSetId\":\"vlejuvfqa\",\"provisioningState\":\"Deleting\"},\"location\":\"xwjkcprbnwbxg\",\"tags\":{\"dnrujqguhmuouqfp\":\"bvpyss\",\"uizga\":\"wzwbnguitn\",\"fizuckyf\":\"x\"},\"id\":\"hr\",\"name\":\"idf\",\"type\":\"zwdzuh\"}")
            .toObject(StandbyVirtualMachinePoolResourceInner.class);
        Assertions.assertEquals("xwjkcprbnwbxg", model.location());
        Assertions.assertEquals("bvpyss", model.tags().get("dnrujqguhmuouqfp"));
        Assertions.assertEquals(7928784198213019505L, model.properties().elasticityProfile().maxReadyCapacity());
        Assertions.assertEquals(VirtualMachineState.DEALLOCATED, model.properties().virtualMachineState());
        Assertions.assertEquals("vlejuvfqa", model.properties().attachedVirtualMachineScaleSetId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StandbyVirtualMachinePoolResourceInner model
            = new StandbyVirtualMachinePoolResourceInner().withLocation("xwjkcprbnwbxg")
                .withTags(mapOf("dnrujqguhmuouqfp", "bvpyss", "uizga", "wzwbnguitn", "fizuckyf", "x"))
                .withProperties(new StandbyVirtualMachinePoolResourceProperties()
                    .withElasticityProfile(
                        new StandbyVirtualMachinePoolElasticityProfile().withMaxReadyCapacity(7928784198213019505L))
                    .withVirtualMachineState(VirtualMachineState.DEALLOCATED)
                    .withAttachedVirtualMachineScaleSetId("vlejuvfqa"));
        model = BinaryData.fromObject(model).toObject(StandbyVirtualMachinePoolResourceInner.class);
        Assertions.assertEquals("xwjkcprbnwbxg", model.location());
        Assertions.assertEquals("bvpyss", model.tags().get("dnrujqguhmuouqfp"));
        Assertions.assertEquals(7928784198213019505L, model.properties().elasticityProfile().maxReadyCapacity());
        Assertions.assertEquals(VirtualMachineState.DEALLOCATED, model.properties().virtualMachineState());
        Assertions.assertEquals("vlejuvfqa", model.properties().attachedVirtualMachineScaleSetId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
