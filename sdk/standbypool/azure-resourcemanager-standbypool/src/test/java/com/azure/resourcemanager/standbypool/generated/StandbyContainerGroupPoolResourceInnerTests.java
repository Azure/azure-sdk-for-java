// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.standbypool.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.standbypool.fluent.models.StandbyContainerGroupPoolResourceInner;
import com.azure.resourcemanager.standbypool.models.ContainerGroupProfile;
import com.azure.resourcemanager.standbypool.models.ContainerGroupProperties;
import com.azure.resourcemanager.standbypool.models.RefillPolicy;
import com.azure.resourcemanager.standbypool.models.StandbyContainerGroupPoolElasticityProfile;
import com.azure.resourcemanager.standbypool.models.StandbyContainerGroupPoolResourceProperties;
import com.azure.resourcemanager.standbypool.models.Subnet;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StandbyContainerGroupPoolResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StandbyContainerGroupPoolResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"elasticityProfile\":{\"maxReadyCapacity\":5126172098614729653,\"refillPolicy\":\"always\"},\"containerGroupProperties\":{\"containerGroupProfile\":{\"id\":\"keqsrxybzqqedq\",\"revision\":2124589833110260151},\"subnetIds\":[{\"id\":\"fouflmmnkzsmo\"}]},\"zones\":[\"lougpbkw\",\"mutduqktaps\"],\"provisioningState\":\"Succeeded\"},\"location\":\"uertumk\",\"tags\":{\"gmbmbexppbh\":\"vqwhbmdgbbjfd\",\"rolfpfp\":\"q\",\"jaoyfhrtx\":\"algbquxigjyjg\",\"fqawrlyxw\":\"lnerkujysvleju\"},\"id\":\"kcprbnw\",\"name\":\"xgjvtbv\",\"type\":\"ysszdnrujqguh\"}")
            .toObject(StandbyContainerGroupPoolResourceInner.class);
        Assertions.assertEquals("uertumk", model.location());
        Assertions.assertEquals("vqwhbmdgbbjfd", model.tags().get("gmbmbexppbh"));
        Assertions.assertEquals(5126172098614729653L, model.properties().elasticityProfile().maxReadyCapacity());
        Assertions.assertEquals(RefillPolicy.ALWAYS, model.properties().elasticityProfile().refillPolicy());
        Assertions.assertEquals("keqsrxybzqqedq",
            model.properties().containerGroupProperties().containerGroupProfile().id());
        Assertions.assertEquals(2124589833110260151L,
            model.properties().containerGroupProperties().containerGroupProfile().revision());
        Assertions.assertEquals("fouflmmnkzsmo", model.properties().containerGroupProperties().subnetIds().get(0).id());
        Assertions.assertEquals("lougpbkw", model.properties().zones().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StandbyContainerGroupPoolResourceInner model
            = new StandbyContainerGroupPoolResourceInner().withLocation("uertumk")
                .withTags(mapOf("gmbmbexppbh", "vqwhbmdgbbjfd", "rolfpfp", "q", "jaoyfhrtx", "algbquxigjyjg",
                    "fqawrlyxw", "lnerkujysvleju"))
                .withProperties(new StandbyContainerGroupPoolResourceProperties()
                    .withElasticityProfile(
                        new StandbyContainerGroupPoolElasticityProfile().withMaxReadyCapacity(5126172098614729653L)
                            .withRefillPolicy(RefillPolicy.ALWAYS))
                    .withContainerGroupProperties(new ContainerGroupProperties()
                        .withContainerGroupProfile(
                            new ContainerGroupProfile().withId("keqsrxybzqqedq").withRevision(2124589833110260151L))
                        .withSubnetIds(Arrays.asList(new Subnet().withId("fouflmmnkzsmo"))))
                    .withZones(Arrays.asList("lougpbkw", "mutduqktaps")));
        model = BinaryData.fromObject(model).toObject(StandbyContainerGroupPoolResourceInner.class);
        Assertions.assertEquals("uertumk", model.location());
        Assertions.assertEquals("vqwhbmdgbbjfd", model.tags().get("gmbmbexppbh"));
        Assertions.assertEquals(5126172098614729653L, model.properties().elasticityProfile().maxReadyCapacity());
        Assertions.assertEquals(RefillPolicy.ALWAYS, model.properties().elasticityProfile().refillPolicy());
        Assertions.assertEquals("keqsrxybzqqedq",
            model.properties().containerGroupProperties().containerGroupProfile().id());
        Assertions.assertEquals(2124589833110260151L,
            model.properties().containerGroupProperties().containerGroupProfile().revision());
        Assertions.assertEquals("fouflmmnkzsmo", model.properties().containerGroupProperties().subnetIds().get(0).id());
        Assertions.assertEquals("lougpbkw", model.properties().zones().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
