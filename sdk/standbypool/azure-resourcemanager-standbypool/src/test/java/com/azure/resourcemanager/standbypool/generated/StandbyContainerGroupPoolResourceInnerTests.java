// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.standbypool.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.standbypool.fluent.models.StandbyContainerGroupPoolResourceInner;
import com.azure.resourcemanager.standbypool.models.ContainerGroupProfile;
import com.azure.resourcemanager.standbypool.models.ContainerGroupProperties;
import com.azure.resourcemanager.standbypool.models.RefillPolicy;
import com.azure.resourcemanager.standbypool.models.StandbyContainerGroupPoolElasticityProfile;
import com.azure.resourcemanager.standbypool.models.StandbyContainerGroupPoolResourceProperties;
import com.azure.resourcemanager.standbypool.models.Subnet;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StandbyContainerGroupPoolResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StandbyContainerGroupPoolResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"elasticityProfile\":{\"maxReadyCapacity\":4465069614160015486,\"refillPolicy\":\"always\"},\"containerGroupProperties\":{\"containerGroupProfile\":{\"id\":\"fufsrpymzi\",\"revision\":7831704875002032893},\"subnetIds\":[{\"id\":\"xtbzsgfyccsne\"},{\"id\":\"mdwzjeiachboo\"}]},\"provisioningState\":\"Failed\"},\"location\":\"ro\",\"tags\":{\"pyqr\":\"pteehzzv\",\"rsoodqxhcrmnoh\":\"mzinpvswjdk\"},\"id\":\"t\",\"name\":\"kwh\",\"type\":\"soifiyipjxsqw\"}")
            .toObject(StandbyContainerGroupPoolResourceInner.class);
        Assertions.assertEquals("ro", model.location());
        Assertions.assertEquals("pteehzzv", model.tags().get("pyqr"));
        Assertions.assertEquals(4465069614160015486L, model.properties().elasticityProfile().maxReadyCapacity());
        Assertions.assertEquals(RefillPolicy.ALWAYS, model.properties().elasticityProfile().refillPolicy());
        Assertions.assertEquals("fufsrpymzi",
            model.properties().containerGroupProperties().containerGroupProfile().id());
        Assertions.assertEquals(7831704875002032893L,
            model.properties().containerGroupProperties().containerGroupProfile().revision());
        Assertions.assertEquals("xtbzsgfyccsne", model.properties().containerGroupProperties().subnetIds().get(0).id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StandbyContainerGroupPoolResourceInner model = new StandbyContainerGroupPoolResourceInner().withLocation("ro")
            .withTags(mapOf("pyqr", "pteehzzv", "rsoodqxhcrmnoh", "mzinpvswjdk"))
            .withProperties(new StandbyContainerGroupPoolResourceProperties()
                .withElasticityProfile(
                    new StandbyContainerGroupPoolElasticityProfile().withMaxReadyCapacity(4465069614160015486L)
                        .withRefillPolicy(RefillPolicy.ALWAYS))
                .withContainerGroupProperties(new ContainerGroupProperties()
                    .withContainerGroupProfile(
                        new ContainerGroupProfile().withId("fufsrpymzi").withRevision(7831704875002032893L))
                    .withSubnetIds(
                        Arrays.asList(new Subnet().withId("xtbzsgfyccsne"), new Subnet().withId("mdwzjeiachboo")))));
        model = BinaryData.fromObject(model).toObject(StandbyContainerGroupPoolResourceInner.class);
        Assertions.assertEquals("ro", model.location());
        Assertions.assertEquals("pteehzzv", model.tags().get("pyqr"));
        Assertions.assertEquals(4465069614160015486L, model.properties().elasticityProfile().maxReadyCapacity());
        Assertions.assertEquals(RefillPolicy.ALWAYS, model.properties().elasticityProfile().refillPolicy());
        Assertions.assertEquals("fufsrpymzi",
            model.properties().containerGroupProperties().containerGroupProfile().id());
        Assertions.assertEquals(7831704875002032893L,
            model.properties().containerGroupProperties().containerGroupProfile().revision());
        Assertions.assertEquals("xtbzsgfyccsne", model.properties().containerGroupProperties().subnetIds().get(0).id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
