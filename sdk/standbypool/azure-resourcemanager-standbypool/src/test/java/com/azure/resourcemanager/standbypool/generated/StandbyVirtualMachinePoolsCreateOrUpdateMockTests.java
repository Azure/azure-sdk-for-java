// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.standbypool.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.standbypool.StandbyPoolManager;
import com.azure.resourcemanager.standbypool.models.StandbyVirtualMachinePoolElasticityProfile;
import com.azure.resourcemanager.standbypool.models.StandbyVirtualMachinePoolResource;
import com.azure.resourcemanager.standbypool.models.StandbyVirtualMachinePoolResourceProperties;
import com.azure.resourcemanager.standbypool.models.VirtualMachineState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class StandbyVirtualMachinePoolsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"elasticityProfile\":{\"maxReadyCapacity\":8219003189774073818},\"virtualMachineState\":\"Deallocated\",\"attachedVirtualMachineScaleSetId\":\"jnpg\",\"provisioningState\":\"Succeeded\"},\"location\":\"adehxnltyfsopp\",\"tags\":{\"bavo\":\"esnzwde\",\"vudwx\":\"xzdmohctb\",\"gujjugwdkcglh\":\"ndnvo\",\"ofqweykhmenevfye\":\"lazjdyggdtjixhbk\"},\"id\":\"fwhybcibvy\",\"name\":\"dcsi\",\"type\":\"ynnaam\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        StandbyPoolManager manager = StandbyPoolManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        StandbyVirtualMachinePoolResource response = manager.standbyVirtualMachinePools()
            .define("ebxetqgtzxdp")
            .withRegion("ngnzscxaqwoochc")
            .withExistingResourceGroup("ccfwnfnbacfion")
            .withTags(mapOf("eo", "qvpkvlrxnjeaseip", "enjbdlwtgrhp", "lokeyy", "umasxazjpq", "jp"))
            .withProperties(new StandbyVirtualMachinePoolResourceProperties()
                .withElasticityProfile(
                    new StandbyVirtualMachinePoolElasticityProfile().withMaxReadyCapacity(3640331879972668788L))
                .withVirtualMachineState(VirtualMachineState.DEALLOCATED)
                .withAttachedVirtualMachineScaleSetId("rjfeallnwsubisnj"))
            .create();

        Assertions.assertEquals("adehxnltyfsopp", response.location());
        Assertions.assertEquals("esnzwde", response.tags().get("bavo"));
        Assertions.assertEquals(8219003189774073818L, response.properties().elasticityProfile().maxReadyCapacity());
        Assertions.assertEquals(VirtualMachineState.DEALLOCATED, response.properties().virtualMachineState());
        Assertions.assertEquals("jnpg", response.properties().attachedVirtualMachineScaleSetId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
