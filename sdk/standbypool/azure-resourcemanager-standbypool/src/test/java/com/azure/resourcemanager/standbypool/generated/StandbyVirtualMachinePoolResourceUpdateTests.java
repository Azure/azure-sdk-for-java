// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.standbypool.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.standbypool.models.StandbyVirtualMachinePoolElasticityProfileUpdate;
import com.azure.resourcemanager.standbypool.models.StandbyVirtualMachinePoolResourceUpdate;
import com.azure.resourcemanager.standbypool.models.StandbyVirtualMachinePoolResourceUpdateProperties;
import com.azure.resourcemanager.standbypool.models.VirtualMachineState;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StandbyVirtualMachinePoolResourceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StandbyVirtualMachinePoolResourceUpdate model = BinaryData.fromString(
            "{\"tags\":{\"jionpimexgstxgc\":\"odxobnbdxkqpxok\",\"lovmclwhijcoe\":\"odgmaajrmvdjwz\"},\"properties\":{\"elasticityProfile\":{\"maxReadyCapacity\":5381243547184167814},\"virtualMachineState\":\"Running\",\"attachedVirtualMachineScaleSetId\":\"sycbkbfk\"}}")
            .toObject(StandbyVirtualMachinePoolResourceUpdate.class);
        Assertions.assertEquals("odxobnbdxkqpxok", model.tags().get("jionpimexgstxgc"));
        Assertions.assertEquals(5381243547184167814L, model.properties().elasticityProfile().maxReadyCapacity());
        Assertions.assertEquals(VirtualMachineState.RUNNING, model.properties().virtualMachineState());
        Assertions.assertEquals("sycbkbfk", model.properties().attachedVirtualMachineScaleSetId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StandbyVirtualMachinePoolResourceUpdate model = new StandbyVirtualMachinePoolResourceUpdate()
            .withTags(mapOf("jionpimexgstxgc", "odxobnbdxkqpxok", "lovmclwhijcoe", "odgmaajrmvdjwz"))
            .withProperties(new StandbyVirtualMachinePoolResourceUpdateProperties()
                .withElasticityProfile(
                    new StandbyVirtualMachinePoolElasticityProfileUpdate().withMaxReadyCapacity(5381243547184167814L))
                .withVirtualMachineState(VirtualMachineState.RUNNING)
                .withAttachedVirtualMachineScaleSetId("sycbkbfk"));
        model = BinaryData.fromObject(model).toObject(StandbyVirtualMachinePoolResourceUpdate.class);
        Assertions.assertEquals("odxobnbdxkqpxok", model.tags().get("jionpimexgstxgc"));
        Assertions.assertEquals(5381243547184167814L, model.properties().elasticityProfile().maxReadyCapacity());
        Assertions.assertEquals(VirtualMachineState.RUNNING, model.properties().virtualMachineState());
        Assertions.assertEquals("sycbkbfk", model.properties().attachedVirtualMachineScaleSetId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
