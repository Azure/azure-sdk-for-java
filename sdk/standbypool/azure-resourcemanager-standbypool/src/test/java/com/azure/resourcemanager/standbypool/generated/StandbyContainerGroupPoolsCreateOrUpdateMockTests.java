// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.standbypool.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.standbypool.StandbyPoolManager;
import com.azure.resourcemanager.standbypool.models.ContainerGroupProfile;
import com.azure.resourcemanager.standbypool.models.ContainerGroupProperties;
import com.azure.resourcemanager.standbypool.models.RefillPolicy;
import com.azure.resourcemanager.standbypool.models.StandbyContainerGroupPoolElasticityProfile;
import com.azure.resourcemanager.standbypool.models.StandbyContainerGroupPoolResource;
import com.azure.resourcemanager.standbypool.models.StandbyContainerGroupPoolResourceProperties;
import com.azure.resourcemanager.standbypool.models.Subnet;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class StandbyContainerGroupPoolsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"elasticityProfile\":{\"maxReadyCapacity\":4792633562836558207,\"refillPolicy\":\"always\"},\"containerGroupProperties\":{\"containerGroupProfile\":{\"id\":\"fsfksymddyst\",\"revision\":4210428974417603700},\"subnetIds\":[{\"id\":\"qyud\"},{\"id\":\"o\"},{\"id\":\"rq\"},{\"id\":\"b\"}]},\"provisioningState\":\"Succeeded\"},\"location\":\"vyifqrvkdvjsl\",\"tags\":{\"xxbczwtr\":\"vvdfwatkpnpul\"},\"id\":\"wiqzbqjvsovmyo\",\"name\":\"acspkwl\",\"type\":\"zdobpxjmflbvvnch\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        StandbyPoolManager manager = StandbyPoolManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        StandbyContainerGroupPoolResource response = manager.standbyContainerGroupPools()
            .define("hcjrefovgmk")
            .withRegion("yhltrpmopjmcm")
            .withExistingResourceGroup("eypvhezrkg")
            .withTags(mapOf("uiuaodsfcpkvxodp", "okth"))
            .withProperties(new StandbyContainerGroupPoolResourceProperties()
                .withElasticityProfile(
                    new StandbyContainerGroupPoolElasticityProfile().withMaxReadyCapacity(6110578012532965907L)
                        .withRefillPolicy(RefillPolicy.ALWAYS))
                .withContainerGroupProperties(new ContainerGroupProperties()
                    .withContainerGroupProfile(
                        new ContainerGroupProfile().withId("vxyqjpkcattpngjc").withRevision(789439383784435473L))
                    .withSubnetIds(
                        Arrays.asList(new Subnet().withId("pjhvmdajvnys"), new Subnet().withId("unqecanoae")))))
            .create();

        Assertions.assertEquals("vyifqrvkdvjsl", response.location());
        Assertions.assertEquals("vvdfwatkpnpul", response.tags().get("xxbczwtr"));
        Assertions.assertEquals(4792633562836558207L, response.properties().elasticityProfile().maxReadyCapacity());
        Assertions.assertEquals(RefillPolicy.ALWAYS, response.properties().elasticityProfile().refillPolicy());
        Assertions.assertEquals("fsfksymddyst",
            response.properties().containerGroupProperties().containerGroupProfile().id());
        Assertions.assertEquals(4210428974417603700L,
            response.properties().containerGroupProperties().containerGroupProfile().revision());
        Assertions.assertEquals("qyud", response.properties().containerGroupProperties().subnetIds().get(0).id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
