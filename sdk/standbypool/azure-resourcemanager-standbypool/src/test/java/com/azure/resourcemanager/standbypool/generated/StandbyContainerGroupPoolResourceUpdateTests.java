// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.standbypool.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.standbypool.models.ContainerGroupProfileUpdate;
import com.azure.resourcemanager.standbypool.models.ContainerGroupPropertiesUpdate;
import com.azure.resourcemanager.standbypool.models.RefillPolicy;
import com.azure.resourcemanager.standbypool.models.StandbyContainerGroupPoolElasticityProfileUpdate;
import com.azure.resourcemanager.standbypool.models.StandbyContainerGroupPoolResourceUpdate;
import com.azure.resourcemanager.standbypool.models.StandbyContainerGroupPoolResourceUpdateProperties;
import com.azure.resourcemanager.standbypool.models.Subnet;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StandbyContainerGroupPoolResourceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StandbyContainerGroupPoolResourceUpdate model = BinaryData.fromString(
            "{\"tags\":{\"jcmmxdcufufsrp\":\"km\",\"sgfyccsnew\":\"mzidnsezcxtb\",\"oosflnr\":\"dwzjeiach\",\"vypyqrimzinpv\":\"sfqpteehz\"},\"properties\":{\"elasticityProfile\":{\"maxReadyCapacity\":2324275574179750664,\"refillPolicy\":\"always\"},\"containerGroupProperties\":{\"containerGroupProfile\":{\"id\":\"qxhcrmn\",\"revision\":661111027301241875},\"subnetIds\":[{\"id\":\"whdsoifiyip\"}]}}}")
            .toObject(StandbyContainerGroupPoolResourceUpdate.class);
        Assertions.assertEquals("km", model.tags().get("jcmmxdcufufsrp"));
        Assertions.assertEquals(2324275574179750664L, model.properties().elasticityProfile().maxReadyCapacity());
        Assertions.assertEquals(RefillPolicy.ALWAYS, model.properties().elasticityProfile().refillPolicy());
        Assertions.assertEquals("qxhcrmn", model.properties().containerGroupProperties().containerGroupProfile().id());
        Assertions.assertEquals(661111027301241875L,
            model.properties().containerGroupProperties().containerGroupProfile().revision());
        Assertions.assertEquals("whdsoifiyip", model.properties().containerGroupProperties().subnetIds().get(0).id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StandbyContainerGroupPoolResourceUpdate model = new StandbyContainerGroupPoolResourceUpdate()
            .withTags(mapOf("jcmmxdcufufsrp", "km", "sgfyccsnew", "mzidnsezcxtb", "oosflnr", "dwzjeiach",
                "vypyqrimzinpv", "sfqpteehz"))
            .withProperties(new StandbyContainerGroupPoolResourceUpdateProperties()
                .withElasticityProfile(
                    new StandbyContainerGroupPoolElasticityProfileUpdate().withMaxReadyCapacity(2324275574179750664L)
                        .withRefillPolicy(RefillPolicy.ALWAYS))
                .withContainerGroupProperties(new ContainerGroupPropertiesUpdate()
                    .withContainerGroupProfile(
                        new ContainerGroupProfileUpdate().withId("qxhcrmn").withRevision(661111027301241875L))
                    .withSubnetIds(Arrays.asList(new Subnet().withId("whdsoifiyip")))));
        model = BinaryData.fromObject(model).toObject(StandbyContainerGroupPoolResourceUpdate.class);
        Assertions.assertEquals("km", model.tags().get("jcmmxdcufufsrp"));
        Assertions.assertEquals(2324275574179750664L, model.properties().elasticityProfile().maxReadyCapacity());
        Assertions.assertEquals(RefillPolicy.ALWAYS, model.properties().elasticityProfile().refillPolicy());
        Assertions.assertEquals("qxhcrmn", model.properties().containerGroupProperties().containerGroupProfile().id());
        Assertions.assertEquals(661111027301241875L,
            model.properties().containerGroupProperties().containerGroupProfile().revision());
        Assertions.assertEquals("whdsoifiyip", model.properties().containerGroupProperties().subnetIds().get(0).id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
