// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.standbypool.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.standbypool.models.ContainerGroupProfile;
import com.azure.resourcemanager.standbypool.models.ContainerGroupProperties;
import com.azure.resourcemanager.standbypool.models.RefillPolicy;
import com.azure.resourcemanager.standbypool.models.StandbyContainerGroupPoolElasticityProfile;
import com.azure.resourcemanager.standbypool.models.StandbyContainerGroupPoolResourceUpdate;
import com.azure.resourcemanager.standbypool.models.StandbyContainerGroupPoolResourceUpdateProperties;
import com.azure.resourcemanager.standbypool.models.Subnet;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StandbyContainerGroupPoolResourceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StandbyContainerGroupPoolResourceUpdate model = BinaryData.fromString(
            "{\"tags\":{\"cufufsrpymz\":\"ijcmmx\",\"fycc\":\"dnsezcxtbzs\",\"sflnrosfqp\":\"newmdwzjeiachbo\",\"zvypyqrimzinp\":\"eeh\"},\"properties\":{\"elasticityProfile\":{\"maxReadyCapacity\":2981381234458568547,\"refillPolicy\":\"always\"},\"containerGroupProperties\":{\"containerGroupProfile\":{\"id\":\"soodqxhcrmnoh\",\"revision\":6627888038764390692},\"subnetIds\":[{\"id\":\"dsoifiyipj\"}]}}}")
            .toObject(StandbyContainerGroupPoolResourceUpdate.class);
        Assertions.assertEquals("ijcmmx", model.tags().get("cufufsrpymz"));
        Assertions.assertEquals(2981381234458568547L, model.properties().elasticityProfile().maxReadyCapacity());
        Assertions.assertEquals(RefillPolicy.ALWAYS, model.properties().elasticityProfile().refillPolicy());
        Assertions.assertEquals("soodqxhcrmnoh",
            model.properties().containerGroupProperties().containerGroupProfile().id());
        Assertions.assertEquals(6627888038764390692L,
            model.properties().containerGroupProperties().containerGroupProfile().revision());
        Assertions.assertEquals("dsoifiyipj", model.properties().containerGroupProperties().subnetIds().get(0).id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StandbyContainerGroupPoolResourceUpdate model = new StandbyContainerGroupPoolResourceUpdate()
            .withTags(mapOf("cufufsrpymz", "ijcmmx", "fycc", "dnsezcxtbzs", "sflnrosfqp", "newmdwzjeiachbo",
                "zvypyqrimzinp", "eeh"))
            .withProperties(new StandbyContainerGroupPoolResourceUpdateProperties()
                .withElasticityProfile(
                    new StandbyContainerGroupPoolElasticityProfile().withMaxReadyCapacity(2981381234458568547L)
                        .withRefillPolicy(RefillPolicy.ALWAYS))
                .withContainerGroupProperties(new ContainerGroupProperties()
                    .withContainerGroupProfile(
                        new ContainerGroupProfile().withId("soodqxhcrmnoh").withRevision(6627888038764390692L))
                    .withSubnetIds(Arrays.asList(new Subnet().withId("dsoifiyipj")))));
        model = BinaryData.fromObject(model).toObject(StandbyContainerGroupPoolResourceUpdate.class);
        Assertions.assertEquals("ijcmmx", model.tags().get("cufufsrpymz"));
        Assertions.assertEquals(2981381234458568547L, model.properties().elasticityProfile().maxReadyCapacity());
        Assertions.assertEquals(RefillPolicy.ALWAYS, model.properties().elasticityProfile().refillPolicy());
        Assertions.assertEquals("soodqxhcrmnoh",
            model.properties().containerGroupProperties().containerGroupProfile().id());
        Assertions.assertEquals(6627888038764390692L,
            model.properties().containerGroupProperties().containerGroupProfile().revision());
        Assertions.assertEquals("dsoifiyipj", model.properties().containerGroupProperties().subnetIds().get(0).id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
