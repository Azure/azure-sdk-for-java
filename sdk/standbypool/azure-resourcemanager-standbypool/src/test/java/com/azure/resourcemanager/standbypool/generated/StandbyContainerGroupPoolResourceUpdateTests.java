// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.standbypool.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.standbypool.models.ContainerGroupProfile;
import com.azure.resourcemanager.standbypool.models.ContainerGroupProperties;
import com.azure.resourcemanager.standbypool.models.RefillPolicy;
import com.azure.resourcemanager.standbypool.models.StandbyContainerGroupPoolElasticityProfile;
import com.azure.resourcemanager.standbypool.models.StandbyContainerGroupPoolResourceUpdate;
import com.azure.resourcemanager.standbypool.models.StandbyContainerGroupPoolResourceUpdateProperties;
import com.azure.resourcemanager.standbypool.models.Subnet;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StandbyContainerGroupPoolResourceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StandbyContainerGroupPoolResourceUpdate model = BinaryData.fromString(
            "{\"tags\":{\"fqawrlyxw\":\"eju\"},\"properties\":{\"elasticityProfile\":{\"maxReadyCapacity\":4891061322345208982,\"refillPolicy\":\"always\"},\"containerGroupProperties\":{\"containerGroupProfile\":{\"id\":\"b\",\"revision\":85796477749100882},\"subnetIds\":[{\"id\":\"vpys\"},{\"id\":\"zdn\"}]}}}")
            .toObject(StandbyContainerGroupPoolResourceUpdate.class);
        Assertions.assertEquals("eju", model.tags().get("fqawrlyxw"));
        Assertions.assertEquals(4891061322345208982L, model.properties().elasticityProfile().maxReadyCapacity());
        Assertions.assertEquals(RefillPolicy.ALWAYS, model.properties().elasticityProfile().refillPolicy());
        Assertions.assertEquals("b", model.properties().containerGroupProperties().containerGroupProfile().id());
        Assertions.assertEquals(85796477749100882L,
            model.properties().containerGroupProperties().containerGroupProfile().revision());
        Assertions.assertEquals("vpys", model.properties().containerGroupProperties().subnetIds().get(0).id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StandbyContainerGroupPoolResourceUpdate model = new StandbyContainerGroupPoolResourceUpdate()
            .withTags(mapOf("fqawrlyxw", "eju"))
            .withProperties(new StandbyContainerGroupPoolResourceUpdateProperties()
                .withElasticityProfile(
                    new StandbyContainerGroupPoolElasticityProfile().withMaxReadyCapacity(4891061322345208982L)
                        .withRefillPolicy(RefillPolicy.ALWAYS))
                .withContainerGroupProperties(new ContainerGroupProperties()
                    .withContainerGroupProfile(new ContainerGroupProfile().withId("b").withRevision(85796477749100882L))
                    .withSubnetIds(Arrays.asList(new Subnet().withId("vpys"), new Subnet().withId("zdn")))));
        model = BinaryData.fromObject(model).toObject(StandbyContainerGroupPoolResourceUpdate.class);
        Assertions.assertEquals("eju", model.tags().get("fqawrlyxw"));
        Assertions.assertEquals(4891061322345208982L, model.properties().elasticityProfile().maxReadyCapacity());
        Assertions.assertEquals(RefillPolicy.ALWAYS, model.properties().elasticityProfile().refillPolicy());
        Assertions.assertEquals("b", model.properties().containerGroupProperties().containerGroupProfile().id());
        Assertions.assertEquals(85796477749100882L,
            model.properties().containerGroupProperties().containerGroupProfile().revision());
        Assertions.assertEquals("vpys", model.properties().containerGroupProperties().subnetIds().get(0).id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
