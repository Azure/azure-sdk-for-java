// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.standbypool.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Displays the counts of pooled container groups in each state, as known by the StandbyPool resource provider.
 */
@Immutable
public final class PoolContainerGroupStateCount implements JsonSerializable<PoolContainerGroupStateCount> {
    /*
     * The state that the pooled container groups count is for.
     */
    private PoolContainerGroupState state;

    /*
     * The count of pooled container groups in the given state.
     */
    private long count;

    /**
     * Creates an instance of PoolContainerGroupStateCount class.
     */
    private PoolContainerGroupStateCount() {
    }

    /**
     * Get the state property: The state that the pooled container groups count is for.
     * 
     * @return the state value.
     */
    public PoolContainerGroupState state() {
        return this.state;
    }

    /**
     * Get the count property: The count of pooled container groups in the given state.
     * 
     * @return the count value.
     */
    public long count() {
        return this.count;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (state() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property state in model PoolContainerGroupStateCount"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PoolContainerGroupStateCount.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeLongField("count", this.count);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PoolContainerGroupStateCount from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PoolContainerGroupStateCount if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PoolContainerGroupStateCount.
     */
    public static PoolContainerGroupStateCount fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PoolContainerGroupStateCount deserializedPoolContainerGroupStateCount = new PoolContainerGroupStateCount();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedPoolContainerGroupStateCount.state
                        = PoolContainerGroupState.fromString(reader.getString());
                } else if ("count".equals(fieldName)) {
                    deserializedPoolContainerGroupStateCount.count = reader.getLong();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPoolContainerGroupStateCount;
        });
    }
}
