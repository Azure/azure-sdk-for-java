// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.standbypool.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.standbypool.fluent.StandbyVirtualMachinePoolsClient;
import com.azure.resourcemanager.standbypool.fluent.models.StandbyVirtualMachinePoolResourceInner;
import com.azure.resourcemanager.standbypool.models.StandbyVirtualMachinePoolResource;
import com.azure.resourcemanager.standbypool.models.StandbyVirtualMachinePools;

public final class StandbyVirtualMachinePoolsImpl implements StandbyVirtualMachinePools {
    private static final ClientLogger LOGGER = new ClientLogger(StandbyVirtualMachinePoolsImpl.class);

    private final StandbyVirtualMachinePoolsClient innerClient;

    private final com.azure.resourcemanager.standbypool.StandbyPoolManager serviceManager;

    public StandbyVirtualMachinePoolsImpl(StandbyVirtualMachinePoolsClient innerClient,
        com.azure.resourcemanager.standbypool.StandbyPoolManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<StandbyVirtualMachinePoolResource> getByResourceGroupWithResponse(String resourceGroupName,
        String standbyVirtualMachinePoolName, Context context) {
        Response<StandbyVirtualMachinePoolResourceInner> inner = this.serviceClient()
            .getByResourceGroupWithResponse(resourceGroupName, standbyVirtualMachinePoolName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StandbyVirtualMachinePoolResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StandbyVirtualMachinePoolResource getByResourceGroup(String resourceGroupName,
        String standbyVirtualMachinePoolName) {
        StandbyVirtualMachinePoolResourceInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, standbyVirtualMachinePoolName);
        if (inner != null) {
            return new StandbyVirtualMachinePoolResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String standbyVirtualMachinePoolName) {
        this.serviceClient().delete(resourceGroupName, standbyVirtualMachinePoolName);
    }

    public void delete(String resourceGroupName, String standbyVirtualMachinePoolName, Context context) {
        this.serviceClient().delete(resourceGroupName, standbyVirtualMachinePoolName, context);
    }

    public PagedIterable<StandbyVirtualMachinePoolResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<StandbyVirtualMachinePoolResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StandbyVirtualMachinePoolResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<StandbyVirtualMachinePoolResource> listByResourceGroup(String resourceGroupName,
        Context context) {
        PagedIterable<StandbyVirtualMachinePoolResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StandbyVirtualMachinePoolResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<StandbyVirtualMachinePoolResource> list() {
        PagedIterable<StandbyVirtualMachinePoolResourceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StandbyVirtualMachinePoolResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<StandbyVirtualMachinePoolResource> list(Context context) {
        PagedIterable<StandbyVirtualMachinePoolResourceInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StandbyVirtualMachinePoolResourceImpl(inner1, this.manager()));
    }

    public StandbyVirtualMachinePoolResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String standbyVirtualMachinePoolName
            = ResourceManagerUtils.getValueFromIdByName(id, "standbyVirtualMachinePools");
        if (standbyVirtualMachinePoolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'standbyVirtualMachinePools'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, standbyVirtualMachinePoolName, Context.NONE)
            .getValue();
    }

    public Response<StandbyVirtualMachinePoolResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String standbyVirtualMachinePoolName
            = ResourceManagerUtils.getValueFromIdByName(id, "standbyVirtualMachinePools");
        if (standbyVirtualMachinePoolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'standbyVirtualMachinePools'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, standbyVirtualMachinePoolName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String standbyVirtualMachinePoolName
            = ResourceManagerUtils.getValueFromIdByName(id, "standbyVirtualMachinePools");
        if (standbyVirtualMachinePoolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'standbyVirtualMachinePools'.", id)));
        }
        this.delete(resourceGroupName, standbyVirtualMachinePoolName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String standbyVirtualMachinePoolName
            = ResourceManagerUtils.getValueFromIdByName(id, "standbyVirtualMachinePools");
        if (standbyVirtualMachinePoolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'standbyVirtualMachinePools'.", id)));
        }
        this.delete(resourceGroupName, standbyVirtualMachinePoolName, context);
    }

    private StandbyVirtualMachinePoolsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.standbypool.StandbyPoolManager manager() {
        return this.serviceManager;
    }

    public StandbyVirtualMachinePoolResourceImpl define(String name) {
        return new StandbyVirtualMachinePoolResourceImpl(name, this.manager());
    }
}
