// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.standbypool.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies the elasticity profile of the standby container group pools.
 */
@Fluent
public final class StandbyContainerGroupPoolElasticityProfile
    implements JsonSerializable<StandbyContainerGroupPoolElasticityProfile> {
    /*
     * Specifies maximum number of standby container groups in the standby pool.
     */
    private long maxReadyCapacity;

    /*
     * Specifies refill policy of the pool.
     */
    private RefillPolicy refillPolicy;

    /**
     * Creates an instance of StandbyContainerGroupPoolElasticityProfile class.
     */
    public StandbyContainerGroupPoolElasticityProfile() {
    }

    /**
     * Get the maxReadyCapacity property: Specifies maximum number of standby container groups in the standby pool.
     * 
     * @return the maxReadyCapacity value.
     */
    public long maxReadyCapacity() {
        return this.maxReadyCapacity;
    }

    /**
     * Set the maxReadyCapacity property: Specifies maximum number of standby container groups in the standby pool.
     * 
     * @param maxReadyCapacity the maxReadyCapacity value to set.
     * @return the StandbyContainerGroupPoolElasticityProfile object itself.
     */
    public StandbyContainerGroupPoolElasticityProfile withMaxReadyCapacity(long maxReadyCapacity) {
        this.maxReadyCapacity = maxReadyCapacity;
        return this;
    }

    /**
     * Get the refillPolicy property: Specifies refill policy of the pool.
     * 
     * @return the refillPolicy value.
     */
    public RefillPolicy refillPolicy() {
        return this.refillPolicy;
    }

    /**
     * Set the refillPolicy property: Specifies refill policy of the pool.
     * 
     * @param refillPolicy the refillPolicy value to set.
     * @return the StandbyContainerGroupPoolElasticityProfile object itself.
     */
    public StandbyContainerGroupPoolElasticityProfile withRefillPolicy(RefillPolicy refillPolicy) {
        this.refillPolicy = refillPolicy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("maxReadyCapacity", this.maxReadyCapacity);
        jsonWriter.writeStringField("refillPolicy", this.refillPolicy == null ? null : this.refillPolicy.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StandbyContainerGroupPoolElasticityProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StandbyContainerGroupPoolElasticityProfile if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StandbyContainerGroupPoolElasticityProfile.
     */
    public static StandbyContainerGroupPoolElasticityProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StandbyContainerGroupPoolElasticityProfile deserializedStandbyContainerGroupPoolElasticityProfile
                = new StandbyContainerGroupPoolElasticityProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maxReadyCapacity".equals(fieldName)) {
                    deserializedStandbyContainerGroupPoolElasticityProfile.maxReadyCapacity = reader.getLong();
                } else if ("refillPolicy".equals(fieldName)) {
                    deserializedStandbyContainerGroupPoolElasticityProfile.refillPolicy
                        = RefillPolicy.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStandbyContainerGroupPoolElasticityProfile;
        });
    }
}
