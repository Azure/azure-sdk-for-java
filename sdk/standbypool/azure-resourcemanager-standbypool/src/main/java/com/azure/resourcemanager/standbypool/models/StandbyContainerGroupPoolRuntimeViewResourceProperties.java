// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.standbypool.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Contains information about a standby pool as last known by the StandbyPool resource provider.
 */
@Immutable
public final class StandbyContainerGroupPoolRuntimeViewResourceProperties
    implements JsonSerializable<StandbyContainerGroupPoolRuntimeViewResourceProperties> {
    /*
     * A list containing the counts of container groups in each possible state, as known by the StandbyPool resource
     * provider.
     */
    private List<ContainerGroupInstanceCountSummary> instanceCountSummary;

    /*
     * Displays the provisioning state of the standby pool
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of StandbyContainerGroupPoolRuntimeViewResourceProperties class.
     */
    private StandbyContainerGroupPoolRuntimeViewResourceProperties() {
    }

    /**
     * Get the instanceCountSummary property: A list containing the counts of container groups in each possible state,
     * as known by the StandbyPool resource provider.
     * 
     * @return the instanceCountSummary value.
     */
    public List<ContainerGroupInstanceCountSummary> instanceCountSummary() {
        return this.instanceCountSummary;
    }

    /**
     * Get the provisioningState property: Displays the provisioning state of the standby pool.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (instanceCountSummary() != null) {
            instanceCountSummary().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StandbyContainerGroupPoolRuntimeViewResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StandbyContainerGroupPoolRuntimeViewResourceProperties if the JsonReader was pointing to
     * an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StandbyContainerGroupPoolRuntimeViewResourceProperties.
     */
    public static StandbyContainerGroupPoolRuntimeViewResourceProperties fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            StandbyContainerGroupPoolRuntimeViewResourceProperties deserializedStandbyContainerGroupPoolRuntimeViewResourceProperties
                = new StandbyContainerGroupPoolRuntimeViewResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceCountSummary".equals(fieldName)) {
                    List<ContainerGroupInstanceCountSummary> instanceCountSummary
                        = reader.readArray(reader1 -> ContainerGroupInstanceCountSummary.fromJson(reader1));
                    deserializedStandbyContainerGroupPoolRuntimeViewResourceProperties.instanceCountSummary
                        = instanceCountSummary;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedStandbyContainerGroupPoolRuntimeViewResourceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStandbyContainerGroupPoolRuntimeViewResourceProperties;
        });
    }
}
