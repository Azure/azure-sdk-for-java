// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.standbypool.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of the StandbyVirtualMachine.
 */
@Immutable
public final class StandbyVirtualMachineResourceProperties
    implements JsonSerializable<StandbyVirtualMachineResourceProperties> {
    /*
     * Resource id of the virtual machine.
     */
    private String virtualMachineResourceId;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of StandbyVirtualMachineResourceProperties class.
     */
    private StandbyVirtualMachineResourceProperties() {
    }

    /**
     * Get the virtualMachineResourceId property: Resource id of the virtual machine.
     * 
     * @return the virtualMachineResourceId value.
     */
    public String virtualMachineResourceId() {
        return this.virtualMachineResourceId;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (virtualMachineResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property virtualMachineResourceId in model StandbyVirtualMachineResourceProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StandbyVirtualMachineResourceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("virtualMachineResourceId", this.virtualMachineResourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StandbyVirtualMachineResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StandbyVirtualMachineResourceProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StandbyVirtualMachineResourceProperties.
     */
    public static StandbyVirtualMachineResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StandbyVirtualMachineResourceProperties deserializedStandbyVirtualMachineResourceProperties
                = new StandbyVirtualMachineResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("virtualMachineResourceId".equals(fieldName)) {
                    deserializedStandbyVirtualMachineResourceProperties.virtualMachineResourceId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedStandbyVirtualMachineResourceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStandbyVirtualMachineResourceProperties;
        });
    }
}
