// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.standbypool.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details of the ContainerGroupProperties.
 */
@Fluent
public final class ContainerGroupProperties implements JsonSerializable<ContainerGroupProperties> {
    /*
     * Specifies container group profile of standby container groups.
     */
    private ContainerGroupProfile containerGroupProfile;

    /*
     * Specifies subnet Ids for container group.
     */
    private List<Subnet> subnetIds;

    /**
     * Creates an instance of ContainerGroupProperties class.
     */
    public ContainerGroupProperties() {
    }

    /**
     * Get the containerGroupProfile property: Specifies container group profile of standby container groups.
     * 
     * @return the containerGroupProfile value.
     */
    public ContainerGroupProfile containerGroupProfile() {
        return this.containerGroupProfile;
    }

    /**
     * Set the containerGroupProfile property: Specifies container group profile of standby container groups.
     * 
     * @param containerGroupProfile the containerGroupProfile value to set.
     * @return the ContainerGroupProperties object itself.
     */
    public ContainerGroupProperties withContainerGroupProfile(ContainerGroupProfile containerGroupProfile) {
        this.containerGroupProfile = containerGroupProfile;
        return this;
    }

    /**
     * Get the subnetIds property: Specifies subnet Ids for container group.
     * 
     * @return the subnetIds value.
     */
    public List<Subnet> subnetIds() {
        return this.subnetIds;
    }

    /**
     * Set the subnetIds property: Specifies subnet Ids for container group.
     * 
     * @param subnetIds the subnetIds value to set.
     * @return the ContainerGroupProperties object itself.
     */
    public ContainerGroupProperties withSubnetIds(List<Subnet> subnetIds) {
        this.subnetIds = subnetIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (containerGroupProfile() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property containerGroupProfile in model ContainerGroupProperties"));
        } else {
            containerGroupProfile().validate();
        }
        if (subnetIds() != null) {
            subnetIds().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ContainerGroupProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("containerGroupProfile", this.containerGroupProfile);
        jsonWriter.writeArrayField("subnetIds", this.subnetIds, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContainerGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContainerGroupProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContainerGroupProperties.
     */
    public static ContainerGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContainerGroupProperties deserializedContainerGroupProperties = new ContainerGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("containerGroupProfile".equals(fieldName)) {
                    deserializedContainerGroupProperties.containerGroupProfile = ContainerGroupProfile.fromJson(reader);
                } else if ("subnetIds".equals(fieldName)) {
                    List<Subnet> subnetIds = reader.readArray(reader1 -> Subnet.fromJson(reader1));
                    deserializedContainerGroupProperties.subnetIds = subnetIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContainerGroupProperties;
        });
    }
}
