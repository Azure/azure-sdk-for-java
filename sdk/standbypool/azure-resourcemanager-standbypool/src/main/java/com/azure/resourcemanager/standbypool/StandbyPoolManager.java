// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.standbypool;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpPipeline;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.standbypool.fluent.StandbyPoolClient;
import com.azure.resourcemanager.standbypool.implementation.OperationsImpl;
import com.azure.resourcemanager.standbypool.implementation.StandbyContainerGroupPoolRuntimeViewsImpl;
import com.azure.resourcemanager.standbypool.implementation.StandbyContainerGroupPoolsImpl;
import com.azure.resourcemanager.standbypool.implementation.StandbyPoolClientBuilder;
import com.azure.resourcemanager.standbypool.implementation.StandbyVirtualMachinePoolRuntimeViewsImpl;
import com.azure.resourcemanager.standbypool.implementation.StandbyVirtualMachinePoolsImpl;
import com.azure.resourcemanager.standbypool.implementation.StandbyVirtualMachinesImpl;
import com.azure.resourcemanager.standbypool.models.Operations;
import com.azure.resourcemanager.standbypool.models.StandbyContainerGroupPoolRuntimeViews;
import com.azure.resourcemanager.standbypool.models.StandbyContainerGroupPools;
import com.azure.resourcemanager.standbypool.models.StandbyVirtualMachinePoolRuntimeViews;
import com.azure.resourcemanager.standbypool.models.StandbyVirtualMachinePools;
import com.azure.resourcemanager.standbypool.models.StandbyVirtualMachines;
import java.time.Duration;
import java.util.Objects;

/**
 * Entry point to StandbyPoolManager.
 */
public final class StandbyPoolManager {
    private Operations operations;

    private StandbyVirtualMachinePools standbyVirtualMachinePools;

    private StandbyVirtualMachines standbyVirtualMachines;

    private StandbyVirtualMachinePoolRuntimeViews standbyVirtualMachinePoolRuntimeViews;

    private StandbyContainerGroupPools standbyContainerGroupPools;

    private StandbyContainerGroupPoolRuntimeViews standbyContainerGroupPoolRuntimeViews;

    private final StandbyPoolClient clientObject;

    private StandbyPoolManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject = new StandbyPoolClientBuilder().pipeline(httpPipeline)
            .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
            .subscriptionId(profile.getSubscriptionId())
            .defaultPollInterval(defaultPollInterval)
            .buildClient();
    }

    /**
     * Creates an instance of Standby Pool service API entry point.
     * 
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Standby Pool service API instance.
     */
    public static StandbyPoolManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of Standby Pool service API entry point.
     * 
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the Standby Pool service API instance.
     */
    public static StandbyPoolManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new StandbyPoolManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create StandbyPoolManager with optional configuration.
     * 
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new StandbyPoolManager.Configurable();
    }

    /**
     * Gets the resource collection API of Operations.
     * 
     * @return Resource collection API of Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /**
     * Gets the resource collection API of StandbyVirtualMachinePools. It manages StandbyVirtualMachinePoolResource.
     * 
     * @return Resource collection API of StandbyVirtualMachinePools.
     */
    public StandbyVirtualMachinePools standbyVirtualMachinePools() {
        if (this.standbyVirtualMachinePools == null) {
            this.standbyVirtualMachinePools
                = new StandbyVirtualMachinePoolsImpl(clientObject.getStandbyVirtualMachinePools(), this);
        }
        return standbyVirtualMachinePools;
    }

    /**
     * Gets the resource collection API of StandbyVirtualMachines.
     * 
     * @return Resource collection API of StandbyVirtualMachines.
     */
    public StandbyVirtualMachines standbyVirtualMachines() {
        if (this.standbyVirtualMachines == null) {
            this.standbyVirtualMachines
                = new StandbyVirtualMachinesImpl(clientObject.getStandbyVirtualMachines(), this);
        }
        return standbyVirtualMachines;
    }

    /**
     * Gets the resource collection API of StandbyVirtualMachinePoolRuntimeViews.
     * 
     * @return Resource collection API of StandbyVirtualMachinePoolRuntimeViews.
     */
    public StandbyVirtualMachinePoolRuntimeViews standbyVirtualMachinePoolRuntimeViews() {
        if (this.standbyVirtualMachinePoolRuntimeViews == null) {
            this.standbyVirtualMachinePoolRuntimeViews = new StandbyVirtualMachinePoolRuntimeViewsImpl(
                clientObject.getStandbyVirtualMachinePoolRuntimeViews(), this);
        }
        return standbyVirtualMachinePoolRuntimeViews;
    }

    /**
     * Gets the resource collection API of StandbyContainerGroupPools. It manages StandbyContainerGroupPoolResource.
     * 
     * @return Resource collection API of StandbyContainerGroupPools.
     */
    public StandbyContainerGroupPools standbyContainerGroupPools() {
        if (this.standbyContainerGroupPools == null) {
            this.standbyContainerGroupPools
                = new StandbyContainerGroupPoolsImpl(clientObject.getStandbyContainerGroupPools(), this);
        }
        return standbyContainerGroupPools;
    }

    /**
     * Gets the resource collection API of StandbyContainerGroupPoolRuntimeViews.
     * 
     * @return Resource collection API of StandbyContainerGroupPoolRuntimeViews.
     */
    public StandbyContainerGroupPoolRuntimeViews standbyContainerGroupPoolRuntimeViews() {
        if (this.standbyContainerGroupPoolRuntimeViews == null) {
            this.standbyContainerGroupPoolRuntimeViews = new StandbyContainerGroupPoolRuntimeViewsImpl(
                clientObject.getStandbyContainerGroupPoolRuntimeViews(), this);
        }
        return standbyContainerGroupPoolRuntimeViews;
    }

    /**
     * Gets wrapped service client StandbyPoolClient providing direct access to the underlying auto-generated API
     * implementation, based on Azure REST API.
     * 
     * @return Wrapped service client StandbyPoolClient.
     */
    public StandbyPoolClient serviceClient() {
        return this.clientObject;
    }
}
