// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.standbypool.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Displays prediction information of the standby pool.
 */
@Immutable
public final class StandbyVirtualMachinePoolPrediction
    implements JsonSerializable<StandbyVirtualMachinePoolPrediction> {
    /*
     * Displays the forecast information of the standby pool.
     */
    private StandbyVirtualMachinePoolForecastValues forecastValues;

    /*
     * Displays the UTC timestamp of when the prediction was retrieved for the standby pool.
     */
    private OffsetDateTime forecastStartTime;

    /*
     * Displays additional information for the prediction of the standby pool.
     */
    private String forecastInfo;

    /**
     * Creates an instance of StandbyVirtualMachinePoolPrediction class.
     */
    private StandbyVirtualMachinePoolPrediction() {
    }

    /**
     * Get the forecastValues property: Displays the forecast information of the standby pool.
     * 
     * @return the forecastValues value.
     */
    public StandbyVirtualMachinePoolForecastValues forecastValues() {
        return this.forecastValues;
    }

    /**
     * Get the forecastStartTime property: Displays the UTC timestamp of when the prediction was retrieved for the
     * standby pool.
     * 
     * @return the forecastStartTime value.
     */
    public OffsetDateTime forecastStartTime() {
        return this.forecastStartTime;
    }

    /**
     * Get the forecastInfo property: Displays additional information for the prediction of the standby pool.
     * 
     * @return the forecastInfo value.
     */
    public String forecastInfo() {
        return this.forecastInfo;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (forecastValues() != null) {
            forecastValues().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StandbyVirtualMachinePoolPrediction from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StandbyVirtualMachinePoolPrediction if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StandbyVirtualMachinePoolPrediction.
     */
    public static StandbyVirtualMachinePoolPrediction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StandbyVirtualMachinePoolPrediction deserializedStandbyVirtualMachinePoolPrediction
                = new StandbyVirtualMachinePoolPrediction();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("forecastValues".equals(fieldName)) {
                    deserializedStandbyVirtualMachinePoolPrediction.forecastValues
                        = StandbyVirtualMachinePoolForecastValues.fromJson(reader);
                } else if ("forecastStartTime".equals(fieldName)) {
                    deserializedStandbyVirtualMachinePoolPrediction.forecastStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("forecastInfo".equals(fieldName)) {
                    deserializedStandbyVirtualMachinePoolPrediction.forecastInfo = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStandbyVirtualMachinePoolPrediction;
        });
    }
}
