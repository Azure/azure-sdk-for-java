// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.standbypool.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Contains the counts of VMs in each power state in a given zone, fault domain, as known by the StandbyPool resource
 * provider.
 * Note: any updates to pool resources outside of StandbyPoolRP (i.e deleting a VM through portal) are not reflected
 * here.
 * Note: any resources in the Running state may still be installing extensions / not fully provisioned.
 */
@Immutable
public final class VirtualMachineInstanceCountSummary implements JsonSerializable<VirtualMachineInstanceCountSummary> {
    /*
     * The zone that the provided counts are in. This is null if zones are not enabled on the attached VMSS.
     */
    private Long zone;

    /*
     * The count of pooled resources in each state for the given zone.
     */
    private List<PoolResourceStateCount> instanceCountsByState;

    /**
     * Creates an instance of VirtualMachineInstanceCountSummary class.
     */
    private VirtualMachineInstanceCountSummary() {
    }

    /**
     * Get the zone property: The zone that the provided counts are in. This is null if zones are not enabled on the
     * attached VMSS.
     * 
     * @return the zone value.
     */
    public Long zone() {
        return this.zone;
    }

    /**
     * Get the instanceCountsByState property: The count of pooled resources in each state for the given zone.
     * 
     * @return the instanceCountsByState value.
     */
    public List<PoolResourceStateCount> instanceCountsByState() {
        return this.instanceCountsByState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (instanceCountsByState() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property instanceCountsByState in model VirtualMachineInstanceCountSummary"));
        } else {
            instanceCountsByState().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VirtualMachineInstanceCountSummary.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("instanceCountsByState", this.instanceCountsByState,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("zone", this.zone);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineInstanceCountSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineInstanceCountSummary if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VirtualMachineInstanceCountSummary.
     */
    public static VirtualMachineInstanceCountSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineInstanceCountSummary deserializedVirtualMachineInstanceCountSummary
                = new VirtualMachineInstanceCountSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceCountsByState".equals(fieldName)) {
                    List<PoolResourceStateCount> instanceCountsByState
                        = reader.readArray(reader1 -> PoolResourceStateCount.fromJson(reader1));
                    deserializedVirtualMachineInstanceCountSummary.instanceCountsByState = instanceCountsByState;
                } else if ("zone".equals(fieldName)) {
                    deserializedVirtualMachineInstanceCountSummary.zone = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineInstanceCountSummary;
        });
    }
}
