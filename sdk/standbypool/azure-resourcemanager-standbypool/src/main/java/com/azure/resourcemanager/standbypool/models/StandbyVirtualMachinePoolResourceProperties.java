// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.standbypool.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of the StandbyVirtualMachinePool.
 */
@Fluent
public final class StandbyVirtualMachinePoolResourceProperties
    implements JsonSerializable<StandbyVirtualMachinePoolResourceProperties> {
    /*
     * Specifies the elasticity profile of the standby virtual machine pools.
     */
    private StandbyVirtualMachinePoolElasticityProfile elasticityProfile;

    /*
     * Specifies the desired state of virtual machines in the pool.
     */
    private VirtualMachineState virtualMachineState;

    /*
     * Specifies the fully qualified resource ID of a virtual machine scale set the pool is attached to.
     */
    private String attachedVirtualMachineScaleSetId;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of StandbyVirtualMachinePoolResourceProperties class.
     */
    public StandbyVirtualMachinePoolResourceProperties() {
    }

    /**
     * Get the elasticityProfile property: Specifies the elasticity profile of the standby virtual machine pools.
     * 
     * @return the elasticityProfile value.
     */
    public StandbyVirtualMachinePoolElasticityProfile elasticityProfile() {
        return this.elasticityProfile;
    }

    /**
     * Set the elasticityProfile property: Specifies the elasticity profile of the standby virtual machine pools.
     * 
     * @param elasticityProfile the elasticityProfile value to set.
     * @return the StandbyVirtualMachinePoolResourceProperties object itself.
     */
    public StandbyVirtualMachinePoolResourceProperties
        withElasticityProfile(StandbyVirtualMachinePoolElasticityProfile elasticityProfile) {
        this.elasticityProfile = elasticityProfile;
        return this;
    }

    /**
     * Get the virtualMachineState property: Specifies the desired state of virtual machines in the pool.
     * 
     * @return the virtualMachineState value.
     */
    public VirtualMachineState virtualMachineState() {
        return this.virtualMachineState;
    }

    /**
     * Set the virtualMachineState property: Specifies the desired state of virtual machines in the pool.
     * 
     * @param virtualMachineState the virtualMachineState value to set.
     * @return the StandbyVirtualMachinePoolResourceProperties object itself.
     */
    public StandbyVirtualMachinePoolResourceProperties
        withVirtualMachineState(VirtualMachineState virtualMachineState) {
        this.virtualMachineState = virtualMachineState;
        return this;
    }

    /**
     * Get the attachedVirtualMachineScaleSetId property: Specifies the fully qualified resource ID of a virtual machine
     * scale set the pool is attached to.
     * 
     * @return the attachedVirtualMachineScaleSetId value.
     */
    public String attachedVirtualMachineScaleSetId() {
        return this.attachedVirtualMachineScaleSetId;
    }

    /**
     * Set the attachedVirtualMachineScaleSetId property: Specifies the fully qualified resource ID of a virtual machine
     * scale set the pool is attached to.
     * 
     * @param attachedVirtualMachineScaleSetId the attachedVirtualMachineScaleSetId value to set.
     * @return the StandbyVirtualMachinePoolResourceProperties object itself.
     */
    public StandbyVirtualMachinePoolResourceProperties
        withAttachedVirtualMachineScaleSetId(String attachedVirtualMachineScaleSetId) {
        this.attachedVirtualMachineScaleSetId = attachedVirtualMachineScaleSetId;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (elasticityProfile() != null) {
            elasticityProfile().validate();
        }
        if (virtualMachineState() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property virtualMachineState in model StandbyVirtualMachinePoolResourceProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StandbyVirtualMachinePoolResourceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("virtualMachineState",
            this.virtualMachineState == null ? null : this.virtualMachineState.toString());
        jsonWriter.writeJsonField("elasticityProfile", this.elasticityProfile);
        jsonWriter.writeStringField("attachedVirtualMachineScaleSetId", this.attachedVirtualMachineScaleSetId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StandbyVirtualMachinePoolResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StandbyVirtualMachinePoolResourceProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StandbyVirtualMachinePoolResourceProperties.
     */
    public static StandbyVirtualMachinePoolResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StandbyVirtualMachinePoolResourceProperties deserializedStandbyVirtualMachinePoolResourceProperties
                = new StandbyVirtualMachinePoolResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("virtualMachineState".equals(fieldName)) {
                    deserializedStandbyVirtualMachinePoolResourceProperties.virtualMachineState
                        = VirtualMachineState.fromString(reader.getString());
                } else if ("elasticityProfile".equals(fieldName)) {
                    deserializedStandbyVirtualMachinePoolResourceProperties.elasticityProfile
                        = StandbyVirtualMachinePoolElasticityProfile.fromJson(reader);
                } else if ("attachedVirtualMachineScaleSetId".equals(fieldName)) {
                    deserializedStandbyVirtualMachinePoolResourceProperties.attachedVirtualMachineScaleSetId
                        = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedStandbyVirtualMachinePoolResourceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStandbyVirtualMachinePoolResourceProperties;
        });
    }
}
