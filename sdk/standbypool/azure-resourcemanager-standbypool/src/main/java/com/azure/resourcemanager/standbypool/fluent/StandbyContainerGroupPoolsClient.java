// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.standbypool.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.standbypool.fluent.models.StandbyContainerGroupPoolResourceInner;
import com.azure.resourcemanager.standbypool.models.StandbyContainerGroupPoolResourceUpdate;

/**
 * An instance of this class provides access to all the operations defined in StandbyContainerGroupPoolsClient.
 */
public interface StandbyContainerGroupPoolsClient {
    /**
     * Get a StandbyContainerGroupPoolResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param standbyContainerGroupPoolName Name of the standby container group pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StandbyContainerGroupPoolResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<StandbyContainerGroupPoolResourceInner> getByResourceGroupWithResponse(String resourceGroupName,
        String standbyContainerGroupPoolName, Context context);

    /**
     * Get a StandbyContainerGroupPoolResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param standbyContainerGroupPoolName Name of the standby container group pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StandbyContainerGroupPoolResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    StandbyContainerGroupPoolResourceInner getByResourceGroup(String resourceGroupName,
        String standbyContainerGroupPoolName);

    /**
     * Create a StandbyContainerGroupPoolResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param standbyContainerGroupPoolName Name of the standby container group pool.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a StandbyContainerGroupPoolResource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<StandbyContainerGroupPoolResourceInner>, StandbyContainerGroupPoolResourceInner>
        beginCreateOrUpdate(String resourceGroupName, String standbyContainerGroupPoolName,
            StandbyContainerGroupPoolResourceInner resource);

    /**
     * Create a StandbyContainerGroupPoolResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param standbyContainerGroupPoolName Name of the standby container group pool.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a StandbyContainerGroupPoolResource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<StandbyContainerGroupPoolResourceInner>, StandbyContainerGroupPoolResourceInner>
        beginCreateOrUpdate(String resourceGroupName, String standbyContainerGroupPoolName,
            StandbyContainerGroupPoolResourceInner resource, Context context);

    /**
     * Create a StandbyContainerGroupPoolResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param standbyContainerGroupPoolName Name of the standby container group pool.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StandbyContainerGroupPoolResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    StandbyContainerGroupPoolResourceInner createOrUpdate(String resourceGroupName,
        String standbyContainerGroupPoolName, StandbyContainerGroupPoolResourceInner resource);

    /**
     * Create a StandbyContainerGroupPoolResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param standbyContainerGroupPoolName Name of the standby container group pool.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StandbyContainerGroupPoolResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    StandbyContainerGroupPoolResourceInner createOrUpdate(String resourceGroupName,
        String standbyContainerGroupPoolName, StandbyContainerGroupPoolResourceInner resource, Context context);

    /**
     * Delete a StandbyContainerGroupPoolResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param standbyContainerGroupPoolName Name of the standby container group pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String standbyContainerGroupPoolName);

    /**
     * Delete a StandbyContainerGroupPoolResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param standbyContainerGroupPoolName Name of the standby container group pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String standbyContainerGroupPoolName,
        Context context);

    /**
     * Delete a StandbyContainerGroupPoolResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param standbyContainerGroupPoolName Name of the standby container group pool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String standbyContainerGroupPoolName);

    /**
     * Delete a StandbyContainerGroupPoolResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param standbyContainerGroupPoolName Name of the standby container group pool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String standbyContainerGroupPoolName, Context context);

    /**
     * Update a StandbyContainerGroupPoolResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param standbyContainerGroupPoolName Name of the standby container group pool.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StandbyContainerGroupPoolResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<StandbyContainerGroupPoolResourceInner> updateWithResponse(String resourceGroupName,
        String standbyContainerGroupPoolName, StandbyContainerGroupPoolResourceUpdate properties, Context context);

    /**
     * Update a StandbyContainerGroupPoolResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param standbyContainerGroupPoolName Name of the standby container group pool.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a StandbyContainerGroupPoolResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    StandbyContainerGroupPoolResourceInner update(String resourceGroupName, String standbyContainerGroupPoolName,
        StandbyContainerGroupPoolResourceUpdate properties);

    /**
     * List StandbyContainerGroupPoolResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a StandbyContainerGroupPoolResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<StandbyContainerGroupPoolResourceInner> listByResourceGroup(String resourceGroupName);

    /**
     * List StandbyContainerGroupPoolResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a StandbyContainerGroupPoolResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<StandbyContainerGroupPoolResourceInner> listByResourceGroup(String resourceGroupName,
        Context context);

    /**
     * List StandbyContainerGroupPoolResource resources by subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a StandbyContainerGroupPoolResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<StandbyContainerGroupPoolResourceInner> list();

    /**
     * List StandbyContainerGroupPoolResource resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a StandbyContainerGroupPoolResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<StandbyContainerGroupPoolResourceInner> list(Context context);
}
