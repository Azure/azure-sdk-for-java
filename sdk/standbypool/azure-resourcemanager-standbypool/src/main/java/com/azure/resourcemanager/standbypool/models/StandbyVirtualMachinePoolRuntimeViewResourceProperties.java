// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.standbypool.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Contains information about a standby pool as last known by the StandbyPool resource provider.
 */
@Immutable
public final class StandbyVirtualMachinePoolRuntimeViewResourceProperties
    implements JsonSerializable<StandbyVirtualMachinePoolRuntimeViewResourceProperties> {
    /*
     * A list containing the counts of virtual machines in each possible power state for each zone if enabled, as known
     * by the StandbyPool resource provider.
     * If zones are not enabled on the attached VMSS, the list will contain a single entry with null zone values.
     * Note: any updates to pool resources outside of StandbyPoolRP (i.e deleting a VM through portal) are not reflected
     * here.
     * Note: any resources in the Running state may still be installing extensions / not fully provisioned.
     */
    private List<VirtualMachineInstanceCountSummary> instanceCountSummary;

    /*
     * Displays the provisioning state of the standby pool
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of StandbyVirtualMachinePoolRuntimeViewResourceProperties class.
     */
    private StandbyVirtualMachinePoolRuntimeViewResourceProperties() {
    }

    /**
     * Get the instanceCountSummary property: A list containing the counts of virtual machines in each possible power
     * state for each zone if enabled, as known by the StandbyPool resource provider.
     * If zones are not enabled on the attached VMSS, the list will contain a single entry with null zone values.
     * Note: any updates to pool resources outside of StandbyPoolRP (i.e deleting a VM through portal) are not reflected
     * here.
     * Note: any resources in the Running state may still be installing extensions / not fully provisioned.
     * 
     * @return the instanceCountSummary value.
     */
    public List<VirtualMachineInstanceCountSummary> instanceCountSummary() {
        return this.instanceCountSummary;
    }

    /**
     * Get the provisioningState property: Displays the provisioning state of the standby pool.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (instanceCountSummary() != null) {
            instanceCountSummary().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StandbyVirtualMachinePoolRuntimeViewResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StandbyVirtualMachinePoolRuntimeViewResourceProperties if the JsonReader was pointing to
     * an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StandbyVirtualMachinePoolRuntimeViewResourceProperties.
     */
    public static StandbyVirtualMachinePoolRuntimeViewResourceProperties fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            StandbyVirtualMachinePoolRuntimeViewResourceProperties deserializedStandbyVirtualMachinePoolRuntimeViewResourceProperties
                = new StandbyVirtualMachinePoolRuntimeViewResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceCountSummary".equals(fieldName)) {
                    List<VirtualMachineInstanceCountSummary> instanceCountSummary
                        = reader.readArray(reader1 -> VirtualMachineInstanceCountSummary.fromJson(reader1));
                    deserializedStandbyVirtualMachinePoolRuntimeViewResourceProperties.instanceCountSummary
                        = instanceCountSummary;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedStandbyVirtualMachinePoolRuntimeViewResourceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStandbyVirtualMachinePoolRuntimeViewResourceProperties;
        });
    }
}
