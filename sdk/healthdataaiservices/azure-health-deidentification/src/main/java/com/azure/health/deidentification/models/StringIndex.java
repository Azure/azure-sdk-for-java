// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.health.deidentification.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * String index encoding model.
 */
@Immutable
public final class StringIndex implements JsonSerializable<StringIndex> {
    /*
     * The offset or length of the substring in UTF-8 encoding
     */
    @Generated
    private final int utf8;

    /*
     * The offset or length of the substring in UTF-16 encoding.
     * 
     * Primary encoding used by .NET, Java, and JavaScript.
     */
    @Generated
    private final int utf16;

    /*
     * The offset or length of the substring in CodePoint encoding.
     * 
     * Primary encoding used by Python.
     */
    @Generated
    private final int codePoint;

    /**
     * Creates an instance of StringIndex class.
     * 
     * @param utf8 the utf8 value to set.
     * @param utf16 the utf16 value to set.
     * @param codePoint the codePoint value to set.
     */
    @Generated
    private StringIndex(int utf8, int utf16, int codePoint) {
        this.utf8 = utf8;
        this.utf16 = utf16;
        this.codePoint = codePoint;
    }

    /**
     * Get the utf8 property: The offset or length of the substring in UTF-8 encoding.
     * 
     * @return the utf8 value.
     */
    @Generated
    public int getUtf8() {
        return this.utf8;
    }

    /**
     * Get the utf16 property: The offset or length of the substring in UTF-16 encoding.
     * 
     * Primary encoding used by .NET, Java, and JavaScript.
     * 
     * @return the utf16 value.
     */
    @Generated
    public int getUtf16() {
        return this.utf16;
    }

    /**
     * Get the codePoint property: The offset or length of the substring in CodePoint encoding.
     * 
     * Primary encoding used by Python.
     * 
     * @return the codePoint value.
     */
    @Generated
    public int getCodePoint() {
        return this.codePoint;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("utf8", this.utf8);
        jsonWriter.writeIntField("utf16", this.utf16);
        jsonWriter.writeIntField("codePoint", this.codePoint);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StringIndex from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StringIndex if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StringIndex.
     */
    @Generated
    public static StringIndex fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int utf8 = 0;
            int utf16 = 0;
            int codePoint = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("utf8".equals(fieldName)) {
                    utf8 = reader.getInt();
                } else if ("utf16".equals(fieldName)) {
                    utf16 = reader.getInt();
                } else if ("codePoint".equals(fieldName)) {
                    codePoint = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return new StringIndex(utf8, utf16, codePoint);
        });
    }
}
