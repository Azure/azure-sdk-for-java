// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.deidentification.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Request body for de-identification operation.
 */
@Fluent
public final class DeidentificationContent implements JsonSerializable<DeidentificationContent> {

    /*
     * Input text to de-identify.
     */
    @Generated
    private final String inputText;

    /*
     * Customization parameters to override default service behaviors.
     */
    @Generated
    private DeidentificationCustomizationOptions customizations;

    /**
     * Creates an instance of DeidentificationContent class.
     *
     * @param inputText the inputText value to set.
     */
    @Generated
    public DeidentificationContent(String inputText) {
        this.inputText = inputText;
    }

    /**
     * Get the inputText property: Input text to de-identify.
     *
     * @return the inputText value.
     */
    @Generated
    public String getInputText() {
        return this.inputText;
    }

    /**
     * Get the customizations property: Customization parameters to override default service behaviors.
     *
     * @return the customizations value.
     */
    @Generated
    public DeidentificationCustomizationOptions getCustomizations() {
        return this.customizations;
    }

    /**
     * Set the customizations property: Customization parameters to override default service behaviors.
     *
     * @param customizations the customizations value to set.
     * @return the DeidentificationContent object itself.
     */
    @Generated
    public DeidentificationContent setCustomizations(DeidentificationCustomizationOptions customizations) {
        this.customizations = customizations;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("inputText", this.inputText);
        jsonWriter.writeStringField("operation", this.operationType == null ? null : this.operationType.toString());
        jsonWriter.writeJsonField("customizations", this.customizations);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeidentificationContent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeidentificationContent if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeidentificationContent.
     */
    @Generated
    public static DeidentificationContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String inputText = null;
            DeidentificationOperationType operationType = null;
            DeidentificationCustomizationOptions customizations = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("inputText".equals(fieldName)) {
                    inputText = reader.getString();
                } else if ("operation".equals(fieldName)) {
                    operationType = DeidentificationOperationType.fromString(reader.getString());
                } else if ("customizations".equals(fieldName)) {
                    customizations = DeidentificationCustomizationOptions.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            DeidentificationContent deserializedDeidentificationContent = new DeidentificationContent(inputText);
            deserializedDeidentificationContent.operationType = operationType;
            deserializedDeidentificationContent.customizations = customizations;
            return deserializedDeidentificationContent;
        });
    }

    /*
     * Operation to perform on the input documents.
     */
    @Generated
    private DeidentificationOperationType operationType;

    /**
     * Get the operationType property: Operation to perform on the input documents.
     *
     * @return the operationType value.
     */
    @Generated
    public DeidentificationOperationType getOperationType() {
        return this.operationType;
    }

    /**
     * Set the operationType property: Operation to perform on the input documents.
     *
     * @param operationType the operationType value to set.
     * @return the DeidentificationContent object itself.
     */
    @Generated
    public DeidentificationContent setOperationType(DeidentificationOperationType operationType) {
        this.operationType = operationType;
        return this;
    }
}
