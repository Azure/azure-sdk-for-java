// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.health.deidentification;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.SyncPoller;
import com.azure.health.deidentification.implementation.DeidentificationClientImpl;
import com.azure.health.deidentification.models.DeidentificationContent;
import com.azure.health.deidentification.models.DeidentificationJob;
import com.azure.health.deidentification.models.DeidentificationResult;
import com.azure.health.deidentification.models.DocumentDetails;

/**
 * Initializes a new instance of the synchronous DeidentificationClient type.
 */
@ServiceClient(builder = DeidentificationClientBuilder.class)
public final class DeidentificationClient {
    @Generated
    private final DeidentificationClientImpl serviceClient;

    /**
     * Initializes an instance of DeidentificationClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    DeidentificationClient(DeidentificationClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get a de-identification job.
     * 
     * Resource read operation template.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     sourceLocation (Required): {
     *         location: String (Required)
     *         prefix: String (Required)
     *         extensions (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     targetLocation (Required): {
     *         location: String (Required)
     *         prefix: String (Required)
     *     }
     *     operation: String(Redact/Surrogate/Tag) (Optional)
     *     dataType: String(Plaintext) (Optional)
     *     redactionFormat: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/PartialFailed/Failed/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     lastUpdatedAt: OffsetDateTime (Required)
     *     createdAt: OffsetDateTime (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     summary (Optional): {
     *         successful: int (Required)
     *         failed: int (Required)
     *         canceled: int (Required)
     *         total: int (Required)
     *         bytesProcessed: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param name The name of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a de-identification job.
     * 
     * Resource read operation template along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getJobWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.getJobWithResponse(name, requestOptions);
    }

    /**
     * Create a de-identification job.
     * 
     * Long-running resource create or replace operation template.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     sourceLocation (Required): {
     *         location: String (Required)
     *         prefix: String (Required)
     *         extensions (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     targetLocation (Required): {
     *         location: String (Required)
     *         prefix: String (Required)
     *     }
     *     operation: String(Redact/Surrogate/Tag) (Optional)
     *     dataType: String(Plaintext) (Optional)
     *     redactionFormat: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/PartialFailed/Failed/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     lastUpdatedAt: OffsetDateTime (Required)
     *     createdAt: OffsetDateTime (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     summary (Optional): {
     *         successful: int (Required)
     *         failed: int (Required)
     *         canceled: int (Required)
     *         total: int (Required)
     *         bytesProcessed: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     sourceLocation (Required): {
     *         location: String (Required)
     *         prefix: String (Required)
     *         extensions (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     targetLocation (Required): {
     *         location: String (Required)
     *         prefix: String (Required)
     *     }
     *     operation: String(Redact/Surrogate/Tag) (Optional)
     *     dataType: String(Plaintext) (Optional)
     *     redactionFormat: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/PartialFailed/Failed/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     lastUpdatedAt: OffsetDateTime (Required)
     *     createdAt: OffsetDateTime (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     summary (Optional): {
     *         successful: int (Required)
     *         failed: int (Required)
     *         canceled: int (Required)
     *         total: int (Required)
     *         bytesProcessed: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param name The name of a job.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a job containing a batch of documents to de-identify.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCreateJob(String name, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.beginCreateJob(name, resource, requestOptions);
    }

    /**
     * List de-identification jobs.
     * 
     * Resource list operation template.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>continuationToken</td><td>String</td><td>No</td><td>Token to continue a previous query.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     sourceLocation (Required): {
     *         location: String (Required)
     *         prefix: String (Required)
     *         extensions (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     targetLocation (Required): {
     *         location: String (Required)
     *         prefix: String (Required)
     *     }
     *     operation: String(Redact/Surrogate/Tag) (Optional)
     *     dataType: String(Plaintext) (Optional)
     *     redactionFormat: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/PartialFailed/Failed/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     lastUpdatedAt: OffsetDateTime (Required)
     *     createdAt: OffsetDateTime (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     summary (Optional): {
     *         successful: int (Required)
     *         failed: int (Required)
     *         canceled: int (Required)
     *         total: int (Required)
     *         bytesProcessed: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DeidentificationJob items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listJobs(RequestOptions requestOptions) {
        return this.serviceClient.listJobs(requestOptions);
    }

    /**
     * List processed documents within a job.
     * 
     * Resource list operation template.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maximum number of result items per page.</td></tr>
     * <tr><td>continuationToken</td><td>String</td><td>No</td><td>Token to continue a previous query.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     input (Required): {
     *         path: String (Required)
     *         etag: String (Required)
     *     }
     *     output (Optional): (recursive schema, see output above)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param name The name of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DocumentDetails items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listJobDocuments(String name, RequestOptions requestOptions) {
        return this.serviceClient.listJobDocuments(name, requestOptions);
    }

    /**
     * Cancel a de-identification job.
     * 
     * Cancels a job that is in progress.
     * 
     * The job will be marked as canceled and the service will stop processing the job. The service will not delete any
     * documents that have already been processed.
     * 
     * If the job is already complete, this will have no effect.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     name: String (Required)
     *     sourceLocation (Required): {
     *         location: String (Required)
     *         prefix: String (Required)
     *         extensions (Optional): [
     *             String (Optional)
     *         ]
     *     }
     *     targetLocation (Required): {
     *         location: String (Required)
     *         prefix: String (Required)
     *     }
     *     operation: String(Redact/Surrogate/Tag) (Optional)
     *     dataType: String(Plaintext) (Optional)
     *     redactionFormat: String (Optional)
     *     status: String(NotStarted/Running/Succeeded/PartialFailed/Failed/Canceled) (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     lastUpdatedAt: OffsetDateTime (Required)
     *     createdAt: OffsetDateTime (Required)
     *     startedAt: OffsetDateTime (Optional)
     *     summary (Optional): {
     *         successful: int (Required)
     *         failed: int (Required)
     *         canceled: int (Required)
     *         total: int (Required)
     *         bytesProcessed: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param name The name of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a job containing a batch of documents to de-identify along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cancelJobWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.cancelJobWithResponse(name, requestOptions);
    }

    /**
     * Delete a de-identification job.
     * 
     * Removes the record of the job from the service. Does not delete any documents.
     * 
     * @param name The name of a job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteJobWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.deleteJobWithResponse(name, requestOptions);
    }

    /**
     * De-identify text.
     * 
     * A remote procedure call (RPC) operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     inputText: String (Required)
     *     operation: String(Redact/Surrogate/Tag) (Optional)
     *     dataType: String(Plaintext) (Optional)
     *     redactionFormat: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     outputText: String (Optional)
     *     taggerResult (Optional): {
     *         entities (Required): [
     *              (Required){
     *                 category: String(Unknown/Account/Age/BioID/City/CountryOrRegion/Date/Device/Doctor/Email/Fax/HealthPlan/Hospital/IDNum/IPAddress/License/LocationOther/MedicalRecord/Organization/Patient/Phone/Profession/SocialSecurity/State/Street/Url/Username/Vehicle/Zip) (Required)
     *                 offset (Required): {
     *                     utf8: int (Required)
     *                     utf16: int (Required)
     *                     codePoint: int (Required)
     *                 }
     *                 length (Required): (recursive schema, see length above)
     *                 text: String (Optional)
     *                 confidenceScore: Double (Optional)
     *             }
     *         ]
     *         path: String (Optional)
     *         etag: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param body Request body for de-identification operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body for de-identification operation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deidentifyWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.deidentifyWithResponse(body, requestOptions);
    }

    /**
     * Get a de-identification job.
     * 
     * Resource read operation template.
     * 
     * @param name The name of a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a de-identification job.
     * 
     * Resource read operation template.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeidentificationJob getJob(String name) {
        // Generated convenience method for getJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getJobWithResponse(name, requestOptions).getValue().toObject(DeidentificationJob.class);
    }

    /**
     * Create a de-identification job.
     * 
     * Long-running resource create or replace operation template.
     * 
     * @param name The name of a job.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a job containing a batch of documents to de-identify.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<DeidentificationJob, DeidentificationJob> beginCreateJob(String name,
        DeidentificationJob resource) {
        // Generated convenience method for beginCreateJobWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreateJobWithModel(name, BinaryData.fromObject(resource), requestOptions);
    }

    /**
     * List de-identification jobs.
     * 
     * Resource list operation template.
     * 
     * @param continuationToken Token to continue a previous query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DeidentificationJob items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeidentificationJob> listJobs(String continuationToken) {
        // Generated convenience method for listJobs
        RequestOptions requestOptions = new RequestOptions();
        if (continuationToken != null) {
            requestOptions.addQueryParam("continuationToken", continuationToken, false);
        }
        return serviceClient.listJobs(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(DeidentificationJob.class));
    }

    /**
     * List de-identification jobs.
     * 
     * Resource list operation template.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DeidentificationJob items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeidentificationJob> listJobs() {
        // Generated convenience method for listJobs
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listJobs(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(DeidentificationJob.class));
    }

    /**
     * List processed documents within a job.
     * 
     * Resource list operation template.
     * 
     * @param name The name of a job.
     * @param continuationToken Token to continue a previous query.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DocumentDetails items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DocumentDetails> listJobDocuments(String name, String continuationToken) {
        // Generated convenience method for listJobDocuments
        RequestOptions requestOptions = new RequestOptions();
        if (continuationToken != null) {
            requestOptions.addQueryParam("continuationToken", continuationToken, false);
        }
        return serviceClient.listJobDocuments(name, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(DocumentDetails.class));
    }

    /**
     * List processed documents within a job.
     * 
     * Resource list operation template.
     * 
     * @param name The name of a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DocumentDetails items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DocumentDetails> listJobDocuments(String name) {
        // Generated convenience method for listJobDocuments
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listJobDocuments(name, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(DocumentDetails.class));
    }

    /**
     * Cancel a de-identification job.
     * 
     * Cancels a job that is in progress.
     * 
     * The job will be marked as canceled and the service will stop processing the job. The service will not delete any
     * documents that have already been processed.
     * 
     * If the job is already complete, this will have no effect.
     * 
     * @param name The name of a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a job containing a batch of documents to de-identify.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeidentificationJob cancelJob(String name) {
        // Generated convenience method for cancelJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cancelJobWithResponse(name, requestOptions).getValue().toObject(DeidentificationJob.class);
    }

    /**
     * Delete a de-identification job.
     * 
     * Removes the record of the job from the service. Does not delete any documents.
     * 
     * @param name The name of a job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteJob(String name) {
        // Generated convenience method for deleteJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteJobWithResponse(name, requestOptions).getValue();
    }

    /**
     * De-identify text.
     * 
     * A remote procedure call (RPC) operation.
     * 
     * @param body Request body for de-identification operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for de-identification operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeidentificationResult deidentify(DeidentificationContent body) {
        // Generated convenience method for deidentifyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deidentifyWithResponse(BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(DeidentificationResult.class);
    }
}
