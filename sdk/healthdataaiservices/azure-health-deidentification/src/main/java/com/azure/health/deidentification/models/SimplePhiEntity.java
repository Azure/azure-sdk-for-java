// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.deidentification.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Simple PHI entity with encoding-specific offset and length values.
 */
@Fluent
public final class SimplePhiEntity implements JsonSerializable<SimplePhiEntity> {

    /*
     * PHI Category of the entity.
     */
    @Generated
    private final PhiCategory category;

    /*
     * Starting index of the location from within the input text using the group's encoding.
     */
    @Generated
    private final int offset;

    /*
     * Length of the input text using the group's encoding.
     */
    @Generated
    private final int length;

    /*
     * Text of the entity (optional).
     */
    @Generated
    private String text;

    /**
     * Creates an instance of SimplePhiEntity class.
     *
     * @param category the category value to set.
     * @param offset the offset value to set.
     * @param length the length value to set.
     */
    @Generated
    public SimplePhiEntity(PhiCategory category, int offset, int length) {
        this.category = category;
        this.offset = offset;
        this.length = length;
    }

    /**
     * Get the category property: PHI Category of the entity.
     *
     * @return the category value.
     */
    @Generated
    public PhiCategory getCategory() {
        return this.category;
    }

    /**
     * Get the offset property: Starting index of the location from within the input text using the group's encoding.
     *
     * @return the offset value.
     */
    @Generated
    public int getOffset() {
        return this.offset;
    }

    /**
     * Get the length property: Length of the input text using the group's encoding.
     *
     * @return the length value.
     */
    @Generated
    public int getLength() {
        return this.length;
    }

    /**
     * Get the text property: Text of the entity (optional).
     *
     * @return the text value.
     */
    @Generated
    public String getText() {
        return this.text;
    }

    /**
     * Set the text property: Text of the entity (optional).
     *
     * @param text the text value to set.
     * @return the SimplePhiEntity object itself.
     */
    @Generated
    public SimplePhiEntity setText(String text) {
        this.text = text;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("category", this.category == null ? null : this.category.toString());
        jsonWriter.writeIntField("offset", this.offset);
        jsonWriter.writeIntField("length", this.length);
        jsonWriter.writeStringField("text", this.text);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SimplePhiEntity from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of SimplePhiEntity if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SimplePhiEntity.
     */
    @Generated
    public static SimplePhiEntity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PhiCategory category = null;
            int offset = 0;
            int length = 0;
            String text = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("category".equals(fieldName)) {
                    category = PhiCategory.fromString(reader.getString());
                } else if ("offset".equals(fieldName)) {
                    offset = reader.getInt();
                } else if ("length".equals(fieldName)) {
                    length = reader.getInt();
                } else if ("text".equals(fieldName)) {
                    text = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            SimplePhiEntity deserializedSimplePhiEntity = new SimplePhiEntity(category, offset, length);
            deserializedSimplePhiEntity.text = text;
            return deserializedSimplePhiEntity;
        });
    }
}
