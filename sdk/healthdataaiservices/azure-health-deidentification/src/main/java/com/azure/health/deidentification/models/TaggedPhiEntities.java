// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.health.deidentification.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Grouped PHI entities with shared encoding specification.
 */
@Immutable
public final class TaggedPhiEntities implements JsonSerializable<TaggedPhiEntities> {
    /*
     * The encoding type used for all entities in this group.
     */
    @Generated
    private final TextEncodingType encoding;

    /*
     * List of PHI entities using the specified encoding.
     */
    @Generated
    private final List<SimplePhiEntity> entities;

    /**
     * Creates an instance of TaggedPhiEntities class.
     * 
     * @param encoding the encoding value to set.
     * @param entities the entities value to set.
     */
    @Generated
    public TaggedPhiEntities(TextEncodingType encoding, List<SimplePhiEntity> entities) {
        this.encoding = encoding;
        this.entities = entities;
    }

    /**
     * Get the encoding property: The encoding type used for all entities in this group.
     * 
     * @return the encoding value.
     */
    @Generated
    public TextEncodingType getEncoding() {
        return this.encoding;
    }

    /**
     * Get the entities property: List of PHI entities using the specified encoding.
     * 
     * @return the entities value.
     */
    @Generated
    public List<SimplePhiEntity> getEntities() {
        return this.entities;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("encoding", this.encoding == null ? null : this.encoding.toString());
        jsonWriter.writeArrayField("entities", this.entities, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TaggedPhiEntities from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TaggedPhiEntities if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TaggedPhiEntities.
     */
    @Generated
    public static TaggedPhiEntities fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TextEncodingType encoding = null;
            List<SimplePhiEntity> entities = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("encoding".equals(fieldName)) {
                    encoding = TextEncodingType.fromString(reader.getString());
                } else if ("entities".equals(fieldName)) {
                    entities = reader.readArray(reader1 -> SimplePhiEntity.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new TaggedPhiEntities(encoding, entities);
        });
    }
}
