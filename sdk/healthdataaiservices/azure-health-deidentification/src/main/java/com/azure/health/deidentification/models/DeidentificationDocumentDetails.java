// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.deidentification.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.models.ResponseError;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of a single document in a job.
 */
@Immutable
public final class DeidentificationDocumentDetails implements JsonSerializable<DeidentificationDocumentDetails> {

    /*
     * Id of the document details.
     */
    @Generated
    private String id;

    /*
     * Status of the document.
     */
    @Generated
    private final OperationStatus status;

    /*
     * Error when document fails.
     */
    @Generated
    private ResponseError error;

    /**
     * Get the id property: Id of the document details.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the status property: Status of the document.
     *
     * @return the status value.
     */
    @Generated
    public OperationStatus getStatus() {
        return this.status;
    }

    /**
     * Get the error property: Error when document fails.
     *
     * @return the error value.
     */
    @Generated
    public ResponseError getError() {
        return this.error;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("input", this.inputLocation);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeJsonField("output", this.outputLocation);
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeidentificationDocumentDetails from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeidentificationDocumentDetails if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeidentificationDocumentDetails.
     */
    @Generated
    public static DeidentificationDocumentDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            DeidentificationDocumentLocation inputLocation = null;
            OperationStatus status = null;
            DeidentificationDocumentLocation outputLocation = null;
            ResponseError error = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("input".equals(fieldName)) {
                    inputLocation = DeidentificationDocumentLocation.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    status = OperationStatus.fromString(reader.getString());
                } else if ("output".equals(fieldName)) {
                    outputLocation = DeidentificationDocumentLocation.fromJson(reader);
                } else if ("error".equals(fieldName)) {
                    error = ResponseError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            DeidentificationDocumentDetails deserializedDeidentificationDocumentDetails
                = new DeidentificationDocumentDetails(inputLocation, status);
            deserializedDeidentificationDocumentDetails.id = id;
            deserializedDeidentificationDocumentDetails.outputLocation = outputLocation;
            deserializedDeidentificationDocumentDetails.error = error;
            return deserializedDeidentificationDocumentDetails;
        });
    }

    /**
     * Creates an instance of DeidentificationDocumentDetails class.
     *
     * @param inputLocation the inputLocation value to set.
     * @param status the status value to set.
     */
    @Generated
    private DeidentificationDocumentDetails(DeidentificationDocumentLocation inputLocation, OperationStatus status) {
        this.inputLocation = inputLocation;
        this.status = status;
    }

    /*
     * Location for the input.
     */
    @Generated
    private final DeidentificationDocumentLocation inputLocation;

    /*
     * Location for the output.
     */
    @Generated
    private DeidentificationDocumentLocation outputLocation;

    /**
     * Get the inputLocation property: Location for the input.
     *
     * @return the inputLocation value.
     */
    @Generated
    public DeidentificationDocumentLocation getInputLocation() {
        return this.inputLocation;
    }

    /**
     * Get the outputLocation property: Location for the output.
     *
     * @return the outputLocation value.
     */
    @Generated
    public DeidentificationDocumentLocation getOutputLocation() {
        return this.outputLocation;
    }
}
