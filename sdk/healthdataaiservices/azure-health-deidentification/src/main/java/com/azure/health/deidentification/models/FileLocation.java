// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.health.deidentification.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Location of a file.
 */
@Immutable
public final class FileLocation implements JsonSerializable<FileLocation> {
    /*
     * Absolute path to the file in storage.
     */
    @Generated
    private final String path;

    /*
     * The entity tag for this resource.
     */
    @Generated
    private String etag;

    /**
     * Creates an instance of FileLocation class.
     * 
     * @param path the path value to set.
     */
    @Generated
    private FileLocation(String path) {
        this.path = path;
    }

    /**
     * Get the path property: Absolute path to the file in storage.
     * 
     * @return the path value.
     */
    @Generated
    public String getPath() {
        return this.path;
    }

    /**
     * Get the etag property: The entity tag for this resource.
     * 
     * @return the etag value.
     */
    @Generated
    public String getEtag() {
        return this.etag;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("path", this.path);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileLocation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileLocation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FileLocation.
     */
    @Generated
    public static FileLocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String path = null;
            String etag = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("path".equals(fieldName)) {
                    path = reader.getString();
                } else if ("etag".equals(fieldName)) {
                    etag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            FileLocation deserializedFileLocation = new FileLocation(path);
            deserializedFileLocation.etag = etag;

            return deserializedFileLocation;
        });
    }
}
