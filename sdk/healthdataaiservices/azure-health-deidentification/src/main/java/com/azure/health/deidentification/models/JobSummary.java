// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.health.deidentification.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Summary metrics of a job.
 */
@Immutable
public final class JobSummary implements JsonSerializable<JobSummary> {
    /*
     * Number of documents that have completed.
     */
    @Generated
    private final int successful;

    /*
     * Number of documents that have failed.
     */
    @Generated
    private final int failed;

    /*
     * Number of documents that have been canceled.
     */
    @Generated
    private final int canceled;

    /*
     * Number of documents total.
     */
    @Generated
    private final int total;

    /*
     * Number of bytes processed.
     */
    @Generated
    private final long bytesProcessed;

    /**
     * Creates an instance of JobSummary class.
     * 
     * @param successful the successful value to set.
     * @param failed the failed value to set.
     * @param canceled the canceled value to set.
     * @param total the total value to set.
     * @param bytesProcessed the bytesProcessed value to set.
     */
    @Generated
    private JobSummary(int successful, int failed, int canceled, int total, long bytesProcessed) {
        this.successful = successful;
        this.failed = failed;
        this.canceled = canceled;
        this.total = total;
        this.bytesProcessed = bytesProcessed;
    }

    /**
     * Get the successful property: Number of documents that have completed.
     * 
     * @return the successful value.
     */
    @Generated
    public int getSuccessful() {
        return this.successful;
    }

    /**
     * Get the failed property: Number of documents that have failed.
     * 
     * @return the failed value.
     */
    @Generated
    public int getFailed() {
        return this.failed;
    }

    /**
     * Get the canceled property: Number of documents that have been canceled.
     * 
     * @return the canceled value.
     */
    @Generated
    public int getCanceled() {
        return this.canceled;
    }

    /**
     * Get the total property: Number of documents total.
     * 
     * @return the total value.
     */
    @Generated
    public int getTotal() {
        return this.total;
    }

    /**
     * Get the bytesProcessed property: Number of bytes processed.
     * 
     * @return the bytesProcessed value.
     */
    @Generated
    public long getBytesProcessed() {
        return this.bytesProcessed;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("successful", this.successful);
        jsonWriter.writeIntField("failed", this.failed);
        jsonWriter.writeIntField("canceled", this.canceled);
        jsonWriter.writeIntField("total", this.total);
        jsonWriter.writeLongField("bytesProcessed", this.bytesProcessed);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobSummary if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JobSummary.
     */
    @Generated
    public static JobSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int successful = 0;
            int failed = 0;
            int canceled = 0;
            int total = 0;
            long bytesProcessed = 0L;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("successful".equals(fieldName)) {
                    successful = reader.getInt();
                } else if ("failed".equals(fieldName)) {
                    failed = reader.getInt();
                } else if ("canceled".equals(fieldName)) {
                    canceled = reader.getInt();
                } else if ("total".equals(fieldName)) {
                    total = reader.getInt();
                } else if ("bytesProcessed".equals(fieldName)) {
                    bytesProcessed = reader.getLong();
                } else {
                    reader.skipChildren();
                }
            }
            return new JobSummary(successful, failed, canceled, total, bytesProcessed);
        });
    }
}
