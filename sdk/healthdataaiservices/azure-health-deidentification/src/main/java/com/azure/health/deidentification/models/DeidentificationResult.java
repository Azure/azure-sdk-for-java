// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.health.deidentification.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response body for de-identification operation.
 */
@Immutable
public final class DeidentificationResult implements JsonSerializable<DeidentificationResult> {
    /*
     * Output text after de-identification. Not available for "Tag" operation.
     */
    @Generated
    private String outputText;

    /*
     * Result of the "Tag" operation. Only available for "Tag" Operation.
     */
    @Generated
    private PhiTaggerResult taggerResult;

    /**
     * Creates an instance of DeidentificationResult class.
     */
    @Generated
    private DeidentificationResult() {
    }

    /**
     * Get the outputText property: Output text after de-identification. Not available for "Tag" operation.
     * 
     * @return the outputText value.
     */
    @Generated
    public String getOutputText() {
        return this.outputText;
    }

    /**
     * Get the taggerResult property: Result of the "Tag" operation. Only available for "Tag" Operation.
     * 
     * @return the taggerResult value.
     */
    @Generated
    public PhiTaggerResult getTaggerResult() {
        return this.taggerResult;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("outputText", this.outputText);
        jsonWriter.writeJsonField("taggerResult", this.taggerResult);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeidentificationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeidentificationResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeidentificationResult.
     */
    @Generated
    public static DeidentificationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeidentificationResult deserializedDeidentificationResult = new DeidentificationResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("outputText".equals(fieldName)) {
                    deserializedDeidentificationResult.outputText = reader.getString();
                } else if ("taggerResult".equals(fieldName)) {
                    deserializedDeidentificationResult.taggerResult = PhiTaggerResult.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeidentificationResult;
        });
    }
}
