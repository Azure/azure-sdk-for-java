// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.deidentification.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Storage location.
 */
@Fluent
public final class TargetStorageLocation implements JsonSerializable<TargetStorageLocation> {

    /*
     * URL to storage location.
     */
    @Generated
    private final String location;

    /*
     * Replaces the input prefix of a file path with the output prefix, preserving the rest of the path structure.
     * 
     * Example:
     * File full path: documents/user/note.txt
     * Input Prefix: "documents/user/"
     * Output Prefix: "output_docs/"
     * 
     * Output file: "output_docs/note.txt"
     */
    @Generated
    private final String prefix;

    /*
     * When set to true during a job, the service will overwrite the output location if it already exists.
     */
    @Generated
    private Boolean overwrite;

    /**
     * Creates an instance of TargetStorageLocation class.
     *
     * @param location the location value to set.
     * @param prefix the prefix value to set.
     */
    @Generated
    public TargetStorageLocation(String location, String prefix) {
        this.location = location;
        this.prefix = prefix;
    }

    /**
     * Get the location property: URL to storage location.
     *
     * @return the location value.
     */
    @Generated
    public String getLocation() {
        return this.location;
    }

    /**
     * Get the prefix property: Replaces the input prefix of a file path with the output prefix, preserving the rest of
     * the path structure.
     *
     * Example:
     * File full path: documents/user/note.txt
     * Input Prefix: "documents/user/"
     * Output Prefix: "output_docs/"
     *
     * Output file: "output_docs/note.txt".
     *
     * @return the prefix value.
     */
    @Generated
    public String getPrefix() {
        return this.prefix;
    }

    /**
     * Get the overwrite property: When set to true during a job, the service will overwrite the output location if it
     * already exists.
     *
     * @return the overwrite value.
     */
    @Generated
    public Boolean isOverwrite() {
        return this.overwrite;
    }

    /**
     * Set the overwrite property: When set to true during a job, the service will overwrite the output location if it
     * already exists.
     *
     * @param overwrite the overwrite value to set.
     * @return the TargetStorageLocation object itself.
     */
    @Generated
    public TargetStorageLocation setOverwrite(Boolean overwrite) {
        this.overwrite = overwrite;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeStringField("prefix", this.prefix);
        jsonWriter.writeBooleanField("overwrite", this.overwrite);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TargetStorageLocation from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TargetStorageLocation if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TargetStorageLocation.
     */
    @Generated
    public static TargetStorageLocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String location = null;
            String prefix = null;
            Boolean overwrite = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("location".equals(fieldName)) {
                    location = reader.getString();
                } else if ("prefix".equals(fieldName)) {
                    prefix = reader.getString();
                } else if ("overwrite".equals(fieldName)) {
                    overwrite = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            TargetStorageLocation deserializedTargetStorageLocation = new TargetStorageLocation(location, prefix);
            deserializedTargetStorageLocation.overwrite = overwrite;
            return deserializedTargetStorageLocation;
        });
    }
}
