// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.health.deidentification;

import com.azure.core.util.Configuration;
import com.azure.health.deidentification.models.DeidentificationJob;
import com.azure.health.deidentification.models.DeidentificationOperationType;
import com.azure.health.deidentification.models.SourceStorageLocation;
import com.azure.health.deidentification.models.TargetStorageLocation;
import com.azure.identity.DefaultAzureCredentialBuilder;
import reactor.core.publisher.Mono;

import java.time.Instant;

public class BeginDeidentifyDocumentsAsync {
    public static void main(String[] args) {
        DeidentificationAsyncClient deidentificationClient = new DeidentificationClientBuilder()
            .endpoint(Configuration.getGlobalConfiguration().get("DEID_SERVICE_ENDPOINT", "endpoint"))
            .credential(new DefaultAzureCredentialBuilder().build())
            .buildAsyncClient();

        // BEGIN:com.azure.health.deidentification.samples.begin_deidentify_documents_async
        String storageLocation = "https://" + Configuration.getGlobalConfiguration().get("STORAGE_ACCOUNT_NAME") + ".blob.core.windows.net/" + Configuration.getGlobalConfiguration().get("STORAGE_CONTAINER_NAME");
        DeidentificationJob job = new DeidentificationJob(
            new SourceStorageLocation(storageLocation, "data/example_patient_1"),
            new TargetStorageLocation(storageLocation, "_output")
                .setOverwrite(true)
        );

        job.setOperation(DeidentificationOperationType.REDACT);

        String jobName = Configuration.getGlobalConfiguration().get("DEID_JOB_NAME", "MyJob-" + Instant.now().toEpochMilli());
        Mono<DeidentificationJob> jobMono = deidentificationClient.beginDeidentifyDocuments(jobName, job)
            .last()
            .flatMap(pollResponse -> {
                if (pollResponse.getStatus().isComplete()) {
                    System.out.println("Polling completed successfully");
                    return pollResponse.getFinalResult();
                } else {
                    return Mono.error(new RuntimeException("Polling completed unsuccessfully with status:"
                        + pollResponse.getStatus()));
                }
            });

        jobMono.subscribe(
            jobResult -> System.out.println(jobResult.getName() + " - " + jobResult.getStatus()),
            error -> System.err.println("Error: " + error)
        );
        // END:com.azure.health.deidentification.samples.begin_deidentify_documents_async
    }
}
