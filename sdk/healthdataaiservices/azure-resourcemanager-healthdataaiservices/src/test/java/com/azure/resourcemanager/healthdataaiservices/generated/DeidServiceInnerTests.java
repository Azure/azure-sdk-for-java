// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.healthdataaiservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.healthdataaiservices.fluent.models.DeidServiceInner;
import com.azure.resourcemanager.healthdataaiservices.models.DeidServiceProperties;
import com.azure.resourcemanager.healthdataaiservices.models.ManagedServiceIdentity;
import com.azure.resourcemanager.healthdataaiservices.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.healthdataaiservices.models.PublicNetworkAccess;
import com.azure.resourcemanager.healthdataaiservices.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DeidServiceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DeidServiceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"serviceUrl\":\"pzvgnwzsymglzufc\",\"privateEndpointConnections\":[{\"properties\":{\"groupIds\":[\"bihanuf\",\"fcbjysagithxqha\",\"ifpikxwczby\",\"cnpqxuhivyqniwby\"],\"privateEndpoint\":{\"id\":\"xvd\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"rtfw\",\"actionsRequired\":\"k\"},\"provisioningState\":\"Deleting\"},\"id\":\"dcc\",\"name\":\"nhsjcnyej\",\"type\":\"kryhtnapczwlokj\"},{\"properties\":{\"groupIds\":[\"kvnipjoxz\",\"nchgej\",\"podmailzydehojwy\"],\"privateEndpoint\":{\"id\":\"xinpmqnjaq\"},\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"sprozvcput\",\"actionsRequired\":\"jvwmfda\"},\"provisioningState\":\"Succeeded\"},\"id\":\"dvpjhulsuuvmk\",\"name\":\"ozkrwfndiodjpslw\",\"type\":\"jdpvwryo\"}],\"publicNetworkAccess\":\"Disabled\"},\"identity\":{\"principalId\":\"cctazakljlahbc\",\"tenantId\":\"ffdfdosygexpa\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"qtrgqjbpfzfsinzg\":{\"principalId\":\"msbzjhcrz\",\"clientId\":\"dphlxaolt\"},\"ofpdvh\":{\"principalId\":\"cjrwzoxxjtfellu\",\"clientId\":\"zitonpeqfpjkjl\"}}},\"location\":\"xxypininmay\",\"tags\":{\"oginuvamiheognar\":\"bbkpodep\"},\"id\":\"zxtheotusivyevcc\",\"name\":\"qi\",\"type\":\"nhungbw\"}")
            .toObject(DeidServiceInner.class);
        Assertions.assertEquals("xxypininmay", model.location());
        Assertions.assertEquals("bbkpodep", model.tags().get("oginuvamiheognar"));
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.properties().publicNetworkAccess());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DeidServiceInner model = new DeidServiceInner().withLocation("xxypininmay")
            .withTags(mapOf("oginuvamiheognar", "bbkpodep"))
            .withProperties(new DeidServiceProperties().withPublicNetworkAccess(PublicNetworkAccess.DISABLED))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(
                    mapOf("qtrgqjbpfzfsinzg", new UserAssignedIdentity(), "ofpdvh", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(DeidServiceInner.class);
        Assertions.assertEquals("xxypininmay", model.location());
        Assertions.assertEquals("bbkpodep", model.tags().get("oginuvamiheognar"));
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.properties().publicNetworkAccess());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
