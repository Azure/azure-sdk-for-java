/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datamigration.v2018_07_15_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.datamigration.v2018_07_15_preview.ApiErrorException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Projects.
 */
public class ProjectsInner {
    /** The Retrofit service to perform REST calls. */
    private ProjectsService service;
    /** The service client containing this operation class. */
    private DataMigrationServiceClientImpl client;

    /**
     * Initializes an instance of ProjectsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ProjectsInner(Retrofit retrofit, DataMigrationServiceClientImpl client) {
        this.service = retrofit.create(ProjectsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Projects to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ProjectsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datamigration.v2018_07_15_preview.Projects list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("groupName") String groupName, @Path("serviceName") String serviceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datamigration.v2018_07_15_preview.Projects createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("groupName") String groupName, @Path("serviceName") String serviceName, @Path("projectName") String projectName, @Body ProjectInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datamigration.v2018_07_15_preview.Projects get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("groupName") String groupName, @Path("serviceName") String serviceName, @Path("projectName") String projectName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datamigration.v2018_07_15_preview.Projects delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("groupName") String groupName, @Path("serviceName") String serviceName, @Path("projectName") String projectName, @Query("deleteRunningTasks") Boolean deleteRunningTasks, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datamigration.v2018_07_15_preview.Projects update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("groupName") String groupName, @Path("serviceName") String serviceName, @Path("projectName") String projectName, @Body ProjectInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datamigration.v2018_07_15_preview.Projects listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get projects in a service.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of projects owned by a service resource.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProjectInner&gt; object if successful.
     */
    public PagedList<ProjectInner> list(final String groupName, final String serviceName) {
        ServiceResponse<Page<ProjectInner>> response = listSinglePageAsync(groupName, serviceName).toBlocking().single();
        return new PagedList<ProjectInner>(response.body()) {
            @Override
            public Page<ProjectInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get projects in a service.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of projects owned by a service resource.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProjectInner>> listAsync(final String groupName, final String serviceName, final ListOperationCallback<ProjectInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(groupName, serviceName),
            new Func1<String, Observable<ServiceResponse<Page<ProjectInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProjectInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get projects in a service.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of projects owned by a service resource.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProjectInner&gt; object
     */
    public Observable<Page<ProjectInner>> listAsync(final String groupName, final String serviceName) {
        return listWithServiceResponseAsync(groupName, serviceName)
            .map(new Func1<ServiceResponse<Page<ProjectInner>>, Page<ProjectInner>>() {
                @Override
                public Page<ProjectInner> call(ServiceResponse<Page<ProjectInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get projects in a service.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of projects owned by a service resource.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProjectInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProjectInner>>> listWithServiceResponseAsync(final String groupName, final String serviceName) {
        return listSinglePageAsync(groupName, serviceName)
            .concatMap(new Func1<ServiceResponse<Page<ProjectInner>>, Observable<ServiceResponse<Page<ProjectInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProjectInner>>> call(ServiceResponse<Page<ProjectInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get projects in a service.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of projects owned by a service resource.
     *
    ServiceResponse<PageImpl<ProjectInner>> * @param groupName Name of the resource group
    ServiceResponse<PageImpl<ProjectInner>> * @param serviceName Name of the service
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProjectInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProjectInner>>> listSinglePageAsync(final String groupName, final String serviceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (groupName == null) {
            throw new IllegalArgumentException("Parameter groupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), groupName, serviceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProjectInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProjectInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProjectInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProjectInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProjectInner>> listDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ProjectInner>, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ProjectInner>>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Create or update project.
     * The project resource is a nested resource representing a stored migration project. The PUT method creates a new project or updates an existing one.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param parameters Information about the project
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProjectInner object if successful.
     */
    public ProjectInner createOrUpdate(String groupName, String serviceName, String projectName, ProjectInner parameters) {
        return createOrUpdateWithServiceResponseAsync(groupName, serviceName, projectName, parameters).toBlocking().single().body();
    }

    /**
     * Create or update project.
     * The project resource is a nested resource representing a stored migration project. The PUT method creates a new project or updates an existing one.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param parameters Information about the project
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProjectInner> createOrUpdateAsync(String groupName, String serviceName, String projectName, ProjectInner parameters, final ServiceCallback<ProjectInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(groupName, serviceName, projectName, parameters), serviceCallback);
    }

    /**
     * Create or update project.
     * The project resource is a nested resource representing a stored migration project. The PUT method creates a new project or updates an existing one.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param parameters Information about the project
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectInner object
     */
    public Observable<ProjectInner> createOrUpdateAsync(String groupName, String serviceName, String projectName, ProjectInner parameters) {
        return createOrUpdateWithServiceResponseAsync(groupName, serviceName, projectName, parameters).map(new Func1<ServiceResponse<ProjectInner>, ProjectInner>() {
            @Override
            public ProjectInner call(ServiceResponse<ProjectInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update project.
     * The project resource is a nested resource representing a stored migration project. The PUT method creates a new project or updates an existing one.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param parameters Information about the project
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectInner object
     */
    public Observable<ServiceResponse<ProjectInner>> createOrUpdateWithServiceResponseAsync(String groupName, String serviceName, String projectName, ProjectInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (groupName == null) {
            throw new IllegalArgumentException("Parameter groupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (projectName == null) {
            throw new IllegalArgumentException("Parameter projectName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdate(this.client.subscriptionId(), groupName, serviceName, projectName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProjectInner>>>() {
                @Override
                public Observable<ServiceResponse<ProjectInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProjectInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ProjectInner> createOrUpdateDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ProjectInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ProjectInner>() { }.getType())
                .register(201, new TypeToken<ProjectInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Get project information.
     * The project resource is a nested resource representing a stored migration project. The GET method retrieves information about a project.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProjectInner object if successful.
     */
    public ProjectInner get(String groupName, String serviceName, String projectName) {
        return getWithServiceResponseAsync(groupName, serviceName, projectName).toBlocking().single().body();
    }

    /**
     * Get project information.
     * The project resource is a nested resource representing a stored migration project. The GET method retrieves information about a project.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProjectInner> getAsync(String groupName, String serviceName, String projectName, final ServiceCallback<ProjectInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(groupName, serviceName, projectName), serviceCallback);
    }

    /**
     * Get project information.
     * The project resource is a nested resource representing a stored migration project. The GET method retrieves information about a project.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectInner object
     */
    public Observable<ProjectInner> getAsync(String groupName, String serviceName, String projectName) {
        return getWithServiceResponseAsync(groupName, serviceName, projectName).map(new Func1<ServiceResponse<ProjectInner>, ProjectInner>() {
            @Override
            public ProjectInner call(ServiceResponse<ProjectInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get project information.
     * The project resource is a nested resource representing a stored migration project. The GET method retrieves information about a project.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectInner object
     */
    public Observable<ServiceResponse<ProjectInner>> getWithServiceResponseAsync(String groupName, String serviceName, String projectName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (groupName == null) {
            throw new IllegalArgumentException("Parameter groupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (projectName == null) {
            throw new IllegalArgumentException("Parameter projectName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), groupName, serviceName, projectName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProjectInner>>>() {
                @Override
                public Observable<ServiceResponse<ProjectInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProjectInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ProjectInner> getDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ProjectInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ProjectInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Delete project.
     * The project resource is a nested resource representing a stored migration project. The DELETE method deletes a project.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String groupName, String serviceName, String projectName) {
        deleteWithServiceResponseAsync(groupName, serviceName, projectName).toBlocking().single().body();
    }

    /**
     * Delete project.
     * The project resource is a nested resource representing a stored migration project. The DELETE method deletes a project.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String groupName, String serviceName, String projectName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(groupName, serviceName, projectName), serviceCallback);
    }

    /**
     * Delete project.
     * The project resource is a nested resource representing a stored migration project. The DELETE method deletes a project.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String groupName, String serviceName, String projectName) {
        return deleteWithServiceResponseAsync(groupName, serviceName, projectName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete project.
     * The project resource is a nested resource representing a stored migration project. The DELETE method deletes a project.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String groupName, String serviceName, String projectName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (groupName == null) {
            throw new IllegalArgumentException("Parameter groupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (projectName == null) {
            throw new IllegalArgumentException("Parameter projectName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Boolean deleteRunningTasks = null;
        return service.delete(this.client.subscriptionId(), groupName, serviceName, projectName, deleteRunningTasks, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Delete project.
     * The project resource is a nested resource representing a stored migration project. The DELETE method deletes a project.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param deleteRunningTasks Delete the resource even if it contains running tasks
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String groupName, String serviceName, String projectName, Boolean deleteRunningTasks) {
        deleteWithServiceResponseAsync(groupName, serviceName, projectName, deleteRunningTasks).toBlocking().single().body();
    }

    /**
     * Delete project.
     * The project resource is a nested resource representing a stored migration project. The DELETE method deletes a project.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param deleteRunningTasks Delete the resource even if it contains running tasks
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String groupName, String serviceName, String projectName, Boolean deleteRunningTasks, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(groupName, serviceName, projectName, deleteRunningTasks), serviceCallback);
    }

    /**
     * Delete project.
     * The project resource is a nested resource representing a stored migration project. The DELETE method deletes a project.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param deleteRunningTasks Delete the resource even if it contains running tasks
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String groupName, String serviceName, String projectName, Boolean deleteRunningTasks) {
        return deleteWithServiceResponseAsync(groupName, serviceName, projectName, deleteRunningTasks).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete project.
     * The project resource is a nested resource representing a stored migration project. The DELETE method deletes a project.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param deleteRunningTasks Delete the resource even if it contains running tasks
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String groupName, String serviceName, String projectName, Boolean deleteRunningTasks) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (groupName == null) {
            throw new IllegalArgumentException("Parameter groupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (projectName == null) {
            throw new IllegalArgumentException("Parameter projectName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), groupName, serviceName, projectName, deleteRunningTasks, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Update project.
     * The project resource is a nested resource representing a stored migration project. The PATCH method updates an existing project.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param parameters Information about the project
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProjectInner object if successful.
     */
    public ProjectInner update(String groupName, String serviceName, String projectName, ProjectInner parameters) {
        return updateWithServiceResponseAsync(groupName, serviceName, projectName, parameters).toBlocking().single().body();
    }

    /**
     * Update project.
     * The project resource is a nested resource representing a stored migration project. The PATCH method updates an existing project.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param parameters Information about the project
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProjectInner> updateAsync(String groupName, String serviceName, String projectName, ProjectInner parameters, final ServiceCallback<ProjectInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(groupName, serviceName, projectName, parameters), serviceCallback);
    }

    /**
     * Update project.
     * The project resource is a nested resource representing a stored migration project. The PATCH method updates an existing project.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param parameters Information about the project
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectInner object
     */
    public Observable<ProjectInner> updateAsync(String groupName, String serviceName, String projectName, ProjectInner parameters) {
        return updateWithServiceResponseAsync(groupName, serviceName, projectName, parameters).map(new Func1<ServiceResponse<ProjectInner>, ProjectInner>() {
            @Override
            public ProjectInner call(ServiceResponse<ProjectInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update project.
     * The project resource is a nested resource representing a stored migration project. The PATCH method updates an existing project.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param parameters Information about the project
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectInner object
     */
    public Observable<ServiceResponse<ProjectInner>> updateWithServiceResponseAsync(String groupName, String serviceName, String projectName, ProjectInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (groupName == null) {
            throw new IllegalArgumentException("Parameter groupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (projectName == null) {
            throw new IllegalArgumentException("Parameter projectName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.update(this.client.subscriptionId(), groupName, serviceName, projectName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProjectInner>>>() {
                @Override
                public Observable<ServiceResponse<ProjectInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProjectInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ProjectInner> updateDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ProjectInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ProjectInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Get projects in a service.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of projects owned by a service resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProjectInner&gt; object if successful.
     */
    public PagedList<ProjectInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ProjectInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ProjectInner>(response.body()) {
            @Override
            public Page<ProjectInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get projects in a service.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of projects owned by a service resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProjectInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ProjectInner>> serviceFuture, final ListOperationCallback<ProjectInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ProjectInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProjectInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get projects in a service.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of projects owned by a service resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProjectInner&gt; object
     */
    public Observable<Page<ProjectInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ProjectInner>>, Page<ProjectInner>>() {
                @Override
                public Page<ProjectInner> call(ServiceResponse<Page<ProjectInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get projects in a service.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of projects owned by a service resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProjectInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProjectInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ProjectInner>>, Observable<ServiceResponse<Page<ProjectInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProjectInner>>> call(ServiceResponse<Page<ProjectInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get projects in a service.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of projects owned by a service resource.
     *
    ServiceResponse<PageImpl<ProjectInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProjectInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProjectInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProjectInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProjectInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProjectInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProjectInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProjectInner>> listNextDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ProjectInner>, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ProjectInner>>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

}
