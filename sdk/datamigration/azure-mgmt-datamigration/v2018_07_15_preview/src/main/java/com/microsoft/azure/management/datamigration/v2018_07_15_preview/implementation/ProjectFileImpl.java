/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datamigration.v2018_07_15_preview.implementation;

import com.microsoft.azure.management.datamigration.v2018_07_15_preview.ProjectFile;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.datamigration.v2018_07_15_preview.ProjectFileProperties;

class ProjectFileImpl extends CreatableUpdatableImpl<ProjectFile, ProjectFileInner, ProjectFileImpl> implements ProjectFile, ProjectFile.Definition, ProjectFile.Update {
    private final DataMigrationManager manager;
    private String groupName;
    private String serviceName;
    private String projectName;
    private String fileName;

    ProjectFileImpl(String name, DataMigrationManager manager) {
        super(name, new ProjectFileInner());
        this.manager = manager;
        // Set resource name
        this.fileName = name;
        //
    }

    ProjectFileImpl(ProjectFileInner inner, DataMigrationManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.fileName = inner.name();
        // set resource ancestor and positional variables
        this.groupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serviceName = IdParsingUtils.getValueFromIdByName(inner.id(), "services");
        this.projectName = IdParsingUtils.getValueFromIdByName(inner.id(), "projects");
        this.fileName = IdParsingUtils.getValueFromIdByName(inner.id(), "files");
        //
    }

    @Override
    public DataMigrationManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ProjectFile> createResourceAsync() {
        FilesInner client = this.manager().inner().files();
        return client.createOrUpdateAsync(this.groupName, this.serviceName, this.projectName, this.fileName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ProjectFile> updateResourceAsync() {
        FilesInner client = this.manager().inner().files();
        return client.updateAsync(this.groupName, this.serviceName, this.projectName, this.fileName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ProjectFileInner> getInnerAsync() {
        FilesInner client = this.manager().inner().files();
        return client.getAsync(this.groupName, this.serviceName, this.projectName, this.fileName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String etag() {
        return this.inner().etag();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public ProjectFileProperties properties() {
        return this.inner().properties();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ProjectFileImpl withExistingProject(String groupName, String serviceName, String projectName) {
        this.groupName = groupName;
        this.serviceName = serviceName;
        this.projectName = projectName;
        return this;
    }

    @Override
    public ProjectFileImpl withEtag(String etag) {
        this.inner().withEtag(etag);
        return this;
    }

    @Override
    public ProjectFileImpl withProperties(ProjectFileProperties properties) {
        this.inner().withProperties(properties);
        return this;
    }

}
