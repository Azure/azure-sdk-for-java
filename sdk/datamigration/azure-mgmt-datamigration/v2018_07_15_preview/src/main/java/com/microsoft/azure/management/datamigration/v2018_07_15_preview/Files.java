/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datamigration.v2018_07_15_preview;

import com.microsoft.azure.arm.collection.SupportsCreating;
import rx.Completable;
import rx.Observable;
import com.microsoft.azure.management.datamigration.v2018_07_15_preview.implementation.FilesInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing Files.
 */
public interface Files extends SupportsCreating<ProjectFile.DefinitionStages.Blank>, HasInner<FilesInner> {
    /**
     * Request storage information for downloading the file content.
     * This method is used for requesting storage information using which contents of the file can be downloaded.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<FileStorageInfo> readAsync(String groupName, String serviceName, String projectName, String fileName);

    /**
     * Request information for reading and writing file content.
     * This method is used for requesting information for reading and writing the file content.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<FileStorageInfo> readWriteAsync(String groupName, String serviceName, String projectName, String fileName);

    /**
     * Get file information.
     * The files resource is a nested, proxy-only resource representing a file stored under the project resource. This method retrieves information about a file.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProjectFile> getAsync(String groupName, String serviceName, String projectName, String fileName);

    /**
     * Get files in a project.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of files owned by a project resource.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProjectFile> listAsync(final String groupName, final String serviceName, final String projectName);

    /**
     * Delete file.
     * This method deletes a file.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteAsync(String groupName, String serviceName, String projectName, String fileName);

}
