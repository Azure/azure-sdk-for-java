/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datamigration.v2017_11_15_preview.implementation;

import com.microsoft.azure.management.datamigration.v2017_11_15_preview.Project;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.Map;
import com.microsoft.azure.management.datamigration.v2017_11_15_preview.ProjectSourcePlatform;
import com.microsoft.azure.management.datamigration.v2017_11_15_preview.ProjectTargetPlatform;
import org.joda.time.DateTime;
import com.microsoft.azure.management.datamigration.v2017_11_15_preview.ConnectionInfo;
import java.util.List;
import com.microsoft.azure.management.datamigration.v2017_11_15_preview.DatabaseInfo;
import com.microsoft.azure.management.datamigration.v2017_11_15_preview.ProjectProvisioningState;

class ProjectImpl extends CreatableUpdatableImpl<Project, ProjectInner, ProjectImpl> implements Project, Project.Definition, Project.Update {
    private final DataMigrationManager manager;
    private String groupName;
    private String serviceName;
    private String projectName;

    ProjectImpl(String name, DataMigrationManager manager) {
        super(name, new ProjectInner());
        this.manager = manager;
        // Set resource name
        this.projectName = name;
        //
    }

    ProjectImpl(ProjectInner inner, DataMigrationManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.projectName = inner.name();
        // set resource ancestor and positional variables
        this.groupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.serviceName = IdParsingUtils.getValueFromIdByName(inner.id(), "services");
        this.projectName = IdParsingUtils.getValueFromIdByName(inner.id(), "projects");
        //
    }

    @Override
    public DataMigrationManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Project> createResourceAsync() {
        ProjectsInner client = this.manager().inner().projects();
        return client.createOrUpdateAsync(this.groupName, this.serviceName, this.projectName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Project> updateResourceAsync() {
        ProjectsInner client = this.manager().inner().projects();
        return client.updateAsync(this.groupName, this.serviceName, this.projectName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ProjectInner> getInnerAsync() {
        ProjectsInner client = this.manager().inner().projects();
        return client.getAsync(this.groupName, this.serviceName, this.projectName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public DateTime creationTime() {
        return this.inner().creationTime();
    }

    @Override
    public List<DatabaseInfo> databasesInfo() {
        return this.inner().databasesInfo();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public ProjectProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public ConnectionInfo sourceConnectionInfo() {
        return this.inner().sourceConnectionInfo();
    }

    @Override
    public ProjectSourcePlatform sourcePlatform() {
        return this.inner().sourcePlatform();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public ConnectionInfo targetConnectionInfo() {
        return this.inner().targetConnectionInfo();
    }

    @Override
    public ProjectTargetPlatform targetPlatform() {
        return this.inner().targetPlatform();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ProjectImpl withExistingService(String groupName, String serviceName) {
        this.groupName = groupName;
        this.serviceName = serviceName;
        return this;
    }

    @Override
    public ProjectImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public ProjectImpl withSourcePlatform(ProjectSourcePlatform sourcePlatform) {
        this.inner().withSourcePlatform(sourcePlatform);
        return this;
    }

    @Override
    public ProjectImpl withTargetPlatform(ProjectTargetPlatform targetPlatform) {
        this.inner().withTargetPlatform(targetPlatform);
        return this;
    }

    @Override
    public ProjectImpl withDatabasesInfo(List<DatabaseInfo> databasesInfo) {
        this.inner().withDatabasesInfo(databasesInfo);
        return this;
    }

    @Override
    public ProjectImpl withSourceConnectionInfo(ConnectionInfo sourceConnectionInfo) {
        this.inner().withSourceConnectionInfo(sourceConnectionInfo);
        return this;
    }

    @Override
    public ProjectImpl withTags(Map<String, String> tags) {
        this.inner().withTags(tags);
        return this;
    }

    @Override
    public ProjectImpl withTargetConnectionInfo(ConnectionInfo targetConnectionInfo) {
        this.inner().withTargetConnectionInfo(targetConnectionInfo);
        return this;
    }

}
