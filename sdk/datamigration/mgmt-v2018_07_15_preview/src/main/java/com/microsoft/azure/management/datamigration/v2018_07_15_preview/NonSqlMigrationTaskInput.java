/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datamigration.v2018_07_15_preview;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Base class for non sql migration task input.
 */
public class NonSqlMigrationTaskInput {
    /**
     * Information for connecting to target.
     */
    @JsonProperty(value = "targetConnectionInfo", required = true)
    private SqlConnectionInfo targetConnectionInfo;

    /**
     * Target database name.
     */
    @JsonProperty(value = "targetDatabaseName", required = true)
    private String targetDatabaseName;

    /**
     * Name of the migration project.
     */
    @JsonProperty(value = "projectName", required = true)
    private String projectName;

    /**
     * A URL that points to the drop location to access project artifacts.
     */
    @JsonProperty(value = "projectLocation", required = true)
    private String projectLocation;

    /**
     * Metadata of the tables selected for migration.
     */
    @JsonProperty(value = "selectedTables", required = true)
    private List<NonSqlDataMigrationTable> selectedTables;

    /**
     * Get information for connecting to target.
     *
     * @return the targetConnectionInfo value
     */
    public SqlConnectionInfo targetConnectionInfo() {
        return this.targetConnectionInfo;
    }

    /**
     * Set information for connecting to target.
     *
     * @param targetConnectionInfo the targetConnectionInfo value to set
     * @return the NonSqlMigrationTaskInput object itself.
     */
    public NonSqlMigrationTaskInput withTargetConnectionInfo(SqlConnectionInfo targetConnectionInfo) {
        this.targetConnectionInfo = targetConnectionInfo;
        return this;
    }

    /**
     * Get target database name.
     *
     * @return the targetDatabaseName value
     */
    public String targetDatabaseName() {
        return this.targetDatabaseName;
    }

    /**
     * Set target database name.
     *
     * @param targetDatabaseName the targetDatabaseName value to set
     * @return the NonSqlMigrationTaskInput object itself.
     */
    public NonSqlMigrationTaskInput withTargetDatabaseName(String targetDatabaseName) {
        this.targetDatabaseName = targetDatabaseName;
        return this;
    }

    /**
     * Get name of the migration project.
     *
     * @return the projectName value
     */
    public String projectName() {
        return this.projectName;
    }

    /**
     * Set name of the migration project.
     *
     * @param projectName the projectName value to set
     * @return the NonSqlMigrationTaskInput object itself.
     */
    public NonSqlMigrationTaskInput withProjectName(String projectName) {
        this.projectName = projectName;
        return this;
    }

    /**
     * Get a URL that points to the drop location to access project artifacts.
     *
     * @return the projectLocation value
     */
    public String projectLocation() {
        return this.projectLocation;
    }

    /**
     * Set a URL that points to the drop location to access project artifacts.
     *
     * @param projectLocation the projectLocation value to set
     * @return the NonSqlMigrationTaskInput object itself.
     */
    public NonSqlMigrationTaskInput withProjectLocation(String projectLocation) {
        this.projectLocation = projectLocation;
        return this;
    }

    /**
     * Get metadata of the tables selected for migration.
     *
     * @return the selectedTables value
     */
    public List<NonSqlDataMigrationTable> selectedTables() {
        return this.selectedTables;
    }

    /**
     * Set metadata of the tables selected for migration.
     *
     * @param selectedTables the selectedTables value to set
     * @return the NonSqlMigrationTaskInput object itself.
     */
    public NonSqlMigrationTaskInput withSelectedTables(List<NonSqlDataMigrationTable> selectedTables) {
        this.selectedTables = selectedTables;
        return this;
    }

}
