/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datamigration.v2018_07_15_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.datamigration.v2018_07_15_preview.ApiErrorException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Files.
 */
public class FilesInner {
    /** The Retrofit service to perform REST calls. */
    private FilesService service;
    /** The service client containing this operation class. */
    private DataMigrationServiceClientImpl client;

    /**
     * Initializes an instance of FilesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public FilesInner(Retrofit retrofit, DataMigrationServiceClientImpl client) {
        this.service = retrofit.create(FilesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Files to be
     * used by Retrofit to perform actually REST calls.
     */
    interface FilesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datamigration.v2018_07_15_preview.Files list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/files")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("groupName") String groupName, @Path("serviceName") String serviceName, @Path("projectName") String projectName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datamigration.v2018_07_15_preview.Files get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/files/{fileName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("groupName") String groupName, @Path("serviceName") String serviceName, @Path("projectName") String projectName, @Path("fileName") String fileName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datamigration.v2018_07_15_preview.Files createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/files/{fileName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("groupName") String groupName, @Path("serviceName") String serviceName, @Path("projectName") String projectName, @Path("fileName") String fileName, @Body ProjectFileInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datamigration.v2018_07_15_preview.Files delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/files/{fileName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("groupName") String groupName, @Path("serviceName") String serviceName, @Path("projectName") String projectName, @Path("fileName") String fileName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datamigration.v2018_07_15_preview.Files update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/files/{fileName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("groupName") String groupName, @Path("serviceName") String serviceName, @Path("projectName") String projectName, @Path("fileName") String fileName, @Body ProjectFileInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datamigration.v2018_07_15_preview.Files read" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/files/{fileName}/read")
        Observable<Response<ResponseBody>> read(@Path("subscriptionId") String subscriptionId, @Path("groupName") String groupName, @Path("serviceName") String serviceName, @Path("projectName") String projectName, @Path("fileName") String fileName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datamigration.v2018_07_15_preview.Files readWrite" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/files/{fileName}/readwrite")
        Observable<Response<ResponseBody>> readWrite(@Path("subscriptionId") String subscriptionId, @Path("groupName") String groupName, @Path("serviceName") String serviceName, @Path("projectName") String projectName, @Path("fileName") String fileName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.datamigration.v2018_07_15_preview.Files listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get files in a project.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of files owned by a project resource.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProjectFileInner&gt; object if successful.
     */
    public PagedList<ProjectFileInner> list(final String groupName, final String serviceName, final String projectName) {
        ServiceResponse<Page<ProjectFileInner>> response = listSinglePageAsync(groupName, serviceName, projectName).toBlocking().single();
        return new PagedList<ProjectFileInner>(response.body()) {
            @Override
            public Page<ProjectFileInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get files in a project.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of files owned by a project resource.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProjectFileInner>> listAsync(final String groupName, final String serviceName, final String projectName, final ListOperationCallback<ProjectFileInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(groupName, serviceName, projectName),
            new Func1<String, Observable<ServiceResponse<Page<ProjectFileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProjectFileInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get files in a project.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of files owned by a project resource.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProjectFileInner&gt; object
     */
    public Observable<Page<ProjectFileInner>> listAsync(final String groupName, final String serviceName, final String projectName) {
        return listWithServiceResponseAsync(groupName, serviceName, projectName)
            .map(new Func1<ServiceResponse<Page<ProjectFileInner>>, Page<ProjectFileInner>>() {
                @Override
                public Page<ProjectFileInner> call(ServiceResponse<Page<ProjectFileInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get files in a project.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of files owned by a project resource.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProjectFileInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProjectFileInner>>> listWithServiceResponseAsync(final String groupName, final String serviceName, final String projectName) {
        return listSinglePageAsync(groupName, serviceName, projectName)
            .concatMap(new Func1<ServiceResponse<Page<ProjectFileInner>>, Observable<ServiceResponse<Page<ProjectFileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProjectFileInner>>> call(ServiceResponse<Page<ProjectFileInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get files in a project.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of files owned by a project resource.
     *
    ServiceResponse<PageImpl<ProjectFileInner>> * @param groupName Name of the resource group
    ServiceResponse<PageImpl<ProjectFileInner>> * @param serviceName Name of the service
    ServiceResponse<PageImpl<ProjectFileInner>> * @param projectName Name of the project
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProjectFileInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProjectFileInner>>> listSinglePageAsync(final String groupName, final String serviceName, final String projectName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (groupName == null) {
            throw new IllegalArgumentException("Parameter groupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (projectName == null) {
            throw new IllegalArgumentException("Parameter projectName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), groupName, serviceName, projectName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProjectFileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProjectFileInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProjectFileInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProjectFileInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProjectFileInner>> listDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ProjectFileInner>, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ProjectFileInner>>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Get file information.
     * The files resource is a nested, proxy-only resource representing a file stored under the project resource. This method retrieves information about a file.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProjectFileInner object if successful.
     */
    public ProjectFileInner get(String groupName, String serviceName, String projectName, String fileName) {
        return getWithServiceResponseAsync(groupName, serviceName, projectName, fileName).toBlocking().single().body();
    }

    /**
     * Get file information.
     * The files resource is a nested, proxy-only resource representing a file stored under the project resource. This method retrieves information about a file.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProjectFileInner> getAsync(String groupName, String serviceName, String projectName, String fileName, final ServiceCallback<ProjectFileInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(groupName, serviceName, projectName, fileName), serviceCallback);
    }

    /**
     * Get file information.
     * The files resource is a nested, proxy-only resource representing a file stored under the project resource. This method retrieves information about a file.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectFileInner object
     */
    public Observable<ProjectFileInner> getAsync(String groupName, String serviceName, String projectName, String fileName) {
        return getWithServiceResponseAsync(groupName, serviceName, projectName, fileName).map(new Func1<ServiceResponse<ProjectFileInner>, ProjectFileInner>() {
            @Override
            public ProjectFileInner call(ServiceResponse<ProjectFileInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get file information.
     * The files resource is a nested, proxy-only resource representing a file stored under the project resource. This method retrieves information about a file.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectFileInner object
     */
    public Observable<ServiceResponse<ProjectFileInner>> getWithServiceResponseAsync(String groupName, String serviceName, String projectName, String fileName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (groupName == null) {
            throw new IllegalArgumentException("Parameter groupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (projectName == null) {
            throw new IllegalArgumentException("Parameter projectName is required and cannot be null.");
        }
        if (fileName == null) {
            throw new IllegalArgumentException("Parameter fileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), groupName, serviceName, projectName, fileName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProjectFileInner>>>() {
                @Override
                public Observable<ServiceResponse<ProjectFileInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProjectFileInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ProjectFileInner> getDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ProjectFileInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ProjectFileInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Create a file resource.
     * The PUT method creates a new file or updates an existing one.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param parameters Information about the file
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProjectFileInner object if successful.
     */
    public ProjectFileInner createOrUpdate(String groupName, String serviceName, String projectName, String fileName, ProjectFileInner parameters) {
        return createOrUpdateWithServiceResponseAsync(groupName, serviceName, projectName, fileName, parameters).toBlocking().single().body();
    }

    /**
     * Create a file resource.
     * The PUT method creates a new file or updates an existing one.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param parameters Information about the file
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProjectFileInner> createOrUpdateAsync(String groupName, String serviceName, String projectName, String fileName, ProjectFileInner parameters, final ServiceCallback<ProjectFileInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(groupName, serviceName, projectName, fileName, parameters), serviceCallback);
    }

    /**
     * Create a file resource.
     * The PUT method creates a new file or updates an existing one.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param parameters Information about the file
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectFileInner object
     */
    public Observable<ProjectFileInner> createOrUpdateAsync(String groupName, String serviceName, String projectName, String fileName, ProjectFileInner parameters) {
        return createOrUpdateWithServiceResponseAsync(groupName, serviceName, projectName, fileName, parameters).map(new Func1<ServiceResponse<ProjectFileInner>, ProjectFileInner>() {
            @Override
            public ProjectFileInner call(ServiceResponse<ProjectFileInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a file resource.
     * The PUT method creates a new file or updates an existing one.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param parameters Information about the file
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectFileInner object
     */
    public Observable<ServiceResponse<ProjectFileInner>> createOrUpdateWithServiceResponseAsync(String groupName, String serviceName, String projectName, String fileName, ProjectFileInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (groupName == null) {
            throw new IllegalArgumentException("Parameter groupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (projectName == null) {
            throw new IllegalArgumentException("Parameter projectName is required and cannot be null.");
        }
        if (fileName == null) {
            throw new IllegalArgumentException("Parameter fileName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdate(this.client.subscriptionId(), groupName, serviceName, projectName, fileName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProjectFileInner>>>() {
                @Override
                public Observable<ServiceResponse<ProjectFileInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProjectFileInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ProjectFileInner> createOrUpdateDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ProjectFileInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ProjectFileInner>() { }.getType())
                .register(201, new TypeToken<ProjectFileInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Delete file.
     * This method deletes a file.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String groupName, String serviceName, String projectName, String fileName) {
        deleteWithServiceResponseAsync(groupName, serviceName, projectName, fileName).toBlocking().single().body();
    }

    /**
     * Delete file.
     * This method deletes a file.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String groupName, String serviceName, String projectName, String fileName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(groupName, serviceName, projectName, fileName), serviceCallback);
    }

    /**
     * Delete file.
     * This method deletes a file.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String groupName, String serviceName, String projectName, String fileName) {
        return deleteWithServiceResponseAsync(groupName, serviceName, projectName, fileName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete file.
     * This method deletes a file.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String groupName, String serviceName, String projectName, String fileName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (groupName == null) {
            throw new IllegalArgumentException("Parameter groupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (projectName == null) {
            throw new IllegalArgumentException("Parameter projectName is required and cannot be null.");
        }
        if (fileName == null) {
            throw new IllegalArgumentException("Parameter fileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), groupName, serviceName, projectName, fileName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Update a file.
     * This method updates an existing file.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param parameters Information about the file
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ProjectFileInner object if successful.
     */
    public ProjectFileInner update(String groupName, String serviceName, String projectName, String fileName, ProjectFileInner parameters) {
        return updateWithServiceResponseAsync(groupName, serviceName, projectName, fileName, parameters).toBlocking().single().body();
    }

    /**
     * Update a file.
     * This method updates an existing file.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param parameters Information about the file
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ProjectFileInner> updateAsync(String groupName, String serviceName, String projectName, String fileName, ProjectFileInner parameters, final ServiceCallback<ProjectFileInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(groupName, serviceName, projectName, fileName, parameters), serviceCallback);
    }

    /**
     * Update a file.
     * This method updates an existing file.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param parameters Information about the file
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectFileInner object
     */
    public Observable<ProjectFileInner> updateAsync(String groupName, String serviceName, String projectName, String fileName, ProjectFileInner parameters) {
        return updateWithServiceResponseAsync(groupName, serviceName, projectName, fileName, parameters).map(new Func1<ServiceResponse<ProjectFileInner>, ProjectFileInner>() {
            @Override
            public ProjectFileInner call(ServiceResponse<ProjectFileInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a file.
     * This method updates an existing file.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param parameters Information about the file
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ProjectFileInner object
     */
    public Observable<ServiceResponse<ProjectFileInner>> updateWithServiceResponseAsync(String groupName, String serviceName, String projectName, String fileName, ProjectFileInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (groupName == null) {
            throw new IllegalArgumentException("Parameter groupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (projectName == null) {
            throw new IllegalArgumentException("Parameter projectName is required and cannot be null.");
        }
        if (fileName == null) {
            throw new IllegalArgumentException("Parameter fileName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.update(this.client.subscriptionId(), groupName, serviceName, projectName, fileName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ProjectFileInner>>>() {
                @Override
                public Observable<ServiceResponse<ProjectFileInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ProjectFileInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ProjectFileInner> updateDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ProjectFileInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ProjectFileInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Request storage information for downloading the file content.
     * This method is used for requesting storage information using which contents of the file can be downloaded.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FileStorageInfoInner object if successful.
     */
    public FileStorageInfoInner read(String groupName, String serviceName, String projectName, String fileName) {
        return readWithServiceResponseAsync(groupName, serviceName, projectName, fileName).toBlocking().single().body();
    }

    /**
     * Request storage information for downloading the file content.
     * This method is used for requesting storage information using which contents of the file can be downloaded.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FileStorageInfoInner> readAsync(String groupName, String serviceName, String projectName, String fileName, final ServiceCallback<FileStorageInfoInner> serviceCallback) {
        return ServiceFuture.fromResponse(readWithServiceResponseAsync(groupName, serviceName, projectName, fileName), serviceCallback);
    }

    /**
     * Request storage information for downloading the file content.
     * This method is used for requesting storage information using which contents of the file can be downloaded.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FileStorageInfoInner object
     */
    public Observable<FileStorageInfoInner> readAsync(String groupName, String serviceName, String projectName, String fileName) {
        return readWithServiceResponseAsync(groupName, serviceName, projectName, fileName).map(new Func1<ServiceResponse<FileStorageInfoInner>, FileStorageInfoInner>() {
            @Override
            public FileStorageInfoInner call(ServiceResponse<FileStorageInfoInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Request storage information for downloading the file content.
     * This method is used for requesting storage information using which contents of the file can be downloaded.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FileStorageInfoInner object
     */
    public Observable<ServiceResponse<FileStorageInfoInner>> readWithServiceResponseAsync(String groupName, String serviceName, String projectName, String fileName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (groupName == null) {
            throw new IllegalArgumentException("Parameter groupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (projectName == null) {
            throw new IllegalArgumentException("Parameter projectName is required and cannot be null.");
        }
        if (fileName == null) {
            throw new IllegalArgumentException("Parameter fileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.read(this.client.subscriptionId(), groupName, serviceName, projectName, fileName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<FileStorageInfoInner>>>() {
                @Override
                public Observable<ServiceResponse<FileStorageInfoInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<FileStorageInfoInner> clientResponse = readDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<FileStorageInfoInner> readDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<FileStorageInfoInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<FileStorageInfoInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Request information for reading and writing file content.
     * This method is used for requesting information for reading and writing the file content.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FileStorageInfoInner object if successful.
     */
    public FileStorageInfoInner readWrite(String groupName, String serviceName, String projectName, String fileName) {
        return readWriteWithServiceResponseAsync(groupName, serviceName, projectName, fileName).toBlocking().single().body();
    }

    /**
     * Request information for reading and writing file content.
     * This method is used for requesting information for reading and writing the file content.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<FileStorageInfoInner> readWriteAsync(String groupName, String serviceName, String projectName, String fileName, final ServiceCallback<FileStorageInfoInner> serviceCallback) {
        return ServiceFuture.fromResponse(readWriteWithServiceResponseAsync(groupName, serviceName, projectName, fileName), serviceCallback);
    }

    /**
     * Request information for reading and writing file content.
     * This method is used for requesting information for reading and writing the file content.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FileStorageInfoInner object
     */
    public Observable<FileStorageInfoInner> readWriteAsync(String groupName, String serviceName, String projectName, String fileName) {
        return readWriteWithServiceResponseAsync(groupName, serviceName, projectName, fileName).map(new Func1<ServiceResponse<FileStorageInfoInner>, FileStorageInfoInner>() {
            @Override
            public FileStorageInfoInner call(ServiceResponse<FileStorageInfoInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Request information for reading and writing file content.
     * This method is used for requesting information for reading and writing the file content.
     *
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FileStorageInfoInner object
     */
    public Observable<ServiceResponse<FileStorageInfoInner>> readWriteWithServiceResponseAsync(String groupName, String serviceName, String projectName, String fileName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (groupName == null) {
            throw new IllegalArgumentException("Parameter groupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (projectName == null) {
            throw new IllegalArgumentException("Parameter projectName is required and cannot be null.");
        }
        if (fileName == null) {
            throw new IllegalArgumentException("Parameter fileName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.readWrite(this.client.subscriptionId(), groupName, serviceName, projectName, fileName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<FileStorageInfoInner>>>() {
                @Override
                public Observable<ServiceResponse<FileStorageInfoInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<FileStorageInfoInner> clientResponse = readWriteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<FileStorageInfoInner> readWriteDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<FileStorageInfoInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<FileStorageInfoInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Get files in a project.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of files owned by a project resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ProjectFileInner&gt; object if successful.
     */
    public PagedList<ProjectFileInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ProjectFileInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ProjectFileInner>(response.body()) {
            @Override
            public Page<ProjectFileInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get files in a project.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of files owned by a project resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ProjectFileInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ProjectFileInner>> serviceFuture, final ListOperationCallback<ProjectFileInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ProjectFileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProjectFileInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get files in a project.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of files owned by a project resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProjectFileInner&gt; object
     */
    public Observable<Page<ProjectFileInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ProjectFileInner>>, Page<ProjectFileInner>>() {
                @Override
                public Page<ProjectFileInner> call(ServiceResponse<Page<ProjectFileInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get files in a project.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of files owned by a project resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ProjectFileInner&gt; object
     */
    public Observable<ServiceResponse<Page<ProjectFileInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ProjectFileInner>>, Observable<ServiceResponse<Page<ProjectFileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProjectFileInner>>> call(ServiceResponse<Page<ProjectFileInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get files in a project.
     * The project resource is a nested resource representing a stored migration project. This method returns a list of files owned by a project resource.
     *
    ServiceResponse<PageImpl<ProjectFileInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ProjectFileInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ProjectFileInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ProjectFileInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ProjectFileInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ProjectFileInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ProjectFileInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ProjectFileInner>> listNextDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ProjectFileInner>, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ProjectFileInner>>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

}
