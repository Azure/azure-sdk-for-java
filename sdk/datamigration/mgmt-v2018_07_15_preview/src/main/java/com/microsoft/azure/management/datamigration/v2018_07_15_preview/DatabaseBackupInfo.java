/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datamigration.v2018_07_15_preview;

import java.util.List;
import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Information about backup files when existing backup mode is used.
 */
public class DatabaseBackupInfo {
    /**
     * Database name.
     */
    @JsonProperty(value = "databaseName", access = JsonProperty.Access.WRITE_ONLY)
    private String databaseName;

    /**
     * Backup Type. Possible values include: 'Database', 'TransactionLog',
     * 'File', 'DifferentialDatabase', 'DifferentialFile', 'Partial',
     * 'DifferentialPartial'.
     */
    @JsonProperty(value = "backupType", access = JsonProperty.Access.WRITE_ONLY)
    private BackupType backupType;

    /**
     * The list of backup files for the current database.
     */
    @JsonProperty(value = "backupFiles", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> backupFiles;

    /**
     * Position of current database backup in the file.
     */
    @JsonProperty(value = "position", access = JsonProperty.Access.WRITE_ONLY)
    private Integer position;

    /**
     * Database was damaged when backed up, but the backup operation was
     * requested to continue despite errors.
     */
    @JsonProperty(value = "isDamaged", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean isDamaged;

    /**
     * Whether the backup set is compressed.
     */
    @JsonProperty(value = "isCompressed", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean isCompressed;

    /**
     * Number of files in the backup set.
     */
    @JsonProperty(value = "familyCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer familyCount;

    /**
     * Date and time when the backup operation finished.
     */
    @JsonProperty(value = "backupFinishDate", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime backupFinishDate;

    /**
     * Get database name.
     *
     * @return the databaseName value
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Get backup Type. Possible values include: 'Database', 'TransactionLog', 'File', 'DifferentialDatabase', 'DifferentialFile', 'Partial', 'DifferentialPartial'.
     *
     * @return the backupType value
     */
    public BackupType backupType() {
        return this.backupType;
    }

    /**
     * Get the list of backup files for the current database.
     *
     * @return the backupFiles value
     */
    public List<String> backupFiles() {
        return this.backupFiles;
    }

    /**
     * Get position of current database backup in the file.
     *
     * @return the position value
     */
    public Integer position() {
        return this.position;
    }

    /**
     * Get database was damaged when backed up, but the backup operation was requested to continue despite errors.
     *
     * @return the isDamaged value
     */
    public Boolean isDamaged() {
        return this.isDamaged;
    }

    /**
     * Get whether the backup set is compressed.
     *
     * @return the isCompressed value
     */
    public Boolean isCompressed() {
        return this.isCompressed;
    }

    /**
     * Get number of files in the backup set.
     *
     * @return the familyCount value
     */
    public Integer familyCount() {
        return this.familyCount;
    }

    /**
     * Get date and time when the backup operation finished.
     *
     * @return the backupFinishDate value
     */
    public DateTime backupFinishDate() {
        return this.backupFinishDate;
    }

}
