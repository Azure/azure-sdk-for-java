/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datamigration.v2018_07_15_preview;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Specifies resource limits for the migration.
 */
public class MongoDbThrottlingSettings {
    /**
     * The percentage of CPU time that the migrator will try to avoid using,
     * from 0 to 100.
     */
    @JsonProperty(value = "minFreeCpu")
    private Integer minFreeCpu;

    /**
     * The number of megabytes of RAM that the migrator will try to avoid
     * using.
     */
    @JsonProperty(value = "minFreeMemoryMb")
    private Integer minFreeMemoryMb;

    /**
     * The maximum number of work items (e.g. collection copies) that will be
     * processed in parallel.
     */
    @JsonProperty(value = "maxParallelism")
    private Integer maxParallelism;

    /**
     * Get the percentage of CPU time that the migrator will try to avoid using, from 0 to 100.
     *
     * @return the minFreeCpu value
     */
    public Integer minFreeCpu() {
        return this.minFreeCpu;
    }

    /**
     * Set the percentage of CPU time that the migrator will try to avoid using, from 0 to 100.
     *
     * @param minFreeCpu the minFreeCpu value to set
     * @return the MongoDbThrottlingSettings object itself.
     */
    public MongoDbThrottlingSettings withMinFreeCpu(Integer minFreeCpu) {
        this.minFreeCpu = minFreeCpu;
        return this;
    }

    /**
     * Get the number of megabytes of RAM that the migrator will try to avoid using.
     *
     * @return the minFreeMemoryMb value
     */
    public Integer minFreeMemoryMb() {
        return this.minFreeMemoryMb;
    }

    /**
     * Set the number of megabytes of RAM that the migrator will try to avoid using.
     *
     * @param minFreeMemoryMb the minFreeMemoryMb value to set
     * @return the MongoDbThrottlingSettings object itself.
     */
    public MongoDbThrottlingSettings withMinFreeMemoryMb(Integer minFreeMemoryMb) {
        this.minFreeMemoryMb = minFreeMemoryMb;
        return this;
    }

    /**
     * Get the maximum number of work items (e.g. collection copies) that will be processed in parallel.
     *
     * @return the maxParallelism value
     */
    public Integer maxParallelism() {
        return this.maxParallelism;
    }

    /**
     * Set the maximum number of work items (e.g. collection copies) that will be processed in parallel.
     *
     * @param maxParallelism the maxParallelism value to set
     * @return the MongoDbThrottlingSettings object itself.
     */
    public MongoDbThrottlingSettings withMaxParallelism(Integer maxParallelism) {
        this.maxParallelism = maxParallelism;
        return this;
    }

}
