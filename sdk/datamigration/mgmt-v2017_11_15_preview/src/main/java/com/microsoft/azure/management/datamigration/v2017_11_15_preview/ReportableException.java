/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datamigration.v2017_11_15_preview;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Exception object for all custom exceptions.
 */
public class ReportableException {
    /**
     * Error message.
     */
    @JsonProperty(value = "message")
    private String message;

    /**
     * The path to the file where exception occurred.
     */
    @JsonProperty(value = "filePath")
    private String filePath;

    /**
     * The line number where exception occurred.
     */
    @JsonProperty(value = "lineNumber")
    private String lineNumber;

    /**
     * Coded numerical value that is assigned to a specific exception.
     */
    @JsonProperty(value = "hResult")
    private Integer hResult;

    /**
     * Stack trace.
     */
    @JsonProperty(value = "stackTrace")
    private String stackTrace;

    /**
     * Get error message.
     *
     * @return the message value
     */
    public String message() {
        return this.message;
    }

    /**
     * Set error message.
     *
     * @param message the message value to set
     * @return the ReportableException object itself.
     */
    public ReportableException withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the path to the file where exception occurred.
     *
     * @return the filePath value
     */
    public String filePath() {
        return this.filePath;
    }

    /**
     * Set the path to the file where exception occurred.
     *
     * @param filePath the filePath value to set
     * @return the ReportableException object itself.
     */
    public ReportableException withFilePath(String filePath) {
        this.filePath = filePath;
        return this;
    }

    /**
     * Get the line number where exception occurred.
     *
     * @return the lineNumber value
     */
    public String lineNumber() {
        return this.lineNumber;
    }

    /**
     * Set the line number where exception occurred.
     *
     * @param lineNumber the lineNumber value to set
     * @return the ReportableException object itself.
     */
    public ReportableException withLineNumber(String lineNumber) {
        this.lineNumber = lineNumber;
        return this;
    }

    /**
     * Get coded numerical value that is assigned to a specific exception.
     *
     * @return the hResult value
     */
    public Integer hResult() {
        return this.hResult;
    }

    /**
     * Set coded numerical value that is assigned to a specific exception.
     *
     * @param hResult the hResult value to set
     * @return the ReportableException object itself.
     */
    public ReportableException withHResult(Integer hResult) {
        this.hResult = hResult;
        return this;
    }

    /**
     * Get stack trace.
     *
     * @return the stackTrace value
     */
    public String stackTrace() {
        return this.stackTrace;
    }

    /**
     * Set stack trace.
     *
     * @param stackTrace the stackTrace value to set
     * @return the ReportableException object itself.
     */
    public ReportableException withStackTrace(String stackTrace) {
        this.stackTrace = stackTrace;
        return this;
    }

}
