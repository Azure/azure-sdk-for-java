/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datamigration.v2018_03_31_preview;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Information about a single database.
 */
public class Database {
    /**
     * Unique identifier for the database.
     */
    @JsonProperty(value = "id")
    private String id;

    /**
     * Name of the database.
     */
    @JsonProperty(value = "name")
    private String name;

    /**
     * SQL Server compatibility level of database. Possible values include:
     * 'CompatLevel80', 'CompatLevel90', 'CompatLevel100', 'CompatLevel110',
     * 'CompatLevel120', 'CompatLevel130', 'CompatLevel140'.
     */
    @JsonProperty(value = "compatibilityLevel")
    private DatabaseCompatLevel compatibilityLevel;

    /**
     * Collation name of the database.
     */
    @JsonProperty(value = "collation")
    private String collation;

    /**
     * Name of the server.
     */
    @JsonProperty(value = "serverName")
    private String serverName;

    /**
     * Fully qualified name.
     */
    @JsonProperty(value = "fqdn")
    private String fqdn;

    /**
     * Install id of the database.
     */
    @JsonProperty(value = "installId")
    private String installId;

    /**
     * Version of the server.
     */
    @JsonProperty(value = "serverVersion")
    private String serverVersion;

    /**
     * Edition of the server.
     */
    @JsonProperty(value = "serverEdition")
    private String serverEdition;

    /**
     * Product level of the server (RTM, SP, CTP).
     */
    @JsonProperty(value = "serverLevel")
    private String serverLevel;

    /**
     * Default path of the data files.
     */
    @JsonProperty(value = "serverDefaultDataPath")
    private String serverDefaultDataPath;

    /**
     * Default path of the log files.
     */
    @JsonProperty(value = "serverDefaultLogPath")
    private String serverDefaultLogPath;

    /**
     * Default path of the backup folder.
     */
    @JsonProperty(value = "serverDefaultBackupPath")
    private String serverDefaultBackupPath;

    /**
     * Number of cores on the server.
     */
    @JsonProperty(value = "serverCoreCount")
    private Integer serverCoreCount;

    /**
     * Number of cores on the server that have VISIBLE ONLINE status.
     */
    @JsonProperty(value = "serverVisibleOnlineCoreCount")
    private Integer serverVisibleOnlineCoreCount;

    /**
     * State of the database. Possible values include: 'Online', 'Restoring',
     * 'Recovering', 'RecoveryPending', 'Suspect', 'Emergency', 'Offline',
     * 'Copying', 'OfflineSecondary'.
     */
    @JsonProperty(value = "databaseState")
    private DatabaseState databaseState;

    /**
     * The unique Server Id.
     */
    @JsonProperty(value = "serverId")
    private String serverId;

    /**
     * Get unique identifier for the database.
     *
     * @return the id value
     */
    public String id() {
        return this.id;
    }

    /**
     * Set unique identifier for the database.
     *
     * @param id the id value to set
     * @return the Database object itself.
     */
    public Database withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get name of the database.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set name of the database.
     *
     * @param name the name value to set
     * @return the Database object itself.
     */
    public Database withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get sQL Server compatibility level of database. Possible values include: 'CompatLevel80', 'CompatLevel90', 'CompatLevel100', 'CompatLevel110', 'CompatLevel120', 'CompatLevel130', 'CompatLevel140'.
     *
     * @return the compatibilityLevel value
     */
    public DatabaseCompatLevel compatibilityLevel() {
        return this.compatibilityLevel;
    }

    /**
     * Set sQL Server compatibility level of database. Possible values include: 'CompatLevel80', 'CompatLevel90', 'CompatLevel100', 'CompatLevel110', 'CompatLevel120', 'CompatLevel130', 'CompatLevel140'.
     *
     * @param compatibilityLevel the compatibilityLevel value to set
     * @return the Database object itself.
     */
    public Database withCompatibilityLevel(DatabaseCompatLevel compatibilityLevel) {
        this.compatibilityLevel = compatibilityLevel;
        return this;
    }

    /**
     * Get collation name of the database.
     *
     * @return the collation value
     */
    public String collation() {
        return this.collation;
    }

    /**
     * Set collation name of the database.
     *
     * @param collation the collation value to set
     * @return the Database object itself.
     */
    public Database withCollation(String collation) {
        this.collation = collation;
        return this;
    }

    /**
     * Get name of the server.
     *
     * @return the serverName value
     */
    public String serverName() {
        return this.serverName;
    }

    /**
     * Set name of the server.
     *
     * @param serverName the serverName value to set
     * @return the Database object itself.
     */
    public Database withServerName(String serverName) {
        this.serverName = serverName;
        return this;
    }

    /**
     * Get fully qualified name.
     *
     * @return the fqdn value
     */
    public String fqdn() {
        return this.fqdn;
    }

    /**
     * Set fully qualified name.
     *
     * @param fqdn the fqdn value to set
     * @return the Database object itself.
     */
    public Database withFqdn(String fqdn) {
        this.fqdn = fqdn;
        return this;
    }

    /**
     * Get install id of the database.
     *
     * @return the installId value
     */
    public String installId() {
        return this.installId;
    }

    /**
     * Set install id of the database.
     *
     * @param installId the installId value to set
     * @return the Database object itself.
     */
    public Database withInstallId(String installId) {
        this.installId = installId;
        return this;
    }

    /**
     * Get version of the server.
     *
     * @return the serverVersion value
     */
    public String serverVersion() {
        return this.serverVersion;
    }

    /**
     * Set version of the server.
     *
     * @param serverVersion the serverVersion value to set
     * @return the Database object itself.
     */
    public Database withServerVersion(String serverVersion) {
        this.serverVersion = serverVersion;
        return this;
    }

    /**
     * Get edition of the server.
     *
     * @return the serverEdition value
     */
    public String serverEdition() {
        return this.serverEdition;
    }

    /**
     * Set edition of the server.
     *
     * @param serverEdition the serverEdition value to set
     * @return the Database object itself.
     */
    public Database withServerEdition(String serverEdition) {
        this.serverEdition = serverEdition;
        return this;
    }

    /**
     * Get product level of the server (RTM, SP, CTP).
     *
     * @return the serverLevel value
     */
    public String serverLevel() {
        return this.serverLevel;
    }

    /**
     * Set product level of the server (RTM, SP, CTP).
     *
     * @param serverLevel the serverLevel value to set
     * @return the Database object itself.
     */
    public Database withServerLevel(String serverLevel) {
        this.serverLevel = serverLevel;
        return this;
    }

    /**
     * Get default path of the data files.
     *
     * @return the serverDefaultDataPath value
     */
    public String serverDefaultDataPath() {
        return this.serverDefaultDataPath;
    }

    /**
     * Set default path of the data files.
     *
     * @param serverDefaultDataPath the serverDefaultDataPath value to set
     * @return the Database object itself.
     */
    public Database withServerDefaultDataPath(String serverDefaultDataPath) {
        this.serverDefaultDataPath = serverDefaultDataPath;
        return this;
    }

    /**
     * Get default path of the log files.
     *
     * @return the serverDefaultLogPath value
     */
    public String serverDefaultLogPath() {
        return this.serverDefaultLogPath;
    }

    /**
     * Set default path of the log files.
     *
     * @param serverDefaultLogPath the serverDefaultLogPath value to set
     * @return the Database object itself.
     */
    public Database withServerDefaultLogPath(String serverDefaultLogPath) {
        this.serverDefaultLogPath = serverDefaultLogPath;
        return this;
    }

    /**
     * Get default path of the backup folder.
     *
     * @return the serverDefaultBackupPath value
     */
    public String serverDefaultBackupPath() {
        return this.serverDefaultBackupPath;
    }

    /**
     * Set default path of the backup folder.
     *
     * @param serverDefaultBackupPath the serverDefaultBackupPath value to set
     * @return the Database object itself.
     */
    public Database withServerDefaultBackupPath(String serverDefaultBackupPath) {
        this.serverDefaultBackupPath = serverDefaultBackupPath;
        return this;
    }

    /**
     * Get number of cores on the server.
     *
     * @return the serverCoreCount value
     */
    public Integer serverCoreCount() {
        return this.serverCoreCount;
    }

    /**
     * Set number of cores on the server.
     *
     * @param serverCoreCount the serverCoreCount value to set
     * @return the Database object itself.
     */
    public Database withServerCoreCount(Integer serverCoreCount) {
        this.serverCoreCount = serverCoreCount;
        return this;
    }

    /**
     * Get number of cores on the server that have VISIBLE ONLINE status.
     *
     * @return the serverVisibleOnlineCoreCount value
     */
    public Integer serverVisibleOnlineCoreCount() {
        return this.serverVisibleOnlineCoreCount;
    }

    /**
     * Set number of cores on the server that have VISIBLE ONLINE status.
     *
     * @param serverVisibleOnlineCoreCount the serverVisibleOnlineCoreCount value to set
     * @return the Database object itself.
     */
    public Database withServerVisibleOnlineCoreCount(Integer serverVisibleOnlineCoreCount) {
        this.serverVisibleOnlineCoreCount = serverVisibleOnlineCoreCount;
        return this;
    }

    /**
     * Get state of the database. Possible values include: 'Online', 'Restoring', 'Recovering', 'RecoveryPending', 'Suspect', 'Emergency', 'Offline', 'Copying', 'OfflineSecondary'.
     *
     * @return the databaseState value
     */
    public DatabaseState databaseState() {
        return this.databaseState;
    }

    /**
     * Set state of the database. Possible values include: 'Online', 'Restoring', 'Recovering', 'RecoveryPending', 'Suspect', 'Emergency', 'Offline', 'Copying', 'OfflineSecondary'.
     *
     * @param databaseState the databaseState value to set
     * @return the Database object itself.
     */
    public Database withDatabaseState(DatabaseState databaseState) {
        this.databaseState = databaseState;
        return this;
    }

    /**
     * Get the unique Server Id.
     *
     * @return the serverId value
     */
    public String serverId() {
        return this.serverId;
    }

    /**
     * Set the unique Server Id.
     *
     * @param serverId the serverId value to set
     * @return the Database object itself.
     */
    public Database withServerId(String serverId) {
        this.serverId = serverId;
        return this;
    }

}
