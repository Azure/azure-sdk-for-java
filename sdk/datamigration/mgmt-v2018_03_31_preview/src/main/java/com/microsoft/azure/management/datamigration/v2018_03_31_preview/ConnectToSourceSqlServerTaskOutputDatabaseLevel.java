/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datamigration.v2018_03_31_preview;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Database level output for the task that validates connection to SQL Server
 * and also validates source server requirements.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "resultType", defaultImpl = ConnectToSourceSqlServerTaskOutputDatabaseLevel.class)
@JsonTypeName("DatabaseLevelOutput")
public class ConnectToSourceSqlServerTaskOutputDatabaseLevel extends ConnectToSourceSqlServerTaskOutput {
    /**
     * Database name.
     */
    @JsonProperty(value = "name", access = JsonProperty.Access.WRITE_ONLY)
    private String name;

    /**
     * Size of the file in megabytes.
     */
    @JsonProperty(value = "sizeMB", access = JsonProperty.Access.WRITE_ONLY)
    private Double sizeMB;

    /**
     * The list of database files.
     */
    @JsonProperty(value = "databaseFiles", access = JsonProperty.Access.WRITE_ONLY)
    private List<DatabaseFileInfo> databaseFiles;

    /**
     * SQL Server compatibility level of database. Possible values include:
     * 'CompatLevel80', 'CompatLevel90', 'CompatLevel100', 'CompatLevel110',
     * 'CompatLevel120', 'CompatLevel130', 'CompatLevel140'.
     */
    @JsonProperty(value = "compatibilityLevel", access = JsonProperty.Access.WRITE_ONLY)
    private DatabaseCompatLevel compatibilityLevel;

    /**
     * State of the database. Possible values include: 'Online', 'Restoring',
     * 'Recovering', 'RecoveryPending', 'Suspect', 'Emergency', 'Offline',
     * 'Copying', 'OfflineSecondary'.
     */
    @JsonProperty(value = "databaseState", access = JsonProperty.Access.WRITE_ONLY)
    private DatabaseState databaseState;

    /**
     * Get database name.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Get size of the file in megabytes.
     *
     * @return the sizeMB value
     */
    public Double sizeMB() {
        return this.sizeMB;
    }

    /**
     * Get the list of database files.
     *
     * @return the databaseFiles value
     */
    public List<DatabaseFileInfo> databaseFiles() {
        return this.databaseFiles;
    }

    /**
     * Get sQL Server compatibility level of database. Possible values include: 'CompatLevel80', 'CompatLevel90', 'CompatLevel100', 'CompatLevel110', 'CompatLevel120', 'CompatLevel130', 'CompatLevel140'.
     *
     * @return the compatibilityLevel value
     */
    public DatabaseCompatLevel compatibilityLevel() {
        return this.compatibilityLevel;
    }

    /**
     * Get state of the database. Possible values include: 'Online', 'Restoring', 'Recovering', 'RecoveryPending', 'Suspect', 'Emergency', 'Offline', 'Copying', 'OfflineSecondary'.
     *
     * @return the databaseState value
     */
    public DatabaseState databaseState() {
        return this.databaseState;
    }

}
