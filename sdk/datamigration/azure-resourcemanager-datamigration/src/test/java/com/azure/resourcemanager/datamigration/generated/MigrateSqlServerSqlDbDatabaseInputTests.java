// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datamigration.models.MigrateSqlServerSqlDbDatabaseInput;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MigrateSqlServerSqlDbDatabaseInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MigrateSqlServerSqlDbDatabaseInput model = BinaryData.fromString(
            "{\"name\":\"afolpymwamxqzrag\",\"targetDatabaseName\":\"dphtv\",\"makeSourceDbReadOnly\":false,\"tableMap\":{\"jchcsrlzknmzla\":\"vl\",\"pjhmqrhvthl\":\"rupdwvnphcnzq\"},\"schemaSetting\":\"datawdcxsmlzzhz\",\"id\":\"xetlgydlhqv\"}")
            .toObject(MigrateSqlServerSqlDbDatabaseInput.class);
        Assertions.assertEquals("afolpymwamxqzrag", model.name());
        Assertions.assertEquals("dphtv", model.targetDatabaseName());
        Assertions.assertFalse(model.makeSourceDbReadOnly());
        Assertions.assertEquals("vl", model.tableMap().get("jchcsrlzknmzla"));
        Assertions.assertEquals("xetlgydlhqv", model.id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MigrateSqlServerSqlDbDatabaseInput model = new MigrateSqlServerSqlDbDatabaseInput().withName("afolpymwamxqzrag")
            .withTargetDatabaseName("dphtv")
            .withMakeSourceDbReadOnly(false)
            .withTableMap(mapOf("jchcsrlzknmzla", "vl", "pjhmqrhvthl", "rupdwvnphcnzq"))
            .withSchemaSetting("datawdcxsmlzzhz")
            .withId("xetlgydlhqv");
        model = BinaryData.fromObject(model).toObject(MigrateSqlServerSqlDbDatabaseInput.class);
        Assertions.assertEquals("afolpymwamxqzrag", model.name());
        Assertions.assertEquals("dphtv", model.targetDatabaseName());
        Assertions.assertFalse(model.makeSourceDbReadOnly());
        Assertions.assertEquals("vl", model.tableMap().get("jchcsrlzknmzla"));
        Assertions.assertEquals("xetlgydlhqv", model.id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
