// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datamigration.models.MigrateSqlServerSqlDbSyncDatabaseInput;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MigrateSqlServerSqlDbSyncDatabaseInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MigrateSqlServerSqlDbSyncDatabaseInput model = BinaryData.fromString(
            "{\"id\":\"czytprwn\",\"name\":\"roevyt\",\"targetDatabaseName\":\"okrrrouuxv\",\"schemaName\":\"asbcrymodizrx\",\"tableMap\":{\"mkmlmvevfx\":\"bdxnaz\",\"hbzxli\":\"op\",\"tfgxqbawpcb\":\"hrdd\",\"napqo\":\"nzqcy\"},\"migrationSetting\":{\"dyb\":\"icdhz\",\"fmuvapckccr\":\"wgbdvibidmhmwffp\",\"oxoyyukp\":\"vwe\",\"shbraga\":\"aimmoiroqb\"},\"sourceSetting\":{\"opfppdbwnupgah\":\"rmfsvbpav\",\"jcaacfdmmcpugm\":\"kuma\",\"qhnlbqnbld\":\"hqepvufhbzehewh\"},\"targetSetting\":{\"orim\":\"clgsc\",\"viyfcaabeolhbhlv\":\"rsrrmoucsofldp\",\"bsxtkcudfbsfarfs\":\"mxuq\"}}")
            .toObject(MigrateSqlServerSqlDbSyncDatabaseInput.class);
        Assertions.assertEquals("czytprwn", model.id());
        Assertions.assertEquals("roevyt", model.name());
        Assertions.assertEquals("okrrrouuxv", model.targetDatabaseName());
        Assertions.assertEquals("asbcrymodizrx", model.schemaName());
        Assertions.assertEquals("bdxnaz", model.tableMap().get("mkmlmvevfx"));
        Assertions.assertEquals("icdhz", model.migrationSetting().get("dyb"));
        Assertions.assertEquals("rmfsvbpav", model.sourceSetting().get("opfppdbwnupgah"));
        Assertions.assertEquals("clgsc", model.targetSetting().get("orim"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MigrateSqlServerSqlDbSyncDatabaseInput model = new MigrateSqlServerSqlDbSyncDatabaseInput().withId("czytprwn")
            .withName("roevyt")
            .withTargetDatabaseName("okrrrouuxv")
            .withSchemaName("asbcrymodizrx")
            .withTableMap(mapOf("mkmlmvevfx", "bdxnaz", "hbzxli", "op", "tfgxqbawpcb", "hrdd", "napqo", "nzqcy"))
            .withMigrationSetting(
                mapOf("dyb", "icdhz", "fmuvapckccr", "wgbdvibidmhmwffp", "oxoyyukp", "vwe", "shbraga", "aimmoiroqb"))
            .withSourceSetting(
                mapOf("opfppdbwnupgah", "rmfsvbpav", "jcaacfdmmcpugm", "kuma", "qhnlbqnbld", "hqepvufhbzehewh"))
            .withTargetSetting(
                mapOf("orim", "clgsc", "viyfcaabeolhbhlv", "rsrrmoucsofldp", "bsxtkcudfbsfarfs", "mxuq"));
        model = BinaryData.fromObject(model).toObject(MigrateSqlServerSqlDbSyncDatabaseInput.class);
        Assertions.assertEquals("czytprwn", model.id());
        Assertions.assertEquals("roevyt", model.name());
        Assertions.assertEquals("okrrrouuxv", model.targetDatabaseName());
        Assertions.assertEquals("asbcrymodizrx", model.schemaName());
        Assertions.assertEquals("bdxnaz", model.tableMap().get("mkmlmvevfx"));
        Assertions.assertEquals("icdhz", model.migrationSetting().get("dyb"));
        Assertions.assertEquals("rmfsvbpav", model.sourceSetting().get("opfppdbwnupgah"));
        Assertions.assertEquals("clgsc", model.targetSetting().get("orim"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
