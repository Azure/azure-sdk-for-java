// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datamigration.models.MigrateSqlServerSqlDbSyncDatabaseInput;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MigrateSqlServerSqlDbSyncDatabaseInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MigrateSqlServerSqlDbSyncDatabaseInput model = BinaryData.fromString(
            "{\"id\":\"xhojuj\",\"name\":\"pelmcuvhixbjxyf\",\"targetDatabaseName\":\"yl\",\"schemaName\":\"ool\",\"tableMap\":{\"iwkkbn\":\"p\",\"rd\":\"jrywvtylbfpnc\",\"htywubxcbihwq\":\"iwii\",\"wjchrdg\":\"nfdn\"},\"migrationSetting\":{\"ctondz\":\"xum\",\"tov\":\"luudfdlwggytsb\",\"irgne\":\"tgseinqfiufxqkn\"},\"sourceSetting\":{\"ojlpijnkrxf\":\"wqmsniffcdmqn\",\"nasx\":\"ddhcratizzr\",\"zq\":\"ft\",\"tw\":\"zh\"},\"targetSetting\":{\"yhmossxkkg\":\"ogczhonnxkrlg\",\"rghxjb\":\"h\",\"rnsvbuswd\":\"hqxvcxgfrpdsofbs\",\"ybycnunvj\":\"z\"}}")
            .toObject(MigrateSqlServerSqlDbSyncDatabaseInput.class);
        Assertions.assertEquals("xhojuj", model.id());
        Assertions.assertEquals("pelmcuvhixbjxyf", model.name());
        Assertions.assertEquals("yl", model.targetDatabaseName());
        Assertions.assertEquals("ool", model.schemaName());
        Assertions.assertEquals("p", model.tableMap().get("iwkkbn"));
        Assertions.assertEquals("xum", model.migrationSetting().get("ctondz"));
        Assertions.assertEquals("wqmsniffcdmqn", model.sourceSetting().get("ojlpijnkrxf"));
        Assertions.assertEquals("ogczhonnxkrlg", model.targetSetting().get("yhmossxkkg"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MigrateSqlServerSqlDbSyncDatabaseInput model = new MigrateSqlServerSqlDbSyncDatabaseInput().withId("xhojuj")
            .withName("pelmcuvhixbjxyf")
            .withTargetDatabaseName("yl")
            .withSchemaName("ool")
            .withTableMap(mapOf("iwkkbn", "p", "rd", "jrywvtylbfpnc", "htywubxcbihwq", "iwii", "wjchrdg", "nfdn"))
            .withMigrationSetting(mapOf("ctondz", "xum", "tov", "luudfdlwggytsb", "irgne", "tgseinqfiufxqkn"))
            .withSourceSetting(mapOf("ojlpijnkrxf", "wqmsniffcdmqn", "nasx", "ddhcratizzr", "zq", "ft", "tw", "zh"))
            .withTargetSetting(
                mapOf("yhmossxkkg", "ogczhonnxkrlg", "rghxjb", "h", "rnsvbuswd", "hqxvcxgfrpdsofbs", "ybycnunvj", "z"));
        model = BinaryData.fromObject(model).toObject(MigrateSqlServerSqlDbSyncDatabaseInput.class);
        Assertions.assertEquals("xhojuj", model.id());
        Assertions.assertEquals("pelmcuvhixbjxyf", model.name());
        Assertions.assertEquals("yl", model.targetDatabaseName());
        Assertions.assertEquals("ool", model.schemaName());
        Assertions.assertEquals("p", model.tableMap().get("iwkkbn"));
        Assertions.assertEquals("xum", model.migrationSetting().get("ctondz"));
        Assertions.assertEquals("wqmsniffcdmqn", model.sourceSetting().get("ojlpijnkrxf"));
        Assertions.assertEquals("ogczhonnxkrlg", model.targetSetting().get("yhmossxkkg"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
