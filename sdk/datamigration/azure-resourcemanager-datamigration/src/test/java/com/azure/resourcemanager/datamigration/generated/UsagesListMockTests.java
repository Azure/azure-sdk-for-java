// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datamigration.DataMigrationManager;
import com.azure.resourcemanager.datamigration.models.Quota;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class UsagesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"currentValue\":74.08255016179143,\"id\":\"ljqobbpihehcecyb\",\"limit\":17.642722568267054,\"name\":{\"localizedValue\":\"bbmpxdlvykfre\",\"value\":\"rseqwjksghudgz\"},\"unit\":\"ogjggsvoujkxibda\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataMigrationManager manager = DataMigrationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Quota> response = manager.usages().list("rleaes", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(74.08255016179143D, response.iterator().next().currentValue());
        Assertions.assertEquals("ljqobbpihehcecyb", response.iterator().next().id());
        Assertions.assertEquals(17.642722568267054D, response.iterator().next().limit());
        Assertions.assertEquals("bbmpxdlvykfre", response.iterator().next().name().localizedValue());
        Assertions.assertEquals("rseqwjksghudgz", response.iterator().next().name().value());
        Assertions.assertEquals("ogjggsvoujkxibda", response.iterator().next().unit());
    }
}
