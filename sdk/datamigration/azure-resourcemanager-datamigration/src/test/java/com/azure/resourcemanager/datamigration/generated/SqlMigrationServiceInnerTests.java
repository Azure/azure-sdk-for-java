// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datamigration.fluent.models.SqlMigrationServiceInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SqlMigrationServiceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SqlMigrationServiceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"qreyfkzi\",\"integrationRuntimeState\":\"jawneaiv\"},\"systemData\":{\"createdBy\":\"zel\",\"createdByType\":\"Application\",\"createdAt\":\"2021-01-21T19:39:29Z\",\"lastModifiedBy\":\"sfeaenwabfat\",\"lastModifiedByType\":\"Key\",\"lastModifiedAt\":\"2021-04-08T15:13:01Z\"},\"location\":\"bjhwuaan\",\"tags\":{\"jrvxaglrv\":\"osphyoul\"},\"id\":\"mjwosytx\",\"name\":\"tcs\",\"type\":\"fcktqumiekke\"}")
            .toObject(SqlMigrationServiceInner.class);
        Assertions.assertEquals("bjhwuaan", model.location());
        Assertions.assertEquals("osphyoul", model.tags().get("jrvxaglrv"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SqlMigrationServiceInner model
            = new SqlMigrationServiceInner().withLocation("bjhwuaan").withTags(mapOf("jrvxaglrv", "osphyoul"));
        model = BinaryData.fromObject(model).toObject(SqlMigrationServiceInner.class);
        Assertions.assertEquals("bjhwuaan", model.location());
        Assertions.assertEquals("osphyoul", model.tags().get("jrvxaglrv"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
