// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datamigration.DataMigrationManager;
import com.azure.resourcemanager.datamigration.models.SqlMigrationService;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlMigrationServicesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"integrationRuntimeState\":\"ylqlocvvujexaygl\"},\"systemData\":{\"createdBy\":\"gjnm\",\"createdByType\":\"Application\",\"createdAt\":\"2021-01-04T16:50:12Z\",\"lastModifiedBy\":\"vxjfiuofpieidzlv\",\"lastModifiedByType\":\"Application\",\"lastModifiedAt\":\"2021-11-24T07:45:58Z\"},\"location\":\"jopackyhydv\",\"tags\":{\"illxg\":\"fngp\",\"dye\":\"scizwgsoriobijei\",\"ybriop\":\"ynhbokayrg\",\"igsioctqkm\":\"weoftnorw\"},\"id\":\"ja\",\"name\":\"xvzfffhtjnwos\",\"type\":\"tfjxtvlx\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataMigrationManager manager = DataMigrationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SqlMigrationService response = manager.sqlMigrationServices()
            .define("khjqjpvbaihxjtg")
            .withRegion("yckhefrbhseue")
            .withExistingResourceGroup("znllaslk")
            .withTags(
                mapOf("aytujraxdtpryjm", "pxebjlud", "ly", "tnsewou", "vyljurkeposehqq", "s", "dsdlzmk", "lmpctwj"))
            .create();

        Assertions.assertEquals("jopackyhydv", response.location());
        Assertions.assertEquals("fngp", response.tags().get("illxg"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
