// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datamigration.models.MigrateMySqlAzureDbForMySqlSyncDatabaseInput;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MigrateMySqlAzureDbForMySqlSyncDatabaseInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MigrateMySqlAzureDbForMySqlSyncDatabaseInput model = BinaryData.fromString(
            "{\"name\":\"qonmpqoxwdof\",\"targetDatabaseName\":\"xiqxeiiqbimh\",\"migrationSetting\":{\"vwbcblembnkbwv\":\"winhehfqpo\",\"uwfmduragegizvc\":\"vxkdivqihebwtswb\"},\"sourceSetting\":{\"gkxkbsazgakg\":\"lisdjubggbq\",\"apvu\":\"cyrcmjdmspo\"},\"targetSetting\":{\"mstk\":\"lniofrzgbzje\",\"nktwfansnvpdibmi\":\"nlvxbcuii\"},\"tableMap\":{\"yls\":\"tbzbkiwbuqnyophz\"}}")
            .toObject(MigrateMySqlAzureDbForMySqlSyncDatabaseInput.class);
        Assertions.assertEquals("qonmpqoxwdof", model.name());
        Assertions.assertEquals("xiqxeiiqbimh", model.targetDatabaseName());
        Assertions.assertEquals("winhehfqpo", model.migrationSetting().get("vwbcblembnkbwv"));
        Assertions.assertEquals("lisdjubggbq", model.sourceSetting().get("gkxkbsazgakg"));
        Assertions.assertEquals("lniofrzgbzje", model.targetSetting().get("mstk"));
        Assertions.assertEquals("tbzbkiwbuqnyophz", model.tableMap().get("yls"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MigrateMySqlAzureDbForMySqlSyncDatabaseInput model
            = new MigrateMySqlAzureDbForMySqlSyncDatabaseInput().withName("qonmpqoxwdof")
                .withTargetDatabaseName("xiqxeiiqbimh")
                .withMigrationSetting(mapOf("vwbcblembnkbwv", "winhehfqpo", "uwfmduragegizvc", "vxkdivqihebwtswb"))
                .withSourceSetting(mapOf("gkxkbsazgakg", "lisdjubggbq", "apvu", "cyrcmjdmspo"))
                .withTargetSetting(mapOf("mstk", "lniofrzgbzje", "nktwfansnvpdibmi", "nlvxbcuii"))
                .withTableMap(mapOf("yls", "tbzbkiwbuqnyophz"));
        model = BinaryData.fromObject(model).toObject(MigrateMySqlAzureDbForMySqlSyncDatabaseInput.class);
        Assertions.assertEquals("qonmpqoxwdof", model.name());
        Assertions.assertEquals("xiqxeiiqbimh", model.targetDatabaseName());
        Assertions.assertEquals("winhehfqpo", model.migrationSetting().get("vwbcblembnkbwv"));
        Assertions.assertEquals("lisdjubggbq", model.sourceSetting().get("gkxkbsazgakg"));
        Assertions.assertEquals("lniofrzgbzje", model.targetSetting().get("mstk"));
        Assertions.assertEquals("tbzbkiwbuqnyophz", model.tableMap().get("yls"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
