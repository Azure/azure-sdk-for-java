// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datamigration.models.MigrateMySqlAzureDbForMySqlSyncDatabaseInput;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MigrateMySqlAzureDbForMySqlSyncDatabaseInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MigrateMySqlAzureDbForMySqlSyncDatabaseInput model = BinaryData.fromString(
            "{\"name\":\"rvxcush\",\"targetDatabaseName\":\"haivm\",\"migrationSetting\":{\"nsmjbl\":\"sflvgsgzwywakoih\",\"ryuzcbmqqv\":\"ljhlnymzotq\"},\"sourceSetting\":{\"ujlzqnhcvsqltn\":\"wfgtayxonsup\"},\"targetSetting\":{\"xwdofdb\":\"bgsxgnxfyqonmpq\"},\"tableMap\":{\"imht\":\"xeiiq\",\"pofvwb\":\"wwinhehf\",\"vqihebwtswbzuwf\":\"blembnkbwvqvxkd\",\"felisdjub\":\"duragegizvc\"}}")
            .toObject(MigrateMySqlAzureDbForMySqlSyncDatabaseInput.class);
        Assertions.assertEquals("rvxcush", model.name());
        Assertions.assertEquals("haivm", model.targetDatabaseName());
        Assertions.assertEquals("sflvgsgzwywakoih", model.migrationSetting().get("nsmjbl"));
        Assertions.assertEquals("wfgtayxonsup", model.sourceSetting().get("ujlzqnhcvsqltn"));
        Assertions.assertEquals("bgsxgnxfyqonmpq", model.targetSetting().get("xwdofdb"));
        Assertions.assertEquals("xeiiq", model.tableMap().get("imht"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MigrateMySqlAzureDbForMySqlSyncDatabaseInput model
            = new MigrateMySqlAzureDbForMySqlSyncDatabaseInput().withName("rvxcush")
                .withTargetDatabaseName("haivm")
                .withMigrationSetting(mapOf("nsmjbl", "sflvgsgzwywakoih", "ryuzcbmqqv", "ljhlnymzotq"))
                .withSourceSetting(mapOf("ujlzqnhcvsqltn", "wfgtayxonsup"))
                .withTargetSetting(mapOf("xwdofdb", "bgsxgnxfyqonmpq"))
                .withTableMap(mapOf("imht", "xeiiq", "pofvwb", "wwinhehf", "vqihebwtswbzuwf", "blembnkbwvqvxkd",
                    "felisdjub", "duragegizvc"));
        model = BinaryData.fromObject(model).toObject(MigrateMySqlAzureDbForMySqlSyncDatabaseInput.class);
        Assertions.assertEquals("rvxcush", model.name());
        Assertions.assertEquals("haivm", model.targetDatabaseName());
        Assertions.assertEquals("sflvgsgzwywakoih", model.migrationSetting().get("nsmjbl"));
        Assertions.assertEquals("wfgtayxonsup", model.sourceSetting().get("ujlzqnhcvsqltn"));
        Assertions.assertEquals("bgsxgnxfyqonmpq", model.targetSetting().get("xwdofdb"));
        Assertions.assertEquals("xeiiq", model.tableMap().get("imht"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
