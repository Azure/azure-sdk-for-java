// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datamigration.models.MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput;
import com.azure.resourcemanager.datamigration.models.MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput model = BinaryData.fromString(
            "{\"name\":\"amhsycxhxzgazt\",\"id\":\"boi\",\"targetDatabaseName\":\"mfqhppubowse\",\"migrationSetting\":{\"mtdherngb\":\"datag\",\"uahokq\":\"datac\",\"phwpnulaiywzej\":\"dataobkauxofsh\"},\"sourceSetting\":{\"ndnpdwrpqafgfug\":\"slwkojpl\"},\"targetSetting\":{\"ypococtfjgtixr\":\"fhyete\"},\"selectedTables\":[{\"name\":\"yturmlmuo\"}]}")
            .toObject(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput.class);
        Assertions.assertEquals("amhsycxhxzgazt", model.name());
        Assertions.assertEquals("mfqhppubowse", model.targetDatabaseName());
        Assertions.assertEquals("slwkojpl", model.sourceSetting().get("ndnpdwrpqafgfug"));
        Assertions.assertEquals("fhyete", model.targetSetting().get("ypococtfjgtixr"));
        Assertions.assertEquals("yturmlmuo", model.selectedTables().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput model
            = new MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput().withName("amhsycxhxzgazt")
                .withTargetDatabaseName("mfqhppubowse")
                .withMigrationSetting(
                    mapOf("mtdherngb", "datag", "uahokq", "datac", "phwpnulaiywzej", "dataobkauxofsh"))
                .withSourceSetting(mapOf("ndnpdwrpqafgfug", "slwkojpl"))
                .withTargetSetting(mapOf("ypococtfjgtixr", "fhyete"))
                .withSelectedTables(Arrays
                    .asList(new MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput().withName("yturmlmuo")));
        model = BinaryData.fromObject(model).toObject(MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput.class);
        Assertions.assertEquals("amhsycxhxzgazt", model.name());
        Assertions.assertEquals("mfqhppubowse", model.targetDatabaseName());
        Assertions.assertEquals("slwkojpl", model.sourceSetting().get("ndnpdwrpqafgfug"));
        Assertions.assertEquals("fhyete", model.targetSetting().get("ypococtfjgtixr"));
        Assertions.assertEquals("yturmlmuo", model.selectedTables().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
