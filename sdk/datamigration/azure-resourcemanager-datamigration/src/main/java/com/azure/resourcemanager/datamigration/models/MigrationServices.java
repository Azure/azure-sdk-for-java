// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of MigrationServices.
 */
public interface MigrationServices {
    /**
     * Retrieve the Database Migration Service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Migration Service along with {@link Response}.
     */
    Response<MigrationService> getByResourceGroupWithResponse(String resourceGroupName, String migrationServiceName,
        Context context);

    /**
     * Retrieve the Database Migration Service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Migration Service.
     */
    MigrationService getByResourceGroup(String resourceGroupName, String migrationServiceName);

    /**
     * Delete Database Migration Service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String migrationServiceName);

    /**
     * Delete Database Migration Service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String migrationServiceName, Context context);

    /**
     * Retrieve all migration services in the resource group.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Migration Service as paginated response with {@link PagedIterable}.
     */
    PagedIterable<MigrationService> listByResourceGroup(String resourceGroupName);

    /**
     * Retrieve all migration services in the resource group.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Migration Service as paginated response with {@link PagedIterable}.
     */
    PagedIterable<MigrationService> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Retrieve all migration services in the subscriptions.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Migration Service as paginated response with {@link PagedIterable}.
     */
    PagedIterable<MigrationService> list();

    /**
     * Retrieve all migration services in the subscriptions.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Migration Service as paginated response with {@link PagedIterable}.
     */
    PagedIterable<MigrationService> list(Context context);

    /**
     * Retrieve the List of database migrations attached to the service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Database Migrations as paginated response with {@link PagedIterable}.
     */
    PagedIterable<DatabaseMigrationBase> listMigrations(String resourceGroupName, String migrationServiceName);

    /**
     * Retrieve the List of database migrations attached to the service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Database Migrations as paginated response with {@link PagedIterable}.
     */
    PagedIterable<DatabaseMigrationBase> listMigrations(String resourceGroupName, String migrationServiceName,
        Context context);

    /**
     * Retrieve the Database Migration Service.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Migration Service along with {@link Response}.
     */
    MigrationService getById(String id);

    /**
     * Retrieve the Database Migration Service.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Migration Service along with {@link Response}.
     */
    Response<MigrationService> getByIdWithResponse(String id, Context context);

    /**
     * Delete Database Migration Service.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete Database Migration Service.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new MigrationService resource.
     * 
     * @param name resource name.
     * @return the first stage of the new MigrationService definition.
     */
    MigrationService.DefinitionStages.Blank define(String name);
}
