// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Output for connect to Oracle, MySQL type source.
 */
@Immutable
public final class ConnectToSourceNonSqlTaskOutput implements JsonSerializable<ConnectToSourceNonSqlTaskOutput> {
    /*
     * Result identifier
     */
    private String id;

    /*
     * Server brand version
     */
    private String sourceServerBrandVersion;

    /*
     * Server properties
     */
    private ServerProperties serverProperties;

    /*
     * List of databases on the server
     */
    private List<String> databases;

    /*
     * Validation errors associated with the task
     */
    private List<ReportableException> validationErrors;

    /**
     * Creates an instance of ConnectToSourceNonSqlTaskOutput class.
     */
    public ConnectToSourceNonSqlTaskOutput() {
    }

    /**
     * Get the id property: Result identifier.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the sourceServerBrandVersion property: Server brand version.
     * 
     * @return the sourceServerBrandVersion value.
     */
    public String sourceServerBrandVersion() {
        return this.sourceServerBrandVersion;
    }

    /**
     * Get the serverProperties property: Server properties.
     * 
     * @return the serverProperties value.
     */
    public ServerProperties serverProperties() {
        return this.serverProperties;
    }

    /**
     * Get the databases property: List of databases on the server.
     * 
     * @return the databases value.
     */
    public List<String> databases() {
        return this.databases;
    }

    /**
     * Get the validationErrors property: Validation errors associated with the task.
     * 
     * @return the validationErrors value.
     */
    public List<ReportableException> validationErrors() {
        return this.validationErrors;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (serverProperties() != null) {
            serverProperties().validate();
        }
        if (validationErrors() != null) {
            validationErrors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectToSourceNonSqlTaskOutput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectToSourceNonSqlTaskOutput if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectToSourceNonSqlTaskOutput.
     */
    public static ConnectToSourceNonSqlTaskOutput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectToSourceNonSqlTaskOutput deserializedConnectToSourceNonSqlTaskOutput
                = new ConnectToSourceNonSqlTaskOutput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedConnectToSourceNonSqlTaskOutput.id = reader.getString();
                } else if ("sourceServerBrandVersion".equals(fieldName)) {
                    deserializedConnectToSourceNonSqlTaskOutput.sourceServerBrandVersion = reader.getString();
                } else if ("serverProperties".equals(fieldName)) {
                    deserializedConnectToSourceNonSqlTaskOutput.serverProperties = ServerProperties.fromJson(reader);
                } else if ("databases".equals(fieldName)) {
                    List<String> databases = reader.readArray(reader1 -> reader1.getString());
                    deserializedConnectToSourceNonSqlTaskOutput.databases = databases;
                } else if ("validationErrors".equals(fieldName)) {
                    List<ReportableException> validationErrors
                        = reader.readArray(reader1 -> ReportableException.fromJson(reader1));
                    deserializedConnectToSourceNonSqlTaskOutput.validationErrors = validationErrors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectToSourceNonSqlTaskOutput;
        });
    }
}
