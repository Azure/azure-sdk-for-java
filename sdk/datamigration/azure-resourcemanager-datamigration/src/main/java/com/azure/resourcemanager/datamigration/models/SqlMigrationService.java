// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.datamigration.fluent.models.DeleteNodeInner;
import com.azure.resourcemanager.datamigration.fluent.models.RegenAuthKeysInner;
import com.azure.resourcemanager.datamigration.fluent.models.SqlMigrationServiceInner;
import java.util.Map;

/**
 * An immutable client-side representation of SqlMigrationService.
 */
public interface SqlMigrationService {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: The systemData property.
     * 
     * @return the systemData value.
     */
    SystemDataAutoGenerated systemData();

    /**
     * Gets the provisioningState property: Provisioning state to track the async operation status.
     * 
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the integrationRuntimeState property: Current state of the Integration runtime.
     * 
     * @return the integrationRuntimeState value.
     */
    String integrationRuntimeState();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.datamigration.fluent.models.SqlMigrationServiceInner object.
     * 
     * @return the inner object.
     */
    SqlMigrationServiceInner innerModel();

    /**
     * The entirety of the SqlMigrationService definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithResourceGroup, DefinitionStages.WithCreate {
    }

    /**
     * The SqlMigrationService definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the SqlMigrationService definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the SqlMigrationService definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /**
         * The stage of the SqlMigrationService definition allowing to specify parent resource.
         */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             * 
             * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value
             * from the Azure Resource Manager API or the portal.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the SqlMigrationService definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            SqlMigrationService create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            SqlMigrationService create(Context context);
        }

        /**
         * The stage of the SqlMigrationService definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
    }

    /**
     * Begins update for the SqlMigrationService resource.
     * 
     * @return the stage of resource update.
     */
    SqlMigrationService.Update update();

    /**
     * The template for SqlMigrationService update.
     */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        SqlMigrationService apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        SqlMigrationService apply(Context context);
    }

    /**
     * The SqlMigrationService update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the SqlMigrationService update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Dictionary of &lt;string&gt;.
             * 
             * @param tags Dictionary of &lt;string&gt;.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    SqlMigrationService refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    SqlMigrationService refresh(Context context);

    /**
     * Retrieve the List of Authentication Keys for Self Hosted Integration Runtime.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an authentication key along with {@link Response}.
     */
    Response<AuthenticationKeys> listAuthKeysWithResponse(Context context);

    /**
     * Retrieve the List of Authentication Keys for Self Hosted Integration Runtime.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an authentication key.
     */
    AuthenticationKeys listAuthKeys();

    /**
     * Regenerate a new set of Authentication Keys for Self Hosted Integration Runtime.
     * 
     * @param parameters Details of SqlMigrationService resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an authentication key to regenerate along with {@link Response}.
     */
    Response<RegenAuthKeys> regenerateAuthKeysWithResponse(RegenAuthKeysInner parameters, Context context);

    /**
     * Regenerate a new set of Authentication Keys for Self Hosted Integration Runtime.
     * 
     * @param parameters Details of SqlMigrationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an authentication key to regenerate.
     */
    RegenAuthKeys regenerateAuthKeys(RegenAuthKeysInner parameters);

    /**
     * Delete the integration runtime node.
     * 
     * @param parameters Details of SqlMigrationService resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of node to be deleted along with {@link Response}.
     */
    Response<DeleteNode> deleteNodeWithResponse(DeleteNodeInner parameters, Context context);

    /**
     * Delete the integration runtime node.
     * 
     * @param parameters Details of SqlMigrationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of node to be deleted.
     */
    DeleteNode deleteNode(DeleteNodeInner parameters);

    /**
     * Retrieve the registered Integration Runtime nodes and their monitoring data for a given Database Migration
     * Service.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return integration Runtime Monitoring Data along with {@link Response}.
     */
    Response<IntegrationRuntimeMonitoringData> listMonitoringDataWithResponse(Context context);

    /**
     * Retrieve the registered Integration Runtime nodes and their monitoring data for a given Database Migration
     * Service.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return integration Runtime Monitoring Data.
     */
    IntegrationRuntimeMonitoringData listMonitoringData();
}
