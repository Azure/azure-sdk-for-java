// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Input for the task that gets the list of tables contained within a provided list of Oracle schemas.
 */
@Fluent
public final class GetUserTablesOracleTaskInput implements JsonSerializable<GetUserTablesOracleTaskInput> {
    /*
     * Information for connecting to Oracle source
     */
    private OracleConnectionInfo connectionInfo;

    /*
     * List of Oracle schemas for which to collect tables
     */
    private List<String> selectedSchemas;

    /**
     * Creates an instance of GetUserTablesOracleTaskInput class.
     */
    public GetUserTablesOracleTaskInput() {
    }

    /**
     * Get the connectionInfo property: Information for connecting to Oracle source.
     * 
     * @return the connectionInfo value.
     */
    public OracleConnectionInfo connectionInfo() {
        return this.connectionInfo;
    }

    /**
     * Set the connectionInfo property: Information for connecting to Oracle source.
     * 
     * @param connectionInfo the connectionInfo value to set.
     * @return the GetUserTablesOracleTaskInput object itself.
     */
    public GetUserTablesOracleTaskInput withConnectionInfo(OracleConnectionInfo connectionInfo) {
        this.connectionInfo = connectionInfo;
        return this;
    }

    /**
     * Get the selectedSchemas property: List of Oracle schemas for which to collect tables.
     * 
     * @return the selectedSchemas value.
     */
    public List<String> selectedSchemas() {
        return this.selectedSchemas;
    }

    /**
     * Set the selectedSchemas property: List of Oracle schemas for which to collect tables.
     * 
     * @param selectedSchemas the selectedSchemas value to set.
     * @return the GetUserTablesOracleTaskInput object itself.
     */
    public GetUserTablesOracleTaskInput withSelectedSchemas(List<String> selectedSchemas) {
        this.selectedSchemas = selectedSchemas;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connectionInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property connectionInfo in model GetUserTablesOracleTaskInput"));
        } else {
            connectionInfo().validate();
        }
        if (selectedSchemas() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property selectedSchemas in model GetUserTablesOracleTaskInput"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GetUserTablesOracleTaskInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("connectionInfo", this.connectionInfo);
        jsonWriter.writeArrayField("selectedSchemas", this.selectedSchemas,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetUserTablesOracleTaskInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetUserTablesOracleTaskInput if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GetUserTablesOracleTaskInput.
     */
    public static GetUserTablesOracleTaskInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GetUserTablesOracleTaskInput deserializedGetUserTablesOracleTaskInput = new GetUserTablesOracleTaskInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectionInfo".equals(fieldName)) {
                    deserializedGetUserTablesOracleTaskInput.connectionInfo = OracleConnectionInfo.fromJson(reader);
                } else if ("selectedSchemas".equals(fieldName)) {
                    List<String> selectedSchemas = reader.readArray(reader1 -> reader1.getString());
                    deserializedGetUserTablesOracleTaskInput.selectedSchemas = selectedSchemas;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGetUserTablesOracleTaskInput;
        });
    }
}
