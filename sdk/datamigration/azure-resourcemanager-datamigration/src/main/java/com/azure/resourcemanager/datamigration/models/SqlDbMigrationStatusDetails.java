// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Detailed status of current Sql Db migration.
 */
@Immutable
public final class SqlDbMigrationStatusDetails implements JsonSerializable<SqlDbMigrationStatusDetails> {
    /*
     * Current State of Migration.
     */
    private String migrationState;

    /*
     * Sql Data Copy errors, if any.
     */
    private List<String> sqlDataCopyErrors;

    /*
     * Details on progress of ADF copy activities.
     */
    private List<CopyProgressDetails> listOfCopyProgressDetails;

    /**
     * Creates an instance of SqlDbMigrationStatusDetails class.
     */
    public SqlDbMigrationStatusDetails() {
    }

    /**
     * Get the migrationState property: Current State of Migration.
     * 
     * @return the migrationState value.
     */
    public String migrationState() {
        return this.migrationState;
    }

    /**
     * Get the sqlDataCopyErrors property: Sql Data Copy errors, if any.
     * 
     * @return the sqlDataCopyErrors value.
     */
    public List<String> sqlDataCopyErrors() {
        return this.sqlDataCopyErrors;
    }

    /**
     * Get the listOfCopyProgressDetails property: Details on progress of ADF copy activities.
     * 
     * @return the listOfCopyProgressDetails value.
     */
    public List<CopyProgressDetails> listOfCopyProgressDetails() {
        return this.listOfCopyProgressDetails;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (listOfCopyProgressDetails() != null) {
            listOfCopyProgressDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlDbMigrationStatusDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlDbMigrationStatusDetails if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlDbMigrationStatusDetails.
     */
    public static SqlDbMigrationStatusDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlDbMigrationStatusDetails deserializedSqlDbMigrationStatusDetails = new SqlDbMigrationStatusDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("migrationState".equals(fieldName)) {
                    deserializedSqlDbMigrationStatusDetails.migrationState = reader.getString();
                } else if ("sqlDataCopyErrors".equals(fieldName)) {
                    List<String> sqlDataCopyErrors = reader.readArray(reader1 -> reader1.getString());
                    deserializedSqlDbMigrationStatusDetails.sqlDataCopyErrors = sqlDataCopyErrors;
                } else if ("listOfCopyProgressDetails".equals(fieldName)) {
                    List<CopyProgressDetails> listOfCopyProgressDetails
                        = reader.readArray(reader1 -> CopyProgressDetails.fromJson(reader1));
                    deserializedSqlDbMigrationStatusDetails.listOfCopyProgressDetails = listOfCopyProgressDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlDbMigrationStatusDetails;
        });
    }
}
