// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * SKU name, tier, etc.
 */
@Fluent
public final class AvailableServiceSkuSku implements JsonSerializable<AvailableServiceSkuSku> {
    /*
     * The name of the SKU
     */
    private String name;

    /*
     * SKU family
     */
    private String family;

    /*
     * SKU size
     */
    private String size;

    /*
     * The tier of the SKU, such as "Free", "Basic", "Standard", or "Premium"
     */
    private String tier;

    /**
     * Creates an instance of AvailableServiceSkuSku class.
     */
    public AvailableServiceSkuSku() {
    }

    /**
     * Get the name property: The name of the SKU.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the SKU.
     * 
     * @param name the name value to set.
     * @return the AvailableServiceSkuSku object itself.
     */
    public AvailableServiceSkuSku withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the family property: SKU family.
     * 
     * @return the family value.
     */
    public String family() {
        return this.family;
    }

    /**
     * Set the family property: SKU family.
     * 
     * @param family the family value to set.
     * @return the AvailableServiceSkuSku object itself.
     */
    public AvailableServiceSkuSku withFamily(String family) {
        this.family = family;
        return this;
    }

    /**
     * Get the size property: SKU size.
     * 
     * @return the size value.
     */
    public String size() {
        return this.size;
    }

    /**
     * Set the size property: SKU size.
     * 
     * @param size the size value to set.
     * @return the AvailableServiceSkuSku object itself.
     */
    public AvailableServiceSkuSku withSize(String size) {
        this.size = size;
        return this;
    }

    /**
     * Get the tier property: The tier of the SKU, such as "Free", "Basic", "Standard", or "Premium".
     * 
     * @return the tier value.
     */
    public String tier() {
        return this.tier;
    }

    /**
     * Set the tier property: The tier of the SKU, such as "Free", "Basic", "Standard", or "Premium".
     * 
     * @param tier the tier value to set.
     * @return the AvailableServiceSkuSku object itself.
     */
    public AvailableServiceSkuSku withTier(String tier) {
        this.tier = tier;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("family", this.family);
        jsonWriter.writeStringField("size", this.size);
        jsonWriter.writeStringField("tier", this.tier);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvailableServiceSkuSku from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvailableServiceSkuSku if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AvailableServiceSkuSku.
     */
    public static AvailableServiceSkuSku fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvailableServiceSkuSku deserializedAvailableServiceSkuSku = new AvailableServiceSkuSku();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedAvailableServiceSkuSku.name = reader.getString();
                } else if ("family".equals(fieldName)) {
                    deserializedAvailableServiceSkuSku.family = reader.getString();
                } else if ("size".equals(fieldName)) {
                    deserializedAvailableServiceSkuSku.size = reader.getString();
                } else if ("tier".equals(fieldName)) {
                    deserializedAvailableServiceSkuSku.tier = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvailableServiceSkuSku;
        });
    }
}
