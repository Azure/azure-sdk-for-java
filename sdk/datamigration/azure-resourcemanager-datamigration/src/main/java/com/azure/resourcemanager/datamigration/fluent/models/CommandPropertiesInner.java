// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.exception.ManagementError;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datamigration.models.CommandState;
import com.azure.resourcemanager.datamigration.models.CommandType;
import com.azure.resourcemanager.datamigration.models.MigrateMISyncCompleteCommandProperties;
import com.azure.resourcemanager.datamigration.models.MigrateSyncCompleteCommandProperties;
import com.azure.resourcemanager.datamigration.models.MongoDbCancelCommand;
import com.azure.resourcemanager.datamigration.models.MongoDbFinishCommand;
import com.azure.resourcemanager.datamigration.models.MongoDbRestartCommand;
import java.io.IOException;
import java.util.List;

/**
 * Base class for all types of DMS (classic) command properties. If command is not supported by current client, this
 * object is returned.
 */
@Immutable
public class CommandPropertiesInner implements JsonSerializable<CommandPropertiesInner> {
    /*
     * Command type.
     */
    private CommandType commandType = CommandType.fromString("CommandProperties");

    /*
     * Array of errors. This is ignored if submitted.
     */
    private List<ManagementError> errors;

    /*
     * The state of the command. This is ignored if submitted.
     */
    private CommandState state;

    /**
     * Creates an instance of CommandPropertiesInner class.
     */
    public CommandPropertiesInner() {
    }

    /**
     * Get the commandType property: Command type.
     * 
     * @return the commandType value.
     */
    public CommandType commandType() {
        return this.commandType;
    }

    /**
     * Get the errors property: Array of errors. This is ignored if submitted.
     * 
     * @return the errors value.
     */
    public List<ManagementError> errors() {
        return this.errors;
    }

    /**
     * Set the errors property: Array of errors. This is ignored if submitted.
     * 
     * @param errors the errors value to set.
     * @return the CommandPropertiesInner object itself.
     */
    CommandPropertiesInner withErrors(List<ManagementError> errors) {
        this.errors = errors;
        return this;
    }

    /**
     * Get the state property: The state of the command. This is ignored if submitted.
     * 
     * @return the state value.
     */
    public CommandState state() {
        return this.state;
    }

    /**
     * Set the state property: The state of the command. This is ignored if submitted.
     * 
     * @param state the state value to set.
     * @return the CommandPropertiesInner object itself.
     */
    CommandPropertiesInner withState(CommandState state) {
        this.state = state;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("commandType", this.commandType == null ? null : this.commandType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommandPropertiesInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommandPropertiesInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CommandPropertiesInner.
     */
    public static CommandPropertiesInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("commandType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Migrate.Sync.Complete.Database".equals(discriminatorValue)) {
                    return MigrateSyncCompleteCommandProperties.fromJson(readerToUse.reset());
                } else if ("Migrate.SqlServer.AzureDbSqlMi.Complete".equals(discriminatorValue)) {
                    return MigrateMISyncCompleteCommandProperties.fromJson(readerToUse.reset());
                } else if ("cancel".equals(discriminatorValue)) {
                    return MongoDbCancelCommand.fromJson(readerToUse.reset());
                } else if ("finish".equals(discriminatorValue)) {
                    return MongoDbFinishCommand.fromJson(readerToUse.reset());
                } else if ("restart".equals(discriminatorValue)) {
                    return MongoDbRestartCommand.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static CommandPropertiesInner fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommandPropertiesInner deserializedCommandPropertiesInner = new CommandPropertiesInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("commandType".equals(fieldName)) {
                    deserializedCommandPropertiesInner.commandType = CommandType.fromString(reader.getString());
                } else if ("errors".equals(fieldName)) {
                    List<ManagementError> errors = reader.readArray(reader1 -> ManagementError.fromJson(reader1));
                    deserializedCommandPropertiesInner.errors = errors;
                } else if ("state".equals(fieldName)) {
                    deserializedCommandPropertiesInner.state = CommandState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCommandPropertiesInner;
        });
    }
}
