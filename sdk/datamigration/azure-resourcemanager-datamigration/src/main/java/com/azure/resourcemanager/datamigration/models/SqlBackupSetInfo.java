// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

/**
 * Information of backup set.
 */
@Immutable
public final class SqlBackupSetInfo implements JsonSerializable<SqlBackupSetInfo> {
    /*
     * Backup set id.
     */
    private UUID backupSetId;

    /*
     * First LSN of the backup set.
     */
    private String firstLsn;

    /*
     * Last LSN of the backup set.
     */
    private String lastLsn;

    /*
     * Backup type.
     */
    private String backupType;

    /*
     * List of files in the backup set.
     */
    private List<SqlBackupFileInfo> listOfBackupFiles;

    /*
     * Backup start date.
     */
    private OffsetDateTime backupStartDate;

    /*
     * Backup end time.
     */
    private OffsetDateTime backupFinishDate;

    /*
     * Whether this backup set has been restored or not.
     */
    private Boolean isBackupRestored;

    /*
     * Has Backup Checksums
     */
    private Boolean hasBackupChecksums;

    /*
     * Media family count
     */
    private Integer familyCount;

    /*
     * The reasons why the backup set is ignored
     */
    private List<String> ignoreReasons;

    /**
     * Creates an instance of SqlBackupSetInfo class.
     */
    public SqlBackupSetInfo() {
    }

    /**
     * Get the backupSetId property: Backup set id.
     * 
     * @return the backupSetId value.
     */
    public UUID backupSetId() {
        return this.backupSetId;
    }

    /**
     * Get the firstLsn property: First LSN of the backup set.
     * 
     * @return the firstLsn value.
     */
    public String firstLsn() {
        return this.firstLsn;
    }

    /**
     * Get the lastLsn property: Last LSN of the backup set.
     * 
     * @return the lastLsn value.
     */
    public String lastLsn() {
        return this.lastLsn;
    }

    /**
     * Get the backupType property: Backup type.
     * 
     * @return the backupType value.
     */
    public String backupType() {
        return this.backupType;
    }

    /**
     * Get the listOfBackupFiles property: List of files in the backup set.
     * 
     * @return the listOfBackupFiles value.
     */
    public List<SqlBackupFileInfo> listOfBackupFiles() {
        return this.listOfBackupFiles;
    }

    /**
     * Get the backupStartDate property: Backup start date.
     * 
     * @return the backupStartDate value.
     */
    public OffsetDateTime backupStartDate() {
        return this.backupStartDate;
    }

    /**
     * Get the backupFinishDate property: Backup end time.
     * 
     * @return the backupFinishDate value.
     */
    public OffsetDateTime backupFinishDate() {
        return this.backupFinishDate;
    }

    /**
     * Get the isBackupRestored property: Whether this backup set has been restored or not.
     * 
     * @return the isBackupRestored value.
     */
    public Boolean isBackupRestored() {
        return this.isBackupRestored;
    }

    /**
     * Get the hasBackupChecksums property: Has Backup Checksums.
     * 
     * @return the hasBackupChecksums value.
     */
    public Boolean hasBackupChecksums() {
        return this.hasBackupChecksums;
    }

    /**
     * Get the familyCount property: Media family count.
     * 
     * @return the familyCount value.
     */
    public Integer familyCount() {
        return this.familyCount;
    }

    /**
     * Get the ignoreReasons property: The reasons why the backup set is ignored.
     * 
     * @return the ignoreReasons value.
     */
    public List<String> ignoreReasons() {
        return this.ignoreReasons;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (listOfBackupFiles() != null) {
            listOfBackupFiles().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlBackupSetInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlBackupSetInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlBackupSetInfo.
     */
    public static SqlBackupSetInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlBackupSetInfo deserializedSqlBackupSetInfo = new SqlBackupSetInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("backupSetId".equals(fieldName)) {
                    deserializedSqlBackupSetInfo.backupSetId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("firstLSN".equals(fieldName)) {
                    deserializedSqlBackupSetInfo.firstLsn = reader.getString();
                } else if ("lastLSN".equals(fieldName)) {
                    deserializedSqlBackupSetInfo.lastLsn = reader.getString();
                } else if ("backupType".equals(fieldName)) {
                    deserializedSqlBackupSetInfo.backupType = reader.getString();
                } else if ("listOfBackupFiles".equals(fieldName)) {
                    List<SqlBackupFileInfo> listOfBackupFiles
                        = reader.readArray(reader1 -> SqlBackupFileInfo.fromJson(reader1));
                    deserializedSqlBackupSetInfo.listOfBackupFiles = listOfBackupFiles;
                } else if ("backupStartDate".equals(fieldName)) {
                    deserializedSqlBackupSetInfo.backupStartDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("backupFinishDate".equals(fieldName)) {
                    deserializedSqlBackupSetInfo.backupFinishDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("isBackupRestored".equals(fieldName)) {
                    deserializedSqlBackupSetInfo.isBackupRestored = reader.getNullable(JsonReader::getBoolean);
                } else if ("hasBackupChecksums".equals(fieldName)) {
                    deserializedSqlBackupSetInfo.hasBackupChecksums = reader.getNullable(JsonReader::getBoolean);
                } else if ("familyCount".equals(fieldName)) {
                    deserializedSqlBackupSetInfo.familyCount = reader.getNullable(JsonReader::getInt);
                } else if ("ignoreReasons".equals(fieldName)) {
                    List<String> ignoreReasons = reader.readArray(reader1 -> reader1.getString());
                    deserializedSqlBackupSetInfo.ignoreReasons = ignoreReasons;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlBackupSetInfo;
        });
    }
}
