// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Settings for migrating schema from source to target.
 */
@Fluent
public final class SchemaMigrationSetting implements JsonSerializable<SchemaMigrationSetting> {
    /*
     * Option on how to migrate the schema
     */
    private SchemaMigrationOption schemaOption;

    /*
     * Resource Identifier of a file resource containing the uploaded schema file
     */
    private String fileId;

    /*
     * Name of the file resource containing the uploaded schema file
     */
    private String fileName;

    /**
     * Creates an instance of SchemaMigrationSetting class.
     */
    public SchemaMigrationSetting() {
    }

    /**
     * Get the schemaOption property: Option on how to migrate the schema.
     * 
     * @return the schemaOption value.
     */
    public SchemaMigrationOption schemaOption() {
        return this.schemaOption;
    }

    /**
     * Set the schemaOption property: Option on how to migrate the schema.
     * 
     * @param schemaOption the schemaOption value to set.
     * @return the SchemaMigrationSetting object itself.
     */
    public SchemaMigrationSetting withSchemaOption(SchemaMigrationOption schemaOption) {
        this.schemaOption = schemaOption;
        return this;
    }

    /**
     * Get the fileId property: Resource Identifier of a file resource containing the uploaded schema file.
     * 
     * @return the fileId value.
     */
    public String fileId() {
        return this.fileId;
    }

    /**
     * Set the fileId property: Resource Identifier of a file resource containing the uploaded schema file.
     * 
     * @param fileId the fileId value to set.
     * @return the SchemaMigrationSetting object itself.
     */
    public SchemaMigrationSetting withFileId(String fileId) {
        this.fileId = fileId;
        return this;
    }

    /**
     * Get the fileName property: Name of the file resource containing the uploaded schema file.
     * 
     * @return the fileName value.
     */
    public String fileName() {
        return this.fileName;
    }

    /**
     * Set the fileName property: Name of the file resource containing the uploaded schema file.
     * 
     * @param fileName the fileName value to set.
     * @return the SchemaMigrationSetting object itself.
     */
    public SchemaMigrationSetting withFileName(String fileName) {
        this.fileName = fileName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("schemaOption", this.schemaOption == null ? null : this.schemaOption.toString());
        jsonWriter.writeStringField("fileId", this.fileId);
        jsonWriter.writeStringField("fileName", this.fileName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SchemaMigrationSetting from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SchemaMigrationSetting if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SchemaMigrationSetting.
     */
    public static SchemaMigrationSetting fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SchemaMigrationSetting deserializedSchemaMigrationSetting = new SchemaMigrationSetting();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("schemaOption".equals(fieldName)) {
                    deserializedSchemaMigrationSetting.schemaOption
                        = SchemaMigrationOption.fromString(reader.getString());
                } else if ("fileId".equals(fieldName)) {
                    deserializedSchemaMigrationSetting.fileId = reader.getString();
                } else if ("fileName".equals(fieldName)) {
                    deserializedSchemaMigrationSetting.fileName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSchemaMigrationSetting;
        });
    }
}
