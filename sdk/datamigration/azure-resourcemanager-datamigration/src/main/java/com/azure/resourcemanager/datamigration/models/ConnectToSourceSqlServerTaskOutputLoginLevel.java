// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Login level output for the task that validates connection to SQL Server and also validates source server
 * requirements.
 */
@Immutable
public final class ConnectToSourceSqlServerTaskOutputLoginLevel extends ConnectToSourceSqlServerTaskOutput {
    /*
     * Type of result - database level or task level
     */
    private String resultType = "LoginLevelOutput";

    /*
     * Login name.
     */
    private String name;

    /*
     * The type of login.
     */
    private LoginType loginType;

    /*
     * The default database for the login.
     */
    private String defaultDatabase;

    /*
     * The state of the login.
     */
    private Boolean isEnabled;

    /*
     * Information about eligibility of login for migration.
     */
    private MigrationEligibilityInfo migrationEligibility;

    /*
     * Result identifier
     */
    private String id;

    /**
     * Creates an instance of ConnectToSourceSqlServerTaskOutputLoginLevel class.
     */
    public ConnectToSourceSqlServerTaskOutputLoginLevel() {
    }

    /**
     * Get the resultType property: Type of result - database level or task level.
     * 
     * @return the resultType value.
     */
    @Override
    public String resultType() {
        return this.resultType;
    }

    /**
     * Get the name property: Login name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the loginType property: The type of login.
     * 
     * @return the loginType value.
     */
    public LoginType loginType() {
        return this.loginType;
    }

    /**
     * Get the defaultDatabase property: The default database for the login.
     * 
     * @return the defaultDatabase value.
     */
    public String defaultDatabase() {
        return this.defaultDatabase;
    }

    /**
     * Get the isEnabled property: The state of the login.
     * 
     * @return the isEnabled value.
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }

    /**
     * Get the migrationEligibility property: Information about eligibility of login for migration.
     * 
     * @return the migrationEligibility value.
     */
    public MigrationEligibilityInfo migrationEligibility() {
        return this.migrationEligibility;
    }

    /**
     * Get the id property: Result identifier.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (migrationEligibility() != null) {
            migrationEligibility().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resultType", this.resultType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectToSourceSqlServerTaskOutputLoginLevel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectToSourceSqlServerTaskOutputLoginLevel if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectToSourceSqlServerTaskOutputLoginLevel.
     */
    public static ConnectToSourceSqlServerTaskOutputLoginLevel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectToSourceSqlServerTaskOutputLoginLevel deserializedConnectToSourceSqlServerTaskOutputLoginLevel
                = new ConnectToSourceSqlServerTaskOutputLoginLevel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskOutputLoginLevel.id = reader.getString();
                } else if ("resultType".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskOutputLoginLevel.resultType = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskOutputLoginLevel.name = reader.getString();
                } else if ("loginType".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskOutputLoginLevel.loginType
                        = LoginType.fromString(reader.getString());
                } else if ("defaultDatabase".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskOutputLoginLevel.defaultDatabase = reader.getString();
                } else if ("isEnabled".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskOutputLoginLevel.isEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("migrationEligibility".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskOutputLoginLevel.migrationEligibility
                        = MigrationEligibilityInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectToSourceSqlServerTaskOutputLoginLevel;
        });
    }
}
