// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Output for the task that validates connection to Azure SQL Database Managed Instance.
 */
@Immutable
public final class ConnectToTargetSqlMISyncTaskOutput implements JsonSerializable<ConnectToTargetSqlMISyncTaskOutput> {
    /*
     * Target server version
     */
    private String targetServerVersion;

    /*
     * Target server brand version
     */
    private String targetServerBrandVersion;

    /*
     * Validation errors
     */
    private List<ReportableException> validationErrors;

    /**
     * Creates an instance of ConnectToTargetSqlMISyncTaskOutput class.
     */
    public ConnectToTargetSqlMISyncTaskOutput() {
    }

    /**
     * Get the targetServerVersion property: Target server version.
     * 
     * @return the targetServerVersion value.
     */
    public String targetServerVersion() {
        return this.targetServerVersion;
    }

    /**
     * Get the targetServerBrandVersion property: Target server brand version.
     * 
     * @return the targetServerBrandVersion value.
     */
    public String targetServerBrandVersion() {
        return this.targetServerBrandVersion;
    }

    /**
     * Get the validationErrors property: Validation errors.
     * 
     * @return the validationErrors value.
     */
    public List<ReportableException> validationErrors() {
        return this.validationErrors;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (validationErrors() != null) {
            validationErrors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectToTargetSqlMISyncTaskOutput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectToTargetSqlMISyncTaskOutput if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectToTargetSqlMISyncTaskOutput.
     */
    public static ConnectToTargetSqlMISyncTaskOutput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectToTargetSqlMISyncTaskOutput deserializedConnectToTargetSqlMISyncTaskOutput
                = new ConnectToTargetSqlMISyncTaskOutput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetServerVersion".equals(fieldName)) {
                    deserializedConnectToTargetSqlMISyncTaskOutput.targetServerVersion = reader.getString();
                } else if ("targetServerBrandVersion".equals(fieldName)) {
                    deserializedConnectToTargetSqlMISyncTaskOutput.targetServerBrandVersion = reader.getString();
                } else if ("validationErrors".equals(fieldName)) {
                    List<ReportableException> validationErrors
                        = reader.readArray(reader1 -> ReportableException.fromJson(reader1));
                    deserializedConnectToTargetSqlMISyncTaskOutput.validationErrors = validationErrors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectToTargetSqlMISyncTaskOutput;
        });
    }
}
