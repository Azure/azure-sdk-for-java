// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.datamigration.fluent.DatabaseMigrationsSqlDbsClient;
import com.azure.resourcemanager.datamigration.fluent.models.DatabaseMigrationSqlDbInner;
import com.azure.resourcemanager.datamigration.models.MigrationOperationInput;
import java.nio.ByteBuffer;
import java.util.UUID;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in DatabaseMigrationsSqlDbsClient. */
public final class DatabaseMigrationsSqlDbsClientImpl implements DatabaseMigrationsSqlDbsClient {
    /** The proxy service used to perform REST calls. */
    private final DatabaseMigrationsSqlDbsService service;

    /** The service client containing this operation class. */
    private final DataMigrationManagementClientImpl client;

    /**
     * Initializes an instance of DatabaseMigrationsSqlDbsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    DatabaseMigrationsSqlDbsClientImpl(DataMigrationManagementClientImpl client) {
        this.service =
            RestProxy
                .create(DatabaseMigrationsSqlDbsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DataMigrationManagementClientDatabaseMigrationsSqlDbs to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DataMigrationManagem")
    private interface DatabaseMigrationsSqlDbsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers"
                + "/{sqlDbInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DatabaseMigrationSqlDbInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlDbInstanceName") String sqlDbInstanceName,
            @PathParam("targetDbName") String targetDbName,
            @QueryParam("migrationOperationId") UUID migrationOperationId,
            @QueryParam("$expand") String expand,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers"
                + "/{sqlDbInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlDbInstanceName") String sqlDbInstanceName,
            @PathParam("targetDbName") String targetDbName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") DatabaseMigrationSqlDbInner parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Accept: application/json;q=0.9", "Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers"
                + "/{sqlDbInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlDbInstanceName") String sqlDbInstanceName,
            @PathParam("targetDbName") String targetDbName,
            @QueryParam("force") Boolean force,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            Context context);

        @Headers({"Accept: application/json;q=0.9", "Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers"
                + "/{sqlDbInstanceName}/providers/Microsoft.DataMigration/databaseMigrations/{targetDbName}/cancel")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> cancel(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("sqlDbInstanceName") String sqlDbInstanceName,
            @PathParam("targetDbName") String targetDbName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") MigrationOperationInput parameters,
            Context context);
    }

    /**
     * Retrieve the Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param migrationOperationId Optional migration operation ID. If this is provided, then details of migration
     *     operation for that ID are retrieved. If not provided (default), then details related to most recent or
     *     current operation are retrieved.
     * @param expand Complete migration details be included in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return database Migration Resource for SQL Database along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DatabaseMigrationSqlDbInner>> getWithResponseAsync(
        String resourceGroupName,
        String sqlDbInstanceName,
        String targetDbName,
        UUID migrationOperationId,
        String expand) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlDbInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlDbInstanceName is required and cannot be null."));
        }
        if (targetDbName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetDbName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            sqlDbInstanceName,
                            targetDbName,
                            migrationOperationId,
                            expand,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Retrieve the Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param migrationOperationId Optional migration operation ID. If this is provided, then details of migration
     *     operation for that ID are retrieved. If not provided (default), then details related to most recent or
     *     current operation are retrieved.
     * @param expand Complete migration details be included in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return database Migration Resource for SQL Database along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DatabaseMigrationSqlDbInner>> getWithResponseAsync(
        String resourceGroupName,
        String sqlDbInstanceName,
        String targetDbName,
        UUID migrationOperationId,
        String expand,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlDbInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlDbInstanceName is required and cannot be null."));
        }
        if (targetDbName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetDbName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                resourceGroupName,
                sqlDbInstanceName,
                targetDbName,
                migrationOperationId,
                expand,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Retrieve the Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param migrationOperationId Optional migration operation ID. If this is provided, then details of migration
     *     operation for that ID are retrieved. If not provided (default), then details related to most recent or
     *     current operation are retrieved.
     * @param expand Complete migration details be included in the response.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return database Migration Resource for SQL Database on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DatabaseMigrationSqlDbInner> getAsync(
        String resourceGroupName,
        String sqlDbInstanceName,
        String targetDbName,
        UUID migrationOperationId,
        String expand) {
        return getWithResponseAsync(resourceGroupName, sqlDbInstanceName, targetDbName, migrationOperationId, expand)
            .flatMap(
                (Response<DatabaseMigrationSqlDbInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Retrieve the Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return database Migration Resource for SQL Database on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DatabaseMigrationSqlDbInner> getAsync(
        String resourceGroupName, String sqlDbInstanceName, String targetDbName) {
        final UUID migrationOperationId = null;
        final String expand = null;
        return getWithResponseAsync(resourceGroupName, sqlDbInstanceName, targetDbName, migrationOperationId, expand)
            .flatMap(
                (Response<DatabaseMigrationSqlDbInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Retrieve the Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return database Migration Resource for SQL Database.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DatabaseMigrationSqlDbInner get(String resourceGroupName, String sqlDbInstanceName, String targetDbName) {
        final UUID migrationOperationId = null;
        final String expand = null;
        return getAsync(resourceGroupName, sqlDbInstanceName, targetDbName, migrationOperationId, expand).block();
    }

    /**
     * Retrieve the Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param migrationOperationId Optional migration operation ID. If this is provided, then details of migration
     *     operation for that ID are retrieved. If not provided (default), then details related to most recent or
     *     current operation are retrieved.
     * @param expand Complete migration details be included in the response.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return database Migration Resource for SQL Database along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DatabaseMigrationSqlDbInner> getWithResponse(
        String resourceGroupName,
        String sqlDbInstanceName,
        String targetDbName,
        UUID migrationOperationId,
        String expand,
        Context context) {
        return getWithResponseAsync(
                resourceGroupName, sqlDbInstanceName, targetDbName, migrationOperationId, expand, context)
            .block();
    }

    /**
     * Create or Update Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param parameters Details of Sql Db migration resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return database Migration Resource for SQL Database along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String sqlDbInstanceName,
        String targetDbName,
        DatabaseMigrationSqlDbInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlDbInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlDbInstanceName is required and cannot be null."));
        }
        if (targetDbName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetDbName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            sqlDbInstanceName,
                            targetDbName,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or Update Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param parameters Details of Sql Db migration resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return database Migration Resource for SQL Database along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String sqlDbInstanceName,
        String targetDbName,
        DatabaseMigrationSqlDbInner parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlDbInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlDbInstanceName is required and cannot be null."));
        }
        if (targetDbName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetDbName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                resourceGroupName,
                sqlDbInstanceName,
                targetDbName,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                parameters,
                accept,
                context);
    }

    /**
     * Create or Update Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param parameters Details of Sql Db migration resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of database Migration Resource for SQL Database.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DatabaseMigrationSqlDbInner>, DatabaseMigrationSqlDbInner> beginCreateOrUpdateAsync(
        String resourceGroupName,
        String sqlDbInstanceName,
        String targetDbName,
        DatabaseMigrationSqlDbInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, sqlDbInstanceName, targetDbName, parameters);
        return this
            .client
            .<DatabaseMigrationSqlDbInner, DatabaseMigrationSqlDbInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                DatabaseMigrationSqlDbInner.class,
                DatabaseMigrationSqlDbInner.class,
                this.client.getContext());
    }

    /**
     * Create or Update Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param parameters Details of Sql Db migration resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of database Migration Resource for SQL Database.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DatabaseMigrationSqlDbInner>, DatabaseMigrationSqlDbInner> beginCreateOrUpdateAsync(
        String resourceGroupName,
        String sqlDbInstanceName,
        String targetDbName,
        DatabaseMigrationSqlDbInner parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, sqlDbInstanceName, targetDbName, parameters, context);
        return this
            .client
            .<DatabaseMigrationSqlDbInner, DatabaseMigrationSqlDbInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                DatabaseMigrationSqlDbInner.class,
                DatabaseMigrationSqlDbInner.class,
                context);
    }

    /**
     * Create or Update Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param parameters Details of Sql Db migration resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of database Migration Resource for SQL Database.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DatabaseMigrationSqlDbInner>, DatabaseMigrationSqlDbInner> beginCreateOrUpdate(
        String resourceGroupName,
        String sqlDbInstanceName,
        String targetDbName,
        DatabaseMigrationSqlDbInner parameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, sqlDbInstanceName, targetDbName, parameters).getSyncPoller();
    }

    /**
     * Create or Update Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param parameters Details of Sql Db migration resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of database Migration Resource for SQL Database.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DatabaseMigrationSqlDbInner>, DatabaseMigrationSqlDbInner> beginCreateOrUpdate(
        String resourceGroupName,
        String sqlDbInstanceName,
        String targetDbName,
        DatabaseMigrationSqlDbInner parameters,
        Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, sqlDbInstanceName, targetDbName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Create or Update Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param parameters Details of Sql Db migration resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return database Migration Resource for SQL Database on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DatabaseMigrationSqlDbInner> createOrUpdateAsync(
        String resourceGroupName,
        String sqlDbInstanceName,
        String targetDbName,
        DatabaseMigrationSqlDbInner parameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, sqlDbInstanceName, targetDbName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or Update Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param parameters Details of Sql Db migration resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return database Migration Resource for SQL Database on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DatabaseMigrationSqlDbInner> createOrUpdateAsync(
        String resourceGroupName,
        String sqlDbInstanceName,
        String targetDbName,
        DatabaseMigrationSqlDbInner parameters,
        Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, sqlDbInstanceName, targetDbName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or Update Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param parameters Details of Sql Db migration resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return database Migration Resource for SQL Database.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DatabaseMigrationSqlDbInner createOrUpdate(
        String resourceGroupName,
        String sqlDbInstanceName,
        String targetDbName,
        DatabaseMigrationSqlDbInner parameters) {
        return createOrUpdateAsync(resourceGroupName, sqlDbInstanceName, targetDbName, parameters).block();
    }

    /**
     * Create or Update Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param parameters Details of Sql Db migration resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return database Migration Resource for SQL Database.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DatabaseMigrationSqlDbInner createOrUpdate(
        String resourceGroupName,
        String sqlDbInstanceName,
        String targetDbName,
        DatabaseMigrationSqlDbInner parameters,
        Context context) {
        return createOrUpdateAsync(resourceGroupName, sqlDbInstanceName, targetDbName, parameters, context).block();
    }

    /**
     * Delete Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param force Optional force delete boolean. If this is provided as true, migration will be deleted even if
     *     active.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String sqlDbInstanceName, String targetDbName, Boolean force) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlDbInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlDbInstanceName is required and cannot be null."));
        }
        if (targetDbName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetDbName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            sqlDbInstanceName,
                            targetDbName,
                            force,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param force Optional force delete boolean. If this is provided as true, migration will be deleted even if
     *     active.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String sqlDbInstanceName, String targetDbName, Boolean force, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlDbInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlDbInstanceName is required and cannot be null."));
        }
        if (targetDbName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetDbName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                resourceGroupName,
                sqlDbInstanceName,
                targetDbName,
                force,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                context);
    }

    /**
     * Delete Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param force Optional force delete boolean. If this is provided as true, migration will be deleted even if
     *     active.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String sqlDbInstanceName, String targetDbName, Boolean force) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, sqlDbInstanceName, targetDbName, force);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Delete Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param force Optional force delete boolean. If this is provided as true, migration will be deleted even if
     *     active.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String sqlDbInstanceName, String targetDbName, Boolean force, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, sqlDbInstanceName, targetDbName, force, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Delete Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param force Optional force delete boolean. If this is provided as true, migration will be deleted even if
     *     active.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String sqlDbInstanceName, String targetDbName, Boolean force) {
        return beginDeleteAsync(resourceGroupName, sqlDbInstanceName, targetDbName, force).getSyncPoller();
    }

    /**
     * Delete Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param force Optional force delete boolean. If this is provided as true, migration will be deleted even if
     *     active.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String sqlDbInstanceName, String targetDbName, Boolean force, Context context) {
        return beginDeleteAsync(resourceGroupName, sqlDbInstanceName, targetDbName, force, context).getSyncPoller();
    }

    /**
     * Delete Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param force Optional force delete boolean. If this is provided as true, migration will be deleted even if
     *     active.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName, String sqlDbInstanceName, String targetDbName, Boolean force) {
        return beginDeleteAsync(resourceGroupName, sqlDbInstanceName, targetDbName, force)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String sqlDbInstanceName, String targetDbName) {
        final Boolean force = null;
        return beginDeleteAsync(resourceGroupName, sqlDbInstanceName, targetDbName, force)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param force Optional force delete boolean. If this is provided as true, migration will be deleted even if
     *     active.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName, String sqlDbInstanceName, String targetDbName, Boolean force, Context context) {
        return beginDeleteAsync(resourceGroupName, sqlDbInstanceName, targetDbName, force, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param force Optional force delete boolean. If this is provided as true, migration will be deleted even if
     *     active.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String sqlDbInstanceName, String targetDbName, Boolean force) {
        deleteAsync(resourceGroupName, sqlDbInstanceName, targetDbName, force).block();
    }

    /**
     * Delete Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String sqlDbInstanceName, String targetDbName) {
        final Boolean force = null;
        deleteAsync(resourceGroupName, sqlDbInstanceName, targetDbName, force).block();
    }

    /**
     * Delete Database Migration resource.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param force Optional force delete boolean. If this is provided as true, migration will be deleted even if
     *     active.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String resourceGroupName, String sqlDbInstanceName, String targetDbName, Boolean force, Context context) {
        deleteAsync(resourceGroupName, sqlDbInstanceName, targetDbName, force, context).block();
    }

    /**
     * Stop on going migration for the database.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param parameters Required migration operation ID for which cancel will be initiated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> cancelWithResponseAsync(
        String resourceGroupName, String sqlDbInstanceName, String targetDbName, MigrationOperationInput parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlDbInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlDbInstanceName is required and cannot be null."));
        }
        if (targetDbName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetDbName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        return FluxUtil
            .withContext(
                context ->
                    service
                        .cancel(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            sqlDbInstanceName,
                            targetDbName,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            parameters,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Stop on going migration for the database.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param parameters Required migration operation ID for which cancel will be initiated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> cancelWithResponseAsync(
        String resourceGroupName,
        String sqlDbInstanceName,
        String targetDbName,
        MigrationOperationInput parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (sqlDbInstanceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter sqlDbInstanceName is required and cannot be null."));
        }
        if (targetDbName == null) {
            return Mono.error(new IllegalArgumentException("Parameter targetDbName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        context = this.client.mergeContext(context);
        return service
            .cancel(
                this.client.getEndpoint(),
                resourceGroupName,
                sqlDbInstanceName,
                targetDbName,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                parameters,
                context);
    }

    /**
     * Stop on going migration for the database.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param parameters Required migration operation ID for which cancel will be initiated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginCancelAsync(
        String resourceGroupName, String sqlDbInstanceName, String targetDbName, MigrationOperationInput parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            cancelWithResponseAsync(resourceGroupName, sqlDbInstanceName, targetDbName, parameters);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Stop on going migration for the database.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param parameters Required migration operation ID for which cancel will be initiated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginCancelAsync(
        String resourceGroupName,
        String sqlDbInstanceName,
        String targetDbName,
        MigrationOperationInput parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            cancelWithResponseAsync(resourceGroupName, sqlDbInstanceName, targetDbName, parameters, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Stop on going migration for the database.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param parameters Required migration operation ID for which cancel will be initiated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginCancel(
        String resourceGroupName, String sqlDbInstanceName, String targetDbName, MigrationOperationInput parameters) {
        return beginCancelAsync(resourceGroupName, sqlDbInstanceName, targetDbName, parameters).getSyncPoller();
    }

    /**
     * Stop on going migration for the database.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param parameters Required migration operation ID for which cancel will be initiated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginCancel(
        String resourceGroupName,
        String sqlDbInstanceName,
        String targetDbName,
        MigrationOperationInput parameters,
        Context context) {
        return beginCancelAsync(resourceGroupName, sqlDbInstanceName, targetDbName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Stop on going migration for the database.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param parameters Required migration operation ID for which cancel will be initiated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> cancelAsync(
        String resourceGroupName, String sqlDbInstanceName, String targetDbName, MigrationOperationInput parameters) {
        return beginCancelAsync(resourceGroupName, sqlDbInstanceName, targetDbName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Stop on going migration for the database.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param parameters Required migration operation ID for which cancel will be initiated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> cancelAsync(
        String resourceGroupName,
        String sqlDbInstanceName,
        String targetDbName,
        MigrationOperationInput parameters,
        Context context) {
        return beginCancelAsync(resourceGroupName, sqlDbInstanceName, targetDbName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Stop on going migration for the database.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param parameters Required migration operation ID for which cancel will be initiated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancel(
        String resourceGroupName, String sqlDbInstanceName, String targetDbName, MigrationOperationInput parameters) {
        cancelAsync(resourceGroupName, sqlDbInstanceName, targetDbName, parameters).block();
    }

    /**
     * Stop on going migration for the database.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlDbInstanceName The sqlDbInstanceName parameter.
     * @param targetDbName The name of the target database.
     * @param parameters Required migration operation ID for which cancel will be initiated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void cancel(
        String resourceGroupName,
        String sqlDbInstanceName,
        String targetDbName,
        MigrationOperationInput parameters,
        Context context) {
        cancelAsync(resourceGroupName, sqlDbInstanceName, targetDbName, parameters, context).block();
    }
}
