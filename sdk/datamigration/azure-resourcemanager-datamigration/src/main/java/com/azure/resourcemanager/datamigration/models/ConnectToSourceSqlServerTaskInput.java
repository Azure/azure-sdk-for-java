// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Input for the task that validates connection to SQL Server and also validates source server requirements.
 */
@Fluent
public final class ConnectToSourceSqlServerTaskInput implements JsonSerializable<ConnectToSourceSqlServerTaskInput> {
    /*
     * Connection information for Source SQL Server
     */
    private SqlConnectionInfo sourceConnectionInfo;

    /*
     * Permission group for validations
     */
    private ServerLevelPermissionsGroup checkPermissionsGroup;

    /*
     * Flag for whether to collect databases from source server.
     */
    private Boolean collectDatabases;

    /*
     * Flag for whether to collect logins from source server.
     */
    private Boolean collectLogins;

    /*
     * Flag for whether to collect agent jobs from source server.
     */
    private Boolean collectAgentJobs;

    /*
     * Flag for whether to collect TDE Certificate names from source server.
     */
    private Boolean collectTdeCertificateInfo;

    /*
     * Flag for whether to validate SSIS catalog is reachable on the source server.
     */
    private Boolean validateSsisCatalogOnly;

    /*
     * encrypted key for secure fields
     */
    private String encryptedKeyForSecureFields;

    /**
     * Creates an instance of ConnectToSourceSqlServerTaskInput class.
     */
    public ConnectToSourceSqlServerTaskInput() {
    }

    /**
     * Get the sourceConnectionInfo property: Connection information for Source SQL Server.
     * 
     * @return the sourceConnectionInfo value.
     */
    public SqlConnectionInfo sourceConnectionInfo() {
        return this.sourceConnectionInfo;
    }

    /**
     * Set the sourceConnectionInfo property: Connection information for Source SQL Server.
     * 
     * @param sourceConnectionInfo the sourceConnectionInfo value to set.
     * @return the ConnectToSourceSqlServerTaskInput object itself.
     */
    public ConnectToSourceSqlServerTaskInput withSourceConnectionInfo(SqlConnectionInfo sourceConnectionInfo) {
        this.sourceConnectionInfo = sourceConnectionInfo;
        return this;
    }

    /**
     * Get the checkPermissionsGroup property: Permission group for validations.
     * 
     * @return the checkPermissionsGroup value.
     */
    public ServerLevelPermissionsGroup checkPermissionsGroup() {
        return this.checkPermissionsGroup;
    }

    /**
     * Set the checkPermissionsGroup property: Permission group for validations.
     * 
     * @param checkPermissionsGroup the checkPermissionsGroup value to set.
     * @return the ConnectToSourceSqlServerTaskInput object itself.
     */
    public ConnectToSourceSqlServerTaskInput
        withCheckPermissionsGroup(ServerLevelPermissionsGroup checkPermissionsGroup) {
        this.checkPermissionsGroup = checkPermissionsGroup;
        return this;
    }

    /**
     * Get the collectDatabases property: Flag for whether to collect databases from source server.
     * 
     * @return the collectDatabases value.
     */
    public Boolean collectDatabases() {
        return this.collectDatabases;
    }

    /**
     * Set the collectDatabases property: Flag for whether to collect databases from source server.
     * 
     * @param collectDatabases the collectDatabases value to set.
     * @return the ConnectToSourceSqlServerTaskInput object itself.
     */
    public ConnectToSourceSqlServerTaskInput withCollectDatabases(Boolean collectDatabases) {
        this.collectDatabases = collectDatabases;
        return this;
    }

    /**
     * Get the collectLogins property: Flag for whether to collect logins from source server.
     * 
     * @return the collectLogins value.
     */
    public Boolean collectLogins() {
        return this.collectLogins;
    }

    /**
     * Set the collectLogins property: Flag for whether to collect logins from source server.
     * 
     * @param collectLogins the collectLogins value to set.
     * @return the ConnectToSourceSqlServerTaskInput object itself.
     */
    public ConnectToSourceSqlServerTaskInput withCollectLogins(Boolean collectLogins) {
        this.collectLogins = collectLogins;
        return this;
    }

    /**
     * Get the collectAgentJobs property: Flag for whether to collect agent jobs from source server.
     * 
     * @return the collectAgentJobs value.
     */
    public Boolean collectAgentJobs() {
        return this.collectAgentJobs;
    }

    /**
     * Set the collectAgentJobs property: Flag for whether to collect agent jobs from source server.
     * 
     * @param collectAgentJobs the collectAgentJobs value to set.
     * @return the ConnectToSourceSqlServerTaskInput object itself.
     */
    public ConnectToSourceSqlServerTaskInput withCollectAgentJobs(Boolean collectAgentJobs) {
        this.collectAgentJobs = collectAgentJobs;
        return this;
    }

    /**
     * Get the collectTdeCertificateInfo property: Flag for whether to collect TDE Certificate names from source server.
     * 
     * @return the collectTdeCertificateInfo value.
     */
    public Boolean collectTdeCertificateInfo() {
        return this.collectTdeCertificateInfo;
    }

    /**
     * Set the collectTdeCertificateInfo property: Flag for whether to collect TDE Certificate names from source server.
     * 
     * @param collectTdeCertificateInfo the collectTdeCertificateInfo value to set.
     * @return the ConnectToSourceSqlServerTaskInput object itself.
     */
    public ConnectToSourceSqlServerTaskInput withCollectTdeCertificateInfo(Boolean collectTdeCertificateInfo) {
        this.collectTdeCertificateInfo = collectTdeCertificateInfo;
        return this;
    }

    /**
     * Get the validateSsisCatalogOnly property: Flag for whether to validate SSIS catalog is reachable on the source
     * server.
     * 
     * @return the validateSsisCatalogOnly value.
     */
    public Boolean validateSsisCatalogOnly() {
        return this.validateSsisCatalogOnly;
    }

    /**
     * Set the validateSsisCatalogOnly property: Flag for whether to validate SSIS catalog is reachable on the source
     * server.
     * 
     * @param validateSsisCatalogOnly the validateSsisCatalogOnly value to set.
     * @return the ConnectToSourceSqlServerTaskInput object itself.
     */
    public ConnectToSourceSqlServerTaskInput withValidateSsisCatalogOnly(Boolean validateSsisCatalogOnly) {
        this.validateSsisCatalogOnly = validateSsisCatalogOnly;
        return this;
    }

    /**
     * Get the encryptedKeyForSecureFields property: encrypted key for secure fields.
     * 
     * @return the encryptedKeyForSecureFields value.
     */
    public String encryptedKeyForSecureFields() {
        return this.encryptedKeyForSecureFields;
    }

    /**
     * Set the encryptedKeyForSecureFields property: encrypted key for secure fields.
     * 
     * @param encryptedKeyForSecureFields the encryptedKeyForSecureFields value to set.
     * @return the ConnectToSourceSqlServerTaskInput object itself.
     */
    public ConnectToSourceSqlServerTaskInput withEncryptedKeyForSecureFields(String encryptedKeyForSecureFields) {
        this.encryptedKeyForSecureFields = encryptedKeyForSecureFields;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceConnectionInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceConnectionInfo in model ConnectToSourceSqlServerTaskInput"));
        } else {
            sourceConnectionInfo().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConnectToSourceSqlServerTaskInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("sourceConnectionInfo", this.sourceConnectionInfo);
        jsonWriter.writeStringField("checkPermissionsGroup",
            this.checkPermissionsGroup == null ? null : this.checkPermissionsGroup.toString());
        jsonWriter.writeBooleanField("collectDatabases", this.collectDatabases);
        jsonWriter.writeBooleanField("collectLogins", this.collectLogins);
        jsonWriter.writeBooleanField("collectAgentJobs", this.collectAgentJobs);
        jsonWriter.writeBooleanField("collectTdeCertificateInfo", this.collectTdeCertificateInfo);
        jsonWriter.writeBooleanField("validateSsisCatalogOnly", this.validateSsisCatalogOnly);
        jsonWriter.writeStringField("encryptedKeyForSecureFields", this.encryptedKeyForSecureFields);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectToSourceSqlServerTaskInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectToSourceSqlServerTaskInput if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConnectToSourceSqlServerTaskInput.
     */
    public static ConnectToSourceSqlServerTaskInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectToSourceSqlServerTaskInput deserializedConnectToSourceSqlServerTaskInput
                = new ConnectToSourceSqlServerTaskInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceConnectionInfo".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskInput.sourceConnectionInfo
                        = SqlConnectionInfo.fromJson(reader);
                } else if ("checkPermissionsGroup".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskInput.checkPermissionsGroup
                        = ServerLevelPermissionsGroup.fromString(reader.getString());
                } else if ("collectDatabases".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskInput.collectDatabases
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("collectLogins".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskInput.collectLogins
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("collectAgentJobs".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskInput.collectAgentJobs
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("collectTdeCertificateInfo".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskInput.collectTdeCertificateInfo
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("validateSsisCatalogOnly".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskInput.validateSsisCatalogOnly
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("encryptedKeyForSecureFields".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskInput.encryptedKeyForSecureFields = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectToSourceSqlServerTaskInput;
        });
    }
}
