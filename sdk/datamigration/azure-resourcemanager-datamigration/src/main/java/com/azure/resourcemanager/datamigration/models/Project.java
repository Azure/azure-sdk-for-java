// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.datamigration.fluent.models.ProjectInner;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of Project. */
public interface Project {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the sourcePlatform property: Source platform for the project.
     *
     * @return the sourcePlatform value.
     */
    ProjectSourcePlatform sourcePlatform();

    /**
     * Gets the targetPlatform property: Target platform for the project.
     *
     * @return the targetPlatform value.
     */
    ProjectTargetPlatform targetPlatform();

    /**
     * Gets the creationTime property: UTC Date and time when project was created.
     *
     * @return the creationTime value.
     */
    OffsetDateTime creationTime();

    /**
     * Gets the sourceConnectionInfo property: Information for connecting to source.
     *
     * @return the sourceConnectionInfo value.
     */
    ConnectionInfo sourceConnectionInfo();

    /**
     * Gets the targetConnectionInfo property: Information for connecting to target.
     *
     * @return the targetConnectionInfo value.
     */
    ConnectionInfo targetConnectionInfo();

    /**
     * Gets the databasesInfo property: List of DatabaseInfo.
     *
     * @return the databasesInfo value.
     */
    List<DatabaseInfo> databasesInfo();

    /**
     * Gets the provisioningState property: The project's provisioning state.
     *
     * @return the provisioningState value.
     */
    ProjectProvisioningState provisioningState();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.datamigration.fluent.models.ProjectInner object.
     *
     * @return the inner object.
     */
    ProjectInner innerModel();

    /** The entirety of the Project definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The Project definition stages. */
    interface DefinitionStages {
        /** The first stage of the Project definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the Project definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the Project definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies groupName, serviceName.
             *
             * @param groupName Name of the resource group.
             * @param serviceName Name of the service.
             * @return the next definition stage.
             */
            WithCreate withExistingService(String groupName, String serviceName);
        }
        /**
         * The stage of the Project definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithSourcePlatform,
                DefinitionStages.WithTargetPlatform,
                DefinitionStages.WithSourceConnectionInfo,
                DefinitionStages.WithTargetConnectionInfo,
                DefinitionStages.WithDatabasesInfo {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Project create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Project create(Context context);
        }
        /** The stage of the Project definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the Project definition allowing to specify sourcePlatform. */
        interface WithSourcePlatform {
            /**
             * Specifies the sourcePlatform property: Source platform for the project.
             *
             * @param sourcePlatform Source platform for the project.
             * @return the next definition stage.
             */
            WithCreate withSourcePlatform(ProjectSourcePlatform sourcePlatform);
        }
        /** The stage of the Project definition allowing to specify targetPlatform. */
        interface WithTargetPlatform {
            /**
             * Specifies the targetPlatform property: Target platform for the project.
             *
             * @param targetPlatform Target platform for the project.
             * @return the next definition stage.
             */
            WithCreate withTargetPlatform(ProjectTargetPlatform targetPlatform);
        }
        /** The stage of the Project definition allowing to specify sourceConnectionInfo. */
        interface WithSourceConnectionInfo {
            /**
             * Specifies the sourceConnectionInfo property: Information for connecting to source.
             *
             * @param sourceConnectionInfo Information for connecting to source.
             * @return the next definition stage.
             */
            WithCreate withSourceConnectionInfo(ConnectionInfo sourceConnectionInfo);
        }
        /** The stage of the Project definition allowing to specify targetConnectionInfo. */
        interface WithTargetConnectionInfo {
            /**
             * Specifies the targetConnectionInfo property: Information for connecting to target.
             *
             * @param targetConnectionInfo Information for connecting to target.
             * @return the next definition stage.
             */
            WithCreate withTargetConnectionInfo(ConnectionInfo targetConnectionInfo);
        }
        /** The stage of the Project definition allowing to specify databasesInfo. */
        interface WithDatabasesInfo {
            /**
             * Specifies the databasesInfo property: List of DatabaseInfo.
             *
             * @param databasesInfo List of DatabaseInfo.
             * @return the next definition stage.
             */
            WithCreate withDatabasesInfo(List<DatabaseInfo> databasesInfo);
        }
    }
    /**
     * Begins update for the Project resource.
     *
     * @return the stage of resource update.
     */
    Project.Update update();

    /** The template for Project update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithSourcePlatform,
            UpdateStages.WithTargetPlatform,
            UpdateStages.WithSourceConnectionInfo,
            UpdateStages.WithTargetConnectionInfo,
            UpdateStages.WithDatabasesInfo {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Project apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Project apply(Context context);
    }
    /** The Project update stages. */
    interface UpdateStages {
        /** The stage of the Project update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the Project update allowing to specify sourcePlatform. */
        interface WithSourcePlatform {
            /**
             * Specifies the sourcePlatform property: Source platform for the project.
             *
             * @param sourcePlatform Source platform for the project.
             * @return the next definition stage.
             */
            Update withSourcePlatform(ProjectSourcePlatform sourcePlatform);
        }
        /** The stage of the Project update allowing to specify targetPlatform. */
        interface WithTargetPlatform {
            /**
             * Specifies the targetPlatform property: Target platform for the project.
             *
             * @param targetPlatform Target platform for the project.
             * @return the next definition stage.
             */
            Update withTargetPlatform(ProjectTargetPlatform targetPlatform);
        }
        /** The stage of the Project update allowing to specify sourceConnectionInfo. */
        interface WithSourceConnectionInfo {
            /**
             * Specifies the sourceConnectionInfo property: Information for connecting to source.
             *
             * @param sourceConnectionInfo Information for connecting to source.
             * @return the next definition stage.
             */
            Update withSourceConnectionInfo(ConnectionInfo sourceConnectionInfo);
        }
        /** The stage of the Project update allowing to specify targetConnectionInfo. */
        interface WithTargetConnectionInfo {
            /**
             * Specifies the targetConnectionInfo property: Information for connecting to target.
             *
             * @param targetConnectionInfo Information for connecting to target.
             * @return the next definition stage.
             */
            Update withTargetConnectionInfo(ConnectionInfo targetConnectionInfo);
        }
        /** The stage of the Project update allowing to specify databasesInfo. */
        interface WithDatabasesInfo {
            /**
             * Specifies the databasesInfo property: List of DatabaseInfo.
             *
             * @param databasesInfo List of DatabaseInfo.
             * @return the next definition stage.
             */
            Update withDatabasesInfo(List<DatabaseInfo> databasesInfo);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Project refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Project refresh(Context context);
}
