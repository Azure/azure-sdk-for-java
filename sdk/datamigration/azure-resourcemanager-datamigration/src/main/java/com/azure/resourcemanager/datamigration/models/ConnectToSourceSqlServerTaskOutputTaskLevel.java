// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Task level output for the task that validates connection to SQL Server and also validates source server requirements.
 */
@Immutable
public final class ConnectToSourceSqlServerTaskOutputTaskLevel extends ConnectToSourceSqlServerTaskOutput {
    /*
     * Type of result - database level or task level
     */
    private String resultType = "TaskLevelOutput";

    /*
     * Source databases as a map from database name to database id
     */
    private String databases;

    /*
     * Source logins as a map from login name to login id.
     */
    private String logins;

    /*
     * Source agent jobs as a map from agent job name to id.
     */
    private String agentJobs;

    /*
     * Source server version
     */
    private String sourceServerVersion;

    /*
     * Source server brand version
     */
    private String sourceServerBrandVersion;

    /*
     * Validation errors
     */
    private List<ReportableException> validationErrors;

    /*
     * Result identifier
     */
    private String id;

    /**
     * Creates an instance of ConnectToSourceSqlServerTaskOutputTaskLevel class.
     */
    public ConnectToSourceSqlServerTaskOutputTaskLevel() {
    }

    /**
     * Get the resultType property: Type of result - database level or task level.
     * 
     * @return the resultType value.
     */
    @Override
    public String resultType() {
        return this.resultType;
    }

    /**
     * Get the databases property: Source databases as a map from database name to database id.
     * 
     * @return the databases value.
     */
    public String databases() {
        return this.databases;
    }

    /**
     * Get the logins property: Source logins as a map from login name to login id.
     * 
     * @return the logins value.
     */
    public String logins() {
        return this.logins;
    }

    /**
     * Get the agentJobs property: Source agent jobs as a map from agent job name to id.
     * 
     * @return the agentJobs value.
     */
    public String agentJobs() {
        return this.agentJobs;
    }

    /**
     * Get the sourceServerVersion property: Source server version.
     * 
     * @return the sourceServerVersion value.
     */
    public String sourceServerVersion() {
        return this.sourceServerVersion;
    }

    /**
     * Get the sourceServerBrandVersion property: Source server brand version.
     * 
     * @return the sourceServerBrandVersion value.
     */
    public String sourceServerBrandVersion() {
        return this.sourceServerBrandVersion;
    }

    /**
     * Get the validationErrors property: Validation errors.
     * 
     * @return the validationErrors value.
     */
    public List<ReportableException> validationErrors() {
        return this.validationErrors;
    }

    /**
     * Get the id property: Result identifier.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (validationErrors() != null) {
            validationErrors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resultType", this.resultType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectToSourceSqlServerTaskOutputTaskLevel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectToSourceSqlServerTaskOutputTaskLevel if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectToSourceSqlServerTaskOutputTaskLevel.
     */
    public static ConnectToSourceSqlServerTaskOutputTaskLevel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectToSourceSqlServerTaskOutputTaskLevel deserializedConnectToSourceSqlServerTaskOutputTaskLevel
                = new ConnectToSourceSqlServerTaskOutputTaskLevel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskOutputTaskLevel.id = reader.getString();
                } else if ("resultType".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskOutputTaskLevel.resultType = reader.getString();
                } else if ("databases".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskOutputTaskLevel.databases = reader.getString();
                } else if ("logins".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskOutputTaskLevel.logins = reader.getString();
                } else if ("agentJobs".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskOutputTaskLevel.agentJobs = reader.getString();
                } else if ("sourceServerVersion".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskOutputTaskLevel.sourceServerVersion = reader.getString();
                } else if ("sourceServerBrandVersion".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskOutputTaskLevel.sourceServerBrandVersion
                        = reader.getString();
                } else if ("validationErrors".equals(fieldName)) {
                    List<ReportableException> validationErrors
                        = reader.readArray(reader1 -> ReportableException.fromJson(reader1));
                    deserializedConnectToSourceSqlServerTaskOutputTaskLevel.validationErrors = validationErrors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectToSourceSqlServerTaskOutputTaskLevel;
        });
    }
}
