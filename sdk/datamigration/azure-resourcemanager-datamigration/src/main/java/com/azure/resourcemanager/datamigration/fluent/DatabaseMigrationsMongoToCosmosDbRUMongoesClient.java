// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.datamigration.fluent.models.DatabaseMigrationCosmosDbMongoInner;

/**
 * An instance of this class provides access to all the operations defined in
 * DatabaseMigrationsMongoToCosmosDbRUMongoesClient.
 */
public interface DatabaseMigrationsMongoToCosmosDbRUMongoesClient {
    /**
     * Get Database Migration resource.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param targetResourceName The name of the target resource/account.
     * @param migrationName Name of the migration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return database Migration resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DatabaseMigrationCosmosDbMongoInner> getWithResponse(String resourceGroupName, String targetResourceName,
        String migrationName, Context context);

    /**
     * Get Database Migration resource.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param targetResourceName The name of the target resource/account.
     * @param migrationName Name of the migration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return database Migration resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DatabaseMigrationCosmosDbMongoInner get(String resourceGroupName, String targetResourceName, String migrationName);

    /**
     * Create or Update Database Migration resource.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param targetResourceName The name of the target resource/account.
     * @param migrationName Name of the migration.
     * @param parameters Details of CosmosDB for Mongo API Migration resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of database Migration Resource for Mongo to CosmosDb.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DatabaseMigrationCosmosDbMongoInner>, DatabaseMigrationCosmosDbMongoInner> beginCreate(
        String resourceGroupName, String targetResourceName, String migrationName,
        DatabaseMigrationCosmosDbMongoInner parameters);

    /**
     * Create or Update Database Migration resource.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param targetResourceName The name of the target resource/account.
     * @param migrationName Name of the migration.
     * @param parameters Details of CosmosDB for Mongo API Migration resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of database Migration Resource for Mongo to CosmosDb.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<DatabaseMigrationCosmosDbMongoInner>, DatabaseMigrationCosmosDbMongoInner> beginCreate(
        String resourceGroupName, String targetResourceName, String migrationName,
        DatabaseMigrationCosmosDbMongoInner parameters, Context context);

    /**
     * Create or Update Database Migration resource.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param targetResourceName The name of the target resource/account.
     * @param migrationName Name of the migration.
     * @param parameters Details of CosmosDB for Mongo API Migration resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return database Migration Resource for Mongo to CosmosDb.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DatabaseMigrationCosmosDbMongoInner create(String resourceGroupName, String targetResourceName,
        String migrationName, DatabaseMigrationCosmosDbMongoInner parameters);

    /**
     * Create or Update Database Migration resource.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param targetResourceName The name of the target resource/account.
     * @param migrationName Name of the migration.
     * @param parameters Details of CosmosDB for Mongo API Migration resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return database Migration Resource for Mongo to CosmosDb.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DatabaseMigrationCosmosDbMongoInner create(String resourceGroupName, String targetResourceName,
        String migrationName, DatabaseMigrationCosmosDbMongoInner parameters, Context context);

    /**
     * Delete Database Migration resource.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param targetResourceName The name of the target resource/account.
     * @param migrationName Name of the migration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String targetResourceName,
        String migrationName);

    /**
     * Delete Database Migration resource.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param targetResourceName The name of the target resource/account.
     * @param migrationName Name of the migration.
     * @param force Optional force delete boolean. If this is provided as true, migration will be deleted even if
     * active.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String targetResourceName,
        String migrationName, Boolean force, Context context);

    /**
     * Delete Database Migration resource.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param targetResourceName The name of the target resource/account.
     * @param migrationName Name of the migration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String targetResourceName, String migrationName);

    /**
     * Delete Database Migration resource.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param targetResourceName The name of the target resource/account.
     * @param migrationName Name of the migration.
     * @param force Optional force delete boolean. If this is provided as true, migration will be deleted even if
     * active.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String targetResourceName, String migrationName, Boolean force,
        Context context);

    /**
     * Get Database Migration resources for the scope.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param targetResourceName The name of the target resource/account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return database Migration resources for the scope as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DatabaseMigrationCosmosDbMongoInner> getForScope(String resourceGroupName, String targetResourceName);

    /**
     * Get Database Migration resources for the scope.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param targetResourceName The name of the target resource/account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return database Migration resources for the scope as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DatabaseMigrationCosmosDbMongoInner> getForScope(String resourceGroupName, String targetResourceName,
        Context context);
}
