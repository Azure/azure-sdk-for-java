// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The MigrateSqlServerSqlMISyncTaskOutputMigrationLevel model.
 */
@Immutable
public final class MigrateSqlServerSqlMISyncTaskOutputMigrationLevel extends MigrateSqlServerSqlMISyncTaskOutput {
    /*
     * Result type
     */
    private String resultType = "MigrationLevelOutput";

    /*
     * Count of databases
     */
    private Integer databaseCount;

    /*
     * Current state of migration
     */
    private MigrationState state;

    /*
     * Migration start time
     */
    private OffsetDateTime startedOn;

    /*
     * Migration end time
     */
    private OffsetDateTime endedOn;

    /*
     * Source server name
     */
    private String sourceServerName;

    /*
     * Source server version
     */
    private String sourceServerVersion;

    /*
     * Source server brand version
     */
    private String sourceServerBrandVersion;

    /*
     * Target server name
     */
    private String targetServerName;

    /*
     * Target server version
     */
    private String targetServerVersion;

    /*
     * Target server brand version
     */
    private String targetServerBrandVersion;

    /*
     * Number of database level errors
     */
    private Integer databaseErrorCount;

    /*
     * Result identifier
     */
    private String id;

    /**
     * Creates an instance of MigrateSqlServerSqlMISyncTaskOutputMigrationLevel class.
     */
    public MigrateSqlServerSqlMISyncTaskOutputMigrationLevel() {
    }

    /**
     * Get the resultType property: Result type.
     * 
     * @return the resultType value.
     */
    @Override
    public String resultType() {
        return this.resultType;
    }

    /**
     * Get the databaseCount property: Count of databases.
     * 
     * @return the databaseCount value.
     */
    public Integer databaseCount() {
        return this.databaseCount;
    }

    /**
     * Get the state property: Current state of migration.
     * 
     * @return the state value.
     */
    public MigrationState state() {
        return this.state;
    }

    /**
     * Get the startedOn property: Migration start time.
     * 
     * @return the startedOn value.
     */
    public OffsetDateTime startedOn() {
        return this.startedOn;
    }

    /**
     * Get the endedOn property: Migration end time.
     * 
     * @return the endedOn value.
     */
    public OffsetDateTime endedOn() {
        return this.endedOn;
    }

    /**
     * Get the sourceServerName property: Source server name.
     * 
     * @return the sourceServerName value.
     */
    public String sourceServerName() {
        return this.sourceServerName;
    }

    /**
     * Get the sourceServerVersion property: Source server version.
     * 
     * @return the sourceServerVersion value.
     */
    public String sourceServerVersion() {
        return this.sourceServerVersion;
    }

    /**
     * Get the sourceServerBrandVersion property: Source server brand version.
     * 
     * @return the sourceServerBrandVersion value.
     */
    public String sourceServerBrandVersion() {
        return this.sourceServerBrandVersion;
    }

    /**
     * Get the targetServerName property: Target server name.
     * 
     * @return the targetServerName value.
     */
    public String targetServerName() {
        return this.targetServerName;
    }

    /**
     * Get the targetServerVersion property: Target server version.
     * 
     * @return the targetServerVersion value.
     */
    public String targetServerVersion() {
        return this.targetServerVersion;
    }

    /**
     * Get the targetServerBrandVersion property: Target server brand version.
     * 
     * @return the targetServerBrandVersion value.
     */
    public String targetServerBrandVersion() {
        return this.targetServerBrandVersion;
    }

    /**
     * Get the databaseErrorCount property: Number of database level errors.
     * 
     * @return the databaseErrorCount value.
     */
    public Integer databaseErrorCount() {
        return this.databaseErrorCount;
    }

    /**
     * Get the id property: Result identifier.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resultType", this.resultType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrateSqlServerSqlMISyncTaskOutputMigrationLevel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrateSqlServerSqlMISyncTaskOutputMigrationLevel if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrateSqlServerSqlMISyncTaskOutputMigrationLevel.
     */
    public static MigrateSqlServerSqlMISyncTaskOutputMigrationLevel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrateSqlServerSqlMISyncTaskOutputMigrationLevel deserializedMigrateSqlServerSqlMISyncTaskOutputMigrationLevel
                = new MigrateSqlServerSqlMISyncTaskOutputMigrationLevel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMISyncTaskOutputMigrationLevel.id = reader.getString();
                } else if ("resultType".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMISyncTaskOutputMigrationLevel.resultType = reader.getString();
                } else if ("databaseCount".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMISyncTaskOutputMigrationLevel.databaseCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("state".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMISyncTaskOutputMigrationLevel.state
                        = MigrationState.fromString(reader.getString());
                } else if ("startedOn".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMISyncTaskOutputMigrationLevel.startedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endedOn".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMISyncTaskOutputMigrationLevel.endedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("sourceServerName".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMISyncTaskOutputMigrationLevel.sourceServerName = reader.getString();
                } else if ("sourceServerVersion".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMISyncTaskOutputMigrationLevel.sourceServerVersion
                        = reader.getString();
                } else if ("sourceServerBrandVersion".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMISyncTaskOutputMigrationLevel.sourceServerBrandVersion
                        = reader.getString();
                } else if ("targetServerName".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMISyncTaskOutputMigrationLevel.targetServerName = reader.getString();
                } else if ("targetServerVersion".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMISyncTaskOutputMigrationLevel.targetServerVersion
                        = reader.getString();
                } else if ("targetServerBrandVersion".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMISyncTaskOutputMigrationLevel.targetServerBrandVersion
                        = reader.getString();
                } else if ("databaseErrorCount".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMISyncTaskOutputMigrationLevel.databaseErrorCount
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrateSqlServerSqlMISyncTaskOutputMigrationLevel;
        });
    }
}
