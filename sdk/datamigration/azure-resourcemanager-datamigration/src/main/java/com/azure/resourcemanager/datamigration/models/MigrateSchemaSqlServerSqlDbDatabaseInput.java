// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Database input for migrate schema Sql Server to Azure SQL Server scenario.
 */
@Fluent
public final class MigrateSchemaSqlServerSqlDbDatabaseInput
    implements JsonSerializable<MigrateSchemaSqlServerSqlDbDatabaseInput> {
    /*
     * Name of source database
     */
    private String name;

    /*
     * Id of the source database
     */
    private String id;

    /*
     * Name of target database
     */
    private String targetDatabaseName;

    /*
     * Database schema migration settings
     */
    private SchemaMigrationSetting schemaSetting;

    /**
     * Creates an instance of MigrateSchemaSqlServerSqlDbDatabaseInput class.
     */
    public MigrateSchemaSqlServerSqlDbDatabaseInput() {
    }

    /**
     * Get the name property: Name of source database.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of source database.
     * 
     * @param name the name value to set.
     * @return the MigrateSchemaSqlServerSqlDbDatabaseInput object itself.
     */
    public MigrateSchemaSqlServerSqlDbDatabaseInput withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the id property: Id of the source database.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Id of the source database.
     * 
     * @param id the id value to set.
     * @return the MigrateSchemaSqlServerSqlDbDatabaseInput object itself.
     */
    public MigrateSchemaSqlServerSqlDbDatabaseInput withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the targetDatabaseName property: Name of target database.
     * 
     * @return the targetDatabaseName value.
     */
    public String targetDatabaseName() {
        return this.targetDatabaseName;
    }

    /**
     * Set the targetDatabaseName property: Name of target database.
     * 
     * @param targetDatabaseName the targetDatabaseName value to set.
     * @return the MigrateSchemaSqlServerSqlDbDatabaseInput object itself.
     */
    public MigrateSchemaSqlServerSqlDbDatabaseInput withTargetDatabaseName(String targetDatabaseName) {
        this.targetDatabaseName = targetDatabaseName;
        return this;
    }

    /**
     * Get the schemaSetting property: Database schema migration settings.
     * 
     * @return the schemaSetting value.
     */
    public SchemaMigrationSetting schemaSetting() {
        return this.schemaSetting;
    }

    /**
     * Set the schemaSetting property: Database schema migration settings.
     * 
     * @param schemaSetting the schemaSetting value to set.
     * @return the MigrateSchemaSqlServerSqlDbDatabaseInput object itself.
     */
    public MigrateSchemaSqlServerSqlDbDatabaseInput withSchemaSetting(SchemaMigrationSetting schemaSetting) {
        this.schemaSetting = schemaSetting;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (schemaSetting() != null) {
            schemaSetting().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("targetDatabaseName", this.targetDatabaseName);
        jsonWriter.writeJsonField("schemaSetting", this.schemaSetting);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrateSchemaSqlServerSqlDbDatabaseInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrateSchemaSqlServerSqlDbDatabaseInput if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrateSchemaSqlServerSqlDbDatabaseInput.
     */
    public static MigrateSchemaSqlServerSqlDbDatabaseInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrateSchemaSqlServerSqlDbDatabaseInput deserializedMigrateSchemaSqlServerSqlDbDatabaseInput
                = new MigrateSchemaSqlServerSqlDbDatabaseInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbDatabaseInput.name = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbDatabaseInput.id = reader.getString();
                } else if ("targetDatabaseName".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbDatabaseInput.targetDatabaseName = reader.getString();
                } else if ("schemaSetting".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbDatabaseInput.schemaSetting
                        = SchemaMigrationSetting.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrateSchemaSqlServerSqlDbDatabaseInput;
        });
    }
}
