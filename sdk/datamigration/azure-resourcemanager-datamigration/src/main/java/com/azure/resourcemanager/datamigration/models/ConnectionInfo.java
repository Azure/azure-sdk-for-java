// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the connection properties of a server.
 */
@Fluent
public class ConnectionInfo implements JsonSerializable<ConnectionInfo> {
    /*
     * Type of connection info
     */
    private String type = "ConnectionInfo";

    /*
     * User name
     */
    private String username;

    /*
     * Password credential.
     */
    private String password;

    /**
     * Creates an instance of ConnectionInfo class.
     */
    public ConnectionInfo() {
    }

    /**
     * Get the type property: Type of connection info.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the username property: User name.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: User name.
     * 
     * @param username the username value to set.
     * @return the ConnectionInfo object itself.
     */
    public ConnectionInfo withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: Password credential.
     * 
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: Password credential.
     * 
     * @param password the password value to set.
     * @return the ConnectionInfo object itself.
     */
    public ConnectionInfo withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("userName", this.username);
        jsonWriter.writeStringField("password", this.password);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectionInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectionInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectionInfo.
     */
    public static ConnectionInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("SqlConnectionInfo".equals(discriminatorValue)) {
                    return SqlConnectionInfo.fromJson(readerToUse.reset());
                } else if ("MySqlConnectionInfo".equals(discriminatorValue)) {
                    return MySqlConnectionInfo.fromJson(readerToUse.reset());
                } else if ("PostgreSqlConnectionInfo".equals(discriminatorValue)) {
                    return PostgreSqlConnectionInfo.fromJson(readerToUse.reset());
                } else if ("MiSqlConnectionInfo".equals(discriminatorValue)) {
                    return MiSqlConnectionInfo.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static ConnectionInfo fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectionInfo deserializedConnectionInfo = new ConnectionInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedConnectionInfo.type = reader.getString();
                } else if ("userName".equals(fieldName)) {
                    deserializedConnectionInfo.username = reader.getString();
                } else if ("password".equals(fieldName)) {
                    deserializedConnectionInfo.password = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectionInfo;
        });
    }
}
