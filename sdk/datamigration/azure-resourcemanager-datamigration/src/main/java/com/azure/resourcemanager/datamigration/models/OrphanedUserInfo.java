// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Information of orphaned users on the SQL server database.
 */
@Fluent
public final class OrphanedUserInfo implements JsonSerializable<OrphanedUserInfo> {
    /*
     * Name of the orphaned user
     */
    private String name;

    /*
     * Parent database of the user
     */
    private String databaseName;

    /**
     * Creates an instance of OrphanedUserInfo class.
     */
    public OrphanedUserInfo() {
    }

    /**
     * Get the name property: Name of the orphaned user.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the orphaned user.
     * 
     * @param name the name value to set.
     * @return the OrphanedUserInfo object itself.
     */
    public OrphanedUserInfo withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the databaseName property: Parent database of the user.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: Parent database of the user.
     * 
     * @param databaseName the databaseName value to set.
     * @return the OrphanedUserInfo object itself.
     */
    public OrphanedUserInfo withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("databaseName", this.databaseName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OrphanedUserInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OrphanedUserInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the OrphanedUserInfo.
     */
    public static OrphanedUserInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OrphanedUserInfo deserializedOrphanedUserInfo = new OrphanedUserInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedOrphanedUserInfo.name = reader.getString();
                } else if ("databaseName".equals(fieldName)) {
                    deserializedOrphanedUserInfo.databaseName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOrphanedUserInfo;
        });
    }
}
