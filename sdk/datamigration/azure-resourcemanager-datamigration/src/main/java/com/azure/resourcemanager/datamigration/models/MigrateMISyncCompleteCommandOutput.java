// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Output for command that completes online migration for an Azure SQL Database Managed Instance.
 */
@Fluent
public final class MigrateMISyncCompleteCommandOutput implements JsonSerializable<MigrateMISyncCompleteCommandOutput> {
    /*
     * List of errors that happened during the command execution
     */
    private List<ReportableException> errors;

    /**
     * Creates an instance of MigrateMISyncCompleteCommandOutput class.
     */
    public MigrateMISyncCompleteCommandOutput() {
    }

    /**
     * Get the errors property: List of errors that happened during the command execution.
     * 
     * @return the errors value.
     */
    public List<ReportableException> errors() {
        return this.errors;
    }

    /**
     * Set the errors property: List of errors that happened during the command execution.
     * 
     * @param errors the errors value to set.
     * @return the MigrateMISyncCompleteCommandOutput object itself.
     */
    public MigrateMISyncCompleteCommandOutput withErrors(List<ReportableException> errors) {
        this.errors = errors;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (errors() != null) {
            errors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("errors", this.errors, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrateMISyncCompleteCommandOutput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrateMISyncCompleteCommandOutput if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrateMISyncCompleteCommandOutput.
     */
    public static MigrateMISyncCompleteCommandOutput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrateMISyncCompleteCommandOutput deserializedMigrateMISyncCompleteCommandOutput
                = new MigrateMISyncCompleteCommandOutput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errors".equals(fieldName)) {
                    List<ReportableException> errors
                        = reader.readArray(reader1 -> ReportableException.fromJson(reader1));
                    deserializedMigrateMISyncCompleteCommandOutput.errors = errors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrateMISyncCompleteCommandOutput;
        });
    }
}
