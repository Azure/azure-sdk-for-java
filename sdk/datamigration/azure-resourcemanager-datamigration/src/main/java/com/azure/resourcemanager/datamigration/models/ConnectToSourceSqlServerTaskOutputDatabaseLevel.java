// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Database level output for the task that validates connection to SQL Server and also validates source server
 * requirements.
 */
@Immutable
public final class ConnectToSourceSqlServerTaskOutputDatabaseLevel extends ConnectToSourceSqlServerTaskOutput {
    /*
     * Type of result - database level or task level
     */
    private String resultType = "DatabaseLevelOutput";

    /*
     * Database name
     */
    private String name;

    /*
     * Size of the file in megabytes
     */
    private Double sizeMB;

    /*
     * The list of database files
     */
    private List<DatabaseFileInfo> databaseFiles;

    /*
     * SQL Server compatibility level of database
     */
    private DatabaseCompatLevel compatibilityLevel;

    /*
     * State of the database
     */
    private DatabaseState databaseState;

    /*
     * Result identifier
     */
    private String id;

    /**
     * Creates an instance of ConnectToSourceSqlServerTaskOutputDatabaseLevel class.
     */
    public ConnectToSourceSqlServerTaskOutputDatabaseLevel() {
    }

    /**
     * Get the resultType property: Type of result - database level or task level.
     * 
     * @return the resultType value.
     */
    @Override
    public String resultType() {
        return this.resultType;
    }

    /**
     * Get the name property: Database name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the sizeMB property: Size of the file in megabytes.
     * 
     * @return the sizeMB value.
     */
    public Double sizeMB() {
        return this.sizeMB;
    }

    /**
     * Get the databaseFiles property: The list of database files.
     * 
     * @return the databaseFiles value.
     */
    public List<DatabaseFileInfo> databaseFiles() {
        return this.databaseFiles;
    }

    /**
     * Get the compatibilityLevel property: SQL Server compatibility level of database.
     * 
     * @return the compatibilityLevel value.
     */
    public DatabaseCompatLevel compatibilityLevel() {
        return this.compatibilityLevel;
    }

    /**
     * Get the databaseState property: State of the database.
     * 
     * @return the databaseState value.
     */
    public DatabaseState databaseState() {
        return this.databaseState;
    }

    /**
     * Get the id property: Result identifier.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (databaseFiles() != null) {
            databaseFiles().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resultType", this.resultType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectToSourceSqlServerTaskOutputDatabaseLevel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectToSourceSqlServerTaskOutputDatabaseLevel if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectToSourceSqlServerTaskOutputDatabaseLevel.
     */
    public static ConnectToSourceSqlServerTaskOutputDatabaseLevel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectToSourceSqlServerTaskOutputDatabaseLevel deserializedConnectToSourceSqlServerTaskOutputDatabaseLevel
                = new ConnectToSourceSqlServerTaskOutputDatabaseLevel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskOutputDatabaseLevel.id = reader.getString();
                } else if ("resultType".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskOutputDatabaseLevel.resultType = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskOutputDatabaseLevel.name = reader.getString();
                } else if ("sizeMB".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskOutputDatabaseLevel.sizeMB
                        = reader.getNullable(JsonReader::getDouble);
                } else if ("databaseFiles".equals(fieldName)) {
                    List<DatabaseFileInfo> databaseFiles
                        = reader.readArray(reader1 -> DatabaseFileInfo.fromJson(reader1));
                    deserializedConnectToSourceSqlServerTaskOutputDatabaseLevel.databaseFiles = databaseFiles;
                } else if ("compatibilityLevel".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskOutputDatabaseLevel.compatibilityLevel
                        = DatabaseCompatLevel.fromString(reader.getString());
                } else if ("databaseState".equals(fieldName)) {
                    deserializedConnectToSourceSqlServerTaskOutputDatabaseLevel.databaseState
                        = DatabaseState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectToSourceSqlServerTaskOutputDatabaseLevel;
        });
    }
}
