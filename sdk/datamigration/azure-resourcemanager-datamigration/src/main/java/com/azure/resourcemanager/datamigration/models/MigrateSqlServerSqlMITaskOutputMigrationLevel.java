// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The MigrateSqlServerSqlMITaskOutputMigrationLevel model.
 */
@Immutable
public final class MigrateSqlServerSqlMITaskOutputMigrationLevel extends MigrateSqlServerSqlMITaskOutput {
    /*
     * Result type
     */
    private String resultType = "MigrationLevelOutput";

    /*
     * Migration start time
     */
    private OffsetDateTime startedOn;

    /*
     * Migration end time
     */
    private OffsetDateTime endedOn;

    /*
     * Current status of migration
     */
    private MigrationStatus status;

    /*
     * Current state of migration
     */
    private MigrationState state;

    /*
     * Selected agent jobs as a map from name to id
     */
    private String agentJobs;

    /*
     * Selected logins as a map from name to id
     */
    private String logins;

    /*
     * Migration progress message
     */
    private String message;

    /*
     * Map of server role migration results.
     */
    private String serverRoleResults;

    /*
     * List of orphaned users.
     */
    private List<OrphanedUserInfo> orphanedUsersInfo;

    /*
     * Selected databases as a map from database name to database id
     */
    private String databases;

    /*
     * Source server version
     */
    private String sourceServerVersion;

    /*
     * Source server brand version
     */
    private String sourceServerBrandVersion;

    /*
     * Target server version
     */
    private String targetServerVersion;

    /*
     * Target server brand version
     */
    private String targetServerBrandVersion;

    /*
     * Migration exceptions and warnings.
     */
    private List<ReportableException> exceptionsAndWarnings;

    /*
     * Result identifier
     */
    private String id;

    /**
     * Creates an instance of MigrateSqlServerSqlMITaskOutputMigrationLevel class.
     */
    public MigrateSqlServerSqlMITaskOutputMigrationLevel() {
    }

    /**
     * Get the resultType property: Result type.
     * 
     * @return the resultType value.
     */
    @Override
    public String resultType() {
        return this.resultType;
    }

    /**
     * Get the startedOn property: Migration start time.
     * 
     * @return the startedOn value.
     */
    public OffsetDateTime startedOn() {
        return this.startedOn;
    }

    /**
     * Get the endedOn property: Migration end time.
     * 
     * @return the endedOn value.
     */
    public OffsetDateTime endedOn() {
        return this.endedOn;
    }

    /**
     * Get the status property: Current status of migration.
     * 
     * @return the status value.
     */
    public MigrationStatus status() {
        return this.status;
    }

    /**
     * Get the state property: Current state of migration.
     * 
     * @return the state value.
     */
    public MigrationState state() {
        return this.state;
    }

    /**
     * Get the agentJobs property: Selected agent jobs as a map from name to id.
     * 
     * @return the agentJobs value.
     */
    public String agentJobs() {
        return this.agentJobs;
    }

    /**
     * Get the logins property: Selected logins as a map from name to id.
     * 
     * @return the logins value.
     */
    public String logins() {
        return this.logins;
    }

    /**
     * Get the message property: Migration progress message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Get the serverRoleResults property: Map of server role migration results.
     * 
     * @return the serverRoleResults value.
     */
    public String serverRoleResults() {
        return this.serverRoleResults;
    }

    /**
     * Get the orphanedUsersInfo property: List of orphaned users.
     * 
     * @return the orphanedUsersInfo value.
     */
    public List<OrphanedUserInfo> orphanedUsersInfo() {
        return this.orphanedUsersInfo;
    }

    /**
     * Get the databases property: Selected databases as a map from database name to database id.
     * 
     * @return the databases value.
     */
    public String databases() {
        return this.databases;
    }

    /**
     * Get the sourceServerVersion property: Source server version.
     * 
     * @return the sourceServerVersion value.
     */
    public String sourceServerVersion() {
        return this.sourceServerVersion;
    }

    /**
     * Get the sourceServerBrandVersion property: Source server brand version.
     * 
     * @return the sourceServerBrandVersion value.
     */
    public String sourceServerBrandVersion() {
        return this.sourceServerBrandVersion;
    }

    /**
     * Get the targetServerVersion property: Target server version.
     * 
     * @return the targetServerVersion value.
     */
    public String targetServerVersion() {
        return this.targetServerVersion;
    }

    /**
     * Get the targetServerBrandVersion property: Target server brand version.
     * 
     * @return the targetServerBrandVersion value.
     */
    public String targetServerBrandVersion() {
        return this.targetServerBrandVersion;
    }

    /**
     * Get the exceptionsAndWarnings property: Migration exceptions and warnings.
     * 
     * @return the exceptionsAndWarnings value.
     */
    public List<ReportableException> exceptionsAndWarnings() {
        return this.exceptionsAndWarnings;
    }

    /**
     * Get the id property: Result identifier.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (orphanedUsersInfo() != null) {
            orphanedUsersInfo().forEach(e -> e.validate());
        }
        if (exceptionsAndWarnings() != null) {
            exceptionsAndWarnings().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resultType", this.resultType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrateSqlServerSqlMITaskOutputMigrationLevel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrateSqlServerSqlMITaskOutputMigrationLevel if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrateSqlServerSqlMITaskOutputMigrationLevel.
     */
    public static MigrateSqlServerSqlMITaskOutputMigrationLevel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrateSqlServerSqlMITaskOutputMigrationLevel deserializedMigrateSqlServerSqlMITaskOutputMigrationLevel
                = new MigrateSqlServerSqlMITaskOutputMigrationLevel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMITaskOutputMigrationLevel.id = reader.getString();
                } else if ("resultType".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMITaskOutputMigrationLevel.resultType = reader.getString();
                } else if ("startedOn".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMITaskOutputMigrationLevel.startedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endedOn".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMITaskOutputMigrationLevel.endedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMITaskOutputMigrationLevel.status
                        = MigrationStatus.fromString(reader.getString());
                } else if ("state".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMITaskOutputMigrationLevel.state
                        = MigrationState.fromString(reader.getString());
                } else if ("agentJobs".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMITaskOutputMigrationLevel.agentJobs = reader.getString();
                } else if ("logins".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMITaskOutputMigrationLevel.logins = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMITaskOutputMigrationLevel.message = reader.getString();
                } else if ("serverRoleResults".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMITaskOutputMigrationLevel.serverRoleResults = reader.getString();
                } else if ("orphanedUsersInfo".equals(fieldName)) {
                    List<OrphanedUserInfo> orphanedUsersInfo
                        = reader.readArray(reader1 -> OrphanedUserInfo.fromJson(reader1));
                    deserializedMigrateSqlServerSqlMITaskOutputMigrationLevel.orphanedUsersInfo = orphanedUsersInfo;
                } else if ("databases".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMITaskOutputMigrationLevel.databases = reader.getString();
                } else if ("sourceServerVersion".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMITaskOutputMigrationLevel.sourceServerVersion = reader.getString();
                } else if ("sourceServerBrandVersion".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMITaskOutputMigrationLevel.sourceServerBrandVersion
                        = reader.getString();
                } else if ("targetServerVersion".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMITaskOutputMigrationLevel.targetServerVersion = reader.getString();
                } else if ("targetServerBrandVersion".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMITaskOutputMigrationLevel.targetServerBrandVersion
                        = reader.getString();
                } else if ("exceptionsAndWarnings".equals(fieldName)) {
                    List<ReportableException> exceptionsAndWarnings
                        = reader.readArray(reader1 -> ReportableException.fromJson(reader1));
                    deserializedMigrateSqlServerSqlMITaskOutputMigrationLevel.exceptionsAndWarnings
                        = exceptionsAndWarnings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrateSqlServerSqlMITaskOutputMigrationLevel;
        });
    }
}
