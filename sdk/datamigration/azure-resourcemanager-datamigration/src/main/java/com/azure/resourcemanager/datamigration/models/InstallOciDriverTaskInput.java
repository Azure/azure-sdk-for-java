// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Input for the service task to install an OCI driver.
 */
@Fluent
public final class InstallOciDriverTaskInput implements JsonSerializable<InstallOciDriverTaskInput> {
    /*
     * Name of the uploaded driver package to install.
     */
    private String driverPackageName;

    /**
     * Creates an instance of InstallOciDriverTaskInput class.
     */
    public InstallOciDriverTaskInput() {
    }

    /**
     * Get the driverPackageName property: Name of the uploaded driver package to install.
     * 
     * @return the driverPackageName value.
     */
    public String driverPackageName() {
        return this.driverPackageName;
    }

    /**
     * Set the driverPackageName property: Name of the uploaded driver package to install.
     * 
     * @param driverPackageName the driverPackageName value to set.
     * @return the InstallOciDriverTaskInput object itself.
     */
    public InstallOciDriverTaskInput withDriverPackageName(String driverPackageName) {
        this.driverPackageName = driverPackageName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("driverPackageName", this.driverPackageName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InstallOciDriverTaskInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InstallOciDriverTaskInput if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InstallOciDriverTaskInput.
     */
    public static InstallOciDriverTaskInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstallOciDriverTaskInput deserializedInstallOciDriverTaskInput = new InstallOciDriverTaskInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("driverPackageName".equals(fieldName)) {
                    deserializedInstallOciDriverTaskInput.driverPackageName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInstallOciDriverTaskInput;
        });
    }
}
