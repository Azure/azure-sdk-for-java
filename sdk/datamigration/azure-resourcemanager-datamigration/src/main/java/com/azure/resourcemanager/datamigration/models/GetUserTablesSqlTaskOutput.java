// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Output of the task that collects user tables for the given list of databases.
 */
@Immutable
public final class GetUserTablesSqlTaskOutput implements JsonSerializable<GetUserTablesSqlTaskOutput> {
    /*
     * Result identifier
     */
    private String id;

    /*
     * Mapping from database name to list of tables
     */
    private String databasesToTables;

    /*
     * Validation errors
     */
    private List<ReportableException> validationErrors;

    /**
     * Creates an instance of GetUserTablesSqlTaskOutput class.
     */
    public GetUserTablesSqlTaskOutput() {
    }

    /**
     * Get the id property: Result identifier.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the databasesToTables property: Mapping from database name to list of tables.
     * 
     * @return the databasesToTables value.
     */
    public String databasesToTables() {
        return this.databasesToTables;
    }

    /**
     * Get the validationErrors property: Validation errors.
     * 
     * @return the validationErrors value.
     */
    public List<ReportableException> validationErrors() {
        return this.validationErrors;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (validationErrors() != null) {
            validationErrors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetUserTablesSqlTaskOutput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetUserTablesSqlTaskOutput if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GetUserTablesSqlTaskOutput.
     */
    public static GetUserTablesSqlTaskOutput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GetUserTablesSqlTaskOutput deserializedGetUserTablesSqlTaskOutput = new GetUserTablesSqlTaskOutput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedGetUserTablesSqlTaskOutput.id = reader.getString();
                } else if ("databasesToTables".equals(fieldName)) {
                    deserializedGetUserTablesSqlTaskOutput.databasesToTables = reader.getString();
                } else if ("validationErrors".equals(fieldName)) {
                    List<ReportableException> validationErrors
                        = reader.readArray(reader1 -> ReportableException.fromJson(reader1));
                    deserializedGetUserTablesSqlTaskOutput.validationErrors = validationErrors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGetUserTablesSqlTaskOutput;
        });
    }
}
