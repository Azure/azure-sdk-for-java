// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.datamigration.models.ConnectionInfo;
import com.azure.resourcemanager.datamigration.models.DatabaseInfo;
import com.azure.resourcemanager.datamigration.models.ProjectProvisioningState;
import com.azure.resourcemanager.datamigration.models.ProjectSourcePlatform;
import com.azure.resourcemanager.datamigration.models.ProjectTargetPlatform;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** A project resource. */
@JsonFlatten
@Fluent
public class ProjectInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ProjectInner.class);

    /*
     * Source platform for the project
     */
    @JsonProperty(value = "properties.sourcePlatform")
    private ProjectSourcePlatform sourcePlatform;

    /*
     * Target platform for the project
     */
    @JsonProperty(value = "properties.targetPlatform")
    private ProjectTargetPlatform targetPlatform;

    /*
     * UTC Date and time when project was created
     */
    @JsonProperty(value = "properties.creationTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime creationTime;

    /*
     * Information for connecting to source
     */
    @JsonProperty(value = "properties.sourceConnectionInfo")
    private ConnectionInfo sourceConnectionInfo;

    /*
     * Information for connecting to target
     */
    @JsonProperty(value = "properties.targetConnectionInfo")
    private ConnectionInfo targetConnectionInfo;

    /*
     * List of DatabaseInfo
     */
    @JsonProperty(value = "properties.databasesInfo")
    private List<DatabaseInfo> databasesInfo;

    /*
     * The project's provisioning state
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProjectProvisioningState provisioningState;

    /**
     * Get the sourcePlatform property: Source platform for the project.
     *
     * @return the sourcePlatform value.
     */
    public ProjectSourcePlatform sourcePlatform() {
        return this.sourcePlatform;
    }

    /**
     * Set the sourcePlatform property: Source platform for the project.
     *
     * @param sourcePlatform the sourcePlatform value to set.
     * @return the ProjectInner object itself.
     */
    public ProjectInner withSourcePlatform(ProjectSourcePlatform sourcePlatform) {
        this.sourcePlatform = sourcePlatform;
        return this;
    }

    /**
     * Get the targetPlatform property: Target platform for the project.
     *
     * @return the targetPlatform value.
     */
    public ProjectTargetPlatform targetPlatform() {
        return this.targetPlatform;
    }

    /**
     * Set the targetPlatform property: Target platform for the project.
     *
     * @param targetPlatform the targetPlatform value to set.
     * @return the ProjectInner object itself.
     */
    public ProjectInner withTargetPlatform(ProjectTargetPlatform targetPlatform) {
        this.targetPlatform = targetPlatform;
        return this;
    }

    /**
     * Get the creationTime property: UTC Date and time when project was created.
     *
     * @return the creationTime value.
     */
    public OffsetDateTime creationTime() {
        return this.creationTime;
    }

    /**
     * Get the sourceConnectionInfo property: Information for connecting to source.
     *
     * @return the sourceConnectionInfo value.
     */
    public ConnectionInfo sourceConnectionInfo() {
        return this.sourceConnectionInfo;
    }

    /**
     * Set the sourceConnectionInfo property: Information for connecting to source.
     *
     * @param sourceConnectionInfo the sourceConnectionInfo value to set.
     * @return the ProjectInner object itself.
     */
    public ProjectInner withSourceConnectionInfo(ConnectionInfo sourceConnectionInfo) {
        this.sourceConnectionInfo = sourceConnectionInfo;
        return this;
    }

    /**
     * Get the targetConnectionInfo property: Information for connecting to target.
     *
     * @return the targetConnectionInfo value.
     */
    public ConnectionInfo targetConnectionInfo() {
        return this.targetConnectionInfo;
    }

    /**
     * Set the targetConnectionInfo property: Information for connecting to target.
     *
     * @param targetConnectionInfo the targetConnectionInfo value to set.
     * @return the ProjectInner object itself.
     */
    public ProjectInner withTargetConnectionInfo(ConnectionInfo targetConnectionInfo) {
        this.targetConnectionInfo = targetConnectionInfo;
        return this;
    }

    /**
     * Get the databasesInfo property: List of DatabaseInfo.
     *
     * @return the databasesInfo value.
     */
    public List<DatabaseInfo> databasesInfo() {
        return this.databasesInfo;
    }

    /**
     * Set the databasesInfo property: List of DatabaseInfo.
     *
     * @param databasesInfo the databasesInfo value to set.
     * @return the ProjectInner object itself.
     */
    public ProjectInner withDatabasesInfo(List<DatabaseInfo> databasesInfo) {
        this.databasesInfo = databasesInfo;
        return this;
    }

    /**
     * Get the provisioningState property: The project's provisioning state.
     *
     * @return the provisioningState value.
     */
    public ProjectProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /** {@inheritDoc} */
    @Override
    public ProjectInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProjectInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceConnectionInfo() != null) {
            sourceConnectionInfo().validate();
        }
        if (targetConnectionInfo() != null) {
            targetConnectionInfo().validate();
        }
        if (databasesInfo() != null) {
            databasesInfo().forEach(e -> e.validate());
        }
    }
}
