// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Mongo Connection.
 */
@Fluent
public final class MongoConnectionInformation implements JsonSerializable<MongoConnectionInformation> {
    /*
     * Host of mongo connection.
     */
    private String host;

    /*
     * Port of mongo connection.
     */
    private Integer port;

    /*
     * User name to connect to Mongo.
     */
    private String username;

    /*
     * Password to connect to Mongo.
     */
    private String password;

    /*
     * Whether to UseSsl or UseTls to connect to Mongo. Default is true.
     */
    private Boolean useSsl;

    /*
     * ConnectionString to connect to Mongo.
     */
    private String connectionString;

    /**
     * Creates an instance of MongoConnectionInformation class.
     */
    public MongoConnectionInformation() {
    }

    /**
     * Get the host property: Host of mongo connection.
     * 
     * @return the host value.
     */
    public String host() {
        return this.host;
    }

    /**
     * Set the host property: Host of mongo connection.
     * 
     * @param host the host value to set.
     * @return the MongoConnectionInformation object itself.
     */
    public MongoConnectionInformation withHost(String host) {
        this.host = host;
        return this;
    }

    /**
     * Get the port property: Port of mongo connection.
     * 
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: Port of mongo connection.
     * 
     * @param port the port value to set.
     * @return the MongoConnectionInformation object itself.
     */
    public MongoConnectionInformation withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Get the username property: User name to connect to Mongo.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: User name to connect to Mongo.
     * 
     * @param username the username value to set.
     * @return the MongoConnectionInformation object itself.
     */
    public MongoConnectionInformation withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: Password to connect to Mongo.
     * 
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: Password to connect to Mongo.
     * 
     * @param password the password value to set.
     * @return the MongoConnectionInformation object itself.
     */
    public MongoConnectionInformation withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get the useSsl property: Whether to UseSsl or UseTls to connect to Mongo. Default is true.
     * 
     * @return the useSsl value.
     */
    public Boolean useSsl() {
        return this.useSsl;
    }

    /**
     * Set the useSsl property: Whether to UseSsl or UseTls to connect to Mongo. Default is true.
     * 
     * @param useSsl the useSsl value to set.
     * @return the MongoConnectionInformation object itself.
     */
    public MongoConnectionInformation withUseSsl(Boolean useSsl) {
        this.useSsl = useSsl;
        return this;
    }

    /**
     * Get the connectionString property: ConnectionString to connect to Mongo.
     * 
     * @return the connectionString value.
     */
    public String connectionString() {
        return this.connectionString;
    }

    /**
     * Set the connectionString property: ConnectionString to connect to Mongo.
     * 
     * @param connectionString the connectionString value to set.
     * @return the MongoConnectionInformation object itself.
     */
    public MongoConnectionInformation withConnectionString(String connectionString) {
        this.connectionString = connectionString;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("host", this.host);
        jsonWriter.writeNumberField("port", this.port);
        jsonWriter.writeStringField("userName", this.username);
        jsonWriter.writeStringField("password", this.password);
        jsonWriter.writeBooleanField("useSsl", this.useSsl);
        jsonWriter.writeStringField("connectionString", this.connectionString);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoConnectionInformation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoConnectionInformation if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MongoConnectionInformation.
     */
    public static MongoConnectionInformation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoConnectionInformation deserializedMongoConnectionInformation = new MongoConnectionInformation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("host".equals(fieldName)) {
                    deserializedMongoConnectionInformation.host = reader.getString();
                } else if ("port".equals(fieldName)) {
                    deserializedMongoConnectionInformation.port = reader.getNullable(JsonReader::getInt);
                } else if ("userName".equals(fieldName)) {
                    deserializedMongoConnectionInformation.username = reader.getString();
                } else if ("password".equals(fieldName)) {
                    deserializedMongoConnectionInformation.password = reader.getString();
                } else if ("useSsl".equals(fieldName)) {
                    deserializedMongoConnectionInformation.useSsl = reader.getNullable(JsonReader::getBoolean);
                } else if ("connectionString".equals(fieldName)) {
                    deserializedMongoConnectionInformation.connectionString = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoConnectionInformation;
        });
    }
}
