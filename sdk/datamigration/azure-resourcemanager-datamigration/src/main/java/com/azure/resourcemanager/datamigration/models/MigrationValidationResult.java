// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Migration Validation Result.
 */
@Fluent
public class MigrationValidationResult implements JsonSerializable<MigrationValidationResult> {
    /*
     * Migration validation result identifier
     */
    private String id;

    /*
     * Migration Identifier
     */
    private String migrationId;

    /*
     * Validation summary results for each database
     */
    private Map<String, MigrationValidationDatabaseSummaryResult> summaryResults;

    /*
     * Current status of validation at the migration level. Status from the database validation result status will be
     * aggregated here.
     */
    private ValidationStatus status;

    /**
     * Creates an instance of MigrationValidationResult class.
     */
    public MigrationValidationResult() {
    }

    /**
     * Get the id property: Migration validation result identifier.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Migration validation result identifier.
     * 
     * @param id the id value to set.
     * @return the MigrationValidationResult object itself.
     */
    MigrationValidationResult withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the migrationId property: Migration Identifier.
     * 
     * @return the migrationId value.
     */
    public String migrationId() {
        return this.migrationId;
    }

    /**
     * Set the migrationId property: Migration Identifier.
     * 
     * @param migrationId the migrationId value to set.
     * @return the MigrationValidationResult object itself.
     */
    MigrationValidationResult withMigrationId(String migrationId) {
        this.migrationId = migrationId;
        return this;
    }

    /**
     * Get the summaryResults property: Validation summary results for each database.
     * 
     * @return the summaryResults value.
     */
    public Map<String, MigrationValidationDatabaseSummaryResult> summaryResults() {
        return this.summaryResults;
    }

    /**
     * Set the summaryResults property: Validation summary results for each database.
     * 
     * @param summaryResults the summaryResults value to set.
     * @return the MigrationValidationResult object itself.
     */
    public MigrationValidationResult
        withSummaryResults(Map<String, MigrationValidationDatabaseSummaryResult> summaryResults) {
        this.summaryResults = summaryResults;
        return this;
    }

    /**
     * Get the status property: Current status of validation at the migration level. Status from the database validation
     * result status will be aggregated here.
     * 
     * @return the status value.
     */
    public ValidationStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Current status of validation at the migration level. Status from the database validation
     * result status will be aggregated here.
     * 
     * @param status the status value to set.
     * @return the MigrationValidationResult object itself.
     */
    MigrationValidationResult withStatus(ValidationStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (summaryResults() != null) {
            summaryResults().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("summaryResults", this.summaryResults, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrationValidationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrationValidationResult if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrationValidationResult.
     */
    public static MigrationValidationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrationValidationResult deserializedMigrationValidationResult = new MigrationValidationResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMigrationValidationResult.id = reader.getString();
                } else if ("migrationId".equals(fieldName)) {
                    deserializedMigrationValidationResult.migrationId = reader.getString();
                } else if ("summaryResults".equals(fieldName)) {
                    Map<String, MigrationValidationDatabaseSummaryResult> summaryResults
                        = reader.readMap(reader1 -> MigrationValidationDatabaseSummaryResult.fromJson(reader1));
                    deserializedMigrationValidationResult.summaryResults = summaryResults;
                } else if ("status".equals(fieldName)) {
                    deserializedMigrationValidationResult.status = ValidationStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrationValidationResult;
        });
    }
}
