// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Information about migration eligibility of a server object.
 */
@Immutable
public final class MigrationEligibilityInfo implements JsonSerializable<MigrationEligibilityInfo> {
    /*
     * Whether object is eligible for migration or not.
     */
    private Boolean isEligibleForMigration;

    /*
     * Information about eligibility failure for the server object.
     */
    private List<String> validationMessages;

    /**
     * Creates an instance of MigrationEligibilityInfo class.
     */
    public MigrationEligibilityInfo() {
    }

    /**
     * Get the isEligibleForMigration property: Whether object is eligible for migration or not.
     * 
     * @return the isEligibleForMigration value.
     */
    public Boolean isEligibleForMigration() {
        return this.isEligibleForMigration;
    }

    /**
     * Get the validationMessages property: Information about eligibility failure for the server object.
     * 
     * @return the validationMessages value.
     */
    public List<String> validationMessages() {
        return this.validationMessages;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrationEligibilityInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrationEligibilityInfo if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrationEligibilityInfo.
     */
    public static MigrationEligibilityInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrationEligibilityInfo deserializedMigrationEligibilityInfo = new MigrationEligibilityInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("isEligibleForMigration".equals(fieldName)) {
                    deserializedMigrationEligibilityInfo.isEligibleForMigration
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("validationMessages".equals(fieldName)) {
                    List<String> validationMessages = reader.readArray(reader1 -> reader1.getString());
                    deserializedMigrationEligibilityInfo.validationMessages = validationMessages;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrationEligibilityInfo;
        });
    }
}
