// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes an error or warning that occurred during a MongoDB migration.
 */
@Fluent
public final class MongoDbError implements JsonSerializable<MongoDbError> {
    /*
     * The non-localized, machine-readable code that describes the error or warning
     */
    private String code;

    /*
     * The number of times the error or warning has occurred
     */
    private Integer count;

    /*
     * The localized, human-readable message that describes the error or warning
     */
    private String message;

    /*
     * The type of error or warning
     */
    private MongoDbErrorType type;

    /**
     * Creates an instance of MongoDbError class.
     */
    public MongoDbError() {
    }

    /**
     * Get the code property: The non-localized, machine-readable code that describes the error or warning.
     * 
     * @return the code value.
     */
    public String code() {
        return this.code;
    }

    /**
     * Set the code property: The non-localized, machine-readable code that describes the error or warning.
     * 
     * @param code the code value to set.
     * @return the MongoDbError object itself.
     */
    public MongoDbError withCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Get the count property: The number of times the error or warning has occurred.
     * 
     * @return the count value.
     */
    public Integer count() {
        return this.count;
    }

    /**
     * Set the count property: The number of times the error or warning has occurred.
     * 
     * @param count the count value to set.
     * @return the MongoDbError object itself.
     */
    public MongoDbError withCount(Integer count) {
        this.count = count;
        return this;
    }

    /**
     * Get the message property: The localized, human-readable message that describes the error or warning.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: The localized, human-readable message that describes the error or warning.
     * 
     * @param message the message value to set.
     * @return the MongoDbError object itself.
     */
    public MongoDbError withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the type property: The type of error or warning.
     * 
     * @return the type value.
     */
    public MongoDbErrorType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of error or warning.
     * 
     * @param type the type value to set.
     * @return the MongoDbError object itself.
     */
    public MongoDbError withType(MongoDbErrorType type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("code", this.code);
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoDbError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoDbError if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MongoDbError.
     */
    public static MongoDbError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoDbError deserializedMongoDbError = new MongoDbError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("code".equals(fieldName)) {
                    deserializedMongoDbError.code = reader.getString();
                } else if ("count".equals(fieldName)) {
                    deserializedMongoDbError.count = reader.getNullable(JsonReader::getInt);
                } else if ("message".equals(fieldName)) {
                    deserializedMongoDbError.message = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedMongoDbError.type = MongoDbErrorType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoDbError;
        });
    }
}
