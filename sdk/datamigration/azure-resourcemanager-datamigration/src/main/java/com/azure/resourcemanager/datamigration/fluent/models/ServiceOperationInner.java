// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datamigration.models.ServiceOperationDisplay;
import java.io.IOException;

/**
 * Description of an action supported by the Database Migration Service.
 */
@Fluent
public final class ServiceOperationInner implements JsonSerializable<ServiceOperationInner> {
    /*
     * The fully qualified action name, e.g. Microsoft.DataMigration/services/read
     */
    private String name;

    /*
     * Localized display text
     */
    private ServiceOperationDisplay display;

    /**
     * Creates an instance of ServiceOperationInner class.
     */
    public ServiceOperationInner() {
    }

    /**
     * Get the name property: The fully qualified action name, e.g. Microsoft.DataMigration/services/read.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The fully qualified action name, e.g. Microsoft.DataMigration/services/read.
     * 
     * @param name the name value to set.
     * @return the ServiceOperationInner object itself.
     */
    public ServiceOperationInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the display property: Localized display text.
     * 
     * @return the display value.
     */
    public ServiceOperationDisplay display() {
        return this.display;
    }

    /**
     * Set the display property: Localized display text.
     * 
     * @param display the display value to set.
     * @return the ServiceOperationInner object itself.
     */
    public ServiceOperationInner withDisplay(ServiceOperationDisplay display) {
        this.display = display;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (display() != null) {
            display().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("display", this.display);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceOperationInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceOperationInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceOperationInner.
     */
    public static ServiceOperationInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceOperationInner deserializedServiceOperationInner = new ServiceOperationInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedServiceOperationInner.name = reader.getString();
                } else if ("display".equals(fieldName)) {
                    deserializedServiceOperationInner.display = ServiceOperationDisplay.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceOperationInner;
        });
    }
}
