// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements for
 * Oracle source.
 */
@Fluent
public final class ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput
    implements JsonSerializable<ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput> {
    /*
     * Version of the target server
     */
    private String targetServerVersion;

    /*
     * List of databases on target server
     */
    private List<String> databases;

    /*
     * Target server brand version
     */
    private String targetServerBrandVersion;

    /*
     * Validation errors associated with the task
     */
    private List<ReportableException> validationErrors;

    /*
     * Mapping of schemas per database
     */
    private List<ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem> databaseSchemaMap;

    /**
     * Creates an instance of ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput class.
     */
    public ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput() {
    }

    /**
     * Get the targetServerVersion property: Version of the target server.
     * 
     * @return the targetServerVersion value.
     */
    public String targetServerVersion() {
        return this.targetServerVersion;
    }

    /**
     * Get the databases property: List of databases on target server.
     * 
     * @return the databases value.
     */
    public List<String> databases() {
        return this.databases;
    }

    /**
     * Get the targetServerBrandVersion property: Target server brand version.
     * 
     * @return the targetServerBrandVersion value.
     */
    public String targetServerBrandVersion() {
        return this.targetServerBrandVersion;
    }

    /**
     * Get the validationErrors property: Validation errors associated with the task.
     * 
     * @return the validationErrors value.
     */
    public List<ReportableException> validationErrors() {
        return this.validationErrors;
    }

    /**
     * Get the databaseSchemaMap property: Mapping of schemas per database.
     * 
     * @return the databaseSchemaMap value.
     */
    public List<ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem> databaseSchemaMap() {
        return this.databaseSchemaMap;
    }

    /**
     * Set the databaseSchemaMap property: Mapping of schemas per database.
     * 
     * @param databaseSchemaMap the databaseSchemaMap value to set.
     * @return the ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput object itself.
     */
    public ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput withDatabaseSchemaMap(
        List<ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem> databaseSchemaMap) {
        this.databaseSchemaMap = databaseSchemaMap;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (validationErrors() != null) {
            validationErrors().forEach(e -> e.validate());
        }
        if (databaseSchemaMap() != null) {
            databaseSchemaMap().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("databaseSchemaMap", this.databaseSchemaMap,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput if the JsonReader was pointing to
     * an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput.
     */
    public static ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput deserializedConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput
                = new ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetServerVersion".equals(fieldName)) {
                    deserializedConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput.targetServerVersion
                        = reader.getString();
                } else if ("databases".equals(fieldName)) {
                    List<String> databases = reader.readArray(reader1 -> reader1.getString());
                    deserializedConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput.databases = databases;
                } else if ("targetServerBrandVersion".equals(fieldName)) {
                    deserializedConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput.targetServerBrandVersion
                        = reader.getString();
                } else if ("validationErrors".equals(fieldName)) {
                    List<ReportableException> validationErrors
                        = reader.readArray(reader1 -> ReportableException.fromJson(reader1));
                    deserializedConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput.validationErrors
                        = validationErrors;
                } else if ("databaseSchemaMap".equals(fieldName)) {
                    List<ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem> databaseSchemaMap
                        = reader.readArray(
                            reader1 -> ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem
                                .fromJson(reader1));
                    deserializedConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput.databaseSchemaMap
                        = databaseSchemaMap;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput;
        });
    }
}
