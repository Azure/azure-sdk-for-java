// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Source SQL Connection. */
@Fluent
public final class SqlConnectionInformation {
    /*
     * Data source.
     */
    @JsonProperty(value = "dataSource")
    private String dataSource;

    /*
     * Authentication type.
     */
    @JsonProperty(value = "authentication")
    private String authentication;

    /*
     * User name to connect to source SQL.
     */
    @JsonProperty(value = "userName")
    private String username;

    /*
     * Password to connect to source SQL.
     */
    @JsonProperty(value = "password")
    private String password;

    /*
     * Whether to encrypt connection or not.
     */
    @JsonProperty(value = "encryptConnection")
    private Boolean encryptConnection;

    /*
     * Whether to trust server certificate or not.
     */
    @JsonProperty(value = "trustServerCertificate")
    private Boolean trustServerCertificate;

    /**
     * Get the dataSource property: Data source.
     *
     * @return the dataSource value.
     */
    public String dataSource() {
        return this.dataSource;
    }

    /**
     * Set the dataSource property: Data source.
     *
     * @param dataSource the dataSource value to set.
     * @return the SqlConnectionInformation object itself.
     */
    public SqlConnectionInformation withDataSource(String dataSource) {
        this.dataSource = dataSource;
        return this;
    }

    /**
     * Get the authentication property: Authentication type.
     *
     * @return the authentication value.
     */
    public String authentication() {
        return this.authentication;
    }

    /**
     * Set the authentication property: Authentication type.
     *
     * @param authentication the authentication value to set.
     * @return the SqlConnectionInformation object itself.
     */
    public SqlConnectionInformation withAuthentication(String authentication) {
        this.authentication = authentication;
        return this;
    }

    /**
     * Get the username property: User name to connect to source SQL.
     *
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: User name to connect to source SQL.
     *
     * @param username the username value to set.
     * @return the SqlConnectionInformation object itself.
     */
    public SqlConnectionInformation withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: Password to connect to source SQL.
     *
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: Password to connect to source SQL.
     *
     * @param password the password value to set.
     * @return the SqlConnectionInformation object itself.
     */
    public SqlConnectionInformation withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Get the encryptConnection property: Whether to encrypt connection or not.
     *
     * @return the encryptConnection value.
     */
    public Boolean encryptConnection() {
        return this.encryptConnection;
    }

    /**
     * Set the encryptConnection property: Whether to encrypt connection or not.
     *
     * @param encryptConnection the encryptConnection value to set.
     * @return the SqlConnectionInformation object itself.
     */
    public SqlConnectionInformation withEncryptConnection(Boolean encryptConnection) {
        this.encryptConnection = encryptConnection;
        return this;
    }

    /**
     * Get the trustServerCertificate property: Whether to trust server certificate or not.
     *
     * @return the trustServerCertificate value.
     */
    public Boolean trustServerCertificate() {
        return this.trustServerCertificate;
    }

    /**
     * Set the trustServerCertificate property: Whether to trust server certificate or not.
     *
     * @param trustServerCertificate the trustServerCertificate value to set.
     * @return the SqlConnectionInformation object itself.
     */
    public SqlConnectionInformation withTrustServerCertificate(Boolean trustServerCertificate) {
        this.trustServerCertificate = trustServerCertificate;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
