// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Database level result for Sql Server to Azure Sql DB migration.
 */
@Immutable
public final class MigrateSqlServerSqlDbTaskOutputDatabaseLevel extends MigrateSqlServerSqlDbTaskOutput {
    /*
     * Result type
     */
    private String resultType = "DatabaseLevelOutput";

    /*
     * Name of the item
     */
    private String databaseName;

    /*
     * Migration start time
     */
    private OffsetDateTime startedOn;

    /*
     * Migration end time
     */
    private OffsetDateTime endedOn;

    /*
     * Current state of migration
     */
    private MigrationState state;

    /*
     * Migration stage that this database is in
     */
    private DatabaseMigrationStage stage;

    /*
     * Status message
     */
    private String statusMessage;

    /*
     * Migration progress message
     */
    private String message;

    /*
     * Number of objects
     */
    private Long numberOfObjects;

    /*
     * Number of successfully completed objects
     */
    private Long numberOfObjectsCompleted;

    /*
     * Number of database/object errors.
     */
    private Long errorCount;

    /*
     * Wildcard string prefix to use for querying all errors of the item
     */
    private String errorPrefix;

    /*
     * Wildcard string prefix to use for querying all sub-tem results of the item
     */
    private String resultPrefix;

    /*
     * Migration exceptions and warnings.
     */
    private List<ReportableException> exceptionsAndWarnings;

    /*
     * Summary of object results in the migration
     */
    private String objectSummary;

    /*
     * Result identifier
     */
    private String id;

    /**
     * Creates an instance of MigrateSqlServerSqlDbTaskOutputDatabaseLevel class.
     */
    public MigrateSqlServerSqlDbTaskOutputDatabaseLevel() {
    }

    /**
     * Get the resultType property: Result type.
     * 
     * @return the resultType value.
     */
    @Override
    public String resultType() {
        return this.resultType;
    }

    /**
     * Get the databaseName property: Name of the item.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Get the startedOn property: Migration start time.
     * 
     * @return the startedOn value.
     */
    public OffsetDateTime startedOn() {
        return this.startedOn;
    }

    /**
     * Get the endedOn property: Migration end time.
     * 
     * @return the endedOn value.
     */
    public OffsetDateTime endedOn() {
        return this.endedOn;
    }

    /**
     * Get the state property: Current state of migration.
     * 
     * @return the state value.
     */
    public MigrationState state() {
        return this.state;
    }

    /**
     * Get the stage property: Migration stage that this database is in.
     * 
     * @return the stage value.
     */
    public DatabaseMigrationStage stage() {
        return this.stage;
    }

    /**
     * Get the statusMessage property: Status message.
     * 
     * @return the statusMessage value.
     */
    public String statusMessage() {
        return this.statusMessage;
    }

    /**
     * Get the message property: Migration progress message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Get the numberOfObjects property: Number of objects.
     * 
     * @return the numberOfObjects value.
     */
    public Long numberOfObjects() {
        return this.numberOfObjects;
    }

    /**
     * Get the numberOfObjectsCompleted property: Number of successfully completed objects.
     * 
     * @return the numberOfObjectsCompleted value.
     */
    public Long numberOfObjectsCompleted() {
        return this.numberOfObjectsCompleted;
    }

    /**
     * Get the errorCount property: Number of database/object errors.
     * 
     * @return the errorCount value.
     */
    public Long errorCount() {
        return this.errorCount;
    }

    /**
     * Get the errorPrefix property: Wildcard string prefix to use for querying all errors of the item.
     * 
     * @return the errorPrefix value.
     */
    public String errorPrefix() {
        return this.errorPrefix;
    }

    /**
     * Get the resultPrefix property: Wildcard string prefix to use for querying all sub-tem results of the item.
     * 
     * @return the resultPrefix value.
     */
    public String resultPrefix() {
        return this.resultPrefix;
    }

    /**
     * Get the exceptionsAndWarnings property: Migration exceptions and warnings.
     * 
     * @return the exceptionsAndWarnings value.
     */
    public List<ReportableException> exceptionsAndWarnings() {
        return this.exceptionsAndWarnings;
    }

    /**
     * Get the objectSummary property: Summary of object results in the migration.
     * 
     * @return the objectSummary value.
     */
    public String objectSummary() {
        return this.objectSummary;
    }

    /**
     * Get the id property: Result identifier.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (exceptionsAndWarnings() != null) {
            exceptionsAndWarnings().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resultType", this.resultType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrateSqlServerSqlDbTaskOutputDatabaseLevel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrateSqlServerSqlDbTaskOutputDatabaseLevel if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrateSqlServerSqlDbTaskOutputDatabaseLevel.
     */
    public static MigrateSqlServerSqlDbTaskOutputDatabaseLevel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrateSqlServerSqlDbTaskOutputDatabaseLevel deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevel
                = new MigrateSqlServerSqlDbTaskOutputDatabaseLevel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevel.id = reader.getString();
                } else if ("resultType".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevel.resultType = reader.getString();
                } else if ("databaseName".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevel.databaseName = reader.getString();
                } else if ("startedOn".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevel.startedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endedOn".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevel.endedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("state".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevel.state
                        = MigrationState.fromString(reader.getString());
                } else if ("stage".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevel.stage
                        = DatabaseMigrationStage.fromString(reader.getString());
                } else if ("statusMessage".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevel.statusMessage = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevel.message = reader.getString();
                } else if ("numberOfObjects".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevel.numberOfObjects
                        = reader.getNullable(JsonReader::getLong);
                } else if ("numberOfObjectsCompleted".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevel.numberOfObjectsCompleted
                        = reader.getNullable(JsonReader::getLong);
                } else if ("errorCount".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevel.errorCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("errorPrefix".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevel.errorPrefix = reader.getString();
                } else if ("resultPrefix".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevel.resultPrefix = reader.getString();
                } else if ("exceptionsAndWarnings".equals(fieldName)) {
                    List<ReportableException> exceptionsAndWarnings
                        = reader.readArray(reader1 -> ReportableException.fromJson(reader1));
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevel.exceptionsAndWarnings
                        = exceptionsAndWarnings;
                } else if ("objectSummary".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevel.objectSummary = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevel;
        });
    }
}
