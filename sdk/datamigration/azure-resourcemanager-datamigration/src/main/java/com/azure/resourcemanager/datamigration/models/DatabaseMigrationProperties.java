// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Database Migration Resource properties.
 */
@Fluent
public class DatabaseMigrationProperties extends DatabaseMigrationBaseProperties {
    /*
     * The kind property.
     */
    private ResourceType kind = ResourceType.fromString("DatabaseMigrationProperties");

    /*
     * Source SQL Server connection details.
     */
    private SqlConnectionInformation sourceSqlConnection;

    /*
     * Name of the source database.
     */
    private String sourceDatabaseName;

    /*
     * Name of the source sql server.
     */
    private String sourceServerName;

    /*
     * Database collation to be used for the target database.
     */
    private String targetDatabaseCollation;

    /**
     * Creates an instance of DatabaseMigrationProperties class.
     */
    public DatabaseMigrationProperties() {
    }

    /**
     * Get the kind property: The kind property.
     * 
     * @return the kind value.
     */
    @Override
    public ResourceType kind() {
        return this.kind;
    }

    /**
     * Get the sourceSqlConnection property: Source SQL Server connection details.
     * 
     * @return the sourceSqlConnection value.
     */
    public SqlConnectionInformation sourceSqlConnection() {
        return this.sourceSqlConnection;
    }

    /**
     * Set the sourceSqlConnection property: Source SQL Server connection details.
     * 
     * @param sourceSqlConnection the sourceSqlConnection value to set.
     * @return the DatabaseMigrationProperties object itself.
     */
    public DatabaseMigrationProperties withSourceSqlConnection(SqlConnectionInformation sourceSqlConnection) {
        this.sourceSqlConnection = sourceSqlConnection;
        return this;
    }

    /**
     * Get the sourceDatabaseName property: Name of the source database.
     * 
     * @return the sourceDatabaseName value.
     */
    public String sourceDatabaseName() {
        return this.sourceDatabaseName;
    }

    /**
     * Set the sourceDatabaseName property: Name of the source database.
     * 
     * @param sourceDatabaseName the sourceDatabaseName value to set.
     * @return the DatabaseMigrationProperties object itself.
     */
    public DatabaseMigrationProperties withSourceDatabaseName(String sourceDatabaseName) {
        this.sourceDatabaseName = sourceDatabaseName;
        return this;
    }

    /**
     * Get the sourceServerName property: Name of the source sql server.
     * 
     * @return the sourceServerName value.
     */
    public String sourceServerName() {
        return this.sourceServerName;
    }

    /**
     * Set the sourceServerName property: Name of the source sql server.
     * 
     * @param sourceServerName the sourceServerName value to set.
     * @return the DatabaseMigrationProperties object itself.
     */
    DatabaseMigrationProperties withSourceServerName(String sourceServerName) {
        this.sourceServerName = sourceServerName;
        return this;
    }

    /**
     * Get the targetDatabaseCollation property: Database collation to be used for the target database.
     * 
     * @return the targetDatabaseCollation value.
     */
    public String targetDatabaseCollation() {
        return this.targetDatabaseCollation;
    }

    /**
     * Set the targetDatabaseCollation property: Database collation to be used for the target database.
     * 
     * @param targetDatabaseCollation the targetDatabaseCollation value to set.
     * @return the DatabaseMigrationProperties object itself.
     */
    public DatabaseMigrationProperties withTargetDatabaseCollation(String targetDatabaseCollation) {
        this.targetDatabaseCollation = targetDatabaseCollation;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationProperties withScope(String scope) {
        super.withScope(scope);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationProperties withMigrationService(String migrationService) {
        super.withMigrationService(migrationService);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationProperties withMigrationOperationId(String migrationOperationId) {
        super.withMigrationOperationId(migrationOperationId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationProperties withProvisioningError(String provisioningError) {
        super.withProvisioningError(provisioningError);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (sourceSqlConnection() != null) {
            sourceSqlConnection().validate();
        }
        if (migrationFailureError() != null) {
            migrationFailureError().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scope", scope());
        jsonWriter.writeStringField("migrationService", migrationService());
        jsonWriter.writeStringField("migrationOperationId", migrationOperationId());
        jsonWriter.writeStringField("provisioningError", provisioningError());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeJsonField("sourceSqlConnection", this.sourceSqlConnection);
        jsonWriter.writeStringField("sourceDatabaseName", this.sourceDatabaseName);
        jsonWriter.writeStringField("targetDatabaseCollation", this.targetDatabaseCollation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabaseMigrationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabaseMigrationProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatabaseMigrationProperties.
     */
    public static DatabaseMigrationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("SqlDb".equals(discriminatorValue)) {
                    return DatabaseMigrationPropertiesSqlDb.fromJson(readerToUse.reset());
                } else if ("SqlMi".equals(discriminatorValue)) {
                    return DatabaseMigrationPropertiesSqlMi.fromJson(readerToUse.reset());
                } else if ("SqlVm".equals(discriminatorValue)) {
                    return DatabaseMigrationPropertiesSqlVm.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static DatabaseMigrationProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabaseMigrationProperties deserializedDatabaseMigrationProperties = new DatabaseMigrationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scope".equals(fieldName)) {
                    deserializedDatabaseMigrationProperties.withScope(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDatabaseMigrationProperties
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("migrationStatus".equals(fieldName)) {
                    deserializedDatabaseMigrationProperties.withMigrationStatus(reader.getString());
                } else if ("startedOn".equals(fieldName)) {
                    deserializedDatabaseMigrationProperties.withStartedOn(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("endedOn".equals(fieldName)) {
                    deserializedDatabaseMigrationProperties.withEndedOn(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("migrationService".equals(fieldName)) {
                    deserializedDatabaseMigrationProperties.withMigrationService(reader.getString());
                } else if ("migrationOperationId".equals(fieldName)) {
                    deserializedDatabaseMigrationProperties.withMigrationOperationId(reader.getString());
                } else if ("migrationFailureError".equals(fieldName)) {
                    deserializedDatabaseMigrationProperties.withMigrationFailureError(ErrorInfo.fromJson(reader));
                } else if ("provisioningError".equals(fieldName)) {
                    deserializedDatabaseMigrationProperties.withProvisioningError(reader.getString());
                } else if ("kind".equals(fieldName)) {
                    deserializedDatabaseMigrationProperties.kind = ResourceType.fromString(reader.getString());
                } else if ("sourceSqlConnection".equals(fieldName)) {
                    deserializedDatabaseMigrationProperties.sourceSqlConnection
                        = SqlConnectionInformation.fromJson(reader);
                } else if ("sourceDatabaseName".equals(fieldName)) {
                    deserializedDatabaseMigrationProperties.sourceDatabaseName = reader.getString();
                } else if ("sourceServerName".equals(fieldName)) {
                    deserializedDatabaseMigrationProperties.sourceServerName = reader.getString();
                } else if ("targetDatabaseCollation".equals(fieldName)) {
                    deserializedDatabaseMigrationProperties.targetDatabaseCollation = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabaseMigrationProperties;
        });
    }
}
