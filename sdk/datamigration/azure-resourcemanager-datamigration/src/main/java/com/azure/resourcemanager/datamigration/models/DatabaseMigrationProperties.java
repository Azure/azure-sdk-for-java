// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;

/** Database Migration Resource properties. */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "kind",
    defaultImpl = DatabaseMigrationProperties.class)
@JsonTypeName("DatabaseMigrationProperties")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "SqlDb", value = DatabaseMigrationPropertiesSqlDb.class),
    @JsonSubTypes.Type(name = "SqlMi", value = DatabaseMigrationPropertiesSqlMi.class),
    @JsonSubTypes.Type(name = "SqlVm", value = DatabaseMigrationPropertiesSqlVm.class)
})
@Fluent
public class DatabaseMigrationProperties {
    /*
     * Resource Id of the target resource (SQL VM or SQL Managed Instance).
     */
    @JsonProperty(value = "scope")
    private String scope;

    /*
     * Provisioning State of migration. ProvisioningState as Succeeded implies
     * that validations have been performed and migration has started.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * Migration status.
     */
    @JsonProperty(value = "migrationStatus", access = JsonProperty.Access.WRITE_ONLY)
    private String migrationStatus;

    /*
     * Database migration start time.
     */
    @JsonProperty(value = "startedOn", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime startedOn;

    /*
     * Database migration end time.
     */
    @JsonProperty(value = "endedOn", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime endedOn;

    /*
     * Source SQL Server connection details.
     */
    @JsonProperty(value = "sourceSqlConnection")
    private SqlConnectionInformation sourceSqlConnection;

    /*
     * Name of the source database.
     */
    @JsonProperty(value = "sourceDatabaseName")
    private String sourceDatabaseName;

    /*
     * Name of the source sql server.
     */
    @JsonProperty(value = "sourceServerName", access = JsonProperty.Access.WRITE_ONLY)
    private String sourceServerName;

    /*
     * Resource Id of the Migration Service.
     */
    @JsonProperty(value = "migrationService")
    private String migrationService;

    /*
     * ID tracking current migration operation.
     */
    @JsonProperty(value = "migrationOperationId")
    private String migrationOperationId;

    /*
     * Error details in case of migration failure.
     */
    @JsonProperty(value = "migrationFailureError", access = JsonProperty.Access.WRITE_ONLY)
    private ErrorInfo migrationFailureError;

    /*
     * Database collation to be used for the target database.
     */
    @JsonProperty(value = "targetDatabaseCollation")
    private String targetDatabaseCollation;

    /*
     * Error message for migration provisioning failure, if any.
     */
    @JsonProperty(value = "provisioningError")
    private String provisioningError;

    /**
     * Get the scope property: Resource Id of the target resource (SQL VM or SQL Managed Instance).
     *
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the scope property: Resource Id of the target resource (SQL VM or SQL Managed Instance).
     *
     * @param scope the scope value to set.
     * @return the DatabaseMigrationProperties object itself.
     */
    public DatabaseMigrationProperties withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning State of migration. ProvisioningState as Succeeded implies that
     * validations have been performed and migration has started.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the migrationStatus property: Migration status.
     *
     * @return the migrationStatus value.
     */
    public String migrationStatus() {
        return this.migrationStatus;
    }

    /**
     * Get the startedOn property: Database migration start time.
     *
     * @return the startedOn value.
     */
    public OffsetDateTime startedOn() {
        return this.startedOn;
    }

    /**
     * Get the endedOn property: Database migration end time.
     *
     * @return the endedOn value.
     */
    public OffsetDateTime endedOn() {
        return this.endedOn;
    }

    /**
     * Get the sourceSqlConnection property: Source SQL Server connection details.
     *
     * @return the sourceSqlConnection value.
     */
    public SqlConnectionInformation sourceSqlConnection() {
        return this.sourceSqlConnection;
    }

    /**
     * Set the sourceSqlConnection property: Source SQL Server connection details.
     *
     * @param sourceSqlConnection the sourceSqlConnection value to set.
     * @return the DatabaseMigrationProperties object itself.
     */
    public DatabaseMigrationProperties withSourceSqlConnection(SqlConnectionInformation sourceSqlConnection) {
        this.sourceSqlConnection = sourceSqlConnection;
        return this;
    }

    /**
     * Get the sourceDatabaseName property: Name of the source database.
     *
     * @return the sourceDatabaseName value.
     */
    public String sourceDatabaseName() {
        return this.sourceDatabaseName;
    }

    /**
     * Set the sourceDatabaseName property: Name of the source database.
     *
     * @param sourceDatabaseName the sourceDatabaseName value to set.
     * @return the DatabaseMigrationProperties object itself.
     */
    public DatabaseMigrationProperties withSourceDatabaseName(String sourceDatabaseName) {
        this.sourceDatabaseName = sourceDatabaseName;
        return this;
    }

    /**
     * Get the sourceServerName property: Name of the source sql server.
     *
     * @return the sourceServerName value.
     */
    public String sourceServerName() {
        return this.sourceServerName;
    }

    /**
     * Get the migrationService property: Resource Id of the Migration Service.
     *
     * @return the migrationService value.
     */
    public String migrationService() {
        return this.migrationService;
    }

    /**
     * Set the migrationService property: Resource Id of the Migration Service.
     *
     * @param migrationService the migrationService value to set.
     * @return the DatabaseMigrationProperties object itself.
     */
    public DatabaseMigrationProperties withMigrationService(String migrationService) {
        this.migrationService = migrationService;
        return this;
    }

    /**
     * Get the migrationOperationId property: ID tracking current migration operation.
     *
     * @return the migrationOperationId value.
     */
    public String migrationOperationId() {
        return this.migrationOperationId;
    }

    /**
     * Set the migrationOperationId property: ID tracking current migration operation.
     *
     * @param migrationOperationId the migrationOperationId value to set.
     * @return the DatabaseMigrationProperties object itself.
     */
    public DatabaseMigrationProperties withMigrationOperationId(String migrationOperationId) {
        this.migrationOperationId = migrationOperationId;
        return this;
    }

    /**
     * Get the migrationFailureError property: Error details in case of migration failure.
     *
     * @return the migrationFailureError value.
     */
    public ErrorInfo migrationFailureError() {
        return this.migrationFailureError;
    }

    /**
     * Get the targetDatabaseCollation property: Database collation to be used for the target database.
     *
     * @return the targetDatabaseCollation value.
     */
    public String targetDatabaseCollation() {
        return this.targetDatabaseCollation;
    }

    /**
     * Set the targetDatabaseCollation property: Database collation to be used for the target database.
     *
     * @param targetDatabaseCollation the targetDatabaseCollation value to set.
     * @return the DatabaseMigrationProperties object itself.
     */
    public DatabaseMigrationProperties withTargetDatabaseCollation(String targetDatabaseCollation) {
        this.targetDatabaseCollation = targetDatabaseCollation;
        return this;
    }

    /**
     * Get the provisioningError property: Error message for migration provisioning failure, if any.
     *
     * @return the provisioningError value.
     */
    public String provisioningError() {
        return this.provisioningError;
    }

    /**
     * Set the provisioningError property: Error message for migration provisioning failure, if any.
     *
     * @param provisioningError the provisioningError value to set.
     * @return the DatabaseMigrationProperties object itself.
     */
    public DatabaseMigrationProperties withProvisioningError(String provisioningError) {
        this.provisioningError = provisioningError;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceSqlConnection() != null) {
            sourceSqlConnection().validate();
        }
        if (migrationFailureError() != null) {
            migrationFailureError().validate();
        }
    }
}
