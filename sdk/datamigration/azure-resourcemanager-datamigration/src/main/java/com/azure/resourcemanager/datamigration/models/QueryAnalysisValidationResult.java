// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Results for query analysis comparison between the source and target.
 */
@Immutable
public final class QueryAnalysisValidationResult implements JsonSerializable<QueryAnalysisValidationResult> {
    /*
     * List of queries executed and it's execution results in source and target
     */
    private QueryExecutionResult queryResults;

    /*
     * Errors that are part of the execution
     */
    private ValidationError validationErrors;

    /**
     * Creates an instance of QueryAnalysisValidationResult class.
     */
    public QueryAnalysisValidationResult() {
    }

    /**
     * Get the queryResults property: List of queries executed and it's execution results in source and target.
     * 
     * @return the queryResults value.
     */
    public QueryExecutionResult queryResults() {
        return this.queryResults;
    }

    /**
     * Get the validationErrors property: Errors that are part of the execution.
     * 
     * @return the validationErrors value.
     */
    public ValidationError validationErrors() {
        return this.validationErrors;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (queryResults() != null) {
            queryResults().validate();
        }
        if (validationErrors() != null) {
            validationErrors().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueryAnalysisValidationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueryAnalysisValidationResult if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the QueryAnalysisValidationResult.
     */
    public static QueryAnalysisValidationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueryAnalysisValidationResult deserializedQueryAnalysisValidationResult
                = new QueryAnalysisValidationResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("queryResults".equals(fieldName)) {
                    deserializedQueryAnalysisValidationResult.queryResults = QueryExecutionResult.fromJson(reader);
                } else if ("validationErrors".equals(fieldName)) {
                    deserializedQueryAnalysisValidationResult.validationErrors = ValidationError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQueryAnalysisValidationResult;
        });
    }
}
