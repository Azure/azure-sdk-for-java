// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Input for task that migrates Schema for SQL Server databases to Azure SQL databases. */
@Fluent
public final class MigrateSchemaSqlServerSqlDbTaskInput extends SqlMigrationTaskInput {
    /*
     * Databases to migrate
     */
    @JsonProperty(value = "selectedDatabases", required = true)
    private List<MigrateSchemaSqlServerSqlDbDatabaseInput> selectedDatabases;

    /*
     * encrypted key for secure fields
     */
    @JsonProperty(value = "encryptedKeyForSecureFields")
    private String encryptedKeyForSecureFields;

    /*
     * Migration start time
     */
    @JsonProperty(value = "startedOn")
    private String startedOn;

    /**
     * Get the selectedDatabases property: Databases to migrate.
     *
     * @return the selectedDatabases value.
     */
    public List<MigrateSchemaSqlServerSqlDbDatabaseInput> selectedDatabases() {
        return this.selectedDatabases;
    }

    /**
     * Set the selectedDatabases property: Databases to migrate.
     *
     * @param selectedDatabases the selectedDatabases value to set.
     * @return the MigrateSchemaSqlServerSqlDbTaskInput object itself.
     */
    public MigrateSchemaSqlServerSqlDbTaskInput withSelectedDatabases(
        List<MigrateSchemaSqlServerSqlDbDatabaseInput> selectedDatabases) {
        this.selectedDatabases = selectedDatabases;
        return this;
    }

    /**
     * Get the encryptedKeyForSecureFields property: encrypted key for secure fields.
     *
     * @return the encryptedKeyForSecureFields value.
     */
    public String encryptedKeyForSecureFields() {
        return this.encryptedKeyForSecureFields;
    }

    /**
     * Set the encryptedKeyForSecureFields property: encrypted key for secure fields.
     *
     * @param encryptedKeyForSecureFields the encryptedKeyForSecureFields value to set.
     * @return the MigrateSchemaSqlServerSqlDbTaskInput object itself.
     */
    public MigrateSchemaSqlServerSqlDbTaskInput withEncryptedKeyForSecureFields(String encryptedKeyForSecureFields) {
        this.encryptedKeyForSecureFields = encryptedKeyForSecureFields;
        return this;
    }

    /**
     * Get the startedOn property: Migration start time.
     *
     * @return the startedOn value.
     */
    public String startedOn() {
        return this.startedOn;
    }

    /**
     * Set the startedOn property: Migration start time.
     *
     * @param startedOn the startedOn value to set.
     * @return the MigrateSchemaSqlServerSqlDbTaskInput object itself.
     */
    public MigrateSchemaSqlServerSqlDbTaskInput withStartedOn(String startedOn) {
        this.startedOn = startedOn;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MigrateSchemaSqlServerSqlDbTaskInput withSourceConnectionInfo(SqlConnectionInfo sourceConnectionInfo) {
        super.withSourceConnectionInfo(sourceConnectionInfo);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MigrateSchemaSqlServerSqlDbTaskInput withTargetConnectionInfo(SqlConnectionInfo targetConnectionInfo) {
        super.withTargetConnectionInfo(targetConnectionInfo);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (selectedDatabases() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property selectedDatabases in model MigrateSchemaSqlServerSqlDbTaskInput"));
        } else {
            selectedDatabases().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MigrateSchemaSqlServerSqlDbTaskInput.class);
}
