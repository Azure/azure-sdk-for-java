// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Input for task that migrates Schema for SQL Server databases to Azure SQL databases.
 */
@Fluent
public final class MigrateSchemaSqlServerSqlDbTaskInput extends SqlMigrationTaskInput {
    /*
     * Databases to migrate
     */
    private List<MigrateSchemaSqlServerSqlDbDatabaseInput> selectedDatabases;

    /*
     * encrypted key for secure fields
     */
    private String encryptedKeyForSecureFields;

    /*
     * Migration start time
     */
    private String startedOn;

    /**
     * Creates an instance of MigrateSchemaSqlServerSqlDbTaskInput class.
     */
    public MigrateSchemaSqlServerSqlDbTaskInput() {
    }

    /**
     * Get the selectedDatabases property: Databases to migrate.
     * 
     * @return the selectedDatabases value.
     */
    public List<MigrateSchemaSqlServerSqlDbDatabaseInput> selectedDatabases() {
        return this.selectedDatabases;
    }

    /**
     * Set the selectedDatabases property: Databases to migrate.
     * 
     * @param selectedDatabases the selectedDatabases value to set.
     * @return the MigrateSchemaSqlServerSqlDbTaskInput object itself.
     */
    public MigrateSchemaSqlServerSqlDbTaskInput
        withSelectedDatabases(List<MigrateSchemaSqlServerSqlDbDatabaseInput> selectedDatabases) {
        this.selectedDatabases = selectedDatabases;
        return this;
    }

    /**
     * Get the encryptedKeyForSecureFields property: encrypted key for secure fields.
     * 
     * @return the encryptedKeyForSecureFields value.
     */
    public String encryptedKeyForSecureFields() {
        return this.encryptedKeyForSecureFields;
    }

    /**
     * Set the encryptedKeyForSecureFields property: encrypted key for secure fields.
     * 
     * @param encryptedKeyForSecureFields the encryptedKeyForSecureFields value to set.
     * @return the MigrateSchemaSqlServerSqlDbTaskInput object itself.
     */
    public MigrateSchemaSqlServerSqlDbTaskInput withEncryptedKeyForSecureFields(String encryptedKeyForSecureFields) {
        this.encryptedKeyForSecureFields = encryptedKeyForSecureFields;
        return this;
    }

    /**
     * Get the startedOn property: Migration start time.
     * 
     * @return the startedOn value.
     */
    public String startedOn() {
        return this.startedOn;
    }

    /**
     * Set the startedOn property: Migration start time.
     * 
     * @param startedOn the startedOn value to set.
     * @return the MigrateSchemaSqlServerSqlDbTaskInput object itself.
     */
    public MigrateSchemaSqlServerSqlDbTaskInput withStartedOn(String startedOn) {
        this.startedOn = startedOn;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MigrateSchemaSqlServerSqlDbTaskInput withSourceConnectionInfo(SqlConnectionInfo sourceConnectionInfo) {
        super.withSourceConnectionInfo(sourceConnectionInfo);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MigrateSchemaSqlServerSqlDbTaskInput withTargetConnectionInfo(SqlConnectionInfo targetConnectionInfo) {
        super.withTargetConnectionInfo(targetConnectionInfo);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (selectedDatabases() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property selectedDatabases in model MigrateSchemaSqlServerSqlDbTaskInput"));
        } else {
            selectedDatabases().forEach(e -> e.validate());
        }
        if (sourceConnectionInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceConnectionInfo in model MigrateSchemaSqlServerSqlDbTaskInput"));
        } else {
            sourceConnectionInfo().validate();
        }
        if (targetConnectionInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetConnectionInfo in model MigrateSchemaSqlServerSqlDbTaskInput"));
        } else {
            targetConnectionInfo().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MigrateSchemaSqlServerSqlDbTaskInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("sourceConnectionInfo", sourceConnectionInfo());
        jsonWriter.writeJsonField("targetConnectionInfo", targetConnectionInfo());
        jsonWriter.writeArrayField("selectedDatabases", this.selectedDatabases,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("encryptedKeyForSecureFields", this.encryptedKeyForSecureFields);
        jsonWriter.writeStringField("startedOn", this.startedOn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrateSchemaSqlServerSqlDbTaskInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrateSchemaSqlServerSqlDbTaskInput if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MigrateSchemaSqlServerSqlDbTaskInput.
     */
    public static MigrateSchemaSqlServerSqlDbTaskInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrateSchemaSqlServerSqlDbTaskInput deserializedMigrateSchemaSqlServerSqlDbTaskInput
                = new MigrateSchemaSqlServerSqlDbTaskInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceConnectionInfo".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbTaskInput
                        .withSourceConnectionInfo(SqlConnectionInfo.fromJson(reader));
                } else if ("targetConnectionInfo".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbTaskInput
                        .withTargetConnectionInfo(SqlConnectionInfo.fromJson(reader));
                } else if ("selectedDatabases".equals(fieldName)) {
                    List<MigrateSchemaSqlServerSqlDbDatabaseInput> selectedDatabases
                        = reader.readArray(reader1 -> MigrateSchemaSqlServerSqlDbDatabaseInput.fromJson(reader1));
                    deserializedMigrateSchemaSqlServerSqlDbTaskInput.selectedDatabases = selectedDatabases;
                } else if ("encryptedKeyForSecureFields".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbTaskInput.encryptedKeyForSecureFields = reader.getString();
                } else if ("startedOn".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbTaskInput.startedOn = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrateSchemaSqlServerSqlDbTaskInput;
        });
    }
}
