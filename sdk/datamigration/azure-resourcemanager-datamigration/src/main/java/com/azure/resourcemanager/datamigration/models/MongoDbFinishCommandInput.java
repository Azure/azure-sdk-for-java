// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes the input to the 'finish' MongoDB migration command.
 */
@Fluent
public final class MongoDbFinishCommandInput extends MongoDbCommandInput {
    /*
     * If true, replication for the affected objects will be stopped immediately. If false, the migrator will finish
     * replaying queued events before finishing the replication.
     */
    private boolean immediate;

    /**
     * Creates an instance of MongoDbFinishCommandInput class.
     */
    public MongoDbFinishCommandInput() {
    }

    /**
     * Get the immediate property: If true, replication for the affected objects will be stopped immediately. If false,
     * the migrator will finish replaying queued events before finishing the replication.
     * 
     * @return the immediate value.
     */
    public boolean immediate() {
        return this.immediate;
    }

    /**
     * Set the immediate property: If true, replication for the affected objects will be stopped immediately. If false,
     * the migrator will finish replaying queued events before finishing the replication.
     * 
     * @param immediate the immediate value to set.
     * @return the MongoDbFinishCommandInput object itself.
     */
    public MongoDbFinishCommandInput withImmediate(boolean immediate) {
        this.immediate = immediate;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbFinishCommandInput withObjectName(String objectName) {
        super.withObjectName(objectName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("objectName", objectName());
        jsonWriter.writeBooleanField("immediate", this.immediate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoDbFinishCommandInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoDbFinishCommandInput if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MongoDbFinishCommandInput.
     */
    public static MongoDbFinishCommandInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoDbFinishCommandInput deserializedMongoDbFinishCommandInput = new MongoDbFinishCommandInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("objectName".equals(fieldName)) {
                    deserializedMongoDbFinishCommandInput.withObjectName(reader.getString());
                } else if ("immediate".equals(fieldName)) {
                    deserializedMongoDbFinishCommandInput.immediate = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoDbFinishCommandInput;
        });
    }
}
