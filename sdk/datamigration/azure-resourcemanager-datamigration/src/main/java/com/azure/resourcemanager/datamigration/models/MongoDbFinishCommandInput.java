// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Describes the input to the 'finish' MongoDB migration command. */
@Fluent
public final class MongoDbFinishCommandInput extends MongoDbCommandInput {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MongoDbFinishCommandInput.class);

    /*
     * If true, replication for the affected objects will be stopped
     * immediately. If false, the migrator will finish replaying queued events
     * before finishing the replication.
     */
    @JsonProperty(value = "immediate", required = true)
    private boolean immediate;

    /**
     * Get the immediate property: If true, replication for the affected objects will be stopped immediately. If false,
     * the migrator will finish replaying queued events before finishing the replication.
     *
     * @return the immediate value.
     */
    public boolean immediate() {
        return this.immediate;
    }

    /**
     * Set the immediate property: If true, replication for the affected objects will be stopped immediately. If false,
     * the migrator will finish replaying queued events before finishing the replication.
     *
     * @param immediate the immediate value to set.
     * @return the MongoDbFinishCommandInput object itself.
     */
    public MongoDbFinishCommandInput withImmediate(boolean immediate) {
        this.immediate = immediate;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbFinishCommandInput withObjectName(String objectName) {
        super.withObjectName(objectName);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
