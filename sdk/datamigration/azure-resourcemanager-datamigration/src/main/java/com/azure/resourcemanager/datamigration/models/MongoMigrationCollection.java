// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Mongo source and target database and collection details.
 */
@Fluent
public final class MongoMigrationCollection implements JsonSerializable<MongoMigrationCollection> {
    /*
     * Source database name.
     */
    private String sourceDatabase;

    /*
     * Source collection name.
     */
    private String sourceCollection;

    /*
     * Target database name.
     */
    private String targetDatabase;

    /*
     * Target collection name.
     */
    private String targetCollection;

    /*
     * Detailed migration status. Not included by default.
     */
    private MongoMigrationProgressDetails migrationProgressDetails;

    /**
     * Creates an instance of MongoMigrationCollection class.
     */
    public MongoMigrationCollection() {
    }

    /**
     * Get the sourceDatabase property: Source database name.
     * 
     * @return the sourceDatabase value.
     */
    public String sourceDatabase() {
        return this.sourceDatabase;
    }

    /**
     * Set the sourceDatabase property: Source database name.
     * 
     * @param sourceDatabase the sourceDatabase value to set.
     * @return the MongoMigrationCollection object itself.
     */
    public MongoMigrationCollection withSourceDatabase(String sourceDatabase) {
        this.sourceDatabase = sourceDatabase;
        return this;
    }

    /**
     * Get the sourceCollection property: Source collection name.
     * 
     * @return the sourceCollection value.
     */
    public String sourceCollection() {
        return this.sourceCollection;
    }

    /**
     * Set the sourceCollection property: Source collection name.
     * 
     * @param sourceCollection the sourceCollection value to set.
     * @return the MongoMigrationCollection object itself.
     */
    public MongoMigrationCollection withSourceCollection(String sourceCollection) {
        this.sourceCollection = sourceCollection;
        return this;
    }

    /**
     * Get the targetDatabase property: Target database name.
     * 
     * @return the targetDatabase value.
     */
    public String targetDatabase() {
        return this.targetDatabase;
    }

    /**
     * Set the targetDatabase property: Target database name.
     * 
     * @param targetDatabase the targetDatabase value to set.
     * @return the MongoMigrationCollection object itself.
     */
    public MongoMigrationCollection withTargetDatabase(String targetDatabase) {
        this.targetDatabase = targetDatabase;
        return this;
    }

    /**
     * Get the targetCollection property: Target collection name.
     * 
     * @return the targetCollection value.
     */
    public String targetCollection() {
        return this.targetCollection;
    }

    /**
     * Set the targetCollection property: Target collection name.
     * 
     * @param targetCollection the targetCollection value to set.
     * @return the MongoMigrationCollection object itself.
     */
    public MongoMigrationCollection withTargetCollection(String targetCollection) {
        this.targetCollection = targetCollection;
        return this;
    }

    /**
     * Get the migrationProgressDetails property: Detailed migration status. Not included by default.
     * 
     * @return the migrationProgressDetails value.
     */
    public MongoMigrationProgressDetails migrationProgressDetails() {
        return this.migrationProgressDetails;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (migrationProgressDetails() != null) {
            migrationProgressDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceDatabase", this.sourceDatabase);
        jsonWriter.writeStringField("sourceCollection", this.sourceCollection);
        jsonWriter.writeStringField("targetDatabase", this.targetDatabase);
        jsonWriter.writeStringField("targetCollection", this.targetCollection);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoMigrationCollection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoMigrationCollection if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MongoMigrationCollection.
     */
    public static MongoMigrationCollection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoMigrationCollection deserializedMongoMigrationCollection = new MongoMigrationCollection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceDatabase".equals(fieldName)) {
                    deserializedMongoMigrationCollection.sourceDatabase = reader.getString();
                } else if ("sourceCollection".equals(fieldName)) {
                    deserializedMongoMigrationCollection.sourceCollection = reader.getString();
                } else if ("targetDatabase".equals(fieldName)) {
                    deserializedMongoMigrationCollection.targetDatabase = reader.getString();
                } else if ("targetCollection".equals(fieldName)) {
                    deserializedMongoMigrationCollection.targetCollection = reader.getString();
                } else if ("migrationProgressDetails".equals(fieldName)) {
                    deserializedMongoMigrationCollection.migrationProgressDetails
                        = MongoMigrationProgressDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoMigrationCollection;
        });
    }
}
