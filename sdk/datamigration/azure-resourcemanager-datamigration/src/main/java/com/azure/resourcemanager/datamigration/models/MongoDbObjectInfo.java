// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes a database or collection within a MongoDB data source.
 */
@Fluent
public class MongoDbObjectInfo implements JsonSerializable<MongoDbObjectInfo> {
    /*
     * The average document size, or -1 if the average size is unknown
     */
    private long averageDocumentSize;

    /*
     * The estimated total data size, in bytes, or -1 if the size is unknown.
     */
    private long dataSize;

    /*
     * The estimated total number of documents, or -1 if the document count is unknown
     */
    private long documentCount;

    /*
     * The unqualified name of the database or collection
     */
    private String name;

    /*
     * The qualified name of the database or collection. For a collection, this is the database-qualified name.
     */
    private String qualifiedName;

    /**
     * Creates an instance of MongoDbObjectInfo class.
     */
    public MongoDbObjectInfo() {
    }

    /**
     * Get the averageDocumentSize property: The average document size, or -1 if the average size is unknown.
     * 
     * @return the averageDocumentSize value.
     */
    public long averageDocumentSize() {
        return this.averageDocumentSize;
    }

    /**
     * Set the averageDocumentSize property: The average document size, or -1 if the average size is unknown.
     * 
     * @param averageDocumentSize the averageDocumentSize value to set.
     * @return the MongoDbObjectInfo object itself.
     */
    public MongoDbObjectInfo withAverageDocumentSize(long averageDocumentSize) {
        this.averageDocumentSize = averageDocumentSize;
        return this;
    }

    /**
     * Get the dataSize property: The estimated total data size, in bytes, or -1 if the size is unknown.
     * 
     * @return the dataSize value.
     */
    public long dataSize() {
        return this.dataSize;
    }

    /**
     * Set the dataSize property: The estimated total data size, in bytes, or -1 if the size is unknown.
     * 
     * @param dataSize the dataSize value to set.
     * @return the MongoDbObjectInfo object itself.
     */
    public MongoDbObjectInfo withDataSize(long dataSize) {
        this.dataSize = dataSize;
        return this;
    }

    /**
     * Get the documentCount property: The estimated total number of documents, or -1 if the document count is unknown.
     * 
     * @return the documentCount value.
     */
    public long documentCount() {
        return this.documentCount;
    }

    /**
     * Set the documentCount property: The estimated total number of documents, or -1 if the document count is unknown.
     * 
     * @param documentCount the documentCount value to set.
     * @return the MongoDbObjectInfo object itself.
     */
    public MongoDbObjectInfo withDocumentCount(long documentCount) {
        this.documentCount = documentCount;
        return this;
    }

    /**
     * Get the name property: The unqualified name of the database or collection.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The unqualified name of the database or collection.
     * 
     * @param name the name value to set.
     * @return the MongoDbObjectInfo object itself.
     */
    public MongoDbObjectInfo withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the qualifiedName property: The qualified name of the database or collection. For a collection, this is the
     * database-qualified name.
     * 
     * @return the qualifiedName value.
     */
    public String qualifiedName() {
        return this.qualifiedName;
    }

    /**
     * Set the qualifiedName property: The qualified name of the database or collection. For a collection, this is the
     * database-qualified name.
     * 
     * @param qualifiedName the qualifiedName value to set.
     * @return the MongoDbObjectInfo object itself.
     */
    public MongoDbObjectInfo withQualifiedName(String qualifiedName) {
        this.qualifiedName = qualifiedName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model MongoDbObjectInfo"));
        }
        if (qualifiedName() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property qualifiedName in model MongoDbObjectInfo"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MongoDbObjectInfo.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("averageDocumentSize", this.averageDocumentSize);
        jsonWriter.writeLongField("dataSize", this.dataSize);
        jsonWriter.writeLongField("documentCount", this.documentCount);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("qualifiedName", this.qualifiedName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoDbObjectInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoDbObjectInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MongoDbObjectInfo.
     */
    public static MongoDbObjectInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoDbObjectInfo deserializedMongoDbObjectInfo = new MongoDbObjectInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("averageDocumentSize".equals(fieldName)) {
                    deserializedMongoDbObjectInfo.averageDocumentSize = reader.getLong();
                } else if ("dataSize".equals(fieldName)) {
                    deserializedMongoDbObjectInfo.dataSize = reader.getLong();
                } else if ("documentCount".equals(fieldName)) {
                    deserializedMongoDbObjectInfo.documentCount = reader.getLong();
                } else if ("name".equals(fieldName)) {
                    deserializedMongoDbObjectInfo.name = reader.getString();
                } else if ("qualifiedName".equals(fieldName)) {
                    deserializedMongoDbObjectInfo.qualifiedName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoDbObjectInfo;
        });
    }
}
