// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Service health status.
 */
@Fluent
public final class DataMigrationServiceStatusResponseInner
    implements JsonSerializable<DataMigrationServiceStatusResponseInner> {
    /*
     * The DMS instance agent version
     */
    private String agentVersion;

    /*
     * The machine-readable status, such as 'Initializing', 'Offline', 'Online', 'Deploying', 'Deleting', 'Stopped',
     * 'Stopping', 'Starting', 'FailedToStart', 'FailedToStop' or 'Failed'
     */
    private String status;

    /*
     * The services virtual machine size, such as 'Standard_D2_v2'
     */
    private String vmSize;

    /*
     * The list of supported task types
     */
    private List<String> supportedTaskTypes;

    /**
     * Creates an instance of DataMigrationServiceStatusResponseInner class.
     */
    public DataMigrationServiceStatusResponseInner() {
    }

    /**
     * Get the agentVersion property: The DMS instance agent version.
     * 
     * @return the agentVersion value.
     */
    public String agentVersion() {
        return this.agentVersion;
    }

    /**
     * Set the agentVersion property: The DMS instance agent version.
     * 
     * @param agentVersion the agentVersion value to set.
     * @return the DataMigrationServiceStatusResponseInner object itself.
     */
    public DataMigrationServiceStatusResponseInner withAgentVersion(String agentVersion) {
        this.agentVersion = agentVersion;
        return this;
    }

    /**
     * Get the status property: The machine-readable status, such as 'Initializing', 'Offline', 'Online', 'Deploying',
     * 'Deleting', 'Stopped', 'Stopping', 'Starting', 'FailedToStart', 'FailedToStop' or 'Failed'.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: The machine-readable status, such as 'Initializing', 'Offline', 'Online', 'Deploying',
     * 'Deleting', 'Stopped', 'Stopping', 'Starting', 'FailedToStart', 'FailedToStop' or 'Failed'.
     * 
     * @param status the status value to set.
     * @return the DataMigrationServiceStatusResponseInner object itself.
     */
    public DataMigrationServiceStatusResponseInner withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the vmSize property: The services virtual machine size, such as 'Standard_D2_v2'.
     * 
     * @return the vmSize value.
     */
    public String vmSize() {
        return this.vmSize;
    }

    /**
     * Set the vmSize property: The services virtual machine size, such as 'Standard_D2_v2'.
     * 
     * @param vmSize the vmSize value to set.
     * @return the DataMigrationServiceStatusResponseInner object itself.
     */
    public DataMigrationServiceStatusResponseInner withVmSize(String vmSize) {
        this.vmSize = vmSize;
        return this;
    }

    /**
     * Get the supportedTaskTypes property: The list of supported task types.
     * 
     * @return the supportedTaskTypes value.
     */
    public List<String> supportedTaskTypes() {
        return this.supportedTaskTypes;
    }

    /**
     * Set the supportedTaskTypes property: The list of supported task types.
     * 
     * @param supportedTaskTypes the supportedTaskTypes value to set.
     * @return the DataMigrationServiceStatusResponseInner object itself.
     */
    public DataMigrationServiceStatusResponseInner withSupportedTaskTypes(List<String> supportedTaskTypes) {
        this.supportedTaskTypes = supportedTaskTypes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("agentVersion", this.agentVersion);
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("vmSize", this.vmSize);
        jsonWriter.writeArrayField("supportedTaskTypes", this.supportedTaskTypes,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataMigrationServiceStatusResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataMigrationServiceStatusResponseInner if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataMigrationServiceStatusResponseInner.
     */
    public static DataMigrationServiceStatusResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataMigrationServiceStatusResponseInner deserializedDataMigrationServiceStatusResponseInner
                = new DataMigrationServiceStatusResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("agentVersion".equals(fieldName)) {
                    deserializedDataMigrationServiceStatusResponseInner.agentVersion = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedDataMigrationServiceStatusResponseInner.status = reader.getString();
                } else if ("vmSize".equals(fieldName)) {
                    deserializedDataMigrationServiceStatusResponseInner.vmSize = reader.getString();
                } else if ("supportedTaskTypes".equals(fieldName)) {
                    List<String> supportedTaskTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedDataMigrationServiceStatusResponseInner.supportedTaskTypes = supportedTaskTypes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataMigrationServiceStatusResponseInner;
        });
    }
}
