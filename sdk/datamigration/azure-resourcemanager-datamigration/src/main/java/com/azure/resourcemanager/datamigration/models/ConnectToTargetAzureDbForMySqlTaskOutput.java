// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Output for the task that validates connection to Azure Database for MySQL and target server requirements.
 */
@Immutable
public final class ConnectToTargetAzureDbForMySqlTaskOutput
    implements JsonSerializable<ConnectToTargetAzureDbForMySqlTaskOutput> {
    /*
     * Result identifier
     */
    private String id;

    /*
     * Version of the target server
     */
    private String serverVersion;

    /*
     * List of databases on target server
     */
    private List<String> databases;

    /*
     * Target server brand version
     */
    private String targetServerBrandVersion;

    /*
     * Validation errors associated with the task
     */
    private List<ReportableException> validationErrors;

    /**
     * Creates an instance of ConnectToTargetAzureDbForMySqlTaskOutput class.
     */
    public ConnectToTargetAzureDbForMySqlTaskOutput() {
    }

    /**
     * Get the id property: Result identifier.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the serverVersion property: Version of the target server.
     * 
     * @return the serverVersion value.
     */
    public String serverVersion() {
        return this.serverVersion;
    }

    /**
     * Get the databases property: List of databases on target server.
     * 
     * @return the databases value.
     */
    public List<String> databases() {
        return this.databases;
    }

    /**
     * Get the targetServerBrandVersion property: Target server brand version.
     * 
     * @return the targetServerBrandVersion value.
     */
    public String targetServerBrandVersion() {
        return this.targetServerBrandVersion;
    }

    /**
     * Get the validationErrors property: Validation errors associated with the task.
     * 
     * @return the validationErrors value.
     */
    public List<ReportableException> validationErrors() {
        return this.validationErrors;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (validationErrors() != null) {
            validationErrors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectToTargetAzureDbForMySqlTaskOutput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectToTargetAzureDbForMySqlTaskOutput if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectToTargetAzureDbForMySqlTaskOutput.
     */
    public static ConnectToTargetAzureDbForMySqlTaskOutput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectToTargetAzureDbForMySqlTaskOutput deserializedConnectToTargetAzureDbForMySqlTaskOutput
                = new ConnectToTargetAzureDbForMySqlTaskOutput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedConnectToTargetAzureDbForMySqlTaskOutput.id = reader.getString();
                } else if ("serverVersion".equals(fieldName)) {
                    deserializedConnectToTargetAzureDbForMySqlTaskOutput.serverVersion = reader.getString();
                } else if ("databases".equals(fieldName)) {
                    List<String> databases = reader.readArray(reader1 -> reader1.getString());
                    deserializedConnectToTargetAzureDbForMySqlTaskOutput.databases = databases;
                } else if ("targetServerBrandVersion".equals(fieldName)) {
                    deserializedConnectToTargetAzureDbForMySqlTaskOutput.targetServerBrandVersion = reader.getString();
                } else if ("validationErrors".equals(fieldName)) {
                    List<ReportableException> validationErrors
                        = reader.readArray(reader1 -> ReportableException.fromJson(reader1));
                    deserializedConnectToTargetAzureDbForMySqlTaskOutput.validationErrors = validationErrors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectToTargetAzureDbForMySqlTaskOutput;
        });
    }
}
