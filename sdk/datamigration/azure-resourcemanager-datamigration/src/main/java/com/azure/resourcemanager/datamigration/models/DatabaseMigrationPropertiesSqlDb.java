// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/** Database Migration Resource properties for SQL database. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("SqlDb")
@Fluent
public final class DatabaseMigrationPropertiesSqlDb extends DatabaseMigrationProperties {
    /*
     * Detailed migration status. Not included by default.
     */
    @JsonProperty(value = "migrationStatusDetails", access = JsonProperty.Access.WRITE_ONLY)
    private SqlDbMigrationStatusDetails migrationStatusDetails;

    /*
     * Target SQL DB connection details.
     */
    @JsonProperty(value = "targetSqlConnection")
    private SqlConnectionInformation targetSqlConnection;

    /*
     * Offline configuration.
     */
    @JsonProperty(value = "offlineConfiguration", access = JsonProperty.Access.WRITE_ONLY)
    private SqlDbOfflineConfiguration offlineConfiguration;

    /*
     * List of tables to copy.
     */
    @JsonProperty(value = "tableList")
    private List<String> tableList;

    /**
     * Get the migrationStatusDetails property: Detailed migration status. Not included by default.
     *
     * @return the migrationStatusDetails value.
     */
    public SqlDbMigrationStatusDetails migrationStatusDetails() {
        return this.migrationStatusDetails;
    }

    /**
     * Get the targetSqlConnection property: Target SQL DB connection details.
     *
     * @return the targetSqlConnection value.
     */
    public SqlConnectionInformation targetSqlConnection() {
        return this.targetSqlConnection;
    }

    /**
     * Set the targetSqlConnection property: Target SQL DB connection details.
     *
     * @param targetSqlConnection the targetSqlConnection value to set.
     * @return the DatabaseMigrationPropertiesSqlDb object itself.
     */
    public DatabaseMigrationPropertiesSqlDb withTargetSqlConnection(SqlConnectionInformation targetSqlConnection) {
        this.targetSqlConnection = targetSqlConnection;
        return this;
    }

    /**
     * Get the offlineConfiguration property: Offline configuration.
     *
     * @return the offlineConfiguration value.
     */
    public SqlDbOfflineConfiguration offlineConfiguration() {
        return this.offlineConfiguration;
    }

    /**
     * Get the tableList property: List of tables to copy.
     *
     * @return the tableList value.
     */
    public List<String> tableList() {
        return this.tableList;
    }

    /**
     * Set the tableList property: List of tables to copy.
     *
     * @param tableList the tableList value to set.
     * @return the DatabaseMigrationPropertiesSqlDb object itself.
     */
    public DatabaseMigrationPropertiesSqlDb withTableList(List<String> tableList) {
        this.tableList = tableList;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DatabaseMigrationPropertiesSqlDb withScope(String scope) {
        super.withScope(scope);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DatabaseMigrationPropertiesSqlDb withSourceSqlConnection(SqlConnectionInformation sourceSqlConnection) {
        super.withSourceSqlConnection(sourceSqlConnection);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DatabaseMigrationPropertiesSqlDb withSourceDatabaseName(String sourceDatabaseName) {
        super.withSourceDatabaseName(sourceDatabaseName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DatabaseMigrationPropertiesSqlDb withMigrationService(String migrationService) {
        super.withMigrationService(migrationService);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DatabaseMigrationPropertiesSqlDb withMigrationOperationId(String migrationOperationId) {
        super.withMigrationOperationId(migrationOperationId);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DatabaseMigrationPropertiesSqlDb withTargetDatabaseCollation(String targetDatabaseCollation) {
        super.withTargetDatabaseCollation(targetDatabaseCollation);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DatabaseMigrationPropertiesSqlDb withProvisioningError(String provisioningError) {
        super.withProvisioningError(provisioningError);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (migrationStatusDetails() != null) {
            migrationStatusDetails().validate();
        }
        if (targetSqlConnection() != null) {
            targetSqlConnection().validate();
        }
        if (offlineConfiguration() != null) {
            offlineConfiguration().validate();
        }
    }
}
