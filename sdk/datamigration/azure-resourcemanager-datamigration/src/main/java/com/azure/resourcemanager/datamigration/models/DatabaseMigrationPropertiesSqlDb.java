// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Database Migration Resource properties for SQL database.
 */
@Fluent
public final class DatabaseMigrationPropertiesSqlDb extends DatabaseMigrationProperties {
    /*
     * The kind property.
     */
    private ResourceType kind = ResourceType.SQL_DB;

    /*
     * Detailed migration status. Not included by default.
     */
    private SqlDbMigrationStatusDetails migrationStatusDetails;

    /*
     * Target SQL DB connection details.
     */
    private SqlConnectionInformation targetSqlConnection;

    /*
     * Offline configuration.
     */
    private SqlDbOfflineConfiguration offlineConfiguration;

    /*
     * List of tables to copy.
     */
    private List<String> tableList;

    /**
     * Creates an instance of DatabaseMigrationPropertiesSqlDb class.
     */
    public DatabaseMigrationPropertiesSqlDb() {
    }

    /**
     * Get the kind property: The kind property.
     * 
     * @return the kind value.
     */
    @Override
    public ResourceType kind() {
        return this.kind;
    }

    /**
     * Get the migrationStatusDetails property: Detailed migration status. Not included by default.
     * 
     * @return the migrationStatusDetails value.
     */
    public SqlDbMigrationStatusDetails migrationStatusDetails() {
        return this.migrationStatusDetails;
    }

    /**
     * Get the targetSqlConnection property: Target SQL DB connection details.
     * 
     * @return the targetSqlConnection value.
     */
    public SqlConnectionInformation targetSqlConnection() {
        return this.targetSqlConnection;
    }

    /**
     * Set the targetSqlConnection property: Target SQL DB connection details.
     * 
     * @param targetSqlConnection the targetSqlConnection value to set.
     * @return the DatabaseMigrationPropertiesSqlDb object itself.
     */
    public DatabaseMigrationPropertiesSqlDb withTargetSqlConnection(SqlConnectionInformation targetSqlConnection) {
        this.targetSqlConnection = targetSqlConnection;
        return this;
    }

    /**
     * Get the offlineConfiguration property: Offline configuration.
     * 
     * @return the offlineConfiguration value.
     */
    public SqlDbOfflineConfiguration offlineConfiguration() {
        return this.offlineConfiguration;
    }

    /**
     * Get the tableList property: List of tables to copy.
     * 
     * @return the tableList value.
     */
    public List<String> tableList() {
        return this.tableList;
    }

    /**
     * Set the tableList property: List of tables to copy.
     * 
     * @param tableList the tableList value to set.
     * @return the DatabaseMigrationPropertiesSqlDb object itself.
     */
    public DatabaseMigrationPropertiesSqlDb withTableList(List<String> tableList) {
        this.tableList = tableList;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlDb withSourceSqlConnection(SqlConnectionInformation sourceSqlConnection) {
        super.withSourceSqlConnection(sourceSqlConnection);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlDb withSourceDatabaseName(String sourceDatabaseName) {
        super.withSourceDatabaseName(sourceDatabaseName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlDb withTargetDatabaseCollation(String targetDatabaseCollation) {
        super.withTargetDatabaseCollation(targetDatabaseCollation);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlDb withScope(String scope) {
        super.withScope(scope);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlDb withMigrationService(String migrationService) {
        super.withMigrationService(migrationService);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlDb withMigrationOperationId(String migrationOperationId) {
        super.withMigrationOperationId(migrationOperationId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlDb withProvisioningError(String provisioningError) {
        super.withProvisioningError(provisioningError);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (migrationStatusDetails() != null) {
            migrationStatusDetails().validate();
        }
        if (targetSqlConnection() != null) {
            targetSqlConnection().validate();
        }
        if (offlineConfiguration() != null) {
            offlineConfiguration().validate();
        }
        if (migrationFailureError() != null) {
            migrationFailureError().validate();
        }
        if (sourceSqlConnection() != null) {
            sourceSqlConnection().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scope", scope());
        jsonWriter.writeStringField("migrationService", migrationService());
        jsonWriter.writeStringField("migrationOperationId", migrationOperationId());
        jsonWriter.writeStringField("provisioningError", provisioningError());
        jsonWriter.writeJsonField("sourceSqlConnection", sourceSqlConnection());
        jsonWriter.writeStringField("sourceDatabaseName", sourceDatabaseName());
        jsonWriter.writeStringField("targetDatabaseCollation", targetDatabaseCollation());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeJsonField("targetSqlConnection", this.targetSqlConnection);
        jsonWriter.writeArrayField("tableList", this.tableList, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabaseMigrationPropertiesSqlDb from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabaseMigrationPropertiesSqlDb if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatabaseMigrationPropertiesSqlDb.
     */
    public static DatabaseMigrationPropertiesSqlDb fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabaseMigrationPropertiesSqlDb deserializedDatabaseMigrationPropertiesSqlDb
                = new DatabaseMigrationPropertiesSqlDb();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scope".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlDb.withScope(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlDb
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("migrationStatus".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlDb.withMigrationStatus(reader.getString());
                } else if ("startedOn".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlDb.withStartedOn(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("endedOn".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlDb.withEndedOn(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("migrationService".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlDb.withMigrationService(reader.getString());
                } else if ("migrationOperationId".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlDb.withMigrationOperationId(reader.getString());
                } else if ("migrationFailureError".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlDb.withMigrationFailureError(ErrorInfo.fromJson(reader));
                } else if ("provisioningError".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlDb.withProvisioningError(reader.getString());
                } else if ("sourceSqlConnection".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlDb
                        .withSourceSqlConnection(SqlConnectionInformation.fromJson(reader));
                } else if ("sourceDatabaseName".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlDb.withSourceDatabaseName(reader.getString());
                } else if ("sourceServerName".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlDb.withSourceServerName(reader.getString());
                } else if ("targetDatabaseCollation".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlDb.withTargetDatabaseCollation(reader.getString());
                } else if ("kind".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlDb.kind = ResourceType.fromString(reader.getString());
                } else if ("migrationStatusDetails".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlDb.migrationStatusDetails
                        = SqlDbMigrationStatusDetails.fromJson(reader);
                } else if ("targetSqlConnection".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlDb.targetSqlConnection
                        = SqlConnectionInformation.fromJson(reader);
                } else if ("offlineConfiguration".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlDb.offlineConfiguration
                        = SqlDbOfflineConfiguration.fromJson(reader);
                } else if ("tableList".equals(fieldName)) {
                    List<String> tableList = reader.readArray(reader1 -> reader1.getString());
                    deserializedDatabaseMigrationPropertiesSqlDb.tableList = tableList;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabaseMigrationPropertiesSqlDb;
        });
    }
}
