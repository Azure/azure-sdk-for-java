// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Migration level result for Sql server to Azure Sql DB migration.
 */
@Immutable
public final class MigrateSqlServerSqlDbTaskOutputMigrationLevel extends MigrateSqlServerSqlDbTaskOutput {
    /*
     * Result type
     */
    private String resultType = "MigrationLevelOutput";

    /*
     * Migration start time
     */
    private OffsetDateTime startedOn;

    /*
     * Migration end time
     */
    private OffsetDateTime endedOn;

    /*
     * Duration of task execution in seconds.
     */
    private Long durationInSeconds;

    /*
     * Current status of migration
     */
    private MigrationStatus status;

    /*
     * Migration status message
     */
    private String statusMessage;

    /*
     * Migration progress message
     */
    private String message;

    /*
     * Selected databases as a map from database name to database id
     */
    private String databases;

    /*
     * Summary of database results in the migration
     */
    private String databaseSummary;

    /*
     * Migration Report Result, provides unique url for downloading your migration report.
     */
    private MigrationReportResult migrationReport;

    /*
     * Source server version
     */
    private String sourceServerVersion;

    /*
     * Source server brand version
     */
    private String sourceServerBrandVersion;

    /*
     * Target server version
     */
    private String targetServerVersion;

    /*
     * Target server brand version
     */
    private String targetServerBrandVersion;

    /*
     * Migration exceptions and warnings.
     */
    private List<ReportableException> exceptionsAndWarnings;

    /*
     * Result identifier
     */
    private String id;

    /**
     * Creates an instance of MigrateSqlServerSqlDbTaskOutputMigrationLevel class.
     */
    public MigrateSqlServerSqlDbTaskOutputMigrationLevel() {
    }

    /**
     * Get the resultType property: Result type.
     * 
     * @return the resultType value.
     */
    @Override
    public String resultType() {
        return this.resultType;
    }

    /**
     * Get the startedOn property: Migration start time.
     * 
     * @return the startedOn value.
     */
    public OffsetDateTime startedOn() {
        return this.startedOn;
    }

    /**
     * Get the endedOn property: Migration end time.
     * 
     * @return the endedOn value.
     */
    public OffsetDateTime endedOn() {
        return this.endedOn;
    }

    /**
     * Get the durationInSeconds property: Duration of task execution in seconds.
     * 
     * @return the durationInSeconds value.
     */
    public Long durationInSeconds() {
        return this.durationInSeconds;
    }

    /**
     * Get the status property: Current status of migration.
     * 
     * @return the status value.
     */
    public MigrationStatus status() {
        return this.status;
    }

    /**
     * Get the statusMessage property: Migration status message.
     * 
     * @return the statusMessage value.
     */
    public String statusMessage() {
        return this.statusMessage;
    }

    /**
     * Get the message property: Migration progress message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Get the databases property: Selected databases as a map from database name to database id.
     * 
     * @return the databases value.
     */
    public String databases() {
        return this.databases;
    }

    /**
     * Get the databaseSummary property: Summary of database results in the migration.
     * 
     * @return the databaseSummary value.
     */
    public String databaseSummary() {
        return this.databaseSummary;
    }

    /**
     * Get the migrationReport property: Migration Report Result, provides unique url for downloading your migration
     * report.
     * 
     * @return the migrationReport value.
     */
    public MigrationReportResult migrationReport() {
        return this.migrationReport;
    }

    /**
     * Get the sourceServerVersion property: Source server version.
     * 
     * @return the sourceServerVersion value.
     */
    public String sourceServerVersion() {
        return this.sourceServerVersion;
    }

    /**
     * Get the sourceServerBrandVersion property: Source server brand version.
     * 
     * @return the sourceServerBrandVersion value.
     */
    public String sourceServerBrandVersion() {
        return this.sourceServerBrandVersion;
    }

    /**
     * Get the targetServerVersion property: Target server version.
     * 
     * @return the targetServerVersion value.
     */
    public String targetServerVersion() {
        return this.targetServerVersion;
    }

    /**
     * Get the targetServerBrandVersion property: Target server brand version.
     * 
     * @return the targetServerBrandVersion value.
     */
    public String targetServerBrandVersion() {
        return this.targetServerBrandVersion;
    }

    /**
     * Get the exceptionsAndWarnings property: Migration exceptions and warnings.
     * 
     * @return the exceptionsAndWarnings value.
     */
    public List<ReportableException> exceptionsAndWarnings() {
        return this.exceptionsAndWarnings;
    }

    /**
     * Get the id property: Result identifier.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (migrationReport() != null) {
            migrationReport().validate();
        }
        if (exceptionsAndWarnings() != null) {
            exceptionsAndWarnings().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resultType", this.resultType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrateSqlServerSqlDbTaskOutputMigrationLevel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrateSqlServerSqlDbTaskOutputMigrationLevel if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrateSqlServerSqlDbTaskOutputMigrationLevel.
     */
    public static MigrateSqlServerSqlDbTaskOutputMigrationLevel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrateSqlServerSqlDbTaskOutputMigrationLevel deserializedMigrateSqlServerSqlDbTaskOutputMigrationLevel
                = new MigrateSqlServerSqlDbTaskOutputMigrationLevel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputMigrationLevel.id = reader.getString();
                } else if ("resultType".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputMigrationLevel.resultType = reader.getString();
                } else if ("startedOn".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputMigrationLevel.startedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endedOn".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputMigrationLevel.endedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("durationInSeconds".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputMigrationLevel.durationInSeconds
                        = reader.getNullable(JsonReader::getLong);
                } else if ("status".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputMigrationLevel.status
                        = MigrationStatus.fromString(reader.getString());
                } else if ("statusMessage".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputMigrationLevel.statusMessage = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputMigrationLevel.message = reader.getString();
                } else if ("databases".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputMigrationLevel.databases = reader.getString();
                } else if ("databaseSummary".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputMigrationLevel.databaseSummary = reader.getString();
                } else if ("migrationReport".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputMigrationLevel.migrationReport
                        = MigrationReportResult.fromJson(reader);
                } else if ("sourceServerVersion".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputMigrationLevel.sourceServerVersion = reader.getString();
                } else if ("sourceServerBrandVersion".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputMigrationLevel.sourceServerBrandVersion
                        = reader.getString();
                } else if ("targetServerVersion".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputMigrationLevel.targetServerVersion = reader.getString();
                } else if ("targetServerBrandVersion".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputMigrationLevel.targetServerBrandVersion
                        = reader.getString();
                } else if ("exceptionsAndWarnings".equals(fieldName)) {
                    List<ReportableException> exceptionsAndWarnings
                        = reader.readArray(reader1 -> ReportableException.fromJson(reader1));
                    deserializedMigrateSqlServerSqlDbTaskOutputMigrationLevel.exceptionsAndWarnings
                        = exceptionsAndWarnings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrateSqlServerSqlDbTaskOutputMigrationLevel;
        });
    }
}
