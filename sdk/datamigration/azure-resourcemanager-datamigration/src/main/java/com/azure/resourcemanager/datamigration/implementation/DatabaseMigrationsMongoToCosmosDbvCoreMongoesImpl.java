// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.datamigration.fluent.DatabaseMigrationsMongoToCosmosDbvCoreMongoesClient;
import com.azure.resourcemanager.datamigration.fluent.models.DatabaseMigrationCosmosDbMongoInner;
import com.azure.resourcemanager.datamigration.models.DatabaseMigrationCosmosDbMongo;
import com.azure.resourcemanager.datamigration.models.DatabaseMigrationsMongoToCosmosDbvCoreMongoes;

public final class DatabaseMigrationsMongoToCosmosDbvCoreMongoesImpl
    implements DatabaseMigrationsMongoToCosmosDbvCoreMongoes {
    private static final ClientLogger LOGGER
        = new ClientLogger(DatabaseMigrationsMongoToCosmosDbvCoreMongoesImpl.class);

    private final DatabaseMigrationsMongoToCosmosDbvCoreMongoesClient innerClient;

    private final com.azure.resourcemanager.datamigration.DataMigrationManager serviceManager;

    public DatabaseMigrationsMongoToCosmosDbvCoreMongoesImpl(
        DatabaseMigrationsMongoToCosmosDbvCoreMongoesClient innerClient,
        com.azure.resourcemanager.datamigration.DataMigrationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<DatabaseMigrationCosmosDbMongo> getWithResponse(String resourceGroupName, String targetResourceName,
        String migrationName, Context context) {
        Response<DatabaseMigrationCosmosDbMongoInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, targetResourceName, migrationName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DatabaseMigrationCosmosDbMongoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DatabaseMigrationCosmosDbMongo get(String resourceGroupName, String targetResourceName,
        String migrationName) {
        DatabaseMigrationCosmosDbMongoInner inner
            = this.serviceClient().get(resourceGroupName, targetResourceName, migrationName);
        if (inner != null) {
            return new DatabaseMigrationCosmosDbMongoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DatabaseMigrationCosmosDbMongo create(String resourceGroupName, String targetResourceName,
        String migrationName, DatabaseMigrationCosmosDbMongoInner parameters) {
        DatabaseMigrationCosmosDbMongoInner inner
            = this.serviceClient().create(resourceGroupName, targetResourceName, migrationName, parameters);
        if (inner != null) {
            return new DatabaseMigrationCosmosDbMongoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DatabaseMigrationCosmosDbMongo create(String resourceGroupName, String targetResourceName,
        String migrationName, DatabaseMigrationCosmosDbMongoInner parameters, Context context) {
        DatabaseMigrationCosmosDbMongoInner inner
            = this.serviceClient().create(resourceGroupName, targetResourceName, migrationName, parameters, context);
        if (inner != null) {
            return new DatabaseMigrationCosmosDbMongoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String targetResourceName, String migrationName) {
        this.serviceClient().delete(resourceGroupName, targetResourceName, migrationName);
    }

    public void delete(String resourceGroupName, String targetResourceName, String migrationName, Boolean force,
        Context context) {
        this.serviceClient().delete(resourceGroupName, targetResourceName, migrationName, force, context);
    }

    public PagedIterable<DatabaseMigrationCosmosDbMongo> getForScope(String resourceGroupName,
        String targetResourceName) {
        PagedIterable<DatabaseMigrationCosmosDbMongoInner> inner
            = this.serviceClient().getForScope(resourceGroupName, targetResourceName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new DatabaseMigrationCosmosDbMongoImpl(inner1, this.manager()));
    }

    public PagedIterable<DatabaseMigrationCosmosDbMongo> getForScope(String resourceGroupName,
        String targetResourceName, Context context) {
        PagedIterable<DatabaseMigrationCosmosDbMongoInner> inner
            = this.serviceClient().getForScope(resourceGroupName, targetResourceName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new DatabaseMigrationCosmosDbMongoImpl(inner1, this.manager()));
    }

    private DatabaseMigrationsMongoToCosmosDbvCoreMongoesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.datamigration.DataMigrationManager manager() {
        return this.serviceManager;
    }
}
