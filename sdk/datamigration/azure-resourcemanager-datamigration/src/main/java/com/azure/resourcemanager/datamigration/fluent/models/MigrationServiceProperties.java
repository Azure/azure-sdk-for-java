// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datamigration.models.ProvisioningState;
import java.io.IOException;

/**
 * The Migration Service properties.
 */
@Immutable
public final class MigrationServiceProperties implements JsonSerializable<MigrationServiceProperties> {
    /*
     * Provisioning state to track the async operation status.
     */
    private ProvisioningState provisioningState;

    /*
     * Current state of the Integration runtime.
     */
    private String integrationRuntimeState;

    /**
     * Creates an instance of MigrationServiceProperties class.
     */
    public MigrationServiceProperties() {
    }

    /**
     * Get the provisioningState property: Provisioning state to track the async operation status.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the integrationRuntimeState property: Current state of the Integration runtime.
     * 
     * @return the integrationRuntimeState value.
     */
    public String integrationRuntimeState() {
        return this.integrationRuntimeState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrationServiceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrationServiceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrationServiceProperties.
     */
    public static MigrationServiceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrationServiceProperties deserializedMigrationServiceProperties = new MigrationServiceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedMigrationServiceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("integrationRuntimeState".equals(fieldName)) {
                    deserializedMigrationServiceProperties.integrationRuntimeState = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrationServiceProperties;
        });
    }
}
