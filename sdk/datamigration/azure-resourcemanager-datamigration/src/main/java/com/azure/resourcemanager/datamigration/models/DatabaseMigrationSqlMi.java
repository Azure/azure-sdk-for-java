// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.datamigration.fluent.models.DatabaseMigrationSqlMiInner;

/** An immutable client-side representation of DatabaseMigrationSqlMi. */
public interface DatabaseMigrationSqlMi {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Metadata pertaining to creation and last modification of the resource.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the properties property: Database Migration Resource properties for SQL Managed Instance.
     *
     * @return the properties value.
     */
    DatabaseMigrationPropertiesSqlMi properties();

    /**
     * Gets the inner com.azure.resourcemanager.datamigration.fluent.models.DatabaseMigrationSqlMiInner object.
     *
     * @return the inner object.
     */
    DatabaseMigrationSqlMiInner innerModel();

    /** The entirety of the DatabaseMigrationSqlMi definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The DatabaseMigrationSqlMi definition stages. */
    interface DefinitionStages {
        /** The first stage of the DatabaseMigrationSqlMi definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the DatabaseMigrationSqlMi definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, managedInstanceName.
             *
             * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value
             *     from the Azure Resource Manager API or the portal.
             * @param managedInstanceName The managedInstanceName parameter.
             * @return the next definition stage.
             */
            WithCreate withExistingManagedInstance(String resourceGroupName, String managedInstanceName);
        }
        /**
         * The stage of the DatabaseMigrationSqlMi definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithProperties {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            DatabaseMigrationSqlMi create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            DatabaseMigrationSqlMi create(Context context);
        }
        /** The stage of the DatabaseMigrationSqlMi definition allowing to specify properties. */
        interface WithProperties {
            /**
             * Specifies the properties property: Database Migration Resource properties for SQL Managed Instance..
             *
             * @param properties Database Migration Resource properties for SQL Managed Instance.
             * @return the next definition stage.
             */
            WithCreate withProperties(DatabaseMigrationPropertiesSqlMi properties);
        }
    }
    /**
     * Begins update for the DatabaseMigrationSqlMi resource.
     *
     * @return the stage of resource update.
     */
    DatabaseMigrationSqlMi.Update update();

    /** The template for DatabaseMigrationSqlMi update. */
    interface Update extends UpdateStages.WithProperties {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        DatabaseMigrationSqlMi apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        DatabaseMigrationSqlMi apply(Context context);
    }
    /** The DatabaseMigrationSqlMi update stages. */
    interface UpdateStages {
        /** The stage of the DatabaseMigrationSqlMi update allowing to specify properties. */
        interface WithProperties {
            /**
             * Specifies the properties property: Database Migration Resource properties for SQL Managed Instance..
             *
             * @param properties Database Migration Resource properties for SQL Managed Instance.
             * @return the next definition stage.
             */
            Update withProperties(DatabaseMigrationPropertiesSqlMi properties);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    DatabaseMigrationSqlMi refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    DatabaseMigrationSqlMi refresh(Context context);

    /**
     * Stop in-progress database migration to SQL Managed Instance.
     *
     * @param parameters Required migration operation ID for which cancel will be initiated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void cancel(MigrationOperationInput parameters);

    /**
     * Stop in-progress database migration to SQL Managed Instance.
     *
     * @param parameters Required migration operation ID for which cancel will be initiated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void cancel(MigrationOperationInput parameters, Context context);

    /**
     * Initiate cutover for in-progress online database migration to SQL Managed Instance.
     *
     * @param parameters Required migration operation ID for which cutover will be initiated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void cutover(MigrationOperationInput parameters);

    /**
     * Initiate cutover for in-progress online database migration to SQL Managed Instance.
     *
     * @param parameters Required migration operation ID for which cutover will be initiated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void cutover(MigrationOperationInput parameters, Context context);
}
