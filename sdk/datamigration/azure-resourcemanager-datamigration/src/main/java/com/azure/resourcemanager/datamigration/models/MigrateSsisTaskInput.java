// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance.
 */
@Fluent
public final class MigrateSsisTaskInput extends SqlMigrationTaskInput {
    /*
     * SSIS package migration information.
     */
    private SsisMigrationInfo ssisMigrationInfo;

    /**
     * Creates an instance of MigrateSsisTaskInput class.
     */
    public MigrateSsisTaskInput() {
    }

    /**
     * Get the ssisMigrationInfo property: SSIS package migration information.
     * 
     * @return the ssisMigrationInfo value.
     */
    public SsisMigrationInfo ssisMigrationInfo() {
        return this.ssisMigrationInfo;
    }

    /**
     * Set the ssisMigrationInfo property: SSIS package migration information.
     * 
     * @param ssisMigrationInfo the ssisMigrationInfo value to set.
     * @return the MigrateSsisTaskInput object itself.
     */
    public MigrateSsisTaskInput withSsisMigrationInfo(SsisMigrationInfo ssisMigrationInfo) {
        this.ssisMigrationInfo = ssisMigrationInfo;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MigrateSsisTaskInput withSourceConnectionInfo(SqlConnectionInfo sourceConnectionInfo) {
        super.withSourceConnectionInfo(sourceConnectionInfo);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MigrateSsisTaskInput withTargetConnectionInfo(SqlConnectionInfo targetConnectionInfo) {
        super.withTargetConnectionInfo(targetConnectionInfo);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (ssisMigrationInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property ssisMigrationInfo in model MigrateSsisTaskInput"));
        } else {
            ssisMigrationInfo().validate();
        }
        if (sourceConnectionInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceConnectionInfo in model MigrateSsisTaskInput"));
        } else {
            sourceConnectionInfo().validate();
        }
        if (targetConnectionInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetConnectionInfo in model MigrateSsisTaskInput"));
        } else {
            targetConnectionInfo().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MigrateSsisTaskInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("sourceConnectionInfo", sourceConnectionInfo());
        jsonWriter.writeJsonField("targetConnectionInfo", targetConnectionInfo());
        jsonWriter.writeJsonField("ssisMigrationInfo", this.ssisMigrationInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrateSsisTaskInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrateSsisTaskInput if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MigrateSsisTaskInput.
     */
    public static MigrateSsisTaskInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrateSsisTaskInput deserializedMigrateSsisTaskInput = new MigrateSsisTaskInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceConnectionInfo".equals(fieldName)) {
                    deserializedMigrateSsisTaskInput.withSourceConnectionInfo(SqlConnectionInfo.fromJson(reader));
                } else if ("targetConnectionInfo".equals(fieldName)) {
                    deserializedMigrateSsisTaskInput.withTargetConnectionInfo(SqlConnectionInfo.fromJson(reader));
                } else if ("ssisMigrationInfo".equals(fieldName)) {
                    deserializedMigrateSsisTaskInput.ssisMigrationInfo = SsisMigrationInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrateSsisTaskInput;
        });
    }
}
