// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure Active Directory Application.
 */
@Fluent
public final class AzureActiveDirectoryApp implements JsonSerializable<AzureActiveDirectoryApp> {
    /*
     * Application ID of the Azure Active Directory Application
     */
    private String applicationId;

    /*
     * Key used to authenticate to the Azure Active Directory Application
     */
    private String appKey;

    /*
     * Tenant id of the customer
     */
    private String tenantId;

    /**
     * Creates an instance of AzureActiveDirectoryApp class.
     */
    public AzureActiveDirectoryApp() {
    }

    /**
     * Get the applicationId property: Application ID of the Azure Active Directory Application.
     * 
     * @return the applicationId value.
     */
    public String applicationId() {
        return this.applicationId;
    }

    /**
     * Set the applicationId property: Application ID of the Azure Active Directory Application.
     * 
     * @param applicationId the applicationId value to set.
     * @return the AzureActiveDirectoryApp object itself.
     */
    public AzureActiveDirectoryApp withApplicationId(String applicationId) {
        this.applicationId = applicationId;
        return this;
    }

    /**
     * Get the appKey property: Key used to authenticate to the Azure Active Directory Application.
     * 
     * @return the appKey value.
     */
    public String appKey() {
        return this.appKey;
    }

    /**
     * Set the appKey property: Key used to authenticate to the Azure Active Directory Application.
     * 
     * @param appKey the appKey value to set.
     * @return the AzureActiveDirectoryApp object itself.
     */
    public AzureActiveDirectoryApp withAppKey(String appKey) {
        this.appKey = appKey;
        return this;
    }

    /**
     * Get the tenantId property: Tenant id of the customer.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: Tenant id of the customer.
     * 
     * @param tenantId the tenantId value to set.
     * @return the AzureActiveDirectoryApp object itself.
     */
    public AzureActiveDirectoryApp withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (applicationId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property applicationId in model AzureActiveDirectoryApp"));
        }
        if (appKey() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property appKey in model AzureActiveDirectoryApp"));
        }
        if (tenantId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property tenantId in model AzureActiveDirectoryApp"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzureActiveDirectoryApp.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("applicationId", this.applicationId);
        jsonWriter.writeStringField("appKey", this.appKey);
        jsonWriter.writeStringField("tenantId", this.tenantId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureActiveDirectoryApp from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureActiveDirectoryApp if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureActiveDirectoryApp.
     */
    public static AzureActiveDirectoryApp fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureActiveDirectoryApp deserializedAzureActiveDirectoryApp = new AzureActiveDirectoryApp();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("applicationId".equals(fieldName)) {
                    deserializedAzureActiveDirectoryApp.applicationId = reader.getString();
                } else if ("appKey".equals(fieldName)) {
                    deserializedAzureActiveDirectoryApp.appKey = reader.getString();
                } else if ("tenantId".equals(fieldName)) {
                    deserializedAzureActiveDirectoryApp.tenantId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureActiveDirectoryApp;
        });
    }
}
