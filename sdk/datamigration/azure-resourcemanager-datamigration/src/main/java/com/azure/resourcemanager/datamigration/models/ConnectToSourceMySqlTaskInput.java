// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Input for the task that validates MySQL database connection.
 */
@Fluent
public final class ConnectToSourceMySqlTaskInput implements JsonSerializable<ConnectToSourceMySqlTaskInput> {
    /*
     * Information for connecting to MySQL source
     */
    private MySqlConnectionInfo sourceConnectionInfo;

    /*
     * Target Platform for the migration
     */
    private MySqlTargetPlatformType targetPlatform;

    /*
     * Permission group for validations
     */
    private ServerLevelPermissionsGroup checkPermissionsGroup;

    /**
     * Creates an instance of ConnectToSourceMySqlTaskInput class.
     */
    public ConnectToSourceMySqlTaskInput() {
    }

    /**
     * Get the sourceConnectionInfo property: Information for connecting to MySQL source.
     * 
     * @return the sourceConnectionInfo value.
     */
    public MySqlConnectionInfo sourceConnectionInfo() {
        return this.sourceConnectionInfo;
    }

    /**
     * Set the sourceConnectionInfo property: Information for connecting to MySQL source.
     * 
     * @param sourceConnectionInfo the sourceConnectionInfo value to set.
     * @return the ConnectToSourceMySqlTaskInput object itself.
     */
    public ConnectToSourceMySqlTaskInput withSourceConnectionInfo(MySqlConnectionInfo sourceConnectionInfo) {
        this.sourceConnectionInfo = sourceConnectionInfo;
        return this;
    }

    /**
     * Get the targetPlatform property: Target Platform for the migration.
     * 
     * @return the targetPlatform value.
     */
    public MySqlTargetPlatformType targetPlatform() {
        return this.targetPlatform;
    }

    /**
     * Set the targetPlatform property: Target Platform for the migration.
     * 
     * @param targetPlatform the targetPlatform value to set.
     * @return the ConnectToSourceMySqlTaskInput object itself.
     */
    public ConnectToSourceMySqlTaskInput withTargetPlatform(MySqlTargetPlatformType targetPlatform) {
        this.targetPlatform = targetPlatform;
        return this;
    }

    /**
     * Get the checkPermissionsGroup property: Permission group for validations.
     * 
     * @return the checkPermissionsGroup value.
     */
    public ServerLevelPermissionsGroup checkPermissionsGroup() {
        return this.checkPermissionsGroup;
    }

    /**
     * Set the checkPermissionsGroup property: Permission group for validations.
     * 
     * @param checkPermissionsGroup the checkPermissionsGroup value to set.
     * @return the ConnectToSourceMySqlTaskInput object itself.
     */
    public ConnectToSourceMySqlTaskInput withCheckPermissionsGroup(ServerLevelPermissionsGroup checkPermissionsGroup) {
        this.checkPermissionsGroup = checkPermissionsGroup;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceConnectionInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceConnectionInfo in model ConnectToSourceMySqlTaskInput"));
        } else {
            sourceConnectionInfo().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConnectToSourceMySqlTaskInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("sourceConnectionInfo", this.sourceConnectionInfo);
        jsonWriter.writeStringField("targetPlatform",
            this.targetPlatform == null ? null : this.targetPlatform.toString());
        jsonWriter.writeStringField("checkPermissionsGroup",
            this.checkPermissionsGroup == null ? null : this.checkPermissionsGroup.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectToSourceMySqlTaskInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectToSourceMySqlTaskInput if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConnectToSourceMySqlTaskInput.
     */
    public static ConnectToSourceMySqlTaskInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectToSourceMySqlTaskInput deserializedConnectToSourceMySqlTaskInput
                = new ConnectToSourceMySqlTaskInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceConnectionInfo".equals(fieldName)) {
                    deserializedConnectToSourceMySqlTaskInput.sourceConnectionInfo
                        = MySqlConnectionInfo.fromJson(reader);
                } else if ("targetPlatform".equals(fieldName)) {
                    deserializedConnectToSourceMySqlTaskInput.targetPlatform
                        = MySqlTargetPlatformType.fromString(reader.getString());
                } else if ("checkPermissionsGroup".equals(fieldName)) {
                    deserializedConnectToSourceMySqlTaskInput.checkPermissionsGroup
                        = ServerLevelPermissionsGroup.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectToSourceMySqlTaskInput;
        });
    }
}
