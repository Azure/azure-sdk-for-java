// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Output for the service task to upload an OCI driver.
 */
@Immutable
public final class UploadOciDriverTaskOutput implements JsonSerializable<UploadOciDriverTaskOutput> {
    /*
     * The name of the driver package that was validated and uploaded.
     */
    private String driverPackageName;

    /*
     * Validation errors
     */
    private List<ReportableException> validationErrors;

    /**
     * Creates an instance of UploadOciDriverTaskOutput class.
     */
    public UploadOciDriverTaskOutput() {
    }

    /**
     * Get the driverPackageName property: The name of the driver package that was validated and uploaded.
     * 
     * @return the driverPackageName value.
     */
    public String driverPackageName() {
        return this.driverPackageName;
    }

    /**
     * Get the validationErrors property: Validation errors.
     * 
     * @return the validationErrors value.
     */
    public List<ReportableException> validationErrors() {
        return this.validationErrors;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (validationErrors() != null) {
            validationErrors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UploadOciDriverTaskOutput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UploadOciDriverTaskOutput if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UploadOciDriverTaskOutput.
     */
    public static UploadOciDriverTaskOutput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UploadOciDriverTaskOutput deserializedUploadOciDriverTaskOutput = new UploadOciDriverTaskOutput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("driverPackageName".equals(fieldName)) {
                    deserializedUploadOciDriverTaskOutput.driverPackageName = reader.getString();
                } else if ("validationErrors".equals(fieldName)) {
                    List<ReportableException> validationErrors
                        = reader.readArray(reader1 -> ReportableException.fromJson(reader1));
                    deserializedUploadOciDriverTaskOutput.validationErrors = validationErrors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUploadOciDriverTaskOutput;
        });
    }
}
