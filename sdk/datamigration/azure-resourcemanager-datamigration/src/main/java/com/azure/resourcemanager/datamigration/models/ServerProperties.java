// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Server properties for Oracle, MySQL type source.
 */
@Immutable
public final class ServerProperties implements JsonSerializable<ServerProperties> {
    /*
     * Name of the server platform
     */
    private String serverPlatform;

    /*
     * Name of the server
     */
    private String serverName;

    /*
     * Version of the database server
     */
    private String serverVersion;

    /*
     * Edition of the database server
     */
    private String serverEdition;

    /*
     * Version of the operating system
     */
    private String serverOperatingSystemVersion;

    /*
     * Number of databases in the server
     */
    private Integer serverDatabaseCount;

    /**
     * Creates an instance of ServerProperties class.
     */
    public ServerProperties() {
    }

    /**
     * Get the serverPlatform property: Name of the server platform.
     * 
     * @return the serverPlatform value.
     */
    public String serverPlatform() {
        return this.serverPlatform;
    }

    /**
     * Get the serverName property: Name of the server.
     * 
     * @return the serverName value.
     */
    public String serverName() {
        return this.serverName;
    }

    /**
     * Get the serverVersion property: Version of the database server.
     * 
     * @return the serverVersion value.
     */
    public String serverVersion() {
        return this.serverVersion;
    }

    /**
     * Get the serverEdition property: Edition of the database server.
     * 
     * @return the serverEdition value.
     */
    public String serverEdition() {
        return this.serverEdition;
    }

    /**
     * Get the serverOperatingSystemVersion property: Version of the operating system.
     * 
     * @return the serverOperatingSystemVersion value.
     */
    public String serverOperatingSystemVersion() {
        return this.serverOperatingSystemVersion;
    }

    /**
     * Get the serverDatabaseCount property: Number of databases in the server.
     * 
     * @return the serverDatabaseCount value.
     */
    public Integer serverDatabaseCount() {
        return this.serverDatabaseCount;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerProperties.
     */
    public static ServerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerProperties deserializedServerProperties = new ServerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serverPlatform".equals(fieldName)) {
                    deserializedServerProperties.serverPlatform = reader.getString();
                } else if ("serverName".equals(fieldName)) {
                    deserializedServerProperties.serverName = reader.getString();
                } else if ("serverVersion".equals(fieldName)) {
                    deserializedServerProperties.serverVersion = reader.getString();
                } else if ("serverEdition".equals(fieldName)) {
                    deserializedServerProperties.serverEdition = reader.getString();
                } else if ("serverOperatingSystemVersion".equals(fieldName)) {
                    deserializedServerProperties.serverOperatingSystemVersion = reader.getString();
                } else if ("serverDatabaseCount".equals(fieldName)) {
                    deserializedServerProperties.serverDatabaseCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerProperties;
        });
    }
}
