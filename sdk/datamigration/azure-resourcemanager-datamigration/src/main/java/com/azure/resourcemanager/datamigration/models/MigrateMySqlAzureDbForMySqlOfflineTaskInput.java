// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

/**
 * Input for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations.
 */
@Fluent
public final class MigrateMySqlAzureDbForMySqlOfflineTaskInput
    implements JsonSerializable<MigrateMySqlAzureDbForMySqlOfflineTaskInput> {
    /*
     * Connection information for source MySQL
     */
    private MySqlConnectionInfo sourceConnectionInfo;

    /*
     * Connection information for target Azure Database for MySQL
     */
    private MySqlConnectionInfo targetConnectionInfo;

    /*
     * Databases to migrate
     */
    private List<MigrateMySqlAzureDbForMySqlOfflineDatabaseInput> selectedDatabases;

    /*
     * Setting to set the source server read only
     */
    private Boolean makeSourceServerReadOnly;

    /*
     * Parameter to specify when the migration started
     */
    private OffsetDateTime startedOn;

    /*
     * Optional parameters for fine tuning the data transfer rate during migration
     */
    private Map<String, String> optionalAgentSettings;

    /*
     * encrypted key for secure fields
     */
    private String encryptedKeyForSecureFields;

    /**
     * Creates an instance of MigrateMySqlAzureDbForMySqlOfflineTaskInput class.
     */
    public MigrateMySqlAzureDbForMySqlOfflineTaskInput() {
    }

    /**
     * Get the sourceConnectionInfo property: Connection information for source MySQL.
     * 
     * @return the sourceConnectionInfo value.
     */
    public MySqlConnectionInfo sourceConnectionInfo() {
        return this.sourceConnectionInfo;
    }

    /**
     * Set the sourceConnectionInfo property: Connection information for source MySQL.
     * 
     * @param sourceConnectionInfo the sourceConnectionInfo value to set.
     * @return the MigrateMySqlAzureDbForMySqlOfflineTaskInput object itself.
     */
    public MigrateMySqlAzureDbForMySqlOfflineTaskInput
        withSourceConnectionInfo(MySqlConnectionInfo sourceConnectionInfo) {
        this.sourceConnectionInfo = sourceConnectionInfo;
        return this;
    }

    /**
     * Get the targetConnectionInfo property: Connection information for target Azure Database for MySQL.
     * 
     * @return the targetConnectionInfo value.
     */
    public MySqlConnectionInfo targetConnectionInfo() {
        return this.targetConnectionInfo;
    }

    /**
     * Set the targetConnectionInfo property: Connection information for target Azure Database for MySQL.
     * 
     * @param targetConnectionInfo the targetConnectionInfo value to set.
     * @return the MigrateMySqlAzureDbForMySqlOfflineTaskInput object itself.
     */
    public MigrateMySqlAzureDbForMySqlOfflineTaskInput
        withTargetConnectionInfo(MySqlConnectionInfo targetConnectionInfo) {
        this.targetConnectionInfo = targetConnectionInfo;
        return this;
    }

    /**
     * Get the selectedDatabases property: Databases to migrate.
     * 
     * @return the selectedDatabases value.
     */
    public List<MigrateMySqlAzureDbForMySqlOfflineDatabaseInput> selectedDatabases() {
        return this.selectedDatabases;
    }

    /**
     * Set the selectedDatabases property: Databases to migrate.
     * 
     * @param selectedDatabases the selectedDatabases value to set.
     * @return the MigrateMySqlAzureDbForMySqlOfflineTaskInput object itself.
     */
    public MigrateMySqlAzureDbForMySqlOfflineTaskInput
        withSelectedDatabases(List<MigrateMySqlAzureDbForMySqlOfflineDatabaseInput> selectedDatabases) {
        this.selectedDatabases = selectedDatabases;
        return this;
    }

    /**
     * Get the makeSourceServerReadOnly property: Setting to set the source server read only.
     * 
     * @return the makeSourceServerReadOnly value.
     */
    public Boolean makeSourceServerReadOnly() {
        return this.makeSourceServerReadOnly;
    }

    /**
     * Set the makeSourceServerReadOnly property: Setting to set the source server read only.
     * 
     * @param makeSourceServerReadOnly the makeSourceServerReadOnly value to set.
     * @return the MigrateMySqlAzureDbForMySqlOfflineTaskInput object itself.
     */
    public MigrateMySqlAzureDbForMySqlOfflineTaskInput withMakeSourceServerReadOnly(Boolean makeSourceServerReadOnly) {
        this.makeSourceServerReadOnly = makeSourceServerReadOnly;
        return this;
    }

    /**
     * Get the startedOn property: Parameter to specify when the migration started.
     * 
     * @return the startedOn value.
     */
    public OffsetDateTime startedOn() {
        return this.startedOn;
    }

    /**
     * Set the startedOn property: Parameter to specify when the migration started.
     * 
     * @param startedOn the startedOn value to set.
     * @return the MigrateMySqlAzureDbForMySqlOfflineTaskInput object itself.
     */
    public MigrateMySqlAzureDbForMySqlOfflineTaskInput withStartedOn(OffsetDateTime startedOn) {
        this.startedOn = startedOn;
        return this;
    }

    /**
     * Get the optionalAgentSettings property: Optional parameters for fine tuning the data transfer rate during
     * migration.
     * 
     * @return the optionalAgentSettings value.
     */
    public Map<String, String> optionalAgentSettings() {
        return this.optionalAgentSettings;
    }

    /**
     * Set the optionalAgentSettings property: Optional parameters for fine tuning the data transfer rate during
     * migration.
     * 
     * @param optionalAgentSettings the optionalAgentSettings value to set.
     * @return the MigrateMySqlAzureDbForMySqlOfflineTaskInput object itself.
     */
    public MigrateMySqlAzureDbForMySqlOfflineTaskInput
        withOptionalAgentSettings(Map<String, String> optionalAgentSettings) {
        this.optionalAgentSettings = optionalAgentSettings;
        return this;
    }

    /**
     * Get the encryptedKeyForSecureFields property: encrypted key for secure fields.
     * 
     * @return the encryptedKeyForSecureFields value.
     */
    public String encryptedKeyForSecureFields() {
        return this.encryptedKeyForSecureFields;
    }

    /**
     * Set the encryptedKeyForSecureFields property: encrypted key for secure fields.
     * 
     * @param encryptedKeyForSecureFields the encryptedKeyForSecureFields value to set.
     * @return the MigrateMySqlAzureDbForMySqlOfflineTaskInput object itself.
     */
    public MigrateMySqlAzureDbForMySqlOfflineTaskInput
        withEncryptedKeyForSecureFields(String encryptedKeyForSecureFields) {
        this.encryptedKeyForSecureFields = encryptedKeyForSecureFields;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceConnectionInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceConnectionInfo in model MigrateMySqlAzureDbForMySqlOfflineTaskInput"));
        } else {
            sourceConnectionInfo().validate();
        }
        if (targetConnectionInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetConnectionInfo in model MigrateMySqlAzureDbForMySqlOfflineTaskInput"));
        } else {
            targetConnectionInfo().validate();
        }
        if (selectedDatabases() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property selectedDatabases in model MigrateMySqlAzureDbForMySqlOfflineTaskInput"));
        } else {
            selectedDatabases().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MigrateMySqlAzureDbForMySqlOfflineTaskInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("sourceConnectionInfo", this.sourceConnectionInfo);
        jsonWriter.writeJsonField("targetConnectionInfo", this.targetConnectionInfo);
        jsonWriter.writeArrayField("selectedDatabases", this.selectedDatabases,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("makeSourceServerReadOnly", this.makeSourceServerReadOnly);
        jsonWriter.writeStringField("startedOn",
            this.startedOn == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startedOn));
        jsonWriter.writeMapField("optionalAgentSettings", this.optionalAgentSettings,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("encryptedKeyForSecureFields", this.encryptedKeyForSecureFields);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrateMySqlAzureDbForMySqlOfflineTaskInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrateMySqlAzureDbForMySqlOfflineTaskInput if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MigrateMySqlAzureDbForMySqlOfflineTaskInput.
     */
    public static MigrateMySqlAzureDbForMySqlOfflineTaskInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrateMySqlAzureDbForMySqlOfflineTaskInput deserializedMigrateMySqlAzureDbForMySqlOfflineTaskInput
                = new MigrateMySqlAzureDbForMySqlOfflineTaskInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceConnectionInfo".equals(fieldName)) {
                    deserializedMigrateMySqlAzureDbForMySqlOfflineTaskInput.sourceConnectionInfo
                        = MySqlConnectionInfo.fromJson(reader);
                } else if ("targetConnectionInfo".equals(fieldName)) {
                    deserializedMigrateMySqlAzureDbForMySqlOfflineTaskInput.targetConnectionInfo
                        = MySqlConnectionInfo.fromJson(reader);
                } else if ("selectedDatabases".equals(fieldName)) {
                    List<MigrateMySqlAzureDbForMySqlOfflineDatabaseInput> selectedDatabases = reader
                        .readArray(reader1 -> MigrateMySqlAzureDbForMySqlOfflineDatabaseInput.fromJson(reader1));
                    deserializedMigrateMySqlAzureDbForMySqlOfflineTaskInput.selectedDatabases = selectedDatabases;
                } else if ("makeSourceServerReadOnly".equals(fieldName)) {
                    deserializedMigrateMySqlAzureDbForMySqlOfflineTaskInput.makeSourceServerReadOnly
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("startedOn".equals(fieldName)) {
                    deserializedMigrateMySqlAzureDbForMySqlOfflineTaskInput.startedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("optionalAgentSettings".equals(fieldName)) {
                    Map<String, String> optionalAgentSettings = reader.readMap(reader1 -> reader1.getString());
                    deserializedMigrateMySqlAzureDbForMySqlOfflineTaskInput.optionalAgentSettings
                        = optionalAgentSettings;
                } else if ("encryptedKeyForSecureFields".equals(fieldName)) {
                    deserializedMigrateMySqlAzureDbForMySqlOfflineTaskInput.encryptedKeyForSecureFields
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrateMySqlAzureDbForMySqlOfflineTaskInput;
        });
    }
}
