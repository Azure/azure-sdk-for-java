// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs.
 */
@Fluent
public final class MigrateOracleAzureDbPostgreSqlSyncDatabaseInput
    implements JsonSerializable<MigrateOracleAzureDbPostgreSqlSyncDatabaseInput> {
    /*
     * How to handle object name casing: either Preserve or ToLower
     */
    private String caseManipulation;

    /*
     * Name of the migration pipeline
     */
    private String name;

    /*
     * Name of the source schema
     */
    private String schemaName;

    /*
     * Mapping of source to target tables
     */
    private Map<String, String> tableMap;

    /*
     * Name of target database. Note: Target database will be truncated before starting migration.
     */
    private String targetDatabaseName;

    /*
     * Migration settings which tune the migration behavior
     */
    private Map<String, String> migrationSetting;

    /*
     * Source settings to tune source endpoint migration behavior
     */
    private Map<String, String> sourceSetting;

    /*
     * Target settings to tune target endpoint migration behavior
     */
    private Map<String, String> targetSetting;

    /**
     * Creates an instance of MigrateOracleAzureDbPostgreSqlSyncDatabaseInput class.
     */
    public MigrateOracleAzureDbPostgreSqlSyncDatabaseInput() {
    }

    /**
     * Get the caseManipulation property: How to handle object name casing: either Preserve or ToLower.
     * 
     * @return the caseManipulation value.
     */
    public String caseManipulation() {
        return this.caseManipulation;
    }

    /**
     * Set the caseManipulation property: How to handle object name casing: either Preserve or ToLower.
     * 
     * @param caseManipulation the caseManipulation value to set.
     * @return the MigrateOracleAzureDbPostgreSqlSyncDatabaseInput object itself.
     */
    public MigrateOracleAzureDbPostgreSqlSyncDatabaseInput withCaseManipulation(String caseManipulation) {
        this.caseManipulation = caseManipulation;
        return this;
    }

    /**
     * Get the name property: Name of the migration pipeline.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the migration pipeline.
     * 
     * @param name the name value to set.
     * @return the MigrateOracleAzureDbPostgreSqlSyncDatabaseInput object itself.
     */
    public MigrateOracleAzureDbPostgreSqlSyncDatabaseInput withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the schemaName property: Name of the source schema.
     * 
     * @return the schemaName value.
     */
    public String schemaName() {
        return this.schemaName;
    }

    /**
     * Set the schemaName property: Name of the source schema.
     * 
     * @param schemaName the schemaName value to set.
     * @return the MigrateOracleAzureDbPostgreSqlSyncDatabaseInput object itself.
     */
    public MigrateOracleAzureDbPostgreSqlSyncDatabaseInput withSchemaName(String schemaName) {
        this.schemaName = schemaName;
        return this;
    }

    /**
     * Get the tableMap property: Mapping of source to target tables.
     * 
     * @return the tableMap value.
     */
    public Map<String, String> tableMap() {
        return this.tableMap;
    }

    /**
     * Set the tableMap property: Mapping of source to target tables.
     * 
     * @param tableMap the tableMap value to set.
     * @return the MigrateOracleAzureDbPostgreSqlSyncDatabaseInput object itself.
     */
    public MigrateOracleAzureDbPostgreSqlSyncDatabaseInput withTableMap(Map<String, String> tableMap) {
        this.tableMap = tableMap;
        return this;
    }

    /**
     * Get the targetDatabaseName property: Name of target database. Note: Target database will be truncated before
     * starting migration.
     * 
     * @return the targetDatabaseName value.
     */
    public String targetDatabaseName() {
        return this.targetDatabaseName;
    }

    /**
     * Set the targetDatabaseName property: Name of target database. Note: Target database will be truncated before
     * starting migration.
     * 
     * @param targetDatabaseName the targetDatabaseName value to set.
     * @return the MigrateOracleAzureDbPostgreSqlSyncDatabaseInput object itself.
     */
    public MigrateOracleAzureDbPostgreSqlSyncDatabaseInput withTargetDatabaseName(String targetDatabaseName) {
        this.targetDatabaseName = targetDatabaseName;
        return this;
    }

    /**
     * Get the migrationSetting property: Migration settings which tune the migration behavior.
     * 
     * @return the migrationSetting value.
     */
    public Map<String, String> migrationSetting() {
        return this.migrationSetting;
    }

    /**
     * Set the migrationSetting property: Migration settings which tune the migration behavior.
     * 
     * @param migrationSetting the migrationSetting value to set.
     * @return the MigrateOracleAzureDbPostgreSqlSyncDatabaseInput object itself.
     */
    public MigrateOracleAzureDbPostgreSqlSyncDatabaseInput withMigrationSetting(Map<String, String> migrationSetting) {
        this.migrationSetting = migrationSetting;
        return this;
    }

    /**
     * Get the sourceSetting property: Source settings to tune source endpoint migration behavior.
     * 
     * @return the sourceSetting value.
     */
    public Map<String, String> sourceSetting() {
        return this.sourceSetting;
    }

    /**
     * Set the sourceSetting property: Source settings to tune source endpoint migration behavior.
     * 
     * @param sourceSetting the sourceSetting value to set.
     * @return the MigrateOracleAzureDbPostgreSqlSyncDatabaseInput object itself.
     */
    public MigrateOracleAzureDbPostgreSqlSyncDatabaseInput withSourceSetting(Map<String, String> sourceSetting) {
        this.sourceSetting = sourceSetting;
        return this;
    }

    /**
     * Get the targetSetting property: Target settings to tune target endpoint migration behavior.
     * 
     * @return the targetSetting value.
     */
    public Map<String, String> targetSetting() {
        return this.targetSetting;
    }

    /**
     * Set the targetSetting property: Target settings to tune target endpoint migration behavior.
     * 
     * @param targetSetting the targetSetting value to set.
     * @return the MigrateOracleAzureDbPostgreSqlSyncDatabaseInput object itself.
     */
    public MigrateOracleAzureDbPostgreSqlSyncDatabaseInput withTargetSetting(Map<String, String> targetSetting) {
        this.targetSetting = targetSetting;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("caseManipulation", this.caseManipulation);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("schemaName", this.schemaName);
        jsonWriter.writeMapField("tableMap", this.tableMap, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("targetDatabaseName", this.targetDatabaseName);
        jsonWriter.writeMapField("migrationSetting", this.migrationSetting,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("sourceSetting", this.sourceSetting, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("targetSetting", this.targetSetting, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrateOracleAzureDbPostgreSqlSyncDatabaseInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrateOracleAzureDbPostgreSqlSyncDatabaseInput if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrateOracleAzureDbPostgreSqlSyncDatabaseInput.
     */
    public static MigrateOracleAzureDbPostgreSqlSyncDatabaseInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrateOracleAzureDbPostgreSqlSyncDatabaseInput deserializedMigrateOracleAzureDbPostgreSqlSyncDatabaseInput
                = new MigrateOracleAzureDbPostgreSqlSyncDatabaseInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("caseManipulation".equals(fieldName)) {
                    deserializedMigrateOracleAzureDbPostgreSqlSyncDatabaseInput.caseManipulation = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedMigrateOracleAzureDbPostgreSqlSyncDatabaseInput.name = reader.getString();
                } else if ("schemaName".equals(fieldName)) {
                    deserializedMigrateOracleAzureDbPostgreSqlSyncDatabaseInput.schemaName = reader.getString();
                } else if ("tableMap".equals(fieldName)) {
                    Map<String, String> tableMap = reader.readMap(reader1 -> reader1.getString());
                    deserializedMigrateOracleAzureDbPostgreSqlSyncDatabaseInput.tableMap = tableMap;
                } else if ("targetDatabaseName".equals(fieldName)) {
                    deserializedMigrateOracleAzureDbPostgreSqlSyncDatabaseInput.targetDatabaseName = reader.getString();
                } else if ("migrationSetting".equals(fieldName)) {
                    Map<String, String> migrationSetting = reader.readMap(reader1 -> reader1.getString());
                    deserializedMigrateOracleAzureDbPostgreSqlSyncDatabaseInput.migrationSetting = migrationSetting;
                } else if ("sourceSetting".equals(fieldName)) {
                    Map<String, String> sourceSetting = reader.readMap(reader1 -> reader1.getString());
                    deserializedMigrateOracleAzureDbPostgreSqlSyncDatabaseInput.sourceSetting = sourceSetting;
                } else if ("targetSetting".equals(fieldName)) {
                    Map<String, String> targetSetting = reader.readMap(reader1 -> reader1.getString());
                    deserializedMigrateOracleAzureDbPostgreSqlSyncDatabaseInput.targetSetting = targetSetting;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrateOracleAzureDbPostgreSqlSyncDatabaseInput;
        });
    }
}
