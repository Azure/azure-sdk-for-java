// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The MigrateSchemaSqlServerSqlDbTaskOutputError model.
 */
@Immutable
public final class MigrateSchemaSqlServerSqlDbTaskOutputError extends MigrateSchemaSqlServerSqlDbTaskOutput {
    /*
     * Result type
     */
    private String resultType = "SchemaErrorOutput";

    /*
     * Schema command which failed
     */
    private String commandText;

    /*
     * Reason of failure
     */
    private String errorText;

    /**
     * Creates an instance of MigrateSchemaSqlServerSqlDbTaskOutputError class.
     */
    public MigrateSchemaSqlServerSqlDbTaskOutputError() {
    }

    /**
     * Get the resultType property: Result type.
     * 
     * @return the resultType value.
     */
    @Override
    public String resultType() {
        return this.resultType;
    }

    /**
     * Get the commandText property: Schema command which failed.
     * 
     * @return the commandText value.
     */
    public String commandText() {
        return this.commandText;
    }

    /**
     * Get the errorText property: Reason of failure.
     * 
     * @return the errorText value.
     */
    public String errorText() {
        return this.errorText;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resultType", this.resultType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrateSchemaSqlServerSqlDbTaskOutputError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrateSchemaSqlServerSqlDbTaskOutputError if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrateSchemaSqlServerSqlDbTaskOutputError.
     */
    public static MigrateSchemaSqlServerSqlDbTaskOutputError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrateSchemaSqlServerSqlDbTaskOutputError deserializedMigrateSchemaSqlServerSqlDbTaskOutputError
                = new MigrateSchemaSqlServerSqlDbTaskOutputError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbTaskOutputError.withId(reader.getString());
                } else if ("resultType".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbTaskOutputError.resultType = reader.getString();
                } else if ("commandText".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbTaskOutputError.commandText = reader.getString();
                } else if ("errorText".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbTaskOutputError.errorText = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrateSchemaSqlServerSqlDbTaskOutputError;
        });
    }
}
