// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Details on progress of ADF copy activity.
 */
@Immutable
public final class CopyProgressDetails implements JsonSerializable<CopyProgressDetails> {
    /*
     * Table Name
     */
    private String tableName;

    /*
     * Status of the Copy activity (InProgress, Succeeded, Failed, Canceled).
     */
    private String status;

    /*
     * Type of parallel copy (Dynamic range, Physical partition, none).
     */
    private String parallelCopyType;

    /*
     * The degree of parallelization.
     */
    private Integer usedParallelCopies;

    /*
     * Bytes read
     */
    private Long dataRead;

    /*
     * Bytes written
     */
    private Long dataWritten;

    /*
     * Rows read
     */
    private Long rowsRead;

    /*
     * Rows Copied
     */
    private Long rowsCopied;

    /*
     * Copy Start
     */
    private OffsetDateTime copyStart;

    /*
     * Copy throughput in KBps
     */
    private Double copyThroughput;

    /*
     * Copy Duration in seconds
     */
    private Integer copyDuration;

    /**
     * Creates an instance of CopyProgressDetails class.
     */
    public CopyProgressDetails() {
    }

    /**
     * Get the tableName property: Table Name.
     * 
     * @return the tableName value.
     */
    public String tableName() {
        return this.tableName;
    }

    /**
     * Get the status property: Status of the Copy activity (InProgress, Succeeded, Failed, Canceled).
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the parallelCopyType property: Type of parallel copy (Dynamic range, Physical partition, none).
     * 
     * @return the parallelCopyType value.
     */
    public String parallelCopyType() {
        return this.parallelCopyType;
    }

    /**
     * Get the usedParallelCopies property: The degree of parallelization.
     * 
     * @return the usedParallelCopies value.
     */
    public Integer usedParallelCopies() {
        return this.usedParallelCopies;
    }

    /**
     * Get the dataRead property: Bytes read.
     * 
     * @return the dataRead value.
     */
    public Long dataRead() {
        return this.dataRead;
    }

    /**
     * Get the dataWritten property: Bytes written.
     * 
     * @return the dataWritten value.
     */
    public Long dataWritten() {
        return this.dataWritten;
    }

    /**
     * Get the rowsRead property: Rows read.
     * 
     * @return the rowsRead value.
     */
    public Long rowsRead() {
        return this.rowsRead;
    }

    /**
     * Get the rowsCopied property: Rows Copied.
     * 
     * @return the rowsCopied value.
     */
    public Long rowsCopied() {
        return this.rowsCopied;
    }

    /**
     * Get the copyStart property: Copy Start.
     * 
     * @return the copyStart value.
     */
    public OffsetDateTime copyStart() {
        return this.copyStart;
    }

    /**
     * Get the copyThroughput property: Copy throughput in KBps.
     * 
     * @return the copyThroughput value.
     */
    public Double copyThroughput() {
        return this.copyThroughput;
    }

    /**
     * Get the copyDuration property: Copy Duration in seconds.
     * 
     * @return the copyDuration value.
     */
    public Integer copyDuration() {
        return this.copyDuration;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CopyProgressDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CopyProgressDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CopyProgressDetails.
     */
    public static CopyProgressDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CopyProgressDetails deserializedCopyProgressDetails = new CopyProgressDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tableName".equals(fieldName)) {
                    deserializedCopyProgressDetails.tableName = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedCopyProgressDetails.status = reader.getString();
                } else if ("parallelCopyType".equals(fieldName)) {
                    deserializedCopyProgressDetails.parallelCopyType = reader.getString();
                } else if ("usedParallelCopies".equals(fieldName)) {
                    deserializedCopyProgressDetails.usedParallelCopies = reader.getNullable(JsonReader::getInt);
                } else if ("dataRead".equals(fieldName)) {
                    deserializedCopyProgressDetails.dataRead = reader.getNullable(JsonReader::getLong);
                } else if ("dataWritten".equals(fieldName)) {
                    deserializedCopyProgressDetails.dataWritten = reader.getNullable(JsonReader::getLong);
                } else if ("rowsRead".equals(fieldName)) {
                    deserializedCopyProgressDetails.rowsRead = reader.getNullable(JsonReader::getLong);
                } else if ("rowsCopied".equals(fieldName)) {
                    deserializedCopyProgressDetails.rowsCopied = reader.getNullable(JsonReader::getLong);
                } else if ("copyStart".equals(fieldName)) {
                    deserializedCopyProgressDetails.copyStart = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("copyThroughput".equals(fieldName)) {
                    deserializedCopyProgressDetails.copyThroughput = reader.getNullable(JsonReader::getDouble);
                } else if ("copyDuration".equals(fieldName)) {
                    deserializedCopyProgressDetails.copyDuration = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCopyProgressDetails;
        });
    }
}
