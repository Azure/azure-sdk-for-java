// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Details on progress of ADF copy activity. */
@Immutable
public final class CopyProgressDetails {
    /*
     * Table Name
     */
    @JsonProperty(value = "tableName", access = JsonProperty.Access.WRITE_ONLY)
    private String tableName;

    /*
     * Status of the Copy activity (InProgress, Succeeded, Failed, Canceled).
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private String status;

    /*
     * Type of parallel copy (Dynamic range, Physical partition, none).
     */
    @JsonProperty(value = "parallelCopyType", access = JsonProperty.Access.WRITE_ONLY)
    private String parallelCopyType;

    /*
     * The degree of parallelization.
     */
    @JsonProperty(value = "usedParallelCopies", access = JsonProperty.Access.WRITE_ONLY)
    private Integer usedParallelCopies;

    /*
     * Bytes read
     */
    @JsonProperty(value = "dataRead", access = JsonProperty.Access.WRITE_ONLY)
    private Long dataRead;

    /*
     * Bytes written
     */
    @JsonProperty(value = "dataWritten", access = JsonProperty.Access.WRITE_ONLY)
    private Long dataWritten;

    /*
     * Rows read
     */
    @JsonProperty(value = "rowsRead", access = JsonProperty.Access.WRITE_ONLY)
    private Long rowsRead;

    /*
     * Rows Copied
     */
    @JsonProperty(value = "rowsCopied", access = JsonProperty.Access.WRITE_ONLY)
    private Long rowsCopied;

    /*
     * Copy Start
     */
    @JsonProperty(value = "copyStart", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime copyStart;

    /*
     * Copy throughput in KBps
     */
    @JsonProperty(value = "copyThroughput", access = JsonProperty.Access.WRITE_ONLY)
    private Double copyThroughput;

    /*
     * Copy Duration in seconds
     */
    @JsonProperty(value = "copyDuration", access = JsonProperty.Access.WRITE_ONLY)
    private Integer copyDuration;

    /**
     * Get the tableName property: Table Name.
     *
     * @return the tableName value.
     */
    public String tableName() {
        return this.tableName;
    }

    /**
     * Get the status property: Status of the Copy activity (InProgress, Succeeded, Failed, Canceled).
     *
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the parallelCopyType property: Type of parallel copy (Dynamic range, Physical partition, none).
     *
     * @return the parallelCopyType value.
     */
    public String parallelCopyType() {
        return this.parallelCopyType;
    }

    /**
     * Get the usedParallelCopies property: The degree of parallelization.
     *
     * @return the usedParallelCopies value.
     */
    public Integer usedParallelCopies() {
        return this.usedParallelCopies;
    }

    /**
     * Get the dataRead property: Bytes read.
     *
     * @return the dataRead value.
     */
    public Long dataRead() {
        return this.dataRead;
    }

    /**
     * Get the dataWritten property: Bytes written.
     *
     * @return the dataWritten value.
     */
    public Long dataWritten() {
        return this.dataWritten;
    }

    /**
     * Get the rowsRead property: Rows read.
     *
     * @return the rowsRead value.
     */
    public Long rowsRead() {
        return this.rowsRead;
    }

    /**
     * Get the rowsCopied property: Rows Copied.
     *
     * @return the rowsCopied value.
     */
    public Long rowsCopied() {
        return this.rowsCopied;
    }

    /**
     * Get the copyStart property: Copy Start.
     *
     * @return the copyStart value.
     */
    public OffsetDateTime copyStart() {
        return this.copyStart;
    }

    /**
     * Get the copyThroughput property: Copy throughput in KBps.
     *
     * @return the copyThroughput value.
     */
    public Double copyThroughput() {
        return this.copyThroughput;
    }

    /**
     * Get the copyDuration property: Copy Duration in seconds.
     *
     * @return the copyDuration value.
     */
    public Integer copyDuration() {
        return this.copyDuration;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
