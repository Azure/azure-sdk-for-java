// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Describes how an individual MongoDB database should be migrated.
 */
@Fluent
public final class MongoDbDatabaseSettings implements JsonSerializable<MongoDbDatabaseSettings> {
    /*
     * The collections on the source database to migrate to the target. The keys are the unqualified names of the
     * collections.
     */
    private Map<String, MongoDbCollectionSettings> collections;

    /*
     * The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not
     * be provisioned for the database. This has no effect on non-CosmosDB targets.
     */
    private Integer targetRUs;

    /**
     * Creates an instance of MongoDbDatabaseSettings class.
     */
    public MongoDbDatabaseSettings() {
    }

    /**
     * Get the collections property: The collections on the source database to migrate to the target. The keys are the
     * unqualified names of the collections.
     * 
     * @return the collections value.
     */
    public Map<String, MongoDbCollectionSettings> collections() {
        return this.collections;
    }

    /**
     * Set the collections property: The collections on the source database to migrate to the target. The keys are the
     * unqualified names of the collections.
     * 
     * @param collections the collections value to set.
     * @return the MongoDbDatabaseSettings object itself.
     */
    public MongoDbDatabaseSettings withCollections(Map<String, MongoDbCollectionSettings> collections) {
        this.collections = collections;
        return this;
    }

    /**
     * Get the targetRUs property: The RUs that should be configured on a CosmosDB target, or null to use the default,
     * or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
     * 
     * @return the targetRUs value.
     */
    public Integer targetRUs() {
        return this.targetRUs;
    }

    /**
     * Set the targetRUs property: The RUs that should be configured on a CosmosDB target, or null to use the default,
     * or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets.
     * 
     * @param targetRUs the targetRUs value to set.
     * @return the MongoDbDatabaseSettings object itself.
     */
    public MongoDbDatabaseSettings withTargetRUs(Integer targetRUs) {
        this.targetRUs = targetRUs;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (collections() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property collections in model MongoDbDatabaseSettings"));
        } else {
            collections().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MongoDbDatabaseSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("collections", this.collections, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("targetRUs", this.targetRUs);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoDbDatabaseSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoDbDatabaseSettings if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MongoDbDatabaseSettings.
     */
    public static MongoDbDatabaseSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoDbDatabaseSettings deserializedMongoDbDatabaseSettings = new MongoDbDatabaseSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("collections".equals(fieldName)) {
                    Map<String, MongoDbCollectionSettings> collections
                        = reader.readMap(reader1 -> MongoDbCollectionSettings.fromJson(reader1));
                    deserializedMongoDbDatabaseSettings.collections = collections;
                } else if ("targetRUs".equals(fieldName)) {
                    deserializedMongoDbDatabaseSettings.targetRUs = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoDbDatabaseSettings;
        });
    }
}
