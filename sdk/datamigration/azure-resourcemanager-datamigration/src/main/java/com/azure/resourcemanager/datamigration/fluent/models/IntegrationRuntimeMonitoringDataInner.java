// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datamigration.models.NodeMonitoringData;
import java.io.IOException;
import java.util.List;

/**
 * Integration Runtime Monitoring Data.
 */
@Immutable
public final class IntegrationRuntimeMonitoringDataInner
    implements JsonSerializable<IntegrationRuntimeMonitoringDataInner> {
    /*
     * The name of Integration Runtime.
     */
    private String name;

    /*
     * Integration Runtime node monitoring data.
     */
    private List<NodeMonitoringData> nodes;

    /**
     * Creates an instance of IntegrationRuntimeMonitoringDataInner class.
     */
    public IntegrationRuntimeMonitoringDataInner() {
    }

    /**
     * Get the name property: The name of Integration Runtime.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the nodes property: Integration Runtime node monitoring data.
     * 
     * @return the nodes value.
     */
    public List<NodeMonitoringData> nodes() {
        return this.nodes;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nodes() != null) {
            nodes().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IntegrationRuntimeMonitoringDataInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IntegrationRuntimeMonitoringDataInner if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the IntegrationRuntimeMonitoringDataInner.
     */
    public static IntegrationRuntimeMonitoringDataInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IntegrationRuntimeMonitoringDataInner deserializedIntegrationRuntimeMonitoringDataInner
                = new IntegrationRuntimeMonitoringDataInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedIntegrationRuntimeMonitoringDataInner.name = reader.getString();
                } else if ("nodes".equals(fieldName)) {
                    List<NodeMonitoringData> nodes = reader.readArray(reader1 -> NodeMonitoringData.fromJson(reader1));
                    deserializedIntegrationRuntimeMonitoringDataInner.nodes = nodes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIntegrationRuntimeMonitoringDataInner;
        });
    }
}
