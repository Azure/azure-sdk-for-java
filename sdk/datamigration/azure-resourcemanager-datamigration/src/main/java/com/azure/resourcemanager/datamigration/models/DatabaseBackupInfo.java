// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Information about backup files when existing backup mode is used. */
@Immutable
public final class DatabaseBackupInfo {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DatabaseBackupInfo.class);

    /*
     * Database name.
     */
    @JsonProperty(value = "databaseName", access = JsonProperty.Access.WRITE_ONLY)
    private String databaseName;

    /*
     * Backup Type.
     */
    @JsonProperty(value = "backupType", access = JsonProperty.Access.WRITE_ONLY)
    private BackupType backupType;

    /*
     * The list of backup files for the current database.
     */
    @JsonProperty(value = "backupFiles", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> backupFiles;

    /*
     * Position of current database backup in the file.
     */
    @JsonProperty(value = "position", access = JsonProperty.Access.WRITE_ONLY)
    private Integer position;

    /*
     * Database was damaged when backed up, but the backup operation was
     * requested to continue despite errors.
     */
    @JsonProperty(value = "isDamaged", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean isDamaged;

    /*
     * Whether the backup set is compressed
     */
    @JsonProperty(value = "isCompressed", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean isCompressed;

    /*
     * Number of files in the backup set.
     */
    @JsonProperty(value = "familyCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer familyCount;

    /*
     * Date and time when the backup operation finished.
     */
    @JsonProperty(value = "backupFinishDate", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime backupFinishDate;

    /**
     * Get the databaseName property: Database name.
     *
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Get the backupType property: Backup Type.
     *
     * @return the backupType value.
     */
    public BackupType backupType() {
        return this.backupType;
    }

    /**
     * Get the backupFiles property: The list of backup files for the current database.
     *
     * @return the backupFiles value.
     */
    public List<String> backupFiles() {
        return this.backupFiles;
    }

    /**
     * Get the position property: Position of current database backup in the file.
     *
     * @return the position value.
     */
    public Integer position() {
        return this.position;
    }

    /**
     * Get the isDamaged property: Database was damaged when backed up, but the backup operation was requested to
     * continue despite errors.
     *
     * @return the isDamaged value.
     */
    public Boolean isDamaged() {
        return this.isDamaged;
    }

    /**
     * Get the isCompressed property: Whether the backup set is compressed.
     *
     * @return the isCompressed value.
     */
    public Boolean isCompressed() {
        return this.isCompressed;
    }

    /**
     * Get the familyCount property: Number of files in the backup set.
     *
     * @return the familyCount value.
     */
    public Integer familyCount() {
        return this.familyCount;
    }

    /**
     * Get the backupFinishDate property: Date and time when the backup operation finished.
     *
     * @return the backupFinishDate value.
     */
    public OffsetDateTime backupFinishDate() {
        return this.backupFinishDate;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
