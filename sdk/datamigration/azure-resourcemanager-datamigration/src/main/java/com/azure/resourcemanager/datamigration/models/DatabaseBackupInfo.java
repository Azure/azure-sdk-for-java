// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Information about backup files when existing backup mode is used.
 */
@Immutable
public final class DatabaseBackupInfo implements JsonSerializable<DatabaseBackupInfo> {
    /*
     * Database name.
     */
    private String databaseName;

    /*
     * Backup Type.
     */
    private BackupType backupType;

    /*
     * The list of backup files for the current database.
     */
    private List<String> backupFiles;

    /*
     * Position of current database backup in the file.
     */
    private Integer position;

    /*
     * Database was damaged when backed up, but the backup operation was requested to continue despite errors.
     */
    private Boolean isDamaged;

    /*
     * Whether the backup set is compressed
     */
    private Boolean isCompressed;

    /*
     * Number of files in the backup set.
     */
    private Integer familyCount;

    /*
     * Date and time when the backup operation finished.
     */
    private OffsetDateTime backupFinishDate;

    /**
     * Creates an instance of DatabaseBackupInfo class.
     */
    public DatabaseBackupInfo() {
    }

    /**
     * Get the databaseName property: Database name.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Get the backupType property: Backup Type.
     * 
     * @return the backupType value.
     */
    public BackupType backupType() {
        return this.backupType;
    }

    /**
     * Get the backupFiles property: The list of backup files for the current database.
     * 
     * @return the backupFiles value.
     */
    public List<String> backupFiles() {
        return this.backupFiles;
    }

    /**
     * Get the position property: Position of current database backup in the file.
     * 
     * @return the position value.
     */
    public Integer position() {
        return this.position;
    }

    /**
     * Get the isDamaged property: Database was damaged when backed up, but the backup operation was requested to
     * continue despite errors.
     * 
     * @return the isDamaged value.
     */
    public Boolean isDamaged() {
        return this.isDamaged;
    }

    /**
     * Get the isCompressed property: Whether the backup set is compressed.
     * 
     * @return the isCompressed value.
     */
    public Boolean isCompressed() {
        return this.isCompressed;
    }

    /**
     * Get the familyCount property: Number of files in the backup set.
     * 
     * @return the familyCount value.
     */
    public Integer familyCount() {
        return this.familyCount;
    }

    /**
     * Get the backupFinishDate property: Date and time when the backup operation finished.
     * 
     * @return the backupFinishDate value.
     */
    public OffsetDateTime backupFinishDate() {
        return this.backupFinishDate;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabaseBackupInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabaseBackupInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatabaseBackupInfo.
     */
    public static DatabaseBackupInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabaseBackupInfo deserializedDatabaseBackupInfo = new DatabaseBackupInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("databaseName".equals(fieldName)) {
                    deserializedDatabaseBackupInfo.databaseName = reader.getString();
                } else if ("backupType".equals(fieldName)) {
                    deserializedDatabaseBackupInfo.backupType = BackupType.fromString(reader.getString());
                } else if ("backupFiles".equals(fieldName)) {
                    List<String> backupFiles = reader.readArray(reader1 -> reader1.getString());
                    deserializedDatabaseBackupInfo.backupFiles = backupFiles;
                } else if ("position".equals(fieldName)) {
                    deserializedDatabaseBackupInfo.position = reader.getNullable(JsonReader::getInt);
                } else if ("isDamaged".equals(fieldName)) {
                    deserializedDatabaseBackupInfo.isDamaged = reader.getNullable(JsonReader::getBoolean);
                } else if ("isCompressed".equals(fieldName)) {
                    deserializedDatabaseBackupInfo.isCompressed = reader.getNullable(JsonReader::getBoolean);
                } else if ("familyCount".equals(fieldName)) {
                    deserializedDatabaseBackupInfo.familyCount = reader.getNullable(JsonReader::getInt);
                } else if ("backupFinishDate".equals(fieldName)) {
                    deserializedDatabaseBackupInfo.backupFinishDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabaseBackupInfo;
        });
    }
}
