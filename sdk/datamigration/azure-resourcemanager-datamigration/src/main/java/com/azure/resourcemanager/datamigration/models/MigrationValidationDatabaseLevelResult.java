// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Database level validation results.
 */
@Immutable
public class MigrationValidationDatabaseLevelResult
    implements JsonSerializable<MigrationValidationDatabaseLevelResult> {
    /*
     * Result identifier
     */
    private String id;

    /*
     * Migration Identifier
     */
    private String migrationId;

    /*
     * Name of the source database
     */
    private String sourceDatabaseName;

    /*
     * Name of the target database
     */
    private String targetDatabaseName;

    /*
     * Validation start time
     */
    private OffsetDateTime startedOn;

    /*
     * Validation end time
     */
    private OffsetDateTime endedOn;

    /*
     * Provides data integrity validation result between the source and target tables that are migrated.
     */
    private DataIntegrityValidationResult dataIntegrityValidationResult;

    /*
     * Provides schema comparison result between source and target database
     */
    private SchemaComparisonValidationResult schemaValidationResult;

    /*
     * Results of some of the query execution result between source and target database
     */
    private QueryAnalysisValidationResult queryAnalysisValidationResult;

    /*
     * Current status of validation at the database level
     */
    private ValidationStatus status;

    /**
     * Creates an instance of MigrationValidationDatabaseLevelResult class.
     */
    public MigrationValidationDatabaseLevelResult() {
    }

    /**
     * Get the id property: Result identifier.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Result identifier.
     * 
     * @param id the id value to set.
     * @return the MigrationValidationDatabaseLevelResult object itself.
     */
    MigrationValidationDatabaseLevelResult withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the migrationId property: Migration Identifier.
     * 
     * @return the migrationId value.
     */
    public String migrationId() {
        return this.migrationId;
    }

    /**
     * Set the migrationId property: Migration Identifier.
     * 
     * @param migrationId the migrationId value to set.
     * @return the MigrationValidationDatabaseLevelResult object itself.
     */
    MigrationValidationDatabaseLevelResult withMigrationId(String migrationId) {
        this.migrationId = migrationId;
        return this;
    }

    /**
     * Get the sourceDatabaseName property: Name of the source database.
     * 
     * @return the sourceDatabaseName value.
     */
    public String sourceDatabaseName() {
        return this.sourceDatabaseName;
    }

    /**
     * Set the sourceDatabaseName property: Name of the source database.
     * 
     * @param sourceDatabaseName the sourceDatabaseName value to set.
     * @return the MigrationValidationDatabaseLevelResult object itself.
     */
    MigrationValidationDatabaseLevelResult withSourceDatabaseName(String sourceDatabaseName) {
        this.sourceDatabaseName = sourceDatabaseName;
        return this;
    }

    /**
     * Get the targetDatabaseName property: Name of the target database.
     * 
     * @return the targetDatabaseName value.
     */
    public String targetDatabaseName() {
        return this.targetDatabaseName;
    }

    /**
     * Set the targetDatabaseName property: Name of the target database.
     * 
     * @param targetDatabaseName the targetDatabaseName value to set.
     * @return the MigrationValidationDatabaseLevelResult object itself.
     */
    MigrationValidationDatabaseLevelResult withTargetDatabaseName(String targetDatabaseName) {
        this.targetDatabaseName = targetDatabaseName;
        return this;
    }

    /**
     * Get the startedOn property: Validation start time.
     * 
     * @return the startedOn value.
     */
    public OffsetDateTime startedOn() {
        return this.startedOn;
    }

    /**
     * Set the startedOn property: Validation start time.
     * 
     * @param startedOn the startedOn value to set.
     * @return the MigrationValidationDatabaseLevelResult object itself.
     */
    MigrationValidationDatabaseLevelResult withStartedOn(OffsetDateTime startedOn) {
        this.startedOn = startedOn;
        return this;
    }

    /**
     * Get the endedOn property: Validation end time.
     * 
     * @return the endedOn value.
     */
    public OffsetDateTime endedOn() {
        return this.endedOn;
    }

    /**
     * Set the endedOn property: Validation end time.
     * 
     * @param endedOn the endedOn value to set.
     * @return the MigrationValidationDatabaseLevelResult object itself.
     */
    MigrationValidationDatabaseLevelResult withEndedOn(OffsetDateTime endedOn) {
        this.endedOn = endedOn;
        return this;
    }

    /**
     * Get the dataIntegrityValidationResult property: Provides data integrity validation result between the source and
     * target tables that are migrated.
     * 
     * @return the dataIntegrityValidationResult value.
     */
    public DataIntegrityValidationResult dataIntegrityValidationResult() {
        return this.dataIntegrityValidationResult;
    }

    /**
     * Set the dataIntegrityValidationResult property: Provides data integrity validation result between the source and
     * target tables that are migrated.
     * 
     * @param dataIntegrityValidationResult the dataIntegrityValidationResult value to set.
     * @return the MigrationValidationDatabaseLevelResult object itself.
     */
    MigrationValidationDatabaseLevelResult
        withDataIntegrityValidationResult(DataIntegrityValidationResult dataIntegrityValidationResult) {
        this.dataIntegrityValidationResult = dataIntegrityValidationResult;
        return this;
    }

    /**
     * Get the schemaValidationResult property: Provides schema comparison result between source and target database.
     * 
     * @return the schemaValidationResult value.
     */
    public SchemaComparisonValidationResult schemaValidationResult() {
        return this.schemaValidationResult;
    }

    /**
     * Set the schemaValidationResult property: Provides schema comparison result between source and target database.
     * 
     * @param schemaValidationResult the schemaValidationResult value to set.
     * @return the MigrationValidationDatabaseLevelResult object itself.
     */
    MigrationValidationDatabaseLevelResult
        withSchemaValidationResult(SchemaComparisonValidationResult schemaValidationResult) {
        this.schemaValidationResult = schemaValidationResult;
        return this;
    }

    /**
     * Get the queryAnalysisValidationResult property: Results of some of the query execution result between source and
     * target database.
     * 
     * @return the queryAnalysisValidationResult value.
     */
    public QueryAnalysisValidationResult queryAnalysisValidationResult() {
        return this.queryAnalysisValidationResult;
    }

    /**
     * Set the queryAnalysisValidationResult property: Results of some of the query execution result between source and
     * target database.
     * 
     * @param queryAnalysisValidationResult the queryAnalysisValidationResult value to set.
     * @return the MigrationValidationDatabaseLevelResult object itself.
     */
    MigrationValidationDatabaseLevelResult
        withQueryAnalysisValidationResult(QueryAnalysisValidationResult queryAnalysisValidationResult) {
        this.queryAnalysisValidationResult = queryAnalysisValidationResult;
        return this;
    }

    /**
     * Get the status property: Current status of validation at the database level.
     * 
     * @return the status value.
     */
    public ValidationStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Current status of validation at the database level.
     * 
     * @param status the status value to set.
     * @return the MigrationValidationDatabaseLevelResult object itself.
     */
    MigrationValidationDatabaseLevelResult withStatus(ValidationStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataIntegrityValidationResult() != null) {
            dataIntegrityValidationResult().validate();
        }
        if (schemaValidationResult() != null) {
            schemaValidationResult().validate();
        }
        if (queryAnalysisValidationResult() != null) {
            queryAnalysisValidationResult().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrationValidationDatabaseLevelResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrationValidationDatabaseLevelResult if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrationValidationDatabaseLevelResult.
     */
    public static MigrationValidationDatabaseLevelResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrationValidationDatabaseLevelResult deserializedMigrationValidationDatabaseLevelResult
                = new MigrationValidationDatabaseLevelResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMigrationValidationDatabaseLevelResult.id = reader.getString();
                } else if ("migrationId".equals(fieldName)) {
                    deserializedMigrationValidationDatabaseLevelResult.migrationId = reader.getString();
                } else if ("sourceDatabaseName".equals(fieldName)) {
                    deserializedMigrationValidationDatabaseLevelResult.sourceDatabaseName = reader.getString();
                } else if ("targetDatabaseName".equals(fieldName)) {
                    deserializedMigrationValidationDatabaseLevelResult.targetDatabaseName = reader.getString();
                } else if ("startedOn".equals(fieldName)) {
                    deserializedMigrationValidationDatabaseLevelResult.startedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endedOn".equals(fieldName)) {
                    deserializedMigrationValidationDatabaseLevelResult.endedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("dataIntegrityValidationResult".equals(fieldName)) {
                    deserializedMigrationValidationDatabaseLevelResult.dataIntegrityValidationResult
                        = DataIntegrityValidationResult.fromJson(reader);
                } else if ("schemaValidationResult".equals(fieldName)) {
                    deserializedMigrationValidationDatabaseLevelResult.schemaValidationResult
                        = SchemaComparisonValidationResult.fromJson(reader);
                } else if ("queryAnalysisValidationResult".equals(fieldName)) {
                    deserializedMigrationValidationDatabaseLevelResult.queryAnalysisValidationResult
                        = QueryAnalysisValidationResult.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedMigrationValidationDatabaseLevelResult.status
                        = ValidationStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrationValidationDatabaseLevelResult;
        });
    }
}
