// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The MigrateSsisTaskOutputProjectLevel model.
 */
@Immutable
public final class MigrateSsisTaskOutputProjectLevel extends MigrateSsisTaskOutput {
    /*
     * Result type
     */
    private String resultType = "SsisProjectLevelOutput";

    /*
     * Name of the folder
     */
    private String folderName;

    /*
     * Name of the project
     */
    private String projectName;

    /*
     * Current state of migration
     */
    private MigrationState state;

    /*
     * Stage of SSIS migration.
     */
    private SsisMigrationStage stage;

    /*
     * Migration start time
     */
    private OffsetDateTime startedOn;

    /*
     * Migration end time
     */
    private OffsetDateTime endedOn;

    /*
     * Migration progress message
     */
    private String message;

    /*
     * Migration exceptions and warnings
     */
    private List<ReportableException> exceptionsAndWarnings;

    /**
     * Creates an instance of MigrateSsisTaskOutputProjectLevel class.
     */
    public MigrateSsisTaskOutputProjectLevel() {
    }

    /**
     * Get the resultType property: Result type.
     * 
     * @return the resultType value.
     */
    @Override
    public String resultType() {
        return this.resultType;
    }

    /**
     * Get the folderName property: Name of the folder.
     * 
     * @return the folderName value.
     */
    public String folderName() {
        return this.folderName;
    }

    /**
     * Get the projectName property: Name of the project.
     * 
     * @return the projectName value.
     */
    public String projectName() {
        return this.projectName;
    }

    /**
     * Get the state property: Current state of migration.
     * 
     * @return the state value.
     */
    public MigrationState state() {
        return this.state;
    }

    /**
     * Get the stage property: Stage of SSIS migration.
     * 
     * @return the stage value.
     */
    public SsisMigrationStage stage() {
        return this.stage;
    }

    /**
     * Get the startedOn property: Migration start time.
     * 
     * @return the startedOn value.
     */
    public OffsetDateTime startedOn() {
        return this.startedOn;
    }

    /**
     * Get the endedOn property: Migration end time.
     * 
     * @return the endedOn value.
     */
    public OffsetDateTime endedOn() {
        return this.endedOn;
    }

    /**
     * Get the message property: Migration progress message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Get the exceptionsAndWarnings property: Migration exceptions and warnings.
     * 
     * @return the exceptionsAndWarnings value.
     */
    public List<ReportableException> exceptionsAndWarnings() {
        return this.exceptionsAndWarnings;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (exceptionsAndWarnings() != null) {
            exceptionsAndWarnings().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resultType", this.resultType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrateSsisTaskOutputProjectLevel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrateSsisTaskOutputProjectLevel if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrateSsisTaskOutputProjectLevel.
     */
    public static MigrateSsisTaskOutputProjectLevel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrateSsisTaskOutputProjectLevel deserializedMigrateSsisTaskOutputProjectLevel
                = new MigrateSsisTaskOutputProjectLevel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMigrateSsisTaskOutputProjectLevel.withId(reader.getString());
                } else if ("resultType".equals(fieldName)) {
                    deserializedMigrateSsisTaskOutputProjectLevel.resultType = reader.getString();
                } else if ("folderName".equals(fieldName)) {
                    deserializedMigrateSsisTaskOutputProjectLevel.folderName = reader.getString();
                } else if ("projectName".equals(fieldName)) {
                    deserializedMigrateSsisTaskOutputProjectLevel.projectName = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedMigrateSsisTaskOutputProjectLevel.state = MigrationState.fromString(reader.getString());
                } else if ("stage".equals(fieldName)) {
                    deserializedMigrateSsisTaskOutputProjectLevel.stage
                        = SsisMigrationStage.fromString(reader.getString());
                } else if ("startedOn".equals(fieldName)) {
                    deserializedMigrateSsisTaskOutputProjectLevel.startedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endedOn".equals(fieldName)) {
                    deserializedMigrateSsisTaskOutputProjectLevel.endedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("message".equals(fieldName)) {
                    deserializedMigrateSsisTaskOutputProjectLevel.message = reader.getString();
                } else if ("exceptionsAndWarnings".equals(fieldName)) {
                    List<ReportableException> exceptionsAndWarnings
                        = reader.readArray(reader1 -> ReportableException.fromJson(reader1));
                    deserializedMigrateSsisTaskOutputProjectLevel.exceptionsAndWarnings = exceptionsAndWarnings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrateSsisTaskOutputProjectLevel;
        });
    }
}
