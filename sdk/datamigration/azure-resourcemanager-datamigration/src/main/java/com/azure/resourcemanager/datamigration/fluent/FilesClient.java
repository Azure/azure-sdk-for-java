// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.datamigration.fluent.models.FileStorageInfoInner;
import com.azure.resourcemanager.datamigration.fluent.models.ProjectFileInner;

/** An instance of this class provides access to all the operations defined in FilesClient. */
public interface FilesClient {
    /**
     * The project resource is a nested resource representing a stored migration project. This method returns a list of
     * files owned by a project resource.
     *
     * @param groupName Name of the resource group.
     * @param serviceName Name of the service.
     * @param projectName Name of the project.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return oData page of files.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProjectFileInner> list(String groupName, String serviceName, String projectName);

    /**
     * The project resource is a nested resource representing a stored migration project. This method returns a list of
     * files owned by a project resource.
     *
     * @param groupName Name of the resource group.
     * @param serviceName Name of the service.
     * @param projectName Name of the project.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return oData page of files.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProjectFileInner> list(String groupName, String serviceName, String projectName, Context context);

    /**
     * The files resource is a nested, proxy-only resource representing a file stored under the project resource. This
     * method retrieves information about a file.
     *
     * @param groupName Name of the resource group.
     * @param serviceName Name of the service.
     * @param projectName Name of the project.
     * @param fileName Name of the File.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a file resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProjectFileInner get(String groupName, String serviceName, String projectName, String fileName);

    /**
     * The files resource is a nested, proxy-only resource representing a file stored under the project resource. This
     * method retrieves information about a file.
     *
     * @param groupName Name of the resource group.
     * @param serviceName Name of the service.
     * @param projectName Name of the project.
     * @param fileName Name of the File.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a file resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ProjectFileInner> getWithResponse(
        String groupName, String serviceName, String projectName, String fileName, Context context);

    /**
     * The PUT method creates a new file or updates an existing one.
     *
     * @param groupName Name of the resource group.
     * @param serviceName Name of the service.
     * @param projectName Name of the project.
     * @param fileName Name of the File.
     * @param parameters Information about the file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a file resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProjectFileInner createOrUpdate(
        String groupName, String serviceName, String projectName, String fileName, ProjectFileInner parameters);

    /**
     * The PUT method creates a new file or updates an existing one.
     *
     * @param groupName Name of the resource group.
     * @param serviceName Name of the service.
     * @param projectName Name of the project.
     * @param fileName Name of the File.
     * @param parameters Information about the file.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a file resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ProjectFileInner> createOrUpdateWithResponse(
        String groupName,
        String serviceName,
        String projectName,
        String fileName,
        ProjectFileInner parameters,
        Context context);

    /**
     * This method deletes a file.
     *
     * @param groupName Name of the resource group.
     * @param serviceName Name of the service.
     * @param projectName Name of the project.
     * @param fileName Name of the File.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String groupName, String serviceName, String projectName, String fileName);

    /**
     * This method deletes a file.
     *
     * @param groupName Name of the resource group.
     * @param serviceName Name of the service.
     * @param projectName Name of the project.
     * @param fileName Name of the File.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(
        String groupName, String serviceName, String projectName, String fileName, Context context);

    /**
     * This method updates an existing file.
     *
     * @param groupName Name of the resource group.
     * @param serviceName Name of the service.
     * @param projectName Name of the project.
     * @param fileName Name of the File.
     * @param parameters Information about the file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a file resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProjectFileInner update(
        String groupName, String serviceName, String projectName, String fileName, ProjectFileInner parameters);

    /**
     * This method updates an existing file.
     *
     * @param groupName Name of the resource group.
     * @param serviceName Name of the service.
     * @param projectName Name of the project.
     * @param fileName Name of the File.
     * @param parameters Information about the file.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a file resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ProjectFileInner> updateWithResponse(
        String groupName,
        String serviceName,
        String projectName,
        String fileName,
        ProjectFileInner parameters,
        Context context);

    /**
     * This method is used for requesting storage information using which contents of the file can be downloaded.
     *
     * @param groupName Name of the resource group.
     * @param serviceName Name of the service.
     * @param projectName Name of the project.
     * @param fileName Name of the File.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return file storage information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FileStorageInfoInner read(String groupName, String serviceName, String projectName, String fileName);

    /**
     * This method is used for requesting storage information using which contents of the file can be downloaded.
     *
     * @param groupName Name of the resource group.
     * @param serviceName Name of the service.
     * @param projectName Name of the project.
     * @param fileName Name of the File.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return file storage information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<FileStorageInfoInner> readWithResponse(
        String groupName, String serviceName, String projectName, String fileName, Context context);

    /**
     * This method is used for requesting information for reading and writing the file content.
     *
     * @param groupName Name of the resource group.
     * @param serviceName Name of the service.
     * @param projectName Name of the project.
     * @param fileName Name of the File.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return file storage information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FileStorageInfoInner readWrite(String groupName, String serviceName, String projectName, String fileName);

    /**
     * This method is used for requesting information for reading and writing the file content.
     *
     * @param groupName Name of the resource group.
     * @param serviceName Name of the service.
     * @param projectName Name of the project.
     * @param fileName Name of the File.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return file storage information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<FileStorageInfoInner> readWriteWithResponse(
        String groupName, String serviceName, String projectName, String fileName, Context context);
}
