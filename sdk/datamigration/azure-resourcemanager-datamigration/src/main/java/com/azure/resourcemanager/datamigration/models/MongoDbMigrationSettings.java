// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Describes how a MongoDB data migration should be performed.
 */
@Fluent
public final class MongoDbMigrationSettings implements JsonSerializable<MongoDbMigrationSettings> {
    /*
     * The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial
     * copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or
     * null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
     */
    private Integer boostRUs;

    /*
     * The databases on the source cluster to migrate to the target. The keys are the names of the databases.
     */
    private Map<String, MongoDbDatabaseSettings> databases;

    /*
     * Describes how changes will be replicated from the source to the target. The default is OneTime.
     */
    private MongoDbReplication replication;

    /*
     * Settings used to connect to the source cluster
     */
    private MongoDbConnectionInfo source;

    /*
     * Settings used to connect to the target cluster
     */
    private MongoDbConnectionInfo target;

    /*
     * Settings used to limit the resource usage of the migration
     */
    private MongoDbThrottlingSettings throttling;

    /**
     * Creates an instance of MongoDbMigrationSettings class.
     */
    public MongoDbMigrationSettings() {
    }

    /**
     * Get the boostRUs property: The RU limit on a CosmosDB target that collections will be temporarily increased to
     * (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which
     * is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
     * 
     * @return the boostRUs value.
     */
    public Integer boostRUs() {
        return this.boostRUs;
    }

    /**
     * Set the boostRUs property: The RU limit on a CosmosDB target that collections will be temporarily increased to
     * (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which
     * is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
     * 
     * @param boostRUs the boostRUs value to set.
     * @return the MongoDbMigrationSettings object itself.
     */
    public MongoDbMigrationSettings withBoostRUs(Integer boostRUs) {
        this.boostRUs = boostRUs;
        return this;
    }

    /**
     * Get the databases property: The databases on the source cluster to migrate to the target. The keys are the names
     * of the databases.
     * 
     * @return the databases value.
     */
    public Map<String, MongoDbDatabaseSettings> databases() {
        return this.databases;
    }

    /**
     * Set the databases property: The databases on the source cluster to migrate to the target. The keys are the names
     * of the databases.
     * 
     * @param databases the databases value to set.
     * @return the MongoDbMigrationSettings object itself.
     */
    public MongoDbMigrationSettings withDatabases(Map<String, MongoDbDatabaseSettings> databases) {
        this.databases = databases;
        return this;
    }

    /**
     * Get the replication property: Describes how changes will be replicated from the source to the target. The default
     * is OneTime.
     * 
     * @return the replication value.
     */
    public MongoDbReplication replication() {
        return this.replication;
    }

    /**
     * Set the replication property: Describes how changes will be replicated from the source to the target. The default
     * is OneTime.
     * 
     * @param replication the replication value to set.
     * @return the MongoDbMigrationSettings object itself.
     */
    public MongoDbMigrationSettings withReplication(MongoDbReplication replication) {
        this.replication = replication;
        return this;
    }

    /**
     * Get the source property: Settings used to connect to the source cluster.
     * 
     * @return the source value.
     */
    public MongoDbConnectionInfo source() {
        return this.source;
    }

    /**
     * Set the source property: Settings used to connect to the source cluster.
     * 
     * @param source the source value to set.
     * @return the MongoDbMigrationSettings object itself.
     */
    public MongoDbMigrationSettings withSource(MongoDbConnectionInfo source) {
        this.source = source;
        return this;
    }

    /**
     * Get the target property: Settings used to connect to the target cluster.
     * 
     * @return the target value.
     */
    public MongoDbConnectionInfo target() {
        return this.target;
    }

    /**
     * Set the target property: Settings used to connect to the target cluster.
     * 
     * @param target the target value to set.
     * @return the MongoDbMigrationSettings object itself.
     */
    public MongoDbMigrationSettings withTarget(MongoDbConnectionInfo target) {
        this.target = target;
        return this;
    }

    /**
     * Get the throttling property: Settings used to limit the resource usage of the migration.
     * 
     * @return the throttling value.
     */
    public MongoDbThrottlingSettings throttling() {
        return this.throttling;
    }

    /**
     * Set the throttling property: Settings used to limit the resource usage of the migration.
     * 
     * @param throttling the throttling value to set.
     * @return the MongoDbMigrationSettings object itself.
     */
    public MongoDbMigrationSettings withThrottling(MongoDbThrottlingSettings throttling) {
        this.throttling = throttling;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (databases() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property databases in model MongoDbMigrationSettings"));
        } else {
            databases().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (source() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property source in model MongoDbMigrationSettings"));
        } else {
            source().validate();
        }
        if (target() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property target in model MongoDbMigrationSettings"));
        } else {
            target().validate();
        }
        if (throttling() != null) {
            throttling().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MongoDbMigrationSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("databases", this.databases, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("source", this.source);
        jsonWriter.writeJsonField("target", this.target);
        jsonWriter.writeNumberField("boostRUs", this.boostRUs);
        jsonWriter.writeStringField("replication", this.replication == null ? null : this.replication.toString());
        jsonWriter.writeJsonField("throttling", this.throttling);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoDbMigrationSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoDbMigrationSettings if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MongoDbMigrationSettings.
     */
    public static MongoDbMigrationSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoDbMigrationSettings deserializedMongoDbMigrationSettings = new MongoDbMigrationSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("databases".equals(fieldName)) {
                    Map<String, MongoDbDatabaseSettings> databases
                        = reader.readMap(reader1 -> MongoDbDatabaseSettings.fromJson(reader1));
                    deserializedMongoDbMigrationSettings.databases = databases;
                } else if ("source".equals(fieldName)) {
                    deserializedMongoDbMigrationSettings.source = MongoDbConnectionInfo.fromJson(reader);
                } else if ("target".equals(fieldName)) {
                    deserializedMongoDbMigrationSettings.target = MongoDbConnectionInfo.fromJson(reader);
                } else if ("boostRUs".equals(fieldName)) {
                    deserializedMongoDbMigrationSettings.boostRUs = reader.getNullable(JsonReader::getInt);
                } else if ("replication".equals(fieldName)) {
                    deserializedMongoDbMigrationSettings.replication
                        = MongoDbReplication.fromString(reader.getString());
                } else if ("throttling".equals(fieldName)) {
                    deserializedMongoDbMigrationSettings.throttling = MongoDbThrottlingSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoDbMigrationSettings;
        });
    }
}
