// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Describes how a MongoDB data migration should be performed. */
@Fluent
public final class MongoDbMigrationSettings {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MongoDbMigrationSettings.class);

    /*
     * The RU limit on a CosmosDB target that collections will be temporarily
     * increased to (if lower) during the initial copy of a migration, from
     * 10,000 to 1,000,000, or 0 to use the default boost (which is generally
     * the maximum), or null to not boost the RUs. This setting has no effect
     * on non-CosmosDB targets.
     */
    @JsonProperty(value = "boostRUs")
    private Integer boostRUs;

    /*
     * The databases on the source cluster to migrate to the target. The keys
     * are the names of the databases.
     */
    @JsonProperty(value = "databases", required = true)
    private Map<String, MongoDbDatabaseSettings> databases;

    /*
     * Describes how changes will be replicated from the source to the target.
     * The default is OneTime.
     */
    @JsonProperty(value = "replication")
    private MongoDbReplication replication;

    /*
     * Settings used to connect to the source cluster
     */
    @JsonProperty(value = "source", required = true)
    private MongoDbConnectionInfo source;

    /*
     * Settings used to connect to the target cluster
     */
    @JsonProperty(value = "target", required = true)
    private MongoDbConnectionInfo target;

    /*
     * Settings used to limit the resource usage of the migration
     */
    @JsonProperty(value = "throttling")
    private MongoDbThrottlingSettings throttling;

    /**
     * Get the boostRUs property: The RU limit on a CosmosDB target that collections will be temporarily increased to
     * (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which
     * is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
     *
     * @return the boostRUs value.
     */
    public Integer boostRUs() {
        return this.boostRUs;
    }

    /**
     * Set the boostRUs property: The RU limit on a CosmosDB target that collections will be temporarily increased to
     * (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which
     * is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets.
     *
     * @param boostRUs the boostRUs value to set.
     * @return the MongoDbMigrationSettings object itself.
     */
    public MongoDbMigrationSettings withBoostRUs(Integer boostRUs) {
        this.boostRUs = boostRUs;
        return this;
    }

    /**
     * Get the databases property: The databases on the source cluster to migrate to the target. The keys are the names
     * of the databases.
     *
     * @return the databases value.
     */
    public Map<String, MongoDbDatabaseSettings> databases() {
        return this.databases;
    }

    /**
     * Set the databases property: The databases on the source cluster to migrate to the target. The keys are the names
     * of the databases.
     *
     * @param databases the databases value to set.
     * @return the MongoDbMigrationSettings object itself.
     */
    public MongoDbMigrationSettings withDatabases(Map<String, MongoDbDatabaseSettings> databases) {
        this.databases = databases;
        return this;
    }

    /**
     * Get the replication property: Describes how changes will be replicated from the source to the target. The default
     * is OneTime.
     *
     * @return the replication value.
     */
    public MongoDbReplication replication() {
        return this.replication;
    }

    /**
     * Set the replication property: Describes how changes will be replicated from the source to the target. The default
     * is OneTime.
     *
     * @param replication the replication value to set.
     * @return the MongoDbMigrationSettings object itself.
     */
    public MongoDbMigrationSettings withReplication(MongoDbReplication replication) {
        this.replication = replication;
        return this;
    }

    /**
     * Get the source property: Settings used to connect to the source cluster.
     *
     * @return the source value.
     */
    public MongoDbConnectionInfo source() {
        return this.source;
    }

    /**
     * Set the source property: Settings used to connect to the source cluster.
     *
     * @param source the source value to set.
     * @return the MongoDbMigrationSettings object itself.
     */
    public MongoDbMigrationSettings withSource(MongoDbConnectionInfo source) {
        this.source = source;
        return this;
    }

    /**
     * Get the target property: Settings used to connect to the target cluster.
     *
     * @return the target value.
     */
    public MongoDbConnectionInfo target() {
        return this.target;
    }

    /**
     * Set the target property: Settings used to connect to the target cluster.
     *
     * @param target the target value to set.
     * @return the MongoDbMigrationSettings object itself.
     */
    public MongoDbMigrationSettings withTarget(MongoDbConnectionInfo target) {
        this.target = target;
        return this;
    }

    /**
     * Get the throttling property: Settings used to limit the resource usage of the migration.
     *
     * @return the throttling value.
     */
    public MongoDbThrottlingSettings throttling() {
        return this.throttling;
    }

    /**
     * Set the throttling property: Settings used to limit the resource usage of the migration.
     *
     * @param throttling the throttling value to set.
     * @return the MongoDbMigrationSettings object itself.
     */
    public MongoDbMigrationSettings withThrottling(MongoDbThrottlingSettings throttling) {
        this.throttling = throttling;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (databases() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property databases in model MongoDbMigrationSettings"));
        } else {
            databases()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
        if (source() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property source in model MongoDbMigrationSettings"));
        } else {
            source().validate();
        }
        if (target() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property target in model MongoDbMigrationSettings"));
        } else {
            target().validate();
        }
        if (throttling() != null) {
            throttling().validate();
        }
    }
}
