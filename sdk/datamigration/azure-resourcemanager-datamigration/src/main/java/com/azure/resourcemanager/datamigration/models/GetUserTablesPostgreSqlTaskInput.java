// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
 */
@Fluent
public final class GetUserTablesPostgreSqlTaskInput implements JsonSerializable<GetUserTablesPostgreSqlTaskInput> {
    /*
     * Information for connecting to PostgreSQL source
     */
    private PostgreSqlConnectionInfo connectionInfo;

    /*
     * List of PostgreSQL databases for which to collect tables
     */
    private List<String> selectedDatabases;

    /**
     * Creates an instance of GetUserTablesPostgreSqlTaskInput class.
     */
    public GetUserTablesPostgreSqlTaskInput() {
    }

    /**
     * Get the connectionInfo property: Information for connecting to PostgreSQL source.
     * 
     * @return the connectionInfo value.
     */
    public PostgreSqlConnectionInfo connectionInfo() {
        return this.connectionInfo;
    }

    /**
     * Set the connectionInfo property: Information for connecting to PostgreSQL source.
     * 
     * @param connectionInfo the connectionInfo value to set.
     * @return the GetUserTablesPostgreSqlTaskInput object itself.
     */
    public GetUserTablesPostgreSqlTaskInput withConnectionInfo(PostgreSqlConnectionInfo connectionInfo) {
        this.connectionInfo = connectionInfo;
        return this;
    }

    /**
     * Get the selectedDatabases property: List of PostgreSQL databases for which to collect tables.
     * 
     * @return the selectedDatabases value.
     */
    public List<String> selectedDatabases() {
        return this.selectedDatabases;
    }

    /**
     * Set the selectedDatabases property: List of PostgreSQL databases for which to collect tables.
     * 
     * @param selectedDatabases the selectedDatabases value to set.
     * @return the GetUserTablesPostgreSqlTaskInput object itself.
     */
    public GetUserTablesPostgreSqlTaskInput withSelectedDatabases(List<String> selectedDatabases) {
        this.selectedDatabases = selectedDatabases;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connectionInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property connectionInfo in model GetUserTablesPostgreSqlTaskInput"));
        } else {
            connectionInfo().validate();
        }
        if (selectedDatabases() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property selectedDatabases in model GetUserTablesPostgreSqlTaskInput"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GetUserTablesPostgreSqlTaskInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("connectionInfo", this.connectionInfo);
        jsonWriter.writeArrayField("selectedDatabases", this.selectedDatabases,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetUserTablesPostgreSqlTaskInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetUserTablesPostgreSqlTaskInput if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GetUserTablesPostgreSqlTaskInput.
     */
    public static GetUserTablesPostgreSqlTaskInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GetUserTablesPostgreSqlTaskInput deserializedGetUserTablesPostgreSqlTaskInput
                = new GetUserTablesPostgreSqlTaskInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("connectionInfo".equals(fieldName)) {
                    deserializedGetUserTablesPostgreSqlTaskInput.connectionInfo
                        = PostgreSqlConnectionInfo.fromJson(reader);
                } else if ("selectedDatabases".equals(fieldName)) {
                    List<String> selectedDatabases = reader.readArray(reader1 -> reader1.getString());
                    deserializedGetUserTablesPostgreSqlTaskInput.selectedDatabases = selectedDatabases;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGetUserTablesPostgreSqlTaskInput;
        });
    }
}
