// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.datamigration.fluent.models.AuthenticationKeysInner;
import com.azure.resourcemanager.datamigration.fluent.models.DatabaseMigrationInner;
import com.azure.resourcemanager.datamigration.fluent.models.DeleteNodeInner;
import com.azure.resourcemanager.datamigration.fluent.models.IntegrationRuntimeMonitoringDataInner;
import com.azure.resourcemanager.datamigration.fluent.models.RegenAuthKeysInner;
import com.azure.resourcemanager.datamigration.fluent.models.SqlMigrationServiceInner;
import com.azure.resourcemanager.datamigration.models.SqlMigrationServiceUpdate;

/** An instance of this class provides access to all the operations defined in SqlMigrationServicesClient. */
public interface SqlMigrationServicesClient {
    /**
     * Retrieve the Database Migration Service.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Migration Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlMigrationServiceInner getByResourceGroup(String resourceGroupName, String sqlMigrationServiceName);

    /**
     * Retrieve the Database Migration Service.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Migration Service along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SqlMigrationServiceInner> getByResourceGroupWithResponse(
        String resourceGroupName, String sqlMigrationServiceName, Context context);

    /**
     * Create or Update Database Migration Service.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @param parameters Details of SqlMigrationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a SQL Migration Service.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SqlMigrationServiceInner>, SqlMigrationServiceInner> beginCreateOrUpdate(
        String resourceGroupName, String sqlMigrationServiceName, SqlMigrationServiceInner parameters);

    /**
     * Create or Update Database Migration Service.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @param parameters Details of SqlMigrationService resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a SQL Migration Service.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SqlMigrationServiceInner>, SqlMigrationServiceInner> beginCreateOrUpdate(
        String resourceGroupName, String sqlMigrationServiceName, SqlMigrationServiceInner parameters, Context context);

    /**
     * Create or Update Database Migration Service.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @param parameters Details of SqlMigrationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Migration Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlMigrationServiceInner createOrUpdate(
        String resourceGroupName, String sqlMigrationServiceName, SqlMigrationServiceInner parameters);

    /**
     * Create or Update Database Migration Service.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @param parameters Details of SqlMigrationService resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Migration Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlMigrationServiceInner createOrUpdate(
        String resourceGroupName, String sqlMigrationServiceName, SqlMigrationServiceInner parameters, Context context);

    /**
     * Delete Database Migration Service.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String sqlMigrationServiceName);

    /**
     * Delete Database Migration Service.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String sqlMigrationServiceName, Context context);

    /**
     * Delete Database Migration Service.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String sqlMigrationServiceName);

    /**
     * Delete Database Migration Service.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String sqlMigrationServiceName, Context context);

    /**
     * Update Database Migration Service.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @param parameters Details of SqlMigrationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a SQL Migration Service.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SqlMigrationServiceInner>, SqlMigrationServiceInner> beginUpdate(
        String resourceGroupName, String sqlMigrationServiceName, SqlMigrationServiceUpdate parameters);

    /**
     * Update Database Migration Service.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @param parameters Details of SqlMigrationService resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a SQL Migration Service.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SqlMigrationServiceInner>, SqlMigrationServiceInner> beginUpdate(
        String resourceGroupName,
        String sqlMigrationServiceName,
        SqlMigrationServiceUpdate parameters,
        Context context);

    /**
     * Update Database Migration Service.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @param parameters Details of SqlMigrationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Migration Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlMigrationServiceInner update(
        String resourceGroupName, String sqlMigrationServiceName, SqlMigrationServiceUpdate parameters);

    /**
     * Update Database Migration Service.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @param parameters Details of SqlMigrationService resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SQL Migration Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SqlMigrationServiceInner update(
        String resourceGroupName,
        String sqlMigrationServiceName,
        SqlMigrationServiceUpdate parameters,
        Context context);

    /**
     * Retrieve all SQL migration services in the resource group.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SQL Migration Service as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SqlMigrationServiceInner> listByResourceGroup(String resourceGroupName);

    /**
     * Retrieve all SQL migration services in the resource group.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SQL Migration Service as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SqlMigrationServiceInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Retrieve the List of Authentication Keys for Self Hosted Integration Runtime.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an authentication key.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AuthenticationKeysInner listAuthKeys(String resourceGroupName, String sqlMigrationServiceName);

    /**
     * Retrieve the List of Authentication Keys for Self Hosted Integration Runtime.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an authentication key along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AuthenticationKeysInner> listAuthKeysWithResponse(
        String resourceGroupName, String sqlMigrationServiceName, Context context);

    /**
     * Regenerate a new set of Authentication Keys for Self Hosted Integration Runtime.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @param parameters Details of SqlMigrationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an authentication key to regenerate.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RegenAuthKeysInner regenerateAuthKeys(
        String resourceGroupName, String sqlMigrationServiceName, RegenAuthKeysInner parameters);

    /**
     * Regenerate a new set of Authentication Keys for Self Hosted Integration Runtime.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @param parameters Details of SqlMigrationService resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an authentication key to regenerate along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<RegenAuthKeysInner> regenerateAuthKeysWithResponse(
        String resourceGroupName, String sqlMigrationServiceName, RegenAuthKeysInner parameters, Context context);

    /**
     * Delete the integration runtime node.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @param parameters Details of SqlMigrationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of node to be deleted.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DeleteNodeInner deleteNode(String resourceGroupName, String sqlMigrationServiceName, DeleteNodeInner parameters);

    /**
     * Delete the integration runtime node.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @param parameters Details of SqlMigrationService resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of node to be deleted along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DeleteNodeInner> deleteNodeWithResponse(
        String resourceGroupName, String sqlMigrationServiceName, DeleteNodeInner parameters, Context context);

    /**
     * Retrieve the List of database migrations attached to the service.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Database Migrations as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DatabaseMigrationInner> listMigrations(String resourceGroupName, String sqlMigrationServiceName);

    /**
     * Retrieve the List of database migrations attached to the service.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Database Migrations as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DatabaseMigrationInner> listMigrations(
        String resourceGroupName, String sqlMigrationServiceName, Context context);

    /**
     * Retrieve the registered Integration Runtime nodes and their monitoring data for a given Database Migration
     * Service.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return integration Runtime Monitoring Data.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    IntegrationRuntimeMonitoringDataInner listMonitoringData(String resourceGroupName, String sqlMigrationServiceName);

    /**
     * Retrieve the registered Integration Runtime nodes and their monitoring data for a given Database Migration
     * Service.
     *
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     *     the Azure Resource Manager API or the portal.
     * @param sqlMigrationServiceName Name of the SQL Migration Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return integration Runtime Monitoring Data along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<IntegrationRuntimeMonitoringDataInner> listMonitoringDataWithResponse(
        String resourceGroupName, String sqlMigrationServiceName, Context context);

    /**
     * Retrieve all SQL migration services in the subscriptions.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SQL Migration Service as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SqlMigrationServiceInner> list();

    /**
     * Retrieve all SQL migration services in the subscriptions.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SQL Migration Service as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SqlMigrationServiceInner> list(Context context);
}
