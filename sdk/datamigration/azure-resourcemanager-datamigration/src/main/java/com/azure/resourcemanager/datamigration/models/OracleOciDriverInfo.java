// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Information about an Oracle OCI driver.
 */
@Immutable
public final class OracleOciDriverInfo implements JsonSerializable<OracleOciDriverInfo> {
    /*
     * The name of the driver package
     */
    private String driverName;

    /*
     * The size in bytes of the driver package
     */
    private String driverSize;

    /*
     * The MD5 Base64 encoded checksum for the driver package.
     */
    private String archiveChecksum;

    /*
     * The checksum for the driver package provided by Oracle.
     */
    private String oracleChecksum;

    /*
     * Version listed in the OCI assembly 'oci.dll'
     */
    private String assemblyVersion;

    /*
     * List of Oracle database versions supported by this driver. Only major minor of the version is listed.
     */
    private List<String> supportedOracleVersions;

    /**
     * Creates an instance of OracleOciDriverInfo class.
     */
    public OracleOciDriverInfo() {
    }

    /**
     * Get the driverName property: The name of the driver package.
     * 
     * @return the driverName value.
     */
    public String driverName() {
        return this.driverName;
    }

    /**
     * Get the driverSize property: The size in bytes of the driver package.
     * 
     * @return the driverSize value.
     */
    public String driverSize() {
        return this.driverSize;
    }

    /**
     * Get the archiveChecksum property: The MD5 Base64 encoded checksum for the driver package.
     * 
     * @return the archiveChecksum value.
     */
    public String archiveChecksum() {
        return this.archiveChecksum;
    }

    /**
     * Get the oracleChecksum property: The checksum for the driver package provided by Oracle.
     * 
     * @return the oracleChecksum value.
     */
    public String oracleChecksum() {
        return this.oracleChecksum;
    }

    /**
     * Get the assemblyVersion property: Version listed in the OCI assembly 'oci.dll'.
     * 
     * @return the assemblyVersion value.
     */
    public String assemblyVersion() {
        return this.assemblyVersion;
    }

    /**
     * Get the supportedOracleVersions property: List of Oracle database versions supported by this driver. Only major
     * minor of the version is listed.
     * 
     * @return the supportedOracleVersions value.
     */
    public List<String> supportedOracleVersions() {
        return this.supportedOracleVersions;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OracleOciDriverInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OracleOciDriverInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the OracleOciDriverInfo.
     */
    public static OracleOciDriverInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OracleOciDriverInfo deserializedOracleOciDriverInfo = new OracleOciDriverInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("driverName".equals(fieldName)) {
                    deserializedOracleOciDriverInfo.driverName = reader.getString();
                } else if ("driverSize".equals(fieldName)) {
                    deserializedOracleOciDriverInfo.driverSize = reader.getString();
                } else if ("archiveChecksum".equals(fieldName)) {
                    deserializedOracleOciDriverInfo.archiveChecksum = reader.getString();
                } else if ("oracleChecksum".equals(fieldName)) {
                    deserializedOracleOciDriverInfo.oracleChecksum = reader.getString();
                } else if ("assemblyVersion".equals(fieldName)) {
                    deserializedOracleOciDriverInfo.assemblyVersion = reader.getString();
                } else if ("supportedOracleVersions".equals(fieldName)) {
                    List<String> supportedOracleVersions = reader.readArray(reader1 -> reader1.getString());
                    deserializedOracleOciDriverInfo.supportedOracleVersions = supportedOracleVersions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOracleOciDriverInfo;
        });
    }
}
