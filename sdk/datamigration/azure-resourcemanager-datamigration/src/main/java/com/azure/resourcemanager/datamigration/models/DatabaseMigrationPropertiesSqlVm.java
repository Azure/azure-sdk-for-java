// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Database Migration Resource properties for SQL Virtual Machine.
 */
@Fluent
public final class DatabaseMigrationPropertiesSqlVm extends DatabaseMigrationProperties {
    /*
     * The kind property.
     */
    private ResourceType kind = ResourceType.SQL_VM;

    /*
     * Detailed migration status. Not included by default.
     */
    private MigrationStatusDetails migrationStatusDetails;

    /*
     * Backup configuration info.
     */
    private BackupConfiguration backupConfiguration;

    /*
     * Offline configuration.
     */
    private OfflineConfiguration offlineConfiguration;

    /**
     * Creates an instance of DatabaseMigrationPropertiesSqlVm class.
     */
    public DatabaseMigrationPropertiesSqlVm() {
    }

    /**
     * Get the kind property: The kind property.
     * 
     * @return the kind value.
     */
    @Override
    public ResourceType kind() {
        return this.kind;
    }

    /**
     * Get the migrationStatusDetails property: Detailed migration status. Not included by default.
     * 
     * @return the migrationStatusDetails value.
     */
    public MigrationStatusDetails migrationStatusDetails() {
        return this.migrationStatusDetails;
    }

    /**
     * Get the backupConfiguration property: Backup configuration info.
     * 
     * @return the backupConfiguration value.
     */
    public BackupConfiguration backupConfiguration() {
        return this.backupConfiguration;
    }

    /**
     * Set the backupConfiguration property: Backup configuration info.
     * 
     * @param backupConfiguration the backupConfiguration value to set.
     * @return the DatabaseMigrationPropertiesSqlVm object itself.
     */
    public DatabaseMigrationPropertiesSqlVm withBackupConfiguration(BackupConfiguration backupConfiguration) {
        this.backupConfiguration = backupConfiguration;
        return this;
    }

    /**
     * Get the offlineConfiguration property: Offline configuration.
     * 
     * @return the offlineConfiguration value.
     */
    public OfflineConfiguration offlineConfiguration() {
        return this.offlineConfiguration;
    }

    /**
     * Set the offlineConfiguration property: Offline configuration.
     * 
     * @param offlineConfiguration the offlineConfiguration value to set.
     * @return the DatabaseMigrationPropertiesSqlVm object itself.
     */
    public DatabaseMigrationPropertiesSqlVm withOfflineConfiguration(OfflineConfiguration offlineConfiguration) {
        this.offlineConfiguration = offlineConfiguration;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlVm withSourceSqlConnection(SqlConnectionInformation sourceSqlConnection) {
        super.withSourceSqlConnection(sourceSqlConnection);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlVm withSourceDatabaseName(String sourceDatabaseName) {
        super.withSourceDatabaseName(sourceDatabaseName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlVm withTargetDatabaseCollation(String targetDatabaseCollation) {
        super.withTargetDatabaseCollation(targetDatabaseCollation);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlVm withScope(String scope) {
        super.withScope(scope);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlVm withMigrationService(String migrationService) {
        super.withMigrationService(migrationService);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlVm withMigrationOperationId(String migrationOperationId) {
        super.withMigrationOperationId(migrationOperationId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatabaseMigrationPropertiesSqlVm withProvisioningError(String provisioningError) {
        super.withProvisioningError(provisioningError);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (migrationStatusDetails() != null) {
            migrationStatusDetails().validate();
        }
        if (backupConfiguration() != null) {
            backupConfiguration().validate();
        }
        if (offlineConfiguration() != null) {
            offlineConfiguration().validate();
        }
        if (migrationFailureError() != null) {
            migrationFailureError().validate();
        }
        if (sourceSqlConnection() != null) {
            sourceSqlConnection().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scope", scope());
        jsonWriter.writeStringField("migrationService", migrationService());
        jsonWriter.writeStringField("migrationOperationId", migrationOperationId());
        jsonWriter.writeStringField("provisioningError", provisioningError());
        jsonWriter.writeJsonField("sourceSqlConnection", sourceSqlConnection());
        jsonWriter.writeStringField("sourceDatabaseName", sourceDatabaseName());
        jsonWriter.writeStringField("targetDatabaseCollation", targetDatabaseCollation());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeJsonField("backupConfiguration", this.backupConfiguration);
        jsonWriter.writeJsonField("offlineConfiguration", this.offlineConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabaseMigrationPropertiesSqlVm from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabaseMigrationPropertiesSqlVm if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatabaseMigrationPropertiesSqlVm.
     */
    public static DatabaseMigrationPropertiesSqlVm fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabaseMigrationPropertiesSqlVm deserializedDatabaseMigrationPropertiesSqlVm
                = new DatabaseMigrationPropertiesSqlVm();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scope".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlVm.withScope(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlVm
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("migrationStatus".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlVm.withMigrationStatus(reader.getString());
                } else if ("startedOn".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlVm.withStartedOn(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("endedOn".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlVm.withEndedOn(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("migrationService".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlVm.withMigrationService(reader.getString());
                } else if ("migrationOperationId".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlVm.withMigrationOperationId(reader.getString());
                } else if ("migrationFailureError".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlVm.withMigrationFailureError(ErrorInfo.fromJson(reader));
                } else if ("provisioningError".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlVm.withProvisioningError(reader.getString());
                } else if ("sourceSqlConnection".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlVm
                        .withSourceSqlConnection(SqlConnectionInformation.fromJson(reader));
                } else if ("sourceDatabaseName".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlVm.withSourceDatabaseName(reader.getString());
                } else if ("sourceServerName".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlVm.withSourceServerName(reader.getString());
                } else if ("targetDatabaseCollation".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlVm.withTargetDatabaseCollation(reader.getString());
                } else if ("kind".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlVm.kind = ResourceType.fromString(reader.getString());
                } else if ("migrationStatusDetails".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlVm.migrationStatusDetails
                        = MigrationStatusDetails.fromJson(reader);
                } else if ("backupConfiguration".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlVm.backupConfiguration
                        = BackupConfiguration.fromJson(reader);
                } else if ("offlineConfiguration".equals(fieldName)) {
                    deserializedDatabaseMigrationPropertiesSqlVm.offlineConfiguration
                        = OfflineConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabaseMigrationPropertiesSqlVm;
        });
    }
}
