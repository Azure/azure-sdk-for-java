// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Input for the task that collects user tables for the given list of databases.
 */
@Fluent
public final class GetUserTablesSqlSyncTaskInput implements JsonSerializable<GetUserTablesSqlSyncTaskInput> {
    /*
     * Connection information for SQL Server
     */
    private SqlConnectionInfo sourceConnectionInfo;

    /*
     * Connection information for SQL DB
     */
    private SqlConnectionInfo targetConnectionInfo;

    /*
     * List of source database names to collect tables for
     */
    private List<String> selectedSourceDatabases;

    /*
     * List of target database names to collect tables for
     */
    private List<String> selectedTargetDatabases;

    /**
     * Creates an instance of GetUserTablesSqlSyncTaskInput class.
     */
    public GetUserTablesSqlSyncTaskInput() {
    }

    /**
     * Get the sourceConnectionInfo property: Connection information for SQL Server.
     * 
     * @return the sourceConnectionInfo value.
     */
    public SqlConnectionInfo sourceConnectionInfo() {
        return this.sourceConnectionInfo;
    }

    /**
     * Set the sourceConnectionInfo property: Connection information for SQL Server.
     * 
     * @param sourceConnectionInfo the sourceConnectionInfo value to set.
     * @return the GetUserTablesSqlSyncTaskInput object itself.
     */
    public GetUserTablesSqlSyncTaskInput withSourceConnectionInfo(SqlConnectionInfo sourceConnectionInfo) {
        this.sourceConnectionInfo = sourceConnectionInfo;
        return this;
    }

    /**
     * Get the targetConnectionInfo property: Connection information for SQL DB.
     * 
     * @return the targetConnectionInfo value.
     */
    public SqlConnectionInfo targetConnectionInfo() {
        return this.targetConnectionInfo;
    }

    /**
     * Set the targetConnectionInfo property: Connection information for SQL DB.
     * 
     * @param targetConnectionInfo the targetConnectionInfo value to set.
     * @return the GetUserTablesSqlSyncTaskInput object itself.
     */
    public GetUserTablesSqlSyncTaskInput withTargetConnectionInfo(SqlConnectionInfo targetConnectionInfo) {
        this.targetConnectionInfo = targetConnectionInfo;
        return this;
    }

    /**
     * Get the selectedSourceDatabases property: List of source database names to collect tables for.
     * 
     * @return the selectedSourceDatabases value.
     */
    public List<String> selectedSourceDatabases() {
        return this.selectedSourceDatabases;
    }

    /**
     * Set the selectedSourceDatabases property: List of source database names to collect tables for.
     * 
     * @param selectedSourceDatabases the selectedSourceDatabases value to set.
     * @return the GetUserTablesSqlSyncTaskInput object itself.
     */
    public GetUserTablesSqlSyncTaskInput withSelectedSourceDatabases(List<String> selectedSourceDatabases) {
        this.selectedSourceDatabases = selectedSourceDatabases;
        return this;
    }

    /**
     * Get the selectedTargetDatabases property: List of target database names to collect tables for.
     * 
     * @return the selectedTargetDatabases value.
     */
    public List<String> selectedTargetDatabases() {
        return this.selectedTargetDatabases;
    }

    /**
     * Set the selectedTargetDatabases property: List of target database names to collect tables for.
     * 
     * @param selectedTargetDatabases the selectedTargetDatabases value to set.
     * @return the GetUserTablesSqlSyncTaskInput object itself.
     */
    public GetUserTablesSqlSyncTaskInput withSelectedTargetDatabases(List<String> selectedTargetDatabases) {
        this.selectedTargetDatabases = selectedTargetDatabases;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceConnectionInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceConnectionInfo in model GetUserTablesSqlSyncTaskInput"));
        } else {
            sourceConnectionInfo().validate();
        }
        if (targetConnectionInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetConnectionInfo in model GetUserTablesSqlSyncTaskInput"));
        } else {
            targetConnectionInfo().validate();
        }
        if (selectedSourceDatabases() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property selectedSourceDatabases in model GetUserTablesSqlSyncTaskInput"));
        }
        if (selectedTargetDatabases() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property selectedTargetDatabases in model GetUserTablesSqlSyncTaskInput"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GetUserTablesSqlSyncTaskInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("sourceConnectionInfo", this.sourceConnectionInfo);
        jsonWriter.writeJsonField("targetConnectionInfo", this.targetConnectionInfo);
        jsonWriter.writeArrayField("selectedSourceDatabases", this.selectedSourceDatabases,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("selectedTargetDatabases", this.selectedTargetDatabases,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetUserTablesSqlSyncTaskInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetUserTablesSqlSyncTaskInput if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GetUserTablesSqlSyncTaskInput.
     */
    public static GetUserTablesSqlSyncTaskInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GetUserTablesSqlSyncTaskInput deserializedGetUserTablesSqlSyncTaskInput
                = new GetUserTablesSqlSyncTaskInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceConnectionInfo".equals(fieldName)) {
                    deserializedGetUserTablesSqlSyncTaskInput.sourceConnectionInfo = SqlConnectionInfo.fromJson(reader);
                } else if ("targetConnectionInfo".equals(fieldName)) {
                    deserializedGetUserTablesSqlSyncTaskInput.targetConnectionInfo = SqlConnectionInfo.fromJson(reader);
                } else if ("selectedSourceDatabases".equals(fieldName)) {
                    List<String> selectedSourceDatabases = reader.readArray(reader1 -> reader1.getString());
                    deserializedGetUserTablesSqlSyncTaskInput.selectedSourceDatabases = selectedSourceDatabases;
                } else if ("selectedTargetDatabases".equals(fieldName)) {
                    List<String> selectedTargetDatabases = reader.readArray(reader1 -> reader1.getString());
                    deserializedGetUserTablesSqlSyncTaskInput.selectedTargetDatabases = selectedTargetDatabases;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGetUserTablesSqlSyncTaskInput;
        });
    }
}
