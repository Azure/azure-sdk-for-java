// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * SSIS migration info with SSIS store type, overwrite policy.
 */
@Fluent
public final class SsisMigrationInfo implements JsonSerializable<SsisMigrationInfo> {
    /*
     * The SSIS store type of source, only SSIS catalog is supported now in DMS (classic)
     */
    private SsisStoreType ssisStoreType;

    /*
     * The overwrite option for the SSIS project migration
     */
    private SsisMigrationOverwriteOption projectOverwriteOption;

    /*
     * The overwrite option for the SSIS environment migration
     */
    private SsisMigrationOverwriteOption environmentOverwriteOption;

    /**
     * Creates an instance of SsisMigrationInfo class.
     */
    public SsisMigrationInfo() {
    }

    /**
     * Get the ssisStoreType property: The SSIS store type of source, only SSIS catalog is supported now in DMS
     * (classic).
     * 
     * @return the ssisStoreType value.
     */
    public SsisStoreType ssisStoreType() {
        return this.ssisStoreType;
    }

    /**
     * Set the ssisStoreType property: The SSIS store type of source, only SSIS catalog is supported now in DMS
     * (classic).
     * 
     * @param ssisStoreType the ssisStoreType value to set.
     * @return the SsisMigrationInfo object itself.
     */
    public SsisMigrationInfo withSsisStoreType(SsisStoreType ssisStoreType) {
        this.ssisStoreType = ssisStoreType;
        return this;
    }

    /**
     * Get the projectOverwriteOption property: The overwrite option for the SSIS project migration.
     * 
     * @return the projectOverwriteOption value.
     */
    public SsisMigrationOverwriteOption projectOverwriteOption() {
        return this.projectOverwriteOption;
    }

    /**
     * Set the projectOverwriteOption property: The overwrite option for the SSIS project migration.
     * 
     * @param projectOverwriteOption the projectOverwriteOption value to set.
     * @return the SsisMigrationInfo object itself.
     */
    public SsisMigrationInfo withProjectOverwriteOption(SsisMigrationOverwriteOption projectOverwriteOption) {
        this.projectOverwriteOption = projectOverwriteOption;
        return this;
    }

    /**
     * Get the environmentOverwriteOption property: The overwrite option for the SSIS environment migration.
     * 
     * @return the environmentOverwriteOption value.
     */
    public SsisMigrationOverwriteOption environmentOverwriteOption() {
        return this.environmentOverwriteOption;
    }

    /**
     * Set the environmentOverwriteOption property: The overwrite option for the SSIS environment migration.
     * 
     * @param environmentOverwriteOption the environmentOverwriteOption value to set.
     * @return the SsisMigrationInfo object itself.
     */
    public SsisMigrationInfo withEnvironmentOverwriteOption(SsisMigrationOverwriteOption environmentOverwriteOption) {
        this.environmentOverwriteOption = environmentOverwriteOption;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ssisStoreType", this.ssisStoreType == null ? null : this.ssisStoreType.toString());
        jsonWriter.writeStringField("projectOverwriteOption",
            this.projectOverwriteOption == null ? null : this.projectOverwriteOption.toString());
        jsonWriter.writeStringField("environmentOverwriteOption",
            this.environmentOverwriteOption == null ? null : this.environmentOverwriteOption.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SsisMigrationInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SsisMigrationInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SsisMigrationInfo.
     */
    public static SsisMigrationInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SsisMigrationInfo deserializedSsisMigrationInfo = new SsisMigrationInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ssisStoreType".equals(fieldName)) {
                    deserializedSsisMigrationInfo.ssisStoreType = SsisStoreType.fromString(reader.getString());
                } else if ("projectOverwriteOption".equals(fieldName)) {
                    deserializedSsisMigrationInfo.projectOverwriteOption
                        = SsisMigrationOverwriteOption.fromString(reader.getString());
                } else if ("environmentOverwriteOption".equals(fieldName)) {
                    deserializedSsisMigrationInfo.environmentOverwriteOption
                        = SsisMigrationOverwriteOption.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSsisMigrationInfo;
        });
    }
}
