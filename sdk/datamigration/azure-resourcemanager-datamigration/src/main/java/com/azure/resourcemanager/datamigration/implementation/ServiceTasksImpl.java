// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.datamigration.fluent.ServiceTasksClient;
import com.azure.resourcemanager.datamigration.fluent.models.ProjectTaskInner;
import com.azure.resourcemanager.datamigration.models.ProjectTask;
import com.azure.resourcemanager.datamigration.models.ServiceTasks;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ServiceTasksImpl implements ServiceTasks {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServiceTasksImpl.class);

    private final ServiceTasksClient innerClient;

    private final com.azure.resourcemanager.datamigration.DataMigrationManager serviceManager;

    public ServiceTasksImpl(
        ServiceTasksClient innerClient, com.azure.resourcemanager.datamigration.DataMigrationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ProjectTask> list(String groupName, String serviceName) {
        PagedIterable<ProjectTaskInner> inner = this.serviceClient().list(groupName, serviceName);
        return Utils.mapPage(inner, inner1 -> new ProjectTaskImpl(inner1, this.manager()));
    }

    public PagedIterable<ProjectTask> list(String groupName, String serviceName, String taskType, Context context) {
        PagedIterable<ProjectTaskInner> inner = this.serviceClient().list(groupName, serviceName, taskType, context);
        return Utils.mapPage(inner, inner1 -> new ProjectTaskImpl(inner1, this.manager()));
    }

    public ProjectTask createOrUpdate(
        String groupName, String serviceName, String taskName, ProjectTaskInner parameters) {
        ProjectTaskInner inner = this.serviceClient().createOrUpdate(groupName, serviceName, taskName, parameters);
        if (inner != null) {
            return new ProjectTaskImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ProjectTask> createOrUpdateWithResponse(
        String groupName, String serviceName, String taskName, ProjectTaskInner parameters, Context context) {
        Response<ProjectTaskInner> inner =
            this.serviceClient().createOrUpdateWithResponse(groupName, serviceName, taskName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ProjectTaskImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ProjectTask get(String groupName, String serviceName, String taskName) {
        ProjectTaskInner inner = this.serviceClient().get(groupName, serviceName, taskName);
        if (inner != null) {
            return new ProjectTaskImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ProjectTask> getWithResponse(
        String groupName, String serviceName, String taskName, String expand, Context context) {
        Response<ProjectTaskInner> inner =
            this.serviceClient().getWithResponse(groupName, serviceName, taskName, expand, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ProjectTaskImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String groupName, String serviceName, String taskName) {
        this.serviceClient().delete(groupName, serviceName, taskName);
    }

    public Response<Void> deleteWithResponse(
        String groupName, String serviceName, String taskName, Boolean deleteRunningTasks, Context context) {
        return this.serviceClient().deleteWithResponse(groupName, serviceName, taskName, deleteRunningTasks, context);
    }

    public ProjectTask update(String groupName, String serviceName, String taskName, ProjectTaskInner parameters) {
        ProjectTaskInner inner = this.serviceClient().update(groupName, serviceName, taskName, parameters);
        if (inner != null) {
            return new ProjectTaskImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ProjectTask> updateWithResponse(
        String groupName, String serviceName, String taskName, ProjectTaskInner parameters, Context context) {
        Response<ProjectTaskInner> inner =
            this.serviceClient().updateWithResponse(groupName, serviceName, taskName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ProjectTaskImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ProjectTask cancel(String groupName, String serviceName, String taskName) {
        ProjectTaskInner inner = this.serviceClient().cancel(groupName, serviceName, taskName);
        if (inner != null) {
            return new ProjectTaskImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ProjectTask> cancelWithResponse(
        String groupName, String serviceName, String taskName, Context context) {
        Response<ProjectTaskInner> inner =
            this.serviceClient().cancelWithResponse(groupName, serviceName, taskName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ProjectTaskImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private ServiceTasksClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.datamigration.DataMigrationManager manager() {
        return this.serviceManager;
    }
}
