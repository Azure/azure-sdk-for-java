// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;
import java.util.Map;

/** Describes the progress of a database. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "resultType")
@JsonTypeName("Database")
@Fluent
public final class MongoDbDatabaseProgress extends MongoDbProgress {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MongoDbDatabaseProgress.class);

    /*
     * The progress of the collections in the database. The keys are the
     * unqualified names of the collections
     */
    @JsonProperty(value = "collections")
    private Map<String, MongoDbCollectionProgress> collections;

    /**
     * Get the collections property: The progress of the collections in the database. The keys are the unqualified names
     * of the collections.
     *
     * @return the collections value.
     */
    public Map<String, MongoDbCollectionProgress> collections() {
        return this.collections;
    }

    /**
     * Set the collections property: The progress of the collections in the database. The keys are the unqualified names
     * of the collections.
     *
     * @param collections the collections value to set.
     * @return the MongoDbDatabaseProgress object itself.
     */
    public MongoDbDatabaseProgress withCollections(Map<String, MongoDbCollectionProgress> collections) {
        this.collections = collections;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbDatabaseProgress withBytesCopied(long bytesCopied) {
        super.withBytesCopied(bytesCopied);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbDatabaseProgress withDocumentsCopied(long documentsCopied) {
        super.withDocumentsCopied(documentsCopied);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbDatabaseProgress withElapsedTime(String elapsedTime) {
        super.withElapsedTime(elapsedTime);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbDatabaseProgress withErrors(Map<String, MongoDbError> errors) {
        super.withErrors(errors);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbDatabaseProgress withEventsPending(long eventsPending) {
        super.withEventsPending(eventsPending);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbDatabaseProgress withEventsReplayed(long eventsReplayed) {
        super.withEventsReplayed(eventsReplayed);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbDatabaseProgress withLastEventTime(OffsetDateTime lastEventTime) {
        super.withLastEventTime(lastEventTime);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbDatabaseProgress withLastReplayTime(OffsetDateTime lastReplayTime) {
        super.withLastReplayTime(lastReplayTime);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbDatabaseProgress withName(String name) {
        super.withName(name);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbDatabaseProgress withQualifiedName(String qualifiedName) {
        super.withQualifiedName(qualifiedName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbDatabaseProgress withState(MongoDbMigrationState state) {
        super.withState(state);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbDatabaseProgress withTotalBytes(long totalBytes) {
        super.withTotalBytes(totalBytes);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbDatabaseProgress withTotalDocuments(long totalDocuments) {
        super.withTotalDocuments(totalDocuments);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (collections() != null) {
            collections()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
    }
}
