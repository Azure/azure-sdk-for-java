// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

/**
 * Describes the progress of a database.
 */
@Fluent
public final class MongoDbDatabaseProgress extends MongoDbProgress {
    /*
     * The type of progress object
     */
    private MongoDbProgressResultType resultType = MongoDbProgressResultType.DATABASE;

    /*
     * The progress of the collections in the database. The keys are the unqualified names of the collections
     */
    private Map<String, MongoDbCollectionProgress> collections;

    /**
     * Creates an instance of MongoDbDatabaseProgress class.
     */
    public MongoDbDatabaseProgress() {
    }

    /**
     * Get the resultType property: The type of progress object.
     * 
     * @return the resultType value.
     */
    @Override
    public MongoDbProgressResultType resultType() {
        return this.resultType;
    }

    /**
     * Get the collections property: The progress of the collections in the database. The keys are the unqualified names
     * of the collections.
     * 
     * @return the collections value.
     */
    public Map<String, MongoDbCollectionProgress> collections() {
        return this.collections;
    }

    /**
     * Set the collections property: The progress of the collections in the database. The keys are the unqualified names
     * of the collections.
     * 
     * @param collections the collections value to set.
     * @return the MongoDbDatabaseProgress object itself.
     */
    public MongoDbDatabaseProgress withCollections(Map<String, MongoDbCollectionProgress> collections) {
        this.collections = collections;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbDatabaseProgress withBytesCopied(long bytesCopied) {
        super.withBytesCopied(bytesCopied);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbDatabaseProgress withDocumentsCopied(long documentsCopied) {
        super.withDocumentsCopied(documentsCopied);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbDatabaseProgress withElapsedTime(String elapsedTime) {
        super.withElapsedTime(elapsedTime);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbDatabaseProgress withErrors(Map<String, MongoDbError> errors) {
        super.withErrors(errors);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbDatabaseProgress withEventsPending(long eventsPending) {
        super.withEventsPending(eventsPending);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbDatabaseProgress withEventsReplayed(long eventsReplayed) {
        super.withEventsReplayed(eventsReplayed);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbDatabaseProgress withLastEventTime(OffsetDateTime lastEventTime) {
        super.withLastEventTime(lastEventTime);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbDatabaseProgress withLastReplayTime(OffsetDateTime lastReplayTime) {
        super.withLastReplayTime(lastReplayTime);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbDatabaseProgress withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbDatabaseProgress withQualifiedName(String qualifiedName) {
        super.withQualifiedName(qualifiedName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbDatabaseProgress withState(MongoDbMigrationState state) {
        super.withState(state);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbDatabaseProgress withTotalBytes(long totalBytes) {
        super.withTotalBytes(totalBytes);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbDatabaseProgress withTotalDocuments(long totalDocuments) {
        super.withTotalDocuments(totalDocuments);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (collections() != null) {
            collections().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (elapsedTime() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property elapsedTime in model MongoDbDatabaseProgress"));
        }
        if (errors() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property errors in model MongoDbDatabaseProgress"));
        } else {
            errors().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (state() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property state in model MongoDbDatabaseProgress"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MongoDbDatabaseProgress.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("bytesCopied", bytesCopied());
        jsonWriter.writeLongField("documentsCopied", documentsCopied());
        jsonWriter.writeStringField("elapsedTime", elapsedTime());
        jsonWriter.writeMapField("errors", errors(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeLongField("eventsPending", eventsPending());
        jsonWriter.writeLongField("eventsReplayed", eventsReplayed());
        jsonWriter.writeStringField("state", state() == null ? null : state().toString());
        jsonWriter.writeLongField("totalBytes", totalBytes());
        jsonWriter.writeLongField("totalDocuments", totalDocuments());
        jsonWriter.writeStringField("lastEventTime",
            lastEventTime() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(lastEventTime()));
        jsonWriter.writeStringField("lastReplayTime",
            lastReplayTime() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(lastReplayTime()));
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeStringField("qualifiedName", qualifiedName());
        jsonWriter.writeStringField("resultType", this.resultType == null ? null : this.resultType.toString());
        jsonWriter.writeMapField("collections", this.collections, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoDbDatabaseProgress from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoDbDatabaseProgress if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MongoDbDatabaseProgress.
     */
    public static MongoDbDatabaseProgress fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoDbDatabaseProgress deserializedMongoDbDatabaseProgress = new MongoDbDatabaseProgress();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bytesCopied".equals(fieldName)) {
                    deserializedMongoDbDatabaseProgress.withBytesCopied(reader.getLong());
                } else if ("documentsCopied".equals(fieldName)) {
                    deserializedMongoDbDatabaseProgress.withDocumentsCopied(reader.getLong());
                } else if ("elapsedTime".equals(fieldName)) {
                    deserializedMongoDbDatabaseProgress.withElapsedTime(reader.getString());
                } else if ("errors".equals(fieldName)) {
                    Map<String, MongoDbError> errors = reader.readMap(reader1 -> MongoDbError.fromJson(reader1));
                    deserializedMongoDbDatabaseProgress.withErrors(errors);
                } else if ("eventsPending".equals(fieldName)) {
                    deserializedMongoDbDatabaseProgress.withEventsPending(reader.getLong());
                } else if ("eventsReplayed".equals(fieldName)) {
                    deserializedMongoDbDatabaseProgress.withEventsReplayed(reader.getLong());
                } else if ("state".equals(fieldName)) {
                    deserializedMongoDbDatabaseProgress.withState(MongoDbMigrationState.fromString(reader.getString()));
                } else if ("totalBytes".equals(fieldName)) {
                    deserializedMongoDbDatabaseProgress.withTotalBytes(reader.getLong());
                } else if ("totalDocuments".equals(fieldName)) {
                    deserializedMongoDbDatabaseProgress.withTotalDocuments(reader.getLong());
                } else if ("lastEventTime".equals(fieldName)) {
                    deserializedMongoDbDatabaseProgress.withLastEventTime(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("lastReplayTime".equals(fieldName)) {
                    deserializedMongoDbDatabaseProgress.withLastReplayTime(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("name".equals(fieldName)) {
                    deserializedMongoDbDatabaseProgress.withName(reader.getString());
                } else if ("qualifiedName".equals(fieldName)) {
                    deserializedMongoDbDatabaseProgress.withQualifiedName(reader.getString());
                } else if ("resultType".equals(fieldName)) {
                    deserializedMongoDbDatabaseProgress.resultType
                        = MongoDbProgressResultType.fromString(reader.getString());
                } else if ("collections".equals(fieldName)) {
                    Map<String, MongoDbCollectionProgress> collections
                        = reader.readMap(reader1 -> MongoDbCollectionProgress.fromJson(reader1));
                    deserializedMongoDbDatabaseProgress.collections = collections;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoDbDatabaseProgress;
        });
    }
}
