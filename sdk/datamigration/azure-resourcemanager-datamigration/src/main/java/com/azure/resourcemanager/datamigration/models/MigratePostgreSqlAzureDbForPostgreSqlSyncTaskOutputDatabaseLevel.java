// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel model.
 */
@Immutable
public final class MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel
    extends MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput {
    /*
     * Result type
     */
    private String resultType = "DatabaseLevelOutput";

    /*
     * Name of the database
     */
    private String databaseName;

    /*
     * Migration start time
     */
    private OffsetDateTime startedOn;

    /*
     * Migration end time
     */
    private OffsetDateTime endedOn;

    /*
     * Migration state that this database is in
     */
    private SyncDatabaseMigrationReportingState migrationState;

    /*
     * Number of incoming changes
     */
    private Long incomingChanges;

    /*
     * Number of applied changes
     */
    private Long appliedChanges;

    /*
     * Number of cdc inserts
     */
    private Long cdcInsertCounter;

    /*
     * Number of cdc deletes
     */
    private Long cdcDeleteCounter;

    /*
     * Number of cdc updates
     */
    private Long cdcUpdateCounter;

    /*
     * Number of tables completed in full load
     */
    private Long fullLoadCompletedTables;

    /*
     * Number of tables loading in full load
     */
    private Long fullLoadLoadingTables;

    /*
     * Number of tables queued in full load
     */
    private Long fullLoadQueuedTables;

    /*
     * Number of tables errored in full load
     */
    private Long fullLoadErroredTables;

    /*
     * Indicates if initial load (full load) has been completed
     */
    private Boolean initializationCompleted;

    /*
     * CDC apply latency
     */
    private Long latency;

    /*
     * Result identifier
     */
    private String id;

    /**
     * Creates an instance of MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel class.
     */
    public MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel() {
    }

    /**
     * Get the resultType property: Result type.
     * 
     * @return the resultType value.
     */
    @Override
    public String resultType() {
        return this.resultType;
    }

    /**
     * Get the databaseName property: Name of the database.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Get the startedOn property: Migration start time.
     * 
     * @return the startedOn value.
     */
    public OffsetDateTime startedOn() {
        return this.startedOn;
    }

    /**
     * Get the endedOn property: Migration end time.
     * 
     * @return the endedOn value.
     */
    public OffsetDateTime endedOn() {
        return this.endedOn;
    }

    /**
     * Get the migrationState property: Migration state that this database is in.
     * 
     * @return the migrationState value.
     */
    public SyncDatabaseMigrationReportingState migrationState() {
        return this.migrationState;
    }

    /**
     * Get the incomingChanges property: Number of incoming changes.
     * 
     * @return the incomingChanges value.
     */
    public Long incomingChanges() {
        return this.incomingChanges;
    }

    /**
     * Get the appliedChanges property: Number of applied changes.
     * 
     * @return the appliedChanges value.
     */
    public Long appliedChanges() {
        return this.appliedChanges;
    }

    /**
     * Get the cdcInsertCounter property: Number of cdc inserts.
     * 
     * @return the cdcInsertCounter value.
     */
    public Long cdcInsertCounter() {
        return this.cdcInsertCounter;
    }

    /**
     * Get the cdcDeleteCounter property: Number of cdc deletes.
     * 
     * @return the cdcDeleteCounter value.
     */
    public Long cdcDeleteCounter() {
        return this.cdcDeleteCounter;
    }

    /**
     * Get the cdcUpdateCounter property: Number of cdc updates.
     * 
     * @return the cdcUpdateCounter value.
     */
    public Long cdcUpdateCounter() {
        return this.cdcUpdateCounter;
    }

    /**
     * Get the fullLoadCompletedTables property: Number of tables completed in full load.
     * 
     * @return the fullLoadCompletedTables value.
     */
    public Long fullLoadCompletedTables() {
        return this.fullLoadCompletedTables;
    }

    /**
     * Get the fullLoadLoadingTables property: Number of tables loading in full load.
     * 
     * @return the fullLoadLoadingTables value.
     */
    public Long fullLoadLoadingTables() {
        return this.fullLoadLoadingTables;
    }

    /**
     * Get the fullLoadQueuedTables property: Number of tables queued in full load.
     * 
     * @return the fullLoadQueuedTables value.
     */
    public Long fullLoadQueuedTables() {
        return this.fullLoadQueuedTables;
    }

    /**
     * Get the fullLoadErroredTables property: Number of tables errored in full load.
     * 
     * @return the fullLoadErroredTables value.
     */
    public Long fullLoadErroredTables() {
        return this.fullLoadErroredTables;
    }

    /**
     * Get the initializationCompleted property: Indicates if initial load (full load) has been completed.
     * 
     * @return the initializationCompleted value.
     */
    public Boolean initializationCompleted() {
        return this.initializationCompleted;
    }

    /**
     * Get the latency property: CDC apply latency.
     * 
     * @return the latency value.
     */
    public Long latency() {
        return this.latency;
    }

    /**
     * Get the id property: Result identifier.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resultType", this.resultType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel if the JsonReader was
     * pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel.
     */
    public static MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel deserializedMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel
                = new MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel.id
                        = reader.getString();
                } else if ("resultType".equals(fieldName)) {
                    deserializedMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel.resultType
                        = reader.getString();
                } else if ("databaseName".equals(fieldName)) {
                    deserializedMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel.databaseName
                        = reader.getString();
                } else if ("startedOn".equals(fieldName)) {
                    deserializedMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel.startedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endedOn".equals(fieldName)) {
                    deserializedMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel.endedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("migrationState".equals(fieldName)) {
                    deserializedMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel.migrationState
                        = SyncDatabaseMigrationReportingState.fromString(reader.getString());
                } else if ("incomingChanges".equals(fieldName)) {
                    deserializedMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel.incomingChanges
                        = reader.getNullable(JsonReader::getLong);
                } else if ("appliedChanges".equals(fieldName)) {
                    deserializedMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel.appliedChanges
                        = reader.getNullable(JsonReader::getLong);
                } else if ("cdcInsertCounter".equals(fieldName)) {
                    deserializedMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel.cdcInsertCounter
                        = reader.getNullable(JsonReader::getLong);
                } else if ("cdcDeleteCounter".equals(fieldName)) {
                    deserializedMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel.cdcDeleteCounter
                        = reader.getNullable(JsonReader::getLong);
                } else if ("cdcUpdateCounter".equals(fieldName)) {
                    deserializedMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel.cdcUpdateCounter
                        = reader.getNullable(JsonReader::getLong);
                } else if ("fullLoadCompletedTables".equals(fieldName)) {
                    deserializedMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel.fullLoadCompletedTables
                        = reader.getNullable(JsonReader::getLong);
                } else if ("fullLoadLoadingTables".equals(fieldName)) {
                    deserializedMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel.fullLoadLoadingTables
                        = reader.getNullable(JsonReader::getLong);
                } else if ("fullLoadQueuedTables".equals(fieldName)) {
                    deserializedMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel.fullLoadQueuedTables
                        = reader.getNullable(JsonReader::getLong);
                } else if ("fullLoadErroredTables".equals(fieldName)) {
                    deserializedMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel.fullLoadErroredTables
                        = reader.getNullable(JsonReader::getLong);
                } else if ("initializationCompleted".equals(fieldName)) {
                    deserializedMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel.initializationCompleted
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("latency".equals(fieldName)) {
                    deserializedMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel.latency
                        = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel;
        });
    }
}
