// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs.
 */
@Fluent
public final class MigrateSqlServerSqlMIDatabaseInput implements JsonSerializable<MigrateSqlServerSqlMIDatabaseInput> {
    /*
     * Name of the database
     */
    private String name;

    /*
     * Name of the database at destination
     */
    private String restoreDatabaseName;

    /*
     * Backup file share information for backing up this database.
     */
    private FileShare backupFileShare;

    /*
     * The list of backup files to be used in case of existing backups.
     */
    private List<String> backupFilePaths;

    /**
     * Creates an instance of MigrateSqlServerSqlMIDatabaseInput class.
     */
    public MigrateSqlServerSqlMIDatabaseInput() {
    }

    /**
     * Get the name property: Name of the database.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the database.
     * 
     * @param name the name value to set.
     * @return the MigrateSqlServerSqlMIDatabaseInput object itself.
     */
    public MigrateSqlServerSqlMIDatabaseInput withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the restoreDatabaseName property: Name of the database at destination.
     * 
     * @return the restoreDatabaseName value.
     */
    public String restoreDatabaseName() {
        return this.restoreDatabaseName;
    }

    /**
     * Set the restoreDatabaseName property: Name of the database at destination.
     * 
     * @param restoreDatabaseName the restoreDatabaseName value to set.
     * @return the MigrateSqlServerSqlMIDatabaseInput object itself.
     */
    public MigrateSqlServerSqlMIDatabaseInput withRestoreDatabaseName(String restoreDatabaseName) {
        this.restoreDatabaseName = restoreDatabaseName;
        return this;
    }

    /**
     * Get the backupFileShare property: Backup file share information for backing up this database.
     * 
     * @return the backupFileShare value.
     */
    public FileShare backupFileShare() {
        return this.backupFileShare;
    }

    /**
     * Set the backupFileShare property: Backup file share information for backing up this database.
     * 
     * @param backupFileShare the backupFileShare value to set.
     * @return the MigrateSqlServerSqlMIDatabaseInput object itself.
     */
    public MigrateSqlServerSqlMIDatabaseInput withBackupFileShare(FileShare backupFileShare) {
        this.backupFileShare = backupFileShare;
        return this;
    }

    /**
     * Get the backupFilePaths property: The list of backup files to be used in case of existing backups.
     * 
     * @return the backupFilePaths value.
     */
    public List<String> backupFilePaths() {
        return this.backupFilePaths;
    }

    /**
     * Set the backupFilePaths property: The list of backup files to be used in case of existing backups.
     * 
     * @param backupFilePaths the backupFilePaths value to set.
     * @return the MigrateSqlServerSqlMIDatabaseInput object itself.
     */
    public MigrateSqlServerSqlMIDatabaseInput withBackupFilePaths(List<String> backupFilePaths) {
        this.backupFilePaths = backupFilePaths;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property name in model MigrateSqlServerSqlMIDatabaseInput"));
        }
        if (restoreDatabaseName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property restoreDatabaseName in model MigrateSqlServerSqlMIDatabaseInput"));
        }
        if (backupFileShare() != null) {
            backupFileShare().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MigrateSqlServerSqlMIDatabaseInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("restoreDatabaseName", this.restoreDatabaseName);
        jsonWriter.writeJsonField("backupFileShare", this.backupFileShare);
        jsonWriter.writeArrayField("backupFilePaths", this.backupFilePaths,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrateSqlServerSqlMIDatabaseInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrateSqlServerSqlMIDatabaseInput if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MigrateSqlServerSqlMIDatabaseInput.
     */
    public static MigrateSqlServerSqlMIDatabaseInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrateSqlServerSqlMIDatabaseInput deserializedMigrateSqlServerSqlMIDatabaseInput
                = new MigrateSqlServerSqlMIDatabaseInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMIDatabaseInput.name = reader.getString();
                } else if ("restoreDatabaseName".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMIDatabaseInput.restoreDatabaseName = reader.getString();
                } else if ("backupFileShare".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlMIDatabaseInput.backupFileShare = FileShare.fromJson(reader);
                } else if ("backupFilePaths".equals(fieldName)) {
                    List<String> backupFilePaths = reader.readArray(reader1 -> reader1.getString());
                    deserializedMigrateSqlServerSqlMIDatabaseInput.backupFilePaths = backupFilePaths;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrateSqlServerSqlMIDatabaseInput;
        });
    }
}
