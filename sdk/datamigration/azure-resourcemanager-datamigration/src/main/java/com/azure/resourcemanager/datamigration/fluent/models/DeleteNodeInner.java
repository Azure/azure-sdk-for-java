// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of node to be deleted.
 */
@Fluent
public final class DeleteNodeInner implements JsonSerializable<DeleteNodeInner> {
    /*
     * The name of node to delete.
     */
    private String nodeName;

    /*
     * The name of integration runtime.
     */
    private String integrationRuntimeName;

    /**
     * Creates an instance of DeleteNodeInner class.
     */
    public DeleteNodeInner() {
    }

    /**
     * Get the nodeName property: The name of node to delete.
     * 
     * @return the nodeName value.
     */
    public String nodeName() {
        return this.nodeName;
    }

    /**
     * Set the nodeName property: The name of node to delete.
     * 
     * @param nodeName the nodeName value to set.
     * @return the DeleteNodeInner object itself.
     */
    public DeleteNodeInner withNodeName(String nodeName) {
        this.nodeName = nodeName;
        return this;
    }

    /**
     * Get the integrationRuntimeName property: The name of integration runtime.
     * 
     * @return the integrationRuntimeName value.
     */
    public String integrationRuntimeName() {
        return this.integrationRuntimeName;
    }

    /**
     * Set the integrationRuntimeName property: The name of integration runtime.
     * 
     * @param integrationRuntimeName the integrationRuntimeName value to set.
     * @return the DeleteNodeInner object itself.
     */
    public DeleteNodeInner withIntegrationRuntimeName(String integrationRuntimeName) {
        this.integrationRuntimeName = integrationRuntimeName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("nodeName", this.nodeName);
        jsonWriter.writeStringField("integrationRuntimeName", this.integrationRuntimeName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeleteNodeInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeleteNodeInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeleteNodeInner.
     */
    public static DeleteNodeInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeleteNodeInner deserializedDeleteNodeInner = new DeleteNodeInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nodeName".equals(fieldName)) {
                    deserializedDeleteNodeInner.nodeName = reader.getString();
                } else if ("integrationRuntimeName".equals(fieldName)) {
                    deserializedDeleteNodeInner.integrationRuntimeName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeleteNodeInner;
        });
    }
}
