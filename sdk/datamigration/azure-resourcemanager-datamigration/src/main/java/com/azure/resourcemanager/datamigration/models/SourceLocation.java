// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Source Location details of backups.
 */
@Fluent
public final class SourceLocation implements JsonSerializable<SourceLocation> {
    /*
     * Source File share.
     */
    private SqlFileShare fileShare;

    /*
     * Source Azure Blob.
     */
    private AzureBlob azureBlob;

    /*
     * Backup storage Type.
     */
    private String fileStorageType;

    /**
     * Creates an instance of SourceLocation class.
     */
    public SourceLocation() {
    }

    /**
     * Get the fileShare property: Source File share.
     * 
     * @return the fileShare value.
     */
    public SqlFileShare fileShare() {
        return this.fileShare;
    }

    /**
     * Set the fileShare property: Source File share.
     * 
     * @param fileShare the fileShare value to set.
     * @return the SourceLocation object itself.
     */
    public SourceLocation withFileShare(SqlFileShare fileShare) {
        this.fileShare = fileShare;
        return this;
    }

    /**
     * Get the azureBlob property: Source Azure Blob.
     * 
     * @return the azureBlob value.
     */
    public AzureBlob azureBlob() {
        return this.azureBlob;
    }

    /**
     * Set the azureBlob property: Source Azure Blob.
     * 
     * @param azureBlob the azureBlob value to set.
     * @return the SourceLocation object itself.
     */
    public SourceLocation withAzureBlob(AzureBlob azureBlob) {
        this.azureBlob = azureBlob;
        return this;
    }

    /**
     * Get the fileStorageType property: Backup storage Type.
     * 
     * @return the fileStorageType value.
     */
    public String fileStorageType() {
        return this.fileStorageType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (fileShare() != null) {
            fileShare().validate();
        }
        if (azureBlob() != null) {
            azureBlob().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("fileShare", this.fileShare);
        jsonWriter.writeJsonField("azureBlob", this.azureBlob);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SourceLocation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SourceLocation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SourceLocation.
     */
    public static SourceLocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SourceLocation deserializedSourceLocation = new SourceLocation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fileShare".equals(fieldName)) {
                    deserializedSourceLocation.fileShare = SqlFileShare.fromJson(reader);
                } else if ("azureBlob".equals(fieldName)) {
                    deserializedSourceLocation.azureBlob = AzureBlob.fromJson(reader);
                } else if ("fileStorageType".equals(fieldName)) {
                    deserializedSourceLocation.fileStorageType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSourceLocation;
        });
    }
}
