// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Backup Configuration.
 */
@Fluent
public final class BackupConfiguration implements JsonSerializable<BackupConfiguration> {
    /*
     * Source location of backups.
     */
    private SourceLocation sourceLocation;

    /*
     * Target location for copying backups.
     */
    private TargetLocation targetLocation;

    /**
     * Creates an instance of BackupConfiguration class.
     */
    public BackupConfiguration() {
    }

    /**
     * Get the sourceLocation property: Source location of backups.
     * 
     * @return the sourceLocation value.
     */
    public SourceLocation sourceLocation() {
        return this.sourceLocation;
    }

    /**
     * Set the sourceLocation property: Source location of backups.
     * 
     * @param sourceLocation the sourceLocation value to set.
     * @return the BackupConfiguration object itself.
     */
    public BackupConfiguration withSourceLocation(SourceLocation sourceLocation) {
        this.sourceLocation = sourceLocation;
        return this;
    }

    /**
     * Get the targetLocation property: Target location for copying backups.
     * 
     * @return the targetLocation value.
     */
    public TargetLocation targetLocation() {
        return this.targetLocation;
    }

    /**
     * Set the targetLocation property: Target location for copying backups.
     * 
     * @param targetLocation the targetLocation value to set.
     * @return the BackupConfiguration object itself.
     */
    public BackupConfiguration withTargetLocation(TargetLocation targetLocation) {
        this.targetLocation = targetLocation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceLocation() != null) {
            sourceLocation().validate();
        }
        if (targetLocation() != null) {
            targetLocation().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("sourceLocation", this.sourceLocation);
        jsonWriter.writeJsonField("targetLocation", this.targetLocation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BackupConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BackupConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BackupConfiguration.
     */
    public static BackupConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BackupConfiguration deserializedBackupConfiguration = new BackupConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceLocation".equals(fieldName)) {
                    deserializedBackupConfiguration.sourceLocation = SourceLocation.fromJson(reader);
                } else if ("targetLocation".equals(fieldName)) {
                    deserializedBackupConfiguration.targetLocation = TargetLocation.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBackupConfiguration;
        });
    }
}
