// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.datamigration.fluent.models.DatabaseMigrationBaseInner;
import com.azure.resourcemanager.datamigration.fluent.models.MigrationServiceInner;
import com.azure.resourcemanager.datamigration.models.MigrationServiceUpdate;

/**
 * An instance of this class provides access to all the operations defined in MigrationServicesClient.
 */
public interface MigrationServicesClient {
    /**
     * Retrieve the Database Migration Service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Migration Service along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MigrationServiceInner> getByResourceGroupWithResponse(String resourceGroupName,
        String migrationServiceName, Context context);

    /**
     * Retrieve the Database Migration Service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Migration Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MigrationServiceInner getByResourceGroup(String resourceGroupName, String migrationServiceName);

    /**
     * Create or Update Database Migration Service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @param parameters Details of MigrationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Migration Service.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MigrationServiceInner>, MigrationServiceInner> beginCreateOrUpdate(String resourceGroupName,
        String migrationServiceName, MigrationServiceInner parameters);

    /**
     * Create or Update Database Migration Service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @param parameters Details of MigrationService resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Migration Service.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MigrationServiceInner>, MigrationServiceInner> beginCreateOrUpdate(String resourceGroupName,
        String migrationServiceName, MigrationServiceInner parameters, Context context);

    /**
     * Create or Update Database Migration Service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @param parameters Details of MigrationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Migration Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MigrationServiceInner createOrUpdate(String resourceGroupName, String migrationServiceName,
        MigrationServiceInner parameters);

    /**
     * Create or Update Database Migration Service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @param parameters Details of MigrationService resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Migration Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MigrationServiceInner createOrUpdate(String resourceGroupName, String migrationServiceName,
        MigrationServiceInner parameters, Context context);

    /**
     * Delete Database Migration Service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String migrationServiceName);

    /**
     * Delete Database Migration Service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String migrationServiceName,
        Context context);

    /**
     * Delete Database Migration Service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String migrationServiceName);

    /**
     * Delete Database Migration Service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String migrationServiceName, Context context);

    /**
     * Update Database Migration Service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @param parameters Details of MigrationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Migration Service.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MigrationServiceInner>, MigrationServiceInner> beginUpdate(String resourceGroupName,
        String migrationServiceName, MigrationServiceUpdate parameters);

    /**
     * Update Database Migration Service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @param parameters Details of MigrationService resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Migration Service.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MigrationServiceInner>, MigrationServiceInner> beginUpdate(String resourceGroupName,
        String migrationServiceName, MigrationServiceUpdate parameters, Context context);

    /**
     * Update Database Migration Service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @param parameters Details of MigrationService resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Migration Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MigrationServiceInner update(String resourceGroupName, String migrationServiceName,
        MigrationServiceUpdate parameters);

    /**
     * Update Database Migration Service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @param parameters Details of MigrationService resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Migration Service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MigrationServiceInner update(String resourceGroupName, String migrationServiceName,
        MigrationServiceUpdate parameters, Context context);

    /**
     * Retrieve all migration services in the resource group.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Migration Service as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MigrationServiceInner> listByResourceGroup(String resourceGroupName);

    /**
     * Retrieve all migration services in the resource group.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Migration Service as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MigrationServiceInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Retrieve all migration services in the subscriptions.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Migration Service as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MigrationServiceInner> list();

    /**
     * Retrieve all migration services in the subscriptions.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Migration Service as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MigrationServiceInner> list(Context context);

    /**
     * Retrieve the List of database migrations attached to the service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Database Migrations as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DatabaseMigrationBaseInner> listMigrations(String resourceGroupName, String migrationServiceName);

    /**
     * Retrieve the List of database migrations attached to the service.
     * 
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value from
     * the Azure Resource Manager API or the portal.
     * @param migrationServiceName Name of the Migration Service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Database Migrations as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DatabaseMigrationBaseInner> listMigrations(String resourceGroupName, String migrationServiceName,
        Context context);
}
