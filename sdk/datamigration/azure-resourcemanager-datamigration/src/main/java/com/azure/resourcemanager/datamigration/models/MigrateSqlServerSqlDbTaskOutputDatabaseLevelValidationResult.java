// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Database validation result for Sql Server to Azure Sql DB migration.
 */
@Immutable
public final class MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult
    extends MigrateSqlServerSqlDbTaskOutput {
    /*
     * Result type
     */
    private String resultType = "MigrationDatabaseLevelValidationOutput";

    /*
     * Migration Identifier
     */
    private String migrationId;

    /*
     * Name of the source database
     */
    private String sourceDatabaseName;

    /*
     * Name of the target database
     */
    private String targetDatabaseName;

    /*
     * Validation start time
     */
    private OffsetDateTime startedOn;

    /*
     * Validation end time
     */
    private OffsetDateTime endedOn;

    /*
     * Provides data integrity validation result between the source and target tables that are migrated.
     */
    private DataIntegrityValidationResult dataIntegrityValidationResult;

    /*
     * Provides schema comparison result between source and target database
     */
    private SchemaComparisonValidationResult schemaValidationResult;

    /*
     * Results of some of the query execution result between source and target database
     */
    private QueryAnalysisValidationResult queryAnalysisValidationResult;

    /*
     * Current status of validation at the database level
     */
    private ValidationStatus status;

    /*
     * Result identifier
     */
    private String id;

    /**
     * Creates an instance of MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult class.
     */
    public MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult() {
    }

    /**
     * Get the resultType property: Result type.
     * 
     * @return the resultType value.
     */
    @Override
    public String resultType() {
        return this.resultType;
    }

    /**
     * Get the migrationId property: Migration Identifier.
     * 
     * @return the migrationId value.
     */
    public String migrationId() {
        return this.migrationId;
    }

    /**
     * Get the sourceDatabaseName property: Name of the source database.
     * 
     * @return the sourceDatabaseName value.
     */
    public String sourceDatabaseName() {
        return this.sourceDatabaseName;
    }

    /**
     * Get the targetDatabaseName property: Name of the target database.
     * 
     * @return the targetDatabaseName value.
     */
    public String targetDatabaseName() {
        return this.targetDatabaseName;
    }

    /**
     * Get the startedOn property: Validation start time.
     * 
     * @return the startedOn value.
     */
    public OffsetDateTime startedOn() {
        return this.startedOn;
    }

    /**
     * Get the endedOn property: Validation end time.
     * 
     * @return the endedOn value.
     */
    public OffsetDateTime endedOn() {
        return this.endedOn;
    }

    /**
     * Get the dataIntegrityValidationResult property: Provides data integrity validation result between the source and
     * target tables that are migrated.
     * 
     * @return the dataIntegrityValidationResult value.
     */
    public DataIntegrityValidationResult dataIntegrityValidationResult() {
        return this.dataIntegrityValidationResult;
    }

    /**
     * Get the schemaValidationResult property: Provides schema comparison result between source and target database.
     * 
     * @return the schemaValidationResult value.
     */
    public SchemaComparisonValidationResult schemaValidationResult() {
        return this.schemaValidationResult;
    }

    /**
     * Get the queryAnalysisValidationResult property: Results of some of the query execution result between source and
     * target database.
     * 
     * @return the queryAnalysisValidationResult value.
     */
    public QueryAnalysisValidationResult queryAnalysisValidationResult() {
        return this.queryAnalysisValidationResult;
    }

    /**
     * Get the status property: Current status of validation at the database level.
     * 
     * @return the status value.
     */
    public ValidationStatus status() {
        return this.status;
    }

    /**
     * Get the id property: Result identifier.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (dataIntegrityValidationResult() != null) {
            dataIntegrityValidationResult().validate();
        }
        if (schemaValidationResult() != null) {
            schemaValidationResult().validate();
        }
        if (queryAnalysisValidationResult() != null) {
            queryAnalysisValidationResult().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resultType", this.resultType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult if the JsonReader was
     * pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult.
     */
    public static MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult
                = new MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult.id = reader.getString();
                } else if ("resultType".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult.resultType
                        = reader.getString();
                } else if ("migrationId".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult.migrationId
                        = reader.getString();
                } else if ("sourceDatabaseName".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult.sourceDatabaseName
                        = reader.getString();
                } else if ("targetDatabaseName".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult.targetDatabaseName
                        = reader.getString();
                } else if ("startedOn".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult.startedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endedOn".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult.endedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("dataIntegrityValidationResult".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult.dataIntegrityValidationResult
                        = DataIntegrityValidationResult.fromJson(reader);
                } else if ("schemaValidationResult".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult.schemaValidationResult
                        = SchemaComparisonValidationResult.fromJson(reader);
                } else if ("queryAnalysisValidationResult".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult.queryAnalysisValidationResult
                        = QueryAnalysisValidationResult.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult.status
                        = ValidationStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult;
        });
    }
}
