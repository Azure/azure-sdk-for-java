// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Database file specific information.
 */
@Fluent
public final class DatabaseFileInfo implements JsonSerializable<DatabaseFileInfo> {
    /*
     * Name of the database
     */
    private String databaseName;

    /*
     * Unique identifier for database file
     */
    private String id;

    /*
     * Logical name of the file
     */
    private String logicalName;

    /*
     * Operating-system full path of the file
     */
    private String physicalFullName;

    /*
     * Suggested full path of the file for restoring
     */
    private String restoreFullName;

    /*
     * Database file type
     */
    private DatabaseFileType fileType;

    /*
     * Size of the file in megabytes
     */
    private Double sizeMB;

    /**
     * Creates an instance of DatabaseFileInfo class.
     */
    public DatabaseFileInfo() {
    }

    /**
     * Get the databaseName property: Name of the database.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: Name of the database.
     * 
     * @param databaseName the databaseName value to set.
     * @return the DatabaseFileInfo object itself.
     */
    public DatabaseFileInfo withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the id property: Unique identifier for database file.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Unique identifier for database file.
     * 
     * @param id the id value to set.
     * @return the DatabaseFileInfo object itself.
     */
    public DatabaseFileInfo withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the logicalName property: Logical name of the file.
     * 
     * @return the logicalName value.
     */
    public String logicalName() {
        return this.logicalName;
    }

    /**
     * Set the logicalName property: Logical name of the file.
     * 
     * @param logicalName the logicalName value to set.
     * @return the DatabaseFileInfo object itself.
     */
    public DatabaseFileInfo withLogicalName(String logicalName) {
        this.logicalName = logicalName;
        return this;
    }

    /**
     * Get the physicalFullName property: Operating-system full path of the file.
     * 
     * @return the physicalFullName value.
     */
    public String physicalFullName() {
        return this.physicalFullName;
    }

    /**
     * Set the physicalFullName property: Operating-system full path of the file.
     * 
     * @param physicalFullName the physicalFullName value to set.
     * @return the DatabaseFileInfo object itself.
     */
    public DatabaseFileInfo withPhysicalFullName(String physicalFullName) {
        this.physicalFullName = physicalFullName;
        return this;
    }

    /**
     * Get the restoreFullName property: Suggested full path of the file for restoring.
     * 
     * @return the restoreFullName value.
     */
    public String restoreFullName() {
        return this.restoreFullName;
    }

    /**
     * Set the restoreFullName property: Suggested full path of the file for restoring.
     * 
     * @param restoreFullName the restoreFullName value to set.
     * @return the DatabaseFileInfo object itself.
     */
    public DatabaseFileInfo withRestoreFullName(String restoreFullName) {
        this.restoreFullName = restoreFullName;
        return this;
    }

    /**
     * Get the fileType property: Database file type.
     * 
     * @return the fileType value.
     */
    public DatabaseFileType fileType() {
        return this.fileType;
    }

    /**
     * Set the fileType property: Database file type.
     * 
     * @param fileType the fileType value to set.
     * @return the DatabaseFileInfo object itself.
     */
    public DatabaseFileInfo withFileType(DatabaseFileType fileType) {
        this.fileType = fileType;
        return this;
    }

    /**
     * Get the sizeMB property: Size of the file in megabytes.
     * 
     * @return the sizeMB value.
     */
    public Double sizeMB() {
        return this.sizeMB;
    }

    /**
     * Set the sizeMB property: Size of the file in megabytes.
     * 
     * @param sizeMB the sizeMB value to set.
     * @return the DatabaseFileInfo object itself.
     */
    public DatabaseFileInfo withSizeMB(Double sizeMB) {
        this.sizeMB = sizeMB;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("databaseName", this.databaseName);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("logicalName", this.logicalName);
        jsonWriter.writeStringField("physicalFullName", this.physicalFullName);
        jsonWriter.writeStringField("restoreFullName", this.restoreFullName);
        jsonWriter.writeStringField("fileType", this.fileType == null ? null : this.fileType.toString());
        jsonWriter.writeNumberField("sizeMB", this.sizeMB);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabaseFileInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabaseFileInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatabaseFileInfo.
     */
    public static DatabaseFileInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabaseFileInfo deserializedDatabaseFileInfo = new DatabaseFileInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("databaseName".equals(fieldName)) {
                    deserializedDatabaseFileInfo.databaseName = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedDatabaseFileInfo.id = reader.getString();
                } else if ("logicalName".equals(fieldName)) {
                    deserializedDatabaseFileInfo.logicalName = reader.getString();
                } else if ("physicalFullName".equals(fieldName)) {
                    deserializedDatabaseFileInfo.physicalFullName = reader.getString();
                } else if ("restoreFullName".equals(fieldName)) {
                    deserializedDatabaseFileInfo.restoreFullName = reader.getString();
                } else if ("fileType".equals(fieldName)) {
                    deserializedDatabaseFileInfo.fileType = DatabaseFileType.fromString(reader.getString());
                } else if ("sizeMB".equals(fieldName)) {
                    deserializedDatabaseFileInfo.sizeMB = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabaseFileInfo;
        });
    }
}
