// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Input for the service task to upload an OCI driver.
 */
@Fluent
public final class UploadOciDriverTaskInput implements JsonSerializable<UploadOciDriverTaskInput> {
    /*
     * File share information for the OCI driver archive.
     */
    private FileShare driverShare;

    /**
     * Creates an instance of UploadOciDriverTaskInput class.
     */
    public UploadOciDriverTaskInput() {
    }

    /**
     * Get the driverShare property: File share information for the OCI driver archive.
     * 
     * @return the driverShare value.
     */
    public FileShare driverShare() {
        return this.driverShare;
    }

    /**
     * Set the driverShare property: File share information for the OCI driver archive.
     * 
     * @param driverShare the driverShare value to set.
     * @return the UploadOciDriverTaskInput object itself.
     */
    public UploadOciDriverTaskInput withDriverShare(FileShare driverShare) {
        this.driverShare = driverShare;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (driverShare() != null) {
            driverShare().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("driverShare", this.driverShare);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UploadOciDriverTaskInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UploadOciDriverTaskInput if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UploadOciDriverTaskInput.
     */
    public static UploadOciDriverTaskInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UploadOciDriverTaskInput deserializedUploadOciDriverTaskInput = new UploadOciDriverTaskInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("driverShare".equals(fieldName)) {
                    deserializedUploadOciDriverTaskInput.driverShare = FileShare.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUploadOciDriverTaskInput;
        });
    }
}
