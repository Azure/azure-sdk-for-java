// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Migration Validation Database level summary result.
 */
@Immutable
public final class MigrationValidationDatabaseSummaryResult
    implements JsonSerializable<MigrationValidationDatabaseSummaryResult> {
    /*
     * Result identifier
     */
    private String id;

    /*
     * Migration Identifier
     */
    private String migrationId;

    /*
     * Name of the source database
     */
    private String sourceDatabaseName;

    /*
     * Name of the target database
     */
    private String targetDatabaseName;

    /*
     * Validation start time
     */
    private OffsetDateTime startedOn;

    /*
     * Validation end time
     */
    private OffsetDateTime endedOn;

    /*
     * Current status of validation at the database level
     */
    private ValidationStatus status;

    /**
     * Creates an instance of MigrationValidationDatabaseSummaryResult class.
     */
    public MigrationValidationDatabaseSummaryResult() {
    }

    /**
     * Get the id property: Result identifier.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the migrationId property: Migration Identifier.
     * 
     * @return the migrationId value.
     */
    public String migrationId() {
        return this.migrationId;
    }

    /**
     * Get the sourceDatabaseName property: Name of the source database.
     * 
     * @return the sourceDatabaseName value.
     */
    public String sourceDatabaseName() {
        return this.sourceDatabaseName;
    }

    /**
     * Get the targetDatabaseName property: Name of the target database.
     * 
     * @return the targetDatabaseName value.
     */
    public String targetDatabaseName() {
        return this.targetDatabaseName;
    }

    /**
     * Get the startedOn property: Validation start time.
     * 
     * @return the startedOn value.
     */
    public OffsetDateTime startedOn() {
        return this.startedOn;
    }

    /**
     * Get the endedOn property: Validation end time.
     * 
     * @return the endedOn value.
     */
    public OffsetDateTime endedOn() {
        return this.endedOn;
    }

    /**
     * Get the status property: Current status of validation at the database level.
     * 
     * @return the status value.
     */
    public ValidationStatus status() {
        return this.status;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrationValidationDatabaseSummaryResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrationValidationDatabaseSummaryResult if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrationValidationDatabaseSummaryResult.
     */
    public static MigrationValidationDatabaseSummaryResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrationValidationDatabaseSummaryResult deserializedMigrationValidationDatabaseSummaryResult
                = new MigrationValidationDatabaseSummaryResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMigrationValidationDatabaseSummaryResult.id = reader.getString();
                } else if ("migrationId".equals(fieldName)) {
                    deserializedMigrationValidationDatabaseSummaryResult.migrationId = reader.getString();
                } else if ("sourceDatabaseName".equals(fieldName)) {
                    deserializedMigrationValidationDatabaseSummaryResult.sourceDatabaseName = reader.getString();
                } else if ("targetDatabaseName".equals(fieldName)) {
                    deserializedMigrationValidationDatabaseSummaryResult.targetDatabaseName = reader.getString();
                } else if ("startedOn".equals(fieldName)) {
                    deserializedMigrationValidationDatabaseSummaryResult.startedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endedOn".equals(fieldName)) {
                    deserializedMigrationValidationDatabaseSummaryResult.endedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedMigrationValidationDatabaseSummaryResult.status
                        = ValidationStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrationValidationDatabaseSummaryResult;
        });
    }
}
