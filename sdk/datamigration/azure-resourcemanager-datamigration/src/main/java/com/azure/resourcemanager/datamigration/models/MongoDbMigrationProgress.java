// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;
import java.util.Map;

/** Describes the progress of the overall migration. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "resultType")
@JsonTypeName("Migration")
@Fluent
public final class MongoDbMigrationProgress extends MongoDbProgress {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MongoDbMigrationProgress.class);

    /*
     * The progress of the databases in the migration. The keys are the names
     * of the databases
     */
    @JsonProperty(value = "databases")
    private Map<String, MongoDbDatabaseProgress> databases;

    /**
     * Get the databases property: The progress of the databases in the migration. The keys are the names of the
     * databases.
     *
     * @return the databases value.
     */
    public Map<String, MongoDbDatabaseProgress> databases() {
        return this.databases;
    }

    /**
     * Set the databases property: The progress of the databases in the migration. The keys are the names of the
     * databases.
     *
     * @param databases the databases value to set.
     * @return the MongoDbMigrationProgress object itself.
     */
    public MongoDbMigrationProgress withDatabases(Map<String, MongoDbDatabaseProgress> databases) {
        this.databases = databases;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbMigrationProgress withBytesCopied(long bytesCopied) {
        super.withBytesCopied(bytesCopied);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbMigrationProgress withDocumentsCopied(long documentsCopied) {
        super.withDocumentsCopied(documentsCopied);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbMigrationProgress withElapsedTime(String elapsedTime) {
        super.withElapsedTime(elapsedTime);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbMigrationProgress withErrors(Map<String, MongoDbError> errors) {
        super.withErrors(errors);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbMigrationProgress withEventsPending(long eventsPending) {
        super.withEventsPending(eventsPending);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbMigrationProgress withEventsReplayed(long eventsReplayed) {
        super.withEventsReplayed(eventsReplayed);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbMigrationProgress withLastEventTime(OffsetDateTime lastEventTime) {
        super.withLastEventTime(lastEventTime);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbMigrationProgress withLastReplayTime(OffsetDateTime lastReplayTime) {
        super.withLastReplayTime(lastReplayTime);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbMigrationProgress withName(String name) {
        super.withName(name);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbMigrationProgress withQualifiedName(String qualifiedName) {
        super.withQualifiedName(qualifiedName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbMigrationProgress withState(MongoDbMigrationState state) {
        super.withState(state);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbMigrationProgress withTotalBytes(long totalBytes) {
        super.withTotalBytes(totalBytes);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbMigrationProgress withTotalDocuments(long totalDocuments) {
        super.withTotalDocuments(totalDocuments);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (databases() != null) {
            databases()
                .values()
                .forEach(
                    e -> {
                        if (e != null) {
                            e.validate();
                        }
                    });
        }
    }
}
