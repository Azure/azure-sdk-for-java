// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Describes how an individual MongoDB collection should be migrated. */
@Fluent
public final class MongoDbCollectionSettings {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MongoDbCollectionSettings.class);

    /*
     * Whether the migrator is allowed to drop the target collection in the
     * course of performing a migration. The default is true.
     */
    @JsonProperty(value = "canDelete")
    private Boolean canDelete;

    /*
     * Describes a MongoDB shard key
     */
    @JsonProperty(value = "shardKey")
    private MongoDbShardKeySetting shardKey;

    /*
     * The RUs that should be configured on a CosmosDB target, or null to use
     * the default. This has no effect on non-CosmosDB targets.
     */
    @JsonProperty(value = "targetRUs")
    private Integer targetRUs;

    /**
     * Get the canDelete property: Whether the migrator is allowed to drop the target collection in the course of
     * performing a migration. The default is true.
     *
     * @return the canDelete value.
     */
    public Boolean canDelete() {
        return this.canDelete;
    }

    /**
     * Set the canDelete property: Whether the migrator is allowed to drop the target collection in the course of
     * performing a migration. The default is true.
     *
     * @param canDelete the canDelete value to set.
     * @return the MongoDbCollectionSettings object itself.
     */
    public MongoDbCollectionSettings withCanDelete(Boolean canDelete) {
        this.canDelete = canDelete;
        return this;
    }

    /**
     * Get the shardKey property: Describes a MongoDB shard key.
     *
     * @return the shardKey value.
     */
    public MongoDbShardKeySetting shardKey() {
        return this.shardKey;
    }

    /**
     * Set the shardKey property: Describes a MongoDB shard key.
     *
     * @param shardKey the shardKey value to set.
     * @return the MongoDbCollectionSettings object itself.
     */
    public MongoDbCollectionSettings withShardKey(MongoDbShardKeySetting shardKey) {
        this.shardKey = shardKey;
        return this;
    }

    /**
     * Get the targetRUs property: The RUs that should be configured on a CosmosDB target, or null to use the default.
     * This has no effect on non-CosmosDB targets.
     *
     * @return the targetRUs value.
     */
    public Integer targetRUs() {
        return this.targetRUs;
    }

    /**
     * Set the targetRUs property: The RUs that should be configured on a CosmosDB target, or null to use the default.
     * This has no effect on non-CosmosDB targets.
     *
     * @param targetRUs the targetRUs value to set.
     * @return the MongoDbCollectionSettings object itself.
     */
    public MongoDbCollectionSettings withTargetRUs(Integer targetRUs) {
        this.targetRUs = targetRUs;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (shardKey() != null) {
            shardKey().validate();
        }
    }
}
