// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes how an individual MongoDB collection should be migrated.
 */
@Fluent
public final class MongoDbCollectionSettings implements JsonSerializable<MongoDbCollectionSettings> {
    /*
     * Whether the migrator is allowed to drop the target collection in the course of performing a migration. The
     * default is true.
     */
    private Boolean canDelete;

    /*
     * Describes a MongoDB shard key
     */
    private MongoDbShardKeySetting shardKey;

    /*
     * The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on
     * non-CosmosDB targets.
     */
    private Integer targetRUs;

    /**
     * Creates an instance of MongoDbCollectionSettings class.
     */
    public MongoDbCollectionSettings() {
    }

    /**
     * Get the canDelete property: Whether the migrator is allowed to drop the target collection in the course of
     * performing a migration. The default is true.
     * 
     * @return the canDelete value.
     */
    public Boolean canDelete() {
        return this.canDelete;
    }

    /**
     * Set the canDelete property: Whether the migrator is allowed to drop the target collection in the course of
     * performing a migration. The default is true.
     * 
     * @param canDelete the canDelete value to set.
     * @return the MongoDbCollectionSettings object itself.
     */
    public MongoDbCollectionSettings withCanDelete(Boolean canDelete) {
        this.canDelete = canDelete;
        return this;
    }

    /**
     * Get the shardKey property: Describes a MongoDB shard key.
     * 
     * @return the shardKey value.
     */
    public MongoDbShardKeySetting shardKey() {
        return this.shardKey;
    }

    /**
     * Set the shardKey property: Describes a MongoDB shard key.
     * 
     * @param shardKey the shardKey value to set.
     * @return the MongoDbCollectionSettings object itself.
     */
    public MongoDbCollectionSettings withShardKey(MongoDbShardKeySetting shardKey) {
        this.shardKey = shardKey;
        return this;
    }

    /**
     * Get the targetRUs property: The RUs that should be configured on a CosmosDB target, or null to use the default.
     * This has no effect on non-CosmosDB targets.
     * 
     * @return the targetRUs value.
     */
    public Integer targetRUs() {
        return this.targetRUs;
    }

    /**
     * Set the targetRUs property: The RUs that should be configured on a CosmosDB target, or null to use the default.
     * This has no effect on non-CosmosDB targets.
     * 
     * @param targetRUs the targetRUs value to set.
     * @return the MongoDbCollectionSettings object itself.
     */
    public MongoDbCollectionSettings withTargetRUs(Integer targetRUs) {
        this.targetRUs = targetRUs;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (shardKey() != null) {
            shardKey().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("canDelete", this.canDelete);
        jsonWriter.writeJsonField("shardKey", this.shardKey);
        jsonWriter.writeNumberField("targetRUs", this.targetRUs);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoDbCollectionSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoDbCollectionSettings if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MongoDbCollectionSettings.
     */
    public static MongoDbCollectionSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoDbCollectionSettings deserializedMongoDbCollectionSettings = new MongoDbCollectionSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("canDelete".equals(fieldName)) {
                    deserializedMongoDbCollectionSettings.canDelete = reader.getNullable(JsonReader::getBoolean);
                } else if ("shardKey".equals(fieldName)) {
                    deserializedMongoDbCollectionSettings.shardKey = MongoDbShardKeySetting.fromJson(reader);
                } else if ("targetRUs".equals(fieldName)) {
                    deserializedMongoDbCollectionSettings.targetRUs = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoDbCollectionSettings;
        });
    }
}
