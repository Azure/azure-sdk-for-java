// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Information of backup file.
 */
@Immutable
public final class SqlBackupFileInfo implements JsonSerializable<SqlBackupFileInfo> {
    /*
     * File name.
     */
    private String fileName;

    /*
     * Status of the file. (Initial, Uploading, Uploaded, Restoring, Restored or Skipped)
     */
    private String status;

    /*
     * File size in bytes
     */
    private Long totalSize;

    /*
     * Bytes read
     */
    private Long dataRead;

    /*
     * Bytes written
     */
    private Long dataWritten;

    /*
     * Copy throughput in KBps
     */
    private Double copyThroughput;

    /*
     * Copy Duration in seconds
     */
    private Integer copyDuration;

    /*
     * Media family sequence number
     */
    private Integer familySequenceNumber;

    /**
     * Creates an instance of SqlBackupFileInfo class.
     */
    public SqlBackupFileInfo() {
    }

    /**
     * Get the fileName property: File name.
     * 
     * @return the fileName value.
     */
    public String fileName() {
        return this.fileName;
    }

    /**
     * Get the status property: Status of the file. (Initial, Uploading, Uploaded, Restoring, Restored or Skipped).
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the totalSize property: File size in bytes.
     * 
     * @return the totalSize value.
     */
    public Long totalSize() {
        return this.totalSize;
    }

    /**
     * Get the dataRead property: Bytes read.
     * 
     * @return the dataRead value.
     */
    public Long dataRead() {
        return this.dataRead;
    }

    /**
     * Get the dataWritten property: Bytes written.
     * 
     * @return the dataWritten value.
     */
    public Long dataWritten() {
        return this.dataWritten;
    }

    /**
     * Get the copyThroughput property: Copy throughput in KBps.
     * 
     * @return the copyThroughput value.
     */
    public Double copyThroughput() {
        return this.copyThroughput;
    }

    /**
     * Get the copyDuration property: Copy Duration in seconds.
     * 
     * @return the copyDuration value.
     */
    public Integer copyDuration() {
        return this.copyDuration;
    }

    /**
     * Get the familySequenceNumber property: Media family sequence number.
     * 
     * @return the familySequenceNumber value.
     */
    public Integer familySequenceNumber() {
        return this.familySequenceNumber;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlBackupFileInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlBackupFileInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlBackupFileInfo.
     */
    public static SqlBackupFileInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlBackupFileInfo deserializedSqlBackupFileInfo = new SqlBackupFileInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fileName".equals(fieldName)) {
                    deserializedSqlBackupFileInfo.fileName = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedSqlBackupFileInfo.status = reader.getString();
                } else if ("totalSize".equals(fieldName)) {
                    deserializedSqlBackupFileInfo.totalSize = reader.getNullable(JsonReader::getLong);
                } else if ("dataRead".equals(fieldName)) {
                    deserializedSqlBackupFileInfo.dataRead = reader.getNullable(JsonReader::getLong);
                } else if ("dataWritten".equals(fieldName)) {
                    deserializedSqlBackupFileInfo.dataWritten = reader.getNullable(JsonReader::getLong);
                } else if ("copyThroughput".equals(fieldName)) {
                    deserializedSqlBackupFileInfo.copyThroughput = reader.getNullable(JsonReader::getDouble);
                } else if ("copyDuration".equals(fieldName)) {
                    deserializedSqlBackupFileInfo.copyDuration = reader.getNullable(JsonReader::getInt);
                } else if ("familySequenceNumber".equals(fieldName)) {
                    deserializedSqlBackupFileInfo.familySequenceNumber = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlBackupFileInfo;
        });
    }
}
