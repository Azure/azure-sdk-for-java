// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datamigration.models.ServiceProvisioningState;
import com.azure.resourcemanager.datamigration.models.ServiceSku;
import java.io.IOException;
import java.util.Map;

/**
 * An Azure Database Migration Service (classic) resource.
 */
@Fluent
public final class DataMigrationServiceInner extends Resource {
    /*
     * HTTP strong entity tag value. Ignored if submitted
     */
    private String etag;

    /*
     * The resource kind. Only 'vm' (the default) is supported.
     */
    private String kind;

    /*
     * Custom service properties
     */
    private DataMigrationServiceProperties innerProperties;

    /*
     * Service SKU
     */
    private ServiceSku sku;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of DataMigrationServiceInner class.
     */
    public DataMigrationServiceInner() {
    }

    /**
     * Get the etag property: HTTP strong entity tag value. Ignored if submitted.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Set the etag property: HTTP strong entity tag value. Ignored if submitted.
     * 
     * @param etag the etag value to set.
     * @return the DataMigrationServiceInner object itself.
     */
    public DataMigrationServiceInner withEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the kind property: The resource kind. Only 'vm' (the default) is supported.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: The resource kind. Only 'vm' (the default) is supported.
     * 
     * @param kind the kind value to set.
     * @return the DataMigrationServiceInner object itself.
     */
    public DataMigrationServiceInner withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the innerProperties property: Custom service properties.
     * 
     * @return the innerProperties value.
     */
    private DataMigrationServiceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the sku property: Service SKU.
     * 
     * @return the sku value.
     */
    public ServiceSku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: Service SKU.
     * 
     * @param sku the sku value to set.
     * @return the DataMigrationServiceInner object itself.
     */
    public DataMigrationServiceInner withSku(ServiceSku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataMigrationServiceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataMigrationServiceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: The resource's provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ServiceProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the publicKey property: The public key of the service, used to encrypt secrets sent to the service.
     * 
     * @return the publicKey value.
     */
    public String publicKey() {
        return this.innerProperties() == null ? null : this.innerProperties().publicKey();
    }

    /**
     * Set the publicKey property: The public key of the service, used to encrypt secrets sent to the service.
     * 
     * @param publicKey the publicKey value to set.
     * @return the DataMigrationServiceInner object itself.
     */
    public DataMigrationServiceInner withPublicKey(String publicKey) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataMigrationServiceProperties();
        }
        this.innerProperties().withPublicKey(publicKey);
        return this;
    }

    /**
     * Get the virtualSubnetId property: The ID of the Microsoft.Network/virtualNetworks/subnets resource to which the
     * service should be joined.
     * 
     * @return the virtualSubnetId value.
     */
    public String virtualSubnetId() {
        return this.innerProperties() == null ? null : this.innerProperties().virtualSubnetId();
    }

    /**
     * Set the virtualSubnetId property: The ID of the Microsoft.Network/virtualNetworks/subnets resource to which the
     * service should be joined.
     * 
     * @param virtualSubnetId the virtualSubnetId value to set.
     * @return the DataMigrationServiceInner object itself.
     */
    public DataMigrationServiceInner withVirtualSubnetId(String virtualSubnetId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataMigrationServiceProperties();
        }
        this.innerProperties().withVirtualSubnetId(virtualSubnetId);
        return this;
    }

    /**
     * Get the virtualNicId property: The ID of the Microsoft.Network/networkInterfaces resource which the service have.
     * 
     * @return the virtualNicId value.
     */
    public String virtualNicId() {
        return this.innerProperties() == null ? null : this.innerProperties().virtualNicId();
    }

    /**
     * Set the virtualNicId property: The ID of the Microsoft.Network/networkInterfaces resource which the service have.
     * 
     * @param virtualNicId the virtualNicId value to set.
     * @return the DataMigrationServiceInner object itself.
     */
    public DataMigrationServiceInner withVirtualNicId(String virtualNicId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataMigrationServiceProperties();
        }
        this.innerProperties().withVirtualNicId(virtualNicId);
        return this;
    }

    /**
     * Get the autoStopDelay property: The time delay before the service is auto-stopped when idle.
     * 
     * @return the autoStopDelay value.
     */
    public String autoStopDelay() {
        return this.innerProperties() == null ? null : this.innerProperties().autoStopDelay();
    }

    /**
     * Set the autoStopDelay property: The time delay before the service is auto-stopped when idle.
     * 
     * @param autoStopDelay the autoStopDelay value to set.
     * @return the DataMigrationServiceInner object itself.
     */
    public DataMigrationServiceInner withAutoStopDelay(String autoStopDelay) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataMigrationServiceProperties();
        }
        this.innerProperties().withAutoStopDelay(autoStopDelay);
        return this;
    }

    /**
     * Get the deleteResourcesOnStop property: Whether service resources should be deleted when stopped. (Turned on by
     * default).
     * 
     * @return the deleteResourcesOnStop value.
     */
    public Boolean deleteResourcesOnStop() {
        return this.innerProperties() == null ? null : this.innerProperties().deleteResourcesOnStop();
    }

    /**
     * Set the deleteResourcesOnStop property: Whether service resources should be deleted when stopped. (Turned on by
     * default).
     * 
     * @param deleteResourcesOnStop the deleteResourcesOnStop value to set.
     * @return the DataMigrationServiceInner object itself.
     */
    public DataMigrationServiceInner withDeleteResourcesOnStop(Boolean deleteResourcesOnStop) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DataMigrationServiceProperties();
        }
        this.innerProperties().withDeleteResourcesOnStop(deleteResourcesOnStop);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (sku() != null) {
            sku().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("etag", this.etag);
        jsonWriter.writeStringField("kind", this.kind);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("sku", this.sku);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataMigrationServiceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataMigrationServiceInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataMigrationServiceInner.
     */
    public static DataMigrationServiceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataMigrationServiceInner deserializedDataMigrationServiceInner = new DataMigrationServiceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedDataMigrationServiceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedDataMigrationServiceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedDataMigrationServiceInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedDataMigrationServiceInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedDataMigrationServiceInner.withTags(tags);
                } else if ("etag".equals(fieldName)) {
                    deserializedDataMigrationServiceInner.etag = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    deserializedDataMigrationServiceInner.kind = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedDataMigrationServiceInner.innerProperties
                        = DataMigrationServiceProperties.fromJson(reader);
                } else if ("sku".equals(fieldName)) {
                    deserializedDataMigrationServiceInner.sku = ServiceSku.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedDataMigrationServiceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataMigrationServiceInner;
        });
    }
}
