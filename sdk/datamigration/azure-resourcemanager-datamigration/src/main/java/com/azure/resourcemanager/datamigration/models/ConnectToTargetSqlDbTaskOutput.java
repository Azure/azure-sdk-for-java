// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Output for the task that validates connection to SQL DB and target server requirements.
 */
@Immutable
public final class ConnectToTargetSqlDbTaskOutput implements JsonSerializable<ConnectToTargetSqlDbTaskOutput> {
    /*
     * Result identifier
     */
    private String id;

    /*
     * Source databases as a map from database name to database id
     */
    private String databases;

    /*
     * Version of the target server
     */
    private String targetServerVersion;

    /*
     * Target server brand version
     */
    private String targetServerBrandVersion;

    /**
     * Creates an instance of ConnectToTargetSqlDbTaskOutput class.
     */
    public ConnectToTargetSqlDbTaskOutput() {
    }

    /**
     * Get the id property: Result identifier.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the databases property: Source databases as a map from database name to database id.
     * 
     * @return the databases value.
     */
    public String databases() {
        return this.databases;
    }

    /**
     * Get the targetServerVersion property: Version of the target server.
     * 
     * @return the targetServerVersion value.
     */
    public String targetServerVersion() {
        return this.targetServerVersion;
    }

    /**
     * Get the targetServerBrandVersion property: Target server brand version.
     * 
     * @return the targetServerBrandVersion value.
     */
    public String targetServerBrandVersion() {
        return this.targetServerBrandVersion;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectToTargetSqlDbTaskOutput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectToTargetSqlDbTaskOutput if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectToTargetSqlDbTaskOutput.
     */
    public static ConnectToTargetSqlDbTaskOutput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectToTargetSqlDbTaskOutput deserializedConnectToTargetSqlDbTaskOutput
                = new ConnectToTargetSqlDbTaskOutput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedConnectToTargetSqlDbTaskOutput.id = reader.getString();
                } else if ("databases".equals(fieldName)) {
                    deserializedConnectToTargetSqlDbTaskOutput.databases = reader.getString();
                } else if ("targetServerVersion".equals(fieldName)) {
                    deserializedConnectToTargetSqlDbTaskOutput.targetServerVersion = reader.getString();
                } else if ("targetServerBrandVersion".equals(fieldName)) {
                    deserializedConnectToTargetSqlDbTaskOutput.targetServerBrandVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectToTargetSqlDbTaskOutput;
        });
    }
}
