// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Describes a MongoDB data source. */
@Fluent
public final class MongoDbClusterInfo {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MongoDbClusterInfo.class);

    /*
     * A list of non-system databases in the cluster
     */
    @JsonProperty(value = "databases", required = true)
    private List<MongoDbDatabaseInfo> databases;

    /*
     * Whether the cluster supports sharded collections
     */
    @JsonProperty(value = "supportsSharding", required = true)
    private boolean supportsSharding;

    /*
     * The type of data source
     */
    @JsonProperty(value = "type", required = true)
    private MongoDbClusterType type;

    /*
     * The version of the data source in the form x.y.z (e.g. 3.6.7). Not used
     * if Type is BlobContainer.
     */
    @JsonProperty(value = "version", required = true)
    private String version;

    /**
     * Get the databases property: A list of non-system databases in the cluster.
     *
     * @return the databases value.
     */
    public List<MongoDbDatabaseInfo> databases() {
        return this.databases;
    }

    /**
     * Set the databases property: A list of non-system databases in the cluster.
     *
     * @param databases the databases value to set.
     * @return the MongoDbClusterInfo object itself.
     */
    public MongoDbClusterInfo withDatabases(List<MongoDbDatabaseInfo> databases) {
        this.databases = databases;
        return this;
    }

    /**
     * Get the supportsSharding property: Whether the cluster supports sharded collections.
     *
     * @return the supportsSharding value.
     */
    public boolean supportsSharding() {
        return this.supportsSharding;
    }

    /**
     * Set the supportsSharding property: Whether the cluster supports sharded collections.
     *
     * @param supportsSharding the supportsSharding value to set.
     * @return the MongoDbClusterInfo object itself.
     */
    public MongoDbClusterInfo withSupportsSharding(boolean supportsSharding) {
        this.supportsSharding = supportsSharding;
        return this;
    }

    /**
     * Get the type property: The type of data source.
     *
     * @return the type value.
     */
    public MongoDbClusterType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of data source.
     *
     * @param type the type value to set.
     * @return the MongoDbClusterInfo object itself.
     */
    public MongoDbClusterInfo withType(MongoDbClusterType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the version property: The version of the data source in the form x.y.z (e.g. 3.6.7). Not used if Type is
     * BlobContainer.
     *
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: The version of the data source in the form x.y.z (e.g. 3.6.7). Not used if Type is
     * BlobContainer.
     *
     * @param version the version value to set.
     * @return the MongoDbClusterInfo object itself.
     */
    public MongoDbClusterInfo withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (databases() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property databases in model MongoDbClusterInfo"));
        } else {
            databases().forEach(e -> e.validate());
        }
        if (type() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property type in model MongoDbClusterInfo"));
        }
        if (version() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property version in model MongoDbClusterInfo"));
        }
    }
}
