// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Describes a MongoDB data source.
 */
@Fluent
public final class MongoDbClusterInfo implements JsonSerializable<MongoDbClusterInfo> {
    /*
     * A list of non-system databases in the cluster
     */
    private List<MongoDbDatabaseInfo> databases;

    /*
     * Whether the cluster supports sharded collections
     */
    private boolean supportsSharding;

    /*
     * The type of data source
     */
    private MongoDbClusterType type;

    /*
     * The version of the data source in the form x.y.z (e.g. 3.6.7). Not used if Type is BlobContainer.
     */
    private String version;

    /**
     * Creates an instance of MongoDbClusterInfo class.
     */
    public MongoDbClusterInfo() {
    }

    /**
     * Get the databases property: A list of non-system databases in the cluster.
     * 
     * @return the databases value.
     */
    public List<MongoDbDatabaseInfo> databases() {
        return this.databases;
    }

    /**
     * Set the databases property: A list of non-system databases in the cluster.
     * 
     * @param databases the databases value to set.
     * @return the MongoDbClusterInfo object itself.
     */
    public MongoDbClusterInfo withDatabases(List<MongoDbDatabaseInfo> databases) {
        this.databases = databases;
        return this;
    }

    /**
     * Get the supportsSharding property: Whether the cluster supports sharded collections.
     * 
     * @return the supportsSharding value.
     */
    public boolean supportsSharding() {
        return this.supportsSharding;
    }

    /**
     * Set the supportsSharding property: Whether the cluster supports sharded collections.
     * 
     * @param supportsSharding the supportsSharding value to set.
     * @return the MongoDbClusterInfo object itself.
     */
    public MongoDbClusterInfo withSupportsSharding(boolean supportsSharding) {
        this.supportsSharding = supportsSharding;
        return this;
    }

    /**
     * Get the type property: The type of data source.
     * 
     * @return the type value.
     */
    public MongoDbClusterType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of data source.
     * 
     * @param type the type value to set.
     * @return the MongoDbClusterInfo object itself.
     */
    public MongoDbClusterInfo withType(MongoDbClusterType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the version property: The version of the data source in the form x.y.z (e.g. 3.6.7). Not used if Type is
     * BlobContainer.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: The version of the data source in the form x.y.z (e.g. 3.6.7). Not used if Type is
     * BlobContainer.
     * 
     * @param version the version value to set.
     * @return the MongoDbClusterInfo object itself.
     */
    public MongoDbClusterInfo withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (databases() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property databases in model MongoDbClusterInfo"));
        } else {
            databases().forEach(e -> e.validate());
        }
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model MongoDbClusterInfo"));
        }
        if (version() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property version in model MongoDbClusterInfo"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MongoDbClusterInfo.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("databases", this.databases, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("supportsSharding", this.supportsSharding);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("version", this.version);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoDbClusterInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoDbClusterInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MongoDbClusterInfo.
     */
    public static MongoDbClusterInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoDbClusterInfo deserializedMongoDbClusterInfo = new MongoDbClusterInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("databases".equals(fieldName)) {
                    List<MongoDbDatabaseInfo> databases
                        = reader.readArray(reader1 -> MongoDbDatabaseInfo.fromJson(reader1));
                    deserializedMongoDbClusterInfo.databases = databases;
                } else if ("supportsSharding".equals(fieldName)) {
                    deserializedMongoDbClusterInfo.supportsSharding = reader.getBoolean();
                } else if ("type".equals(fieldName)) {
                    deserializedMongoDbClusterInfo.type = MongoDbClusterType.fromString(reader.getString());
                } else if ("version".equals(fieldName)) {
                    deserializedMongoDbClusterInfo.version = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoDbClusterInfo;
        });
    }
}
