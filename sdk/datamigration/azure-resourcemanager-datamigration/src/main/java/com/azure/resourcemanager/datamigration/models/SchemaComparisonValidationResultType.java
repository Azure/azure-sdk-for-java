// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Description about the errors happen while performing migration validation.
 */
@Fluent
public final class SchemaComparisonValidationResultType
    implements JsonSerializable<SchemaComparisonValidationResultType> {
    /*
     * Name of the object that has the difference
     */
    private String objectName;

    /*
     * Type of the object that has the difference. e.g (Table/View/StoredProcedure)
     */
    private ObjectType objectType;

    /*
     * Update action type with respect to target
     */
    private UpdateActionType updateAction;

    /**
     * Creates an instance of SchemaComparisonValidationResultType class.
     */
    public SchemaComparisonValidationResultType() {
    }

    /**
     * Get the objectName property: Name of the object that has the difference.
     * 
     * @return the objectName value.
     */
    public String objectName() {
        return this.objectName;
    }

    /**
     * Set the objectName property: Name of the object that has the difference.
     * 
     * @param objectName the objectName value to set.
     * @return the SchemaComparisonValidationResultType object itself.
     */
    public SchemaComparisonValidationResultType withObjectName(String objectName) {
        this.objectName = objectName;
        return this;
    }

    /**
     * Get the objectType property: Type of the object that has the difference. e.g (Table/View/StoredProcedure).
     * 
     * @return the objectType value.
     */
    public ObjectType objectType() {
        return this.objectType;
    }

    /**
     * Set the objectType property: Type of the object that has the difference. e.g (Table/View/StoredProcedure).
     * 
     * @param objectType the objectType value to set.
     * @return the SchemaComparisonValidationResultType object itself.
     */
    public SchemaComparisonValidationResultType withObjectType(ObjectType objectType) {
        this.objectType = objectType;
        return this;
    }

    /**
     * Get the updateAction property: Update action type with respect to target.
     * 
     * @return the updateAction value.
     */
    public UpdateActionType updateAction() {
        return this.updateAction;
    }

    /**
     * Set the updateAction property: Update action type with respect to target.
     * 
     * @param updateAction the updateAction value to set.
     * @return the SchemaComparisonValidationResultType object itself.
     */
    public SchemaComparisonValidationResultType withUpdateAction(UpdateActionType updateAction) {
        this.updateAction = updateAction;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("objectName", this.objectName);
        jsonWriter.writeStringField("objectType", this.objectType == null ? null : this.objectType.toString());
        jsonWriter.writeStringField("updateAction", this.updateAction == null ? null : this.updateAction.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SchemaComparisonValidationResultType from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SchemaComparisonValidationResultType if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SchemaComparisonValidationResultType.
     */
    public static SchemaComparisonValidationResultType fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SchemaComparisonValidationResultType deserializedSchemaComparisonValidationResultType
                = new SchemaComparisonValidationResultType();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("objectName".equals(fieldName)) {
                    deserializedSchemaComparisonValidationResultType.objectName = reader.getString();
                } else if ("objectType".equals(fieldName)) {
                    deserializedSchemaComparisonValidationResultType.objectType
                        = ObjectType.fromString(reader.getString());
                } else if ("updateAction".equals(fieldName)) {
                    deserializedSchemaComparisonValidationResultType.updateAction
                        = UpdateActionType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSchemaComparisonValidationResultType;
        });
    }
}
