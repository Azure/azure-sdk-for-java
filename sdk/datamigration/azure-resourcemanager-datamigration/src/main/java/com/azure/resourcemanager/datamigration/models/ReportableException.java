// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Exception object for all custom exceptions.
 */
@Fluent
public final class ReportableException implements JsonSerializable<ReportableException> {
    /*
     * Error message
     */
    private String message;

    /*
     * Actionable steps for this exception
     */
    private String actionableMessage;

    /*
     * The path to the file where exception occurred
     */
    private String filePath;

    /*
     * The line number where exception occurred
     */
    private String lineNumber;

    /*
     * Coded numerical value that is assigned to a specific exception
     */
    private Integer hResult;

    /*
     * Stack trace
     */
    private String stackTrace;

    /**
     * Creates an instance of ReportableException class.
     */
    public ReportableException() {
    }

    /**
     * Get the message property: Error message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Get the actionableMessage property: Actionable steps for this exception.
     * 
     * @return the actionableMessage value.
     */
    public String actionableMessage() {
        return this.actionableMessage;
    }

    /**
     * Set the actionableMessage property: Actionable steps for this exception.
     * 
     * @param actionableMessage the actionableMessage value to set.
     * @return the ReportableException object itself.
     */
    public ReportableException withActionableMessage(String actionableMessage) {
        this.actionableMessage = actionableMessage;
        return this;
    }

    /**
     * Get the filePath property: The path to the file where exception occurred.
     * 
     * @return the filePath value.
     */
    public String filePath() {
        return this.filePath;
    }

    /**
     * Get the lineNumber property: The line number where exception occurred.
     * 
     * @return the lineNumber value.
     */
    public String lineNumber() {
        return this.lineNumber;
    }

    /**
     * Get the hResult property: Coded numerical value that is assigned to a specific exception.
     * 
     * @return the hResult value.
     */
    public Integer hResult() {
        return this.hResult;
    }

    /**
     * Get the stackTrace property: Stack trace.
     * 
     * @return the stackTrace value.
     */
    public String stackTrace() {
        return this.stackTrace;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("actionableMessage", this.actionableMessage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReportableException from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReportableException if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReportableException.
     */
    public static ReportableException fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReportableException deserializedReportableException = new ReportableException();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("message".equals(fieldName)) {
                    deserializedReportableException.message = reader.getString();
                } else if ("actionableMessage".equals(fieldName)) {
                    deserializedReportableException.actionableMessage = reader.getString();
                } else if ("filePath".equals(fieldName)) {
                    deserializedReportableException.filePath = reader.getString();
                } else if ("lineNumber".equals(fieldName)) {
                    deserializedReportableException.lineNumber = reader.getString();
                } else if ("hResult".equals(fieldName)) {
                    deserializedReportableException.hResult = reader.getNullable(JsonReader::getInt);
                } else if ("stackTrace".equals(fieldName)) {
                    deserializedReportableException.stackTrace = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReportableException;
        });
    }
}
