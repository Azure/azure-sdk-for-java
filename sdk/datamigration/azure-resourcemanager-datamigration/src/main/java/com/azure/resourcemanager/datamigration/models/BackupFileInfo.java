// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Information of the backup file.
 */
@Fluent
public final class BackupFileInfo implements JsonSerializable<BackupFileInfo> {
    /*
     * Location of the backup file in shared folder
     */
    private String fileLocation;

    /*
     * Sequence number of the backup file in the backup set
     */
    private Integer familySequenceNumber;

    /*
     * Status of the backup file during migration
     */
    private BackupFileStatus status;

    /**
     * Creates an instance of BackupFileInfo class.
     */
    public BackupFileInfo() {
    }

    /**
     * Get the fileLocation property: Location of the backup file in shared folder.
     * 
     * @return the fileLocation value.
     */
    public String fileLocation() {
        return this.fileLocation;
    }

    /**
     * Set the fileLocation property: Location of the backup file in shared folder.
     * 
     * @param fileLocation the fileLocation value to set.
     * @return the BackupFileInfo object itself.
     */
    public BackupFileInfo withFileLocation(String fileLocation) {
        this.fileLocation = fileLocation;
        return this;
    }

    /**
     * Get the familySequenceNumber property: Sequence number of the backup file in the backup set.
     * 
     * @return the familySequenceNumber value.
     */
    public Integer familySequenceNumber() {
        return this.familySequenceNumber;
    }

    /**
     * Set the familySequenceNumber property: Sequence number of the backup file in the backup set.
     * 
     * @param familySequenceNumber the familySequenceNumber value to set.
     * @return the BackupFileInfo object itself.
     */
    public BackupFileInfo withFamilySequenceNumber(Integer familySequenceNumber) {
        this.familySequenceNumber = familySequenceNumber;
        return this;
    }

    /**
     * Get the status property: Status of the backup file during migration.
     * 
     * @return the status value.
     */
    public BackupFileStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the backup file during migration.
     * 
     * @param status the status value to set.
     * @return the BackupFileInfo object itself.
     */
    public BackupFileInfo withStatus(BackupFileStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("fileLocation", this.fileLocation);
        jsonWriter.writeNumberField("familySequenceNumber", this.familySequenceNumber);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BackupFileInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BackupFileInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BackupFileInfo.
     */
    public static BackupFileInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BackupFileInfo deserializedBackupFileInfo = new BackupFileInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fileLocation".equals(fieldName)) {
                    deserializedBackupFileInfo.fileLocation = reader.getString();
                } else if ("familySequenceNumber".equals(fieldName)) {
                    deserializedBackupFileInfo.familySequenceNumber = reader.getNullable(JsonReader::getInt);
                } else if ("status".equals(fieldName)) {
                    deserializedBackupFileInfo.status = BackupFileStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBackupFileInfo;
        });
    }
}
