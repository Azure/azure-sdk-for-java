// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;
import java.util.Map;

/** Describes the progress of a collection. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "resultType")
@JsonTypeName("Collection")
@Immutable
public final class MongoDbCollectionProgress extends MongoDbProgress {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MongoDbCollectionProgress.class);

    /** {@inheritDoc} */
    @Override
    public MongoDbCollectionProgress withBytesCopied(long bytesCopied) {
        super.withBytesCopied(bytesCopied);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbCollectionProgress withDocumentsCopied(long documentsCopied) {
        super.withDocumentsCopied(documentsCopied);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbCollectionProgress withElapsedTime(String elapsedTime) {
        super.withElapsedTime(elapsedTime);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbCollectionProgress withErrors(Map<String, MongoDbError> errors) {
        super.withErrors(errors);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbCollectionProgress withEventsPending(long eventsPending) {
        super.withEventsPending(eventsPending);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbCollectionProgress withEventsReplayed(long eventsReplayed) {
        super.withEventsReplayed(eventsReplayed);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbCollectionProgress withLastEventTime(OffsetDateTime lastEventTime) {
        super.withLastEventTime(lastEventTime);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbCollectionProgress withLastReplayTime(OffsetDateTime lastReplayTime) {
        super.withLastReplayTime(lastReplayTime);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbCollectionProgress withName(String name) {
        super.withName(name);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbCollectionProgress withQualifiedName(String qualifiedName) {
        super.withQualifiedName(qualifiedName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbCollectionProgress withState(MongoDbMigrationState state) {
        super.withState(state);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbCollectionProgress withTotalBytes(long totalBytes) {
        super.withTotalBytes(totalBytes);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbCollectionProgress withTotalDocuments(long totalDocuments) {
        super.withTotalDocuments(totalDocuments);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
