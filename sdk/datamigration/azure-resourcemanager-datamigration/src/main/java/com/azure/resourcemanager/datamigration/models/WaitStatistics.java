// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Wait statistics gathered during query batch execution.
 */
@Immutable
public final class WaitStatistics implements JsonSerializable<WaitStatistics> {
    /*
     * Type of the Wait
     */
    private String waitType;

    /*
     * Total wait time in millisecond(s)
     */
    private Float waitTimeMs;

    /*
     * Total no. of waits
     */
    private Long waitCount;

    /**
     * Creates an instance of WaitStatistics class.
     */
    public WaitStatistics() {
    }

    /**
     * Get the waitType property: Type of the Wait.
     * 
     * @return the waitType value.
     */
    public String waitType() {
        return this.waitType;
    }

    /**
     * Get the waitTimeMs property: Total wait time in millisecond(s).
     * 
     * @return the waitTimeMs value.
     */
    public Float waitTimeMs() {
        return this.waitTimeMs;
    }

    /**
     * Get the waitCount property: Total no. of waits.
     * 
     * @return the waitCount value.
     */
    public Long waitCount() {
        return this.waitCount;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WaitStatistics from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WaitStatistics if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WaitStatistics.
     */
    public static WaitStatistics fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WaitStatistics deserializedWaitStatistics = new WaitStatistics();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("waitType".equals(fieldName)) {
                    deserializedWaitStatistics.waitType = reader.getString();
                } else if ("waitTimeMs".equals(fieldName)) {
                    deserializedWaitStatistics.waitTimeMs = reader.getNullable(JsonReader::getFloat);
                } else if ("waitCount".equals(fieldName)) {
                    deserializedWaitStatistics.waitCount = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWaitStatistics;
        });
    }
}
