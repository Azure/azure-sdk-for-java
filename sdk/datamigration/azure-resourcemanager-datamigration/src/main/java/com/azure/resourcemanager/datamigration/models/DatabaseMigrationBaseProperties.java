// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Database Migration Base Resource properties.
 */
@Fluent
public class DatabaseMigrationBaseProperties implements JsonSerializable<DatabaseMigrationBaseProperties> {
    /*
     * The kind property.
     */
    private ResourceType kind = ResourceType.fromString("DatabaseMigrationBaseProperties");

    /*
     * Resource Id of the target resource.
     */
    private String scope;

    /*
     * Provisioning State of migration. ProvisioningState as Succeeded implies that validations have been performed and
     * migration has started.
     */
    private ProvisioningState provisioningState;

    /*
     * Migration status.
     */
    private String migrationStatus;

    /*
     * Database migration start time.
     */
    private OffsetDateTime startedOn;

    /*
     * Database migration end time.
     */
    private OffsetDateTime endedOn;

    /*
     * Resource Id of the Migration Service.
     */
    private String migrationService;

    /*
     * ID for current migration operation.
     */
    private String migrationOperationId;

    /*
     * Error details in case of migration failure.
     */
    private ErrorInfo migrationFailureError;

    /*
     * Error message for migration provisioning failure, if any.
     */
    private String provisioningError;

    /**
     * Creates an instance of DatabaseMigrationBaseProperties class.
     */
    public DatabaseMigrationBaseProperties() {
    }

    /**
     * Get the kind property: The kind property.
     * 
     * @return the kind value.
     */
    public ResourceType kind() {
        return this.kind;
    }

    /**
     * Get the scope property: Resource Id of the target resource.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the scope property: Resource Id of the target resource.
     * 
     * @param scope the scope value to set.
     * @return the DatabaseMigrationBaseProperties object itself.
     */
    public DatabaseMigrationBaseProperties withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning State of migration. ProvisioningState as Succeeded implies that
     * validations have been performed and migration has started.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Provisioning State of migration. ProvisioningState as Succeeded implies that
     * validations have been performed and migration has started.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the DatabaseMigrationBaseProperties object itself.
     */
    DatabaseMigrationBaseProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the migrationStatus property: Migration status.
     * 
     * @return the migrationStatus value.
     */
    public String migrationStatus() {
        return this.migrationStatus;
    }

    /**
     * Set the migrationStatus property: Migration status.
     * 
     * @param migrationStatus the migrationStatus value to set.
     * @return the DatabaseMigrationBaseProperties object itself.
     */
    DatabaseMigrationBaseProperties withMigrationStatus(String migrationStatus) {
        this.migrationStatus = migrationStatus;
        return this;
    }

    /**
     * Get the startedOn property: Database migration start time.
     * 
     * @return the startedOn value.
     */
    public OffsetDateTime startedOn() {
        return this.startedOn;
    }

    /**
     * Set the startedOn property: Database migration start time.
     * 
     * @param startedOn the startedOn value to set.
     * @return the DatabaseMigrationBaseProperties object itself.
     */
    DatabaseMigrationBaseProperties withStartedOn(OffsetDateTime startedOn) {
        this.startedOn = startedOn;
        return this;
    }

    /**
     * Get the endedOn property: Database migration end time.
     * 
     * @return the endedOn value.
     */
    public OffsetDateTime endedOn() {
        return this.endedOn;
    }

    /**
     * Set the endedOn property: Database migration end time.
     * 
     * @param endedOn the endedOn value to set.
     * @return the DatabaseMigrationBaseProperties object itself.
     */
    DatabaseMigrationBaseProperties withEndedOn(OffsetDateTime endedOn) {
        this.endedOn = endedOn;
        return this;
    }

    /**
     * Get the migrationService property: Resource Id of the Migration Service.
     * 
     * @return the migrationService value.
     */
    public String migrationService() {
        return this.migrationService;
    }

    /**
     * Set the migrationService property: Resource Id of the Migration Service.
     * 
     * @param migrationService the migrationService value to set.
     * @return the DatabaseMigrationBaseProperties object itself.
     */
    public DatabaseMigrationBaseProperties withMigrationService(String migrationService) {
        this.migrationService = migrationService;
        return this;
    }

    /**
     * Get the migrationOperationId property: ID for current migration operation.
     * 
     * @return the migrationOperationId value.
     */
    public String migrationOperationId() {
        return this.migrationOperationId;
    }

    /**
     * Set the migrationOperationId property: ID for current migration operation.
     * 
     * @param migrationOperationId the migrationOperationId value to set.
     * @return the DatabaseMigrationBaseProperties object itself.
     */
    public DatabaseMigrationBaseProperties withMigrationOperationId(String migrationOperationId) {
        this.migrationOperationId = migrationOperationId;
        return this;
    }

    /**
     * Get the migrationFailureError property: Error details in case of migration failure.
     * 
     * @return the migrationFailureError value.
     */
    public ErrorInfo migrationFailureError() {
        return this.migrationFailureError;
    }

    /**
     * Set the migrationFailureError property: Error details in case of migration failure.
     * 
     * @param migrationFailureError the migrationFailureError value to set.
     * @return the DatabaseMigrationBaseProperties object itself.
     */
    DatabaseMigrationBaseProperties withMigrationFailureError(ErrorInfo migrationFailureError) {
        this.migrationFailureError = migrationFailureError;
        return this;
    }

    /**
     * Get the provisioningError property: Error message for migration provisioning failure, if any.
     * 
     * @return the provisioningError value.
     */
    public String provisioningError() {
        return this.provisioningError;
    }

    /**
     * Set the provisioningError property: Error message for migration provisioning failure, if any.
     * 
     * @param provisioningError the provisioningError value to set.
     * @return the DatabaseMigrationBaseProperties object itself.
     */
    public DatabaseMigrationBaseProperties withProvisioningError(String provisioningError) {
        this.provisioningError = provisioningError;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (migrationFailureError() != null) {
            migrationFailureError().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("scope", this.scope);
        jsonWriter.writeStringField("migrationService", this.migrationService);
        jsonWriter.writeStringField("migrationOperationId", this.migrationOperationId);
        jsonWriter.writeStringField("provisioningError", this.provisioningError);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabaseMigrationBaseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabaseMigrationBaseProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatabaseMigrationBaseProperties.
     */
    public static DatabaseMigrationBaseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("MongoToCosmosDbMongo".equals(discriminatorValue)) {
                    return DatabaseMigrationPropertiesCosmosDbMongo.fromJson(readerToUse.reset());
                } else if ("DatabaseMigrationProperties".equals(discriminatorValue)) {
                    return DatabaseMigrationProperties.fromJsonKnownDiscriminator(readerToUse.reset());
                } else if ("SqlDb".equals(discriminatorValue)) {
                    return DatabaseMigrationPropertiesSqlDb.fromJson(readerToUse.reset());
                } else if ("SqlMi".equals(discriminatorValue)) {
                    return DatabaseMigrationPropertiesSqlMi.fromJson(readerToUse.reset());
                } else if ("SqlVm".equals(discriminatorValue)) {
                    return DatabaseMigrationPropertiesSqlVm.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static DatabaseMigrationBaseProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabaseMigrationBaseProperties deserializedDatabaseMigrationBaseProperties
                = new DatabaseMigrationBaseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedDatabaseMigrationBaseProperties.kind = ResourceType.fromString(reader.getString());
                } else if ("scope".equals(fieldName)) {
                    deserializedDatabaseMigrationBaseProperties.scope = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDatabaseMigrationBaseProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("migrationStatus".equals(fieldName)) {
                    deserializedDatabaseMigrationBaseProperties.migrationStatus = reader.getString();
                } else if ("startedOn".equals(fieldName)) {
                    deserializedDatabaseMigrationBaseProperties.startedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endedOn".equals(fieldName)) {
                    deserializedDatabaseMigrationBaseProperties.endedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("migrationService".equals(fieldName)) {
                    deserializedDatabaseMigrationBaseProperties.migrationService = reader.getString();
                } else if ("migrationOperationId".equals(fieldName)) {
                    deserializedDatabaseMigrationBaseProperties.migrationOperationId = reader.getString();
                } else if ("migrationFailureError".equals(fieldName)) {
                    deserializedDatabaseMigrationBaseProperties.migrationFailureError = ErrorInfo.fromJson(reader);
                } else if ("provisioningError".equals(fieldName)) {
                    deserializedDatabaseMigrationBaseProperties.provisioningError = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabaseMigrationBaseProperties;
        });
    }
}
