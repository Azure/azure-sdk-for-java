// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Input for the task that validates connection to Azure SQL Database Managed Instance.
 */
@Fluent
public final class ConnectToTargetSqlMITaskInput implements JsonSerializable<ConnectToTargetSqlMITaskInput> {
    /*
     * Connection information for target SQL Server
     */
    private SqlConnectionInfo targetConnectionInfo;

    /*
     * Flag for whether to collect logins from target SQL MI server.
     */
    private Boolean collectLogins;

    /*
     * Flag for whether to collect agent jobs from target SQL MI server.
     */
    private Boolean collectAgentJobs;

    /*
     * Flag for whether to validate SSIS catalog is reachable on the target SQL MI server.
     */
    private Boolean validateSsisCatalogOnly;

    /**
     * Creates an instance of ConnectToTargetSqlMITaskInput class.
     */
    public ConnectToTargetSqlMITaskInput() {
    }

    /**
     * Get the targetConnectionInfo property: Connection information for target SQL Server.
     * 
     * @return the targetConnectionInfo value.
     */
    public SqlConnectionInfo targetConnectionInfo() {
        return this.targetConnectionInfo;
    }

    /**
     * Set the targetConnectionInfo property: Connection information for target SQL Server.
     * 
     * @param targetConnectionInfo the targetConnectionInfo value to set.
     * @return the ConnectToTargetSqlMITaskInput object itself.
     */
    public ConnectToTargetSqlMITaskInput withTargetConnectionInfo(SqlConnectionInfo targetConnectionInfo) {
        this.targetConnectionInfo = targetConnectionInfo;
        return this;
    }

    /**
     * Get the collectLogins property: Flag for whether to collect logins from target SQL MI server.
     * 
     * @return the collectLogins value.
     */
    public Boolean collectLogins() {
        return this.collectLogins;
    }

    /**
     * Set the collectLogins property: Flag for whether to collect logins from target SQL MI server.
     * 
     * @param collectLogins the collectLogins value to set.
     * @return the ConnectToTargetSqlMITaskInput object itself.
     */
    public ConnectToTargetSqlMITaskInput withCollectLogins(Boolean collectLogins) {
        this.collectLogins = collectLogins;
        return this;
    }

    /**
     * Get the collectAgentJobs property: Flag for whether to collect agent jobs from target SQL MI server.
     * 
     * @return the collectAgentJobs value.
     */
    public Boolean collectAgentJobs() {
        return this.collectAgentJobs;
    }

    /**
     * Set the collectAgentJobs property: Flag for whether to collect agent jobs from target SQL MI server.
     * 
     * @param collectAgentJobs the collectAgentJobs value to set.
     * @return the ConnectToTargetSqlMITaskInput object itself.
     */
    public ConnectToTargetSqlMITaskInput withCollectAgentJobs(Boolean collectAgentJobs) {
        this.collectAgentJobs = collectAgentJobs;
        return this;
    }

    /**
     * Get the validateSsisCatalogOnly property: Flag for whether to validate SSIS catalog is reachable on the target
     * SQL MI server.
     * 
     * @return the validateSsisCatalogOnly value.
     */
    public Boolean validateSsisCatalogOnly() {
        return this.validateSsisCatalogOnly;
    }

    /**
     * Set the validateSsisCatalogOnly property: Flag for whether to validate SSIS catalog is reachable on the target
     * SQL MI server.
     * 
     * @param validateSsisCatalogOnly the validateSsisCatalogOnly value to set.
     * @return the ConnectToTargetSqlMITaskInput object itself.
     */
    public ConnectToTargetSqlMITaskInput withValidateSsisCatalogOnly(Boolean validateSsisCatalogOnly) {
        this.validateSsisCatalogOnly = validateSsisCatalogOnly;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetConnectionInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetConnectionInfo in model ConnectToTargetSqlMITaskInput"));
        } else {
            targetConnectionInfo().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConnectToTargetSqlMITaskInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("targetConnectionInfo", this.targetConnectionInfo);
        jsonWriter.writeBooleanField("collectLogins", this.collectLogins);
        jsonWriter.writeBooleanField("collectAgentJobs", this.collectAgentJobs);
        jsonWriter.writeBooleanField("validateSsisCatalogOnly", this.validateSsisCatalogOnly);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectToTargetSqlMITaskInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectToTargetSqlMITaskInput if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConnectToTargetSqlMITaskInput.
     */
    public static ConnectToTargetSqlMITaskInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectToTargetSqlMITaskInput deserializedConnectToTargetSqlMITaskInput
                = new ConnectToTargetSqlMITaskInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetConnectionInfo".equals(fieldName)) {
                    deserializedConnectToTargetSqlMITaskInput.targetConnectionInfo = SqlConnectionInfo.fromJson(reader);
                } else if ("collectLogins".equals(fieldName)) {
                    deserializedConnectToTargetSqlMITaskInput.collectLogins
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("collectAgentJobs".equals(fieldName)) {
                    deserializedConnectToTargetSqlMITaskInput.collectAgentJobs
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("validateSsisCatalogOnly".equals(fieldName)) {
                    deserializedConnectToTargetSqlMITaskInput.validateSsisCatalogOnly
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectToTargetSqlMITaskInput;
        });
    }
}
