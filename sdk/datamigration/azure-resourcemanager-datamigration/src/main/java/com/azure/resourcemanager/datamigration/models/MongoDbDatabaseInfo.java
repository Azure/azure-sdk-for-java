// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Describes a database within a MongoDB data source.
 */
@Fluent
public final class MongoDbDatabaseInfo extends MongoDbObjectInfo {
    /*
     * A list of supported collections in a MongoDB database
     */
    private List<MongoDbCollectionInfo> collections;

    /*
     * Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if
     * necessary.
     */
    private boolean supportsSharding;

    /**
     * Creates an instance of MongoDbDatabaseInfo class.
     */
    public MongoDbDatabaseInfo() {
    }

    /**
     * Get the collections property: A list of supported collections in a MongoDB database.
     * 
     * @return the collections value.
     */
    public List<MongoDbCollectionInfo> collections() {
        return this.collections;
    }

    /**
     * Set the collections property: A list of supported collections in a MongoDB database.
     * 
     * @param collections the collections value to set.
     * @return the MongoDbDatabaseInfo object itself.
     */
    public MongoDbDatabaseInfo withCollections(List<MongoDbCollectionInfo> collections) {
        this.collections = collections;
        return this;
    }

    /**
     * Get the supportsSharding property: Whether the database has sharding enabled. Note that the migration task will
     * enable sharding on the target if necessary.
     * 
     * @return the supportsSharding value.
     */
    public boolean supportsSharding() {
        return this.supportsSharding;
    }

    /**
     * Set the supportsSharding property: Whether the database has sharding enabled. Note that the migration task will
     * enable sharding on the target if necessary.
     * 
     * @param supportsSharding the supportsSharding value to set.
     * @return the MongoDbDatabaseInfo object itself.
     */
    public MongoDbDatabaseInfo withSupportsSharding(boolean supportsSharding) {
        this.supportsSharding = supportsSharding;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbDatabaseInfo withAverageDocumentSize(long averageDocumentSize) {
        super.withAverageDocumentSize(averageDocumentSize);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbDatabaseInfo withDataSize(long dataSize) {
        super.withDataSize(dataSize);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbDatabaseInfo withDocumentCount(long documentCount) {
        super.withDocumentCount(documentCount);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbDatabaseInfo withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbDatabaseInfo withQualifiedName(String qualifiedName) {
        super.withQualifiedName(qualifiedName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (collections() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property collections in model MongoDbDatabaseInfo"));
        } else {
            collections().forEach(e -> e.validate());
        }
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model MongoDbDatabaseInfo"));
        }
        if (qualifiedName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property qualifiedName in model MongoDbDatabaseInfo"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MongoDbDatabaseInfo.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("averageDocumentSize", averageDocumentSize());
        jsonWriter.writeLongField("dataSize", dataSize());
        jsonWriter.writeLongField("documentCount", documentCount());
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeStringField("qualifiedName", qualifiedName());
        jsonWriter.writeArrayField("collections", this.collections, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("supportsSharding", this.supportsSharding);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoDbDatabaseInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoDbDatabaseInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MongoDbDatabaseInfo.
     */
    public static MongoDbDatabaseInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoDbDatabaseInfo deserializedMongoDbDatabaseInfo = new MongoDbDatabaseInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("averageDocumentSize".equals(fieldName)) {
                    deserializedMongoDbDatabaseInfo.withAverageDocumentSize(reader.getLong());
                } else if ("dataSize".equals(fieldName)) {
                    deserializedMongoDbDatabaseInfo.withDataSize(reader.getLong());
                } else if ("documentCount".equals(fieldName)) {
                    deserializedMongoDbDatabaseInfo.withDocumentCount(reader.getLong());
                } else if ("name".equals(fieldName)) {
                    deserializedMongoDbDatabaseInfo.withName(reader.getString());
                } else if ("qualifiedName".equals(fieldName)) {
                    deserializedMongoDbDatabaseInfo.withQualifiedName(reader.getString());
                } else if ("collections".equals(fieldName)) {
                    List<MongoDbCollectionInfo> collections
                        = reader.readArray(reader1 -> MongoDbCollectionInfo.fromJson(reader1));
                    deserializedMongoDbDatabaseInfo.collections = collections;
                } else if ("supportsSharding".equals(fieldName)) {
                    deserializedMongoDbDatabaseInfo.supportsSharding = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoDbDatabaseInfo;
        });
    }
}
