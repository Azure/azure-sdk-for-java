// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Describes a database within a MongoDB data source. */
@Fluent
public final class MongoDbDatabaseInfo extends MongoDbObjectInfo {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MongoDbDatabaseInfo.class);

    /*
     * A list of supported collections in a MongoDB database
     */
    @JsonProperty(value = "collections", required = true)
    private List<MongoDbCollectionInfo> collections;

    /*
     * Whether the database has sharding enabled. Note that the migration task
     * will enable sharding on the target if necessary.
     */
    @JsonProperty(value = "supportsSharding", required = true)
    private boolean supportsSharding;

    /**
     * Get the collections property: A list of supported collections in a MongoDB database.
     *
     * @return the collections value.
     */
    public List<MongoDbCollectionInfo> collections() {
        return this.collections;
    }

    /**
     * Set the collections property: A list of supported collections in a MongoDB database.
     *
     * @param collections the collections value to set.
     * @return the MongoDbDatabaseInfo object itself.
     */
    public MongoDbDatabaseInfo withCollections(List<MongoDbCollectionInfo> collections) {
        this.collections = collections;
        return this;
    }

    /**
     * Get the supportsSharding property: Whether the database has sharding enabled. Note that the migration task will
     * enable sharding on the target if necessary.
     *
     * @return the supportsSharding value.
     */
    public boolean supportsSharding() {
        return this.supportsSharding;
    }

    /**
     * Set the supportsSharding property: Whether the database has sharding enabled. Note that the migration task will
     * enable sharding on the target if necessary.
     *
     * @param supportsSharding the supportsSharding value to set.
     * @return the MongoDbDatabaseInfo object itself.
     */
    public MongoDbDatabaseInfo withSupportsSharding(boolean supportsSharding) {
        this.supportsSharding = supportsSharding;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbDatabaseInfo withAverageDocumentSize(long averageDocumentSize) {
        super.withAverageDocumentSize(averageDocumentSize);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbDatabaseInfo withDataSize(long dataSize) {
        super.withDataSize(dataSize);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbDatabaseInfo withDocumentCount(long documentCount) {
        super.withDocumentCount(documentCount);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbDatabaseInfo withName(String name) {
        super.withName(name);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbDatabaseInfo withQualifiedName(String qualifiedName) {
        super.withQualifiedName(qualifiedName);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (collections() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property collections in model MongoDbDatabaseInfo"));
        } else {
            collections().forEach(e -> e.validate());
        }
    }
}
