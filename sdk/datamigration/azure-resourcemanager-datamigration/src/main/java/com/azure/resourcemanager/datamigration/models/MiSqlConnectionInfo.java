// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties required to create a connection to Azure SQL database Managed instance.
 */
@Fluent
public final class MiSqlConnectionInfo extends ConnectionInfo {
    /*
     * Type of connection info
     */
    private String type = "MiSqlConnectionInfo";

    /*
     * Resource id for Azure SQL database Managed instance
     */
    private String managedInstanceResourceId;

    /**
     * Creates an instance of MiSqlConnectionInfo class.
     */
    public MiSqlConnectionInfo() {
    }

    /**
     * Get the type property: Type of connection info.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the managedInstanceResourceId property: Resource id for Azure SQL database Managed instance.
     * 
     * @return the managedInstanceResourceId value.
     */
    public String managedInstanceResourceId() {
        return this.managedInstanceResourceId;
    }

    /**
     * Set the managedInstanceResourceId property: Resource id for Azure SQL database Managed instance.
     * 
     * @param managedInstanceResourceId the managedInstanceResourceId value to set.
     * @return the MiSqlConnectionInfo object itself.
     */
    public MiSqlConnectionInfo withManagedInstanceResourceId(String managedInstanceResourceId) {
        this.managedInstanceResourceId = managedInstanceResourceId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MiSqlConnectionInfo withUsername(String username) {
        super.withUsername(username);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MiSqlConnectionInfo withPassword(String password) {
        super.withPassword(password);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (managedInstanceResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property managedInstanceResourceId in model MiSqlConnectionInfo"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MiSqlConnectionInfo.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("userName", username());
        jsonWriter.writeStringField("password", password());
        jsonWriter.writeStringField("managedInstanceResourceId", this.managedInstanceResourceId);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MiSqlConnectionInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MiSqlConnectionInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MiSqlConnectionInfo.
     */
    public static MiSqlConnectionInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MiSqlConnectionInfo deserializedMiSqlConnectionInfo = new MiSqlConnectionInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userName".equals(fieldName)) {
                    deserializedMiSqlConnectionInfo.withUsername(reader.getString());
                } else if ("password".equals(fieldName)) {
                    deserializedMiSqlConnectionInfo.withPassword(reader.getString());
                } else if ("managedInstanceResourceId".equals(fieldName)) {
                    deserializedMiSqlConnectionInfo.managedInstanceResourceId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedMiSqlConnectionInfo.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMiSqlConnectionInfo;
        });
    }
}
