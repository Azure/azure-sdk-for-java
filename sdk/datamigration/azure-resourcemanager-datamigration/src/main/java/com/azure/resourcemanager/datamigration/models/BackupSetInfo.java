// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Information of backup set.
 */
@Fluent
public final class BackupSetInfo implements JsonSerializable<BackupSetInfo> {
    /*
     * Id for the set of backup files
     */
    private String backupSetId;

    /*
     * First log sequence number of the backup file
     */
    private String firstLsn;

    /*
     * Last log sequence number of the backup file
     */
    private String lastLsn;

    /*
     * Last modified time of the backup file in share location
     */
    private OffsetDateTime lastModifiedTime;

    /*
     * Enum of the different backup types
     */
    private BackupType backupType;

    /*
     * List of files in the backup set
     */
    private List<BackupFileInfo> listOfBackupFiles;

    /*
     * Name of the database to which the backup set belongs
     */
    private String databaseName;

    /*
     * Date and time that the backup operation began
     */
    private OffsetDateTime backupStartDate;

    /*
     * Date and time that the backup operation finished
     */
    private OffsetDateTime backupFinishedDate;

    /*
     * Whether the backup set is restored or not
     */
    private Boolean isBackupRestored;

    /**
     * Creates an instance of BackupSetInfo class.
     */
    public BackupSetInfo() {
    }

    /**
     * Get the backupSetId property: Id for the set of backup files.
     * 
     * @return the backupSetId value.
     */
    public String backupSetId() {
        return this.backupSetId;
    }

    /**
     * Set the backupSetId property: Id for the set of backup files.
     * 
     * @param backupSetId the backupSetId value to set.
     * @return the BackupSetInfo object itself.
     */
    public BackupSetInfo withBackupSetId(String backupSetId) {
        this.backupSetId = backupSetId;
        return this;
    }

    /**
     * Get the firstLsn property: First log sequence number of the backup file.
     * 
     * @return the firstLsn value.
     */
    public String firstLsn() {
        return this.firstLsn;
    }

    /**
     * Set the firstLsn property: First log sequence number of the backup file.
     * 
     * @param firstLsn the firstLsn value to set.
     * @return the BackupSetInfo object itself.
     */
    public BackupSetInfo withFirstLsn(String firstLsn) {
        this.firstLsn = firstLsn;
        return this;
    }

    /**
     * Get the lastLsn property: Last log sequence number of the backup file.
     * 
     * @return the lastLsn value.
     */
    public String lastLsn() {
        return this.lastLsn;
    }

    /**
     * Set the lastLsn property: Last log sequence number of the backup file.
     * 
     * @param lastLsn the lastLsn value to set.
     * @return the BackupSetInfo object itself.
     */
    public BackupSetInfo withLastLsn(String lastLsn) {
        this.lastLsn = lastLsn;
        return this;
    }

    /**
     * Get the lastModifiedTime property: Last modified time of the backup file in share location.
     * 
     * @return the lastModifiedTime value.
     */
    public OffsetDateTime lastModifiedTime() {
        return this.lastModifiedTime;
    }

    /**
     * Set the lastModifiedTime property: Last modified time of the backup file in share location.
     * 
     * @param lastModifiedTime the lastModifiedTime value to set.
     * @return the BackupSetInfo object itself.
     */
    public BackupSetInfo withLastModifiedTime(OffsetDateTime lastModifiedTime) {
        this.lastModifiedTime = lastModifiedTime;
        return this;
    }

    /**
     * Get the backupType property: Enum of the different backup types.
     * 
     * @return the backupType value.
     */
    public BackupType backupType() {
        return this.backupType;
    }

    /**
     * Set the backupType property: Enum of the different backup types.
     * 
     * @param backupType the backupType value to set.
     * @return the BackupSetInfo object itself.
     */
    public BackupSetInfo withBackupType(BackupType backupType) {
        this.backupType = backupType;
        return this;
    }

    /**
     * Get the listOfBackupFiles property: List of files in the backup set.
     * 
     * @return the listOfBackupFiles value.
     */
    public List<BackupFileInfo> listOfBackupFiles() {
        return this.listOfBackupFiles;
    }

    /**
     * Set the listOfBackupFiles property: List of files in the backup set.
     * 
     * @param listOfBackupFiles the listOfBackupFiles value to set.
     * @return the BackupSetInfo object itself.
     */
    public BackupSetInfo withListOfBackupFiles(List<BackupFileInfo> listOfBackupFiles) {
        this.listOfBackupFiles = listOfBackupFiles;
        return this;
    }

    /**
     * Get the databaseName property: Name of the database to which the backup set belongs.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: Name of the database to which the backup set belongs.
     * 
     * @param databaseName the databaseName value to set.
     * @return the BackupSetInfo object itself.
     */
    public BackupSetInfo withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the backupStartDate property: Date and time that the backup operation began.
     * 
     * @return the backupStartDate value.
     */
    public OffsetDateTime backupStartDate() {
        return this.backupStartDate;
    }

    /**
     * Set the backupStartDate property: Date and time that the backup operation began.
     * 
     * @param backupStartDate the backupStartDate value to set.
     * @return the BackupSetInfo object itself.
     */
    public BackupSetInfo withBackupStartDate(OffsetDateTime backupStartDate) {
        this.backupStartDate = backupStartDate;
        return this;
    }

    /**
     * Get the backupFinishedDate property: Date and time that the backup operation finished.
     * 
     * @return the backupFinishedDate value.
     */
    public OffsetDateTime backupFinishedDate() {
        return this.backupFinishedDate;
    }

    /**
     * Set the backupFinishedDate property: Date and time that the backup operation finished.
     * 
     * @param backupFinishedDate the backupFinishedDate value to set.
     * @return the BackupSetInfo object itself.
     */
    public BackupSetInfo withBackupFinishedDate(OffsetDateTime backupFinishedDate) {
        this.backupFinishedDate = backupFinishedDate;
        return this;
    }

    /**
     * Get the isBackupRestored property: Whether the backup set is restored or not.
     * 
     * @return the isBackupRestored value.
     */
    public Boolean isBackupRestored() {
        return this.isBackupRestored;
    }

    /**
     * Set the isBackupRestored property: Whether the backup set is restored or not.
     * 
     * @param isBackupRestored the isBackupRestored value to set.
     * @return the BackupSetInfo object itself.
     */
    public BackupSetInfo withIsBackupRestored(Boolean isBackupRestored) {
        this.isBackupRestored = isBackupRestored;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (listOfBackupFiles() != null) {
            listOfBackupFiles().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("backupSetId", this.backupSetId);
        jsonWriter.writeStringField("firstLsn", this.firstLsn);
        jsonWriter.writeStringField("lastLsn", this.lastLsn);
        jsonWriter.writeStringField("lastModifiedTime",
            this.lastModifiedTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastModifiedTime));
        jsonWriter.writeStringField("backupType", this.backupType == null ? null : this.backupType.toString());
        jsonWriter.writeArrayField("listOfBackupFiles", this.listOfBackupFiles,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("databaseName", this.databaseName);
        jsonWriter.writeStringField("backupStartDate",
            this.backupStartDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.backupStartDate));
        jsonWriter.writeStringField("backupFinishedDate",
            this.backupFinishedDate == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.backupFinishedDate));
        jsonWriter.writeBooleanField("isBackupRestored", this.isBackupRestored);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BackupSetInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BackupSetInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BackupSetInfo.
     */
    public static BackupSetInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BackupSetInfo deserializedBackupSetInfo = new BackupSetInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("backupSetId".equals(fieldName)) {
                    deserializedBackupSetInfo.backupSetId = reader.getString();
                } else if ("firstLsn".equals(fieldName)) {
                    deserializedBackupSetInfo.firstLsn = reader.getString();
                } else if ("lastLsn".equals(fieldName)) {
                    deserializedBackupSetInfo.lastLsn = reader.getString();
                } else if ("lastModifiedTime".equals(fieldName)) {
                    deserializedBackupSetInfo.lastModifiedTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("backupType".equals(fieldName)) {
                    deserializedBackupSetInfo.backupType = BackupType.fromString(reader.getString());
                } else if ("listOfBackupFiles".equals(fieldName)) {
                    List<BackupFileInfo> listOfBackupFiles
                        = reader.readArray(reader1 -> BackupFileInfo.fromJson(reader1));
                    deserializedBackupSetInfo.listOfBackupFiles = listOfBackupFiles;
                } else if ("databaseName".equals(fieldName)) {
                    deserializedBackupSetInfo.databaseName = reader.getString();
                } else if ("backupStartDate".equals(fieldName)) {
                    deserializedBackupSetInfo.backupStartDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("backupFinishedDate".equals(fieldName)) {
                    deserializedBackupSetInfo.backupFinishedDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("isBackupRestored".equals(fieldName)) {
                    deserializedBackupSetInfo.isBackupRestored = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBackupSetInfo;
        });
    }
}
