// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Base class for migration task input.
 */
@Fluent
public class SqlMigrationTaskInput implements JsonSerializable<SqlMigrationTaskInput> {
    /*
     * Information for connecting to source
     */
    private SqlConnectionInfo sourceConnectionInfo;

    /*
     * Information for connecting to target
     */
    private SqlConnectionInfo targetConnectionInfo;

    /**
     * Creates an instance of SqlMigrationTaskInput class.
     */
    public SqlMigrationTaskInput() {
    }

    /**
     * Get the sourceConnectionInfo property: Information for connecting to source.
     * 
     * @return the sourceConnectionInfo value.
     */
    public SqlConnectionInfo sourceConnectionInfo() {
        return this.sourceConnectionInfo;
    }

    /**
     * Set the sourceConnectionInfo property: Information for connecting to source.
     * 
     * @param sourceConnectionInfo the sourceConnectionInfo value to set.
     * @return the SqlMigrationTaskInput object itself.
     */
    public SqlMigrationTaskInput withSourceConnectionInfo(SqlConnectionInfo sourceConnectionInfo) {
        this.sourceConnectionInfo = sourceConnectionInfo;
        return this;
    }

    /**
     * Get the targetConnectionInfo property: Information for connecting to target.
     * 
     * @return the targetConnectionInfo value.
     */
    public SqlConnectionInfo targetConnectionInfo() {
        return this.targetConnectionInfo;
    }

    /**
     * Set the targetConnectionInfo property: Information for connecting to target.
     * 
     * @param targetConnectionInfo the targetConnectionInfo value to set.
     * @return the SqlMigrationTaskInput object itself.
     */
    public SqlMigrationTaskInput withTargetConnectionInfo(SqlConnectionInfo targetConnectionInfo) {
        this.targetConnectionInfo = targetConnectionInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceConnectionInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceConnectionInfo in model SqlMigrationTaskInput"));
        } else {
            sourceConnectionInfo().validate();
        }
        if (targetConnectionInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetConnectionInfo in model SqlMigrationTaskInput"));
        } else {
            targetConnectionInfo().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SqlMigrationTaskInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("sourceConnectionInfo", this.sourceConnectionInfo);
        jsonWriter.writeJsonField("targetConnectionInfo", this.targetConnectionInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlMigrationTaskInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlMigrationTaskInput if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SqlMigrationTaskInput.
     */
    public static SqlMigrationTaskInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlMigrationTaskInput deserializedSqlMigrationTaskInput = new SqlMigrationTaskInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceConnectionInfo".equals(fieldName)) {
                    deserializedSqlMigrationTaskInput.sourceConnectionInfo = SqlConnectionInfo.fromJson(reader);
                } else if ("targetConnectionInfo".equals(fieldName)) {
                    deserializedSqlMigrationTaskInput.targetConnectionInfo = SqlConnectionInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlMigrationTaskInput;
        });
    }
}
