// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies resource limits for the migration.
 */
@Fluent
public final class MongoDbThrottlingSettings implements JsonSerializable<MongoDbThrottlingSettings> {
    /*
     * The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
     */
    private Integer minFreeCpu;

    /*
     * The number of megabytes of RAM that the migrator will try to avoid using
     */
    private Integer minFreeMemoryMb;

    /*
     * The maximum number of work items (e.g. collection copies) that will be processed in parallel
     */
    private Integer maxParallelism;

    /**
     * Creates an instance of MongoDbThrottlingSettings class.
     */
    public MongoDbThrottlingSettings() {
    }

    /**
     * Get the minFreeCpu property: The percentage of CPU time that the migrator will try to avoid using, from 0 to 100.
     * 
     * @return the minFreeCpu value.
     */
    public Integer minFreeCpu() {
        return this.minFreeCpu;
    }

    /**
     * Set the minFreeCpu property: The percentage of CPU time that the migrator will try to avoid using, from 0 to 100.
     * 
     * @param minFreeCpu the minFreeCpu value to set.
     * @return the MongoDbThrottlingSettings object itself.
     */
    public MongoDbThrottlingSettings withMinFreeCpu(Integer minFreeCpu) {
        this.minFreeCpu = minFreeCpu;
        return this;
    }

    /**
     * Get the minFreeMemoryMb property: The number of megabytes of RAM that the migrator will try to avoid using.
     * 
     * @return the minFreeMemoryMb value.
     */
    public Integer minFreeMemoryMb() {
        return this.minFreeMemoryMb;
    }

    /**
     * Set the minFreeMemoryMb property: The number of megabytes of RAM that the migrator will try to avoid using.
     * 
     * @param minFreeMemoryMb the minFreeMemoryMb value to set.
     * @return the MongoDbThrottlingSettings object itself.
     */
    public MongoDbThrottlingSettings withMinFreeMemoryMb(Integer minFreeMemoryMb) {
        this.minFreeMemoryMb = minFreeMemoryMb;
        return this;
    }

    /**
     * Get the maxParallelism property: The maximum number of work items (e.g. collection copies) that will be processed
     * in parallel.
     * 
     * @return the maxParallelism value.
     */
    public Integer maxParallelism() {
        return this.maxParallelism;
    }

    /**
     * Set the maxParallelism property: The maximum number of work items (e.g. collection copies) that will be processed
     * in parallel.
     * 
     * @param maxParallelism the maxParallelism value to set.
     * @return the MongoDbThrottlingSettings object itself.
     */
    public MongoDbThrottlingSettings withMaxParallelism(Integer maxParallelism) {
        this.maxParallelism = maxParallelism;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("minFreeCpu", this.minFreeCpu);
        jsonWriter.writeNumberField("minFreeMemoryMb", this.minFreeMemoryMb);
        jsonWriter.writeNumberField("maxParallelism", this.maxParallelism);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoDbThrottlingSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoDbThrottlingSettings if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MongoDbThrottlingSettings.
     */
    public static MongoDbThrottlingSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoDbThrottlingSettings deserializedMongoDbThrottlingSettings = new MongoDbThrottlingSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("minFreeCpu".equals(fieldName)) {
                    deserializedMongoDbThrottlingSettings.minFreeCpu = reader.getNullable(JsonReader::getInt);
                } else if ("minFreeMemoryMb".equals(fieldName)) {
                    deserializedMongoDbThrottlingSettings.minFreeMemoryMb = reader.getNullable(JsonReader::getInt);
                } else if ("maxParallelism".equals(fieldName)) {
                    deserializedMongoDbThrottlingSettings.maxParallelism = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoDbThrottlingSettings;
        });
    }
}
