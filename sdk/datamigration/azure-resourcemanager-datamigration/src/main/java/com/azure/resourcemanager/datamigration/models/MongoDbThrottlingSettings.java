// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Specifies resource limits for the migration. */
@Fluent
public final class MongoDbThrottlingSettings {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MongoDbThrottlingSettings.class);

    /*
     * The percentage of CPU time that the migrator will try to avoid using,
     * from 0 to 100
     */
    @JsonProperty(value = "minFreeCpu")
    private Integer minFreeCpu;

    /*
     * The number of megabytes of RAM that the migrator will try to avoid using
     */
    @JsonProperty(value = "minFreeMemoryMb")
    private Integer minFreeMemoryMb;

    /*
     * The maximum number of work items (e.g. collection copies) that will be
     * processed in parallel
     */
    @JsonProperty(value = "maxParallelism")
    private Integer maxParallelism;

    /**
     * Get the minFreeCpu property: The percentage of CPU time that the migrator will try to avoid using, from 0 to 100.
     *
     * @return the minFreeCpu value.
     */
    public Integer minFreeCpu() {
        return this.minFreeCpu;
    }

    /**
     * Set the minFreeCpu property: The percentage of CPU time that the migrator will try to avoid using, from 0 to 100.
     *
     * @param minFreeCpu the minFreeCpu value to set.
     * @return the MongoDbThrottlingSettings object itself.
     */
    public MongoDbThrottlingSettings withMinFreeCpu(Integer minFreeCpu) {
        this.minFreeCpu = minFreeCpu;
        return this;
    }

    /**
     * Get the minFreeMemoryMb property: The number of megabytes of RAM that the migrator will try to avoid using.
     *
     * @return the minFreeMemoryMb value.
     */
    public Integer minFreeMemoryMb() {
        return this.minFreeMemoryMb;
    }

    /**
     * Set the minFreeMemoryMb property: The number of megabytes of RAM that the migrator will try to avoid using.
     *
     * @param minFreeMemoryMb the minFreeMemoryMb value to set.
     * @return the MongoDbThrottlingSettings object itself.
     */
    public MongoDbThrottlingSettings withMinFreeMemoryMb(Integer minFreeMemoryMb) {
        this.minFreeMemoryMb = minFreeMemoryMb;
        return this;
    }

    /**
     * Get the maxParallelism property: The maximum number of work items (e.g. collection copies) that will be processed
     * in parallel.
     *
     * @return the maxParallelism value.
     */
    public Integer maxParallelism() {
        return this.maxParallelism;
    }

    /**
     * Set the maxParallelism property: The maximum number of work items (e.g. collection copies) that will be processed
     * in parallel.
     *
     * @param maxParallelism the maxParallelism value to set.
     * @return the MongoDbThrottlingSettings object itself.
     */
    public MongoDbThrottlingSettings withMaxParallelism(Integer maxParallelism) {
        this.maxParallelism = maxParallelism;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
