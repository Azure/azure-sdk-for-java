// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Base class for file properties. */
@Fluent
public final class ProjectFileProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ProjectFileProperties.class);

    /*
     * Optional File extension. If submitted it should not have a leading
     * period and must match the extension from filePath.
     */
    @JsonProperty(value = "extension")
    private String extension;

    /*
     * Relative path of this file resource. This property can be set when
     * creating or updating the file resource.
     */
    @JsonProperty(value = "filePath")
    private String filePath;

    /*
     * Modification DateTime.
     */
    @JsonProperty(value = "lastModified", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastModified;

    /*
     * File content type. This property can be modified to reflect the file
     * content type.
     */
    @JsonProperty(value = "mediaType")
    private String mediaType;

    /*
     * File size.
     */
    @JsonProperty(value = "size", access = JsonProperty.Access.WRITE_ONLY)
    private Long size;

    /**
     * Get the extension property: Optional File extension. If submitted it should not have a leading period and must
     * match the extension from filePath.
     *
     * @return the extension value.
     */
    public String extension() {
        return this.extension;
    }

    /**
     * Set the extension property: Optional File extension. If submitted it should not have a leading period and must
     * match the extension from filePath.
     *
     * @param extension the extension value to set.
     * @return the ProjectFileProperties object itself.
     */
    public ProjectFileProperties withExtension(String extension) {
        this.extension = extension;
        return this;
    }

    /**
     * Get the filePath property: Relative path of this file resource. This property can be set when creating or
     * updating the file resource.
     *
     * @return the filePath value.
     */
    public String filePath() {
        return this.filePath;
    }

    /**
     * Set the filePath property: Relative path of this file resource. This property can be set when creating or
     * updating the file resource.
     *
     * @param filePath the filePath value to set.
     * @return the ProjectFileProperties object itself.
     */
    public ProjectFileProperties withFilePath(String filePath) {
        this.filePath = filePath;
        return this;
    }

    /**
     * Get the lastModified property: Modification DateTime.
     *
     * @return the lastModified value.
     */
    public OffsetDateTime lastModified() {
        return this.lastModified;
    }

    /**
     * Get the mediaType property: File content type. This property can be modified to reflect the file content type.
     *
     * @return the mediaType value.
     */
    public String mediaType() {
        return this.mediaType;
    }

    /**
     * Set the mediaType property: File content type. This property can be modified to reflect the file content type.
     *
     * @param mediaType the mediaType value to set.
     * @return the ProjectFileProperties object itself.
     */
    public ProjectFileProperties withMediaType(String mediaType) {
        this.mediaType = mediaType;
        return this;
    }

    /**
     * Get the size property: File size.
     *
     * @return the size value.
     */
    public Long size() {
        return this.size;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
