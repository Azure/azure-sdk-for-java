// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Base class for file properties.
 */
@Fluent
public final class ProjectFileProperties implements JsonSerializable<ProjectFileProperties> {
    /*
     * Optional File extension. If submitted it should not have a leading period and must match the extension from
     * filePath.
     */
    private String extension;

    /*
     * Relative path of this file resource. This property can be set when creating or updating the file resource.
     */
    private String filePath;

    /*
     * Modification DateTime.
     */
    private OffsetDateTime lastModified;

    /*
     * File content type. This property can be modified to reflect the file content type.
     */
    private String mediaType;

    /*
     * File size.
     */
    private Long size;

    /**
     * Creates an instance of ProjectFileProperties class.
     */
    public ProjectFileProperties() {
    }

    /**
     * Get the extension property: Optional File extension. If submitted it should not have a leading period and must
     * match the extension from filePath.
     * 
     * @return the extension value.
     */
    public String extension() {
        return this.extension;
    }

    /**
     * Set the extension property: Optional File extension. If submitted it should not have a leading period and must
     * match the extension from filePath.
     * 
     * @param extension the extension value to set.
     * @return the ProjectFileProperties object itself.
     */
    public ProjectFileProperties withExtension(String extension) {
        this.extension = extension;
        return this;
    }

    /**
     * Get the filePath property: Relative path of this file resource. This property can be set when creating or
     * updating the file resource.
     * 
     * @return the filePath value.
     */
    public String filePath() {
        return this.filePath;
    }

    /**
     * Set the filePath property: Relative path of this file resource. This property can be set when creating or
     * updating the file resource.
     * 
     * @param filePath the filePath value to set.
     * @return the ProjectFileProperties object itself.
     */
    public ProjectFileProperties withFilePath(String filePath) {
        this.filePath = filePath;
        return this;
    }

    /**
     * Get the lastModified property: Modification DateTime.
     * 
     * @return the lastModified value.
     */
    public OffsetDateTime lastModified() {
        return this.lastModified;
    }

    /**
     * Get the mediaType property: File content type. This property can be modified to reflect the file content type.
     * 
     * @return the mediaType value.
     */
    public String mediaType() {
        return this.mediaType;
    }

    /**
     * Set the mediaType property: File content type. This property can be modified to reflect the file content type.
     * 
     * @param mediaType the mediaType value to set.
     * @return the ProjectFileProperties object itself.
     */
    public ProjectFileProperties withMediaType(String mediaType) {
        this.mediaType = mediaType;
        return this;
    }

    /**
     * Get the size property: File size.
     * 
     * @return the size value.
     */
    public Long size() {
        return this.size;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("extension", this.extension);
        jsonWriter.writeStringField("filePath", this.filePath);
        jsonWriter.writeStringField("mediaType", this.mediaType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProjectFileProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProjectFileProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProjectFileProperties.
     */
    public static ProjectFileProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProjectFileProperties deserializedProjectFileProperties = new ProjectFileProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("extension".equals(fieldName)) {
                    deserializedProjectFileProperties.extension = reader.getString();
                } else if ("filePath".equals(fieldName)) {
                    deserializedProjectFileProperties.filePath = reader.getString();
                } else if ("lastModified".equals(fieldName)) {
                    deserializedProjectFileProperties.lastModified = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("mediaType".equals(fieldName)) {
                    deserializedProjectFileProperties.mediaType = reader.getString();
                } else if ("size".equals(fieldName)) {
                    deserializedProjectFileProperties.size = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProjectFileProperties;
        });
    }
}
