// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Results for checksum based Data Integrity validation results. */
@Fluent
public final class DataIntegrityValidationResult {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DataIntegrityValidationResult.class);

    /*
     * List of failed table names of source and target pair
     */
    @JsonProperty(value = "failedObjects")
    private Map<String, String> failedObjects;

    /*
     * List of errors that happened while performing data integrity validation
     */
    @JsonProperty(value = "validationErrors")
    private ValidationError validationErrors;

    /**
     * Get the failedObjects property: List of failed table names of source and target pair.
     *
     * @return the failedObjects value.
     */
    public Map<String, String> failedObjects() {
        return this.failedObjects;
    }

    /**
     * Set the failedObjects property: List of failed table names of source and target pair.
     *
     * @param failedObjects the failedObjects value to set.
     * @return the DataIntegrityValidationResult object itself.
     */
    public DataIntegrityValidationResult withFailedObjects(Map<String, String> failedObjects) {
        this.failedObjects = failedObjects;
        return this;
    }

    /**
     * Get the validationErrors property: List of errors that happened while performing data integrity validation.
     *
     * @return the validationErrors value.
     */
    public ValidationError validationErrors() {
        return this.validationErrors;
    }

    /**
     * Set the validationErrors property: List of errors that happened while performing data integrity validation.
     *
     * @param validationErrors the validationErrors value to set.
     * @return the DataIntegrityValidationResult object itself.
     */
    public DataIntegrityValidationResult withValidationErrors(ValidationError validationErrors) {
        this.validationErrors = validationErrors;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (validationErrors() != null) {
            validationErrors().validate();
        }
    }
}
