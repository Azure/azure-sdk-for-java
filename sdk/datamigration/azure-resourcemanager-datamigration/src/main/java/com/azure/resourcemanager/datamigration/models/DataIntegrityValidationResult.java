// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Results for checksum based Data Integrity validation results.
 */
@Immutable
public final class DataIntegrityValidationResult implements JsonSerializable<DataIntegrityValidationResult> {
    /*
     * List of failed table names of source and target pair
     */
    private Map<String, String> failedObjects;

    /*
     * List of errors that happened while performing data integrity validation
     */
    private ValidationError validationErrors;

    /**
     * Creates an instance of DataIntegrityValidationResult class.
     */
    public DataIntegrityValidationResult() {
    }

    /**
     * Get the failedObjects property: List of failed table names of source and target pair.
     * 
     * @return the failedObjects value.
     */
    public Map<String, String> failedObjects() {
        return this.failedObjects;
    }

    /**
     * Get the validationErrors property: List of errors that happened while performing data integrity validation.
     * 
     * @return the validationErrors value.
     */
    public ValidationError validationErrors() {
        return this.validationErrors;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (validationErrors() != null) {
            validationErrors().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataIntegrityValidationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataIntegrityValidationResult if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataIntegrityValidationResult.
     */
    public static DataIntegrityValidationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataIntegrityValidationResult deserializedDataIntegrityValidationResult
                = new DataIntegrityValidationResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("failedObjects".equals(fieldName)) {
                    Map<String, String> failedObjects = reader.readMap(reader1 -> reader1.getString());
                    deserializedDataIntegrityValidationResult.failedObjects = failedObjects;
                } else if ("validationErrors".equals(fieldName)) {
                    deserializedDataIntegrityValidationResult.validationErrors = ValidationError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataIntegrityValidationResult;
        });
    }
}
