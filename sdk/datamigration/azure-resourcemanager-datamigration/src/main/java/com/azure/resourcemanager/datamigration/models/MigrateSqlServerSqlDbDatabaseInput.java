// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Database specific information for SQL to Azure SQL DB migration task inputs.
 */
@Fluent
public final class MigrateSqlServerSqlDbDatabaseInput implements JsonSerializable<MigrateSqlServerSqlDbDatabaseInput> {
    /*
     * Name of the database
     */
    private String name;

    /*
     * Name of target database. Note: Target database will be truncated before starting migration.
     */
    private String targetDatabaseName;

    /*
     * Whether to set database read only before migration
     */
    private Boolean makeSourceDbReadOnly;

    /*
     * Mapping of source to target tables
     */
    private Map<String, String> tableMap;

    /**
     * Creates an instance of MigrateSqlServerSqlDbDatabaseInput class.
     */
    public MigrateSqlServerSqlDbDatabaseInput() {
    }

    /**
     * Get the name property: Name of the database.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the database.
     * 
     * @param name the name value to set.
     * @return the MigrateSqlServerSqlDbDatabaseInput object itself.
     */
    public MigrateSqlServerSqlDbDatabaseInput withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the targetDatabaseName property: Name of target database. Note: Target database will be truncated before
     * starting migration.
     * 
     * @return the targetDatabaseName value.
     */
    public String targetDatabaseName() {
        return this.targetDatabaseName;
    }

    /**
     * Set the targetDatabaseName property: Name of target database. Note: Target database will be truncated before
     * starting migration.
     * 
     * @param targetDatabaseName the targetDatabaseName value to set.
     * @return the MigrateSqlServerSqlDbDatabaseInput object itself.
     */
    public MigrateSqlServerSqlDbDatabaseInput withTargetDatabaseName(String targetDatabaseName) {
        this.targetDatabaseName = targetDatabaseName;
        return this;
    }

    /**
     * Get the makeSourceDbReadOnly property: Whether to set database read only before migration.
     * 
     * @return the makeSourceDbReadOnly value.
     */
    public Boolean makeSourceDbReadOnly() {
        return this.makeSourceDbReadOnly;
    }

    /**
     * Set the makeSourceDbReadOnly property: Whether to set database read only before migration.
     * 
     * @param makeSourceDbReadOnly the makeSourceDbReadOnly value to set.
     * @return the MigrateSqlServerSqlDbDatabaseInput object itself.
     */
    public MigrateSqlServerSqlDbDatabaseInput withMakeSourceDbReadOnly(Boolean makeSourceDbReadOnly) {
        this.makeSourceDbReadOnly = makeSourceDbReadOnly;
        return this;
    }

    /**
     * Get the tableMap property: Mapping of source to target tables.
     * 
     * @return the tableMap value.
     */
    public Map<String, String> tableMap() {
        return this.tableMap;
    }

    /**
     * Set the tableMap property: Mapping of source to target tables.
     * 
     * @param tableMap the tableMap value to set.
     * @return the MigrateSqlServerSqlDbDatabaseInput object itself.
     */
    public MigrateSqlServerSqlDbDatabaseInput withTableMap(Map<String, String> tableMap) {
        this.tableMap = tableMap;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("targetDatabaseName", this.targetDatabaseName);
        jsonWriter.writeBooleanField("makeSourceDbReadOnly", this.makeSourceDbReadOnly);
        jsonWriter.writeMapField("tableMap", this.tableMap, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrateSqlServerSqlDbDatabaseInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrateSqlServerSqlDbDatabaseInput if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrateSqlServerSqlDbDatabaseInput.
     */
    public static MigrateSqlServerSqlDbDatabaseInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrateSqlServerSqlDbDatabaseInput deserializedMigrateSqlServerSqlDbDatabaseInput
                = new MigrateSqlServerSqlDbDatabaseInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbDatabaseInput.name = reader.getString();
                } else if ("targetDatabaseName".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbDatabaseInput.targetDatabaseName = reader.getString();
                } else if ("makeSourceDbReadOnly".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbDatabaseInput.makeSourceDbReadOnly
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("tableMap".equals(fieldName)) {
                    Map<String, String> tableMap = reader.readMap(reader1 -> reader1.getString());
                    deserializedMigrateSqlServerSqlDbDatabaseInput.tableMap = tableMap;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrateSqlServerSqlDbDatabaseInput;
        });
    }
}
