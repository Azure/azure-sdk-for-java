// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Output for the task that gets the list of tables contained within a provided list of Oracle schemas. */
@Immutable
public final class GetUserTablesOracleTaskOutput {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(GetUserTablesOracleTaskOutput.class);

    /*
     * The schema this result is for
     */
    @JsonProperty(value = "schemaName", access = JsonProperty.Access.WRITE_ONLY)
    private String schemaName;

    /*
     * List of valid tables found for this schema
     */
    @JsonProperty(value = "tables", access = JsonProperty.Access.WRITE_ONLY)
    private List<DatabaseTable> tables;

    /*
     * Validation errors associated with the task
     */
    @JsonProperty(value = "validationErrors", access = JsonProperty.Access.WRITE_ONLY)
    private List<ReportableException> validationErrors;

    /**
     * Get the schemaName property: The schema this result is for.
     *
     * @return the schemaName value.
     */
    public String schemaName() {
        return this.schemaName;
    }

    /**
     * Get the tables property: List of valid tables found for this schema.
     *
     * @return the tables value.
     */
    public List<DatabaseTable> tables() {
        return this.tables;
    }

    /**
     * Get the validationErrors property: Validation errors associated with the task.
     *
     * @return the validationErrors value.
     */
    public List<ReportableException> validationErrors() {
        return this.validationErrors;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tables() != null) {
            tables().forEach(e -> e.validate());
        }
        if (validationErrors() != null) {
            validationErrors().forEach(e -> e.validate());
        }
    }
}
