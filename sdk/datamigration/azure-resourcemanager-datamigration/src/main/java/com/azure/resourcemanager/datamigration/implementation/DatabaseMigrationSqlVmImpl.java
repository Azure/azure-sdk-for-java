// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.datamigration.fluent.models.DatabaseMigrationSqlVmInner;
import com.azure.resourcemanager.datamigration.models.DatabaseMigrationPropertiesSqlVm;
import com.azure.resourcemanager.datamigration.models.DatabaseMigrationSqlVm;
import com.azure.resourcemanager.datamigration.models.MigrationOperationInput;
import com.azure.resourcemanager.datamigration.models.SystemDataAutoGenerated;
import java.util.UUID;

public final class DatabaseMigrationSqlVmImpl
    implements DatabaseMigrationSqlVm, DatabaseMigrationSqlVm.Definition, DatabaseMigrationSqlVm.Update {
    private DatabaseMigrationSqlVmInner innerObject;

    private final com.azure.resourcemanager.datamigration.DataMigrationManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public DatabaseMigrationPropertiesSqlVm properties() {
        return this.innerModel().properties();
    }

    public SystemDataAutoGenerated systemData() {
        return this.innerModel().systemData();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public DatabaseMigrationSqlVmInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.datamigration.DataMigrationManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String sqlVirtualMachineName;

    private String targetDbName;

    public DatabaseMigrationSqlVmImpl withExistingSqlVirtualMachine(String resourceGroupName,
        String sqlVirtualMachineName) {
        this.resourceGroupName = resourceGroupName;
        this.sqlVirtualMachineName = sqlVirtualMachineName;
        return this;
    }

    public DatabaseMigrationSqlVm create() {
        this.innerObject = serviceManager.serviceClient()
            .getDatabaseMigrationsSqlVms()
            .createOrUpdate(resourceGroupName, sqlVirtualMachineName, targetDbName, this.innerModel(), Context.NONE);
        return this;
    }

    public DatabaseMigrationSqlVm create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getDatabaseMigrationsSqlVms()
            .createOrUpdate(resourceGroupName, sqlVirtualMachineName, targetDbName, this.innerModel(), context);
        return this;
    }

    DatabaseMigrationSqlVmImpl(String name,
        com.azure.resourcemanager.datamigration.DataMigrationManager serviceManager) {
        this.innerObject = new DatabaseMigrationSqlVmInner();
        this.serviceManager = serviceManager;
        this.targetDbName = name;
    }

    public DatabaseMigrationSqlVmImpl update() {
        return this;
    }

    public DatabaseMigrationSqlVm apply() {
        this.innerObject = serviceManager.serviceClient()
            .getDatabaseMigrationsSqlVms()
            .createOrUpdate(resourceGroupName, sqlVirtualMachineName, targetDbName, this.innerModel(), Context.NONE);
        return this;
    }

    public DatabaseMigrationSqlVm apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getDatabaseMigrationsSqlVms()
            .createOrUpdate(resourceGroupName, sqlVirtualMachineName, targetDbName, this.innerModel(), context);
        return this;
    }

    DatabaseMigrationSqlVmImpl(DatabaseMigrationSqlVmInner innerObject,
        com.azure.resourcemanager.datamigration.DataMigrationManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.sqlVirtualMachineName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "sqlVirtualMachines");
        this.targetDbName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "databaseMigrations");
    }

    public DatabaseMigrationSqlVm refresh() {
        UUID localMigrationOperationId = null;
        String localExpand = null;
        this.innerObject = serviceManager.serviceClient()
            .getDatabaseMigrationsSqlVms()
            .getWithResponse(resourceGroupName, sqlVirtualMachineName, targetDbName, localMigrationOperationId,
                localExpand, Context.NONE)
            .getValue();
        return this;
    }

    public DatabaseMigrationSqlVm refresh(Context context) {
        UUID localMigrationOperationId = null;
        String localExpand = null;
        this.innerObject = serviceManager.serviceClient()
            .getDatabaseMigrationsSqlVms()
            .getWithResponse(resourceGroupName, sqlVirtualMachineName, targetDbName, localMigrationOperationId,
                localExpand, context)
            .getValue();
        return this;
    }

    public void cancel(MigrationOperationInput parameters) {
        serviceManager.databaseMigrationsSqlVms()
            .cancel(resourceGroupName, sqlVirtualMachineName, targetDbName, parameters);
    }

    public void cancel(MigrationOperationInput parameters, Context context) {
        serviceManager.databaseMigrationsSqlVms()
            .cancel(resourceGroupName, sqlVirtualMachineName, targetDbName, parameters, context);
    }

    public void cutover(MigrationOperationInput parameters) {
        serviceManager.databaseMigrationsSqlVms()
            .cutover(resourceGroupName, sqlVirtualMachineName, targetDbName, parameters);
    }

    public void cutover(MigrationOperationInput parameters, Context context) {
        serviceManager.databaseMigrationsSqlVms()
            .cutover(resourceGroupName, sqlVirtualMachineName, targetDbName, parameters, context);
    }

    public DatabaseMigrationSqlVmImpl withProperties(DatabaseMigrationPropertiesSqlVm properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
