// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.datamigration.fluent.models.ProjectFileInner;

/** An immutable client-side representation of ProjectFile. */
public interface ProjectFile {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the etag property: HTTP strong entity tag value. This is ignored if submitted.
     *
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the properties property: Custom file properties.
     *
     * @return the properties value.
     */
    ProjectFileProperties properties();

    /**
     * Gets the inner com.azure.resourcemanager.datamigration.fluent.models.ProjectFileInner object.
     *
     * @return the inner object.
     */
    ProjectFileInner innerModel();

    /** The entirety of the ProjectFile definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The ProjectFile definition stages. */
    interface DefinitionStages {
        /** The first stage of the ProjectFile definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the ProjectFile definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies groupName, serviceName, projectName.
             *
             * @param groupName Name of the resource group.
             * @param serviceName Name of the service.
             * @param projectName Name of the project.
             * @return the next definition stage.
             */
            WithCreate withExistingProject(String groupName, String serviceName, String projectName);
        }
        /**
         * The stage of the ProjectFile definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithEtag, DefinitionStages.WithProperties {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            ProjectFile create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ProjectFile create(Context context);
        }
        /** The stage of the ProjectFile definition allowing to specify etag. */
        interface WithEtag {
            /**
             * Specifies the etag property: HTTP strong entity tag value. This is ignored if submitted..
             *
             * @param etag HTTP strong entity tag value. This is ignored if submitted.
             * @return the next definition stage.
             */
            WithCreate withEtag(String etag);
        }
        /** The stage of the ProjectFile definition allowing to specify properties. */
        interface WithProperties {
            /**
             * Specifies the properties property: Custom file properties.
             *
             * @param properties Custom file properties.
             * @return the next definition stage.
             */
            WithCreate withProperties(ProjectFileProperties properties);
        }
    }
    /**
     * Begins update for the ProjectFile resource.
     *
     * @return the stage of resource update.
     */
    ProjectFile.Update update();

    /** The template for ProjectFile update. */
    interface Update extends UpdateStages.WithEtag, UpdateStages.WithProperties {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        ProjectFile apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ProjectFile apply(Context context);
    }
    /** The ProjectFile update stages. */
    interface UpdateStages {
        /** The stage of the ProjectFile update allowing to specify etag. */
        interface WithEtag {
            /**
             * Specifies the etag property: HTTP strong entity tag value. This is ignored if submitted..
             *
             * @param etag HTTP strong entity tag value. This is ignored if submitted.
             * @return the next definition stage.
             */
            Update withEtag(String etag);
        }
        /** The stage of the ProjectFile update allowing to specify properties. */
        interface WithProperties {
            /**
             * Specifies the properties property: Custom file properties.
             *
             * @param properties Custom file properties.
             * @return the next definition stage.
             */
            Update withProperties(ProjectFileProperties properties);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    ProjectFile refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ProjectFile refresh(Context context);

    /**
     * This method is used for requesting storage information using which contents of the file can be downloaded.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return file storage information.
     */
    FileStorageInfo read();

    /**
     * This method is used for requesting storage information using which contents of the file can be downloaded.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return file storage information.
     */
    Response<FileStorageInfo> readWithResponse(Context context);

    /**
     * This method is used for requesting information for reading and writing the file content.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return file storage information.
     */
    FileStorageInfo readWrite();

    /**
     * This method is used for requesting information for reading and writing the file content.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return file storage information.
     */
    Response<FileStorageInfo> readWriteWithResponse(Context context);
}
