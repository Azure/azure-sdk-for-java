// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.datamigration.fluent.models.DatabaseMigrationSqlDbInner;

/**
 * An immutable client-side representation of DatabaseMigrationSqlDb.
 */
public interface DatabaseMigrationSqlDb {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the properties property: Database Migration Resource properties for SQL database.
     * 
     * @return the properties value.
     */
    DatabaseMigrationPropertiesSqlDb properties();

    /**
     * Gets the systemData property: Metadata pertaining to creation and last modification of the resource.
     * 
     * @return the systemData value.
     */
    SystemDataAutoGenerated systemData();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.datamigration.fluent.models.DatabaseMigrationSqlDbInner object.
     * 
     * @return the inner object.
     */
    DatabaseMigrationSqlDbInner innerModel();

    /**
     * The entirety of the DatabaseMigrationSqlDb definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The DatabaseMigrationSqlDb definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the DatabaseMigrationSqlDb definition.
         */
        interface Blank extends WithParentResource {
        }

        /**
         * The stage of the DatabaseMigrationSqlDb definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, sqlDbInstanceName.
             * 
             * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this value
             * from the Azure Resource Manager API or the portal.
             * @param sqlDbInstanceName The sqlDbInstanceName parameter.
             * @return the next definition stage.
             */
            WithCreate withExistingServer(String resourceGroupName, String sqlDbInstanceName);
        }

        /**
         * The stage of the DatabaseMigrationSqlDb definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithProperties {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            DatabaseMigrationSqlDb create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            DatabaseMigrationSqlDb create(Context context);
        }

        /**
         * The stage of the DatabaseMigrationSqlDb definition allowing to specify properties.
         */
        interface WithProperties {
            /**
             * Specifies the properties property: Database Migration Resource properties for SQL database..
             * 
             * @param properties Database Migration Resource properties for SQL database.
             * @return the next definition stage.
             */
            WithCreate withProperties(DatabaseMigrationPropertiesSqlDb properties);
        }
    }

    /**
     * Begins update for the DatabaseMigrationSqlDb resource.
     * 
     * @return the stage of resource update.
     */
    DatabaseMigrationSqlDb.Update update();

    /**
     * The template for DatabaseMigrationSqlDb update.
     */
    interface Update extends UpdateStages.WithProperties {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        DatabaseMigrationSqlDb apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        DatabaseMigrationSqlDb apply(Context context);
    }

    /**
     * The DatabaseMigrationSqlDb update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the DatabaseMigrationSqlDb update allowing to specify properties.
         */
        interface WithProperties {
            /**
             * Specifies the properties property: Database Migration Resource properties for SQL database..
             * 
             * @param properties Database Migration Resource properties for SQL database.
             * @return the next definition stage.
             */
            Update withProperties(DatabaseMigrationPropertiesSqlDb properties);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    DatabaseMigrationSqlDb refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    DatabaseMigrationSqlDb refresh(Context context);

    /**
     * Stop on going migration for the database.
     * 
     * @param parameters Required migration operation ID for which cancel will be initiated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void cancel(MigrationOperationInput parameters);

    /**
     * Stop on going migration for the database.
     * 
     * @param parameters Required migration operation ID for which cancel will be initiated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void cancel(MigrationOperationInput parameters, Context context);
}
