// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes the input to the 'cancel' and 'restart' MongoDB migration commands.
 */
@Fluent
public class MongoDbCommandInput implements JsonSerializable<MongoDbCommandInput> {
    /*
     * The qualified name of a database or collection to act upon, or null to act upon the entire migration
     */
    private String objectName;

    /**
     * Creates an instance of MongoDbCommandInput class.
     */
    public MongoDbCommandInput() {
    }

    /**
     * Get the objectName property: The qualified name of a database or collection to act upon, or null to act upon the
     * entire migration.
     * 
     * @return the objectName value.
     */
    public String objectName() {
        return this.objectName;
    }

    /**
     * Set the objectName property: The qualified name of a database or collection to act upon, or null to act upon the
     * entire migration.
     * 
     * @param objectName the objectName value to set.
     * @return the MongoDbCommandInput object itself.
     */
    public MongoDbCommandInput withObjectName(String objectName) {
        this.objectName = objectName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("objectName", this.objectName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoDbCommandInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoDbCommandInput if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MongoDbCommandInput.
     */
    public static MongoDbCommandInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoDbCommandInput deserializedMongoDbCommandInput = new MongoDbCommandInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("objectName".equals(fieldName)) {
                    deserializedMongoDbCommandInput.objectName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoDbCommandInput;
        });
    }
}
