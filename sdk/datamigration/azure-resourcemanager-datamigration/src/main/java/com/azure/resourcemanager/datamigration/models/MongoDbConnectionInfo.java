// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** Describes a connection to a MongoDB data source. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("MongoDbConnectionInfo")
@Fluent
public final class MongoDbConnectionInfo extends ConnectionInfo {
    /*
     * A MongoDB connection string or blob container URL. The user name and
     * password can be specified here or in the userName and password
     * properties
     */
    @JsonProperty(value = "connectionString", required = true)
    private String connectionString;

    /*
     * Data source
     */
    @JsonProperty(value = "dataSource")
    private String dataSource;

    /*
     * Whether to encrypt the connection
     */
    @JsonProperty(value = "encryptConnection")
    private Boolean encryptConnection;

    /*
     * server brand version
     */
    @JsonProperty(value = "serverBrandVersion")
    private String serverBrandVersion;

    /*
     * server version
     */
    @JsonProperty(value = "serverVersion")
    private String serverVersion;

    /*
     * name of the server
     */
    @JsonProperty(value = "serverName")
    private String serverName;

    /*
     * Whether to trust the server certificate
     */
    @JsonProperty(value = "trustServerCertificate")
    private Boolean trustServerCertificate;

    /*
     * The enforceSSL property.
     */
    @JsonProperty(value = "enforceSSL")
    private Boolean enforceSsl;

    /*
     * port for server
     */
    @JsonProperty(value = "port")
    private Integer port;

    /*
     * Additional connection settings
     */
    @JsonProperty(value = "additionalSettings")
    private String additionalSettings;

    /*
     * Authentication type to use for connection
     */
    @JsonProperty(value = "authentication")
    private AuthenticationType authentication;

    /**
     * Get the connectionString property: A MongoDB connection string or blob container URL. The user name and password
     * can be specified here or in the userName and password properties.
     *
     * @return the connectionString value.
     */
    public String connectionString() {
        return this.connectionString;
    }

    /**
     * Set the connectionString property: A MongoDB connection string or blob container URL. The user name and password
     * can be specified here or in the userName and password properties.
     *
     * @param connectionString the connectionString value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withConnectionString(String connectionString) {
        this.connectionString = connectionString;
        return this;
    }

    /**
     * Get the dataSource property: Data source.
     *
     * @return the dataSource value.
     */
    public String dataSource() {
        return this.dataSource;
    }

    /**
     * Set the dataSource property: Data source.
     *
     * @param dataSource the dataSource value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withDataSource(String dataSource) {
        this.dataSource = dataSource;
        return this;
    }

    /**
     * Get the encryptConnection property: Whether to encrypt the connection.
     *
     * @return the encryptConnection value.
     */
    public Boolean encryptConnection() {
        return this.encryptConnection;
    }

    /**
     * Set the encryptConnection property: Whether to encrypt the connection.
     *
     * @param encryptConnection the encryptConnection value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withEncryptConnection(Boolean encryptConnection) {
        this.encryptConnection = encryptConnection;
        return this;
    }

    /**
     * Get the serverBrandVersion property: server brand version.
     *
     * @return the serverBrandVersion value.
     */
    public String serverBrandVersion() {
        return this.serverBrandVersion;
    }

    /**
     * Set the serverBrandVersion property: server brand version.
     *
     * @param serverBrandVersion the serverBrandVersion value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withServerBrandVersion(String serverBrandVersion) {
        this.serverBrandVersion = serverBrandVersion;
        return this;
    }

    /**
     * Get the serverVersion property: server version.
     *
     * @return the serverVersion value.
     */
    public String serverVersion() {
        return this.serverVersion;
    }

    /**
     * Set the serverVersion property: server version.
     *
     * @param serverVersion the serverVersion value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withServerVersion(String serverVersion) {
        this.serverVersion = serverVersion;
        return this;
    }

    /**
     * Get the serverName property: name of the server.
     *
     * @return the serverName value.
     */
    public String serverName() {
        return this.serverName;
    }

    /**
     * Set the serverName property: name of the server.
     *
     * @param serverName the serverName value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withServerName(String serverName) {
        this.serverName = serverName;
        return this;
    }

    /**
     * Get the trustServerCertificate property: Whether to trust the server certificate.
     *
     * @return the trustServerCertificate value.
     */
    public Boolean trustServerCertificate() {
        return this.trustServerCertificate;
    }

    /**
     * Set the trustServerCertificate property: Whether to trust the server certificate.
     *
     * @param trustServerCertificate the trustServerCertificate value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withTrustServerCertificate(Boolean trustServerCertificate) {
        this.trustServerCertificate = trustServerCertificate;
        return this;
    }

    /**
     * Get the enforceSsl property: The enforceSSL property.
     *
     * @return the enforceSsl value.
     */
    public Boolean enforceSsl() {
        return this.enforceSsl;
    }

    /**
     * Set the enforceSsl property: The enforceSSL property.
     *
     * @param enforceSsl the enforceSsl value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withEnforceSsl(Boolean enforceSsl) {
        this.enforceSsl = enforceSsl;
        return this;
    }

    /**
     * Get the port property: port for server.
     *
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: port for server.
     *
     * @param port the port value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Get the additionalSettings property: Additional connection settings.
     *
     * @return the additionalSettings value.
     */
    public String additionalSettings() {
        return this.additionalSettings;
    }

    /**
     * Set the additionalSettings property: Additional connection settings.
     *
     * @param additionalSettings the additionalSettings value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withAdditionalSettings(String additionalSettings) {
        this.additionalSettings = additionalSettings;
        return this;
    }

    /**
     * Get the authentication property: Authentication type to use for connection.
     *
     * @return the authentication value.
     */
    public AuthenticationType authentication() {
        return this.authentication;
    }

    /**
     * Set the authentication property: Authentication type to use for connection.
     *
     * @param authentication the authentication value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withAuthentication(AuthenticationType authentication) {
        this.authentication = authentication;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbConnectionInfo withUsername(String username) {
        super.withUsername(username);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public MongoDbConnectionInfo withPassword(String password) {
        super.withPassword(password);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (connectionString() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property connectionString in model MongoDbConnectionInfo"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MongoDbConnectionInfo.class);
}
