// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes a connection to a MongoDB data source.
 */
@Fluent
public final class MongoDbConnectionInfo extends ConnectionInfo {
    /*
     * Type of connection info
     */
    private String type = "MongoDbConnectionInfo";

    /*
     * A MongoDB connection string or blob container URL. The user name and password can be specified here or in the
     * userName and password properties
     */
    private String connectionString;

    /*
     * Data source
     */
    private String dataSource;

    /*
     * Whether to encrypt the connection
     */
    private Boolean encryptConnection;

    /*
     * server brand version
     */
    private String serverBrandVersion;

    /*
     * server version
     */
    private String serverVersion;

    /*
     * name of the server
     */
    private String serverName;

    /*
     * Whether to trust the server certificate
     */
    private Boolean trustServerCertificate;

    /*
     * The enforceSSL property.
     */
    private Boolean enforceSsl;

    /*
     * port for server
     */
    private Integer port;

    /*
     * Additional connection settings
     */
    private String additionalSettings;

    /*
     * Authentication type to use for connection
     */
    private AuthenticationType authentication;

    /**
     * Creates an instance of MongoDbConnectionInfo class.
     */
    public MongoDbConnectionInfo() {
    }

    /**
     * Get the type property: Type of connection info.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the connectionString property: A MongoDB connection string or blob container URL. The user name and password
     * can be specified here or in the userName and password properties.
     * 
     * @return the connectionString value.
     */
    public String connectionString() {
        return this.connectionString;
    }

    /**
     * Set the connectionString property: A MongoDB connection string or blob container URL. The user name and password
     * can be specified here or in the userName and password properties.
     * 
     * @param connectionString the connectionString value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withConnectionString(String connectionString) {
        this.connectionString = connectionString;
        return this;
    }

    /**
     * Get the dataSource property: Data source.
     * 
     * @return the dataSource value.
     */
    public String dataSource() {
        return this.dataSource;
    }

    /**
     * Set the dataSource property: Data source.
     * 
     * @param dataSource the dataSource value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withDataSource(String dataSource) {
        this.dataSource = dataSource;
        return this;
    }

    /**
     * Get the encryptConnection property: Whether to encrypt the connection.
     * 
     * @return the encryptConnection value.
     */
    public Boolean encryptConnection() {
        return this.encryptConnection;
    }

    /**
     * Set the encryptConnection property: Whether to encrypt the connection.
     * 
     * @param encryptConnection the encryptConnection value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withEncryptConnection(Boolean encryptConnection) {
        this.encryptConnection = encryptConnection;
        return this;
    }

    /**
     * Get the serverBrandVersion property: server brand version.
     * 
     * @return the serverBrandVersion value.
     */
    public String serverBrandVersion() {
        return this.serverBrandVersion;
    }

    /**
     * Set the serverBrandVersion property: server brand version.
     * 
     * @param serverBrandVersion the serverBrandVersion value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withServerBrandVersion(String serverBrandVersion) {
        this.serverBrandVersion = serverBrandVersion;
        return this;
    }

    /**
     * Get the serverVersion property: server version.
     * 
     * @return the serverVersion value.
     */
    public String serverVersion() {
        return this.serverVersion;
    }

    /**
     * Set the serverVersion property: server version.
     * 
     * @param serverVersion the serverVersion value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withServerVersion(String serverVersion) {
        this.serverVersion = serverVersion;
        return this;
    }

    /**
     * Get the serverName property: name of the server.
     * 
     * @return the serverName value.
     */
    public String serverName() {
        return this.serverName;
    }

    /**
     * Set the serverName property: name of the server.
     * 
     * @param serverName the serverName value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withServerName(String serverName) {
        this.serverName = serverName;
        return this;
    }

    /**
     * Get the trustServerCertificate property: Whether to trust the server certificate.
     * 
     * @return the trustServerCertificate value.
     */
    public Boolean trustServerCertificate() {
        return this.trustServerCertificate;
    }

    /**
     * Set the trustServerCertificate property: Whether to trust the server certificate.
     * 
     * @param trustServerCertificate the trustServerCertificate value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withTrustServerCertificate(Boolean trustServerCertificate) {
        this.trustServerCertificate = trustServerCertificate;
        return this;
    }

    /**
     * Get the enforceSsl property: The enforceSSL property.
     * 
     * @return the enforceSsl value.
     */
    public Boolean enforceSsl() {
        return this.enforceSsl;
    }

    /**
     * Set the enforceSsl property: The enforceSSL property.
     * 
     * @param enforceSsl the enforceSsl value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withEnforceSsl(Boolean enforceSsl) {
        this.enforceSsl = enforceSsl;
        return this;
    }

    /**
     * Get the port property: port for server.
     * 
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: port for server.
     * 
     * @param port the port value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Get the additionalSettings property: Additional connection settings.
     * 
     * @return the additionalSettings value.
     */
    public String additionalSettings() {
        return this.additionalSettings;
    }

    /**
     * Set the additionalSettings property: Additional connection settings.
     * 
     * @param additionalSettings the additionalSettings value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withAdditionalSettings(String additionalSettings) {
        this.additionalSettings = additionalSettings;
        return this;
    }

    /**
     * Get the authentication property: Authentication type to use for connection.
     * 
     * @return the authentication value.
     */
    public AuthenticationType authentication() {
        return this.authentication;
    }

    /**
     * Set the authentication property: Authentication type to use for connection.
     * 
     * @param authentication the authentication value to set.
     * @return the MongoDbConnectionInfo object itself.
     */
    public MongoDbConnectionInfo withAuthentication(AuthenticationType authentication) {
        this.authentication = authentication;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbConnectionInfo withUsername(String username) {
        super.withUsername(username);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MongoDbConnectionInfo withPassword(String password) {
        super.withPassword(password);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (connectionString() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property connectionString in model MongoDbConnectionInfo"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MongoDbConnectionInfo.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("userName", username());
        jsonWriter.writeStringField("password", password());
        jsonWriter.writeStringField("connectionString", this.connectionString);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("dataSource", this.dataSource);
        jsonWriter.writeBooleanField("encryptConnection", this.encryptConnection);
        jsonWriter.writeStringField("serverBrandVersion", this.serverBrandVersion);
        jsonWriter.writeStringField("serverVersion", this.serverVersion);
        jsonWriter.writeStringField("serverName", this.serverName);
        jsonWriter.writeBooleanField("trustServerCertificate", this.trustServerCertificate);
        jsonWriter.writeBooleanField("enforceSSL", this.enforceSsl);
        jsonWriter.writeNumberField("port", this.port);
        jsonWriter.writeStringField("additionalSettings", this.additionalSettings);
        jsonWriter.writeStringField("authentication",
            this.authentication == null ? null : this.authentication.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoDbConnectionInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoDbConnectionInfo if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MongoDbConnectionInfo.
     */
    public static MongoDbConnectionInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoDbConnectionInfo deserializedMongoDbConnectionInfo = new MongoDbConnectionInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userName".equals(fieldName)) {
                    deserializedMongoDbConnectionInfo.withUsername(reader.getString());
                } else if ("password".equals(fieldName)) {
                    deserializedMongoDbConnectionInfo.withPassword(reader.getString());
                } else if ("connectionString".equals(fieldName)) {
                    deserializedMongoDbConnectionInfo.connectionString = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedMongoDbConnectionInfo.type = reader.getString();
                } else if ("dataSource".equals(fieldName)) {
                    deserializedMongoDbConnectionInfo.dataSource = reader.getString();
                } else if ("encryptConnection".equals(fieldName)) {
                    deserializedMongoDbConnectionInfo.encryptConnection = reader.getNullable(JsonReader::getBoolean);
                } else if ("serverBrandVersion".equals(fieldName)) {
                    deserializedMongoDbConnectionInfo.serverBrandVersion = reader.getString();
                } else if ("serverVersion".equals(fieldName)) {
                    deserializedMongoDbConnectionInfo.serverVersion = reader.getString();
                } else if ("serverName".equals(fieldName)) {
                    deserializedMongoDbConnectionInfo.serverName = reader.getString();
                } else if ("trustServerCertificate".equals(fieldName)) {
                    deserializedMongoDbConnectionInfo.trustServerCertificate
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("enforceSSL".equals(fieldName)) {
                    deserializedMongoDbConnectionInfo.enforceSsl = reader.getNullable(JsonReader::getBoolean);
                } else if ("port".equals(fieldName)) {
                    deserializedMongoDbConnectionInfo.port = reader.getNullable(JsonReader::getInt);
                } else if ("additionalSettings".equals(fieldName)) {
                    deserializedMongoDbConnectionInfo.additionalSettings = reader.getString();
                } else if ("authentication".equals(fieldName)) {
                    deserializedMongoDbConnectionInfo.authentication
                        = AuthenticationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoDbConnectionInfo;
        });
    }
}
