// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Describes a MongoDB shard key.
 */
@Fluent
public final class MongoDbShardKeySetting implements JsonSerializable<MongoDbShardKeySetting> {
    /*
     * The fields within the shard key
     */
    private List<MongoDbShardKeyField> fields;

    /*
     * Whether the shard key is unique
     */
    private Boolean isUnique;

    /**
     * Creates an instance of MongoDbShardKeySetting class.
     */
    public MongoDbShardKeySetting() {
    }

    /**
     * Get the fields property: The fields within the shard key.
     * 
     * @return the fields value.
     */
    public List<MongoDbShardKeyField> fields() {
        return this.fields;
    }

    /**
     * Set the fields property: The fields within the shard key.
     * 
     * @param fields the fields value to set.
     * @return the MongoDbShardKeySetting object itself.
     */
    public MongoDbShardKeySetting withFields(List<MongoDbShardKeyField> fields) {
        this.fields = fields;
        return this;
    }

    /**
     * Get the isUnique property: Whether the shard key is unique.
     * 
     * @return the isUnique value.
     */
    public Boolean isUnique() {
        return this.isUnique;
    }

    /**
     * Set the isUnique property: Whether the shard key is unique.
     * 
     * @param isUnique the isUnique value to set.
     * @return the MongoDbShardKeySetting object itself.
     */
    public MongoDbShardKeySetting withIsUnique(Boolean isUnique) {
        this.isUnique = isUnique;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (fields() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property fields in model MongoDbShardKeySetting"));
        } else {
            fields().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MongoDbShardKeySetting.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("fields", this.fields, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("isUnique", this.isUnique);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoDbShardKeySetting from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoDbShardKeySetting if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MongoDbShardKeySetting.
     */
    public static MongoDbShardKeySetting fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoDbShardKeySetting deserializedMongoDbShardKeySetting = new MongoDbShardKeySetting();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fields".equals(fieldName)) {
                    List<MongoDbShardKeyField> fields
                        = reader.readArray(reader1 -> MongoDbShardKeyField.fromJson(reader1));
                    deserializedMongoDbShardKeySetting.fields = fields;
                } else if ("isUnique".equals(fieldName)) {
                    deserializedMongoDbShardKeySetting.isUnique = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoDbShardKeySetting;
        });
    }
}
