// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Table level result for Sql Server to Azure Sql DB migration.
 */
@Immutable
public final class MigrateSqlServerSqlDbTaskOutputTableLevel extends MigrateSqlServerSqlDbTaskOutput {
    /*
     * Result type
     */
    private String resultType = "TableLevelOutput";

    /*
     * Name of the item
     */
    private String objectName;

    /*
     * Migration start time
     */
    private OffsetDateTime startedOn;

    /*
     * Migration end time
     */
    private OffsetDateTime endedOn;

    /*
     * Current state of migration
     */
    private MigrationState state;

    /*
     * Status message
     */
    private String statusMessage;

    /*
     * Number of items
     */
    private Long itemsCount;

    /*
     * Number of successfully completed items
     */
    private Long itemsCompletedCount;

    /*
     * Wildcard string prefix to use for querying all errors of the item
     */
    private String errorPrefix;

    /*
     * Wildcard string prefix to use for querying all sub-tem results of the item
     */
    private String resultPrefix;

    /*
     * Result identifier
     */
    private String id;

    /**
     * Creates an instance of MigrateSqlServerSqlDbTaskOutputTableLevel class.
     */
    public MigrateSqlServerSqlDbTaskOutputTableLevel() {
    }

    /**
     * Get the resultType property: Result type.
     * 
     * @return the resultType value.
     */
    @Override
    public String resultType() {
        return this.resultType;
    }

    /**
     * Get the objectName property: Name of the item.
     * 
     * @return the objectName value.
     */
    public String objectName() {
        return this.objectName;
    }

    /**
     * Get the startedOn property: Migration start time.
     * 
     * @return the startedOn value.
     */
    public OffsetDateTime startedOn() {
        return this.startedOn;
    }

    /**
     * Get the endedOn property: Migration end time.
     * 
     * @return the endedOn value.
     */
    public OffsetDateTime endedOn() {
        return this.endedOn;
    }

    /**
     * Get the state property: Current state of migration.
     * 
     * @return the state value.
     */
    public MigrationState state() {
        return this.state;
    }

    /**
     * Get the statusMessage property: Status message.
     * 
     * @return the statusMessage value.
     */
    public String statusMessage() {
        return this.statusMessage;
    }

    /**
     * Get the itemsCount property: Number of items.
     * 
     * @return the itemsCount value.
     */
    public Long itemsCount() {
        return this.itemsCount;
    }

    /**
     * Get the itemsCompletedCount property: Number of successfully completed items.
     * 
     * @return the itemsCompletedCount value.
     */
    public Long itemsCompletedCount() {
        return this.itemsCompletedCount;
    }

    /**
     * Get the errorPrefix property: Wildcard string prefix to use for querying all errors of the item.
     * 
     * @return the errorPrefix value.
     */
    public String errorPrefix() {
        return this.errorPrefix;
    }

    /**
     * Get the resultPrefix property: Wildcard string prefix to use for querying all sub-tem results of the item.
     * 
     * @return the resultPrefix value.
     */
    public String resultPrefix() {
        return this.resultPrefix;
    }

    /**
     * Get the id property: Result identifier.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resultType", this.resultType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrateSqlServerSqlDbTaskOutputTableLevel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrateSqlServerSqlDbTaskOutputTableLevel if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrateSqlServerSqlDbTaskOutputTableLevel.
     */
    public static MigrateSqlServerSqlDbTaskOutputTableLevel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrateSqlServerSqlDbTaskOutputTableLevel deserializedMigrateSqlServerSqlDbTaskOutputTableLevel
                = new MigrateSqlServerSqlDbTaskOutputTableLevel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputTableLevel.id = reader.getString();
                } else if ("resultType".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputTableLevel.resultType = reader.getString();
                } else if ("objectName".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputTableLevel.objectName = reader.getString();
                } else if ("startedOn".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputTableLevel.startedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endedOn".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputTableLevel.endedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("state".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputTableLevel.state
                        = MigrationState.fromString(reader.getString());
                } else if ("statusMessage".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputTableLevel.statusMessage = reader.getString();
                } else if ("itemsCount".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputTableLevel.itemsCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("itemsCompletedCount".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputTableLevel.itemsCompletedCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("errorPrefix".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputTableLevel.errorPrefix = reader.getString();
                } else if ("resultPrefix".equals(fieldName)) {
                    deserializedMigrateSqlServerSqlDbTaskOutputTableLevel.resultPrefix = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrateSqlServerSqlDbTaskOutputTableLevel;
        });
    }
}
