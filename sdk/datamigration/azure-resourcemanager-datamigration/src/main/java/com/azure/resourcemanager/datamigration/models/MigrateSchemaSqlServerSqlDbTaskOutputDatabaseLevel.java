// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel model.
 */
@Immutable
public final class MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel extends MigrateSchemaSqlServerSqlDbTaskOutput {
    /*
     * Result type
     */
    private String resultType = "DatabaseLevelOutput";

    /*
     * The name of the database
     */
    private String databaseName;

    /*
     * State of the schema migration for this database
     */
    private MigrationState state;

    /*
     * Schema migration stage for this database
     */
    private SchemaMigrationStage stage;

    /*
     * Migration start time
     */
    private OffsetDateTime startedOn;

    /*
     * Migration end time
     */
    private OffsetDateTime endedOn;

    /*
     * Prefix string to use for querying errors for this database
     */
    private String databaseErrorResultPrefix;

    /*
     * Prefix string to use for querying schema errors for this database
     */
    private String schemaErrorResultPrefix;

    /*
     * Number of successful operations for this database
     */
    private Long numberOfSuccessfulOperations;

    /*
     * Number of failed operations for this database
     */
    private Long numberOfFailedOperations;

    /*
     * Identifier for the file resource containing the schema of this database
     */
    private String fileId;

    /**
     * Creates an instance of MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel class.
     */
    public MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel() {
    }

    /**
     * Get the resultType property: Result type.
     * 
     * @return the resultType value.
     */
    @Override
    public String resultType() {
        return this.resultType;
    }

    /**
     * Get the databaseName property: The name of the database.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Get the state property: State of the schema migration for this database.
     * 
     * @return the state value.
     */
    public MigrationState state() {
        return this.state;
    }

    /**
     * Get the stage property: Schema migration stage for this database.
     * 
     * @return the stage value.
     */
    public SchemaMigrationStage stage() {
        return this.stage;
    }

    /**
     * Get the startedOn property: Migration start time.
     * 
     * @return the startedOn value.
     */
    public OffsetDateTime startedOn() {
        return this.startedOn;
    }

    /**
     * Get the endedOn property: Migration end time.
     * 
     * @return the endedOn value.
     */
    public OffsetDateTime endedOn() {
        return this.endedOn;
    }

    /**
     * Get the databaseErrorResultPrefix property: Prefix string to use for querying errors for this database.
     * 
     * @return the databaseErrorResultPrefix value.
     */
    public String databaseErrorResultPrefix() {
        return this.databaseErrorResultPrefix;
    }

    /**
     * Get the schemaErrorResultPrefix property: Prefix string to use for querying schema errors for this database.
     * 
     * @return the schemaErrorResultPrefix value.
     */
    public String schemaErrorResultPrefix() {
        return this.schemaErrorResultPrefix;
    }

    /**
     * Get the numberOfSuccessfulOperations property: Number of successful operations for this database.
     * 
     * @return the numberOfSuccessfulOperations value.
     */
    public Long numberOfSuccessfulOperations() {
        return this.numberOfSuccessfulOperations;
    }

    /**
     * Get the numberOfFailedOperations property: Number of failed operations for this database.
     * 
     * @return the numberOfFailedOperations value.
     */
    public Long numberOfFailedOperations() {
        return this.numberOfFailedOperations;
    }

    /**
     * Get the fileId property: Identifier for the file resource containing the schema of this database.
     * 
     * @return the fileId value.
     */
    public String fileId() {
        return this.fileId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resultType", this.resultType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel.
     */
    public static MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel deserializedMigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel
                = new MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel.withId(reader.getString());
                } else if ("resultType".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel.resultType = reader.getString();
                } else if ("databaseName".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel.databaseName = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel.state
                        = MigrationState.fromString(reader.getString());
                } else if ("stage".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel.stage
                        = SchemaMigrationStage.fromString(reader.getString());
                } else if ("startedOn".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel.startedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endedOn".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel.endedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("databaseErrorResultPrefix".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel.databaseErrorResultPrefix
                        = reader.getString();
                } else if ("schemaErrorResultPrefix".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel.schemaErrorResultPrefix
                        = reader.getString();
                } else if ("numberOfSuccessfulOperations".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel.numberOfSuccessfulOperations
                        = reader.getNullable(JsonReader::getLong);
                } else if ("numberOfFailedOperations".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel.numberOfFailedOperations
                        = reader.getNullable(JsonReader::getLong);
                } else if ("fileId".equals(fieldName)) {
                    deserializedMigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel.fileId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel;
        });
    }
}
