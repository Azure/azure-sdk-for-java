// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.time.OffsetDateTime;

/** The MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel model. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "resultType")
@JsonTypeName("DatabaseLevelOutput")
@Immutable
public final class MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel extends MigrateSchemaSqlServerSqlDbTaskOutput {
    @JsonIgnore
    private final ClientLogger logger = new ClientLogger(MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel.class);

    /*
     * The name of the database
     */
    @JsonProperty(value = "databaseName", access = JsonProperty.Access.WRITE_ONLY)
    private String databaseName;

    /*
     * State of the schema migration for this database
     */
    @JsonProperty(value = "state", access = JsonProperty.Access.WRITE_ONLY)
    private MigrationState state;

    /*
     * Schema migration stage for this database
     */
    @JsonProperty(value = "stage", access = JsonProperty.Access.WRITE_ONLY)
    private SchemaMigrationStage stage;

    /*
     * Migration start time
     */
    @JsonProperty(value = "startedOn", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime startedOn;

    /*
     * Migration end time
     */
    @JsonProperty(value = "endedOn", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime endedOn;

    /*
     * Prefix string to use for querying errors for this database
     */
    @JsonProperty(value = "databaseErrorResultPrefix", access = JsonProperty.Access.WRITE_ONLY)
    private String databaseErrorResultPrefix;

    /*
     * Prefix string to use for querying schema errors for this database
     */
    @JsonProperty(value = "schemaErrorResultPrefix", access = JsonProperty.Access.WRITE_ONLY)
    private String schemaErrorResultPrefix;

    /*
     * Number of successful operations for this database
     */
    @JsonProperty(value = "numberOfSuccessfulOperations", access = JsonProperty.Access.WRITE_ONLY)
    private Long numberOfSuccessfulOperations;

    /*
     * Number of failed operations for this database
     */
    @JsonProperty(value = "numberOfFailedOperations", access = JsonProperty.Access.WRITE_ONLY)
    private Long numberOfFailedOperations;

    /*
     * Identifier for the file resource containing the schema of this database
     */
    @JsonProperty(value = "fileId", access = JsonProperty.Access.WRITE_ONLY)
    private String fileId;

    /**
     * Get the databaseName property: The name of the database.
     *
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Get the state property: State of the schema migration for this database.
     *
     * @return the state value.
     */
    public MigrationState state() {
        return this.state;
    }

    /**
     * Get the stage property: Schema migration stage for this database.
     *
     * @return the stage value.
     */
    public SchemaMigrationStage stage() {
        return this.stage;
    }

    /**
     * Get the startedOn property: Migration start time.
     *
     * @return the startedOn value.
     */
    public OffsetDateTime startedOn() {
        return this.startedOn;
    }

    /**
     * Get the endedOn property: Migration end time.
     *
     * @return the endedOn value.
     */
    public OffsetDateTime endedOn() {
        return this.endedOn;
    }

    /**
     * Get the databaseErrorResultPrefix property: Prefix string to use for querying errors for this database.
     *
     * @return the databaseErrorResultPrefix value.
     */
    public String databaseErrorResultPrefix() {
        return this.databaseErrorResultPrefix;
    }

    /**
     * Get the schemaErrorResultPrefix property: Prefix string to use for querying schema errors for this database.
     *
     * @return the schemaErrorResultPrefix value.
     */
    public String schemaErrorResultPrefix() {
        return this.schemaErrorResultPrefix;
    }

    /**
     * Get the numberOfSuccessfulOperations property: Number of successful operations for this database.
     *
     * @return the numberOfSuccessfulOperations value.
     */
    public Long numberOfSuccessfulOperations() {
        return this.numberOfSuccessfulOperations;
    }

    /**
     * Get the numberOfFailedOperations property: Number of failed operations for this database.
     *
     * @return the numberOfFailedOperations value.
     */
    public Long numberOfFailedOperations() {
        return this.numberOfFailedOperations;
    }

    /**
     * Get the fileId property: Identifier for the file resource containing the schema of this database.
     *
     * @return the fileId value.
     */
    public String fileId() {
        return this.fileId;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
