// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Detailed status of collection migration.
 */
@Immutable
public final class MongoMigrationProgressDetails implements JsonSerializable<MongoMigrationProgressDetails> {
    /*
     * Migration Status
     */
    private MongoMigrationStatus migrationStatus;

    /*
     * Migration Error
     */
    private String migrationError;

    /*
     * Source Document Count
     */
    private Long sourceDocumentCount;

    /*
     * Processed Document Count
     */
    private Long processedDocumentCount;

    /*
     * Migration duration
     */
    private Integer durationInSeconds;

    /**
     * Creates an instance of MongoMigrationProgressDetails class.
     */
    public MongoMigrationProgressDetails() {
    }

    /**
     * Get the migrationStatus property: Migration Status.
     * 
     * @return the migrationStatus value.
     */
    public MongoMigrationStatus migrationStatus() {
        return this.migrationStatus;
    }

    /**
     * Get the migrationError property: Migration Error.
     * 
     * @return the migrationError value.
     */
    public String migrationError() {
        return this.migrationError;
    }

    /**
     * Get the sourceDocumentCount property: Source Document Count.
     * 
     * @return the sourceDocumentCount value.
     */
    public Long sourceDocumentCount() {
        return this.sourceDocumentCount;
    }

    /**
     * Get the processedDocumentCount property: Processed Document Count.
     * 
     * @return the processedDocumentCount value.
     */
    public Long processedDocumentCount() {
        return this.processedDocumentCount;
    }

    /**
     * Get the durationInSeconds property: Migration duration.
     * 
     * @return the durationInSeconds value.
     */
    public Integer durationInSeconds() {
        return this.durationInSeconds;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MongoMigrationProgressDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MongoMigrationProgressDetails if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MongoMigrationProgressDetails.
     */
    public static MongoMigrationProgressDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MongoMigrationProgressDetails deserializedMongoMigrationProgressDetails
                = new MongoMigrationProgressDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("migrationStatus".equals(fieldName)) {
                    deserializedMongoMigrationProgressDetails.migrationStatus
                        = MongoMigrationStatus.fromString(reader.getString());
                } else if ("migrationError".equals(fieldName)) {
                    deserializedMongoMigrationProgressDetails.migrationError = reader.getString();
                } else if ("sourceDocumentCount".equals(fieldName)) {
                    deserializedMongoMigrationProgressDetails.sourceDocumentCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("processedDocumentCount".equals(fieldName)) {
                    deserializedMongoMigrationProgressDetails.processedDocumentCount
                        = reader.getNullable(JsonReader::getLong);
                } else if ("durationInSeconds".equals(fieldName)) {
                    deserializedMongoMigrationProgressDetails.durationInSeconds
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMongoMigrationProgressDetails;
        });
    }
}
