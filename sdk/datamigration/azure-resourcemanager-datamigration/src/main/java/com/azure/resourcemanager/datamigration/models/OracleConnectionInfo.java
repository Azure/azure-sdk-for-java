// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Information for connecting to Oracle server.
 */
@Fluent
public final class OracleConnectionInfo extends ConnectionInfo {
    /*
     * Type of connection info
     */
    private String type = "OracleConnectionInfo";

    /*
     * EZConnect or TNSName connection string.
     */
    private String dataSource;

    /*
     * name of the server
     */
    private String serverName;

    /*
     * server version
     */
    private String serverVersion;

    /*
     * port for server
     */
    private Integer port;

    /*
     * Authentication type to use for connection
     */
    private AuthenticationType authentication;

    /**
     * Creates an instance of OracleConnectionInfo class.
     */
    public OracleConnectionInfo() {
    }

    /**
     * Get the type property: Type of connection info.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the dataSource property: EZConnect or TNSName connection string.
     * 
     * @return the dataSource value.
     */
    public String dataSource() {
        return this.dataSource;
    }

    /**
     * Set the dataSource property: EZConnect or TNSName connection string.
     * 
     * @param dataSource the dataSource value to set.
     * @return the OracleConnectionInfo object itself.
     */
    public OracleConnectionInfo withDataSource(String dataSource) {
        this.dataSource = dataSource;
        return this;
    }

    /**
     * Get the serverName property: name of the server.
     * 
     * @return the serverName value.
     */
    public String serverName() {
        return this.serverName;
    }

    /**
     * Set the serverName property: name of the server.
     * 
     * @param serverName the serverName value to set.
     * @return the OracleConnectionInfo object itself.
     */
    public OracleConnectionInfo withServerName(String serverName) {
        this.serverName = serverName;
        return this;
    }

    /**
     * Get the serverVersion property: server version.
     * 
     * @return the serverVersion value.
     */
    public String serverVersion() {
        return this.serverVersion;
    }

    /**
     * Set the serverVersion property: server version.
     * 
     * @param serverVersion the serverVersion value to set.
     * @return the OracleConnectionInfo object itself.
     */
    public OracleConnectionInfo withServerVersion(String serverVersion) {
        this.serverVersion = serverVersion;
        return this;
    }

    /**
     * Get the port property: port for server.
     * 
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: port for server.
     * 
     * @param port the port value to set.
     * @return the OracleConnectionInfo object itself.
     */
    public OracleConnectionInfo withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Get the authentication property: Authentication type to use for connection.
     * 
     * @return the authentication value.
     */
    public AuthenticationType authentication() {
        return this.authentication;
    }

    /**
     * Set the authentication property: Authentication type to use for connection.
     * 
     * @param authentication the authentication value to set.
     * @return the OracleConnectionInfo object itself.
     */
    public OracleConnectionInfo withAuthentication(AuthenticationType authentication) {
        this.authentication = authentication;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OracleConnectionInfo withUsername(String username) {
        super.withUsername(username);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OracleConnectionInfo withPassword(String password) {
        super.withPassword(password);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (dataSource() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property dataSource in model OracleConnectionInfo"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OracleConnectionInfo.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("userName", username());
        jsonWriter.writeStringField("password", password());
        jsonWriter.writeStringField("dataSource", this.dataSource);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("serverName", this.serverName);
        jsonWriter.writeStringField("serverVersion", this.serverVersion);
        jsonWriter.writeNumberField("port", this.port);
        jsonWriter.writeStringField("authentication",
            this.authentication == null ? null : this.authentication.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OracleConnectionInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OracleConnectionInfo if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OracleConnectionInfo.
     */
    public static OracleConnectionInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OracleConnectionInfo deserializedOracleConnectionInfo = new OracleConnectionInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userName".equals(fieldName)) {
                    deserializedOracleConnectionInfo.withUsername(reader.getString());
                } else if ("password".equals(fieldName)) {
                    deserializedOracleConnectionInfo.withPassword(reader.getString());
                } else if ("dataSource".equals(fieldName)) {
                    deserializedOracleConnectionInfo.dataSource = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedOracleConnectionInfo.type = reader.getString();
                } else if ("serverName".equals(fieldName)) {
                    deserializedOracleConnectionInfo.serverName = reader.getString();
                } else if ("serverVersion".equals(fieldName)) {
                    deserializedOracleConnectionInfo.serverVersion = reader.getString();
                } else if ("port".equals(fieldName)) {
                    deserializedOracleConnectionInfo.port = reader.getNullable(JsonReader::getInt);
                } else if ("authentication".equals(fieldName)) {
                    deserializedOracleConnectionInfo.authentication = AuthenticationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOracleConnectionInfo;
        });
    }
}
