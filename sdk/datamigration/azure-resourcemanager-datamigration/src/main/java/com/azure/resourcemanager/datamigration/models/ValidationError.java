// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Description about the errors happen while performing migration validation.
 */
@Immutable
public final class ValidationError implements JsonSerializable<ValidationError> {
    /*
     * Error Text
     */
    private String text;

    /*
     * Severity of the error
     */
    private Severity severity;

    /**
     * Creates an instance of ValidationError class.
     */
    public ValidationError() {
    }

    /**
     * Get the text property: Error Text.
     * 
     * @return the text value.
     */
    public String text() {
        return this.text;
    }

    /**
     * Get the severity property: Severity of the error.
     * 
     * @return the severity value.
     */
    public Severity severity() {
        return this.severity;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ValidationError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ValidationError if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ValidationError.
     */
    public static ValidationError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ValidationError deserializedValidationError = new ValidationError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("text".equals(fieldName)) {
                    deserializedValidationError.text = reader.getString();
                } else if ("severity".equals(fieldName)) {
                    deserializedValidationError.severity = Severity.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedValidationError;
        });
    }
}
