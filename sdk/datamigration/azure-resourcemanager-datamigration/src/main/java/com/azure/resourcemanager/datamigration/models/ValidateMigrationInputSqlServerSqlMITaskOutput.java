// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations.
 */
@Fluent
public final class ValidateMigrationInputSqlServerSqlMITaskOutput
    implements JsonSerializable<ValidateMigrationInputSqlServerSqlMITaskOutput> {
    /*
     * Result identifier
     */
    private String id;

    /*
     * Name of database
     */
    private String name;

    /*
     * Errors associated with the RestoreDatabaseName
     */
    private List<ReportableException> restoreDatabaseNameErrors;

    /*
     * Errors associated with the BackupFolder path
     */
    private List<ReportableException> backupFolderErrors;

    /*
     * Errors associated with backup share user name and password credentials
     */
    private List<ReportableException> backupShareCredentialsErrors;

    /*
     * Errors associated with the storage account provided.
     */
    private List<ReportableException> backupStorageAccountErrors;

    /*
     * Errors associated with existing backup files.
     */
    private List<ReportableException> existingBackupErrors;

    /*
     * Information about backup files when existing backup mode is used.
     */
    private DatabaseBackupInfo databaseBackupInfo;

    /**
     * Creates an instance of ValidateMigrationInputSqlServerSqlMITaskOutput class.
     */
    public ValidateMigrationInputSqlServerSqlMITaskOutput() {
    }

    /**
     * Get the id property: Result identifier.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: Name of database.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the restoreDatabaseNameErrors property: Errors associated with the RestoreDatabaseName.
     * 
     * @return the restoreDatabaseNameErrors value.
     */
    public List<ReportableException> restoreDatabaseNameErrors() {
        return this.restoreDatabaseNameErrors;
    }

    /**
     * Get the backupFolderErrors property: Errors associated with the BackupFolder path.
     * 
     * @return the backupFolderErrors value.
     */
    public List<ReportableException> backupFolderErrors() {
        return this.backupFolderErrors;
    }

    /**
     * Get the backupShareCredentialsErrors property: Errors associated with backup share user name and password
     * credentials.
     * 
     * @return the backupShareCredentialsErrors value.
     */
    public List<ReportableException> backupShareCredentialsErrors() {
        return this.backupShareCredentialsErrors;
    }

    /**
     * Get the backupStorageAccountErrors property: Errors associated with the storage account provided.
     * 
     * @return the backupStorageAccountErrors value.
     */
    public List<ReportableException> backupStorageAccountErrors() {
        return this.backupStorageAccountErrors;
    }

    /**
     * Get the existingBackupErrors property: Errors associated with existing backup files.
     * 
     * @return the existingBackupErrors value.
     */
    public List<ReportableException> existingBackupErrors() {
        return this.existingBackupErrors;
    }

    /**
     * Get the databaseBackupInfo property: Information about backup files when existing backup mode is used.
     * 
     * @return the databaseBackupInfo value.
     */
    public DatabaseBackupInfo databaseBackupInfo() {
        return this.databaseBackupInfo;
    }

    /**
     * Set the databaseBackupInfo property: Information about backup files when existing backup mode is used.
     * 
     * @param databaseBackupInfo the databaseBackupInfo value to set.
     * @return the ValidateMigrationInputSqlServerSqlMITaskOutput object itself.
     */
    public ValidateMigrationInputSqlServerSqlMITaskOutput
        withDatabaseBackupInfo(DatabaseBackupInfo databaseBackupInfo) {
        this.databaseBackupInfo = databaseBackupInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (restoreDatabaseNameErrors() != null) {
            restoreDatabaseNameErrors().forEach(e -> e.validate());
        }
        if (backupFolderErrors() != null) {
            backupFolderErrors().forEach(e -> e.validate());
        }
        if (backupShareCredentialsErrors() != null) {
            backupShareCredentialsErrors().forEach(e -> e.validate());
        }
        if (backupStorageAccountErrors() != null) {
            backupStorageAccountErrors().forEach(e -> e.validate());
        }
        if (existingBackupErrors() != null) {
            existingBackupErrors().forEach(e -> e.validate());
        }
        if (databaseBackupInfo() != null) {
            databaseBackupInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("databaseBackupInfo", this.databaseBackupInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ValidateMigrationInputSqlServerSqlMITaskOutput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ValidateMigrationInputSqlServerSqlMITaskOutput if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ValidateMigrationInputSqlServerSqlMITaskOutput.
     */
    public static ValidateMigrationInputSqlServerSqlMITaskOutput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ValidateMigrationInputSqlServerSqlMITaskOutput deserializedValidateMigrationInputSqlServerSqlMITaskOutput
                = new ValidateMigrationInputSqlServerSqlMITaskOutput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedValidateMigrationInputSqlServerSqlMITaskOutput.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedValidateMigrationInputSqlServerSqlMITaskOutput.name = reader.getString();
                } else if ("restoreDatabaseNameErrors".equals(fieldName)) {
                    List<ReportableException> restoreDatabaseNameErrors
                        = reader.readArray(reader1 -> ReportableException.fromJson(reader1));
                    deserializedValidateMigrationInputSqlServerSqlMITaskOutput.restoreDatabaseNameErrors
                        = restoreDatabaseNameErrors;
                } else if ("backupFolderErrors".equals(fieldName)) {
                    List<ReportableException> backupFolderErrors
                        = reader.readArray(reader1 -> ReportableException.fromJson(reader1));
                    deserializedValidateMigrationInputSqlServerSqlMITaskOutput.backupFolderErrors = backupFolderErrors;
                } else if ("backupShareCredentialsErrors".equals(fieldName)) {
                    List<ReportableException> backupShareCredentialsErrors
                        = reader.readArray(reader1 -> ReportableException.fromJson(reader1));
                    deserializedValidateMigrationInputSqlServerSqlMITaskOutput.backupShareCredentialsErrors
                        = backupShareCredentialsErrors;
                } else if ("backupStorageAccountErrors".equals(fieldName)) {
                    List<ReportableException> backupStorageAccountErrors
                        = reader.readArray(reader1 -> ReportableException.fromJson(reader1));
                    deserializedValidateMigrationInputSqlServerSqlMITaskOutput.backupStorageAccountErrors
                        = backupStorageAccountErrors;
                } else if ("existingBackupErrors".equals(fieldName)) {
                    List<ReportableException> existingBackupErrors
                        = reader.readArray(reader1 -> ReportableException.fromJson(reader1));
                    deserializedValidateMigrationInputSqlServerSqlMITaskOutput.existingBackupErrors
                        = existingBackupErrors;
                } else if ("databaseBackupInfo".equals(fieldName)) {
                    deserializedValidateMigrationInputSqlServerSqlMITaskOutput.databaseBackupInfo
                        = DatabaseBackupInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedValidateMigrationInputSqlServerSqlMITaskOutput;
        });
    }
}
