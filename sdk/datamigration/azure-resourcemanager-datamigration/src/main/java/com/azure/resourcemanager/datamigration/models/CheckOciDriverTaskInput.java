// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datamigration.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Input for the service task to check for OCI drivers.
 */
@Fluent
public final class CheckOciDriverTaskInput implements JsonSerializable<CheckOciDriverTaskInput> {
    /*
     * Version of the source server to check against. Optional.
     */
    private String serverVersion;

    /**
     * Creates an instance of CheckOciDriverTaskInput class.
     */
    public CheckOciDriverTaskInput() {
    }

    /**
     * Get the serverVersion property: Version of the source server to check against. Optional.
     * 
     * @return the serverVersion value.
     */
    public String serverVersion() {
        return this.serverVersion;
    }

    /**
     * Set the serverVersion property: Version of the source server to check against. Optional.
     * 
     * @param serverVersion the serverVersion value to set.
     * @return the CheckOciDriverTaskInput object itself.
     */
    public CheckOciDriverTaskInput withServerVersion(String serverVersion) {
        this.serverVersion = serverVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serverVersion", this.serverVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CheckOciDriverTaskInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CheckOciDriverTaskInput if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CheckOciDriverTaskInput.
     */
    public static CheckOciDriverTaskInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CheckOciDriverTaskInput deserializedCheckOciDriverTaskInput = new CheckOciDriverTaskInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serverVersion".equals(fieldName)) {
                    deserializedCheckOciDriverTaskInput.serverVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCheckOciDriverTaskInput;
        });
    }
}
