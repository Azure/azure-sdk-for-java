// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of the application type version resource.
 */
@Fluent
public final class ApplicationTypeVersionResourceProperties
    implements JsonSerializable<ApplicationTypeVersionResourceProperties> {
    /*
     * The current deployment or provisioning state, which only appears in the response
     */
    private String provisioningState;

    /*
     * The URL to the application package
     */
    private String appPackageUrl;

    /**
     * Creates an instance of ApplicationTypeVersionResourceProperties class.
     */
    public ApplicationTypeVersionResourceProperties() {
    }

    /**
     * Get the provisioningState property: The current deployment or provisioning state, which only appears in the
     * response.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the appPackageUrl property: The URL to the application package.
     * 
     * @return the appPackageUrl value.
     */
    public String appPackageUrl() {
        return this.appPackageUrl;
    }

    /**
     * Set the appPackageUrl property: The URL to the application package.
     * 
     * @param appPackageUrl the appPackageUrl value to set.
     * @return the ApplicationTypeVersionResourceProperties object itself.
     */
    public ApplicationTypeVersionResourceProperties withAppPackageUrl(String appPackageUrl) {
        this.appPackageUrl = appPackageUrl;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (appPackageUrl() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property appPackageUrl in model ApplicationTypeVersionResourceProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApplicationTypeVersionResourceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("appPackageUrl", this.appPackageUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationTypeVersionResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationTypeVersionResourceProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApplicationTypeVersionResourceProperties.
     */
    public static ApplicationTypeVersionResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationTypeVersionResourceProperties deserializedApplicationTypeVersionResourceProperties
                = new ApplicationTypeVersionResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("appPackageUrl".equals(fieldName)) {
                    deserializedApplicationTypeVersionResourceProperties.appPackageUrl = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedApplicationTypeVersionResourceProperties.provisioningState = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationTypeVersionResourceProperties;
        });
    }
}
