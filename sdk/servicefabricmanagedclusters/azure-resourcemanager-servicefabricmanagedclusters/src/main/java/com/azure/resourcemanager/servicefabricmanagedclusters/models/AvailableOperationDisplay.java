// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Operation supported by the Service Fabric resource provider.
 */
@Fluent
public final class AvailableOperationDisplay implements JsonSerializable<AvailableOperationDisplay> {
    /*
     * The name of the provider.
     */
    private String provider;

    /*
     * The resource on which the operation is performed
     */
    private String resource;

    /*
     * The operation that can be performed.
     */
    private String operation;

    /*
     * Operation description
     */
    private String description;

    /**
     * Creates an instance of AvailableOperationDisplay class.
     */
    public AvailableOperationDisplay() {
    }

    /**
     * Get the provider property: The name of the provider.
     * 
     * @return the provider value.
     */
    public String provider() {
        return this.provider;
    }

    /**
     * Set the provider property: The name of the provider.
     * 
     * @param provider the provider value to set.
     * @return the AvailableOperationDisplay object itself.
     */
    public AvailableOperationDisplay withProvider(String provider) {
        this.provider = provider;
        return this;
    }

    /**
     * Get the resource property: The resource on which the operation is performed.
     * 
     * @return the resource value.
     */
    public String resource() {
        return this.resource;
    }

    /**
     * Set the resource property: The resource on which the operation is performed.
     * 
     * @param resource the resource value to set.
     * @return the AvailableOperationDisplay object itself.
     */
    public AvailableOperationDisplay withResource(String resource) {
        this.resource = resource;
        return this;
    }

    /**
     * Get the operation property: The operation that can be performed.
     * 
     * @return the operation value.
     */
    public String operation() {
        return this.operation;
    }

    /**
     * Set the operation property: The operation that can be performed.
     * 
     * @param operation the operation value to set.
     * @return the AvailableOperationDisplay object itself.
     */
    public AvailableOperationDisplay withOperation(String operation) {
        this.operation = operation;
        return this;
    }

    /**
     * Get the description property: Operation description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Operation description.
     * 
     * @param description the description value to set.
     * @return the AvailableOperationDisplay object itself.
     */
    public AvailableOperationDisplay withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("provider", this.provider);
        jsonWriter.writeStringField("resource", this.resource);
        jsonWriter.writeStringField("operation", this.operation);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvailableOperationDisplay from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvailableOperationDisplay if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AvailableOperationDisplay.
     */
    public static AvailableOperationDisplay fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvailableOperationDisplay deserializedAvailableOperationDisplay = new AvailableOperationDisplay();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provider".equals(fieldName)) {
                    deserializedAvailableOperationDisplay.provider = reader.getString();
                } else if ("resource".equals(fieldName)) {
                    deserializedAvailableOperationDisplay.resource = reader.getString();
                } else if ("operation".equals(fieldName)) {
                    deserializedAvailableOperationDisplay.operation = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedAvailableOperationDisplay.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvailableOperationDisplay;
        });
    }
}
