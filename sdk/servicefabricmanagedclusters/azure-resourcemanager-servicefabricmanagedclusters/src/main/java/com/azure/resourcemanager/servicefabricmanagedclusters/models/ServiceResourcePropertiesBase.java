// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The common service resource properties.
 */
@Fluent
public class ServiceResourcePropertiesBase implements JsonSerializable<ServiceResourcePropertiesBase> {
    /*
     * The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow
     * for restricting a service to particular nodes based on the service requirements. For example, to place a service
     * on nodes where NodeType is blue specify the following: "NodeColor == blue)".
     */
    private String placementConstraints;

    /*
     * A list that describes the correlation of the service with other services.
     */
    private List<ServiceCorrelation> correlationScheme;

    /*
     * The service load metrics is given as an array of ServiceLoadMetric objects.
     */
    private List<ServiceLoadMetric> serviceLoadMetrics;

    /*
     * A list that describes the correlation of the service with other services.
     */
    private List<ServicePlacementPolicy> servicePlacementPolicies;

    /*
     * Specifies the move cost for the service.
     */
    private MoveCost defaultMoveCost;

    /*
     * Scaling policies for this service.
     */
    private List<ScalingPolicy> scalingPolicies;

    /**
     * Creates an instance of ServiceResourcePropertiesBase class.
     */
    public ServiceResourcePropertiesBase() {
    }

    /**
     * Get the placementConstraints property: The placement constraints as a string. Placement constraints are boolean
     * expressions on node properties and allow for restricting a service to particular nodes based on the service
     * requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor
     * == blue)".
     * 
     * @return the placementConstraints value.
     */
    public String placementConstraints() {
        return this.placementConstraints;
    }

    /**
     * Set the placementConstraints property: The placement constraints as a string. Placement constraints are boolean
     * expressions on node properties and allow for restricting a service to particular nodes based on the service
     * requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor
     * == blue)".
     * 
     * @param placementConstraints the placementConstraints value to set.
     * @return the ServiceResourcePropertiesBase object itself.
     */
    public ServiceResourcePropertiesBase withPlacementConstraints(String placementConstraints) {
        this.placementConstraints = placementConstraints;
        return this;
    }

    /**
     * Get the correlationScheme property: A list that describes the correlation of the service with other services.
     * 
     * @return the correlationScheme value.
     */
    public List<ServiceCorrelation> correlationScheme() {
        return this.correlationScheme;
    }

    /**
     * Set the correlationScheme property: A list that describes the correlation of the service with other services.
     * 
     * @param correlationScheme the correlationScheme value to set.
     * @return the ServiceResourcePropertiesBase object itself.
     */
    public ServiceResourcePropertiesBase withCorrelationScheme(List<ServiceCorrelation> correlationScheme) {
        this.correlationScheme = correlationScheme;
        return this;
    }

    /**
     * Get the serviceLoadMetrics property: The service load metrics is given as an array of ServiceLoadMetric objects.
     * 
     * @return the serviceLoadMetrics value.
     */
    public List<ServiceLoadMetric> serviceLoadMetrics() {
        return this.serviceLoadMetrics;
    }

    /**
     * Set the serviceLoadMetrics property: The service load metrics is given as an array of ServiceLoadMetric objects.
     * 
     * @param serviceLoadMetrics the serviceLoadMetrics value to set.
     * @return the ServiceResourcePropertiesBase object itself.
     */
    public ServiceResourcePropertiesBase withServiceLoadMetrics(List<ServiceLoadMetric> serviceLoadMetrics) {
        this.serviceLoadMetrics = serviceLoadMetrics;
        return this;
    }

    /**
     * Get the servicePlacementPolicies property: A list that describes the correlation of the service with other
     * services.
     * 
     * @return the servicePlacementPolicies value.
     */
    public List<ServicePlacementPolicy> servicePlacementPolicies() {
        return this.servicePlacementPolicies;
    }

    /**
     * Set the servicePlacementPolicies property: A list that describes the correlation of the service with other
     * services.
     * 
     * @param servicePlacementPolicies the servicePlacementPolicies value to set.
     * @return the ServiceResourcePropertiesBase object itself.
     */
    public ServiceResourcePropertiesBase
        withServicePlacementPolicies(List<ServicePlacementPolicy> servicePlacementPolicies) {
        this.servicePlacementPolicies = servicePlacementPolicies;
        return this;
    }

    /**
     * Get the defaultMoveCost property: Specifies the move cost for the service.
     * 
     * @return the defaultMoveCost value.
     */
    public MoveCost defaultMoveCost() {
        return this.defaultMoveCost;
    }

    /**
     * Set the defaultMoveCost property: Specifies the move cost for the service.
     * 
     * @param defaultMoveCost the defaultMoveCost value to set.
     * @return the ServiceResourcePropertiesBase object itself.
     */
    public ServiceResourcePropertiesBase withDefaultMoveCost(MoveCost defaultMoveCost) {
        this.defaultMoveCost = defaultMoveCost;
        return this;
    }

    /**
     * Get the scalingPolicies property: Scaling policies for this service.
     * 
     * @return the scalingPolicies value.
     */
    public List<ScalingPolicy> scalingPolicies() {
        return this.scalingPolicies;
    }

    /**
     * Set the scalingPolicies property: Scaling policies for this service.
     * 
     * @param scalingPolicies the scalingPolicies value to set.
     * @return the ServiceResourcePropertiesBase object itself.
     */
    public ServiceResourcePropertiesBase withScalingPolicies(List<ScalingPolicy> scalingPolicies) {
        this.scalingPolicies = scalingPolicies;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (correlationScheme() != null) {
            correlationScheme().forEach(e -> e.validate());
        }
        if (serviceLoadMetrics() != null) {
            serviceLoadMetrics().forEach(e -> e.validate());
        }
        if (servicePlacementPolicies() != null) {
            servicePlacementPolicies().forEach(e -> e.validate());
        }
        if (scalingPolicies() != null) {
            scalingPolicies().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("placementConstraints", this.placementConstraints);
        jsonWriter.writeArrayField("correlationScheme", this.correlationScheme,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("serviceLoadMetrics", this.serviceLoadMetrics,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("servicePlacementPolicies", this.servicePlacementPolicies,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("defaultMoveCost",
            this.defaultMoveCost == null ? null : this.defaultMoveCost.toString());
        jsonWriter.writeArrayField("scalingPolicies", this.scalingPolicies,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceResourcePropertiesBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceResourcePropertiesBase if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceResourcePropertiesBase.
     */
    public static ServiceResourcePropertiesBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceResourcePropertiesBase deserializedServiceResourcePropertiesBase
                = new ServiceResourcePropertiesBase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("placementConstraints".equals(fieldName)) {
                    deserializedServiceResourcePropertiesBase.placementConstraints = reader.getString();
                } else if ("correlationScheme".equals(fieldName)) {
                    List<ServiceCorrelation> correlationScheme
                        = reader.readArray(reader1 -> ServiceCorrelation.fromJson(reader1));
                    deserializedServiceResourcePropertiesBase.correlationScheme = correlationScheme;
                } else if ("serviceLoadMetrics".equals(fieldName)) {
                    List<ServiceLoadMetric> serviceLoadMetrics
                        = reader.readArray(reader1 -> ServiceLoadMetric.fromJson(reader1));
                    deserializedServiceResourcePropertiesBase.serviceLoadMetrics = serviceLoadMetrics;
                } else if ("servicePlacementPolicies".equals(fieldName)) {
                    List<ServicePlacementPolicy> servicePlacementPolicies
                        = reader.readArray(reader1 -> ServicePlacementPolicy.fromJson(reader1));
                    deserializedServiceResourcePropertiesBase.servicePlacementPolicies = servicePlacementPolicies;
                } else if ("defaultMoveCost".equals(fieldName)) {
                    deserializedServiceResourcePropertiesBase.defaultMoveCost = MoveCost.fromString(reader.getString());
                } else if ("scalingPolicies".equals(fieldName)) {
                    List<ScalingPolicy> scalingPolicies = reader.readArray(reader1 -> ScalingPolicy.fromJson(reader1));
                    deserializedServiceResourcePropertiesBase.scalingPolicies = scalingPolicies;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceResourcePropertiesBase;
        });
    }
}
