// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Node type fault simulation object with status.
 */
@Immutable
public final class NodeTypeFaultSimulation implements JsonSerializable<NodeTypeFaultSimulation> {
    /*
     * Node type name.
     */
    private String nodeTypeName;

    /*
     * Fault simulation status
     */
    private FaultSimulationStatus status;

    /*
     * Current or latest asynchronous operation identifier on the node type.
     */
    private String operationId;

    /*
     * Current or latest asynchronous operation status on the node type
     */
    private SfmcOperationStatus operationStatus;

    /**
     * Creates an instance of NodeTypeFaultSimulation class.
     */
    private NodeTypeFaultSimulation() {
    }

    /**
     * Get the nodeTypeName property: Node type name.
     * 
     * @return the nodeTypeName value.
     */
    public String nodeTypeName() {
        return this.nodeTypeName;
    }

    /**
     * Get the status property: Fault simulation status.
     * 
     * @return the status value.
     */
    public FaultSimulationStatus status() {
        return this.status;
    }

    /**
     * Get the operationId property: Current or latest asynchronous operation identifier on the node type.
     * 
     * @return the operationId value.
     */
    public String operationId() {
        return this.operationId;
    }

    /**
     * Get the operationStatus property: Current or latest asynchronous operation status on the node type.
     * 
     * @return the operationStatus value.
     */
    public SfmcOperationStatus operationStatus() {
        return this.operationStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("nodeTypeName", this.nodeTypeName);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("operationId", this.operationId);
        jsonWriter.writeStringField("operationStatus",
            this.operationStatus == null ? null : this.operationStatus.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NodeTypeFaultSimulation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NodeTypeFaultSimulation if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NodeTypeFaultSimulation.
     */
    public static NodeTypeFaultSimulation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NodeTypeFaultSimulation deserializedNodeTypeFaultSimulation = new NodeTypeFaultSimulation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nodeTypeName".equals(fieldName)) {
                    deserializedNodeTypeFaultSimulation.nodeTypeName = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedNodeTypeFaultSimulation.status = FaultSimulationStatus.fromString(reader.getString());
                } else if ("operationId".equals(fieldName)) {
                    deserializedNodeTypeFaultSimulation.operationId = reader.getString();
                } else if ("operationStatus".equals(fieldName)) {
                    deserializedNodeTypeFaultSimulation.operationStatus
                        = SfmcOperationStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNodeTypeFaultSimulation;
        });
    }
}
