// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details for Fault Simulation.
 */
@Immutable
public final class FaultSimulationDetails implements JsonSerializable<FaultSimulationDetails> {
    /*
     * unique identifier for the cluster resource.
     */
    private String clusterId;

    /*
     * unique identifier for the operation associated with the fault simulation.
     */
    private String operationId;

    /*
     * List of node type simulations associated with the cluster fault simulation.
     */
    private List<NodeTypeFaultSimulation> nodeTypeFaultSimulation;

    /*
     * Fault simulation parameters.
     */
    private FaultSimulationContent parameters;

    /**
     * Creates an instance of FaultSimulationDetails class.
     */
    private FaultSimulationDetails() {
    }

    /**
     * Get the clusterId property: unique identifier for the cluster resource.
     * 
     * @return the clusterId value.
     */
    public String clusterId() {
        return this.clusterId;
    }

    /**
     * Get the operationId property: unique identifier for the operation associated with the fault simulation.
     * 
     * @return the operationId value.
     */
    public String operationId() {
        return this.operationId;
    }

    /**
     * Get the nodeTypeFaultSimulation property: List of node type simulations associated with the cluster fault
     * simulation.
     * 
     * @return the nodeTypeFaultSimulation value.
     */
    public List<NodeTypeFaultSimulation> nodeTypeFaultSimulation() {
        return this.nodeTypeFaultSimulation;
    }

    /**
     * Get the parameters property: Fault simulation parameters.
     * 
     * @return the parameters value.
     */
    public FaultSimulationContent parameters() {
        return this.parameters;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nodeTypeFaultSimulation() != null) {
            nodeTypeFaultSimulation().forEach(e -> e.validate());
        }
        if (parameters() != null) {
            parameters().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clusterId", this.clusterId);
        jsonWriter.writeStringField("operationId", this.operationId);
        jsonWriter.writeArrayField("nodeTypeFaultSimulation", this.nodeTypeFaultSimulation,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("parameters", this.parameters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FaultSimulationDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FaultSimulationDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FaultSimulationDetails.
     */
    public static FaultSimulationDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FaultSimulationDetails deserializedFaultSimulationDetails = new FaultSimulationDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clusterId".equals(fieldName)) {
                    deserializedFaultSimulationDetails.clusterId = reader.getString();
                } else if ("operationId".equals(fieldName)) {
                    deserializedFaultSimulationDetails.operationId = reader.getString();
                } else if ("nodeTypeFaultSimulation".equals(fieldName)) {
                    List<NodeTypeFaultSimulation> nodeTypeFaultSimulation
                        = reader.readArray(reader1 -> NodeTypeFaultSimulation.fromJson(reader1));
                    deserializedFaultSimulationDetails.nodeTypeFaultSimulation = nodeTypeFaultSimulation;
                } else if ("parameters".equals(fieldName)) {
                    deserializedFaultSimulationDetails.parameters = FaultSimulationContent.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFaultSimulationDetails;
        });
    }
}
