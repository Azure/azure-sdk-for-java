// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a scaling mechanism for adding or removing named partitions of a stateless service. Partition names are in
 * the format '0','1'...'N-1'.
 */
@Fluent
public final class AddRemoveIncrementalNamedPartitionScalingMechanism extends ScalingMechanism {
    /*
     * Specifies the mechanism associated with this scaling policy.
     */
    private ServiceScalingMechanismKind kind = ServiceScalingMechanismKind.ADD_REMOVE_INCREMENTAL_NAMED_PARTITION;

    /*
     * Minimum number of named partitions of the service.
     */
    private int minPartitionCount;

    /*
     * Maximum number of named partitions of the service.
     */
    private int maxPartitionCount;

    /*
     * The number of instances to add or remove during a scaling operation.
     */
    private int scaleIncrement;

    /**
     * Creates an instance of AddRemoveIncrementalNamedPartitionScalingMechanism class.
     */
    public AddRemoveIncrementalNamedPartitionScalingMechanism() {
    }

    /**
     * Get the kind property: Specifies the mechanism associated with this scaling policy.
     * 
     * @return the kind value.
     */
    @Override
    public ServiceScalingMechanismKind kind() {
        return this.kind;
    }

    /**
     * Get the minPartitionCount property: Minimum number of named partitions of the service.
     * 
     * @return the minPartitionCount value.
     */
    public int minPartitionCount() {
        return this.minPartitionCount;
    }

    /**
     * Set the minPartitionCount property: Minimum number of named partitions of the service.
     * 
     * @param minPartitionCount the minPartitionCount value to set.
     * @return the AddRemoveIncrementalNamedPartitionScalingMechanism object itself.
     */
    public AddRemoveIncrementalNamedPartitionScalingMechanism withMinPartitionCount(int minPartitionCount) {
        this.minPartitionCount = minPartitionCount;
        return this;
    }

    /**
     * Get the maxPartitionCount property: Maximum number of named partitions of the service.
     * 
     * @return the maxPartitionCount value.
     */
    public int maxPartitionCount() {
        return this.maxPartitionCount;
    }

    /**
     * Set the maxPartitionCount property: Maximum number of named partitions of the service.
     * 
     * @param maxPartitionCount the maxPartitionCount value to set.
     * @return the AddRemoveIncrementalNamedPartitionScalingMechanism object itself.
     */
    public AddRemoveIncrementalNamedPartitionScalingMechanism withMaxPartitionCount(int maxPartitionCount) {
        this.maxPartitionCount = maxPartitionCount;
        return this;
    }

    /**
     * Get the scaleIncrement property: The number of instances to add or remove during a scaling operation.
     * 
     * @return the scaleIncrement value.
     */
    public int scaleIncrement() {
        return this.scaleIncrement;
    }

    /**
     * Set the scaleIncrement property: The number of instances to add or remove during a scaling operation.
     * 
     * @param scaleIncrement the scaleIncrement value to set.
     * @return the AddRemoveIncrementalNamedPartitionScalingMechanism object itself.
     */
    public AddRemoveIncrementalNamedPartitionScalingMechanism withScaleIncrement(int scaleIncrement) {
        this.scaleIncrement = scaleIncrement;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("minPartitionCount", this.minPartitionCount);
        jsonWriter.writeIntField("maxPartitionCount", this.maxPartitionCount);
        jsonWriter.writeIntField("scaleIncrement", this.scaleIncrement);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AddRemoveIncrementalNamedPartitionScalingMechanism from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AddRemoveIncrementalNamedPartitionScalingMechanism if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AddRemoveIncrementalNamedPartitionScalingMechanism.
     */
    public static AddRemoveIncrementalNamedPartitionScalingMechanism fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            AddRemoveIncrementalNamedPartitionScalingMechanism deserializedAddRemoveIncrementalNamedPartitionScalingMechanism
                = new AddRemoveIncrementalNamedPartitionScalingMechanism();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("minPartitionCount".equals(fieldName)) {
                    deserializedAddRemoveIncrementalNamedPartitionScalingMechanism.minPartitionCount = reader.getInt();
                } else if ("maxPartitionCount".equals(fieldName)) {
                    deserializedAddRemoveIncrementalNamedPartitionScalingMechanism.maxPartitionCount = reader.getInt();
                } else if ("scaleIncrement".equals(fieldName)) {
                    deserializedAddRemoveIncrementalNamedPartitionScalingMechanism.scaleIncrement = reader.getInt();
                } else if ("kind".equals(fieldName)) {
                    deserializedAddRemoveIncrementalNamedPartitionScalingMechanism.kind
                        = ServiceScalingMechanismKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAddRemoveIncrementalNamedPartitionScalingMechanism;
        });
    }
}
