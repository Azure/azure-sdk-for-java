// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.NodeTypeInner;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of NodeType.
 */
public interface NodeType {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the tags property: Azure resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: Metadata pertaining to creation and last modification of the resource.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the sku property: The node type sku.
     * 
     * @return the sku value.
     */
    NodeTypeSku sku();

    /**
     * Gets the isPrimary property: Indicates the Service Fabric system services for the cluster will run on this node
     * type. This setting cannot be changed once the node type is created.
     * 
     * @return the isPrimary value.
     */
    boolean isPrimary();

    /**
     * Gets the vmInstanceCount property: The number of nodes in the node type. &lt;br /&gt;&lt;br /&gt;**Values:**
     * &lt;br /&gt;-1 - Use when auto scale rules are configured or sku.capacity is defined &lt;br /&gt; 0 - Not
     * supported &lt;br /&gt; &gt;0 - Use for manual scale.
     * 
     * @return the vmInstanceCount value.
     */
    int vmInstanceCount();

    /**
     * Gets the dataDiskSizeGB property: Disk size for the managed disk attached to the vms on the node type in GBs.
     * 
     * @return the dataDiskSizeGB value.
     */
    Integer dataDiskSizeGB();

    /**
     * Gets the dataDiskType property: Managed data disk type. Specifies the storage account type for the managed disk.
     * 
     * @return the dataDiskType value.
     */
    DiskType dataDiskType();

    /**
     * Gets the dataDiskLetter property: Managed data disk letter. It can not use the reserved letter C or D and it can
     * not change after created.
     * 
     * @return the dataDiskLetter value.
     */
    String dataDiskLetter();

    /**
     * Gets the placementProperties property: The placement tags applied to nodes in the node type, which can be used to
     * indicate where certain services (workload) should run.
     * 
     * @return the placementProperties value.
     */
    Map<String, String> placementProperties();

    /**
     * Gets the capacities property: The capacity tags applied to the nodes in the node type, the cluster resource
     * manager uses these tags to understand how much resource a node has.
     * 
     * @return the capacities value.
     */
    Map<String, String> capacities();

    /**
     * Gets the applicationPorts property: The range of ports from which cluster assigned port to Service Fabric
     * applications.
     * 
     * @return the applicationPorts value.
     */
    EndpointRangeDescription applicationPorts();

    /**
     * Gets the ephemeralPorts property: The range of ephemeral ports that nodes in this node type should be configured
     * with.
     * 
     * @return the ephemeralPorts value.
     */
    EndpointRangeDescription ephemeralPorts();

    /**
     * Gets the vmSize property: The size of virtual machines in the pool. All virtual machines in a pool are the same
     * size. For example, Standard_D3.
     * 
     * @return the vmSize value.
     */
    String vmSize();

    /**
     * Gets the vmImagePublisher property: The publisher of the Azure Virtual Machines Marketplace image. For example,
     * Canonical or MicrosoftWindowsServer.
     * 
     * @return the vmImagePublisher value.
     */
    String vmImagePublisher();

    /**
     * Gets the vmImageOffer property: The offer type of the Azure Virtual Machines Marketplace image. For example,
     * UbuntuServer or WindowsServer.
     * 
     * @return the vmImageOffer value.
     */
    String vmImageOffer();

    /**
     * Gets the vmImageSku property: The SKU of the Azure Virtual Machines Marketplace image. For example, 14.04.0-LTS
     * or 2012-R2-Datacenter.
     * 
     * @return the vmImageSku value.
     */
    String vmImageSku();

    /**
     * Gets the vmImageVersion property: The version of the Azure Virtual Machines Marketplace image. A value of
     * 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
     * 
     * @return the vmImageVersion value.
     */
    String vmImageVersion();

    /**
     * Gets the vmSecrets property: The secrets to install in the virtual machines.
     * 
     * @return the vmSecrets value.
     */
    List<VaultSecretGroup> vmSecrets();

    /**
     * Gets the vmExtensions property: Set of extensions that should be installed onto the virtual machines.
     * 
     * @return the vmExtensions value.
     */
    List<VmssExtension> vmExtensions();

    /**
     * Gets the vmManagedIdentity property: Identities to assign to the virtual machine scale set under the node type.
     * 
     * @return the vmManagedIdentity value.
     */
    VmManagedIdentity vmManagedIdentity();

    /**
     * Gets the isStateless property: Indicates if the node type can only host Stateless workloads.
     * 
     * @return the isStateless value.
     */
    Boolean isStateless();

    /**
     * Gets the multiplePlacementGroups property: Indicates if scale set associated with the node type can be composed
     * of multiple placement groups.
     * 
     * @return the multiplePlacementGroups value.
     */
    Boolean multiplePlacementGroups();

    /**
     * Gets the frontendConfigurations property: Indicates the node type uses its own frontend configurations instead of
     * the default one for the cluster. This setting can only be specified for non-primary node types and can not be
     * added or removed after the node type is created.
     * 
     * @return the frontendConfigurations value.
     */
    List<FrontendConfiguration> frontendConfigurations();

    /**
     * Gets the networkSecurityRules property: The Network Security Rules for this node type. This setting can only be
     * specified for node types that are configured with frontend configurations.
     * 
     * @return the networkSecurityRules value.
     */
    List<NetworkSecurityRule> networkSecurityRules();

    /**
     * Gets the additionalDataDisks property: Additional managed data disks.
     * 
     * @return the additionalDataDisks value.
     */
    List<VmssDataDisk> additionalDataDisks();

    /**
     * Gets the enableEncryptionAtHost property: Enable or disable the Host Encryption for the virtual machines on the
     * node type. This will enable the encryption for all the disks including Resource/Temp disk at host itself.
     * Default: The Encryption at host will be disabled unless this property is set to true for the resource.
     * 
     * @return the enableEncryptionAtHost value.
     */
    Boolean enableEncryptionAtHost();

    /**
     * Gets the provisioningState property: The provisioning state of the node type resource.
     * 
     * @return the provisioningState value.
     */
    ManagedResourceProvisioningState provisioningState();

    /**
     * Gets the enableAcceleratedNetworking property: Specifies whether the network interface is accelerated
     * networking-enabled.
     * 
     * @return the enableAcceleratedNetworking value.
     */
    Boolean enableAcceleratedNetworking();

    /**
     * Gets the useDefaultPublicLoadBalancer property: Specifies whether the use public load balancer. If not specified
     * and the node type doesn't have its own frontend configuration, it will be attached to the default load balancer.
     * If the node type uses its own Load balancer and useDefaultPublicLoadBalancer is true, then the frontend has to be
     * an Internal Load Balancer. If the node type uses its own Load balancer and useDefaultPublicLoadBalancer is false
     * or not set, then the custom load balancer must include a public load balancer to provide outbound connectivity.
     * 
     * @return the useDefaultPublicLoadBalancer value.
     */
    Boolean useDefaultPublicLoadBalancer();

    /**
     * Gets the useTempDataDisk property: Specifies whether to use the temporary disk for the service fabric data root,
     * in which case no managed data disk will be attached and the temporary disk will be used. It is only allowed for
     * stateless node types.
     * 
     * @return the useTempDataDisk value.
     */
    Boolean useTempDataDisk();

    /**
     * Gets the enableOverProvisioning property: Specifies whether the node type should be overprovisioned. It is only
     * allowed for stateless node types.
     * 
     * @return the enableOverProvisioning value.
     */
    Boolean enableOverProvisioning();

    /**
     * Gets the zones property: Specifies the availability zones where the node type would span across. If the cluster
     * is not spanning across availability zones, initiates az migration for the cluster.
     * 
     * @return the zones value.
     */
    List<String> zones();

    /**
     * Gets the isSpotVM property: Indicates whether the node type will be Spot Virtual Machines. Azure will allocate
     * the VMs if there is capacity available and the VMs can be evicted at any time.
     * 
     * @return the isSpotVM value.
     */
    Boolean isSpotVM();

    /**
     * Gets the hostGroupId property: Specifies the full host group resource Id. This property is used for deploying on
     * azure dedicated hosts.
     * 
     * @return the hostGroupId value.
     */
    String hostGroupId();

    /**
     * Gets the useEphemeralOSDisk property: Indicates whether to use ephemeral os disk. The sku selected on the vmSize
     * property needs to support this feature.
     * 
     * @return the useEphemeralOSDisk value.
     */
    Boolean useEphemeralOSDisk();

    /**
     * Gets the spotRestoreTimeout property: Indicates the time duration after which the platform will not try to
     * restore the VMSS SPOT instances specified as ISO 8601.
     * 
     * @return the spotRestoreTimeout value.
     */
    String spotRestoreTimeout();

    /**
     * Gets the evictionPolicy property: Specifies the eviction policy for virtual machines in a SPOT node type. Default
     * is Delete.
     * 
     * @return the evictionPolicy value.
     */
    EvictionPolicyType evictionPolicy();

    /**
     * Gets the vmImageResourceId property: Indicates the resource id of the vm image. This parameter is used for custom
     * vm image.
     * 
     * @return the vmImageResourceId value.
     */
    String vmImageResourceId();

    /**
     * Gets the subnetId property: Indicates the resource id of the subnet for the node type.
     * 
     * @return the subnetId value.
     */
    String subnetId();

    /**
     * Gets the vmSetupActions property: Specifies the actions to be performed on the vms before bootstrapping the
     * service fabric runtime.
     * 
     * @return the vmSetupActions value.
     */
    List<VmSetupAction> vmSetupActions();

    /**
     * Gets the securityType property: Specifies the security type of the nodeType. Only Standard and TrustedLaunch are
     * currently supported.
     * 
     * @return the securityType value.
     */
    SecurityType securityType();

    /**
     * Gets the secureBootEnabled property: Specifies whether secure boot should be enabled on the nodeType. Can only be
     * used with TrustedLaunch SecurityType.
     * 
     * @return the secureBootEnabled value.
     */
    Boolean secureBootEnabled();

    /**
     * Gets the enableNodePublicIp property: Specifies whether each node is allocated its own public IPv4 address. This
     * is only supported on secondary node types with custom Load Balancers.
     * 
     * @return the enableNodePublicIp value.
     */
    Boolean enableNodePublicIp();

    /**
     * Gets the enableNodePublicIPv6 property: Specifies whether each node is allocated its own public IPv6 address.
     * This is only supported on secondary node types with custom Load Balancers.
     * 
     * @return the enableNodePublicIPv6 value.
     */
    Boolean enableNodePublicIPv6();

    /**
     * Gets the vmSharedGalleryImageId property: Indicates the resource id of the vm shared galleries image. This
     * parameter is used for custom vm image.
     * 
     * @return the vmSharedGalleryImageId value.
     */
    String vmSharedGalleryImageId();

    /**
     * Gets the natGatewayId property: Specifies the resource id of a NAT Gateway to attach to the subnet of this node
     * type. Node type must use custom load balancer.
     * 
     * @return the natGatewayId value.
     */
    String natGatewayId();

    /**
     * Gets the natConfigurations property: Specifies the NAT configuration on default public Load Balancer for the node
     * type. This is only supported for node types use the default public Load Balancer.
     * 
     * @return the natConfigurations value.
     */
    List<NodeTypeNatConfig> natConfigurations();

    /**
     * Gets the vmImagePlan property: Specifies information about the marketplace image used to create the virtual
     * machine. This element is only used for marketplace images. Before you can use a marketplace image from an API,
     * you must enable the image for programmatic use. In the Azure portal, find the marketplace image that you want to
     * use and then click Want to deploy programmatically, Get Started -&gt;. Enter any required information and then
     * click Save.
     * 
     * @return the vmImagePlan value.
     */
    VmImagePlan vmImagePlan();

    /**
     * Gets the serviceArtifactReferenceId property: Specifies the service artifact reference id used to set same image
     * version for all virtual machines in the scale set when using 'latest' image version.
     * 
     * @return the serviceArtifactReferenceId value.
     */
    String serviceArtifactReferenceId();

    /**
     * Gets the dscpConfigurationId property: Specifies the resource id of the DSCP configuration to apply to the node
     * type network interface.
     * 
     * @return the dscpConfigurationId value.
     */
    String dscpConfigurationId();

    /**
     * Gets the additionalNetworkInterfaceConfigurations property: Specifies the settings for any additional secondary
     * network interfaces to attach to the node type.
     * 
     * @return the additionalNetworkInterfaceConfigurations value.
     */
    List<AdditionalNetworkInterfaceConfiguration> additionalNetworkInterfaceConfigurations();

    /**
     * Gets the computerNamePrefix property: Specifies the computer name prefix. Limited to 9 characters. If specified,
     * allows for a longer name to be specified for the node type name.
     * 
     * @return the computerNamePrefix value.
     */
    String computerNamePrefix();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.NodeTypeInner object.
     * 
     * @return the inner object.
     */
    NodeTypeInner innerModel();

    /**
     * The entirety of the NodeType definition.
     */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The NodeType definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the NodeType definition.
         */
        interface Blank extends WithParentResource {
        }

        /**
         * The stage of the NodeType definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, clusterName.
             * 
             * @param resourceGroupName The name of the resource group.
             * @param clusterName The name of the cluster resource.
             * @return the next definition stage.
             */
            WithCreate withExistingManagedCluster(String resourceGroupName, String clusterName);
        }

        /**
         * The stage of the NodeType definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithSku,
            DefinitionStages.WithIsPrimary, DefinitionStages.WithVmInstanceCount, DefinitionStages.WithDataDiskSizeGB,
            DefinitionStages.WithDataDiskType, DefinitionStages.WithDataDiskLetter,
            DefinitionStages.WithPlacementProperties, DefinitionStages.WithCapacities,
            DefinitionStages.WithApplicationPorts, DefinitionStages.WithEphemeralPorts, DefinitionStages.WithVmSize,
            DefinitionStages.WithVmImagePublisher, DefinitionStages.WithVmImageOffer, DefinitionStages.WithVmImageSku,
            DefinitionStages.WithVmImageVersion, DefinitionStages.WithVmSecrets, DefinitionStages.WithVmExtensions,
            DefinitionStages.WithVmManagedIdentity, DefinitionStages.WithIsStateless,
            DefinitionStages.WithMultiplePlacementGroups, DefinitionStages.WithFrontendConfigurations,
            DefinitionStages.WithNetworkSecurityRules, DefinitionStages.WithAdditionalDataDisks,
            DefinitionStages.WithEnableEncryptionAtHost, DefinitionStages.WithEnableAcceleratedNetworking,
            DefinitionStages.WithUseDefaultPublicLoadBalancer, DefinitionStages.WithUseTempDataDisk,
            DefinitionStages.WithEnableOverProvisioning, DefinitionStages.WithZones, DefinitionStages.WithIsSpotVM,
            DefinitionStages.WithHostGroupId, DefinitionStages.WithUseEphemeralOSDisk,
            DefinitionStages.WithSpotRestoreTimeout, DefinitionStages.WithEvictionPolicy,
            DefinitionStages.WithVmImageResourceId, DefinitionStages.WithSubnetId, DefinitionStages.WithVmSetupActions,
            DefinitionStages.WithSecurityType, DefinitionStages.WithSecureBootEnabled,
            DefinitionStages.WithEnableNodePublicIp, DefinitionStages.WithEnableNodePublicIPv6,
            DefinitionStages.WithVmSharedGalleryImageId, DefinitionStages.WithNatGatewayId,
            DefinitionStages.WithNatConfigurations, DefinitionStages.WithVmImagePlan,
            DefinitionStages.WithServiceArtifactReferenceId, DefinitionStages.WithDscpConfigurationId,
            DefinitionStages.WithAdditionalNetworkInterfaceConfigurations, DefinitionStages.WithComputerNamePrefix {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            NodeType create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            NodeType create(Context context);
        }

        /**
         * The stage of the NodeType definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Azure resource tags..
             * 
             * @param tags Azure resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the NodeType definition allowing to specify sku.
         */
        interface WithSku {
            /**
             * Specifies the sku property: The node type sku..
             * 
             * @param sku The node type sku.
             * @return the next definition stage.
             */
            WithCreate withSku(NodeTypeSku sku);
        }

        /**
         * The stage of the NodeType definition allowing to specify isPrimary.
         */
        interface WithIsPrimary {
            /**
             * Specifies the isPrimary property: Indicates the Service Fabric system services for the cluster will run
             * on this node type. This setting cannot be changed once the node type is created..
             * 
             * @param isPrimary Indicates the Service Fabric system services for the cluster will run on this node type.
             * This setting cannot be changed once the node type is created.
             * @return the next definition stage.
             */
            WithCreate withIsPrimary(boolean isPrimary);
        }

        /**
         * The stage of the NodeType definition allowing to specify vmInstanceCount.
         */
        interface WithVmInstanceCount {
            /**
             * Specifies the vmInstanceCount property: The number of nodes in the node type. &lt;br /&gt;&lt;br
             * /&gt;**Values:** &lt;br /&gt;-1 - Use when auto scale rules are configured or sku.capacity is defined
             * &lt;br /&gt; 0 - Not supported &lt;br /&gt; &gt;0 - Use for manual scale..
             * 
             * @param vmInstanceCount The number of nodes in the node type. &lt;br /&gt;&lt;br /&gt;**Values:** &lt;br
             * /&gt;-1 - Use when auto scale rules are configured or sku.capacity is defined &lt;br /&gt; 0 - Not
             * supported &lt;br /&gt; &gt;0 - Use for manual scale.
             * @return the next definition stage.
             */
            WithCreate withVmInstanceCount(int vmInstanceCount);
        }

        /**
         * The stage of the NodeType definition allowing to specify dataDiskSizeGB.
         */
        interface WithDataDiskSizeGB {
            /**
             * Specifies the dataDiskSizeGB property: Disk size for the managed disk attached to the vms on the node
             * type in GBs..
             * 
             * @param dataDiskSizeGB Disk size for the managed disk attached to the vms on the node type in GBs.
             * @return the next definition stage.
             */
            WithCreate withDataDiskSizeGB(Integer dataDiskSizeGB);
        }

        /**
         * The stage of the NodeType definition allowing to specify dataDiskType.
         */
        interface WithDataDiskType {
            /**
             * Specifies the dataDiskType property: Managed data disk type. Specifies the storage account type for the
             * managed disk.
             * 
             * @param dataDiskType Managed data disk type. Specifies the storage account type for the managed disk.
             * @return the next definition stage.
             */
            WithCreate withDataDiskType(DiskType dataDiskType);
        }

        /**
         * The stage of the NodeType definition allowing to specify dataDiskLetter.
         */
        interface WithDataDiskLetter {
            /**
             * Specifies the dataDiskLetter property: Managed data disk letter. It can not use the reserved letter C or
             * D and it can not change after created..
             * 
             * @param dataDiskLetter Managed data disk letter. It can not use the reserved letter C or D and it can not
             * change after created.
             * @return the next definition stage.
             */
            WithCreate withDataDiskLetter(String dataDiskLetter);
        }

        /**
         * The stage of the NodeType definition allowing to specify placementProperties.
         */
        interface WithPlacementProperties {
            /**
             * Specifies the placementProperties property: The placement tags applied to nodes in the node type, which
             * can be used to indicate where certain services (workload) should run..
             * 
             * @param placementProperties The placement tags applied to nodes in the node type, which can be used to
             * indicate where certain services (workload) should run.
             * @return the next definition stage.
             */
            WithCreate withPlacementProperties(Map<String, String> placementProperties);
        }

        /**
         * The stage of the NodeType definition allowing to specify capacities.
         */
        interface WithCapacities {
            /**
             * Specifies the capacities property: The capacity tags applied to the nodes in the node type, the cluster
             * resource manager uses these tags to understand how much resource a node has..
             * 
             * @param capacities The capacity tags applied to the nodes in the node type, the cluster resource manager
             * uses these tags to understand how much resource a node has.
             * @return the next definition stage.
             */
            WithCreate withCapacities(Map<String, String> capacities);
        }

        /**
         * The stage of the NodeType definition allowing to specify applicationPorts.
         */
        interface WithApplicationPorts {
            /**
             * Specifies the applicationPorts property: The range of ports from which cluster assigned port to Service
             * Fabric applications..
             * 
             * @param applicationPorts The range of ports from which cluster assigned port to Service Fabric
             * applications.
             * @return the next definition stage.
             */
            WithCreate withApplicationPorts(EndpointRangeDescription applicationPorts);
        }

        /**
         * The stage of the NodeType definition allowing to specify ephemeralPorts.
         */
        interface WithEphemeralPorts {
            /**
             * Specifies the ephemeralPorts property: The range of ephemeral ports that nodes in this node type should
             * be configured with..
             * 
             * @param ephemeralPorts The range of ephemeral ports that nodes in this node type should be configured
             * with.
             * @return the next definition stage.
             */
            WithCreate withEphemeralPorts(EndpointRangeDescription ephemeralPorts);
        }

        /**
         * The stage of the NodeType definition allowing to specify vmSize.
         */
        interface WithVmSize {
            /**
             * Specifies the vmSize property: The size of virtual machines in the pool. All virtual machines in a pool
             * are the same size. For example, Standard_D3..
             * 
             * @param vmSize The size of virtual machines in the pool. All virtual machines in a pool are the same size.
             * For example, Standard_D3.
             * @return the next definition stage.
             */
            WithCreate withVmSize(String vmSize);
        }

        /**
         * The stage of the NodeType definition allowing to specify vmImagePublisher.
         */
        interface WithVmImagePublisher {
            /**
             * Specifies the vmImagePublisher property: The publisher of the Azure Virtual Machines Marketplace image.
             * For example, Canonical or MicrosoftWindowsServer..
             * 
             * @param vmImagePublisher The publisher of the Azure Virtual Machines Marketplace image. For example,
             * Canonical or MicrosoftWindowsServer.
             * @return the next definition stage.
             */
            WithCreate withVmImagePublisher(String vmImagePublisher);
        }

        /**
         * The stage of the NodeType definition allowing to specify vmImageOffer.
         */
        interface WithVmImageOffer {
            /**
             * Specifies the vmImageOffer property: The offer type of the Azure Virtual Machines Marketplace image. For
             * example, UbuntuServer or WindowsServer..
             * 
             * @param vmImageOffer The offer type of the Azure Virtual Machines Marketplace image. For example,
             * UbuntuServer or WindowsServer.
             * @return the next definition stage.
             */
            WithCreate withVmImageOffer(String vmImageOffer);
        }

        /**
         * The stage of the NodeType definition allowing to specify vmImageSku.
         */
        interface WithVmImageSku {
            /**
             * Specifies the vmImageSku property: The SKU of the Azure Virtual Machines Marketplace image. For example,
             * 14.04.0-LTS or 2012-R2-Datacenter..
             * 
             * @param vmImageSku The SKU of the Azure Virtual Machines Marketplace image. For example, 14.04.0-LTS or
             * 2012-R2-Datacenter.
             * @return the next definition stage.
             */
            WithCreate withVmImageSku(String vmImageSku);
        }

        /**
         * The stage of the NodeType definition allowing to specify vmImageVersion.
         */
        interface WithVmImageVersion {
            /**
             * Specifies the vmImageVersion property: The version of the Azure Virtual Machines Marketplace image. A
             * value of 'latest' can be specified to select the latest version of an image. If omitted, the default is
             * 'latest'..
             * 
             * @param vmImageVersion The version of the Azure Virtual Machines Marketplace image. A value of 'latest'
             * can be specified to select the latest version of an image. If omitted, the default is 'latest'.
             * @return the next definition stage.
             */
            WithCreate withVmImageVersion(String vmImageVersion);
        }

        /**
         * The stage of the NodeType definition allowing to specify vmSecrets.
         */
        interface WithVmSecrets {
            /**
             * Specifies the vmSecrets property: The secrets to install in the virtual machines..
             * 
             * @param vmSecrets The secrets to install in the virtual machines.
             * @return the next definition stage.
             */
            WithCreate withVmSecrets(List<VaultSecretGroup> vmSecrets);
        }

        /**
         * The stage of the NodeType definition allowing to specify vmExtensions.
         */
        interface WithVmExtensions {
            /**
             * Specifies the vmExtensions property: Set of extensions that should be installed onto the virtual
             * machines..
             * 
             * @param vmExtensions Set of extensions that should be installed onto the virtual machines.
             * @return the next definition stage.
             */
            WithCreate withVmExtensions(List<VmssExtension> vmExtensions);
        }

        /**
         * The stage of the NodeType definition allowing to specify vmManagedIdentity.
         */
        interface WithVmManagedIdentity {
            /**
             * Specifies the vmManagedIdentity property: Identities to assign to the virtual machine scale set under the
             * node type..
             * 
             * @param vmManagedIdentity Identities to assign to the virtual machine scale set under the node type.
             * @return the next definition stage.
             */
            WithCreate withVmManagedIdentity(VmManagedIdentity vmManagedIdentity);
        }

        /**
         * The stage of the NodeType definition allowing to specify isStateless.
         */
        interface WithIsStateless {
            /**
             * Specifies the isStateless property: Indicates if the node type can only host Stateless workloads..
             * 
             * @param isStateless Indicates if the node type can only host Stateless workloads.
             * @return the next definition stage.
             */
            WithCreate withIsStateless(Boolean isStateless);
        }

        /**
         * The stage of the NodeType definition allowing to specify multiplePlacementGroups.
         */
        interface WithMultiplePlacementGroups {
            /**
             * Specifies the multiplePlacementGroups property: Indicates if scale set associated with the node type can
             * be composed of multiple placement groups..
             * 
             * @param multiplePlacementGroups Indicates if scale set associated with the node type can be composed of
             * multiple placement groups.
             * @return the next definition stage.
             */
            WithCreate withMultiplePlacementGroups(Boolean multiplePlacementGroups);
        }

        /**
         * The stage of the NodeType definition allowing to specify frontendConfigurations.
         */
        interface WithFrontendConfigurations {
            /**
             * Specifies the frontendConfigurations property: Indicates the node type uses its own frontend
             * configurations instead of the default one for the cluster. This setting can only be specified for
             * non-primary node types and can not be added or removed after the node type is created..
             * 
             * @param frontendConfigurations Indicates the node type uses its own frontend configurations instead of the
             * default one for the cluster. This setting can only be specified for non-primary node types and can not be
             * added or removed after the node type is created.
             * @return the next definition stage.
             */
            WithCreate withFrontendConfigurations(List<FrontendConfiguration> frontendConfigurations);
        }

        /**
         * The stage of the NodeType definition allowing to specify networkSecurityRules.
         */
        interface WithNetworkSecurityRules {
            /**
             * Specifies the networkSecurityRules property: The Network Security Rules for this node type. This setting
             * can only be specified for node types that are configured with frontend configurations..
             * 
             * @param networkSecurityRules The Network Security Rules for this node type. This setting can only be
             * specified for node types that are configured with frontend configurations.
             * @return the next definition stage.
             */
            WithCreate withNetworkSecurityRules(List<NetworkSecurityRule> networkSecurityRules);
        }

        /**
         * The stage of the NodeType definition allowing to specify additionalDataDisks.
         */
        interface WithAdditionalDataDisks {
            /**
             * Specifies the additionalDataDisks property: Additional managed data disks..
             * 
             * @param additionalDataDisks Additional managed data disks.
             * @return the next definition stage.
             */
            WithCreate withAdditionalDataDisks(List<VmssDataDisk> additionalDataDisks);
        }

        /**
         * The stage of the NodeType definition allowing to specify enableEncryptionAtHost.
         */
        interface WithEnableEncryptionAtHost {
            /**
             * Specifies the enableEncryptionAtHost property: Enable or disable the Host Encryption for the virtual
             * machines on the node type. This will enable the encryption for all the disks including Resource/Temp disk
             * at host itself. Default: The Encryption at host will be disabled unless this property is set to true for
             * the resource..
             * 
             * @param enableEncryptionAtHost Enable or disable the Host Encryption for the virtual machines on the node
             * type. This will enable the encryption for all the disks including Resource/Temp disk at host itself.
             * Default: The Encryption at host will be disabled unless this property is set to true for the resource.
             * @return the next definition stage.
             */
            WithCreate withEnableEncryptionAtHost(Boolean enableEncryptionAtHost);
        }

        /**
         * The stage of the NodeType definition allowing to specify enableAcceleratedNetworking.
         */
        interface WithEnableAcceleratedNetworking {
            /**
             * Specifies the enableAcceleratedNetworking property: Specifies whether the network interface is
             * accelerated networking-enabled..
             * 
             * @param enableAcceleratedNetworking Specifies whether the network interface is accelerated
             * networking-enabled.
             * @return the next definition stage.
             */
            WithCreate withEnableAcceleratedNetworking(Boolean enableAcceleratedNetworking);
        }

        /**
         * The stage of the NodeType definition allowing to specify useDefaultPublicLoadBalancer.
         */
        interface WithUseDefaultPublicLoadBalancer {
            /**
             * Specifies the useDefaultPublicLoadBalancer property: Specifies whether the use public load balancer. If
             * not specified and the node type doesn't have its own frontend configuration, it will be attached to the
             * default load balancer. If the node type uses its own Load balancer and useDefaultPublicLoadBalancer is
             * true, then the frontend has to be an Internal Load Balancer. If the node type uses its own Load balancer
             * and useDefaultPublicLoadBalancer is false or not set, then the custom load balancer must include a public
             * load balancer to provide outbound connectivity..
             * 
             * @param useDefaultPublicLoadBalancer Specifies whether the use public load balancer. If not specified and
             * the node type doesn't have its own frontend configuration, it will be attached to the default load
             * balancer. If the node type uses its own Load balancer and useDefaultPublicLoadBalancer is true, then the
             * frontend has to be an Internal Load Balancer. If the node type uses its own Load balancer and
             * useDefaultPublicLoadBalancer is false or not set, then the custom load balancer must include a public
             * load balancer to provide outbound connectivity.
             * @return the next definition stage.
             */
            WithCreate withUseDefaultPublicLoadBalancer(Boolean useDefaultPublicLoadBalancer);
        }

        /**
         * The stage of the NodeType definition allowing to specify useTempDataDisk.
         */
        interface WithUseTempDataDisk {
            /**
             * Specifies the useTempDataDisk property: Specifies whether to use the temporary disk for the service
             * fabric data root, in which case no managed data disk will be attached and the temporary disk will be
             * used. It is only allowed for stateless node types..
             * 
             * @param useTempDataDisk Specifies whether to use the temporary disk for the service fabric data root, in
             * which case no managed data disk will be attached and the temporary disk will be used. It is only allowed
             * for stateless node types.
             * @return the next definition stage.
             */
            WithCreate withUseTempDataDisk(Boolean useTempDataDisk);
        }

        /**
         * The stage of the NodeType definition allowing to specify enableOverProvisioning.
         */
        interface WithEnableOverProvisioning {
            /**
             * Specifies the enableOverProvisioning property: Specifies whether the node type should be overprovisioned.
             * It is only allowed for stateless node types..
             * 
             * @param enableOverProvisioning Specifies whether the node type should be overprovisioned. It is only
             * allowed for stateless node types.
             * @return the next definition stage.
             */
            WithCreate withEnableOverProvisioning(Boolean enableOverProvisioning);
        }

        /**
         * The stage of the NodeType definition allowing to specify zones.
         */
        interface WithZones {
            /**
             * Specifies the zones property: Specifies the availability zones where the node type would span across. If
             * the cluster is not spanning across availability zones, initiates az migration for the cluster..
             * 
             * @param zones Specifies the availability zones where the node type would span across. If the cluster is
             * not spanning across availability zones, initiates az migration for the cluster.
             * @return the next definition stage.
             */
            WithCreate withZones(List<String> zones);
        }

        /**
         * The stage of the NodeType definition allowing to specify isSpotVM.
         */
        interface WithIsSpotVM {
            /**
             * Specifies the isSpotVM property: Indicates whether the node type will be Spot Virtual Machines. Azure
             * will allocate the VMs if there is capacity available and the VMs can be evicted at any time..
             * 
             * @param isSpotVM Indicates whether the node type will be Spot Virtual Machines. Azure will allocate the
             * VMs if there is capacity available and the VMs can be evicted at any time.
             * @return the next definition stage.
             */
            WithCreate withIsSpotVM(Boolean isSpotVM);
        }

        /**
         * The stage of the NodeType definition allowing to specify hostGroupId.
         */
        interface WithHostGroupId {
            /**
             * Specifies the hostGroupId property: Specifies the full host group resource Id. This property is used for
             * deploying on azure dedicated hosts..
             * 
             * @param hostGroupId Specifies the full host group resource Id. This property is used for deploying on
             * azure dedicated hosts.
             * @return the next definition stage.
             */
            WithCreate withHostGroupId(String hostGroupId);
        }

        /**
         * The stage of the NodeType definition allowing to specify useEphemeralOSDisk.
         */
        interface WithUseEphemeralOSDisk {
            /**
             * Specifies the useEphemeralOSDisk property: Indicates whether to use ephemeral os disk. The sku selected
             * on the vmSize property needs to support this feature..
             * 
             * @param useEphemeralOSDisk Indicates whether to use ephemeral os disk. The sku selected on the vmSize
             * property needs to support this feature.
             * @return the next definition stage.
             */
            WithCreate withUseEphemeralOSDisk(Boolean useEphemeralOSDisk);
        }

        /**
         * The stage of the NodeType definition allowing to specify spotRestoreTimeout.
         */
        interface WithSpotRestoreTimeout {
            /**
             * Specifies the spotRestoreTimeout property: Indicates the time duration after which the platform will not
             * try to restore the VMSS SPOT instances specified as ISO 8601..
             * 
             * @param spotRestoreTimeout Indicates the time duration after which the platform will not try to restore
             * the VMSS SPOT instances specified as ISO 8601.
             * @return the next definition stage.
             */
            WithCreate withSpotRestoreTimeout(String spotRestoreTimeout);
        }

        /**
         * The stage of the NodeType definition allowing to specify evictionPolicy.
         */
        interface WithEvictionPolicy {
            /**
             * Specifies the evictionPolicy property: Specifies the eviction policy for virtual machines in a SPOT node
             * type. Default is Delete..
             * 
             * @param evictionPolicy Specifies the eviction policy for virtual machines in a SPOT node type. Default is
             * Delete.
             * @return the next definition stage.
             */
            WithCreate withEvictionPolicy(EvictionPolicyType evictionPolicy);
        }

        /**
         * The stage of the NodeType definition allowing to specify vmImageResourceId.
         */
        interface WithVmImageResourceId {
            /**
             * Specifies the vmImageResourceId property: Indicates the resource id of the vm image. This parameter is
             * used for custom vm image..
             * 
             * @param vmImageResourceId Indicates the resource id of the vm image. This parameter is used for custom vm
             * image.
             * @return the next definition stage.
             */
            WithCreate withVmImageResourceId(String vmImageResourceId);
        }

        /**
         * The stage of the NodeType definition allowing to specify subnetId.
         */
        interface WithSubnetId {
            /**
             * Specifies the subnetId property: Indicates the resource id of the subnet for the node type..
             * 
             * @param subnetId Indicates the resource id of the subnet for the node type.
             * @return the next definition stage.
             */
            WithCreate withSubnetId(String subnetId);
        }

        /**
         * The stage of the NodeType definition allowing to specify vmSetupActions.
         */
        interface WithVmSetupActions {
            /**
             * Specifies the vmSetupActions property: Specifies the actions to be performed on the vms before
             * bootstrapping the service fabric runtime..
             * 
             * @param vmSetupActions Specifies the actions to be performed on the vms before bootstrapping the service
             * fabric runtime.
             * @return the next definition stage.
             */
            WithCreate withVmSetupActions(List<VmSetupAction> vmSetupActions);
        }

        /**
         * The stage of the NodeType definition allowing to specify securityType.
         */
        interface WithSecurityType {
            /**
             * Specifies the securityType property: Specifies the security type of the nodeType. Only Standard and
             * TrustedLaunch are currently supported.
             * 
             * @param securityType Specifies the security type of the nodeType. Only Standard and TrustedLaunch are
             * currently supported.
             * @return the next definition stage.
             */
            WithCreate withSecurityType(SecurityType securityType);
        }

        /**
         * The stage of the NodeType definition allowing to specify secureBootEnabled.
         */
        interface WithSecureBootEnabled {
            /**
             * Specifies the secureBootEnabled property: Specifies whether secure boot should be enabled on the
             * nodeType. Can only be used with TrustedLaunch SecurityType.
             * 
             * @param secureBootEnabled Specifies whether secure boot should be enabled on the nodeType. Can only be
             * used with TrustedLaunch SecurityType.
             * @return the next definition stage.
             */
            WithCreate withSecureBootEnabled(Boolean secureBootEnabled);
        }

        /**
         * The stage of the NodeType definition allowing to specify enableNodePublicIp.
         */
        interface WithEnableNodePublicIp {
            /**
             * Specifies the enableNodePublicIp property: Specifies whether each node is allocated its own public IPv4
             * address. This is only supported on secondary node types with custom Load Balancers..
             * 
             * @param enableNodePublicIp Specifies whether each node is allocated its own public IPv4 address. This is
             * only supported on secondary node types with custom Load Balancers.
             * @return the next definition stage.
             */
            WithCreate withEnableNodePublicIp(Boolean enableNodePublicIp);
        }

        /**
         * The stage of the NodeType definition allowing to specify enableNodePublicIPv6.
         */
        interface WithEnableNodePublicIPv6 {
            /**
             * Specifies the enableNodePublicIPv6 property: Specifies whether each node is allocated its own public IPv6
             * address. This is only supported on secondary node types with custom Load Balancers..
             * 
             * @param enableNodePublicIPv6 Specifies whether each node is allocated its own public IPv6 address. This is
             * only supported on secondary node types with custom Load Balancers.
             * @return the next definition stage.
             */
            WithCreate withEnableNodePublicIPv6(Boolean enableNodePublicIPv6);
        }

        /**
         * The stage of the NodeType definition allowing to specify vmSharedGalleryImageId.
         */
        interface WithVmSharedGalleryImageId {
            /**
             * Specifies the vmSharedGalleryImageId property: Indicates the resource id of the vm shared galleries
             * image. This parameter is used for custom vm image..
             * 
             * @param vmSharedGalleryImageId Indicates the resource id of the vm shared galleries image. This parameter
             * is used for custom vm image.
             * @return the next definition stage.
             */
            WithCreate withVmSharedGalleryImageId(String vmSharedGalleryImageId);
        }

        /**
         * The stage of the NodeType definition allowing to specify natGatewayId.
         */
        interface WithNatGatewayId {
            /**
             * Specifies the natGatewayId property: Specifies the resource id of a NAT Gateway to attach to the subnet
             * of this node type. Node type must use custom load balancer..
             * 
             * @param natGatewayId Specifies the resource id of a NAT Gateway to attach to the subnet of this node type.
             * Node type must use custom load balancer.
             * @return the next definition stage.
             */
            WithCreate withNatGatewayId(String natGatewayId);
        }

        /**
         * The stage of the NodeType definition allowing to specify natConfigurations.
         */
        interface WithNatConfigurations {
            /**
             * Specifies the natConfigurations property: Specifies the NAT configuration on default public Load Balancer
             * for the node type. This is only supported for node types use the default public Load Balancer..
             * 
             * @param natConfigurations Specifies the NAT configuration on default public Load Balancer for the node
             * type. This is only supported for node types use the default public Load Balancer.
             * @return the next definition stage.
             */
            WithCreate withNatConfigurations(List<NodeTypeNatConfig> natConfigurations);
        }

        /**
         * The stage of the NodeType definition allowing to specify vmImagePlan.
         */
        interface WithVmImagePlan {
            /**
             * Specifies the vmImagePlan property: Specifies information about the marketplace image used to create the
             * virtual machine. This element is only used for marketplace images. Before you can use a marketplace image
             * from an API, you must enable the image for programmatic use. In the Azure portal, find the marketplace
             * image that you want to use and then click Want to deploy programmatically, Get Started -&gt;. Enter any
             * required information and then click Save..
             * 
             * @param vmImagePlan Specifies information about the marketplace image used to create the virtual machine.
             * This element is only used for marketplace images. Before you can use a marketplace image from an API, you
             * must enable the image for programmatic use. In the Azure portal, find the marketplace image that you want
             * to use and then click Want to deploy programmatically, Get Started -&gt;. Enter any required information
             * and then click Save.
             * @return the next definition stage.
             */
            WithCreate withVmImagePlan(VmImagePlan vmImagePlan);
        }

        /**
         * The stage of the NodeType definition allowing to specify serviceArtifactReferenceId.
         */
        interface WithServiceArtifactReferenceId {
            /**
             * Specifies the serviceArtifactReferenceId property: Specifies the service artifact reference id used to
             * set same image version for all virtual machines in the scale set when using 'latest' image version..
             * 
             * @param serviceArtifactReferenceId Specifies the service artifact reference id used to set same image
             * version for all virtual machines in the scale set when using 'latest' image version.
             * @return the next definition stage.
             */
            WithCreate withServiceArtifactReferenceId(String serviceArtifactReferenceId);
        }

        /**
         * The stage of the NodeType definition allowing to specify dscpConfigurationId.
         */
        interface WithDscpConfigurationId {
            /**
             * Specifies the dscpConfigurationId property: Specifies the resource id of the DSCP configuration to apply
             * to the node type network interface..
             * 
             * @param dscpConfigurationId Specifies the resource id of the DSCP configuration to apply to the node type
             * network interface.
             * @return the next definition stage.
             */
            WithCreate withDscpConfigurationId(String dscpConfigurationId);
        }

        /**
         * The stage of the NodeType definition allowing to specify additionalNetworkInterfaceConfigurations.
         */
        interface WithAdditionalNetworkInterfaceConfigurations {
            /**
             * Specifies the additionalNetworkInterfaceConfigurations property: Specifies the settings for any
             * additional secondary network interfaces to attach to the node type..
             * 
             * @param additionalNetworkInterfaceConfigurations Specifies the settings for any additional secondary
             * network interfaces to attach to the node type.
             * @return the next definition stage.
             */
            WithCreate withAdditionalNetworkInterfaceConfigurations(
                List<AdditionalNetworkInterfaceConfiguration> additionalNetworkInterfaceConfigurations);
        }

        /**
         * The stage of the NodeType definition allowing to specify computerNamePrefix.
         */
        interface WithComputerNamePrefix {
            /**
             * Specifies the computerNamePrefix property: Specifies the computer name prefix. Limited to 9 characters.
             * If specified, allows for a longer name to be specified for the node type name..
             * 
             * @param computerNamePrefix Specifies the computer name prefix. Limited to 9 characters. If specified,
             * allows for a longer name to be specified for the node type name.
             * @return the next definition stage.
             */
            WithCreate withComputerNamePrefix(String computerNamePrefix);
        }
    }

    /**
     * Begins update for the NodeType resource.
     * 
     * @return the stage of resource update.
     */
    NodeType.Update update();

    /**
     * The template for NodeType update.
     */
    interface Update extends UpdateStages.WithTags, UpdateStages.WithSku {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        NodeType apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        NodeType apply(Context context);
    }

    /**
     * The NodeType update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the NodeType update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Node type update parameters.
             * 
             * @param tags Node type update parameters.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the NodeType update allowing to specify sku.
         */
        interface WithSku {
            /**
             * Specifies the sku property: The node type sku..
             * 
             * @param sku The node type sku.
             * @return the next definition stage.
             */
            Update withSku(NodeTypeSku sku);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    NodeType refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    NodeType refresh(Context context);

    /**
     * Restarts one or more nodes on the node type.
     * 
     * Restarts one or more nodes on the node type. It will disable the fabric nodes, trigger a restart on the VMs and
     * activate the nodes back again.
     * 
     * @param parameters parameters for restart action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restart(NodeTypeActionParameters parameters);

    /**
     * Restarts one or more nodes on the node type.
     * 
     * Restarts one or more nodes on the node type. It will disable the fabric nodes, trigger a restart on the VMs and
     * activate the nodes back again.
     * 
     * @param parameters parameters for restart action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restart(NodeTypeActionParameters parameters, Context context);

    /**
     * Reimages one or more nodes on the node type.
     * 
     * Reimages one or more nodes on the node type. It will disable the fabric nodes, trigger a reimage on the VMs and
     * activate the nodes back again.
     * 
     * @param parameters parameters for reimage action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void reimage(NodeTypeActionParameters parameters);

    /**
     * Reimages one or more nodes on the node type.
     * 
     * Reimages one or more nodes on the node type. It will disable the fabric nodes, trigger a reimage on the VMs and
     * activate the nodes back again.
     * 
     * @param parameters parameters for reimage action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void reimage(NodeTypeActionParameters parameters, Context context);

    /**
     * Deletes one or more nodes on the node type.
     * 
     * Deletes one or more nodes on the node type. It will disable the fabric nodes, trigger a delete on the VMs and
     * removes the state from the cluster.
     * 
     * @param parameters parameters for delete action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteNode(NodeTypeActionParameters parameters);

    /**
     * Deletes one or more nodes on the node type.
     * 
     * Deletes one or more nodes on the node type. It will disable the fabric nodes, trigger a delete on the VMs and
     * removes the state from the cluster.
     * 
     * @param parameters parameters for delete action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteNode(NodeTypeActionParameters parameters, Context context);
}
