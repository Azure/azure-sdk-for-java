// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Parameters for Fault Simulation id.
 */
@Fluent
public final class FaultSimulationIdContent implements JsonSerializable<FaultSimulationIdContent> {
    /*
     * unique identifier for the fault simulation.
     */
    private String simulationId;

    /**
     * Creates an instance of FaultSimulationIdContent class.
     */
    public FaultSimulationIdContent() {
    }

    /**
     * Get the simulationId property: unique identifier for the fault simulation.
     * 
     * @return the simulationId value.
     */
    public String simulationId() {
        return this.simulationId;
    }

    /**
     * Set the simulationId property: unique identifier for the fault simulation.
     * 
     * @param simulationId the simulationId value to set.
     * @return the FaultSimulationIdContent object itself.
     */
    public FaultSimulationIdContent withSimulationId(String simulationId) {
        this.simulationId = simulationId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (simulationId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property simulationId in model FaultSimulationIdContent"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FaultSimulationIdContent.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("simulationId", this.simulationId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FaultSimulationIdContent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FaultSimulationIdContent if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FaultSimulationIdContent.
     */
    public static FaultSimulationIdContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FaultSimulationIdContent deserializedFaultSimulationIdContent = new FaultSimulationIdContent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("simulationId".equals(fieldName)) {
                    deserializedFaultSimulationIdContent.simulationId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFaultSimulationIdContent;
        });
    }
}
