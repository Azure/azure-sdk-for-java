// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Parameters for Zone Fault Simulation action.
 */
@Fluent
public final class ZoneFaultSimulationContent extends FaultSimulationContent {
    /*
     * The kind of fault to be simulated.
     */
    private FaultKind faultKind = FaultKind.ZONE;

    /*
     * Indicates the zones of the fault simulation.
     */
    private List<String> zones;

    /**
     * Creates an instance of ZoneFaultSimulationContent class.
     */
    public ZoneFaultSimulationContent() {
    }

    /**
     * Get the faultKind property: The kind of fault to be simulated.
     * 
     * @return the faultKind value.
     */
    @Override
    public FaultKind faultKind() {
        return this.faultKind;
    }

    /**
     * Get the zones property: Indicates the zones of the fault simulation.
     * 
     * @return the zones value.
     */
    public List<String> zones() {
        return this.zones;
    }

    /**
     * Set the zones property: Indicates the zones of the fault simulation.
     * 
     * @param zones the zones value to set.
     * @return the ZoneFaultSimulationContent object itself.
     */
    public ZoneFaultSimulationContent withZones(List<String> zones) {
        this.zones = zones;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ZoneFaultSimulationContent withForce(Boolean force) {
        super.withForce(force);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ZoneFaultSimulationContent withConstraints(FaultSimulationConstraints constraints) {
        super.withConstraints(constraints);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (constraints() != null) {
            constraints().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("force", force());
        jsonWriter.writeJsonField("constraints", constraints());
        jsonWriter.writeStringField("faultKind", this.faultKind == null ? null : this.faultKind.toString());
        jsonWriter.writeArrayField("zones", this.zones, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ZoneFaultSimulationContent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ZoneFaultSimulationContent if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ZoneFaultSimulationContent.
     */
    public static ZoneFaultSimulationContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ZoneFaultSimulationContent deserializedZoneFaultSimulationContent = new ZoneFaultSimulationContent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("force".equals(fieldName)) {
                    deserializedZoneFaultSimulationContent.withForce(reader.getNullable(JsonReader::getBoolean));
                } else if ("constraints".equals(fieldName)) {
                    deserializedZoneFaultSimulationContent.withConstraints(FaultSimulationConstraints.fromJson(reader));
                } else if ("faultKind".equals(fieldName)) {
                    deserializedZoneFaultSimulationContent.faultKind = FaultKind.fromString(reader.getString());
                } else if ("zones".equals(fieldName)) {
                    List<String> zones = reader.readArray(reader1 -> reader1.getString());
                    deserializedZoneFaultSimulationContent.zones = zones;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedZoneFaultSimulationContent;
        });
    }
}
