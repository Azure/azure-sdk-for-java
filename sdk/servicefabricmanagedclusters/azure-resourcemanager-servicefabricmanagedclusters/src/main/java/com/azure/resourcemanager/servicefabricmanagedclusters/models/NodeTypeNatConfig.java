// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Provides information about NAT configuration on the default public Load Balancer for the node type.
 */
@Fluent
public final class NodeTypeNatConfig implements JsonSerializable<NodeTypeNatConfig> {
    /*
     * The internal port for the NAT configuration.
     */
    private Integer backendPort;

    /*
     * The port range start for the external endpoint.
     */
    private Integer frontendPortRangeStart;

    /*
     * The port range end for the external endpoint.
     */
    private Integer frontendPortRangeEnd;

    /**
     * Creates an instance of NodeTypeNatConfig class.
     */
    public NodeTypeNatConfig() {
    }

    /**
     * Get the backendPort property: The internal port for the NAT configuration.
     * 
     * @return the backendPort value.
     */
    public Integer backendPort() {
        return this.backendPort;
    }

    /**
     * Set the backendPort property: The internal port for the NAT configuration.
     * 
     * @param backendPort the backendPort value to set.
     * @return the NodeTypeNatConfig object itself.
     */
    public NodeTypeNatConfig withBackendPort(Integer backendPort) {
        this.backendPort = backendPort;
        return this;
    }

    /**
     * Get the frontendPortRangeStart property: The port range start for the external endpoint.
     * 
     * @return the frontendPortRangeStart value.
     */
    public Integer frontendPortRangeStart() {
        return this.frontendPortRangeStart;
    }

    /**
     * Set the frontendPortRangeStart property: The port range start for the external endpoint.
     * 
     * @param frontendPortRangeStart the frontendPortRangeStart value to set.
     * @return the NodeTypeNatConfig object itself.
     */
    public NodeTypeNatConfig withFrontendPortRangeStart(Integer frontendPortRangeStart) {
        this.frontendPortRangeStart = frontendPortRangeStart;
        return this;
    }

    /**
     * Get the frontendPortRangeEnd property: The port range end for the external endpoint.
     * 
     * @return the frontendPortRangeEnd value.
     */
    public Integer frontendPortRangeEnd() {
        return this.frontendPortRangeEnd;
    }

    /**
     * Set the frontendPortRangeEnd property: The port range end for the external endpoint.
     * 
     * @param frontendPortRangeEnd the frontendPortRangeEnd value to set.
     * @return the NodeTypeNatConfig object itself.
     */
    public NodeTypeNatConfig withFrontendPortRangeEnd(Integer frontendPortRangeEnd) {
        this.frontendPortRangeEnd = frontendPortRangeEnd;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("backendPort", this.backendPort);
        jsonWriter.writeNumberField("frontendPortRangeStart", this.frontendPortRangeStart);
        jsonWriter.writeNumberField("frontendPortRangeEnd", this.frontendPortRangeEnd);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NodeTypeNatConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NodeTypeNatConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NodeTypeNatConfig.
     */
    public static NodeTypeNatConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NodeTypeNatConfig deserializedNodeTypeNatConfig = new NodeTypeNatConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("backendPort".equals(fieldName)) {
                    deserializedNodeTypeNatConfig.backendPort = reader.getNullable(JsonReader::getInt);
                } else if ("frontendPortRangeStart".equals(fieldName)) {
                    deserializedNodeTypeNatConfig.frontendPortRangeStart = reader.getNullable(JsonReader::getInt);
                } else if ("frontendPortRangeEnd".equals(fieldName)) {
                    deserializedNodeTypeNatConfig.frontendPortRangeEnd = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNodeTypeNatConfig;
        });
    }
}
