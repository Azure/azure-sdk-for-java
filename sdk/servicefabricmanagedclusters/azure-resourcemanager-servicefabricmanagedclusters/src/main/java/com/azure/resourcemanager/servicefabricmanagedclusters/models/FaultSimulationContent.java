// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Parameters for Fault Simulation action.
 */
@Fluent
public class FaultSimulationContent implements JsonSerializable<FaultSimulationContent> {
    /*
     * The kind of fault to be simulated.
     */
    private FaultKind faultKind = FaultKind.fromString("FaultSimulationContent");

    /*
     * Force the action to go through without any check on the cluster.
     */
    private Boolean force;

    /*
     * Constraints for Fault Simulation action.
     */
    private FaultSimulationConstraints constraints;

    /**
     * Creates an instance of FaultSimulationContent class.
     */
    public FaultSimulationContent() {
    }

    /**
     * Get the faultKind property: The kind of fault to be simulated.
     * 
     * @return the faultKind value.
     */
    public FaultKind faultKind() {
        return this.faultKind;
    }

    /**
     * Get the force property: Force the action to go through without any check on the cluster.
     * 
     * @return the force value.
     */
    public Boolean force() {
        return this.force;
    }

    /**
     * Set the force property: Force the action to go through without any check on the cluster.
     * 
     * @param force the force value to set.
     * @return the FaultSimulationContent object itself.
     */
    public FaultSimulationContent withForce(Boolean force) {
        this.force = force;
        return this;
    }

    /**
     * Get the constraints property: Constraints for Fault Simulation action.
     * 
     * @return the constraints value.
     */
    public FaultSimulationConstraints constraints() {
        return this.constraints;
    }

    /**
     * Set the constraints property: Constraints for Fault Simulation action.
     * 
     * @param constraints the constraints value to set.
     * @return the FaultSimulationContent object itself.
     */
    public FaultSimulationContent withConstraints(FaultSimulationConstraints constraints) {
        this.constraints = constraints;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (constraints() != null) {
            constraints().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("faultKind", this.faultKind == null ? null : this.faultKind.toString());
        jsonWriter.writeBooleanField("force", this.force);
        jsonWriter.writeJsonField("constraints", this.constraints);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FaultSimulationContent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FaultSimulationContent if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FaultSimulationContent.
     */
    public static FaultSimulationContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("faultKind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Zone".equals(discriminatorValue)) {
                    return ZoneFaultSimulationContent.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static FaultSimulationContent fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FaultSimulationContent deserializedFaultSimulationContent = new FaultSimulationContent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("faultKind".equals(fieldName)) {
                    deserializedFaultSimulationContent.faultKind = FaultKind.fromString(reader.getString());
                } else if ("force".equals(fieldName)) {
                    deserializedFaultSimulationContent.force = reader.getNullable(JsonReader::getBoolean);
                } else if ("constraints".equals(fieldName)) {
                    deserializedFaultSimulationContent.constraints = FaultSimulationConstraints.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFaultSimulationContent;
        });
    }
}
