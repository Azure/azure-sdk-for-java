// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a scaling mechanism for adding or removing instances of stateless service partition.
 */
@Fluent
public final class PartitionInstanceCountScaleMechanism extends ScalingMechanism {
    /*
     * Specifies the mechanism associated with this scaling policy.
     */
    private ServiceScalingMechanismKind kind = ServiceScalingMechanismKind.SCALE_PARTITION_INSTANCE_COUNT;

    /*
     * Minimum number of instances of the partition.
     */
    private int minInstanceCount;

    /*
     * Maximum number of instances of the partition.
     */
    private int maxInstanceCount;

    /*
     * The number of instances to add or remove during a scaling operation.
     */
    private int scaleIncrement;

    /**
     * Creates an instance of PartitionInstanceCountScaleMechanism class.
     */
    public PartitionInstanceCountScaleMechanism() {
    }

    /**
     * Get the kind property: Specifies the mechanism associated with this scaling policy.
     * 
     * @return the kind value.
     */
    @Override
    public ServiceScalingMechanismKind kind() {
        return this.kind;
    }

    /**
     * Get the minInstanceCount property: Minimum number of instances of the partition.
     * 
     * @return the minInstanceCount value.
     */
    public int minInstanceCount() {
        return this.minInstanceCount;
    }

    /**
     * Set the minInstanceCount property: Minimum number of instances of the partition.
     * 
     * @param minInstanceCount the minInstanceCount value to set.
     * @return the PartitionInstanceCountScaleMechanism object itself.
     */
    public PartitionInstanceCountScaleMechanism withMinInstanceCount(int minInstanceCount) {
        this.minInstanceCount = minInstanceCount;
        return this;
    }

    /**
     * Get the maxInstanceCount property: Maximum number of instances of the partition.
     * 
     * @return the maxInstanceCount value.
     */
    public int maxInstanceCount() {
        return this.maxInstanceCount;
    }

    /**
     * Set the maxInstanceCount property: Maximum number of instances of the partition.
     * 
     * @param maxInstanceCount the maxInstanceCount value to set.
     * @return the PartitionInstanceCountScaleMechanism object itself.
     */
    public PartitionInstanceCountScaleMechanism withMaxInstanceCount(int maxInstanceCount) {
        this.maxInstanceCount = maxInstanceCount;
        return this;
    }

    /**
     * Get the scaleIncrement property: The number of instances to add or remove during a scaling operation.
     * 
     * @return the scaleIncrement value.
     */
    public int scaleIncrement() {
        return this.scaleIncrement;
    }

    /**
     * Set the scaleIncrement property: The number of instances to add or remove during a scaling operation.
     * 
     * @param scaleIncrement the scaleIncrement value to set.
     * @return the PartitionInstanceCountScaleMechanism object itself.
     */
    public PartitionInstanceCountScaleMechanism withScaleIncrement(int scaleIncrement) {
        this.scaleIncrement = scaleIncrement;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("minInstanceCount", this.minInstanceCount);
        jsonWriter.writeIntField("maxInstanceCount", this.maxInstanceCount);
        jsonWriter.writeIntField("scaleIncrement", this.scaleIncrement);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PartitionInstanceCountScaleMechanism from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PartitionInstanceCountScaleMechanism if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PartitionInstanceCountScaleMechanism.
     */
    public static PartitionInstanceCountScaleMechanism fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PartitionInstanceCountScaleMechanism deserializedPartitionInstanceCountScaleMechanism
                = new PartitionInstanceCountScaleMechanism();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("minInstanceCount".equals(fieldName)) {
                    deserializedPartitionInstanceCountScaleMechanism.minInstanceCount = reader.getInt();
                } else if ("maxInstanceCount".equals(fieldName)) {
                    deserializedPartitionInstanceCountScaleMechanism.maxInstanceCount = reader.getInt();
                } else if ("scaleIncrement".equals(fieldName)) {
                    deserializedPartitionInstanceCountScaleMechanism.scaleIncrement = reader.getInt();
                } else if ("kind".equals(fieldName)) {
                    deserializedPartitionInstanceCountScaleMechanism.kind
                        = ServiceScalingMechanismKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPartitionInstanceCountScaleMechanism;
        });
    }
}
