// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.NodeTypeSkusClient;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.NodeTypeAvailableSkuInner;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.NodeTypeAvailableSku;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.NodeTypeSkus;

public final class NodeTypeSkusImpl implements NodeTypeSkus {
    private static final ClientLogger LOGGER = new ClientLogger(NodeTypeSkusImpl.class);

    private final NodeTypeSkusClient innerClient;

    private final com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager serviceManager;

    public NodeTypeSkusImpl(NodeTypeSkusClient innerClient,
        com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<NodeTypeAvailableSku> list(String resourceGroupName, String clusterName, String nodeTypeName) {
        PagedIterable<NodeTypeAvailableSkuInner> inner
            = this.serviceClient().list(resourceGroupName, clusterName, nodeTypeName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NodeTypeAvailableSkuImpl(inner1, this.manager()));
    }

    public PagedIterable<NodeTypeAvailableSku> list(String resourceGroupName, String clusterName, String nodeTypeName,
        Context context) {
        PagedIterable<NodeTypeAvailableSkuInner> inner
            = this.serviceClient().list(resourceGroupName, clusterName, nodeTypeName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new NodeTypeAvailableSkuImpl(inner1, this.manager()));
    }

    private NodeTypeSkusClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager manager() {
        return this.serviceManager;
    }
}
