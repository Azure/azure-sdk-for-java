// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties of a stateful service resource.
 */
@Fluent
public final class StatefulServiceProperties extends ServiceResourceProperties {
    /*
     * The kind of service (Stateless or Stateful).
     */
    private ServiceKind serviceKind = ServiceKind.STATEFUL;

    /*
     * A flag indicating whether this is a persistent service which stores states on the local disk. If it is then the
     * value of this property is true, if not it is false.
     */
    private Boolean hasPersistedState;

    /*
     * The target replica set size as a number.
     */
    private Integer targetReplicaSetSize;

    /*
     * The minimum replica set size as a number.
     */
    private Integer minReplicaSetSize;

    /*
     * The duration between when a replica goes down and when a new replica is created, represented in ISO 8601 format
     * "hh:mm:ss".
     */
    private String replicaRestartWaitDuration;

    /*
     * The maximum duration for which a partition is allowed to be in a state of quorum loss, represented in ISO 8601
     * format "hh:mm:ss".
     */
    private String quorumLossWaitDuration;

    /*
     * The definition on how long StandBy replicas should be maintained before being removed, represented in ISO 8601
     * format "hh:mm:ss".
     */
    private String standByReplicaKeepDuration;

    /*
     * The duration for which replicas can stay InBuild before reporting that build is stuck, represented in ISO 8601
     * format "hh:mm:ss".
     */
    private String servicePlacementTimeLimit;

    /*
     * The current deployment or provisioning state, which only appears in the response
     */
    private String provisioningState;

    /**
     * Creates an instance of StatefulServiceProperties class.
     */
    public StatefulServiceProperties() {
    }

    /**
     * Get the serviceKind property: The kind of service (Stateless or Stateful).
     * 
     * @return the serviceKind value.
     */
    @Override
    public ServiceKind serviceKind() {
        return this.serviceKind;
    }

    /**
     * Get the hasPersistedState property: A flag indicating whether this is a persistent service which stores states on
     * the local disk. If it is then the value of this property is true, if not it is false.
     * 
     * @return the hasPersistedState value.
     */
    public Boolean hasPersistedState() {
        return this.hasPersistedState;
    }

    /**
     * Set the hasPersistedState property: A flag indicating whether this is a persistent service which stores states on
     * the local disk. If it is then the value of this property is true, if not it is false.
     * 
     * @param hasPersistedState the hasPersistedState value to set.
     * @return the StatefulServiceProperties object itself.
     */
    public StatefulServiceProperties withHasPersistedState(Boolean hasPersistedState) {
        this.hasPersistedState = hasPersistedState;
        return this;
    }

    /**
     * Get the targetReplicaSetSize property: The target replica set size as a number.
     * 
     * @return the targetReplicaSetSize value.
     */
    public Integer targetReplicaSetSize() {
        return this.targetReplicaSetSize;
    }

    /**
     * Set the targetReplicaSetSize property: The target replica set size as a number.
     * 
     * @param targetReplicaSetSize the targetReplicaSetSize value to set.
     * @return the StatefulServiceProperties object itself.
     */
    public StatefulServiceProperties withTargetReplicaSetSize(Integer targetReplicaSetSize) {
        this.targetReplicaSetSize = targetReplicaSetSize;
        return this;
    }

    /**
     * Get the minReplicaSetSize property: The minimum replica set size as a number.
     * 
     * @return the minReplicaSetSize value.
     */
    public Integer minReplicaSetSize() {
        return this.minReplicaSetSize;
    }

    /**
     * Set the minReplicaSetSize property: The minimum replica set size as a number.
     * 
     * @param minReplicaSetSize the minReplicaSetSize value to set.
     * @return the StatefulServiceProperties object itself.
     */
    public StatefulServiceProperties withMinReplicaSetSize(Integer minReplicaSetSize) {
        this.minReplicaSetSize = minReplicaSetSize;
        return this;
    }

    /**
     * Get the replicaRestartWaitDuration property: The duration between when a replica goes down and when a new replica
     * is created, represented in ISO 8601 format "hh:mm:ss".
     * 
     * @return the replicaRestartWaitDuration value.
     */
    public String replicaRestartWaitDuration() {
        return this.replicaRestartWaitDuration;
    }

    /**
     * Set the replicaRestartWaitDuration property: The duration between when a replica goes down and when a new replica
     * is created, represented in ISO 8601 format "hh:mm:ss".
     * 
     * @param replicaRestartWaitDuration the replicaRestartWaitDuration value to set.
     * @return the StatefulServiceProperties object itself.
     */
    public StatefulServiceProperties withReplicaRestartWaitDuration(String replicaRestartWaitDuration) {
        this.replicaRestartWaitDuration = replicaRestartWaitDuration;
        return this;
    }

    /**
     * Get the quorumLossWaitDuration property: The maximum duration for which a partition is allowed to be in a state
     * of quorum loss, represented in ISO 8601 format "hh:mm:ss".
     * 
     * @return the quorumLossWaitDuration value.
     */
    public String quorumLossWaitDuration() {
        return this.quorumLossWaitDuration;
    }

    /**
     * Set the quorumLossWaitDuration property: The maximum duration for which a partition is allowed to be in a state
     * of quorum loss, represented in ISO 8601 format "hh:mm:ss".
     * 
     * @param quorumLossWaitDuration the quorumLossWaitDuration value to set.
     * @return the StatefulServiceProperties object itself.
     */
    public StatefulServiceProperties withQuorumLossWaitDuration(String quorumLossWaitDuration) {
        this.quorumLossWaitDuration = quorumLossWaitDuration;
        return this;
    }

    /**
     * Get the standByReplicaKeepDuration property: The definition on how long StandBy replicas should be maintained
     * before being removed, represented in ISO 8601 format "hh:mm:ss".
     * 
     * @return the standByReplicaKeepDuration value.
     */
    public String standByReplicaKeepDuration() {
        return this.standByReplicaKeepDuration;
    }

    /**
     * Set the standByReplicaKeepDuration property: The definition on how long StandBy replicas should be maintained
     * before being removed, represented in ISO 8601 format "hh:mm:ss".
     * 
     * @param standByReplicaKeepDuration the standByReplicaKeepDuration value to set.
     * @return the StatefulServiceProperties object itself.
     */
    public StatefulServiceProperties withStandByReplicaKeepDuration(String standByReplicaKeepDuration) {
        this.standByReplicaKeepDuration = standByReplicaKeepDuration;
        return this;
    }

    /**
     * Get the servicePlacementTimeLimit property: The duration for which replicas can stay InBuild before reporting
     * that build is stuck, represented in ISO 8601 format "hh:mm:ss".
     * 
     * @return the servicePlacementTimeLimit value.
     */
    public String servicePlacementTimeLimit() {
        return this.servicePlacementTimeLimit;
    }

    /**
     * Set the servicePlacementTimeLimit property: The duration for which replicas can stay InBuild before reporting
     * that build is stuck, represented in ISO 8601 format "hh:mm:ss".
     * 
     * @param servicePlacementTimeLimit the servicePlacementTimeLimit value to set.
     * @return the StatefulServiceProperties object itself.
     */
    public StatefulServiceProperties withServicePlacementTimeLimit(String servicePlacementTimeLimit) {
        this.servicePlacementTimeLimit = servicePlacementTimeLimit;
        return this;
    }

    /**
     * Get the provisioningState property: The current deployment or provisioning state, which only appears in the
     * response.
     * 
     * @return the provisioningState value.
     */
    @Override
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatefulServiceProperties withServiceTypeName(String serviceTypeName) {
        super.withServiceTypeName(serviceTypeName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatefulServiceProperties withPartitionDescription(Partition partitionDescription) {
        super.withPartitionDescription(partitionDescription);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatefulServiceProperties
        withServicePackageActivationMode(ServicePackageActivationMode servicePackageActivationMode) {
        super.withServicePackageActivationMode(servicePackageActivationMode);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatefulServiceProperties withServiceDnsName(String serviceDnsName) {
        super.withServiceDnsName(serviceDnsName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatefulServiceProperties withPlacementConstraints(String placementConstraints) {
        super.withPlacementConstraints(placementConstraints);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatefulServiceProperties withCorrelationScheme(List<ServiceCorrelation> correlationScheme) {
        super.withCorrelationScheme(correlationScheme);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatefulServiceProperties withServiceLoadMetrics(List<ServiceLoadMetric> serviceLoadMetrics) {
        super.withServiceLoadMetrics(serviceLoadMetrics);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatefulServiceProperties
        withServicePlacementPolicies(List<ServicePlacementPolicy> servicePlacementPolicies) {
        super.withServicePlacementPolicies(servicePlacementPolicies);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatefulServiceProperties withDefaultMoveCost(MoveCost defaultMoveCost) {
        super.withDefaultMoveCost(defaultMoveCost);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatefulServiceProperties withScalingPolicies(List<ScalingPolicy> scalingPolicies) {
        super.withScalingPolicies(scalingPolicies);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serviceTypeName", serviceTypeName());
        jsonWriter.writeJsonField("partitionDescription", partitionDescription());
        jsonWriter.writeStringField("placementConstraints", placementConstraints());
        jsonWriter.writeArrayField("correlationScheme", correlationScheme(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("serviceLoadMetrics", serviceLoadMetrics(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("servicePlacementPolicies", servicePlacementPolicies(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("defaultMoveCost", defaultMoveCost() == null ? null : defaultMoveCost().toString());
        jsonWriter.writeArrayField("scalingPolicies", scalingPolicies(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("servicePackageActivationMode",
            servicePackageActivationMode() == null ? null : servicePackageActivationMode().toString());
        jsonWriter.writeStringField("serviceDnsName", serviceDnsName());
        jsonWriter.writeStringField("serviceKind", this.serviceKind == null ? null : this.serviceKind.toString());
        jsonWriter.writeBooleanField("hasPersistedState", this.hasPersistedState);
        jsonWriter.writeNumberField("targetReplicaSetSize", this.targetReplicaSetSize);
        jsonWriter.writeNumberField("minReplicaSetSize", this.minReplicaSetSize);
        jsonWriter.writeStringField("replicaRestartWaitDuration", this.replicaRestartWaitDuration);
        jsonWriter.writeStringField("quorumLossWaitDuration", this.quorumLossWaitDuration);
        jsonWriter.writeStringField("standByReplicaKeepDuration", this.standByReplicaKeepDuration);
        jsonWriter.writeStringField("servicePlacementTimeLimit", this.servicePlacementTimeLimit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StatefulServiceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StatefulServiceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StatefulServiceProperties.
     */
    public static StatefulServiceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StatefulServiceProperties deserializedStatefulServiceProperties = new StatefulServiceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceTypeName".equals(fieldName)) {
                    deserializedStatefulServiceProperties.withServiceTypeName(reader.getString());
                } else if ("partitionDescription".equals(fieldName)) {
                    deserializedStatefulServiceProperties.withPartitionDescription(Partition.fromJson(reader));
                } else if ("placementConstraints".equals(fieldName)) {
                    deserializedStatefulServiceProperties.withPlacementConstraints(reader.getString());
                } else if ("correlationScheme".equals(fieldName)) {
                    List<ServiceCorrelation> correlationScheme
                        = reader.readArray(reader1 -> ServiceCorrelation.fromJson(reader1));
                    deserializedStatefulServiceProperties.withCorrelationScheme(correlationScheme);
                } else if ("serviceLoadMetrics".equals(fieldName)) {
                    List<ServiceLoadMetric> serviceLoadMetrics
                        = reader.readArray(reader1 -> ServiceLoadMetric.fromJson(reader1));
                    deserializedStatefulServiceProperties.withServiceLoadMetrics(serviceLoadMetrics);
                } else if ("servicePlacementPolicies".equals(fieldName)) {
                    List<ServicePlacementPolicy> servicePlacementPolicies
                        = reader.readArray(reader1 -> ServicePlacementPolicy.fromJson(reader1));
                    deserializedStatefulServiceProperties.withServicePlacementPolicies(servicePlacementPolicies);
                } else if ("defaultMoveCost".equals(fieldName)) {
                    deserializedStatefulServiceProperties.withDefaultMoveCost(MoveCost.fromString(reader.getString()));
                } else if ("scalingPolicies".equals(fieldName)) {
                    List<ScalingPolicy> scalingPolicies = reader.readArray(reader1 -> ScalingPolicy.fromJson(reader1));
                    deserializedStatefulServiceProperties.withScalingPolicies(scalingPolicies);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedStatefulServiceProperties.provisioningState = reader.getString();
                } else if ("servicePackageActivationMode".equals(fieldName)) {
                    deserializedStatefulServiceProperties
                        .withServicePackageActivationMode(ServicePackageActivationMode.fromString(reader.getString()));
                } else if ("serviceDnsName".equals(fieldName)) {
                    deserializedStatefulServiceProperties.withServiceDnsName(reader.getString());
                } else if ("serviceKind".equals(fieldName)) {
                    deserializedStatefulServiceProperties.serviceKind = ServiceKind.fromString(reader.getString());
                } else if ("hasPersistedState".equals(fieldName)) {
                    deserializedStatefulServiceProperties.hasPersistedState
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("targetReplicaSetSize".equals(fieldName)) {
                    deserializedStatefulServiceProperties.targetReplicaSetSize = reader.getNullable(JsonReader::getInt);
                } else if ("minReplicaSetSize".equals(fieldName)) {
                    deserializedStatefulServiceProperties.minReplicaSetSize = reader.getNullable(JsonReader::getInt);
                } else if ("replicaRestartWaitDuration".equals(fieldName)) {
                    deserializedStatefulServiceProperties.replicaRestartWaitDuration = reader.getString();
                } else if ("quorumLossWaitDuration".equals(fieldName)) {
                    deserializedStatefulServiceProperties.quorumLossWaitDuration = reader.getString();
                } else if ("standByReplicaKeepDuration".equals(fieldName)) {
                    deserializedStatefulServiceProperties.standByReplicaKeepDuration = reader.getString();
                } else if ("servicePlacementTimeLimit".equals(fieldName)) {
                    deserializedStatefulServiceProperties.servicePlacementTimeLimit = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStatefulServiceProperties;
        });
    }
}
