// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.ApplicationTypeVersionsClient;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.ApplicationTypeVersionResourceInner;
import com.azure.resourcemanager.servicefabricmanagedclusters.implementation.models.ApplicationTypeVersionResourceList;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationTypeVersionUpdateParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ApplicationTypeVersionsClient.
 */
public final class ApplicationTypeVersionsClientImpl implements ApplicationTypeVersionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ApplicationTypeVersionsService service;

    /**
     * The service client containing this operation class.
     */
    private final ServiceFabricManagedClustersMgmtClientImpl client;

    /**
     * Initializes an instance of ApplicationTypeVersionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ApplicationTypeVersionsClientImpl(ServiceFabricManagedClustersMgmtClientImpl client) {
        this.service = RestProxy.create(ApplicationTypeVersionsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ServiceFabricManagedClustersMgmtClientApplicationTypeVersions to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "ServiceFabricManagedClustersMgmtClientApplicationTypeVersions")
    public interface ApplicationTypeVersionsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/managedClusters/{clusterName}/applicationTypes/{applicationTypeName}/versions/{version}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApplicationTypeVersionResourceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("applicationTypeName") String applicationTypeName, @PathParam("version") String version,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/managedClusters/{clusterName}/applicationTypes/{applicationTypeName}/versions/{version}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ApplicationTypeVersionResourceInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("applicationTypeName") String applicationTypeName, @PathParam("version") String version,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/managedClusters/{clusterName}/applicationTypes/{applicationTypeName}/versions/{version}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("applicationTypeName") String applicationTypeName, @PathParam("version") String version,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ApplicationTypeVersionResourceInner parameters, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/managedClusters/{clusterName}/applicationTypes/{applicationTypeName}/versions/{version}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("applicationTypeName") String applicationTypeName, @PathParam("version") String version,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ApplicationTypeVersionResourceInner parameters, Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/managedClusters/{clusterName}/applicationTypes/{applicationTypeName}/versions/{version}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApplicationTypeVersionResourceInner>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("applicationTypeName") String applicationTypeName, @PathParam("version") String version,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ApplicationTypeVersionUpdateParameters parameters, Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/managedClusters/{clusterName}/applicationTypes/{applicationTypeName}/versions/{version}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ApplicationTypeVersionResourceInner> updateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("applicationTypeName") String applicationTypeName, @PathParam("version") String version,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") ApplicationTypeVersionUpdateParameters parameters, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/managedClusters/{clusterName}/applicationTypes/{applicationTypeName}/versions/{version}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("applicationTypeName") String applicationTypeName, @PathParam("version") String version,
            Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/managedClusters/{clusterName}/applicationTypes/{applicationTypeName}/versions/{version}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("applicationTypeName") String applicationTypeName, @PathParam("version") String version,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/managedClusters/{clusterName}/applicationTypes/{applicationTypeName}/versions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApplicationTypeVersionResourceList>> listByApplicationTypes(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("applicationTypeName") String applicationTypeName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/managedClusters/{clusterName}/applicationTypes/{applicationTypeName}/versions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ApplicationTypeVersionResourceList> listByApplicationTypesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("clusterName") String clusterName,
            @PathParam("applicationTypeName") String applicationTypeName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ApplicationTypeVersionResourceList>> listByApplicationTypesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<ApplicationTypeVersionResourceList> listByApplicationTypesNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a Service Fabric managed application type version resource created or in the process of being created in the
     * Service Fabric managed application type name resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Service Fabric managed application type version resource created or in the process of being created in
     * the Service Fabric managed application type name resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApplicationTypeVersionResourceInner>> getWithResponseAsync(String resourceGroupName,
        String clusterName, String applicationTypeName, String version) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (applicationTypeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null."));
        }
        if (version == null) {
            return Mono.error(new IllegalArgumentException("Parameter version is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, clusterName, applicationTypeName, version, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a Service Fabric managed application type version resource created or in the process of being created in the
     * Service Fabric managed application type name resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Service Fabric managed application type version resource created or in the process of being created in
     * the Service Fabric managed application type name resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApplicationTypeVersionResourceInner> getAsync(String resourceGroupName, String clusterName,
        String applicationTypeName, String version) {
        return getWithResponseAsync(resourceGroupName, clusterName, applicationTypeName, version)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a Service Fabric managed application type version resource created or in the process of being created in the
     * Service Fabric managed application type name resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Service Fabric managed application type version resource created or in the process of being created in
     * the Service Fabric managed application type name resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ApplicationTypeVersionResourceInner> getWithResponse(String resourceGroupName, String clusterName,
        String applicationTypeName, String version, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (applicationTypeName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null."));
        }
        if (version == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter version is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, clusterName, applicationTypeName, version, accept, context);
    }

    /**
     * Get a Service Fabric managed application type version resource created or in the process of being created in the
     * Service Fabric managed application type name resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Service Fabric managed application type version resource created or in the process of being created in
     * the Service Fabric managed application type name resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApplicationTypeVersionResourceInner get(String resourceGroupName, String clusterName,
        String applicationTypeName, String version) {
        return getWithResponse(resourceGroupName, clusterName, applicationTypeName, version, Context.NONE).getValue();
    }

    /**
     * Create or update a Service Fabric managed application type version resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an application type version resource for the specified application type name resource along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String clusterName, String applicationTypeName, String version,
        ApplicationTypeVersionResourceInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (applicationTypeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null."));
        }
        if (version == null) {
            return Mono.error(new IllegalArgumentException("Parameter version is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, clusterName, applicationTypeName, version,
                contentType, accept, parameters, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update a Service Fabric managed application type version resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an application type version resource for the specified application type name resource along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String clusterName,
        String applicationTypeName, String version, ApplicationTypeVersionResourceInner parameters) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (applicationTypeName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null."));
        }
        if (version == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter version is required and cannot be null."));
        }
        if (parameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, clusterName, applicationTypeName, version, contentType,
            accept, parameters, Context.NONE);
    }

    /**
     * Create or update a Service Fabric managed application type version resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an application type version resource for the specified application type name resource along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String clusterName,
        String applicationTypeName, String version, ApplicationTypeVersionResourceInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (applicationTypeName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null."));
        }
        if (version == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter version is required and cannot be null."));
        }
        if (parameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, clusterName, applicationTypeName, version, contentType,
            accept, parameters, context);
    }

    /**
     * Create or update a Service Fabric managed application type version resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of an application type version resource for the specified application
     * type name resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ApplicationTypeVersionResourceInner>, ApplicationTypeVersionResourceInner>
        beginCreateOrUpdateAsync(String resourceGroupName, String clusterName, String applicationTypeName,
            String version, ApplicationTypeVersionResourceInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, clusterName, applicationTypeName, version, parameters);
        return this.client.<ApplicationTypeVersionResourceInner, ApplicationTypeVersionResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), ApplicationTypeVersionResourceInner.class,
            ApplicationTypeVersionResourceInner.class, this.client.getContext());
    }

    /**
     * Create or update a Service Fabric managed application type version resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an application type version resource for the specified application
     * type name resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApplicationTypeVersionResourceInner>, ApplicationTypeVersionResourceInner>
        beginCreateOrUpdate(String resourceGroupName, String clusterName, String applicationTypeName, String version,
            ApplicationTypeVersionResourceInner parameters) {
        Response<BinaryData> response
            = createOrUpdateWithResponse(resourceGroupName, clusterName, applicationTypeName, version, parameters);
        return this.client.<ApplicationTypeVersionResourceInner, ApplicationTypeVersionResourceInner>getLroResult(
            response, ApplicationTypeVersionResourceInner.class, ApplicationTypeVersionResourceInner.class,
            Context.NONE);
    }

    /**
     * Create or update a Service Fabric managed application type version resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an application type version resource for the specified application
     * type name resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ApplicationTypeVersionResourceInner>, ApplicationTypeVersionResourceInner>
        beginCreateOrUpdate(String resourceGroupName, String clusterName, String applicationTypeName, String version,
            ApplicationTypeVersionResourceInner parameters, Context context) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, clusterName, applicationTypeName,
            version, parameters, context);
        return this.client.<ApplicationTypeVersionResourceInner, ApplicationTypeVersionResourceInner>getLroResult(
            response, ApplicationTypeVersionResourceInner.class, ApplicationTypeVersionResourceInner.class, context);
    }

    /**
     * Create or update a Service Fabric managed application type version resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an application type version resource for the specified application type name resource on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApplicationTypeVersionResourceInner> createOrUpdateAsync(String resourceGroupName, String clusterName,
        String applicationTypeName, String version, ApplicationTypeVersionResourceInner parameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, clusterName, applicationTypeName, version, parameters).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a Service Fabric managed application type version resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an application type version resource for the specified application type name resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApplicationTypeVersionResourceInner createOrUpdate(String resourceGroupName, String clusterName,
        String applicationTypeName, String version, ApplicationTypeVersionResourceInner parameters) {
        return beginCreateOrUpdate(resourceGroupName, clusterName, applicationTypeName, version, parameters)
            .getFinalResult();
    }

    /**
     * Create or update a Service Fabric managed application type version resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an application type version resource for the specified application type name resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApplicationTypeVersionResourceInner createOrUpdate(String resourceGroupName, String clusterName,
        String applicationTypeName, String version, ApplicationTypeVersionResourceInner parameters, Context context) {
        return beginCreateOrUpdate(resourceGroupName, clusterName, applicationTypeName, version, parameters, context)
            .getFinalResult();
    }

    /**
     * Updates the tags of an application type version resource of a given managed cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource updated tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an application type version resource for the specified application type name resource along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ApplicationTypeVersionResourceInner>> updateWithResponseAsync(String resourceGroupName,
        String clusterName, String applicationTypeName, String version,
        ApplicationTypeVersionUpdateParameters parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (applicationTypeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null."));
        }
        if (version == null) {
            return Mono.error(new IllegalArgumentException("Parameter version is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, clusterName, applicationTypeName, version,
                contentType, accept, parameters, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the tags of an application type version resource of a given managed cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource updated tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an application type version resource for the specified application type name resource on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ApplicationTypeVersionResourceInner> updateAsync(String resourceGroupName, String clusterName,
        String applicationTypeName, String version, ApplicationTypeVersionUpdateParameters parameters) {
        return updateWithResponseAsync(resourceGroupName, clusterName, applicationTypeName, version, parameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates the tags of an application type version resource of a given managed cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource updated tags.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an application type version resource for the specified application type name resource along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ApplicationTypeVersionResourceInner> updateWithResponse(String resourceGroupName,
        String clusterName, String applicationTypeName, String version,
        ApplicationTypeVersionUpdateParameters parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (applicationTypeName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null."));
        }
        if (version == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter version is required and cannot be null."));
        }
        if (parameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, clusterName, applicationTypeName, version, contentType,
            accept, parameters, context);
    }

    /**
     * Updates the tags of an application type version resource of a given managed cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param parameters The application type version resource updated tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an application type version resource for the specified application type name resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApplicationTypeVersionResourceInner update(String resourceGroupName, String clusterName,
        String applicationTypeName, String version, ApplicationTypeVersionUpdateParameters parameters) {
        return updateWithResponse(resourceGroupName, clusterName, applicationTypeName, version, parameters,
            Context.NONE).getValue();
    }

    /**
     * Delete a Service Fabric managed application type version resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String clusterName,
        String applicationTypeName, String version) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (applicationTypeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null."));
        }
        if (version == null) {
            return Mono.error(new IllegalArgumentException("Parameter version is required and cannot be null."));
        }
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, clusterName, applicationTypeName, version, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a Service Fabric managed application type version resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String clusterName,
        String applicationTypeName, String version) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (applicationTypeName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null."));
        }
        if (version == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter version is required and cannot be null."));
        }
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, clusterName, applicationTypeName, version,
            Context.NONE);
    }

    /**
     * Delete a Service Fabric managed application type version resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String clusterName,
        String applicationTypeName, String version, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (applicationTypeName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null."));
        }
        if (version == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter version is required and cannot be null."));
        }
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, clusterName, applicationTypeName, version, context);
    }

    /**
     * Delete a Service Fabric managed application type version resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String clusterName,
        String applicationTypeName, String version) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, clusterName, applicationTypeName, version);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a Service Fabric managed application type version resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String clusterName,
        String applicationTypeName, String version) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, clusterName, applicationTypeName, version);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete a Service Fabric managed application type version resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String clusterName,
        String applicationTypeName, String version, Context context) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, clusterName, applicationTypeName, version, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Delete a Service Fabric managed application type version resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String clusterName, String applicationTypeName,
        String version) {
        return beginDeleteAsync(resourceGroupName, clusterName, applicationTypeName, version).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a Service Fabric managed application type version resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String clusterName, String applicationTypeName, String version) {
        beginDelete(resourceGroupName, clusterName, applicationTypeName, version).getFinalResult();
    }

    /**
     * Delete a Service Fabric managed application type version resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param version The application type version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String clusterName, String applicationTypeName, String version,
        Context context) {
        beginDelete(resourceGroupName, clusterName, applicationTypeName, version, context).getFinalResult();
    }

    /**
     * Gets all application type version resources created or in the process of being created in the Service Fabric
     * managed application type name resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all application type version resources created or in the process of being created in the Service Fabric
     * managed application type name resource along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ApplicationTypeVersionResourceInner>> listByApplicationTypesSinglePageAsync(
        String resourceGroupName, String clusterName, String applicationTypeName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (applicationTypeName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByApplicationTypes(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, clusterName,
                applicationTypeName, accept, context))
            .<PagedResponse<ApplicationTypeVersionResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets all application type version resources created or in the process of being created in the Service Fabric
     * managed application type name resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all application type version resources created or in the process of being created in the Service Fabric
     * managed application type name resource as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ApplicationTypeVersionResourceInner> listByApplicationTypesAsync(String resourceGroupName,
        String clusterName, String applicationTypeName) {
        return new PagedFlux<>(
            () -> listByApplicationTypesSinglePageAsync(resourceGroupName, clusterName, applicationTypeName),
            nextLink -> listByApplicationTypesNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all application type version resources created or in the process of being created in the Service Fabric
     * managed application type name resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all application type version resources created or in the process of being created in the Service Fabric
     * managed application type name resource along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ApplicationTypeVersionResourceInner>
        listByApplicationTypesSinglePage(String resourceGroupName, String clusterName, String applicationTypeName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (applicationTypeName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ApplicationTypeVersionResourceList> res = service.listByApplicationTypesSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, clusterName,
            applicationTypeName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Gets all application type version resources created or in the process of being created in the Service Fabric
     * managed application type name resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all application type version resources created or in the process of being created in the Service Fabric
     * managed application type name resource along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ApplicationTypeVersionResourceInner> listByApplicationTypesSinglePage(
        String resourceGroupName, String clusterName, String applicationTypeName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (applicationTypeName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter applicationTypeName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ApplicationTypeVersionResourceList> res
            = service.listByApplicationTypesSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, clusterName, applicationTypeName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Gets all application type version resources created or in the process of being created in the Service Fabric
     * managed application type name resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all application type version resources created or in the process of being created in the Service Fabric
     * managed application type name resource as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ApplicationTypeVersionResourceInner> listByApplicationTypes(String resourceGroupName,
        String clusterName, String applicationTypeName) {
        return new PagedIterable<>(
            () -> listByApplicationTypesSinglePage(resourceGroupName, clusterName, applicationTypeName),
            nextLink -> listByApplicationTypesNextSinglePage(nextLink));
    }

    /**
     * Gets all application type version resources created or in the process of being created in the Service Fabric
     * managed application type name resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param applicationTypeName The name of the application type name resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all application type version resources created or in the process of being created in the Service Fabric
     * managed application type name resource as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ApplicationTypeVersionResourceInner> listByApplicationTypes(String resourceGroupName,
        String clusterName, String applicationTypeName, Context context) {
        return new PagedIterable<>(
            () -> listByApplicationTypesSinglePage(resourceGroupName, clusterName, applicationTypeName, context),
            nextLink -> listByApplicationTypesNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all application type version resources created or in the process of being created in the Service Fabric
     * managed application type name resource along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ApplicationTypeVersionResourceInner>>
        listByApplicationTypesNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByApplicationTypesNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ApplicationTypeVersionResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all application type version resources created or in the process of being created in the Service Fabric
     * managed application type name resource along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ApplicationTypeVersionResourceInner> listByApplicationTypesNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ApplicationTypeVersionResourceList> res
            = service.listByApplicationTypesNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all application type version resources created or in the process of being created in the Service Fabric
     * managed application type name resource along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<ApplicationTypeVersionResourceInner> listByApplicationTypesNextSinglePage(String nextLink,
        Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<ApplicationTypeVersionResourceList> res
            = service.listByApplicationTypesNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApplicationTypeVersionsClientImpl.class);
}
