// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes a load balancing rule.
 */
@Fluent
public final class LoadBalancingRule implements JsonSerializable<LoadBalancingRule> {
    /*
     * The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer.
     * Acceptable values are between 1 and 65534.
     */
    private int frontendPort;

    /*
     * The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535.
     */
    private int backendPort;

    /*
     * The reference to the transport protocol used by the load balancing rule.
     */
    private Protocol protocol;

    /*
     * The prob port used by the load balancing rule. Acceptable values are between 1 and 65535.
     */
    private Integer probePort;

    /*
     * the reference to the load balancer probe used by the load balancing rule.
     */
    private ProbeProtocol probeProtocol;

    /*
     * The probe request path. Only supported for HTTP/HTTPS probes.
     */
    private String probeRequestPath;

    /*
     * The load distribution policy for this rule.
     */
    private String loadDistribution;

    /**
     * Creates an instance of LoadBalancingRule class.
     */
    public LoadBalancingRule() {
    }

    /**
     * Get the frontendPort property: The port for the external endpoint. Port numbers for each rule must be unique
     * within the Load Balancer. Acceptable values are between 1 and 65534.
     * 
     * @return the frontendPort value.
     */
    public int frontendPort() {
        return this.frontendPort;
    }

    /**
     * Set the frontendPort property: The port for the external endpoint. Port numbers for each rule must be unique
     * within the Load Balancer. Acceptable values are between 1 and 65534.
     * 
     * @param frontendPort the frontendPort value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withFrontendPort(int frontendPort) {
        this.frontendPort = frontendPort;
        return this;
    }

    /**
     * Get the backendPort property: The port used for internal connections on the endpoint. Acceptable values are
     * between 1 and 65535.
     * 
     * @return the backendPort value.
     */
    public int backendPort() {
        return this.backendPort;
    }

    /**
     * Set the backendPort property: The port used for internal connections on the endpoint. Acceptable values are
     * between 1 and 65535.
     * 
     * @param backendPort the backendPort value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withBackendPort(int backendPort) {
        this.backendPort = backendPort;
        return this;
    }

    /**
     * Get the protocol property: The reference to the transport protocol used by the load balancing rule.
     * 
     * @return the protocol value.
     */
    public Protocol protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: The reference to the transport protocol used by the load balancing rule.
     * 
     * @param protocol the protocol value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withProtocol(Protocol protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the probePort property: The prob port used by the load balancing rule. Acceptable values are between 1 and
     * 65535.
     * 
     * @return the probePort value.
     */
    public Integer probePort() {
        return this.probePort;
    }

    /**
     * Set the probePort property: The prob port used by the load balancing rule. Acceptable values are between 1 and
     * 65535.
     * 
     * @param probePort the probePort value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withProbePort(Integer probePort) {
        this.probePort = probePort;
        return this;
    }

    /**
     * Get the probeProtocol property: the reference to the load balancer probe used by the load balancing rule.
     * 
     * @return the probeProtocol value.
     */
    public ProbeProtocol probeProtocol() {
        return this.probeProtocol;
    }

    /**
     * Set the probeProtocol property: the reference to the load balancer probe used by the load balancing rule.
     * 
     * @param probeProtocol the probeProtocol value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withProbeProtocol(ProbeProtocol probeProtocol) {
        this.probeProtocol = probeProtocol;
        return this;
    }

    /**
     * Get the probeRequestPath property: The probe request path. Only supported for HTTP/HTTPS probes.
     * 
     * @return the probeRequestPath value.
     */
    public String probeRequestPath() {
        return this.probeRequestPath;
    }

    /**
     * Set the probeRequestPath property: The probe request path. Only supported for HTTP/HTTPS probes.
     * 
     * @param probeRequestPath the probeRequestPath value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withProbeRequestPath(String probeRequestPath) {
        this.probeRequestPath = probeRequestPath;
        return this;
    }

    /**
     * Get the loadDistribution property: The load distribution policy for this rule.
     * 
     * @return the loadDistribution value.
     */
    public String loadDistribution() {
        return this.loadDistribution;
    }

    /**
     * Set the loadDistribution property: The load distribution policy for this rule.
     * 
     * @param loadDistribution the loadDistribution value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withLoadDistribution(String loadDistribution) {
        this.loadDistribution = loadDistribution;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (protocol() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property protocol in model LoadBalancingRule"));
        }
        if (probeProtocol() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property probeProtocol in model LoadBalancingRule"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LoadBalancingRule.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("frontendPort", this.frontendPort);
        jsonWriter.writeIntField("backendPort", this.backendPort);
        jsonWriter.writeStringField("protocol", this.protocol == null ? null : this.protocol.toString());
        jsonWriter.writeStringField("probeProtocol", this.probeProtocol == null ? null : this.probeProtocol.toString());
        jsonWriter.writeNumberField("probePort", this.probePort);
        jsonWriter.writeStringField("probeRequestPath", this.probeRequestPath);
        jsonWriter.writeStringField("loadDistribution", this.loadDistribution);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoadBalancingRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoadBalancingRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LoadBalancingRule.
     */
    public static LoadBalancingRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoadBalancingRule deserializedLoadBalancingRule = new LoadBalancingRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("frontendPort".equals(fieldName)) {
                    deserializedLoadBalancingRule.frontendPort = reader.getInt();
                } else if ("backendPort".equals(fieldName)) {
                    deserializedLoadBalancingRule.backendPort = reader.getInt();
                } else if ("protocol".equals(fieldName)) {
                    deserializedLoadBalancingRule.protocol = Protocol.fromString(reader.getString());
                } else if ("probeProtocol".equals(fieldName)) {
                    deserializedLoadBalancingRule.probeProtocol = ProbeProtocol.fromString(reader.getString());
                } else if ("probePort".equals(fieldName)) {
                    deserializedLoadBalancingRule.probePort = reader.getNullable(JsonReader::getInt);
                } else if ("probeRequestPath".equals(fieldName)) {
                    deserializedLoadBalancingRule.probeRequestPath = reader.getString();
                } else if ("loadDistribution".equals(fieldName)) {
                    deserializedLoadBalancingRule.loadDistribution = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoadBalancingRule;
        });
    }
}
