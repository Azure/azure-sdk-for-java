// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Fault Simulation Request for Start action.
 */
@Fluent
public final class FaultSimulationContentWrapper implements JsonSerializable<FaultSimulationContentWrapper> {
    /*
     * Parameters for Fault Simulation start action.
     */
    private FaultSimulationContent parameters;

    /**
     * Creates an instance of FaultSimulationContentWrapper class.
     */
    public FaultSimulationContentWrapper() {
    }

    /**
     * Get the parameters property: Parameters for Fault Simulation start action.
     * 
     * @return the parameters value.
     */
    public FaultSimulationContent parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Parameters for Fault Simulation start action.
     * 
     * @param parameters the parameters value to set.
     * @return the FaultSimulationContentWrapper object itself.
     */
    public FaultSimulationContentWrapper withParameters(FaultSimulationContent parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("parameters", this.parameters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FaultSimulationContentWrapper from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FaultSimulationContentWrapper if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FaultSimulationContentWrapper.
     */
    public static FaultSimulationContentWrapper fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FaultSimulationContentWrapper deserializedFaultSimulationContentWrapper
                = new FaultSimulationContentWrapper();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("parameters".equals(fieldName)) {
                    deserializedFaultSimulationContentWrapper.parameters = FaultSimulationContent.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFaultSimulationContentWrapper;
        });
    }
}
