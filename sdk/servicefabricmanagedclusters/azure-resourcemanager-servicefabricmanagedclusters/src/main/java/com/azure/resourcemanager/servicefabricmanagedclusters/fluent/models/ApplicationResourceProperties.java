// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUpgradePolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUserAssignedIdentity;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The application resource properties.
 */
@Fluent
public final class ApplicationResourceProperties implements JsonSerializable<ApplicationResourceProperties> {
    /*
     * The current deployment or provisioning state, which only appears in the response
     */
    private String provisioningState;

    /*
     * The version of the application type as defined in the application manifest.
     * This name must be the full Arm Resource ID for the referenced application type version.
     */
    private String version;

    /*
     * List of application parameters with overridden values from their default values specified in the application
     * manifest.
     */
    private Map<String, String> parameters;

    /*
     * Describes the policy for a monitored application upgrade.
     */
    private ApplicationUpgradePolicy upgradePolicy;

    /*
     * List of user assigned identities for the application, each mapped to a friendly name.
     */
    private List<ApplicationUserAssignedIdentity> managedIdentities;

    /**
     * Creates an instance of ApplicationResourceProperties class.
     */
    public ApplicationResourceProperties() {
    }

    /**
     * Get the provisioningState property: The current deployment or provisioning state, which only appears in the
     * response.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the version property: The version of the application type as defined in the application manifest.
     * This name must be the full Arm Resource ID for the referenced application type version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: The version of the application type as defined in the application manifest.
     * This name must be the full Arm Resource ID for the referenced application type version.
     * 
     * @param version the version value to set.
     * @return the ApplicationResourceProperties object itself.
     */
    public ApplicationResourceProperties withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the parameters property: List of application parameters with overridden values from their default values
     * specified in the application manifest.
     * 
     * @return the parameters value.
     */
    public Map<String, String> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: List of application parameters with overridden values from their default values
     * specified in the application manifest.
     * 
     * @param parameters the parameters value to set.
     * @return the ApplicationResourceProperties object itself.
     */
    public ApplicationResourceProperties withParameters(Map<String, String> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the upgradePolicy property: Describes the policy for a monitored application upgrade.
     * 
     * @return the upgradePolicy value.
     */
    public ApplicationUpgradePolicy upgradePolicy() {
        return this.upgradePolicy;
    }

    /**
     * Set the upgradePolicy property: Describes the policy for a monitored application upgrade.
     * 
     * @param upgradePolicy the upgradePolicy value to set.
     * @return the ApplicationResourceProperties object itself.
     */
    public ApplicationResourceProperties withUpgradePolicy(ApplicationUpgradePolicy upgradePolicy) {
        this.upgradePolicy = upgradePolicy;
        return this;
    }

    /**
     * Get the managedIdentities property: List of user assigned identities for the application, each mapped to a
     * friendly name.
     * 
     * @return the managedIdentities value.
     */
    public List<ApplicationUserAssignedIdentity> managedIdentities() {
        return this.managedIdentities;
    }

    /**
     * Set the managedIdentities property: List of user assigned identities for the application, each mapped to a
     * friendly name.
     * 
     * @param managedIdentities the managedIdentities value to set.
     * @return the ApplicationResourceProperties object itself.
     */
    public ApplicationResourceProperties
        withManagedIdentities(List<ApplicationUserAssignedIdentity> managedIdentities) {
        this.managedIdentities = managedIdentities;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (upgradePolicy() != null) {
            upgradePolicy().validate();
        }
        if (managedIdentities() != null) {
            managedIdentities().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeMapField("parameters", this.parameters, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("upgradePolicy", this.upgradePolicy);
        jsonWriter.writeArrayField("managedIdentities", this.managedIdentities,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationResourceProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApplicationResourceProperties.
     */
    public static ApplicationResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationResourceProperties deserializedApplicationResourceProperties
                = new ApplicationResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedApplicationResourceProperties.provisioningState = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedApplicationResourceProperties.version = reader.getString();
                } else if ("parameters".equals(fieldName)) {
                    Map<String, String> parameters = reader.readMap(reader1 -> reader1.getString());
                    deserializedApplicationResourceProperties.parameters = parameters;
                } else if ("upgradePolicy".equals(fieldName)) {
                    deserializedApplicationResourceProperties.upgradePolicy = ApplicationUpgradePolicy.fromJson(reader);
                } else if ("managedIdentities".equals(fieldName)) {
                    List<ApplicationUserAssignedIdentity> managedIdentities
                        = reader.readArray(reader1 -> ApplicationUserAssignedIdentity.fromJson(reader1));
                    deserializedApplicationResourceProperties.managedIdentities = managedIdentities;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationResourceProperties;
        });
    }
}
