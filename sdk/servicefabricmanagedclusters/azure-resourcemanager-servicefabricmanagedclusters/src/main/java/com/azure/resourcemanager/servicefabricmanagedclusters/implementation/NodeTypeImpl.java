// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.NodeTypeInner;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.AdditionalNetworkInterfaceConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.DiskType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.EndpointRangeDescription;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.EvictionPolicyType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FrontendConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedResourceProvisioningState;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.NetworkSecurityRule;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.NodeType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.NodeTypeActionParameters;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.NodeTypeNatConfig;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.NodeTypeSku;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.NodeTypeUpdateParameters;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.SecurityType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.VaultSecretGroup;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.VmApplication;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.VmImagePlan;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.VmManagedIdentity;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.VmSetupAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.VmssDataDisk;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.VmssExtension;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class NodeTypeImpl implements NodeType, NodeType.Definition, NodeType.Update {
    private NodeTypeInner innerObject;

    private final com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public NodeTypeSku sku() {
        return this.innerModel().sku();
    }

    public boolean isPrimary() {
        return this.innerModel().isPrimary();
    }

    public int vmInstanceCount() {
        return this.innerModel().vmInstanceCount();
    }

    public Integer dataDiskSizeGB() {
        return this.innerModel().dataDiskSizeGB();
    }

    public DiskType dataDiskType() {
        return this.innerModel().dataDiskType();
    }

    public String dataDiskLetter() {
        return this.innerModel().dataDiskLetter();
    }

    public Map<String, String> placementProperties() {
        Map<String, String> inner = this.innerModel().placementProperties();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Map<String, String> capacities() {
        Map<String, String> inner = this.innerModel().capacities();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public EndpointRangeDescription applicationPorts() {
        return this.innerModel().applicationPorts();
    }

    public EndpointRangeDescription ephemeralPorts() {
        return this.innerModel().ephemeralPorts();
    }

    public String vmSize() {
        return this.innerModel().vmSize();
    }

    public String vmImagePublisher() {
        return this.innerModel().vmImagePublisher();
    }

    public String vmImageOffer() {
        return this.innerModel().vmImageOffer();
    }

    public String vmImageSku() {
        return this.innerModel().vmImageSku();
    }

    public String vmImageVersion() {
        return this.innerModel().vmImageVersion();
    }

    public List<VaultSecretGroup> vmSecrets() {
        List<VaultSecretGroup> inner = this.innerModel().vmSecrets();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<VmssExtension> vmExtensions() {
        List<VmssExtension> inner = this.innerModel().vmExtensions();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public VmManagedIdentity vmManagedIdentity() {
        return this.innerModel().vmManagedIdentity();
    }

    public Boolean isStateless() {
        return this.innerModel().isStateless();
    }

    public Boolean multiplePlacementGroups() {
        return this.innerModel().multiplePlacementGroups();
    }

    public List<FrontendConfiguration> frontendConfigurations() {
        List<FrontendConfiguration> inner = this.innerModel().frontendConfigurations();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<NetworkSecurityRule> networkSecurityRules() {
        List<NetworkSecurityRule> inner = this.innerModel().networkSecurityRules();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<VmssDataDisk> additionalDataDisks() {
        List<VmssDataDisk> inner = this.innerModel().additionalDataDisks();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Boolean enableEncryptionAtHost() {
        return this.innerModel().enableEncryptionAtHost();
    }

    public ManagedResourceProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Boolean enableAcceleratedNetworking() {
        return this.innerModel().enableAcceleratedNetworking();
    }

    public Boolean useDefaultPublicLoadBalancer() {
        return this.innerModel().useDefaultPublicLoadBalancer();
    }

    public Boolean useTempDataDisk() {
        return this.innerModel().useTempDataDisk();
    }

    public Boolean enableOverProvisioning() {
        return this.innerModel().enableOverProvisioning();
    }

    public List<String> zones() {
        List<String> inner = this.innerModel().zones();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Boolean isSpotVM() {
        return this.innerModel().isSpotVM();
    }

    public String hostGroupId() {
        return this.innerModel().hostGroupId();
    }

    public Boolean useEphemeralOSDisk() {
        return this.innerModel().useEphemeralOSDisk();
    }

    public String spotRestoreTimeout() {
        return this.innerModel().spotRestoreTimeout();
    }

    public EvictionPolicyType evictionPolicy() {
        return this.innerModel().evictionPolicy();
    }

    public String vmImageResourceId() {
        return this.innerModel().vmImageResourceId();
    }

    public String subnetId() {
        return this.innerModel().subnetId();
    }

    public List<VmSetupAction> vmSetupActions() {
        List<VmSetupAction> inner = this.innerModel().vmSetupActions();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public SecurityType securityType() {
        return this.innerModel().securityType();
    }

    public Boolean secureBootEnabled() {
        return this.innerModel().secureBootEnabled();
    }

    public Boolean enableNodePublicIp() {
        return this.innerModel().enableNodePublicIp();
    }

    public Boolean enableNodePublicIPv6() {
        return this.innerModel().enableNodePublicIPv6();
    }

    public String vmSharedGalleryImageId() {
        return this.innerModel().vmSharedGalleryImageId();
    }

    public String natGatewayId() {
        return this.innerModel().natGatewayId();
    }

    public List<NodeTypeNatConfig> natConfigurations() {
        List<NodeTypeNatConfig> inner = this.innerModel().natConfigurations();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public VmImagePlan vmImagePlan() {
        return this.innerModel().vmImagePlan();
    }

    public String serviceArtifactReferenceId() {
        return this.innerModel().serviceArtifactReferenceId();
    }

    public String dscpConfigurationId() {
        return this.innerModel().dscpConfigurationId();
    }

    public List<AdditionalNetworkInterfaceConfiguration> additionalNetworkInterfaceConfigurations() {
        List<AdditionalNetworkInterfaceConfiguration> inner
            = this.innerModel().additionalNetworkInterfaceConfigurations();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String computerNamePrefix() {
        return this.innerModel().computerNamePrefix();
    }

    public List<VmApplication> vmApplications() {
        List<VmApplication> inner = this.innerModel().vmApplications();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public NodeTypeInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String clusterName;

    private String nodeTypeName;

    private NodeTypeUpdateParameters updateParameters;

    public NodeTypeImpl withExistingManagedCluster(String resourceGroupName, String clusterName) {
        this.resourceGroupName = resourceGroupName;
        this.clusterName = clusterName;
        return this;
    }

    public NodeType create() {
        this.innerObject = serviceManager.serviceClient()
            .getNodeTypes()
            .createOrUpdate(resourceGroupName, clusterName, nodeTypeName, this.innerModel(), Context.NONE);
        return this;
    }

    public NodeType create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getNodeTypes()
            .createOrUpdate(resourceGroupName, clusterName, nodeTypeName, this.innerModel(), context);
        return this;
    }

    NodeTypeImpl(String name,
        com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager serviceManager) {
        this.innerObject = new NodeTypeInner();
        this.serviceManager = serviceManager;
        this.nodeTypeName = name;
    }

    public NodeTypeImpl update() {
        this.updateParameters = new NodeTypeUpdateParameters();
        return this;
    }

    public NodeType apply() {
        this.innerObject = serviceManager.serviceClient()
            .getNodeTypes()
            .updateWithResponse(resourceGroupName, clusterName, nodeTypeName, updateParameters, Context.NONE)
            .getValue();
        return this;
    }

    public NodeType apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getNodeTypes()
            .updateWithResponse(resourceGroupName, clusterName, nodeTypeName, updateParameters, context)
            .getValue();
        return this;
    }

    NodeTypeImpl(NodeTypeInner innerObject,
        com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.clusterName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "managedClusters");
        this.nodeTypeName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "nodeTypes");
    }

    public NodeType refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getNodeTypes()
            .getWithResponse(resourceGroupName, clusterName, nodeTypeName, Context.NONE)
            .getValue();
        return this;
    }

    public NodeType refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getNodeTypes()
            .getWithResponse(resourceGroupName, clusterName, nodeTypeName, context)
            .getValue();
        return this;
    }

    public void restart(NodeTypeActionParameters parameters) {
        serviceManager.nodeTypes().restart(resourceGroupName, clusterName, nodeTypeName, parameters);
    }

    public void restart(NodeTypeActionParameters parameters, Context context) {
        serviceManager.nodeTypes().restart(resourceGroupName, clusterName, nodeTypeName, parameters, context);
    }

    public void reimage(NodeTypeActionParameters parameters) {
        serviceManager.nodeTypes().reimage(resourceGroupName, clusterName, nodeTypeName, parameters);
    }

    public void reimage(NodeTypeActionParameters parameters, Context context) {
        serviceManager.nodeTypes().reimage(resourceGroupName, clusterName, nodeTypeName, parameters, context);
    }

    public void deleteNode(NodeTypeActionParameters parameters) {
        serviceManager.nodeTypes().deleteNode(resourceGroupName, clusterName, nodeTypeName, parameters);
    }

    public void deleteNode(NodeTypeActionParameters parameters, Context context) {
        serviceManager.nodeTypes().deleteNode(resourceGroupName, clusterName, nodeTypeName, parameters, context);
    }

    public NodeTypeImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public NodeTypeImpl withSku(NodeTypeSku sku) {
        if (isInCreateMode()) {
            this.innerModel().withSku(sku);
            return this;
        } else {
            this.updateParameters.withSku(sku);
            return this;
        }
    }

    public NodeTypeImpl withIsPrimary(boolean isPrimary) {
        this.innerModel().withIsPrimary(isPrimary);
        return this;
    }

    public NodeTypeImpl withVmInstanceCount(int vmInstanceCount) {
        this.innerModel().withVmInstanceCount(vmInstanceCount);
        return this;
    }

    public NodeTypeImpl withDataDiskSizeGB(Integer dataDiskSizeGB) {
        this.innerModel().withDataDiskSizeGB(dataDiskSizeGB);
        return this;
    }

    public NodeTypeImpl withDataDiskType(DiskType dataDiskType) {
        this.innerModel().withDataDiskType(dataDiskType);
        return this;
    }

    public NodeTypeImpl withDataDiskLetter(String dataDiskLetter) {
        this.innerModel().withDataDiskLetter(dataDiskLetter);
        return this;
    }

    public NodeTypeImpl withPlacementProperties(Map<String, String> placementProperties) {
        this.innerModel().withPlacementProperties(placementProperties);
        return this;
    }

    public NodeTypeImpl withCapacities(Map<String, String> capacities) {
        this.innerModel().withCapacities(capacities);
        return this;
    }

    public NodeTypeImpl withApplicationPorts(EndpointRangeDescription applicationPorts) {
        this.innerModel().withApplicationPorts(applicationPorts);
        return this;
    }

    public NodeTypeImpl withEphemeralPorts(EndpointRangeDescription ephemeralPorts) {
        this.innerModel().withEphemeralPorts(ephemeralPorts);
        return this;
    }

    public NodeTypeImpl withVmSize(String vmSize) {
        this.innerModel().withVmSize(vmSize);
        return this;
    }

    public NodeTypeImpl withVmImagePublisher(String vmImagePublisher) {
        this.innerModel().withVmImagePublisher(vmImagePublisher);
        return this;
    }

    public NodeTypeImpl withVmImageOffer(String vmImageOffer) {
        this.innerModel().withVmImageOffer(vmImageOffer);
        return this;
    }

    public NodeTypeImpl withVmImageSku(String vmImageSku) {
        this.innerModel().withVmImageSku(vmImageSku);
        return this;
    }

    public NodeTypeImpl withVmImageVersion(String vmImageVersion) {
        this.innerModel().withVmImageVersion(vmImageVersion);
        return this;
    }

    public NodeTypeImpl withVmSecrets(List<VaultSecretGroup> vmSecrets) {
        this.innerModel().withVmSecrets(vmSecrets);
        return this;
    }

    public NodeTypeImpl withVmExtensions(List<VmssExtension> vmExtensions) {
        this.innerModel().withVmExtensions(vmExtensions);
        return this;
    }

    public NodeTypeImpl withVmManagedIdentity(VmManagedIdentity vmManagedIdentity) {
        this.innerModel().withVmManagedIdentity(vmManagedIdentity);
        return this;
    }

    public NodeTypeImpl withIsStateless(Boolean isStateless) {
        this.innerModel().withIsStateless(isStateless);
        return this;
    }

    public NodeTypeImpl withMultiplePlacementGroups(Boolean multiplePlacementGroups) {
        this.innerModel().withMultiplePlacementGroups(multiplePlacementGroups);
        return this;
    }

    public NodeTypeImpl withFrontendConfigurations(List<FrontendConfiguration> frontendConfigurations) {
        this.innerModel().withFrontendConfigurations(frontendConfigurations);
        return this;
    }

    public NodeTypeImpl withNetworkSecurityRules(List<NetworkSecurityRule> networkSecurityRules) {
        this.innerModel().withNetworkSecurityRules(networkSecurityRules);
        return this;
    }

    public NodeTypeImpl withAdditionalDataDisks(List<VmssDataDisk> additionalDataDisks) {
        this.innerModel().withAdditionalDataDisks(additionalDataDisks);
        return this;
    }

    public NodeTypeImpl withEnableEncryptionAtHost(Boolean enableEncryptionAtHost) {
        this.innerModel().withEnableEncryptionAtHost(enableEncryptionAtHost);
        return this;
    }

    public NodeTypeImpl withEnableAcceleratedNetworking(Boolean enableAcceleratedNetworking) {
        this.innerModel().withEnableAcceleratedNetworking(enableAcceleratedNetworking);
        return this;
    }

    public NodeTypeImpl withUseDefaultPublicLoadBalancer(Boolean useDefaultPublicLoadBalancer) {
        this.innerModel().withUseDefaultPublicLoadBalancer(useDefaultPublicLoadBalancer);
        return this;
    }

    public NodeTypeImpl withUseTempDataDisk(Boolean useTempDataDisk) {
        this.innerModel().withUseTempDataDisk(useTempDataDisk);
        return this;
    }

    public NodeTypeImpl withEnableOverProvisioning(Boolean enableOverProvisioning) {
        this.innerModel().withEnableOverProvisioning(enableOverProvisioning);
        return this;
    }

    public NodeTypeImpl withZones(List<String> zones) {
        this.innerModel().withZones(zones);
        return this;
    }

    public NodeTypeImpl withIsSpotVM(Boolean isSpotVM) {
        this.innerModel().withIsSpotVM(isSpotVM);
        return this;
    }

    public NodeTypeImpl withHostGroupId(String hostGroupId) {
        this.innerModel().withHostGroupId(hostGroupId);
        return this;
    }

    public NodeTypeImpl withUseEphemeralOSDisk(Boolean useEphemeralOSDisk) {
        this.innerModel().withUseEphemeralOSDisk(useEphemeralOSDisk);
        return this;
    }

    public NodeTypeImpl withSpotRestoreTimeout(String spotRestoreTimeout) {
        this.innerModel().withSpotRestoreTimeout(spotRestoreTimeout);
        return this;
    }

    public NodeTypeImpl withEvictionPolicy(EvictionPolicyType evictionPolicy) {
        this.innerModel().withEvictionPolicy(evictionPolicy);
        return this;
    }

    public NodeTypeImpl withVmImageResourceId(String vmImageResourceId) {
        this.innerModel().withVmImageResourceId(vmImageResourceId);
        return this;
    }

    public NodeTypeImpl withSubnetId(String subnetId) {
        this.innerModel().withSubnetId(subnetId);
        return this;
    }

    public NodeTypeImpl withVmSetupActions(List<VmSetupAction> vmSetupActions) {
        this.innerModel().withVmSetupActions(vmSetupActions);
        return this;
    }

    public NodeTypeImpl withSecurityType(SecurityType securityType) {
        this.innerModel().withSecurityType(securityType);
        return this;
    }

    public NodeTypeImpl withSecureBootEnabled(Boolean secureBootEnabled) {
        this.innerModel().withSecureBootEnabled(secureBootEnabled);
        return this;
    }

    public NodeTypeImpl withEnableNodePublicIp(Boolean enableNodePublicIp) {
        this.innerModel().withEnableNodePublicIp(enableNodePublicIp);
        return this;
    }

    public NodeTypeImpl withEnableNodePublicIPv6(Boolean enableNodePublicIPv6) {
        this.innerModel().withEnableNodePublicIPv6(enableNodePublicIPv6);
        return this;
    }

    public NodeTypeImpl withVmSharedGalleryImageId(String vmSharedGalleryImageId) {
        this.innerModel().withVmSharedGalleryImageId(vmSharedGalleryImageId);
        return this;
    }

    public NodeTypeImpl withNatGatewayId(String natGatewayId) {
        this.innerModel().withNatGatewayId(natGatewayId);
        return this;
    }

    public NodeTypeImpl withNatConfigurations(List<NodeTypeNatConfig> natConfigurations) {
        this.innerModel().withNatConfigurations(natConfigurations);
        return this;
    }

    public NodeTypeImpl withVmImagePlan(VmImagePlan vmImagePlan) {
        this.innerModel().withVmImagePlan(vmImagePlan);
        return this;
    }

    public NodeTypeImpl withServiceArtifactReferenceId(String serviceArtifactReferenceId) {
        this.innerModel().withServiceArtifactReferenceId(serviceArtifactReferenceId);
        return this;
    }

    public NodeTypeImpl withDscpConfigurationId(String dscpConfigurationId) {
        this.innerModel().withDscpConfigurationId(dscpConfigurationId);
        return this;
    }

    public NodeTypeImpl withAdditionalNetworkInterfaceConfigurations(
        List<AdditionalNetworkInterfaceConfiguration> additionalNetworkInterfaceConfigurations) {
        this.innerModel().withAdditionalNetworkInterfaceConfigurations(additionalNetworkInterfaceConfigurations);
        return this;
    }

    public NodeTypeImpl withComputerNamePrefix(String computerNamePrefix) {
        this.innerModel().withComputerNamePrefix(computerNamePrefix);
        return this;
    }

    public NodeTypeImpl withVmApplications(List<VmApplication> vmApplications) {
        this.innerModel().withVmApplications(vmApplications);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
