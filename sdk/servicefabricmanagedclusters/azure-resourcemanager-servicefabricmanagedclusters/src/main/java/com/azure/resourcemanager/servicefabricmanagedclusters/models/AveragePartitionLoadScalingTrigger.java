// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a scaling trigger related to an average load of a metric/resource of a partition.
 */
@Fluent
public final class AveragePartitionLoadScalingTrigger extends ScalingTrigger {
    /*
     * Specifies the trigger associated with this scaling policy.
     */
    private ServiceScalingTriggerKind kind = ServiceScalingTriggerKind.AVERAGE_PARTITION_LOAD_TRIGGER;

    /*
     * The name of the metric for which usage should be tracked.
     */
    private String metricName;

    /*
     * The lower limit of the load below which a scale in operation should be performed.
     */
    private double lowerLoadThreshold;

    /*
     * The upper limit of the load beyond which a scale out operation should be performed.
     */
    private double upperLoadThreshold;

    /*
     * The period in seconds on which a decision is made whether to scale or not. This property should come in ISO 8601
     * format "hh:mm:ss".
     */
    private String scaleInterval;

    /**
     * Creates an instance of AveragePartitionLoadScalingTrigger class.
     */
    public AveragePartitionLoadScalingTrigger() {
    }

    /**
     * Get the kind property: Specifies the trigger associated with this scaling policy.
     * 
     * @return the kind value.
     */
    @Override
    public ServiceScalingTriggerKind kind() {
        return this.kind;
    }

    /**
     * Get the metricName property: The name of the metric for which usage should be tracked.
     * 
     * @return the metricName value.
     */
    public String metricName() {
        return this.metricName;
    }

    /**
     * Set the metricName property: The name of the metric for which usage should be tracked.
     * 
     * @param metricName the metricName value to set.
     * @return the AveragePartitionLoadScalingTrigger object itself.
     */
    public AveragePartitionLoadScalingTrigger withMetricName(String metricName) {
        this.metricName = metricName;
        return this;
    }

    /**
     * Get the lowerLoadThreshold property: The lower limit of the load below which a scale in operation should be
     * performed.
     * 
     * @return the lowerLoadThreshold value.
     */
    public double lowerLoadThreshold() {
        return this.lowerLoadThreshold;
    }

    /**
     * Set the lowerLoadThreshold property: The lower limit of the load below which a scale in operation should be
     * performed.
     * 
     * @param lowerLoadThreshold the lowerLoadThreshold value to set.
     * @return the AveragePartitionLoadScalingTrigger object itself.
     */
    public AveragePartitionLoadScalingTrigger withLowerLoadThreshold(double lowerLoadThreshold) {
        this.lowerLoadThreshold = lowerLoadThreshold;
        return this;
    }

    /**
     * Get the upperLoadThreshold property: The upper limit of the load beyond which a scale out operation should be
     * performed.
     * 
     * @return the upperLoadThreshold value.
     */
    public double upperLoadThreshold() {
        return this.upperLoadThreshold;
    }

    /**
     * Set the upperLoadThreshold property: The upper limit of the load beyond which a scale out operation should be
     * performed.
     * 
     * @param upperLoadThreshold the upperLoadThreshold value to set.
     * @return the AveragePartitionLoadScalingTrigger object itself.
     */
    public AveragePartitionLoadScalingTrigger withUpperLoadThreshold(double upperLoadThreshold) {
        this.upperLoadThreshold = upperLoadThreshold;
        return this;
    }

    /**
     * Get the scaleInterval property: The period in seconds on which a decision is made whether to scale or not. This
     * property should come in ISO 8601 format "hh:mm:ss".
     * 
     * @return the scaleInterval value.
     */
    public String scaleInterval() {
        return this.scaleInterval;
    }

    /**
     * Set the scaleInterval property: The period in seconds on which a decision is made whether to scale or not. This
     * property should come in ISO 8601 format "hh:mm:ss".
     * 
     * @param scaleInterval the scaleInterval value to set.
     * @return the AveragePartitionLoadScalingTrigger object itself.
     */
    public AveragePartitionLoadScalingTrigger withScaleInterval(String scaleInterval) {
        this.scaleInterval = scaleInterval;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (metricName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property metricName in model AveragePartitionLoadScalingTrigger"));
        }
        if (scaleInterval() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property scaleInterval in model AveragePartitionLoadScalingTrigger"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AveragePartitionLoadScalingTrigger.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("metricName", this.metricName);
        jsonWriter.writeDoubleField("lowerLoadThreshold", this.lowerLoadThreshold);
        jsonWriter.writeDoubleField("upperLoadThreshold", this.upperLoadThreshold);
        jsonWriter.writeStringField("scaleInterval", this.scaleInterval);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AveragePartitionLoadScalingTrigger from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AveragePartitionLoadScalingTrigger if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AveragePartitionLoadScalingTrigger.
     */
    public static AveragePartitionLoadScalingTrigger fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AveragePartitionLoadScalingTrigger deserializedAveragePartitionLoadScalingTrigger
                = new AveragePartitionLoadScalingTrigger();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("metricName".equals(fieldName)) {
                    deserializedAveragePartitionLoadScalingTrigger.metricName = reader.getString();
                } else if ("lowerLoadThreshold".equals(fieldName)) {
                    deserializedAveragePartitionLoadScalingTrigger.lowerLoadThreshold = reader.getDouble();
                } else if ("upperLoadThreshold".equals(fieldName)) {
                    deserializedAveragePartitionLoadScalingTrigger.upperLoadThreshold = reader.getDouble();
                } else if ("scaleInterval".equals(fieldName)) {
                    deserializedAveragePartitionLoadScalingTrigger.scaleInterval = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    deserializedAveragePartitionLoadScalingTrigger.kind
                        = ServiceScalingTriggerKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAveragePartitionLoadScalingTrigger;
        });
    }
}
