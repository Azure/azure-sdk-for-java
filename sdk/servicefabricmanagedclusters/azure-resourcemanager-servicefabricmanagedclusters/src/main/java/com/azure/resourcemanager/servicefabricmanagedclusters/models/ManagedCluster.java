// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.ManagedClusterInner;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of ManagedCluster.
 */
public interface ManagedCluster {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the sku property: The sku of the managed cluster.
     * 
     * @return the sku value.
     */
    Sku sku();

    /**
     * Gets the etag property: Azure resource etag.
     * 
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the systemData property: Metadata pertaining to creation and last modification of the resource.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the dnsName property: The cluster dns name.
     * 
     * @return the dnsName value.
     */
    String dnsName();

    /**
     * Gets the fqdn property: The fully qualified domain name associated with the public load balancer of the cluster.
     * 
     * @return the fqdn value.
     */
    String fqdn();

    /**
     * Gets the ipv4Address property: The IPv4 address associated with the public load balancer of the cluster.
     * 
     * @return the ipv4Address value.
     */
    String ipv4Address();

    /**
     * Gets the clusterId property: A service generated unique identifier for the cluster resource.
     * 
     * @return the clusterId value.
     */
    String clusterId();

    /**
     * Gets the clusterState property: The current state of the cluster.
     * 
     * @return the clusterState value.
     */
    ClusterState clusterState();

    /**
     * Gets the clusterCertificateThumbprints property: List of thumbprints of the cluster certificates.
     * 
     * @return the clusterCertificateThumbprints value.
     */
    List<String> clusterCertificateThumbprints();

    /**
     * Gets the clientConnectionPort property: The port used for client connections to the cluster.
     * 
     * @return the clientConnectionPort value.
     */
    Integer clientConnectionPort();

    /**
     * Gets the httpGatewayConnectionPort property: The port used for HTTP connections to the cluster.
     * 
     * @return the httpGatewayConnectionPort value.
     */
    Integer httpGatewayConnectionPort();

    /**
     * Gets the adminUsername property: VM admin user name.
     * 
     * @return the adminUsername value.
     */
    String adminUsername();

    /**
     * Gets the adminPassword property: VM admin user password.
     * 
     * @return the adminPassword value.
     */
    String adminPassword();

    /**
     * Gets the loadBalancingRules property: Load balancing rules that are applied to the public load balancer of the
     * cluster.
     * 
     * @return the loadBalancingRules value.
     */
    List<LoadBalancingRule> loadBalancingRules();

    /**
     * Gets the allowRdpAccess property: Setting this to true enables RDP access to the VM. The default NSG rule opens
     * RDP port to Internet which can be overridden with custom Network Security Rules. The default value for this
     * setting is false.
     * 
     * @return the allowRdpAccess value.
     */
    Boolean allowRdpAccess();

    /**
     * Gets the networkSecurityRules property: Custom Network Security Rules that are applied to the Virtual Network of
     * the cluster.
     * 
     * @return the networkSecurityRules value.
     */
    List<NetworkSecurityRule> networkSecurityRules();

    /**
     * Gets the clients property: Client certificates that are allowed to manage the cluster.
     * 
     * @return the clients value.
     */
    List<ClientCertificate> clients();

    /**
     * Gets the azureActiveDirectory property: The AAD authentication settings of the cluster.
     * 
     * @return the azureActiveDirectory value.
     */
    AzureActiveDirectory azureActiveDirectory();

    /**
     * Gets the fabricSettings property: The list of custom fabric settings to configure the cluster.
     * 
     * @return the fabricSettings value.
     */
    List<SettingsSectionDescription> fabricSettings();

    /**
     * Gets the provisioningState property: The provisioning state of the managed cluster resource.
     * 
     * @return the provisioningState value.
     */
    ManagedResourceProvisioningState provisioningState();

    /**
     * Gets the clusterCodeVersion property: The Service Fabric runtime version of the cluster. This property is
     * required when **clusterUpgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new
     * clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing
     * clusters use **availableClusterVersions**.
     * 
     * @return the clusterCodeVersion value.
     */
    String clusterCodeVersion();

    /**
     * Gets the clusterUpgradeMode property: The upgrade mode of the cluster when new Service Fabric runtime version is
     * available.
     * 
     * @return the clusterUpgradeMode value.
     */
    ClusterUpgradeMode clusterUpgradeMode();

    /**
     * Gets the clusterUpgradeCadence property: Indicates when new cluster runtime version upgrades will be applied
     * after they are released. By default is Wave0. Only applies when **clusterUpgradeMode** is set to 'Automatic'.
     * 
     * @return the clusterUpgradeCadence value.
     */
    ClusterUpgradeCadence clusterUpgradeCadence();

    /**
     * Gets the addonFeatures property: List of add-on features to enable on the cluster.
     * 
     * @return the addonFeatures value.
     */
    List<ManagedClusterAddOnFeature> addonFeatures();

    /**
     * Gets the enableAutoOSUpgrade property: Setting this to true enables automatic OS upgrade for the node types that
     * are created using any platform OS image with version 'latest'. The default value for this setting is false.
     * 
     * @return the enableAutoOSUpgrade value.
     */
    Boolean enableAutoOSUpgrade();

    /**
     * Gets the zonalResiliency property: Indicates if the cluster has zone resiliency.
     * 
     * @return the zonalResiliency value.
     */
    Boolean zonalResiliency();

    /**
     * Gets the applicationTypeVersionsCleanupPolicy property: The policy used to clean up unused versions.
     * 
     * @return the applicationTypeVersionsCleanupPolicy value.
     */
    ApplicationTypeVersionsCleanupPolicy applicationTypeVersionsCleanupPolicy();

    /**
     * Gets the enableIpv6 property: Setting this to true creates IPv6 address space for the default VNet used by the
     * cluster. This setting cannot be changed once the cluster is created. The default value for this setting is false.
     * 
     * @return the enableIpv6 value.
     */
    Boolean enableIpv6();

    /**
     * Gets the subnetId property: If specified, the node types for the cluster are created in this subnet instead of
     * the default VNet. The **networkSecurityRules** specified for the cluster are also applied to this subnet. This
     * setting cannot be changed once the cluster is created.
     * 
     * @return the subnetId value.
     */
    String subnetId();

    /**
     * Gets the ipTags property: The list of IP tags associated with the default public IP address of the cluster.
     * 
     * @return the ipTags value.
     */
    List<IpTag> ipTags();

    /**
     * Gets the ipv6Address property: IPv6 address for the cluster if IPv6 is enabled.
     * 
     * @return the ipv6Address value.
     */
    String ipv6Address();

    /**
     * Gets the enableServicePublicIp property: Setting this to true will link the IPv4 address as the ServicePublicIP
     * of the IPv6 address. It can only be set to True if IPv6 is enabled on the cluster.
     * 
     * @return the enableServicePublicIp value.
     */
    Boolean enableServicePublicIp();

    /**
     * Gets the auxiliarySubnets property: Auxiliary subnets for the cluster.
     * 
     * @return the auxiliarySubnets value.
     */
    List<Subnet> auxiliarySubnets();

    /**
     * Gets the serviceEndpoints property: Service endpoints for subnets in the cluster.
     * 
     * @return the serviceEndpoints value.
     */
    List<ServiceEndpoint> serviceEndpoints();

    /**
     * Gets the zonalUpdateMode property: Indicates the update mode for Cross Az clusters.
     * 
     * @return the zonalUpdateMode value.
     */
    ZonalUpdateMode zonalUpdateMode();

    /**
     * Gets the useCustomVnet property: For new clusters, this parameter indicates that it uses Bring your own VNet, but
     * the subnet is specified at node type level; and for such clusters, the subnetId property is required for node
     * types.
     * 
     * @return the useCustomVnet value.
     */
    Boolean useCustomVnet();

    /**
     * Gets the publicIpPrefixId property: Specify the resource id of a public IPv4 prefix that the load balancer will
     * allocate a public IPv4 address from. This setting cannot be changed once the cluster is created.
     * 
     * @return the publicIpPrefixId value.
     */
    String publicIpPrefixId();

    /**
     * Gets the publicIPv6PrefixId property: Specify the resource id of a public IPv6 prefix that the load balancer will
     * allocate a public IPv6 address from. This setting cannot be changed once the cluster is created.
     * 
     * @return the publicIPv6PrefixId value.
     */
    String publicIPv6PrefixId();

    /**
     * Gets the ddosProtectionPlanId property: Specify the resource id of a DDoS network protection plan that will be
     * associated with the virtual network of the cluster.
     * 
     * @return the ddosProtectionPlanId value.
     */
    String ddosProtectionPlanId();

    /**
     * Gets the upgradeDescription property: The policy to use when upgrading the cluster.
     * 
     * @return the upgradeDescription value.
     */
    ClusterUpgradePolicy upgradeDescription();

    /**
     * Gets the httpGatewayTokenAuthConnectionPort property: The port used for token-auth based HTTPS connections to the
     * cluster. Cannot be set to the same port as HttpGatewayEndpoint.
     * 
     * @return the httpGatewayTokenAuthConnectionPort value.
     */
    Integer httpGatewayTokenAuthConnectionPort();

    /**
     * Gets the enableHttpGatewayExclusiveAuthMode property: If true, token-based authentication is not allowed on the
     * HttpGatewayEndpoint. This is required to support TLS versions 1.3 and above. If token-based authentication is
     * used, HttpGatewayTokenAuthConnectionPort must be defined.
     * 
     * @return the enableHttpGatewayExclusiveAuthMode value.
     */
    Boolean enableHttpGatewayExclusiveAuthMode();

    /**
     * Gets the autoGeneratedDomainNameLabelScope property: This property is the entry point to using a public CA cert
     * for your cluster cert. It specifies the level of reuse allowed for the custom FQDN created, matching the subject
     * of the public CA cert.
     * 
     * @return the autoGeneratedDomainNameLabelScope value.
     */
    AutoGeneratedDomainNameLabelScope autoGeneratedDomainNameLabelScope();

    /**
     * Gets the customFqdn property: If using autoGeneratedDomainNameLabelScope, this is the fully qualified domain name
     * using SFMC's domain, pointing to the public load balancer of the cluster.
     * 
     * @return the customFqdn value.
     */
    String customFqdn();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.ManagedClusterInner object.
     * 
     * @return the inner object.
     */
    ManagedClusterInner innerModel();

    /**
     * The entirety of the ManagedCluster definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithResourceGroup, DefinitionStages.WithSku, DefinitionStages.WithCreate {
    }

    /**
     * The ManagedCluster definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the ManagedCluster definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify parent resource.
         */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             * 
             * @param resourceGroupName The name of the resource group.
             * @return the next definition stage.
             */
            WithSku withExistingResourceGroup(String resourceGroupName);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify sku.
         */
        interface WithSku {
            /**
             * Specifies the sku property: The sku of the managed cluster.
             * 
             * @param sku The sku of the managed cluster.
             * @return the next definition stage.
             */
            WithCreate withSku(Sku sku);
        }

        /**
         * The stage of the ManagedCluster definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags, DefinitionStages.WithDnsName, DefinitionStages.WithClientConnectionPort,
            DefinitionStages.WithHttpGatewayConnectionPort, DefinitionStages.WithAdminUsername,
            DefinitionStages.WithAdminPassword, DefinitionStages.WithLoadBalancingRules,
            DefinitionStages.WithAllowRdpAccess, DefinitionStages.WithNetworkSecurityRules,
            DefinitionStages.WithClients, DefinitionStages.WithAzureActiveDirectory,
            DefinitionStages.WithFabricSettings, DefinitionStages.WithClusterCodeVersion,
            DefinitionStages.WithClusterUpgradeMode, DefinitionStages.WithClusterUpgradeCadence,
            DefinitionStages.WithAddonFeatures, DefinitionStages.WithEnableAutoOSUpgrade,
            DefinitionStages.WithZonalResiliency, DefinitionStages.WithApplicationTypeVersionsCleanupPolicy,
            DefinitionStages.WithEnableIpv6, DefinitionStages.WithSubnetId, DefinitionStages.WithIpTags,
            DefinitionStages.WithEnableServicePublicIp, DefinitionStages.WithAuxiliarySubnets,
            DefinitionStages.WithServiceEndpoints, DefinitionStages.WithZonalUpdateMode,
            DefinitionStages.WithUseCustomVnet, DefinitionStages.WithPublicIpPrefixId,
            DefinitionStages.WithPublicIPv6PrefixId, DefinitionStages.WithDdosProtectionPlanId,
            DefinitionStages.WithUpgradeDescription, DefinitionStages.WithHttpGatewayTokenAuthConnectionPort,
            DefinitionStages.WithEnableHttpGatewayExclusiveAuthMode,
            DefinitionStages.WithAutoGeneratedDomainNameLabelScope, DefinitionStages.WithCustomFqdn {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            ManagedCluster create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ManagedCluster create(Context context);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify dnsName.
         */
        interface WithDnsName {
            /**
             * Specifies the dnsName property: The cluster dns name..
             * 
             * @param dnsName The cluster dns name.
             * @return the next definition stage.
             */
            WithCreate withDnsName(String dnsName);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify clientConnectionPort.
         */
        interface WithClientConnectionPort {
            /**
             * Specifies the clientConnectionPort property: The port used for client connections to the cluster..
             * 
             * @param clientConnectionPort The port used for client connections to the cluster.
             * @return the next definition stage.
             */
            WithCreate withClientConnectionPort(Integer clientConnectionPort);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify httpGatewayConnectionPort.
         */
        interface WithHttpGatewayConnectionPort {
            /**
             * Specifies the httpGatewayConnectionPort property: The port used for HTTP connections to the cluster..
             * 
             * @param httpGatewayConnectionPort The port used for HTTP connections to the cluster.
             * @return the next definition stage.
             */
            WithCreate withHttpGatewayConnectionPort(Integer httpGatewayConnectionPort);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify adminUsername.
         */
        interface WithAdminUsername {
            /**
             * Specifies the adminUsername property: VM admin user name..
             * 
             * @param adminUsername VM admin user name.
             * @return the next definition stage.
             */
            WithCreate withAdminUsername(String adminUsername);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify adminPassword.
         */
        interface WithAdminPassword {
            /**
             * Specifies the adminPassword property: VM admin user password..
             * 
             * @param adminPassword VM admin user password.
             * @return the next definition stage.
             */
            WithCreate withAdminPassword(String adminPassword);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify loadBalancingRules.
         */
        interface WithLoadBalancingRules {
            /**
             * Specifies the loadBalancingRules property: Load balancing rules that are applied to the public load
             * balancer of the cluster..
             * 
             * @param loadBalancingRules Load balancing rules that are applied to the public load balancer of the
             * cluster.
             * @return the next definition stage.
             */
            WithCreate withLoadBalancingRules(List<LoadBalancingRule> loadBalancingRules);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify allowRdpAccess.
         */
        interface WithAllowRdpAccess {
            /**
             * Specifies the allowRdpAccess property: Setting this to true enables RDP access to the VM. The default NSG
             * rule opens RDP port to Internet which can be overridden with custom Network Security Rules. The default
             * value for this setting is false..
             * 
             * @param allowRdpAccess Setting this to true enables RDP access to the VM. The default NSG rule opens RDP
             * port to Internet which can be overridden with custom Network Security Rules. The default value for this
             * setting is false.
             * @return the next definition stage.
             */
            WithCreate withAllowRdpAccess(Boolean allowRdpAccess);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify networkSecurityRules.
         */
        interface WithNetworkSecurityRules {
            /**
             * Specifies the networkSecurityRules property: Custom Network Security Rules that are applied to the
             * Virtual Network of the cluster..
             * 
             * @param networkSecurityRules Custom Network Security Rules that are applied to the Virtual Network of the
             * cluster.
             * @return the next definition stage.
             */
            WithCreate withNetworkSecurityRules(List<NetworkSecurityRule> networkSecurityRules);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify clients.
         */
        interface WithClients {
            /**
             * Specifies the clients property: Client certificates that are allowed to manage the cluster..
             * 
             * @param clients Client certificates that are allowed to manage the cluster.
             * @return the next definition stage.
             */
            WithCreate withClients(List<ClientCertificate> clients);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify azureActiveDirectory.
         */
        interface WithAzureActiveDirectory {
            /**
             * Specifies the azureActiveDirectory property: The AAD authentication settings of the cluster..
             * 
             * @param azureActiveDirectory The AAD authentication settings of the cluster.
             * @return the next definition stage.
             */
            WithCreate withAzureActiveDirectory(AzureActiveDirectory azureActiveDirectory);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify fabricSettings.
         */
        interface WithFabricSettings {
            /**
             * Specifies the fabricSettings property: The list of custom fabric settings to configure the cluster..
             * 
             * @param fabricSettings The list of custom fabric settings to configure the cluster.
             * @return the next definition stage.
             */
            WithCreate withFabricSettings(List<SettingsSectionDescription> fabricSettings);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify clusterCodeVersion.
         */
        interface WithClusterCodeVersion {
            /**
             * Specifies the clusterCodeVersion property: The Service Fabric runtime version of the cluster. This
             * property is required when **clusterUpgradeMode** is set to 'Manual'. To get list of available Service
             * Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of
             * available version for existing clusters use **availableClusterVersions**..
             * 
             * @param clusterCodeVersion The Service Fabric runtime version of the cluster. This property is required
             * when **clusterUpgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new
             * clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing
             * clusters use **availableClusterVersions**.
             * @return the next definition stage.
             */
            WithCreate withClusterCodeVersion(String clusterCodeVersion);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify clusterUpgradeMode.
         */
        interface WithClusterUpgradeMode {
            /**
             * Specifies the clusterUpgradeMode property: The upgrade mode of the cluster when new Service Fabric
             * runtime version is available.
             * .
             * 
             * @param clusterUpgradeMode The upgrade mode of the cluster when new Service Fabric runtime version is
             * available.
             * @return the next definition stage.
             */
            WithCreate withClusterUpgradeMode(ClusterUpgradeMode clusterUpgradeMode);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify clusterUpgradeCadence.
         */
        interface WithClusterUpgradeCadence {
            /**
             * Specifies the clusterUpgradeCadence property: Indicates when new cluster runtime version upgrades will be
             * applied after they are released. By default is Wave0. Only applies when **clusterUpgradeMode** is set to
             * 'Automatic'..
             * 
             * @param clusterUpgradeCadence Indicates when new cluster runtime version upgrades will be applied after
             * they are released. By default is Wave0. Only applies when **clusterUpgradeMode** is set to 'Automatic'.
             * @return the next definition stage.
             */
            WithCreate withClusterUpgradeCadence(ClusterUpgradeCadence clusterUpgradeCadence);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify addonFeatures.
         */
        interface WithAddonFeatures {
            /**
             * Specifies the addonFeatures property: List of add-on features to enable on the cluster..
             * 
             * @param addonFeatures List of add-on features to enable on the cluster.
             * @return the next definition stage.
             */
            WithCreate withAddonFeatures(List<ManagedClusterAddOnFeature> addonFeatures);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify enableAutoOSUpgrade.
         */
        interface WithEnableAutoOSUpgrade {
            /**
             * Specifies the enableAutoOSUpgrade property: Setting this to true enables automatic OS upgrade for the
             * node types that are created using any platform OS image with version 'latest'. The default value for this
             * setting is false..
             * 
             * @param enableAutoOSUpgrade Setting this to true enables automatic OS upgrade for the node types that are
             * created using any platform OS image with version 'latest'. The default value for this setting is false.
             * @return the next definition stage.
             */
            WithCreate withEnableAutoOSUpgrade(Boolean enableAutoOSUpgrade);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify zonalResiliency.
         */
        interface WithZonalResiliency {
            /**
             * Specifies the zonalResiliency property: Indicates if the cluster has zone resiliency..
             * 
             * @param zonalResiliency Indicates if the cluster has zone resiliency.
             * @return the next definition stage.
             */
            WithCreate withZonalResiliency(Boolean zonalResiliency);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify applicationTypeVersionsCleanupPolicy.
         */
        interface WithApplicationTypeVersionsCleanupPolicy {
            /**
             * Specifies the applicationTypeVersionsCleanupPolicy property: The policy used to clean up unused
             * versions..
             * 
             * @param applicationTypeVersionsCleanupPolicy The policy used to clean up unused versions.
             * @return the next definition stage.
             */
            WithCreate withApplicationTypeVersionsCleanupPolicy(
                ApplicationTypeVersionsCleanupPolicy applicationTypeVersionsCleanupPolicy);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify enableIpv6.
         */
        interface WithEnableIpv6 {
            /**
             * Specifies the enableIpv6 property: Setting this to true creates IPv6 address space for the default VNet
             * used by the cluster. This setting cannot be changed once the cluster is created. The default value for
             * this setting is false..
             * 
             * @param enableIpv6 Setting this to true creates IPv6 address space for the default VNet used by the
             * cluster. This setting cannot be changed once the cluster is created. The default value for this setting
             * is false.
             * @return the next definition stage.
             */
            WithCreate withEnableIpv6(Boolean enableIpv6);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify subnetId.
         */
        interface WithSubnetId {
            /**
             * Specifies the subnetId property: If specified, the node types for the cluster are created in this subnet
             * instead of the default VNet. The **networkSecurityRules** specified for the cluster are also applied to
             * this subnet. This setting cannot be changed once the cluster is created..
             * 
             * @param subnetId If specified, the node types for the cluster are created in this subnet instead of the
             * default VNet. The **networkSecurityRules** specified for the cluster are also applied to this subnet.
             * This setting cannot be changed once the cluster is created.
             * @return the next definition stage.
             */
            WithCreate withSubnetId(String subnetId);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify ipTags.
         */
        interface WithIpTags {
            /**
             * Specifies the ipTags property: The list of IP tags associated with the default public IP address of the
             * cluster..
             * 
             * @param ipTags The list of IP tags associated with the default public IP address of the cluster.
             * @return the next definition stage.
             */
            WithCreate withIpTags(List<IpTag> ipTags);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify enableServicePublicIp.
         */
        interface WithEnableServicePublicIp {
            /**
             * Specifies the enableServicePublicIp property: Setting this to true will link the IPv4 address as the
             * ServicePublicIP of the IPv6 address. It can only be set to True if IPv6 is enabled on the cluster..
             * 
             * @param enableServicePublicIp Setting this to true will link the IPv4 address as the ServicePublicIP of
             * the IPv6 address. It can only be set to True if IPv6 is enabled on the cluster.
             * @return the next definition stage.
             */
            WithCreate withEnableServicePublicIp(Boolean enableServicePublicIp);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify auxiliarySubnets.
         */
        interface WithAuxiliarySubnets {
            /**
             * Specifies the auxiliarySubnets property: Auxiliary subnets for the cluster..
             * 
             * @param auxiliarySubnets Auxiliary subnets for the cluster.
             * @return the next definition stage.
             */
            WithCreate withAuxiliarySubnets(List<Subnet> auxiliarySubnets);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify serviceEndpoints.
         */
        interface WithServiceEndpoints {
            /**
             * Specifies the serviceEndpoints property: Service endpoints for subnets in the cluster..
             * 
             * @param serviceEndpoints Service endpoints for subnets in the cluster.
             * @return the next definition stage.
             */
            WithCreate withServiceEndpoints(List<ServiceEndpoint> serviceEndpoints);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify zonalUpdateMode.
         */
        interface WithZonalUpdateMode {
            /**
             * Specifies the zonalUpdateMode property: Indicates the update mode for Cross Az clusters..
             * 
             * @param zonalUpdateMode Indicates the update mode for Cross Az clusters.
             * @return the next definition stage.
             */
            WithCreate withZonalUpdateMode(ZonalUpdateMode zonalUpdateMode);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify useCustomVnet.
         */
        interface WithUseCustomVnet {
            /**
             * Specifies the useCustomVnet property: For new clusters, this parameter indicates that it uses Bring your
             * own VNet, but the subnet is specified at node type level; and for such clusters, the subnetId property is
             * required for node types..
             * 
             * @param useCustomVnet For new clusters, this parameter indicates that it uses Bring your own VNet, but the
             * subnet is specified at node type level; and for such clusters, the subnetId property is required for node
             * types.
             * @return the next definition stage.
             */
            WithCreate withUseCustomVnet(Boolean useCustomVnet);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify publicIpPrefixId.
         */
        interface WithPublicIpPrefixId {
            /**
             * Specifies the publicIpPrefixId property: Specify the resource id of a public IPv4 prefix that the load
             * balancer will allocate a public IPv4 address from. This setting cannot be changed once the cluster is
             * created..
             * 
             * @param publicIpPrefixId Specify the resource id of a public IPv4 prefix that the load balancer will
             * allocate a public IPv4 address from. This setting cannot be changed once the cluster is created.
             * @return the next definition stage.
             */
            WithCreate withPublicIpPrefixId(String publicIpPrefixId);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify publicIPv6PrefixId.
         */
        interface WithPublicIPv6PrefixId {
            /**
             * Specifies the publicIPv6PrefixId property: Specify the resource id of a public IPv6 prefix that the load
             * balancer will allocate a public IPv6 address from. This setting cannot be changed once the cluster is
             * created..
             * 
             * @param publicIPv6PrefixId Specify the resource id of a public IPv6 prefix that the load balancer will
             * allocate a public IPv6 address from. This setting cannot be changed once the cluster is created.
             * @return the next definition stage.
             */
            WithCreate withPublicIPv6PrefixId(String publicIPv6PrefixId);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify ddosProtectionPlanId.
         */
        interface WithDdosProtectionPlanId {
            /**
             * Specifies the ddosProtectionPlanId property: Specify the resource id of a DDoS network protection plan
             * that will be associated with the virtual network of the cluster..
             * 
             * @param ddosProtectionPlanId Specify the resource id of a DDoS network protection plan that will be
             * associated with the virtual network of the cluster.
             * @return the next definition stage.
             */
            WithCreate withDdosProtectionPlanId(String ddosProtectionPlanId);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify upgradeDescription.
         */
        interface WithUpgradeDescription {
            /**
             * Specifies the upgradeDescription property: The policy to use when upgrading the cluster..
             * 
             * @param upgradeDescription The policy to use when upgrading the cluster.
             * @return the next definition stage.
             */
            WithCreate withUpgradeDescription(ClusterUpgradePolicy upgradeDescription);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify httpGatewayTokenAuthConnectionPort.
         */
        interface WithHttpGatewayTokenAuthConnectionPort {
            /**
             * Specifies the httpGatewayTokenAuthConnectionPort property: The port used for token-auth based HTTPS
             * connections to the cluster. Cannot be set to the same port as HttpGatewayEndpoint..
             * 
             * @param httpGatewayTokenAuthConnectionPort The port used for token-auth based HTTPS connections to the
             * cluster. Cannot be set to the same port as HttpGatewayEndpoint.
             * @return the next definition stage.
             */
            WithCreate withHttpGatewayTokenAuthConnectionPort(Integer httpGatewayTokenAuthConnectionPort);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify enableHttpGatewayExclusiveAuthMode.
         */
        interface WithEnableHttpGatewayExclusiveAuthMode {
            /**
             * Specifies the enableHttpGatewayExclusiveAuthMode property: If true, token-based authentication is not
             * allowed on the HttpGatewayEndpoint. This is required to support TLS versions 1.3 and above. If
             * token-based authentication is used, HttpGatewayTokenAuthConnectionPort must be defined..
             * 
             * @param enableHttpGatewayExclusiveAuthMode If true, token-based authentication is not allowed on the
             * HttpGatewayEndpoint. This is required to support TLS versions 1.3 and above. If token-based
             * authentication is used, HttpGatewayTokenAuthConnectionPort must be defined.
             * @return the next definition stage.
             */
            WithCreate withEnableHttpGatewayExclusiveAuthMode(Boolean enableHttpGatewayExclusiveAuthMode);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify autoGeneratedDomainNameLabelScope.
         */
        interface WithAutoGeneratedDomainNameLabelScope {
            /**
             * Specifies the autoGeneratedDomainNameLabelScope property: This property is the entry point to using a
             * public CA cert for your cluster cert. It specifies the level of reuse allowed for the custom FQDN
             * created, matching the subject of the public CA cert..
             * 
             * @param autoGeneratedDomainNameLabelScope This property is the entry point to using a public CA cert for
             * your cluster cert. It specifies the level of reuse allowed for the custom FQDN created, matching the
             * subject of the public CA cert.
             * @return the next definition stage.
             */
            WithCreate withAutoGeneratedDomainNameLabelScope(
                AutoGeneratedDomainNameLabelScope autoGeneratedDomainNameLabelScope);
        }

        /**
         * The stage of the ManagedCluster definition allowing to specify customFqdn.
         */
        interface WithCustomFqdn {
            /**
             * Specifies the customFqdn property: If using autoGeneratedDomainNameLabelScope, this is the fully
             * qualified domain name using SFMC's domain, pointing to the public load balancer of the cluster..
             * 
             * @param customFqdn If using autoGeneratedDomainNameLabelScope, this is the fully qualified domain name
             * using SFMC's domain, pointing to the public load balancer of the cluster.
             * @return the next definition stage.
             */
            WithCreate withCustomFqdn(String customFqdn);
        }
    }

    /**
     * Begins update for the ManagedCluster resource.
     * 
     * @return the stage of resource update.
     */
    ManagedCluster.Update update();

    /**
     * The template for ManagedCluster update.
     */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        ManagedCluster apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ManagedCluster apply(Context context);
    }

    /**
     * The ManagedCluster update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the ManagedCluster update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Managed cluster update parameters.
             * 
             * @param tags Managed cluster update parameters.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    ManagedCluster refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ManagedCluster refresh(Context context);
}
