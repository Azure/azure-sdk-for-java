// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Parameters for Node type action. If nodes are not specified on the parameters, the operation will be performed in all
 * nodes of the node type one upgrade domain at a time.
 */
@Fluent
public final class NodeTypeActionParameters implements JsonSerializable<NodeTypeActionParameters> {
    /*
     * List of node names from the node type.
     */
    private List<String> nodes;

    /*
     * Force the action to go through.
     */
    private Boolean force;

    /*
     * Specifies the way the operation will be performed.
     */
    private UpdateType updateType;

    /**
     * Creates an instance of NodeTypeActionParameters class.
     */
    public NodeTypeActionParameters() {
    }

    /**
     * Get the nodes property: List of node names from the node type.
     * 
     * @return the nodes value.
     */
    public List<String> nodes() {
        return this.nodes;
    }

    /**
     * Set the nodes property: List of node names from the node type.
     * 
     * @param nodes the nodes value to set.
     * @return the NodeTypeActionParameters object itself.
     */
    public NodeTypeActionParameters withNodes(List<String> nodes) {
        this.nodes = nodes;
        return this;
    }

    /**
     * Get the force property: Force the action to go through.
     * 
     * @return the force value.
     */
    public Boolean force() {
        return this.force;
    }

    /**
     * Set the force property: Force the action to go through.
     * 
     * @param force the force value to set.
     * @return the NodeTypeActionParameters object itself.
     */
    public NodeTypeActionParameters withForce(Boolean force) {
        this.force = force;
        return this;
    }

    /**
     * Get the updateType property: Specifies the way the operation will be performed.
     * 
     * @return the updateType value.
     */
    public UpdateType updateType() {
        return this.updateType;
    }

    /**
     * Set the updateType property: Specifies the way the operation will be performed.
     * 
     * @param updateType the updateType value to set.
     * @return the NodeTypeActionParameters object itself.
     */
    public NodeTypeActionParameters withUpdateType(UpdateType updateType) {
        this.updateType = updateType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("nodes", this.nodes, (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("force", this.force);
        jsonWriter.writeStringField("updateType", this.updateType == null ? null : this.updateType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NodeTypeActionParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NodeTypeActionParameters if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NodeTypeActionParameters.
     */
    public static NodeTypeActionParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NodeTypeActionParameters deserializedNodeTypeActionParameters = new NodeTypeActionParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nodes".equals(fieldName)) {
                    List<String> nodes = reader.readArray(reader1 -> reader1.getString());
                    deserializedNodeTypeActionParameters.nodes = nodes;
                } else if ("force".equals(fieldName)) {
                    deserializedNodeTypeActionParameters.force = reader.getNullable(JsonReader::getBoolean);
                } else if ("updateType".equals(fieldName)) {
                    deserializedNodeTypeActionParameters.updateType = UpdateType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNodeTypeActionParameters;
        });
    }
}
