// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.ApplicationResourceInner;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUpdateParameters;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RuntimeResumeApplicationUpgradeParameters;

/**
 * An instance of this class provides access to all the operations defined in ApplicationsClient.
 */
public interface ApplicationsClient {
    /**
     * Get the status of the latest application upgrade.
     * 
     * Get the status of the latest application upgrade. It will query the cluster to find the status of the latest
     * application upgrade.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the status of the latest application upgrade.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginReadUpgrade(String resourceGroupName, String clusterName,
        String applicationName);

    /**
     * Get the status of the latest application upgrade.
     * 
     * Get the status of the latest application upgrade. It will query the cluster to find the status of the latest
     * application upgrade.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the status of the latest application upgrade.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginReadUpgrade(String resourceGroupName, String clusterName,
        String applicationName, Context context);

    /**
     * Get the status of the latest application upgrade.
     * 
     * Get the status of the latest application upgrade. It will query the cluster to find the status of the latest
     * application upgrade.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void readUpgrade(String resourceGroupName, String clusterName, String applicationName);

    /**
     * Get the status of the latest application upgrade.
     * 
     * Get the status of the latest application upgrade. It will query the cluster to find the status of the latest
     * application upgrade.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void readUpgrade(String resourceGroupName, String clusterName, String applicationName, Context context);

    /**
     * Send a request to start a rollback of the current application upgrade.
     * 
     * Send a request to start a rollback of the current application upgrade. This will start rolling back the
     * application to the previous version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginStartRollback(String resourceGroupName, String clusterName,
        String applicationName);

    /**
     * Send a request to start a rollback of the current application upgrade.
     * 
     * Send a request to start a rollback of the current application upgrade. This will start rolling back the
     * application to the previous version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginStartRollback(String resourceGroupName, String clusterName,
        String applicationName, Context context);

    /**
     * Send a request to start a rollback of the current application upgrade.
     * 
     * Send a request to start a rollback of the current application upgrade. This will start rolling back the
     * application to the previous version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void startRollback(String resourceGroupName, String clusterName, String applicationName);

    /**
     * Send a request to start a rollback of the current application upgrade.
     * 
     * Send a request to start a rollback of the current application upgrade. This will start rolling back the
     * application to the previous version.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void startRollback(String resourceGroupName, String clusterName, String applicationName, Context context);

    /**
     * Send a request to resume the current application upgrade.
     * 
     * Send a request to resume the current application upgrade. This will resume the application upgrade from where it
     * was paused.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The parameters for resuming an application upgrade.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginResumeUpgrade(String resourceGroupName, String clusterName,
        String applicationName, RuntimeResumeApplicationUpgradeParameters parameters);

    /**
     * Send a request to resume the current application upgrade.
     * 
     * Send a request to resume the current application upgrade. This will resume the application upgrade from where it
     * was paused.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The parameters for resuming an application upgrade.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginResumeUpgrade(String resourceGroupName, String clusterName,
        String applicationName, RuntimeResumeApplicationUpgradeParameters parameters, Context context);

    /**
     * Send a request to resume the current application upgrade.
     * 
     * Send a request to resume the current application upgrade. This will resume the application upgrade from where it
     * was paused.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The parameters for resuming an application upgrade.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void resumeUpgrade(String resourceGroupName, String clusterName, String applicationName,
        RuntimeResumeApplicationUpgradeParameters parameters);

    /**
     * Send a request to resume the current application upgrade.
     * 
     * Send a request to resume the current application upgrade. This will resume the application upgrade from where it
     * was paused.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The parameters for resuming an application upgrade.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void resumeUpgrade(String resourceGroupName, String clusterName, String applicationName,
        RuntimeResumeApplicationUpgradeParameters parameters, Context context);

    /**
     * Gets a Service Fabric managed application resource.
     * 
     * Get a Service Fabric managed application resource created or in the process of being created in the Service
     * Fabric cluster resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Service Fabric managed application resource created or in the process of being created in the Service
     * Fabric cluster resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ApplicationResourceInner> getWithResponse(String resourceGroupName, String clusterName,
        String applicationName, Context context);

    /**
     * Gets a Service Fabric managed application resource.
     * 
     * Get a Service Fabric managed application resource created or in the process of being created in the Service
     * Fabric cluster resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Service Fabric managed application resource created or in the process of being created in the Service
     * Fabric cluster resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ApplicationResourceInner get(String resourceGroupName, String clusterName, String applicationName);

    /**
     * Creates or updates a Service Fabric managed application resource.
     * 
     * Create or update a Service Fabric managed application resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the application resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ApplicationResourceInner>, ApplicationResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String clusterName, String applicationName, ApplicationResourceInner parameters);

    /**
     * Creates or updates a Service Fabric managed application resource.
     * 
     * Create or update a Service Fabric managed application resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the application resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ApplicationResourceInner>, ApplicationResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String clusterName, String applicationName, ApplicationResourceInner parameters,
        Context context);

    /**
     * Creates or updates a Service Fabric managed application resource.
     * 
     * Create or update a Service Fabric managed application resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the application resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ApplicationResourceInner createOrUpdate(String resourceGroupName, String clusterName, String applicationName,
        ApplicationResourceInner parameters);

    /**
     * Creates or updates a Service Fabric managed application resource.
     * 
     * Create or update a Service Fabric managed application resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the application resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ApplicationResourceInner createOrUpdate(String resourceGroupName, String clusterName, String applicationName,
        ApplicationResourceInner parameters, Context context);

    /**
     * Updates the tags of an application resource of a given managed cluster.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource updated tags.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the application resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ApplicationResourceInner> updateWithResponse(String resourceGroupName, String clusterName,
        String applicationName, ApplicationUpdateParameters parameters, Context context);

    /**
     * Updates the tags of an application resource of a given managed cluster.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param parameters The application resource updated tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the application resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ApplicationResourceInner update(String resourceGroupName, String clusterName, String applicationName,
        ApplicationUpdateParameters parameters);

    /**
     * Deletes a Service Fabric managed application resource.
     * 
     * Delete a Service Fabric managed application resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String clusterName,
        String applicationName);

    /**
     * Deletes a Service Fabric managed application resource.
     * 
     * Delete a Service Fabric managed application resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String clusterName, String applicationName,
        Context context);

    /**
     * Deletes a Service Fabric managed application resource.
     * 
     * Delete a Service Fabric managed application resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String clusterName, String applicationName);

    /**
     * Deletes a Service Fabric managed application resource.
     * 
     * Delete a Service Fabric managed application resource with the specified name.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param applicationName The name of the application resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String clusterName, String applicationName, Context context);

    /**
     * Gets the list of managed application resources created in the specified Service Fabric cluster resource.
     * 
     * Gets all managed application resources created or in the process of being created in the Service Fabric cluster
     * resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all managed application resources created or in the process of being created in the Service Fabric
     * cluster resource as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ApplicationResourceInner> list(String resourceGroupName, String clusterName);

    /**
     * Gets the list of managed application resources created in the specified Service Fabric cluster resource.
     * 
     * Gets all managed application resources created or in the process of being created in the Service Fabric cluster
     * resource.
     * 
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all managed application resources created or in the process of being created in the Service Fabric
     * cluster resource as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ApplicationResourceInner> list(String resourceGroupName, String clusterName, Context context);
}
