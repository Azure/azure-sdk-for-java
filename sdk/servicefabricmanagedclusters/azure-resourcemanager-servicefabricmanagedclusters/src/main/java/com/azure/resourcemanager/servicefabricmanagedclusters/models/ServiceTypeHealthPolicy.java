// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the health policy used to evaluate the health of services belonging to a service type.
 */
@Fluent
public final class ServiceTypeHealthPolicy implements JsonSerializable<ServiceTypeHealthPolicy> {
    /*
     * The maximum allowed percentage of unhealthy services.
     * 
     * The percentage represents the maximum tolerated percentage of services that can be unhealthy before the
     * application is considered in error.
     * If the percentage is respected but there is at least one unhealthy service, the health is evaluated as Warning.
     * This is calculated by dividing the number of unhealthy services of the specific service type over the total
     * number of services of the specific service type.
     * The computation rounds up to tolerate one failure on small numbers of services.
     */
    private int maxPercentUnhealthyServices;

    /*
     * The maximum allowed percentage of unhealthy partitions per service.
     * 
     * The percentage represents the maximum tolerated percentage of partitions that can be unhealthy before the service
     * is considered in error.
     * If the percentage is respected but there is at least one unhealthy partition, the health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy partitions over the total number of partitions
     * in the service.
     * The computation rounds up to tolerate one failure on small numbers of partitions.
     */
    private int maxPercentUnhealthyPartitionsPerService;

    /*
     * The maximum allowed percentage of unhealthy replicas per partition.
     * 
     * The percentage represents the maximum tolerated percentage of replicas that can be unhealthy before the partition
     * is considered in error.
     * If the percentage is respected but there is at least one unhealthy replica, the health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy replicas over the total number of replicas in
     * the partition.
     * The computation rounds up to tolerate one failure on small numbers of replicas.
     */
    private int maxPercentUnhealthyReplicasPerPartition;

    /**
     * Creates an instance of ServiceTypeHealthPolicy class.
     */
    public ServiceTypeHealthPolicy() {
    }

    /**
     * Get the maxPercentUnhealthyServices property: The maximum allowed percentage of unhealthy services.
     * 
     * The percentage represents the maximum tolerated percentage of services that can be unhealthy before the
     * application is considered in error.
     * If the percentage is respected but there is at least one unhealthy service, the health is evaluated as Warning.
     * This is calculated by dividing the number of unhealthy services of the specific service type over the total
     * number of services of the specific service type.
     * The computation rounds up to tolerate one failure on small numbers of services.
     * 
     * @return the maxPercentUnhealthyServices value.
     */
    public int maxPercentUnhealthyServices() {
        return this.maxPercentUnhealthyServices;
    }

    /**
     * Set the maxPercentUnhealthyServices property: The maximum allowed percentage of unhealthy services.
     * 
     * The percentage represents the maximum tolerated percentage of services that can be unhealthy before the
     * application is considered in error.
     * If the percentage is respected but there is at least one unhealthy service, the health is evaluated as Warning.
     * This is calculated by dividing the number of unhealthy services of the specific service type over the total
     * number of services of the specific service type.
     * The computation rounds up to tolerate one failure on small numbers of services.
     * 
     * @param maxPercentUnhealthyServices the maxPercentUnhealthyServices value to set.
     * @return the ServiceTypeHealthPolicy object itself.
     */
    public ServiceTypeHealthPolicy withMaxPercentUnhealthyServices(int maxPercentUnhealthyServices) {
        this.maxPercentUnhealthyServices = maxPercentUnhealthyServices;
        return this;
    }

    /**
     * Get the maxPercentUnhealthyPartitionsPerService property: The maximum allowed percentage of unhealthy partitions
     * per service.
     * 
     * The percentage represents the maximum tolerated percentage of partitions that can be unhealthy before the service
     * is considered in error.
     * If the percentage is respected but there is at least one unhealthy partition, the health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy partitions over the total number of partitions
     * in the service.
     * The computation rounds up to tolerate one failure on small numbers of partitions.
     * 
     * @return the maxPercentUnhealthyPartitionsPerService value.
     */
    public int maxPercentUnhealthyPartitionsPerService() {
        return this.maxPercentUnhealthyPartitionsPerService;
    }

    /**
     * Set the maxPercentUnhealthyPartitionsPerService property: The maximum allowed percentage of unhealthy partitions
     * per service.
     * 
     * The percentage represents the maximum tolerated percentage of partitions that can be unhealthy before the service
     * is considered in error.
     * If the percentage is respected but there is at least one unhealthy partition, the health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy partitions over the total number of partitions
     * in the service.
     * The computation rounds up to tolerate one failure on small numbers of partitions.
     * 
     * @param maxPercentUnhealthyPartitionsPerService the maxPercentUnhealthyPartitionsPerService value to set.
     * @return the ServiceTypeHealthPolicy object itself.
     */
    public ServiceTypeHealthPolicy
        withMaxPercentUnhealthyPartitionsPerService(int maxPercentUnhealthyPartitionsPerService) {
        this.maxPercentUnhealthyPartitionsPerService = maxPercentUnhealthyPartitionsPerService;
        return this;
    }

    /**
     * Get the maxPercentUnhealthyReplicasPerPartition property: The maximum allowed percentage of unhealthy replicas
     * per partition.
     * 
     * The percentage represents the maximum tolerated percentage of replicas that can be unhealthy before the partition
     * is considered in error.
     * If the percentage is respected but there is at least one unhealthy replica, the health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy replicas over the total number of replicas in
     * the partition.
     * The computation rounds up to tolerate one failure on small numbers of replicas.
     * 
     * @return the maxPercentUnhealthyReplicasPerPartition value.
     */
    public int maxPercentUnhealthyReplicasPerPartition() {
        return this.maxPercentUnhealthyReplicasPerPartition;
    }

    /**
     * Set the maxPercentUnhealthyReplicasPerPartition property: The maximum allowed percentage of unhealthy replicas
     * per partition.
     * 
     * The percentage represents the maximum tolerated percentage of replicas that can be unhealthy before the partition
     * is considered in error.
     * If the percentage is respected but there is at least one unhealthy replica, the health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy replicas over the total number of replicas in
     * the partition.
     * The computation rounds up to tolerate one failure on small numbers of replicas.
     * 
     * @param maxPercentUnhealthyReplicasPerPartition the maxPercentUnhealthyReplicasPerPartition value to set.
     * @return the ServiceTypeHealthPolicy object itself.
     */
    public ServiceTypeHealthPolicy
        withMaxPercentUnhealthyReplicasPerPartition(int maxPercentUnhealthyReplicasPerPartition) {
        this.maxPercentUnhealthyReplicasPerPartition = maxPercentUnhealthyReplicasPerPartition;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("maxPercentUnhealthyServices", this.maxPercentUnhealthyServices);
        jsonWriter.writeIntField("maxPercentUnhealthyPartitionsPerService",
            this.maxPercentUnhealthyPartitionsPerService);
        jsonWriter.writeIntField("maxPercentUnhealthyReplicasPerPartition",
            this.maxPercentUnhealthyReplicasPerPartition);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceTypeHealthPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceTypeHealthPolicy if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ServiceTypeHealthPolicy.
     */
    public static ServiceTypeHealthPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceTypeHealthPolicy deserializedServiceTypeHealthPolicy = new ServiceTypeHealthPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maxPercentUnhealthyServices".equals(fieldName)) {
                    deserializedServiceTypeHealthPolicy.maxPercentUnhealthyServices = reader.getInt();
                } else if ("maxPercentUnhealthyPartitionsPerService".equals(fieldName)) {
                    deserializedServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService = reader.getInt();
                } else if ("maxPercentUnhealthyReplicasPerPartition".equals(fieldName)) {
                    deserializedServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceTypeHealthPolicy;
        });
    }
}
