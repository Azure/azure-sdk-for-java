// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.FaultSimulationInner;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.FaultSimulationListResultInner;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.NodeTypeInner;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FaultSimulationContentWrapper;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FaultSimulationIdContent;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.NodeTypeActionParameters;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.NodeTypeUpdateParameters;

/**
 * An instance of this class provides access to all the operations defined in NodeTypesClient.
 */
public interface NodeTypesClient {
    /**
     * Get a Service Fabric node type of a given managed cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Service Fabric node type of a given managed cluster along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<NodeTypeInner> getWithResponse(String resourceGroupName, String clusterName, String nodeTypeName,
        Context context);

    /**
     * Get a Service Fabric node type of a given managed cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Service Fabric node type of a given managed cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NodeTypeInner get(String resourceGroupName, String clusterName, String nodeTypeName);

    /**
     * Create or update a Service Fabric node type of a given managed cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The node type resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a node type in the cluster, each node type represents sub
     * set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NodeTypeInner>, NodeTypeInner> beginCreateOrUpdate(String resourceGroupName,
        String clusterName, String nodeTypeName, NodeTypeInner parameters);

    /**
     * Create or update a Service Fabric node type of a given managed cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The node type resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a node type in the cluster, each node type represents sub
     * set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NodeTypeInner>, NodeTypeInner> beginCreateOrUpdate(String resourceGroupName,
        String clusterName, String nodeTypeName, NodeTypeInner parameters, Context context);

    /**
     * Create or update a Service Fabric node type of a given managed cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The node type resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NodeTypeInner createOrUpdate(String resourceGroupName, String clusterName, String nodeTypeName,
        NodeTypeInner parameters);

    /**
     * Create or update a Service Fabric node type of a given managed cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The node type resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NodeTypeInner createOrUpdate(String resourceGroupName, String clusterName, String nodeTypeName,
        NodeTypeInner parameters, Context context);

    /**
     * Update the configuration of a node type of a given managed cluster, only updating tags.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The parameters to update the node type configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a node type in the cluster, each node type represents sub
     * set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NodeTypeInner>, NodeTypeInner> beginUpdate(String resourceGroupName, String clusterName,
        String nodeTypeName, NodeTypeUpdateParameters parameters);

    /**
     * Update the configuration of a node type of a given managed cluster, only updating tags.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The parameters to update the node type configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a node type in the cluster, each node type represents sub
     * set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<NodeTypeInner>, NodeTypeInner> beginUpdate(String resourceGroupName, String clusterName,
        String nodeTypeName, NodeTypeUpdateParameters parameters, Context context);

    /**
     * Update the configuration of a node type of a given managed cluster, only updating tags.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The parameters to update the node type configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NodeTypeInner update(String resourceGroupName, String clusterName, String nodeTypeName,
        NodeTypeUpdateParameters parameters);

    /**
     * Update the configuration of a node type of a given managed cluster, only updating tags.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The parameters to update the node type configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    NodeTypeInner update(String resourceGroupName, String clusterName, String nodeTypeName,
        NodeTypeUpdateParameters parameters, Context context);

    /**
     * Delete a Service Fabric node type of a given managed cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String clusterName, String nodeTypeName);

    /**
     * Delete a Service Fabric node type of a given managed cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String clusterName, String nodeTypeName,
        Context context);

    /**
     * Delete a Service Fabric node type of a given managed cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String clusterName, String nodeTypeName);

    /**
     * Delete a Service Fabric node type of a given managed cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String clusterName, String nodeTypeName, Context context);

    /**
     * Gets all Node types of the specified managed cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all Node types of the specified managed cluster as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NodeTypeInner> listByManagedClusters(String resourceGroupName, String clusterName);

    /**
     * Gets all Node types of the specified managed cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all Node types of the specified managed cluster as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<NodeTypeInner> listByManagedClusters(String resourceGroupName, String clusterName, Context context);

    /**
     * Deallocates one or more nodes on the node type. It will disable the fabric nodes, trigger a shutdown on the VMs
     * and release them from the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for deallocate action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDeallocate(String resourceGroupName, String clusterName,
        String nodeTypeName, NodeTypeActionParameters parameters);

    /**
     * Deallocates one or more nodes on the node type. It will disable the fabric nodes, trigger a shutdown on the VMs
     * and release them from the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for deallocate action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDeallocate(String resourceGroupName, String clusterName,
        String nodeTypeName, NodeTypeActionParameters parameters, Context context);

    /**
     * Deallocates one or more nodes on the node type. It will disable the fabric nodes, trigger a shutdown on the VMs
     * and release them from the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for deallocate action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deallocate(String resourceGroupName, String clusterName, String nodeTypeName,
        NodeTypeActionParameters parameters);

    /**
     * Deallocates one or more nodes on the node type. It will disable the fabric nodes, trigger a shutdown on the VMs
     * and release them from the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for deallocate action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deallocate(String resourceGroupName, String clusterName, String nodeTypeName,
        NodeTypeActionParameters parameters, Context context);

    /**
     * Deletes one or more nodes on the node type. It will disable the fabric nodes, trigger a delete on the VMs and
     * removes the state from the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for delete action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDeleteNode(String resourceGroupName, String clusterName,
        String nodeTypeName, NodeTypeActionParameters parameters);

    /**
     * Deletes one or more nodes on the node type. It will disable the fabric nodes, trigger a delete on the VMs and
     * removes the state from the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for delete action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDeleteNode(String resourceGroupName, String clusterName,
        String nodeTypeName, NodeTypeActionParameters parameters, Context context);

    /**
     * Deletes one or more nodes on the node type. It will disable the fabric nodes, trigger a delete on the VMs and
     * removes the state from the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for delete action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteNode(String resourceGroupName, String clusterName, String nodeTypeName,
        NodeTypeActionParameters parameters);

    /**
     * Deletes one or more nodes on the node type. It will disable the fabric nodes, trigger a delete on the VMs and
     * removes the state from the cluster.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for delete action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void deleteNode(String resourceGroupName, String clusterName, String nodeTypeName,
        NodeTypeActionParameters parameters, Context context);

    /**
     * Redeploys one or more nodes on the node type. It will disable the fabric nodes, trigger a shut down on the VMs,
     * move them to a new node, and power them back on.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for redeploy action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRedeploy(String resourceGroupName, String clusterName, String nodeTypeName,
        NodeTypeActionParameters parameters);

    /**
     * Redeploys one or more nodes on the node type. It will disable the fabric nodes, trigger a shut down on the VMs,
     * move them to a new node, and power them back on.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for redeploy action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRedeploy(String resourceGroupName, String clusterName, String nodeTypeName,
        NodeTypeActionParameters parameters, Context context);

    /**
     * Redeploys one or more nodes on the node type. It will disable the fabric nodes, trigger a shut down on the VMs,
     * move them to a new node, and power them back on.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for redeploy action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void redeploy(String resourceGroupName, String clusterName, String nodeTypeName,
        NodeTypeActionParameters parameters);

    /**
     * Redeploys one or more nodes on the node type. It will disable the fabric nodes, trigger a shut down on the VMs,
     * move them to a new node, and power them back on.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for redeploy action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void redeploy(String resourceGroupName, String clusterName, String nodeTypeName,
        NodeTypeActionParameters parameters, Context context);

    /**
     * Reimages one or more nodes on the node type. It will disable the fabric nodes, trigger a reimage on the VMs and
     * activate the nodes back again.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for reimage action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginReimage(String resourceGroupName, String clusterName, String nodeTypeName,
        NodeTypeActionParameters parameters);

    /**
     * Reimages one or more nodes on the node type. It will disable the fabric nodes, trigger a reimage on the VMs and
     * activate the nodes back again.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for reimage action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginReimage(String resourceGroupName, String clusterName, String nodeTypeName,
        NodeTypeActionParameters parameters, Context context);

    /**
     * Reimages one or more nodes on the node type. It will disable the fabric nodes, trigger a reimage on the VMs and
     * activate the nodes back again.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for reimage action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void reimage(String resourceGroupName, String clusterName, String nodeTypeName,
        NodeTypeActionParameters parameters);

    /**
     * Reimages one or more nodes on the node type. It will disable the fabric nodes, trigger a reimage on the VMs and
     * activate the nodes back again.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for reimage action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void reimage(String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters,
        Context context);

    /**
     * Restarts one or more nodes on the node type. It will disable the fabric nodes, trigger a restart on the VMs and
     * activate the nodes back again.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for restart action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRestart(String resourceGroupName, String clusterName, String nodeTypeName,
        NodeTypeActionParameters parameters);

    /**
     * Restarts one or more nodes on the node type. It will disable the fabric nodes, trigger a restart on the VMs and
     * activate the nodes back again.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for restart action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginRestart(String resourceGroupName, String clusterName, String nodeTypeName,
        NodeTypeActionParameters parameters, Context context);

    /**
     * Restarts one or more nodes on the node type. It will disable the fabric nodes, trigger a restart on the VMs and
     * activate the nodes back again.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for restart action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void restart(String resourceGroupName, String clusterName, String nodeTypeName,
        NodeTypeActionParameters parameters);

    /**
     * Restarts one or more nodes on the node type. It will disable the fabric nodes, trigger a restart on the VMs and
     * activate the nodes back again.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for restart action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void restart(String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters,
        Context context);

    /**
     * Starts one or more nodes on the node type. It will trigger an allocation of the fabric node if needed and
     * activate them.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for start action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginStart(String resourceGroupName, String clusterName, String nodeTypeName,
        NodeTypeActionParameters parameters);

    /**
     * Starts one or more nodes on the node type. It will trigger an allocation of the fabric node if needed and
     * activate them.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for start action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginStart(String resourceGroupName, String clusterName, String nodeTypeName,
        NodeTypeActionParameters parameters, Context context);

    /**
     * Starts one or more nodes on the node type. It will trigger an allocation of the fabric node if needed and
     * activate them.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for start action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void start(String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters);

    /**
     * Starts one or more nodes on the node type. It will trigger an allocation of the fabric node if needed and
     * activate them.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for start action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void start(String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters,
        Context context);

    /**
     * Starts a fault simulation on the node type.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters describing the fault simulation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginStartFaultSimulation(String resourceGroupName, String clusterName,
        String nodeTypeName, FaultSimulationContentWrapper parameters);

    /**
     * Starts a fault simulation on the node type.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters describing the fault simulation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginStartFaultSimulation(String resourceGroupName, String clusterName,
        String nodeTypeName, FaultSimulationContentWrapper parameters, Context context);

    /**
     * Starts a fault simulation on the node type.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters describing the fault simulation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void startFaultSimulation(String resourceGroupName, String clusterName, String nodeTypeName,
        FaultSimulationContentWrapper parameters);

    /**
     * Starts a fault simulation on the node type.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters describing the fault simulation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void startFaultSimulation(String resourceGroupName, String clusterName, String nodeTypeName,
        FaultSimulationContentWrapper parameters, Context context);

    /**
     * Stops a fault simulation on the node type.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameter with fault simulation id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginStopFaultSimulation(String resourceGroupName, String clusterName,
        String nodeTypeName, FaultSimulationIdContent parameters);

    /**
     * Stops a fault simulation on the node type.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameter with fault simulation id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginStopFaultSimulation(String resourceGroupName, String clusterName,
        String nodeTypeName, FaultSimulationIdContent parameters, Context context);

    /**
     * Stops a fault simulation on the node type.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameter with fault simulation id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void stopFaultSimulation(String resourceGroupName, String clusterName, String nodeTypeName,
        FaultSimulationIdContent parameters);

    /**
     * Stops a fault simulation on the node type.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameter with fault simulation id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void stopFaultSimulation(String resourceGroupName, String clusterName, String nodeTypeName,
        FaultSimulationIdContent parameters, Context context);

    /**
     * Gets a fault simulation by the simulationId.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameter with fault simulation id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a fault simulation by the simulationId along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<FaultSimulationInner> getFaultSimulationWithResponse(String resourceGroupName, String clusterName,
        String nodeTypeName, FaultSimulationIdContent parameters, Context context);

    /**
     * Gets a fault simulation by the simulationId.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameter with fault simulation id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a fault simulation by the simulationId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FaultSimulationInner getFaultSimulation(String resourceGroupName, String clusterName, String nodeTypeName,
        FaultSimulationIdContent parameters);

    /**
     * Gets the list of recent fault simulations for the node type.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of recent fault simulations for the node type along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<FaultSimulationListResultInner> listFaultSimulationWithResponse(String resourceGroupName,
        String clusterName, String nodeTypeName, Context context);

    /**
     * Gets the list of recent fault simulations for the node type.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of recent fault simulations for the node type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    FaultSimulationListResultInner listFaultSimulation(String resourceGroupName, String clusterName,
        String nodeTypeName);
}
