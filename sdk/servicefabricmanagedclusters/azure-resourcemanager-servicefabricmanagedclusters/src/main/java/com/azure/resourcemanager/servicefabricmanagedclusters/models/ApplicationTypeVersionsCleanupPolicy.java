// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The policy used to clean up unused versions. When the policy is not specified explicitly, the default unused
 * application versions to keep will be 3.
 */
@Fluent
public final class ApplicationTypeVersionsCleanupPolicy
    implements JsonSerializable<ApplicationTypeVersionsCleanupPolicy> {
    /*
     * Number of unused versions per application type to keep.
     */
    private int maxUnusedVersionsToKeep;

    /**
     * Creates an instance of ApplicationTypeVersionsCleanupPolicy class.
     */
    public ApplicationTypeVersionsCleanupPolicy() {
    }

    /**
     * Get the maxUnusedVersionsToKeep property: Number of unused versions per application type to keep.
     * 
     * @return the maxUnusedVersionsToKeep value.
     */
    public int maxUnusedVersionsToKeep() {
        return this.maxUnusedVersionsToKeep;
    }

    /**
     * Set the maxUnusedVersionsToKeep property: Number of unused versions per application type to keep.
     * 
     * @param maxUnusedVersionsToKeep the maxUnusedVersionsToKeep value to set.
     * @return the ApplicationTypeVersionsCleanupPolicy object itself.
     */
    public ApplicationTypeVersionsCleanupPolicy withMaxUnusedVersionsToKeep(int maxUnusedVersionsToKeep) {
        this.maxUnusedVersionsToKeep = maxUnusedVersionsToKeep;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("maxUnusedVersionsToKeep", this.maxUnusedVersionsToKeep);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationTypeVersionsCleanupPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationTypeVersionsCleanupPolicy if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApplicationTypeVersionsCleanupPolicy.
     */
    public static ApplicationTypeVersionsCleanupPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationTypeVersionsCleanupPolicy deserializedApplicationTypeVersionsCleanupPolicy
                = new ApplicationTypeVersionsCleanupPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maxUnusedVersionsToKeep".equals(fieldName)) {
                    deserializedApplicationTypeVersionsCleanupPolicy.maxUnusedVersionsToKeep = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationTypeVersionsCleanupPolicy;
        });
    }
}
