// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes a Subnet.
 */
@Fluent
public final class Subnet implements JsonSerializable<Subnet> {
    /*
     * Subnet name.
     */
    private String name;

    /*
     * Indicates wether to enable Ipv6 or not. If not provided, it will take the same configuration as the cluster.
     */
    private Boolean enableIpv6;

    /*
     * Enable or Disable apply network policies on private end point in the subnet.
     */
    private PrivateEndpointNetworkPolicies privateEndpointNetworkPolicies;

    /*
     * Enable or Disable apply network policies on private link service in the subnet.
     */
    private PrivateLinkServiceNetworkPolicies privateLinkServiceNetworkPolicies;

    /*
     * Full resource id for the network security group.
     */
    private String networkSecurityGroupId;

    /**
     * Creates an instance of Subnet class.
     */
    public Subnet() {
    }

    /**
     * Get the name property: Subnet name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Subnet name.
     * 
     * @param name the name value to set.
     * @return the Subnet object itself.
     */
    public Subnet withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the enableIpv6 property: Indicates wether to enable Ipv6 or not. If not provided, it will take the same
     * configuration as the cluster.
     * 
     * @return the enableIpv6 value.
     */
    public Boolean enableIpv6() {
        return this.enableIpv6;
    }

    /**
     * Set the enableIpv6 property: Indicates wether to enable Ipv6 or not. If not provided, it will take the same
     * configuration as the cluster.
     * 
     * @param enableIpv6 the enableIpv6 value to set.
     * @return the Subnet object itself.
     */
    public Subnet withEnableIpv6(Boolean enableIpv6) {
        this.enableIpv6 = enableIpv6;
        return this;
    }

    /**
     * Get the privateEndpointNetworkPolicies property: Enable or Disable apply network policies on private end point in
     * the subnet.
     * 
     * @return the privateEndpointNetworkPolicies value.
     */
    public PrivateEndpointNetworkPolicies privateEndpointNetworkPolicies() {
        return this.privateEndpointNetworkPolicies;
    }

    /**
     * Set the privateEndpointNetworkPolicies property: Enable or Disable apply network policies on private end point in
     * the subnet.
     * 
     * @param privateEndpointNetworkPolicies the privateEndpointNetworkPolicies value to set.
     * @return the Subnet object itself.
     */
    public Subnet withPrivateEndpointNetworkPolicies(PrivateEndpointNetworkPolicies privateEndpointNetworkPolicies) {
        this.privateEndpointNetworkPolicies = privateEndpointNetworkPolicies;
        return this;
    }

    /**
     * Get the privateLinkServiceNetworkPolicies property: Enable or Disable apply network policies on private link
     * service in the subnet.
     * 
     * @return the privateLinkServiceNetworkPolicies value.
     */
    public PrivateLinkServiceNetworkPolicies privateLinkServiceNetworkPolicies() {
        return this.privateLinkServiceNetworkPolicies;
    }

    /**
     * Set the privateLinkServiceNetworkPolicies property: Enable or Disable apply network policies on private link
     * service in the subnet.
     * 
     * @param privateLinkServiceNetworkPolicies the privateLinkServiceNetworkPolicies value to set.
     * @return the Subnet object itself.
     */
    public Subnet
        withPrivateLinkServiceNetworkPolicies(PrivateLinkServiceNetworkPolicies privateLinkServiceNetworkPolicies) {
        this.privateLinkServiceNetworkPolicies = privateLinkServiceNetworkPolicies;
        return this;
    }

    /**
     * Get the networkSecurityGroupId property: Full resource id for the network security group.
     * 
     * @return the networkSecurityGroupId value.
     */
    public String networkSecurityGroupId() {
        return this.networkSecurityGroupId;
    }

    /**
     * Set the networkSecurityGroupId property: Full resource id for the network security group.
     * 
     * @param networkSecurityGroupId the networkSecurityGroupId value to set.
     * @return the Subnet object itself.
     */
    public Subnet withNetworkSecurityGroupId(String networkSecurityGroupId) {
        this.networkSecurityGroupId = networkSecurityGroupId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Missing required property name in model Subnet"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Subnet.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeBooleanField("enableIpv6", this.enableIpv6);
        jsonWriter.writeStringField("privateEndpointNetworkPolicies",
            this.privateEndpointNetworkPolicies == null ? null : this.privateEndpointNetworkPolicies.toString());
        jsonWriter.writeStringField("privateLinkServiceNetworkPolicies",
            this.privateLinkServiceNetworkPolicies == null ? null : this.privateLinkServiceNetworkPolicies.toString());
        jsonWriter.writeStringField("networkSecurityGroupId", this.networkSecurityGroupId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Subnet from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Subnet if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Subnet.
     */
    public static Subnet fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Subnet deserializedSubnet = new Subnet();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSubnet.name = reader.getString();
                } else if ("enableIpv6".equals(fieldName)) {
                    deserializedSubnet.enableIpv6 = reader.getNullable(JsonReader::getBoolean);
                } else if ("privateEndpointNetworkPolicies".equals(fieldName)) {
                    deserializedSubnet.privateEndpointNetworkPolicies
                        = PrivateEndpointNetworkPolicies.fromString(reader.getString());
                } else if ("privateLinkServiceNetworkPolicies".equals(fieldName)) {
                    deserializedSubnet.privateLinkServiceNetworkPolicies
                        = PrivateLinkServiceNetworkPolicies.fromString(reader.getString());
                } else if ("networkSecurityGroupId".equals(fieldName)) {
                    deserializedSubnet.networkSecurityGroupId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubnet;
        });
    }
}
