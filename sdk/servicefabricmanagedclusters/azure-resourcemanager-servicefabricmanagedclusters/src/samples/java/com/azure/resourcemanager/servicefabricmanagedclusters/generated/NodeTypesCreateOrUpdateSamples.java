// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.management.SubResource;
import com.azure.core.management.serializer.SerializerFactory;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.AdditionalNetworkInterfaceConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.DiskType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.EvictionPolicyType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FrontendConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpConfigurationPublicIpAddressConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpTag;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PrivateIpAddressVersion;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PublicIpAddressVersion;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.SecurityType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.VaultCertificate;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.VaultSecretGroup;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.VmApplication;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.VmImagePlan;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.VmManagedIdentity;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.VmSetupAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.VmssDataDisk;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.VmssExtension;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.VmssExtensionSetupOrder;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for NodeTypes CreateOrUpdate.
 */
public final class NodeTypesCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/servicefabricmanagedclusters/resource-manager/Microsoft.ServiceFabric/preview/2024-06-01-preview/
     * examples/NodeTypePutOperationStateless_example.json
     */
    /**
     * Sample code: Put an stateless node type with temporary disk for service fabric.
     * 
     * @param manager Entry point to ServiceFabricManagedClustersManager.
     */
    public static void putAnStatelessNodeTypeWithTemporaryDiskForServiceFabric(
        com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager manager)
        throws IOException {
        manager.nodeTypes()
            .define("BE")
            .withExistingManagedCluster("resRg", "myCluster")
            .withIsPrimary(false)
            .withVmInstanceCount(10)
            .withVmSize("Standard_DS3")
            .withVmImagePublisher("MicrosoftWindowsServer")
            .withVmImageOffer("WindowsServer")
            .withVmImageSku("2016-Datacenter-Server-Core")
            .withVmImageVersion("latest")
            .withVmExtensions(Arrays.asList(new VmssExtension().withName("Microsoft.Azure.Geneva.GenevaMonitoring")
                .withPublisher("Microsoft.Azure.Geneva")
                .withType("GenevaMonitoring")
                .withTypeHandlerVersion("2.0")
                .withAutoUpgradeMinorVersion(true)
                .withSettings(SerializerFactory.createDefaultManagementSerializerAdapter()
                    .deserialize("{}", Object.class, SerializerEncoding.JSON))))
            .withIsStateless(true)
            .withMultiplePlacementGroups(true)
            .withEnableEncryptionAtHost(true)
            .withUseTempDataDisk(true)
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/servicefabricmanagedclusters/resource-manager/Microsoft.ServiceFabric/preview/2024-06-01-preview/
     * examples/NodeTypePutOperation_example_max.json
     */
    /**
     * Sample code: Put a node type with maximum parameters.
     * 
     * @param manager Entry point to ServiceFabricManagedClustersManager.
     */
    public static void putANodeTypeWithMaximumParameters(
        com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager manager)
        throws IOException {
        manager.nodeTypes()
            .define("BE-testResourceGroup-testRegion-test")
            .withExistingManagedCluster("resRg", "myCluster")
            .withIsPrimary(false)
            .withVmInstanceCount(10)
            .withDataDiskSizeGB(200)
            .withDataDiskType(DiskType.PREMIUM_LRS)
            .withDataDiskLetter("S")
            .withPlacementProperties(mapOf("HasSSD", "true", "NodeColor", "green", "SomeProperty", "5"))
            .withCapacities(mapOf("ClientConnections", "65536"))
            .withVmSize("Standard_DS3")
            .withVmImagePublisher("MicrosoftWindowsServer")
            .withVmImageOffer("WindowsServer")
            .withVmImageSku("2016-Datacenter-Server-Core")
            .withVmImageVersion("latest")
            .withVmSecrets(Arrays.asList(new VaultSecretGroup().withSourceVault(new SubResource().withId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.KeyVault/vaults/myVault"))
                .withVaultCertificates(Arrays.asList(new VaultCertificate()
                    .withCertificateUrl(
                        "https://myVault.vault.azure.net:443/secrets/myCert/ef1a31d39e1f46bca33def54b6cda54c")
                    .withCertificateStore("My")))))
            .withVmExtensions(Arrays.asList(new VmssExtension().withName("Microsoft.Azure.Geneva.GenevaMonitoring")
                .withPublisher("Microsoft.Azure.Geneva")
                .withType("GenevaMonitoring")
                .withTypeHandlerVersion("2.0")
                .withAutoUpgradeMinorVersion(true)
                .withSettings(SerializerFactory.createDefaultManagementSerializerAdapter()
                    .deserialize("{}", Object.class, SerializerEncoding.JSON))
                .withForceUpdateTag("v.1.0")
                .withEnableAutomaticUpgrade(true)
                .withSetupOrder(Arrays.asList(VmssExtensionSetupOrder.BEFORE_SFRUNTIME))))
            .withVmManagedIdentity(new VmManagedIdentity().withUserAssignedIdentities(Arrays.asList(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myIdentity",
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myIdentity2")))
            .withIsStateless(true)
            .withMultiplePlacementGroups(true)
            .withFrontendConfigurations(Arrays.asList(new FrontendConfiguration().withLoadBalancerBackendAddressPoolId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/loadBalancers/test-LB/backendAddressPools/LoadBalancerBEAddressPool")
                .withLoadBalancerInboundNatPoolId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/loadBalancers/test-LB/inboundNatPools/LoadBalancerNATPool")
                .withApplicationGatewayBackendAddressPoolId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/applicationGateways/appgw-test/backendAddressPools/appgwBepoolTest")))
            .withAdditionalDataDisks(Arrays.asList(
                new VmssDataDisk().withLun(1)
                    .withDiskSizeGB(256)
                    .withDiskType(DiskType.STANDARD_SSD_LRS)
                    .withDiskLetter("F"),
                new VmssDataDisk().withLun(2)
                    .withDiskSizeGB(150)
                    .withDiskType(DiskType.PREMIUM_LRS)
                    .withDiskLetter("G")))
            .withEnableEncryptionAtHost(true)
            .withEnableAcceleratedNetworking(true)
            .withUseDefaultPublicLoadBalancer(true)
            .withEnableOverProvisioning(false)
            .withIsSpotVM(true)
            .withUseEphemeralOSDisk(true)
            .withSpotRestoreTimeout("PT30M")
            .withEvictionPolicy(EvictionPolicyType.DEALLOCATE)
            .withSubnetId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1")
            .withVmSetupActions(Arrays.asList(VmSetupAction.ENABLE_CONTAINERS, VmSetupAction.ENABLE_HYPERV))
            .withSecurityType(SecurityType.TRUSTED_LAUNCH)
            .withSecureBootEnabled(true)
            .withEnableNodePublicIp(true)
            .withEnableNodePublicIPv6(true)
            .withNatGatewayId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/natGateways/myNatGateway")
            .withServiceArtifactReferenceId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Compute/galleries/myGallery/serviceArtifacts/myServiceArtifact/vmArtifactsProfiles/myVmArtifactProfile")
            .withDscpConfigurationId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/dscpConfigurations/myDscpConfig")
            .withAdditionalNetworkInterfaceConfigurations(Arrays.asList(new AdditionalNetworkInterfaceConfiguration()
                .withName("nic-1")
                .withEnableAcceleratedNetworking(true)
                .withDscpConfiguration(new SubResource().withId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/dscpConfigurations/myDscpConfig"))
                .withIpConfigurations(Arrays.asList(new IpConfiguration().withName("ipconfig-1")
                    .withApplicationGatewayBackendAddressPools(Arrays.asList(new SubResource().withId(
                        "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/applicationGateways/appgw-test/backendAddressPools/appgwBepoolTest")))
                    .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId(
                        "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/loadBalancers/test-LB/backendAddressPools/LoadBalancerBEAddressPool")))
                    .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId(
                        "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/loadBalancers/test-LB/inboundNatPools/LoadBalancerNATPool")))
                    .withSubnet(new SubResource().withId(
                        "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"))
                    .withPrivateIpAddressVersion(PrivateIpAddressVersion.IPV4)
                    .withPublicIpAddressConfiguration(new IpConfigurationPublicIpAddressConfiguration()
                        .withName("publicip-1")
                        .withIpTags(Arrays.asList(new IpTag().withIpTagType("RoutingPreference").withTag("Internet")))
                        .withPublicIpAddressVersion(PublicIpAddressVersion.IPV4))))))
            .withComputerNamePrefix("BE")
            .withVmApplications(Arrays.asList(new VmApplication()
                .withConfigurationReference("https://mystorageaccount.blob.core.windows.net/containername/blobname")
                .withEnableAutomaticUpgrade(true)
                .withOrder(1)
                .withPackageReferenceId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Compute/galleries/myGallery/applications/myApplication/versions/1.0.0")
                .withVmGalleryTags("{\"Tag1\":\"Value1\",\"Tag2\":\"Value2\"}")
                .withTreatFailureAsDeploymentFailure(false)))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/servicefabricmanagedclusters/resource-manager/Microsoft.ServiceFabric/preview/2024-06-01-preview/
     * examples/NodeTypePutOperationAutoScale_example.json
     */
    /**
     * Sample code: Put a node type with auto-scale parameters.
     * 
     * @param manager Entry point to ServiceFabricManagedClustersManager.
     */
    public static void putANodeTypeWithAutoScaleParameters(
        com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager manager)
        throws IOException {
        manager.nodeTypes()
            .define("BE")
            .withExistingManagedCluster("resRg", "myCluster")
            .withIsPrimary(false)
            .withVmInstanceCount(-1)
            .withDataDiskSizeGB(200)
            .withDataDiskType(DiskType.PREMIUM_LRS)
            .withPlacementProperties(mapOf("HasSSD", "true", "NodeColor", "green", "SomeProperty", "5"))
            .withCapacities(mapOf("ClientConnections", "65536"))
            .withVmSize("Standard_DS3")
            .withVmImagePublisher("MicrosoftWindowsServer")
            .withVmImageOffer("WindowsServer")
            .withVmImageSku("2016-Datacenter-Server-Core")
            .withVmImageVersion("latest")
            .withVmSecrets(Arrays.asList(new VaultSecretGroup().withSourceVault(new SubResource().withId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.KeyVault/vaults/myVault"))
                .withVaultCertificates(Arrays.asList(new VaultCertificate()
                    .withCertificateUrl(
                        "https://myVault.vault.azure.net:443/secrets/myCert/ef1a31d39e1f46bca33def54b6cda54c")
                    .withCertificateStore("My")))))
            .withVmExtensions(Arrays.asList(new VmssExtension().withName("Microsoft.Azure.Geneva.GenevaMonitoring")
                .withPublisher("Microsoft.Azure.Geneva")
                .withType("GenevaMonitoring")
                .withTypeHandlerVersion("2.0")
                .withAutoUpgradeMinorVersion(true)
                .withSettings(SerializerFactory.createDefaultManagementSerializerAdapter()
                    .deserialize("{}", Object.class, SerializerEncoding.JSON))))
            .withVmManagedIdentity(new VmManagedIdentity().withUserAssignedIdentities(Arrays.asList(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myIdentity",
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myIdentity2")))
            .withIsStateless(true)
            .withMultiplePlacementGroups(true)
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/servicefabricmanagedclusters/resource-manager/Microsoft.ServiceFabric/preview/2024-06-01-preview/
     * examples/NodeTypePutOperation_example_min.json
     */
    /**
     * Sample code: Put a node type with minimum parameters.
     * 
     * @param manager Entry point to ServiceFabricManagedClustersManager.
     */
    public static void putANodeTypeWithMinimumParameters(
        com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager manager) {
        manager.nodeTypes()
            .define("BE")
            .withExistingManagedCluster("resRg", "myCluster")
            .withIsPrimary(false)
            .withVmInstanceCount(10)
            .withDataDiskSizeGB(200)
            .withVmSize("Standard_D3")
            .withVmImagePublisher("MicrosoftWindowsServer")
            .withVmImageOffer("WindowsServer")
            .withVmImageSku("2016-Datacenter-Server-Core")
            .withVmImageVersion("latest")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/servicefabricmanagedclusters/resource-manager/Microsoft.ServiceFabric/preview/2024-06-01-preview/
     * examples/NodeTypePutOperationDedicatedHost_example.json
     */
    /**
     * Sample code: Put node type with dedicated hosts.
     * 
     * @param manager Entry point to ServiceFabricManagedClustersManager.
     */
    public static void putNodeTypeWithDedicatedHosts(
        com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager manager) {
        manager.nodeTypes()
            .define("BE")
            .withExistingManagedCluster("resRg", "myCluster")
            .withIsPrimary(false)
            .withVmInstanceCount(10)
            .withDataDiskSizeGB(200)
            .withDataDiskType(DiskType.STANDARD_SSD_LRS)
            .withPlacementProperties(mapOf())
            .withCapacities(mapOf())
            .withVmSize("Standard_D8s_v3")
            .withVmImagePublisher("MicrosoftWindowsServer")
            .withVmImageOffer("WindowsServer")
            .withVmImageSku("2019-Datacenter")
            .withVmImageVersion("latest")
            .withZones(Arrays.asList("1"))
            .withHostGroupId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testhostgroupRG/providers/Microsoft.Compute/hostGroups/testHostGroup")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/servicefabricmanagedclusters/resource-manager/Microsoft.ServiceFabric/preview/2024-06-01-preview/
     * examples/NodeTypePutOperationVmImagePlan_example.json
     */
    /**
     * Sample code: Put node type with vm image plan.
     * 
     * @param manager Entry point to ServiceFabricManagedClustersManager.
     */
    public static void putNodeTypeWithVmImagePlan(
        com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager manager) {
        manager.nodeTypes()
            .define("BE")
            .withExistingManagedCluster("resRg", "myCluster")
            .withIsPrimary(false)
            .withVmInstanceCount(10)
            .withDataDiskSizeGB(200)
            .withVmSize("Standard_D3")
            .withVmImagePublisher("testpublisher")
            .withVmImageOffer("windows_2022_test")
            .withVmImageSku("win_2022_test_20_10_gen2")
            .withVmImageVersion("latest")
            .withVmImagePlan(new VmImagePlan().withName("win_2022_test_20_10_gen2")
                .withProduct("windows_2022_test")
                .withPublisher("testpublisher"))
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/servicefabricmanagedclusters/resource-manager/Microsoft.ServiceFabric/preview/2024-06-01-preview/
     * examples/NodeTypePutOperationCustomSharedGalleriesImage_example.json
     */
    /**
     * Sample code: Put node type with shared galleries custom vm image.
     * 
     * @param manager Entry point to ServiceFabricManagedClustersManager.
     */
    public static void putNodeTypeWithSharedGalleriesCustomVmImage(
        com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager manager) {
        manager.nodeTypes()
            .define("BE")
            .withExistingManagedCluster("resRg", "myCluster")
            .withIsPrimary(false)
            .withVmInstanceCount(10)
            .withDataDiskSizeGB(200)
            .withVmSize("Standard_D3")
            .withVmSharedGalleryImageId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-custom-image/providers/Microsoft.Compute/sharedGalleries/35349201-a0b3-405e-8a23-9f1450984307-SFSHAREDGALLERY/images/TestNoProdContainerDImage/versions/latest")
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/servicefabricmanagedclusters/resource-manager/Microsoft.ServiceFabric/preview/2024-06-01-preview/
     * examples/NodeTypePutOperationCustomImage_example.json
     */
    /**
     * Sample code: Put node type with custom vm image.
     * 
     * @param manager Entry point to ServiceFabricManagedClustersManager.
     */
    public static void putNodeTypeWithCustomVmImage(
        com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager manager) {
        manager.nodeTypes()
            .define("BE")
            .withExistingManagedCluster("resRg", "myCluster")
            .withIsPrimary(false)
            .withVmInstanceCount(10)
            .withDataDiskSizeGB(200)
            .withVmSize("Standard_D3")
            .withVmImageResourceId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-custom-image/providers/Microsoft.Compute/galleries/myCustomImages/images/Win2019DC")
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
