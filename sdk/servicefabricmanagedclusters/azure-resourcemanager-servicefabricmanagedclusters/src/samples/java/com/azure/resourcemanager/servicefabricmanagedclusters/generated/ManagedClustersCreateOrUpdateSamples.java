// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.resourcemanager.servicefabricmanagedclusters.models.Access;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationTypeVersionsCleanupPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ClusterHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ClusterMonitoringPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ClusterUpgradeCadence;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ClusterUpgradeDeltaHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ClusterUpgradeMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ClusterUpgradePolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.Direction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpTag;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.LoadBalancingRule;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedClusterAddOnFeature;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.NetworkSecurityRule;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.NsgProtocol;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PrivateEndpointNetworkPolicies;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PrivateLinkServiceNetworkPolicies;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ProbeProtocol;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.Protocol;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceEndpoint;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.SettingsParameterDescription;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.SettingsSectionDescription;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.Sku;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.SkuName;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.Subnet;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ZonalUpdateMode;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ManagedClusters CreateOrUpdate.
 */
public final class ManagedClustersCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/servicefabricmanagedclusters/resource-manager/Microsoft.ServiceFabric/stable/2024-04-01/examples/
     * ManagedClusterPutOperation_example_max.json
     */
    /**
     * Sample code: Put a cluster with maximum parameters.
     * 
     * @param manager Entry point to ServiceFabricManagedClustersManager.
     */
    public static void putAClusterWithMaximumParameters(
        com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager manager) {
        manager.managedClusters()
            .define("myCluster")
            .withRegion("eastus")
            .withExistingResourceGroup("resRg")
            .withSku(new Sku().withName(SkuName.BASIC))
            .withTags(mapOf())
            .withDnsName("myCluster")
            .withClientConnectionPort(19000)
            .withHttpGatewayConnectionPort(19080)
            .withAdminUsername("vmadmin")
            .withAdminPassword("{vm-password}")
            .withLoadBalancingRules(Arrays.asList(
                new LoadBalancingRule().withFrontendPort(80)
                    .withBackendPort(80)
                    .withProtocol(Protocol.fromString("http"))
                    .withProbePort(80)
                    .withProbeProtocol(ProbeProtocol.HTTP),
                new LoadBalancingRule().withFrontendPort(443)
                    .withBackendPort(443)
                    .withProtocol(Protocol.fromString("http"))
                    .withProbePort(443)
                    .withProbeProtocol(ProbeProtocol.HTTP),
                new LoadBalancingRule().withFrontendPort(10000)
                    .withBackendPort(10000)
                    .withProtocol(Protocol.TCP)
                    .withProbePort(10000)
                    .withProbeProtocol(ProbeProtocol.HTTP)
                    .withLoadDistribution("Default")))
            .withAllowRdpAccess(true)
            .withNetworkSecurityRules(Arrays.asList(
                new NetworkSecurityRule().withName("TestName")
                    .withDescription("Test description")
                    .withProtocol(NsgProtocol.TCP)
                    .withSourceAddressPrefixes(Arrays.asList("*"))
                    .withDestinationAddressPrefixes(Arrays.asList("*"))
                    .withSourcePortRanges(Arrays.asList("*"))
                    .withDestinationPortRanges(Arrays.asList("*"))
                    .withAccess(Access.ALLOW)
                    .withPriority(1010)
                    .withDirection(Direction.INBOUND),
                new NetworkSecurityRule().withName("AllowARM")
                    .withProtocol(NsgProtocol.fromString("*"))
                    .withSourceAddressPrefix("AzureResourceManager")
                    .withDestinationAddressPrefix("*")
                    .withSourcePortRange("*")
                    .withDestinationPortRange("33500-33699")
                    .withAccess(Access.ALLOW)
                    .withPriority(2002)
                    .withDirection(Direction.INBOUND)))
            .withFabricSettings(Arrays.asList(new SettingsSectionDescription().withName("ManagedIdentityTokenService")
                .withParameters(
                    Arrays.asList(new SettingsParameterDescription().withName("IsEnabled").withValue("true")))))
            .withClusterCodeVersion("7.1.168.9494")
            .withClusterUpgradeMode(ClusterUpgradeMode.MANUAL)
            .withAddonFeatures(Arrays.asList(ManagedClusterAddOnFeature.DNS_SERVICE,
                ManagedClusterAddOnFeature.BACKUP_RESTORE_SERVICE, ManagedClusterAddOnFeature.RESOURCE_MONITOR_SERVICE))
            .withEnableAutoOSUpgrade(true)
            .withZonalResiliency(true)
            .withApplicationTypeVersionsCleanupPolicy(
                new ApplicationTypeVersionsCleanupPolicy().withMaxUnusedVersionsToKeep(3))
            .withEnableIpv6(true)
            .withIpTags(Arrays.asList(new IpTag().withIpTagType("FirstPartyUsage").withTag("SQL")))
            .withAuxiliarySubnets(Arrays.asList(new Subnet().withName("testSubnet1")
                .withEnableIpv6(true)
                .withPrivateEndpointNetworkPolicies(PrivateEndpointNetworkPolicies.ENABLED)
                .withPrivateLinkServiceNetworkPolicies(PrivateLinkServiceNetworkPolicies.ENABLED)
                .withNetworkSecurityGroupId(
                    "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/networkSecurityGroups/sn1")))
            .withServiceEndpoints(Arrays.asList(new ServiceEndpoint().withService("Microsoft.Storage")
                .withLocations(Arrays.asList("eastus2", "usnorth"))))
            .withZonalUpdateMode(ZonalUpdateMode.FAST)
            .withUseCustomVnet(true)
            .withPublicIpPrefixId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.Network/publicIPPrefixes/myPublicIPPrefix")
            .withPublicIPv6PrefixId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.Network/publicIPPrefixes/myPublicIPv6Prefix")
            .withDdosProtectionPlanId(
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/ddosProtectionPlans/myDDoSProtectionPlan")
            .withUpgradeDescription(new ClusterUpgradePolicy().withForceRestart(false)
                .withHealthPolicy(
                    new ClusterHealthPolicy().withMaxPercentUnhealthyNodes(10).withMaxPercentUnhealthyApplications(30))
                .withDeltaHealthPolicy(new ClusterUpgradeDeltaHealthPolicy().withMaxPercentDeltaUnhealthyNodes(20)
                    .withMaxPercentUpgradeDomainDeltaUnhealthyNodes(40)
                    .withMaxPercentDeltaUnhealthyApplications(40))
                .withMonitoringPolicy(new ClusterMonitoringPolicy().withHealthCheckWaitDuration("00:05:00")
                    .withHealthCheckStableDuration("00:45:00")
                    .withHealthCheckRetryTimeout("00:55:00")
                    .withUpgradeTimeout("12:00:00")
                    .withUpgradeDomainTimeout("03:00:00")))
            .withHttpGatewayTokenAuthConnectionPort(19081)
            .withEnableHttpGatewayExclusiveAuthMode(true)
            .create();
    }

    /*
     * x-ms-original-file:
     * specification/servicefabricmanagedclusters/resource-manager/Microsoft.ServiceFabric/stable/2024-04-01/examples/
     * ManagedClusterPutOperation_example_min.json
     */
    /**
     * Sample code: Put a cluster with minimum parameters.
     * 
     * @param manager Entry point to ServiceFabricManagedClustersManager.
     */
    public static void putAClusterWithMinimumParameters(
        com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager manager) {
        manager.managedClusters()
            .define("myCluster")
            .withRegion("eastus")
            .withExistingResourceGroup("resRg")
            .withSku(new Sku().withName(SkuName.BASIC))
            .withDnsName("myCluster")
            .withAdminUsername("vmadmin")
            .withAdminPassword("{vm-password}")
            .withFabricSettings(Arrays.asList(new SettingsSectionDescription().withName("ManagedIdentityTokenService")
                .withParameters(
                    Arrays.asList(new SettingsParameterDescription().withName("IsEnabled").withValue("true")))))
            .withClusterUpgradeMode(ClusterUpgradeMode.AUTOMATIC)
            .withClusterUpgradeCadence(ClusterUpgradeCadence.WAVE1)
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
