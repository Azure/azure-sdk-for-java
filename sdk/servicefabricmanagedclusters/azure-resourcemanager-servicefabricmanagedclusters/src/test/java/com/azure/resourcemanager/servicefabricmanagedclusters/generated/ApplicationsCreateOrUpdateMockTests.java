// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationResource;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUpgradePolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUserAssignedIdentity;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentity;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentityType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMonitoringPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceTypeHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApplicationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"identity\":{\"principalId\":\"eaahhvjhhn\",\"tenantId\":\"zybbj\",\"type\":\"None\",\"userAssignedIdentities\":{\"jlageu\":{\"principalId\":\"yxkyxvx\",\"clientId\":\"blbjedn\"},\"gwklnsr\":{\"principalId\":\"lxunsmjbnkppxy\",\"clientId\":\"nlsvxeiz\"},\"kzddrtkgdojbmxva\":{\"principalId\":\"feycxcktp\",\"clientId\":\"merteeammxqiek\"},\"uwprtujwsawd\":{\"principalId\":\"efdeesve\",\"clientId\":\"ijpxtx\"}}},\"properties\":{\"provisioningState\":\"Succeeded\",\"version\":\"zeexavoxtfgle\",\"parameters\":{\"b\":\"dqbwpypqtgsfja\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":901001519,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":413815833,\"maxPercentUnhealthyPartitionsPerService\":641653590,\"maxPercentUnhealthyReplicasPerPartition\":467835815},\"serviceTypeHealthPolicyMap\":{\"nsiru\":{\"maxPercentUnhealthyServices\":7720260,\"maxPercentUnhealthyPartitionsPerService\":1337444270,\"maxPercentUnhealthyReplicasPerPartition\":809343874},\"mes\":{\"maxPercentUnhealthyServices\":1227726974,\"maxPercentUnhealthyPartitionsPerService\":24434450,\"maxPercentUnhealthyReplicasPerPartition\":121727162},\"pagzrcxfailcfxwm\":{\"maxPercentUnhealthyServices\":1080480185,\"maxPercentUnhealthyPartitionsPerService\":1298970345,\"maxPercentUnhealthyReplicasPerPartition\":2020313938},\"dfgsftufqobrj\":{\"maxPercentUnhealthyServices\":847251167,\"maxPercentUnhealthyPartitionsPerService\":193131826,\"maxPercentUnhealthyReplicasPerPartition\":1074409808}}},\"forceRestart\":true,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Manual\",\"healthCheckWaitDuration\":\"cc\",\"healthCheckStableDuration\":\"knh\",\"healthCheckRetryTimeout\":\"kizvytn\",\"upgradeTimeout\":\"zvulj\",\"upgradeDomainTimeout\":\"aaeranokqgukk\"},\"instanceCloseDelayDuration\":2283242185160941523,\"upgradeMode\":\"Monitored\",\"upgradeReplicaSetCheckTimeout\":1665106754566541029,\"recreateApplication\":false},\"managedIdentities\":[{\"name\":\"lcdisd\",\"principalId\":\"sfjbjsvg\"},{\"name\":\"rwhryvycytd\",\"principalId\":\"lxgccknfnwmbtm\"},{\"name\":\"pdvjdhttzaefedx\",\"principalId\":\"hchrphkmcrjdqn\"}]},\"location\":\"fzpbgtgkyl\",\"tags\":{\"ez\":\"hrjeuutlw\",\"qlgehg\":\"zhokvbwnhh\",\"f\":\"pipifh\"},\"id\":\"ajvgcxtxjcsheafi\",\"name\":\"ltugsresmkssjhoi\",\"type\":\"txfkfweg\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServiceFabricManagedClustersManager manager = ServiceFabricManagedClustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ApplicationResource response
            = manager.applications()
                .define("jhlfzswpchwahf")
                .withExistingManagedcluster("eazulcs", "thwwn")
                .withRegion("oyqhlwig")
                .withTags(mapOf("uwasqvd", "bkbxgomfa", "y", "e", "imsidxasicddyvvj", "uxakjsqzhzbezk"))
                .withIdentity(
                    new ManagedIdentity().withType(ManagedIdentityType.USER_ASSIGNED)
                        .withUserAssignedIdentities(mapOf("qizxfpxtgqscjavf", new UserAssignedIdentity(), "wpijrajci",
                            new UserAssignedIdentity(), "oxgsgbpfgzdjtx", new UserAssignedIdentity(), "rdve",
                            new UserAssignedIdentity())))
                .withVersion("zhyrmewipmve")
                .withParameters(mapOf("xundxgk", "ukuqgsj", "muvgp", "twzhhzjhfjmhv"))
                .withUpgradePolicy(new ApplicationUpgradePolicy()
                    .withApplicationHealthPolicy(new ApplicationHealthPolicy().withConsiderWarningAsError(false)
                        .withMaxPercentUnhealthyDeployedApplications(1633732368)
                        .withDefaultServiceTypeHealthPolicy(
                            new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1191301837)
                                .withMaxPercentUnhealthyPartitionsPerService(1640153211)
                                .withMaxPercentUnhealthyReplicasPerPartition(2088637190))
                        .withServiceTypeHealthPolicyMap(mapOf("jyihsasbhudypo",
                            new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1810065983)
                                .withMaxPercentUnhealthyPartitionsPerService(1938400598)
                                .withMaxPercentUnhealthyReplicasPerPartition(837522232),
                            "ms",
                            new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(719606175)
                                .withMaxPercentUnhealthyPartitionsPerService(1579321844)
                                .withMaxPercentUnhealthyReplicasPerPartition(651460177),
                            "qyrp",
                            new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(900133726)
                                .withMaxPercentUnhealthyPartitionsPerService(1558457912)
                                .withMaxPercentUnhealthyReplicasPerPartition(716160458))))
                    .withForceRestart(false)
                    .withRollingUpgradeMonitoringPolicy(
                        new RollingUpgradeMonitoringPolicy().withFailureAction(FailureAction.MANUAL)
                            .withHealthCheckWaitDuration("lttymsjn")
                            .withHealthCheckStableDuration("gqdnfwqzd")
                            .withHealthCheckRetryTimeout("gtilax")
                            .withUpgradeTimeout("nfhqlyvijouwivk")
                            .withUpgradeDomainTimeout("oyzunbixxr"))
                    .withInstanceCloseDelayDuration(1394103759304095532L)
                    .withUpgradeMode(RollingUpgradeMode.UNMONITORED_AUTO)
                    .withUpgradeReplicaSetCheckTimeout(9014145231831248611L)
                    .withRecreateApplication(true))
                .withManagedIdentities(Arrays.asList(
                    new ApplicationUserAssignedIdentity().withName("ivtsoxfrkenxpm").withPrincipalId("yefrpmpdnqqska"),
                    new ApplicationUserAssignedIdentity().withName("ao").withPrincipalId("vmm"),
                    new ApplicationUserAssignedIdentity().withName("npqfrtqlkzmeg").withPrincipalId("itgvkx"),
                    new ApplicationUserAssignedIdentity().withName("zyqdrfegcealzx").withPrincipalId("hcans")))
                .create();

        Assertions.assertEquals(ManagedIdentityType.NONE, response.identity().type());
        Assertions.assertEquals("fzpbgtgkyl", response.location());
        Assertions.assertEquals("hrjeuutlw", response.tags().get("ez"));
        Assertions.assertEquals("zeexavoxtfgle", response.version());
        Assertions.assertEquals("dqbwpypqtgsfja", response.parameters().get("b"));
        Assertions.assertEquals(true, response.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(901001519,
            response.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(413815833,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(641653590,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(467835815,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(7720260,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("nsiru")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(1337444270,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("nsiru")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(809343874,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("nsiru")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(true, response.upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.MANUAL,
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("cc",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("knh",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("kizvytn",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("zvulj", response.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("aaeranokqgukk",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(2283242185160941523L, response.upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.MONITORED, response.upgradePolicy().upgradeMode());
        Assertions.assertEquals(1665106754566541029L, response.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(false, response.upgradePolicy().recreateApplication());
        Assertions.assertEquals("lcdisd", response.managedIdentities().get(0).name());
        Assertions.assertEquals("sfjbjsvg", response.managedIdentities().get(0).principalId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
