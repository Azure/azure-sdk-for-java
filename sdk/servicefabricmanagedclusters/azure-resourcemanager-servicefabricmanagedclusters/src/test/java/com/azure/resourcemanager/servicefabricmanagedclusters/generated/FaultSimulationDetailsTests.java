// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FaultSimulationDetails;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FaultSimulationStatus;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.SfmcOperationStatus;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class FaultSimulationDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FaultSimulationDetails model = BinaryData.fromString(
            "{\"clusterId\":\"thzvaytdwkqbrqu\",\"operationId\":\"axhexiilivp\",\"nodeTypeFaultSimulation\":[{\"nodeTypeName\":\"r\",\"status\":\"Done\",\"operationId\":\"oaxoruzfgsqu\",\"operationStatus\":\"Started\"},{\"nodeTypeName\":\"xxle\",\"status\":\"Done\",\"operationId\":\"mxjezwlw\",\"operationStatus\":\"Succeeded\"}],\"parameters\":{\"faultKind\":\"FaultSimulationContent\",\"force\":false,\"constraints\":{\"expirationTime\":\"2021-10-02T16:07:13Z\"}}}")
            .toObject(FaultSimulationDetails.class);
        Assertions.assertEquals("thzvaytdwkqbrqu", model.clusterId());
        Assertions.assertEquals("axhexiilivp", model.operationId());
        Assertions.assertEquals("r", model.nodeTypeFaultSimulation().get(0).nodeTypeName());
        Assertions.assertEquals(FaultSimulationStatus.DONE, model.nodeTypeFaultSimulation().get(0).status());
        Assertions.assertEquals("oaxoruzfgsqu", model.nodeTypeFaultSimulation().get(0).operationId());
        Assertions.assertEquals(SfmcOperationStatus.STARTED, model.nodeTypeFaultSimulation().get(0).operationStatus());
        Assertions.assertFalse(model.parameters().force());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-02T16:07:13Z"),
            model.parameters().constraints().expirationTime());
    }
}
