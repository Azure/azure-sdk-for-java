// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.MoveCost;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.Partition;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingMechanism;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingTrigger;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelation;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetric;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePackageActivationMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePlacementPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.StatefulServiceProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class StatefulServicePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StatefulServiceProperties model = BinaryData.fromString(
            "{\"serviceKind\":\"Stateful\",\"hasPersistedState\":true,\"targetReplicaSetSize\":1665134354,\"minReplicaSetSize\":223221369,\"replicaRestartWaitDuration\":\"cypsxjv\",\"quorumLossWaitDuration\":\"imwkslircizj\",\"standByReplicaKeepDuration\":\"ydfce\",\"servicePlacementTimeLimit\":\"vlhv\",\"provisioningState\":\"dyftumrtwna\",\"serviceTypeName\":\"jslb\",\"partitionDescription\":{\"partitionScheme\":\"Partition\"},\"servicePackageActivationMode\":\"ExclusiveProcess\",\"serviceDnsName\":\"jgcyztsfmznba\",\"placementConstraints\":\"ph\",\"correlationScheme\":[{\"scheme\":\"AlignedAffinity\",\"serviceName\":\"rn\"},{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"x\"},{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"uwrykqgaifmvikl\"},{\"scheme\":\"AlignedAffinity\",\"serviceName\":\"dvk\"}],\"serviceLoadMetrics\":[{\"name\":\"jdz\",\"weight\":\"Low\",\"primaryDefaultLoad\":2141010446,\"secondaryDefaultLoad\":929609340,\"defaultLoad\":986033506}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicy\"}],\"defaultMoveCost\":\"Medium\",\"scalingPolicies\":[{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}}]}")
            .toObject(StatefulServiceProperties.class);
        Assertions.assertEquals("ph", model.placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.ALIGNED_AFFINITY, model.correlationScheme().get(0).scheme());
        Assertions.assertEquals("rn", model.correlationScheme().get(0).serviceName());
        Assertions.assertEquals("jdz", model.serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.LOW, model.serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(2141010446, model.serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(929609340, model.serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(986033506, model.serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.MEDIUM, model.defaultMoveCost());
        Assertions.assertEquals("jslb", model.serviceTypeName());
        Assertions.assertEquals(ServicePackageActivationMode.EXCLUSIVE_PROCESS, model.servicePackageActivationMode());
        Assertions.assertEquals("jgcyztsfmznba", model.serviceDnsName());
        Assertions.assertEquals(true, model.hasPersistedState());
        Assertions.assertEquals(1665134354, model.targetReplicaSetSize());
        Assertions.assertEquals(223221369, model.minReplicaSetSize());
        Assertions.assertEquals("cypsxjv", model.replicaRestartWaitDuration());
        Assertions.assertEquals("imwkslircizj", model.quorumLossWaitDuration());
        Assertions.assertEquals("ydfce", model.standByReplicaKeepDuration());
        Assertions.assertEquals("vlhv", model.servicePlacementTimeLimit());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StatefulServiceProperties model = new StatefulServiceProperties().withPlacementConstraints("ph")
            .withCorrelationScheme(Arrays.asList(
                new ServiceCorrelation().withScheme(ServiceCorrelationScheme.ALIGNED_AFFINITY).withServiceName("rn"),
                new ServiceCorrelation().withScheme(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY).withServiceName("x"),
                new ServiceCorrelation().withScheme(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY)
                    .withServiceName("uwrykqgaifmvikl"),
                new ServiceCorrelation().withScheme(ServiceCorrelationScheme.ALIGNED_AFFINITY).withServiceName("dvk")))
            .withServiceLoadMetrics(Arrays.asList(new ServiceLoadMetric().withName("jdz")
                .withWeight(ServiceLoadMetricWeight.LOW)
                .withPrimaryDefaultLoad(2141010446)
                .withSecondaryDefaultLoad(929609340)
                .withDefaultLoad(986033506)))
            .withServicePlacementPolicies(Arrays.asList(new ServicePlacementPolicy()))
            .withDefaultMoveCost(MoveCost.MEDIUM)
            .withScalingPolicies(Arrays.asList(new ScalingPolicy().withScalingMechanism(new ScalingMechanism())
                .withScalingTrigger(new ScalingTrigger())))
            .withServiceTypeName("jslb")
            .withPartitionDescription(new Partition())
            .withServicePackageActivationMode(ServicePackageActivationMode.EXCLUSIVE_PROCESS)
            .withServiceDnsName("jgcyztsfmznba")
            .withHasPersistedState(true)
            .withTargetReplicaSetSize(1665134354)
            .withMinReplicaSetSize(223221369)
            .withReplicaRestartWaitDuration("cypsxjv")
            .withQuorumLossWaitDuration("imwkslircizj")
            .withStandByReplicaKeepDuration("ydfce")
            .withServicePlacementTimeLimit("vlhv");
        model = BinaryData.fromObject(model).toObject(StatefulServiceProperties.class);
        Assertions.assertEquals("ph", model.placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.ALIGNED_AFFINITY, model.correlationScheme().get(0).scheme());
        Assertions.assertEquals("rn", model.correlationScheme().get(0).serviceName());
        Assertions.assertEquals("jdz", model.serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.LOW, model.serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(2141010446, model.serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(929609340, model.serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(986033506, model.serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.MEDIUM, model.defaultMoveCost());
        Assertions.assertEquals("jslb", model.serviceTypeName());
        Assertions.assertEquals(ServicePackageActivationMode.EXCLUSIVE_PROCESS, model.servicePackageActivationMode());
        Assertions.assertEquals("jgcyztsfmznba", model.serviceDnsName());
        Assertions.assertEquals(true, model.hasPersistedState());
        Assertions.assertEquals(1665134354, model.targetReplicaSetSize());
        Assertions.assertEquals(223221369, model.minReplicaSetSize());
        Assertions.assertEquals("cypsxjv", model.replicaRestartWaitDuration());
        Assertions.assertEquals("imwkslircizj", model.quorumLossWaitDuration());
        Assertions.assertEquals("ydfce", model.standByReplicaKeepDuration());
        Assertions.assertEquals("vlhv", model.servicePlacementTimeLimit());
    }
}
