// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.LoadBalancingRule;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ProbeProtocol;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.Protocol;
import org.junit.jupiter.api.Assertions;

public final class LoadBalancingRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LoadBalancingRule model = BinaryData.fromString(
            "{\"frontendPort\":929911976,\"backendPort\":1475911208,\"protocol\":\"tcp\",\"probePort\":161159064,\"probeProtocol\":\"https\",\"probeRequestPath\":\"utauv\",\"loadDistribution\":\"tkuwhhmhykojo\"}")
            .toObject(LoadBalancingRule.class);
        Assertions.assertEquals(929911976, model.frontendPort());
        Assertions.assertEquals(1475911208, model.backendPort());
        Assertions.assertEquals(Protocol.TCP, model.protocol());
        Assertions.assertEquals(161159064, model.probePort());
        Assertions.assertEquals(ProbeProtocol.HTTPS, model.probeProtocol());
        Assertions.assertEquals("utauv", model.probeRequestPath());
        Assertions.assertEquals("tkuwhhmhykojo", model.loadDistribution());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LoadBalancingRule model = new LoadBalancingRule().withFrontendPort(929911976)
            .withBackendPort(1475911208)
            .withProtocol(Protocol.TCP)
            .withProbePort(161159064)
            .withProbeProtocol(ProbeProtocol.HTTPS)
            .withProbeRequestPath("utauv")
            .withLoadDistribution("tkuwhhmhykojo");
        model = BinaryData.fromObject(model).toObject(LoadBalancingRule.class);
        Assertions.assertEquals(929911976, model.frontendPort());
        Assertions.assertEquals(1475911208, model.backendPort());
        Assertions.assertEquals(Protocol.TCP, model.protocol());
        Assertions.assertEquals(161159064, model.probePort());
        Assertions.assertEquals(ProbeProtocol.HTTPS, model.probeProtocol());
        Assertions.assertEquals("utauv", model.probeRequestPath());
        Assertions.assertEquals("tkuwhhmhykojo", model.loadDistribution());
    }
}
