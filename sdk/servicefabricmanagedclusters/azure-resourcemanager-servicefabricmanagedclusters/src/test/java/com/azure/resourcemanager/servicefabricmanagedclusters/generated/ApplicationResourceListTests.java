// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.ApplicationResourceInner;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationResourceList;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUpgradePolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUserAssignedIdentity;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentity;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentityType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMonitoringPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceTypeHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationResourceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationResourceList model = BinaryData.fromString(
            "{\"value\":[{\"identity\":{\"principalId\":\"iywgqywgndrvynh\",\"tenantId\":\"pphrcgynco\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"sxlzevgbmqj\":{\"principalId\":\"m\",\"clientId\":\"oo\"}}},\"properties\":{\"provisioningState\":\"c\",\"version\":\"mivkwlzuvcc\",\"parameters\":{\"fionl\":\"fnba\",\"bqqwxrj\":\"bxetqgtzxdpn\",\"mpmngnzscxaqwoo\":\"eallnwsubisnj\",\"njeaseipheofloke\":\"hcbonqvpkvlr\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":354708232,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":1285754335,\"maxPercentUnhealthyPartitionsPerService\":290307035,\"maxPercentUnhealthyReplicasPerPartition\":147839675},\"serviceTypeHealthPolicyMap\":{\"pdjpjumasxazjp\":{\"maxPercentUnhealthyServices\":203992895,\"maxPercentUnhealthyPartitionsPerService\":798552756,\"maxPercentUnhealthyReplicasPerPartition\":885958486},\"ualhbxxhejj\":{\"maxPercentUnhealthyServices\":1063088657,\"maxPercentUnhealthyPartitionsPerService\":184362773,\"maxPercentUnhealthyReplicasPerPartition\":973371108},\"udgwdslfho\":{\"maxPercentUnhealthyServices\":2029322855,\"maxPercentUnhealthyPartitionsPerService\":57336706,\"maxPercentUnhealthyReplicasPerPartition\":873426494},\"ynpwlbj\":{\"maxPercentUnhealthyServices\":719647330,\"maxPercentUnhealthyPartitionsPerService\":743935236,\"maxPercentUnhealthyReplicasPerPartition\":470013493}}},\"forceRestart\":true,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Rollback\",\"healthCheckWaitDuration\":\"ftadehxnltyfs\",\"healthCheckStableDuration\":\"ppusuesnzwdejba\",\"healthCheckRetryTimeout\":\"orxzdmohctbqvud\",\"upgradeTimeout\":\"xdn\",\"upgradeDomainTimeout\":\"nvowgujju\"},\"instanceCloseDelayDuration\":8288430656102622571,\"upgradeMode\":\"Monitored\",\"upgradeReplicaSetCheckTimeout\":4728072908166109395,\"recreateApplication\":false},\"managedIdentities\":[{\"name\":\"dyggdtjixhbku\",\"principalId\":\"fqweykhmene\"},{\"name\":\"fyexfwhy\",\"principalId\":\"cibvyvdcsitynn\"},{\"name\":\"amdecte\",\"principalId\":\"f\"}]},\"location\":\"scjeypv\",\"tags\":{\"gm\":\"rkgqhcjrefo\",\"yyvxyqjpkcattpn\":\"qsl\",\"v\":\"jcrcczsqpjhvmda\",\"q\":\"ysou\"},\"id\":\"a\",\"name\":\"oaeupfhyhltrpmo\",\"type\":\"jmcmatuokthfu\"},{\"identity\":{\"principalId\":\"odsfcpkvxodpuozm\",\"tenantId\":\"ydagfuaxbe\",\"type\":\"None\",\"userAssignedIdentities\":{\"ywqsmbsurexim\":{\"principalId\":\"ktwh\",\"clientId\":\"xw\"},\"ys\":{\"principalId\":\"yocf\",\"clientId\":\"ksymd\"},\"oczvy\":{\"principalId\":\"i\",\"clientId\":\"xhqyudxorrqnb\"}}},\"properties\":{\"provisioningState\":\"rvkdvjsllrm\",\"version\":\"d\",\"parameters\":{\"pnpulexxbczwtru\":\"t\",\"vsovmyokac\":\"iqzbq\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":false,\"maxPercentUnhealthyDeployedApplications\":1783138805,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":2100121858,\"maxPercentUnhealthyPartitionsPerService\":1196709774,\"maxPercentUnhealthyReplicasPerPartition\":950671055},\"serviceTypeHealthPolicyMap\":{\"flbvvnchrkcciwwz\":{\"maxPercentUnhealthyServices\":2009602222,\"maxPercentUnhealthyPartitionsPerService\":432282678,\"maxPercentUnhealthyReplicasPerPartition\":1280128063},\"hrsajiwkuofo\":{\"maxPercentUnhealthyServices\":970071122,\"maxPercentUnhealthyPartitionsPerService\":982290440,\"maxPercentUnhealthyReplicasPerPartition\":962380204},\"sauuimj\":{\"maxPercentUnhealthyServices\":364064517,\"maxPercentUnhealthyPartitionsPerService\":1637974204,\"maxPercentUnhealthyReplicasPerPartition\":1433992289},\"eduugi\":{\"maxPercentUnhealthyServices\":981074224,\"maxPercentUnhealthyPartitionsPerService\":1194326763,\"maxPercentUnhealthyReplicasPerPartition\":586679230}}},\"forceRestart\":true,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Manual\",\"healthCheckWaitDuration\":\"f\",\"healthCheckStableDuration\":\"y\",\"healthCheckRetryTimeout\":\"osvexcsonpclhoc\",\"upgradeTimeout\":\"hslkevleggzf\",\"upgradeDomainTimeout\":\"u\"},\"instanceCloseDelayDuration\":5326513191162029025,\"upgradeMode\":\"Monitored\",\"upgradeReplicaSetCheckTimeout\":662353480914174128,\"recreateApplication\":true},\"managedIdentities\":[{\"name\":\"th\",\"principalId\":\"vmezy\"},{\"name\":\"shxmzsbbzoggigrx\",\"principalId\":\"burvjxxjnspy\"},{\"name\":\"ptkoenkoukn\",\"principalId\":\"udwtiukbl\"},{\"name\":\"ngkpocipazy\",\"principalId\":\"o\"}]},\"location\":\"ukgjnpiucgygevq\",\"tags\":{\"rbpizc\":\"yp\",\"j\":\"r\",\"yhxdeoejzicwi\":\"dpydn\",\"bkh\":\"sjttgzfbish\"},\"id\":\"deyeamdphagalpbu\",\"name\":\"wgipwhono\",\"type\":\"kgshwa\"},{\"identity\":{\"principalId\":\"xzbinjeputt\",\"tenantId\":\"ywnuzoq\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"ryavwhheunmmqh\":{\"principalId\":\"rnkcqvyxlw\",\"clientId\":\"lsicohoqqnwv\"},\"szfkbe\":{\"principalId\":\"xzko\",\"clientId\":\"cukoklyaxuconu\"},\"frzpwvlqdqgb\":{\"principalId\":\"ewrmjmwvvjektc\",\"clientId\":\"enhwlrs\"},\"jf\":{\"principalId\":\"ylihkaetckt\",\"clientId\":\"civfsnkymuctq\"}}},\"properties\":{\"provisioningState\":\"rjcxerfuwu\",\"version\":\"txfvjrbirph\",\"parameters\":{\"vahfn\":\"c\",\"xjvuujqgidokg\":\"jky\",\"sncghkjeszz\":\"ljyoxgvcltb\",\"mxnehmp\":\"bijhtxfvgxbf\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":1534633799,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":1976417253,\"maxPercentUnhealthyPartitionsPerService\":68854326,\"maxPercentUnhealthyReplicasPerPartition\":1592452117},\"serviceTypeHealthPolicyMap\":{\"bmpukgriwflz\":{\"maxPercentUnhealthyServices\":398257944,\"maxPercentUnhealthyPartitionsPerService\":898595537,\"maxPercentUnhealthyReplicasPerPartition\":156663672},\"zpuzycisp\":{\"maxPercentUnhealthyServices\":905507147,\"maxPercentUnhealthyPartitionsPerService\":595725350,\"maxPercentUnhealthyReplicasPerPartition\":294567134}}},\"forceRestart\":true,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Manual\",\"healthCheckWaitDuration\":\"mgkbrpyydhibn\",\"healthCheckStableDuration\":\"qqkpikadrg\",\"healthCheckRetryTimeout\":\"tqagnbuynh\",\"upgradeTimeout\":\"jggmebfsiarbu\",\"upgradeDomainTimeout\":\"rcvpnazzmhjrunmp\"},\"instanceCloseDelayDuration\":79694980854382594,\"upgradeMode\":\"UnmonitoredAuto\",\"upgradeReplicaSetCheckTimeout\":5309093572451246570,\"recreateApplication\":true},\"managedIdentities\":[{\"name\":\"xmyskp\",\"principalId\":\"henbtkcxywnytn\"}]},\"location\":\"yn\",\"tags\":{\"dbabp\":\"dybyxczfclhaa\",\"fkts\":\"lwrq\",\"nyyazttbtwwrqpue\":\"hsucoc\"},\"id\":\"kzywbiex\",\"name\":\"fey\",\"type\":\"eaxib\"},{\"identity\":{\"principalId\":\"wbhqwal\",\"tenantId\":\"zyoxaepdkzjan\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"dbpgnxytxhp\":{\"principalId\":\"wbavxbniwdj\",\"clientId\":\"zt\"},\"wtctyqi\":{\"principalId\":\"bzpfzab\",\"clientId\":\"cuh\"},\"kfplgmgsxnk\":{\"principalId\":\"bbovplwzbhvgyugu\",\"clientId\":\"vmkfssxqu\"},\"zb\":{\"principalId\":\"kde\",\"clientId\":\"pvlopwiyighxpkd\"}}},\"properties\":{\"provisioningState\":\"ebb\",\"version\":\"m\",\"parameters\":{\"txp\":\"upedeojnabckhs\",\"tfhvpesapskrdqmh\":\"ie\",\"tkncwsc\":\"jdhtldwkyzxu\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":1610345619,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":868520929,\"maxPercentUnhealthyPartitionsPerService\":1413439990,\"maxPercentUnhealthyReplicasPerPartition\":143506612},\"serviceTypeHealthPolicyMap\":{\"qsx\":{\"maxPercentUnhealthyServices\":918188408,\"maxPercentUnhealthyPartitionsPerService\":1309356083,\"maxPercentUnhealthyReplicasPerPartition\":354304408},\"cykvceo\":{\"maxPercentUnhealthyServices\":823053391,\"maxPercentUnhealthyPartitionsPerService\":1364621442,\"maxPercentUnhealthyReplicasPerPartition\":208644200},\"ovnotyfjfcnjbkcn\":{\"maxPercentUnhealthyServices\":579723655,\"maxPercentUnhealthyPartitionsPerService\":1739821364,\"maxPercentUnhealthyReplicasPerPartition\":512901185},\"ttkphywpnvjtoqne\":{\"maxPercentUnhealthyServices\":949474495,\"maxPercentUnhealthyPartitionsPerService\":95653514,\"maxPercentUnhealthyReplicasPerPartition\":898184523}}},\"forceRestart\":false,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Rollback\",\"healthCheckWaitDuration\":\"plpho\",\"healthCheckStableDuration\":\"uscrpabgyepsb\",\"healthCheckRetryTimeout\":\"tazqugxywpmueefj\",\"upgradeTimeout\":\"wfqkquj\",\"upgradeDomainTimeout\":\"dsuyonobgla\"},\"instanceCloseDelayDuration\":3064589321807470193,\"upgradeMode\":\"Monitored\",\"upgradeReplicaSetCheckTimeout\":7428332481829076684,\"recreateApplication\":true},\"managedIdentities\":[{\"name\":\"ytlmoyrxvwfud\",\"principalId\":\"pz\"}]},\"location\":\"xhdzhlrqjbhckf\",\"tags\":{\"ca\":\"rxsbkyvp\",\"b\":\"uzbpzkafku\"},\"id\":\"nwbmeh\",\"name\":\"seyvj\",\"type\":\"srtslhspkdeem\"}],\"nextLink\":\"fm\"}")
            .toObject(ApplicationResourceList.class);
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("scjeypv", model.value().get(0).location());
        Assertions.assertEquals("rkgqhcjrefo", model.value().get(0).tags().get("gm"));
        Assertions.assertEquals("mivkwlzuvcc", model.value().get(0).version());
        Assertions.assertEquals("fnba", model.value().get(0).parameters().get("fionl"));
        Assertions.assertEquals(true,
            model.value().get(0).upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(354708232,
            model.value().get(0).upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(1285754335,
            model.value()
                .get(0)
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(290307035,
            model.value()
                .get(0)
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(147839675,
            model.value()
                .get(0)
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(203992895,
            model.value()
                .get(0)
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("pdjpjumasxazjp")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(798552756,
            model.value()
                .get(0)
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("pdjpjumasxazjp")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(885958486,
            model.value()
                .get(0)
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("pdjpjumasxazjp")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(true, model.value().get(0).upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.ROLLBACK,
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("ftadehxnltyfs",
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("ppusuesnzwdejba",
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("orxzdmohctbqvud",
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("xdn",
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("nvowgujju",
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(8288430656102622571L,
            model.value().get(0).upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.MONITORED, model.value().get(0).upgradePolicy().upgradeMode());
        Assertions.assertEquals(4728072908166109395L,
            model.value().get(0).upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(false, model.value().get(0).upgradePolicy().recreateApplication());
        Assertions.assertEquals("dyggdtjixhbku", model.value().get(0).managedIdentities().get(0).name());
        Assertions.assertEquals("fqweykhmene", model.value().get(0).managedIdentities().get(0).principalId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationResourceList model
            = new ApplicationResourceList()
                .withValue(Arrays.asList(
                    new ApplicationResourceInner()
                        .withIdentity(new ManagedIdentity().withType(ManagedIdentityType.SYSTEM_ASSIGNED)
                            .withUserAssignedIdentities(mapOf("sxlzevgbmqj", new UserAssignedIdentity())))
                        .withLocation("scjeypv")
                        .withTags(
                            mapOf("gm", "rkgqhcjrefo", "yyvxyqjpkcattpn", "qsl", "v", "jcrcczsqpjhvmda", "q", "ysou"))
                        .withVersion("mivkwlzuvcc")
                        .withParameters(mapOf("fionl", "fnba", "bqqwxrj", "bxetqgtzxdpn", "mpmngnzscxaqwoo",
                            "eallnwsubisnj", "njeaseipheofloke", "hcbonqvpkvlr"))
                        .withUpgradePolicy(
                            new ApplicationUpgradePolicy()
                                .withApplicationHealthPolicy(
                                    new ApplicationHealthPolicy().withConsiderWarningAsError(true)
                                        .withMaxPercentUnhealthyDeployedApplications(354708232)
                                        .withDefaultServiceTypeHealthPolicy(
                                            new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1285754335)
                                                .withMaxPercentUnhealthyPartitionsPerService(290307035)
                                                .withMaxPercentUnhealthyReplicasPerPartition(147839675))
                                        .withServiceTypeHealthPolicyMap(mapOf("pdjpjumasxazjp",
                                            new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(203992895)
                                                .withMaxPercentUnhealthyPartitionsPerService(798552756)
                                                .withMaxPercentUnhealthyReplicasPerPartition(885958486),
                                            "ualhbxxhejj",
                                            new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1063088657)
                                                .withMaxPercentUnhealthyPartitionsPerService(184362773)
                                                .withMaxPercentUnhealthyReplicasPerPartition(973371108),
                                            "udgwdslfho",
                                            new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(2029322855)
                                                .withMaxPercentUnhealthyPartitionsPerService(57336706)
                                                .withMaxPercentUnhealthyReplicasPerPartition(873426494),
                                            "ynpwlbj",
                                            new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(719647330)
                                                .withMaxPercentUnhealthyPartitionsPerService(743935236)
                                                .withMaxPercentUnhealthyReplicasPerPartition(470013493))))
                                .withForceRestart(true)
                                .withRollingUpgradeMonitoringPolicy(
                                    new RollingUpgradeMonitoringPolicy().withFailureAction(FailureAction.ROLLBACK)
                                        .withHealthCheckWaitDuration("ftadehxnltyfs")
                                        .withHealthCheckStableDuration("ppusuesnzwdejba")
                                        .withHealthCheckRetryTimeout("orxzdmohctbqvud")
                                        .withUpgradeTimeout("xdn")
                                        .withUpgradeDomainTimeout("nvowgujju"))
                                .withInstanceCloseDelayDuration(8288430656102622571L)
                                .withUpgradeMode(RollingUpgradeMode.MONITORED)
                                .withUpgradeReplicaSetCheckTimeout(4728072908166109395L)
                                .withRecreateApplication(false))
                        .withManagedIdentities(Arrays
                            .asList(
                                new ApplicationUserAssignedIdentity().withName("dyggdtjixhbku")
                                    .withPrincipalId("fqweykhmene"),
                                new ApplicationUserAssignedIdentity().withName("fyexfwhy")
                                    .withPrincipalId("cibvyvdcsitynn"),
                                new ApplicationUserAssignedIdentity().withName("amdecte").withPrincipalId("f"))),
                    new ApplicationResourceInner()
                        .withIdentity(new ManagedIdentity().withType(ManagedIdentityType.NONE)
                            .withUserAssignedIdentities(mapOf("ywqsmbsurexim", new UserAssignedIdentity(), "ys",
                                new UserAssignedIdentity(), "oczvy", new UserAssignedIdentity())))
                        .withLocation("ukgjnpiucgygevq")
                        .withTags(mapOf("rbpizc", "yp", "j", "r", "yhxdeoejzicwi", "dpydn", "bkh", "sjttgzfbish"))
                        .withVersion("d")
                        .withParameters(mapOf("pnpulexxbczwtru", "t", "vsovmyokac", "iqzbq"))
                        .withUpgradePolicy(new ApplicationUpgradePolicy()
                            .withApplicationHealthPolicy(
                                new ApplicationHealthPolicy().withConsiderWarningAsError(false)
                                    .withMaxPercentUnhealthyDeployedApplications(1783138805)
                                    .withDefaultServiceTypeHealthPolicy(
                                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(2100121858)
                                            .withMaxPercentUnhealthyPartitionsPerService(1196709774)
                                            .withMaxPercentUnhealthyReplicasPerPartition(950671055))
                                    .withServiceTypeHealthPolicyMap(
                                        mapOf("flbvvnchrkcciwwz",
                                            new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(2009602222)
                                                .withMaxPercentUnhealthyPartitionsPerService(432282678)
                                                .withMaxPercentUnhealthyReplicasPerPartition(1280128063),
                                            "hrsajiwkuofo",
                                            new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(970071122)
                                                .withMaxPercentUnhealthyPartitionsPerService(982290440)
                                                .withMaxPercentUnhealthyReplicasPerPartition(962380204),
                                            "sauuimj",
                                            new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(364064517)
                                                .withMaxPercentUnhealthyPartitionsPerService(1637974204)
                                                .withMaxPercentUnhealthyReplicasPerPartition(1433992289),
                                            "eduugi",
                                            new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(981074224)
                                                .withMaxPercentUnhealthyPartitionsPerService(1194326763)
                                                .withMaxPercentUnhealthyReplicasPerPartition(586679230))))
                            .withForceRestart(true)
                            .withRollingUpgradeMonitoringPolicy(
                                new RollingUpgradeMonitoringPolicy()
                                    .withFailureAction(FailureAction.MANUAL)
                                    .withHealthCheckWaitDuration("f")
                                    .withHealthCheckStableDuration("y")
                                    .withHealthCheckRetryTimeout("osvexcsonpclhoc")
                                    .withUpgradeTimeout("hslkevleggzf")
                                    .withUpgradeDomainTimeout("u"))
                            .withInstanceCloseDelayDuration(5326513191162029025L)
                            .withUpgradeMode(RollingUpgradeMode.MONITORED)
                            .withUpgradeReplicaSetCheckTimeout(662353480914174128L)
                            .withRecreateApplication(true))
                        .withManagedIdentities(Arrays.asList(new ApplicationUserAssignedIdentity()
                            .withName("th")
                            .withPrincipalId("vmezy"),
                            new ApplicationUserAssignedIdentity()
                                .withName("shxmzsbbzoggigrx")
                                .withPrincipalId("burvjxxjnspy"),
                            new ApplicationUserAssignedIdentity().withName(
                                "ptkoenkoukn").withPrincipalId("udwtiukbl"),
                            new ApplicationUserAssignedIdentity().withName("ngkpocipazy").withPrincipalId("o"))),
                    new ApplicationResourceInner()
                        .withIdentity(new ManagedIdentity().withType(ManagedIdentityType.SYSTEM_ASSIGNED)
                            .withUserAssignedIdentities(mapOf("ryavwhheunmmqh", new UserAssignedIdentity(), "szfkbe",
                                new UserAssignedIdentity(), "frzpwvlqdqgb", new UserAssignedIdentity(), "jf",
                                new UserAssignedIdentity())))
                        .withLocation("yn")
                        .withTags(mapOf("dbabp", "dybyxczfclhaa", "fkts", "lwrq", "nyyazttbtwwrqpue", "hsucoc"))
                        .withVersion("txfvjrbirph")
                        .withParameters(
                            mapOf(
                                "vahfn", "c", "xjvuujqgidokg", "jky", "sncghkjeszz", "ljyoxgvcltb", "mxnehmp",
                                "bijhtxfvgxbf"))
                        .withUpgradePolicy(
                            new ApplicationUpgradePolicy()
                                .withApplicationHealthPolicy(
                                    new ApplicationHealthPolicy().withConsiderWarningAsError(true)
                                        .withMaxPercentUnhealthyDeployedApplications(1534633799)
                                        .withDefaultServiceTypeHealthPolicy(
                                            new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1976417253)
                                                .withMaxPercentUnhealthyPartitionsPerService(68854326)
                                                .withMaxPercentUnhealthyReplicasPerPartition(1592452117))
                                        .withServiceTypeHealthPolicyMap(
                                            mapOf("bmpukgriwflz",
                                                new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(398257944)
                                                    .withMaxPercentUnhealthyPartitionsPerService(898595537)
                                                    .withMaxPercentUnhealthyReplicasPerPartition(156663672),
                                                "zpuzycisp",
                                                new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(905507147)
                                                    .withMaxPercentUnhealthyPartitionsPerService(595725350)
                                                    .withMaxPercentUnhealthyReplicasPerPartition(294567134))))
                                .withForceRestart(true)
                                .withRollingUpgradeMonitoringPolicy(
                                    new RollingUpgradeMonitoringPolicy().withFailureAction(FailureAction.MANUAL)
                                        .withHealthCheckWaitDuration("mgkbrpyydhibn")
                                        .withHealthCheckStableDuration("qqkpikadrg")
                                        .withHealthCheckRetryTimeout("tqagnbuynh")
                                        .withUpgradeTimeout("jggmebfsiarbu")
                                        .withUpgradeDomainTimeout("rcvpnazzmhjrunmp"))
                                .withInstanceCloseDelayDuration(79694980854382594L)
                                .withUpgradeMode(RollingUpgradeMode.UNMONITORED_AUTO)
                                .withUpgradeReplicaSetCheckTimeout(5309093572451246570L)
                                .withRecreateApplication(true))
                        .withManagedIdentities(
                            Arrays
                                .asList(new ApplicationUserAssignedIdentity().withName("xmyskp")
                                    .withPrincipalId("henbtkcxywnytn"))),
                    new ApplicationResourceInner()
                        .withIdentity(
                            new ManagedIdentity().withType(ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                                .withUserAssignedIdentities(mapOf("dbpgnxytxhp", new UserAssignedIdentity(), "wtctyqi",
                                    new UserAssignedIdentity(), "kfplgmgsxnk", new UserAssignedIdentity(), "zb",
                                    new UserAssignedIdentity())))
                        .withLocation("xhdzhlrqjbhckf")
                        .withTags(mapOf("ca", "rxsbkyvp", "b", "uzbpzkafku"))
                        .withVersion("m")
                        .withParameters(
                            mapOf("txp", "upedeojnabckhs", "tfhvpesapskrdqmh", "ie", "tkncwsc", "jdhtldwkyzxu"))
                        .withUpgradePolicy(
                            new ApplicationUpgradePolicy()
                                .withApplicationHealthPolicy(
                                    new ApplicationHealthPolicy().withConsiderWarningAsError(true)
                                        .withMaxPercentUnhealthyDeployedApplications(1610345619)
                                        .withDefaultServiceTypeHealthPolicy(
                                            new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(868520929)
                                                .withMaxPercentUnhealthyPartitionsPerService(1413439990)
                                                .withMaxPercentUnhealthyReplicasPerPartition(143506612))
                                        .withServiceTypeHealthPolicyMap(mapOf("qsx",
                                            new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(918188408)
                                                .withMaxPercentUnhealthyPartitionsPerService(1309356083)
                                                .withMaxPercentUnhealthyReplicasPerPartition(354304408),
                                            "cykvceo",
                                            new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(823053391)
                                                .withMaxPercentUnhealthyPartitionsPerService(1364621442)
                                                .withMaxPercentUnhealthyReplicasPerPartition(208644200),
                                            "ovnotyfjfcnjbkcn",
                                            new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(579723655)
                                                .withMaxPercentUnhealthyPartitionsPerService(1739821364)
                                                .withMaxPercentUnhealthyReplicasPerPartition(512901185),
                                            "ttkphywpnvjtoqne",
                                            new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(949474495)
                                                .withMaxPercentUnhealthyPartitionsPerService(95653514)
                                                .withMaxPercentUnhealthyReplicasPerPartition(898184523))))
                                .withForceRestart(false)
                                .withRollingUpgradeMonitoringPolicy(
                                    new RollingUpgradeMonitoringPolicy().withFailureAction(FailureAction.ROLLBACK)
                                        .withHealthCheckWaitDuration("plpho")
                                        .withHealthCheckStableDuration("uscrpabgyepsb")
                                        .withHealthCheckRetryTimeout("tazqugxywpmueefj")
                                        .withUpgradeTimeout("wfqkquj")
                                        .withUpgradeDomainTimeout("dsuyonobgla"))
                                .withInstanceCloseDelayDuration(3064589321807470193L)
                                .withUpgradeMode(RollingUpgradeMode.MONITORED)
                                .withUpgradeReplicaSetCheckTimeout(7428332481829076684L)
                                .withRecreateApplication(true))
                        .withManagedIdentities(Arrays.asList(
                            new ApplicationUserAssignedIdentity().withName("ytlmoyrxvwfud").withPrincipalId("pz")))));
        model = BinaryData.fromObject(model).toObject(ApplicationResourceList.class);
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("scjeypv", model.value().get(0).location());
        Assertions.assertEquals("rkgqhcjrefo", model.value().get(0).tags().get("gm"));
        Assertions.assertEquals("mivkwlzuvcc", model.value().get(0).version());
        Assertions.assertEquals("fnba", model.value().get(0).parameters().get("fionl"));
        Assertions.assertEquals(true,
            model.value().get(0).upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(354708232,
            model.value().get(0).upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(1285754335,
            model.value()
                .get(0)
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(290307035,
            model.value()
                .get(0)
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(147839675,
            model.value()
                .get(0)
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(203992895,
            model.value()
                .get(0)
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("pdjpjumasxazjp")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(798552756,
            model.value()
                .get(0)
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("pdjpjumasxazjp")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(885958486,
            model.value()
                .get(0)
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("pdjpjumasxazjp")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(true, model.value().get(0).upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.ROLLBACK,
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("ftadehxnltyfs",
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("ppusuesnzwdejba",
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("orxzdmohctbqvud",
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("xdn",
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("nvowgujju",
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(8288430656102622571L,
            model.value().get(0).upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.MONITORED, model.value().get(0).upgradePolicy().upgradeMode());
        Assertions.assertEquals(4728072908166109395L,
            model.value().get(0).upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(false, model.value().get(0).upgradePolicy().recreateApplication());
        Assertions.assertEquals("dyggdtjixhbku", model.value().get(0).managedIdentities().get(0).name());
        Assertions.assertEquals("fqweykhmene", model.value().get(0).managedIdentities().get(0).principalId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
