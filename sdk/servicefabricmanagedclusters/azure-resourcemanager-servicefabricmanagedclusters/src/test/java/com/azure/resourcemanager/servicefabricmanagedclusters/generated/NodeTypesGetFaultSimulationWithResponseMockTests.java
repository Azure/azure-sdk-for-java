// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FaultSimulation;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FaultSimulationIdContent;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FaultSimulationStatus;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.SfmcOperationStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NodeTypesGetFaultSimulationWithResponseMockTests {
    @Test
    public void testGetFaultSimulationWithResponse() throws Exception {
        String responseStr
            = "{\"simulationId\":\"qpswokmvkhlggdhb\",\"status\":\"StartFailed\",\"startTime\":\"2021-11-19T21:48:38Z\",\"endTime\":\"2021-10-24T18:45:15Z\",\"details\":{\"clusterId\":\"wiwtglxxhl\",\"operationId\":\"pg\",\"nodeTypeFaultSimulation\":[{\"nodeTypeName\":\"mnzhrgmqg\",\"status\":\"Starting\",\"operationId\":\"pqcbfrmbodthsq\",\"operationStatus\":\"Succeeded\"},{\"nodeTypeName\":\"iibakcl\",\"status\":\"StartFailed\",\"operationId\":\"rnxousxauzlwvsg\",\"operationStatus\":\"Aborted\"},{\"nodeTypeName\":\"qf\",\"status\":\"Starting\",\"operationId\":\"uxmmkjsvthnwp\",\"operationStatus\":\"Canceled\"},{\"nodeTypeName\":\"ovmribiattg\",\"status\":\"Active\",\"operationId\":\"fotang\",\"operationStatus\":\"Canceled\"}],\"parameters\":{\"faultKind\":\"FaultSimulationContent\",\"force\":false,\"constraints\":{\"expirationTime\":\"2021-04-07T10:16:52Z\"}}}}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServiceFabricManagedClustersManager manager = ServiceFabricManagedClustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        FaultSimulation response = manager.nodeTypes()
            .getFaultSimulationWithResponse("hgovfgp", "kqmhhaowjr", "zvuporqzdfuydz",
                new FaultSimulationIdContent().withSimulationId("kfvxcnq"), com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("qpswokmvkhlggdhb", response.simulationId());
        Assertions.assertEquals(FaultSimulationStatus.START_FAILED, response.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-19T21:48:38Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-24T18:45:15Z"), response.endTime());
        Assertions.assertEquals("wiwtglxxhl", response.details().clusterId());
        Assertions.assertEquals("pg", response.details().operationId());
        Assertions.assertEquals("mnzhrgmqg", response.details().nodeTypeFaultSimulation().get(0).nodeTypeName());
        Assertions.assertEquals(FaultSimulationStatus.STARTING,
            response.details().nodeTypeFaultSimulation().get(0).status());
        Assertions.assertEquals("pqcbfrmbodthsq", response.details().nodeTypeFaultSimulation().get(0).operationId());
        Assertions.assertEquals(SfmcOperationStatus.SUCCEEDED,
            response.details().nodeTypeFaultSimulation().get(0).operationStatus());
        Assertions.assertFalse(response.details().parameters().force());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-07T10:16:52Z"),
            response.details().parameters().constraints().expirationTime());
    }
}
