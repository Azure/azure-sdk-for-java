// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.AdditionalNetworkInterfaceConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpConfigurationPublicIpAddressConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpTag;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PrivateIpAddressVersion;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PublicIpAddressVersion;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AdditionalNetworkInterfaceConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AdditionalNetworkInterfaceConfiguration model = BinaryData.fromString(
            "{\"name\":\"egxuvwzf\",\"enableAcceleratedNetworking\":true,\"dscpConfiguration\":{\"id\":\"ctlpdngitvgb\"},\"ipConfigurations\":[{\"name\":\"rixkwmyijejve\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"pna\"},{\"id\":\"exccbdreaxhcexd\"},{\"id\":\"vqahqkghtpwi\"},{\"id\":\"hyjsvfycx\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"oowvrv\"},{\"id\":\"gjqppy\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"on\"},{\"id\":\"yhgfipnsx\"},{\"id\":\"cwaekrrjre\"}],\"subnet\":{\"id\":\"tsgumhj\"},\"privateIPAddressVersion\":\"IPv4\",\"publicIPAddressConfiguration\":{\"name\":\"kxw\",\"ipTags\":[{\"ipTagType\":\"lbqpvuzlmvfelf\",\"tag\":\"tgp\"}],\"publicIPAddressVersion\":\"IPv4\"}},{\"name\":\"pwjxezn\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"rnjwmw\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"saz\"},{\"id\":\"joqkagfhsxt\"},{\"id\":\"ugzxnf\"},{\"id\":\"zpxdt\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"kqjjlwuenvrkp\"}],\"subnet\":{\"id\":\"aibrebqaaysjkixq\"},\"privateIPAddressVersion\":\"IPv6\",\"publicIPAddressConfiguration\":{\"name\":\"tezlwff\",\"ipTags\":[{\"ipTagType\":\"kpj\",\"tag\":\"qqmtedltmmji\"},{\"ipTagType\":\"yeozphvwauyqncy\",\"tag\":\"upkvipmdsc\"},{\"ipTagType\":\"xqupevzhf\",\"tag\":\"totxhojujb\"},{\"ipTagType\":\"pelmcuvhixbjxyf\",\"tag\":\"n\"}],\"publicIPAddressVersion\":\"IPv4\"}}]}")
            .toObject(AdditionalNetworkInterfaceConfiguration.class);
        Assertions.assertEquals("egxuvwzf", model.name());
        Assertions.assertTrue(model.enableAcceleratedNetworking());
        Assertions.assertEquals("ctlpdngitvgb", model.dscpConfiguration().id());
        Assertions.assertEquals("rixkwmyijejve", model.ipConfigurations().get(0).name());
        Assertions.assertEquals("pna",
            model.ipConfigurations().get(0).applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("oowvrv",
            model.ipConfigurations().get(0).loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("on", model.ipConfigurations().get(0).loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals("tsgumhj", model.ipConfigurations().get(0).subnet().id());
        Assertions.assertEquals(PrivateIpAddressVersion.IPV4,
            model.ipConfigurations().get(0).privateIpAddressVersion());
        Assertions.assertEquals("kxw", model.ipConfigurations().get(0).publicIpAddressConfiguration().name());
        Assertions.assertEquals("lbqpvuzlmvfelf",
            model.ipConfigurations().get(0).publicIpAddressConfiguration().ipTags().get(0).ipTagType());
        Assertions.assertEquals("tgp",
            model.ipConfigurations().get(0).publicIpAddressConfiguration().ipTags().get(0).tag());
        Assertions.assertEquals(PublicIpAddressVersion.IPV4,
            model.ipConfigurations().get(0).publicIpAddressConfiguration().publicIpAddressVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AdditionalNetworkInterfaceConfiguration model
            = new AdditionalNetworkInterfaceConfiguration().withName("egxuvwzf")
                .withEnableAcceleratedNetworking(true)
                .withDscpConfiguration(new SubResource().withId("ctlpdngitvgb"))
                .withIpConfigurations(
                    Arrays
                        .asList(
                            new IpConfiguration().withName("rixkwmyijejve")
                                .withApplicationGatewayBackendAddressPools(Arrays.asList(
                                    new SubResource().withId("pna"), new SubResource().withId("exccbdreaxhcexd"),
                                    new SubResource().withId("vqahqkghtpwi"), new SubResource().withId("hyjsvfycx")))
                                .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("oowvrv"),
                                    new SubResource().withId("gjqppy")))
                                .withLoadBalancerInboundNatPools(Arrays.asList(
                                    new SubResource().withId("on"), new SubResource().withId("yhgfipnsx"),
                                    new SubResource().withId("cwaekrrjre")))
                                .withSubnet(new SubResource().withId("tsgumhj"))
                                .withPrivateIpAddressVersion(PrivateIpAddressVersion.IPV4)
                                .withPublicIpAddressConfiguration(new IpConfigurationPublicIpAddressConfiguration()
                                    .withName("kxw")
                                    .withIpTags(
                                        Arrays.asList(new IpTag().withIpTagType("lbqpvuzlmvfelf").withTag("tgp")))
                                    .withPublicIpAddressVersion(PublicIpAddressVersion.IPV4)),
                            new IpConfiguration().withName("pwjxezn")
                                .withApplicationGatewayBackendAddressPools(
                                    Arrays.asList(new SubResource().withId("rnjwmw")))
                                .withLoadBalancerBackendAddressPools(Arrays.asList(
                                    new SubResource().withId("saz"), new SubResource().withId("joqkagfhsxt"),
                                    new SubResource().withId("ugzxnf"), new SubResource().withId("zpxdt")))
                                .withLoadBalancerInboundNatPools(
                                    Arrays.asList(new SubResource().withId("kqjjlwuenvrkp")))
                                .withSubnet(new SubResource().withId("aibrebqaaysjkixq"))
                                .withPrivateIpAddressVersion(PrivateIpAddressVersion.IPV6)
                                .withPublicIpAddressConfiguration(new IpConfigurationPublicIpAddressConfiguration()
                                    .withName("tezlwff")
                                    .withIpTags(Arrays.asList(new IpTag().withIpTagType("kpj").withTag("qqmtedltmmji"),
                                        new IpTag().withIpTagType("yeozphvwauyqncy").withTag("upkvipmdsc"),
                                        new IpTag().withIpTagType("xqupevzhf").withTag("totxhojujb"),
                                        new IpTag().withIpTagType("pelmcuvhixbjxyf").withTag("n")))
                                    .withPublicIpAddressVersion(PublicIpAddressVersion.IPV4))));
        model = BinaryData.fromObject(model).toObject(AdditionalNetworkInterfaceConfiguration.class);
        Assertions.assertEquals("egxuvwzf", model.name());
        Assertions.assertTrue(model.enableAcceleratedNetworking());
        Assertions.assertEquals("ctlpdngitvgb", model.dscpConfiguration().id());
        Assertions.assertEquals("rixkwmyijejve", model.ipConfigurations().get(0).name());
        Assertions.assertEquals("pna",
            model.ipConfigurations().get(0).applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("oowvrv",
            model.ipConfigurations().get(0).loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("on", model.ipConfigurations().get(0).loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals("tsgumhj", model.ipConfigurations().get(0).subnet().id());
        Assertions.assertEquals(PrivateIpAddressVersion.IPV4,
            model.ipConfigurations().get(0).privateIpAddressVersion());
        Assertions.assertEquals("kxw", model.ipConfigurations().get(0).publicIpAddressConfiguration().name());
        Assertions.assertEquals("lbqpvuzlmvfelf",
            model.ipConfigurations().get(0).publicIpAddressConfiguration().ipTags().get(0).ipTagType());
        Assertions.assertEquals("tgp",
            model.ipConfigurations().get(0).publicIpAddressConfiguration().ipTags().get(0).tag());
        Assertions.assertEquals(PublicIpAddressVersion.IPV4,
            model.ipConfigurations().get(0).publicIpAddressConfiguration().publicIpAddressVersion());
    }
}
