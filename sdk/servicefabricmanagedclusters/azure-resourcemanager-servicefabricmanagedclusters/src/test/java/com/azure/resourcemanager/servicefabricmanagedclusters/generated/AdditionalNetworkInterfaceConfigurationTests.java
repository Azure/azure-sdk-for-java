// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.AdditionalNetworkInterfaceConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpConfigurationPublicIpAddressConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpTag;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PrivateIpAddressVersion;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PublicIpAddressVersion;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AdditionalNetworkInterfaceConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AdditionalNetworkInterfaceConfiguration model = BinaryData.fromString(
            "{\"name\":\"fkbw\",\"enableAcceleratedNetworking\":true,\"dscpConfiguration\":{\"id\":\"vcdwxlpqekftn\"},\"ipConfigurations\":[{\"name\":\"tjsyin\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"atmtdhtmdvy\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"dgszywkbirryuzh\"},{\"id\":\"kj\"},{\"id\":\"rvqqaatj\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"goupmfiibfg\"}],\"subnet\":{\"id\":\"ool\"},\"privateIPAddressVersion\":\"IPv6\",\"publicIPAddressConfiguration\":{\"name\":\"kvtkkg\",\"ipTags\":[{\"ipTagType\":\"wjygvjayvblmhvk\",\"tag\":\"uhbxvvy\"},{\"ipTagType\":\"gsopbyrqufegxu\",\"tag\":\"wz\"}],\"publicIPAddressVersion\":\"IPv6\"}},{\"name\":\"hlmctlpdngitvgb\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"xkw\"},{\"id\":\"ijejvegrhbpn\"},{\"id\":\"xexccbdreaxhcexd\"},{\"id\":\"vqahqkghtpwi\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"jsvfycxzbfvoowv\"},{\"id\":\"mtg\"},{\"id\":\"ppyostronzmyhgf\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"xkmcwaekrrjre\"},{\"id\":\"xt\"},{\"id\":\"umh\"},{\"id\":\"lik\"}],\"subnet\":{\"id\":\"slol\"},\"privateIPAddressVersion\":\"IPv4\",\"publicIPAddressConfiguration\":{\"name\":\"uzlm\",\"ipTags\":[{\"ipTagType\":\"lfktgplcrpwjxe\",\"tag\":\"noigbrnjwmwk\"}],\"publicIPAddressVersion\":\"IPv6\"}}]}")
            .toObject(AdditionalNetworkInterfaceConfiguration.class);
        Assertions.assertEquals("fkbw", model.name());
        Assertions.assertEquals(true, model.enableAcceleratedNetworking());
        Assertions.assertEquals("vcdwxlpqekftn", model.dscpConfiguration().id());
        Assertions.assertEquals("tjsyin", model.ipConfigurations().get(0).name());
        Assertions.assertEquals("atmtdhtmdvy",
            model.ipConfigurations().get(0).applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("dgszywkbirryuzh",
            model.ipConfigurations().get(0).loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("goupmfiibfg",
            model.ipConfigurations().get(0).loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals("ool", model.ipConfigurations().get(0).subnet().id());
        Assertions.assertEquals(PrivateIpAddressVersion.IPV6,
            model.ipConfigurations().get(0).privateIpAddressVersion());
        Assertions.assertEquals("kvtkkg", model.ipConfigurations().get(0).publicIpAddressConfiguration().name());
        Assertions.assertEquals("wjygvjayvblmhvk",
            model.ipConfigurations().get(0).publicIpAddressConfiguration().ipTags().get(0).ipTagType());
        Assertions.assertEquals("uhbxvvy",
            model.ipConfigurations().get(0).publicIpAddressConfiguration().ipTags().get(0).tag());
        Assertions.assertEquals(PublicIpAddressVersion.IPV6,
            model.ipConfigurations().get(0).publicIpAddressConfiguration().publicIpAddressVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AdditionalNetworkInterfaceConfiguration model
            = new AdditionalNetworkInterfaceConfiguration().withName("fkbw")
                .withEnableAcceleratedNetworking(true)
                .withDscpConfiguration(new SubResource().withId("vcdwxlpqekftn"))
                .withIpConfigurations(Arrays.asList(new IpConfiguration().withName("tjsyin")
                    .withApplicationGatewayBackendAddressPools(Arrays.asList(new SubResource().withId("atmtdhtmdvy")))
                    .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("dgszywkbirryuzh"),
                        new SubResource().withId("kj"), new SubResource().withId("rvqqaatj")))
                    .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("goupmfiibfg")))
                    .withSubnet(new SubResource().withId("ool"))
                    .withPrivateIpAddressVersion(PrivateIpAddressVersion.IPV6)
                    .withPublicIpAddressConfiguration(new IpConfigurationPublicIpAddressConfiguration()
                        .withName("kvtkkg")
                        .withIpTags(Arrays.asList(new IpTag().withIpTagType("wjygvjayvblmhvk").withTag("uhbxvvy"),
                            new IpTag().withIpTagType("gsopbyrqufegxu").withTag("wz")))
                        .withPublicIpAddressVersion(PublicIpAddressVersion.IPV6)),
                    new IpConfiguration().withName("hlmctlpdngitvgb")
                        .withApplicationGatewayBackendAddressPools(
                            Arrays.asList(new SubResource().withId("xkw"), new SubResource().withId("ijejvegrhbpn"),
                                new SubResource().withId("xexccbdreaxhcexd"), new SubResource().withId("vqahqkghtpwi")))
                        .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("jsvfycxzbfvoowv"),
                            new SubResource().withId("mtg"), new SubResource().withId("ppyostronzmyhgf")))
                        .withLoadBalancerInboundNatPools(
                            Arrays.asList(new SubResource().withId("xkmcwaekrrjre"), new SubResource().withId("xt"),
                                new SubResource().withId("umh"), new SubResource().withId("lik")))
                        .withSubnet(new SubResource().withId("slol"))
                        .withPrivateIpAddressVersion(PrivateIpAddressVersion.IPV4)
                        .withPublicIpAddressConfiguration(
                            new IpConfigurationPublicIpAddressConfiguration().withName("uzlm")
                                .withIpTags(
                                    Arrays.asList(new IpTag().withIpTagType("lfktgplcrpwjxe").withTag("noigbrnjwmwk")))
                                .withPublicIpAddressVersion(PublicIpAddressVersion.IPV6))));
        model = BinaryData.fromObject(model).toObject(AdditionalNetworkInterfaceConfiguration.class);
        Assertions.assertEquals("fkbw", model.name());
        Assertions.assertEquals(true, model.enableAcceleratedNetworking());
        Assertions.assertEquals("vcdwxlpqekftn", model.dscpConfiguration().id());
        Assertions.assertEquals("tjsyin", model.ipConfigurations().get(0).name());
        Assertions.assertEquals("atmtdhtmdvy",
            model.ipConfigurations().get(0).applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("dgszywkbirryuzh",
            model.ipConfigurations().get(0).loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("goupmfiibfg",
            model.ipConfigurations().get(0).loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals("ool", model.ipConfigurations().get(0).subnet().id());
        Assertions.assertEquals(PrivateIpAddressVersion.IPV6,
            model.ipConfigurations().get(0).privateIpAddressVersion());
        Assertions.assertEquals("kvtkkg", model.ipConfigurations().get(0).publicIpAddressConfiguration().name());
        Assertions.assertEquals("wjygvjayvblmhvk",
            model.ipConfigurations().get(0).publicIpAddressConfiguration().ipTags().get(0).ipTagType());
        Assertions.assertEquals("uhbxvvy",
            model.ipConfigurations().get(0).publicIpAddressConfiguration().ipTags().get(0).tag());
        Assertions.assertEquals(PublicIpAddressVersion.IPV6,
            model.ipConfigurations().get(0).publicIpAddressConfiguration().publicIpAddressVersion());
    }
}
