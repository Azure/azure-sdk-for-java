// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpConfigurationPublicIpAddressConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpTag;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PublicIpAddressVersion;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class IpConfigurationPublicIpAddressConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IpConfigurationPublicIpAddressConfiguration model = BinaryData.fromString(
            "{\"name\":\"hxjbdhqxvc\",\"ipTags\":[{\"ipTagType\":\"rpdsof\",\"tag\":\"shrnsvbuswdvz\"},{\"ipTagType\":\"ybycnunvj\",\"tag\":\"rtkfawnopq\"},{\"ipTagType\":\"ikyzirtxdy\",\"tag\":\"x\"},{\"ipTagType\":\"ejnt\",\"tag\":\"sewgioilqukr\"}],\"publicIPAddressVersion\":\"IPv6\"}")
            .toObject(IpConfigurationPublicIpAddressConfiguration.class);
        Assertions.assertEquals("hxjbdhqxvc", model.name());
        Assertions.assertEquals("rpdsof", model.ipTags().get(0).ipTagType());
        Assertions.assertEquals("shrnsvbuswdvz", model.ipTags().get(0).tag());
        Assertions.assertEquals(PublicIpAddressVersion.IPV6, model.publicIpAddressVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IpConfigurationPublicIpAddressConfiguration model
            = new IpConfigurationPublicIpAddressConfiguration().withName("hxjbdhqxvc")
                .withIpTags(Arrays.asList(new IpTag().withIpTagType("rpdsof").withTag("shrnsvbuswdvz"),
                    new IpTag().withIpTagType("ybycnunvj").withTag("rtkfawnopq"),
                    new IpTag().withIpTagType("ikyzirtxdy").withTag("x"),
                    new IpTag().withIpTagType("ejnt").withTag("sewgioilqukr")))
                .withPublicIpAddressVersion(PublicIpAddressVersion.IPV6);
        model = BinaryData.fromObject(model).toObject(IpConfigurationPublicIpAddressConfiguration.class);
        Assertions.assertEquals("hxjbdhqxvc", model.name());
        Assertions.assertEquals("rpdsof", model.ipTags().get(0).ipTagType());
        Assertions.assertEquals("shrnsvbuswdvz", model.ipTags().get(0).tag());
        Assertions.assertEquals(PublicIpAddressVersion.IPV6, model.publicIpAddressVersion());
    }
}
