// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationResource;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentityType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApplicationsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"identity\":{\"principalId\":\"zwwva\",\"tenantId\":\"yuvvfonkp\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"jfybvpoekrsgsgb\":{\"principalId\":\"vyl\",\"clientId\":\"yavluwmncstt\"},\"u\":{\"principalId\":\"uzqgnjdgkynsc\",\"clientId\":\"qhzvhxnkomt\"},\"hihfrbbcevqagtlt\":{\"principalId\":\"tppn\",\"clientId\":\"xz\"}}},\"properties\":{\"provisioningState\":\"fkqojpy\",\"version\":\"gtrd\",\"parameters\":{\"u\":\"fmzzsdymbrny\",\"rafwgckhocxvdf\":\"m\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":false,\"maxPercentUnhealthyDeployedApplications\":2125328140,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":817502277,\"maxPercentUnhealthyPartitionsPerService\":1487295222,\"maxPercentUnhealthyReplicasPerPartition\":478345716},\"serviceTypeHealthPolicyMap\":{\"vehhrvkbunzozu\":{\"maxPercentUnhealthyServices\":1181286444,\"maxPercentUnhealthyPartitionsPerService\":1715905241,\"maxPercentUnhealthyReplicasPerPartition\":1222177326},\"gkmoyxcdyuibhmfd\":{\"maxPercentUnhealthyServices\":83009194,\"maxPercentUnhealthyPartitionsPerService\":1288828831,\"maxPercentUnhealthyReplicasPerPartition\":529725461},\"dvfvfcjnaeoi\":{\"maxPercentUnhealthyServices\":485824562,\"maxPercentUnhealthyPartitionsPerService\":1709399278,\"maxPercentUnhealthyReplicasPerPartition\":566054970}}},\"forceRestart\":true,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Manual\",\"healthCheckWaitDuration\":\"gorf\",\"healthCheckStableDuration\":\"ukiscvwmzhw\",\"healthCheckRetryTimeout\":\"lefaxvxilcbtgn\",\"upgradeTimeout\":\"nzeyqxtjj\",\"upgradeDomainTimeout\":\"zqlqhyc\"},\"instanceCloseDelayDuration\":5723107305457726776,\"upgradeMode\":\"UnmonitoredAuto\",\"upgradeReplicaSetCheckTimeout\":8144209061033072751,\"recreateApplication\":false},\"managedIdentities\":[{\"name\":\"ieknl\",\"principalId\":\"ariaawi\"},{\"name\":\"agy\",\"principalId\":\"wqfbylyrfgiagt\"},{\"name\":\"ojocqwogf\",\"principalId\":\"zjvusfzldmo\"}]},\"location\":\"xylfsb\",\"tags\":{\"s\":\"dp\",\"tgkbugrjqctojc\":\"wn\",\"cuplcplcwkhih\":\"isofieypefojyqd\"},\"id\":\"lhzdsqtzb\",\"name\":\"rgnowcjhfgm\",\"type\":\"ecactx\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServiceFabricManagedClustersManager manager = ServiceFabricManagedClustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ApplicationResource response = manager.applications()
            .getWithResponse("jlmxhomdynhd", "digumbnr", "auzzptjazysd", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals("xylfsb", response.location());
        Assertions.assertEquals("dp", response.tags().get("s"));
        Assertions.assertEquals("gtrd", response.version());
        Assertions.assertEquals("fmzzsdymbrny", response.parameters().get("u"));
        Assertions.assertEquals(false, response.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(2125328140,
            response.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(817502277,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(1487295222,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(478345716,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(1181286444,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("vehhrvkbunzozu")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(1715905241,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("vehhrvkbunzozu")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1222177326,
            response.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("vehhrvkbunzozu")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(true, response.upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.MANUAL,
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("gorf",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("ukiscvwmzhw",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("lefaxvxilcbtgn",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("nzeyqxtjj",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("zqlqhyc",
            response.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(5723107305457726776L, response.upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.UNMONITORED_AUTO, response.upgradePolicy().upgradeMode());
        Assertions.assertEquals(8144209061033072751L, response.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(false, response.upgradePolicy().recreateApplication());
        Assertions.assertEquals("ieknl", response.managedIdentities().get(0).name());
        Assertions.assertEquals("ariaawi", response.managedIdentities().get(0).principalId());
    }
}
