// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.ApplicationResourceProperties;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUpgradePolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUserAssignedIdentity;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMonitoringPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceTypeHealthPolicy;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationResourcePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationResourceProperties model = BinaryData.fromString(
            "{\"managedIdentities\":[{\"name\":\"bljofxqeof\",\"principalId\":\"aeqjhqjbasvms\"},{\"name\":\"jqul\",\"principalId\":\"gsntnbybkzgcwr\"},{\"name\":\"clxxwrljdo\",\"principalId\":\"skcqvkocrcjd\"}],\"provisioningState\":\"tnhxbn\",\"version\":\"iksqr\",\"parameters\":{\"jfm\":\"sainqpjwnzl\",\"vmgxsab\":\"pee\",\"jczdzevndh\":\"yqduujit\",\"feusnhut\":\"rwpdappdsbdkvwrw\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":1438650135,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":1403309762,\"maxPercentUnhealthyPartitionsPerService\":1969626150,\"maxPercentUnhealthyReplicasPerPartition\":1554551214},\"serviceTypeHealthPolicyMap\":{\"datqxhocdgeabl\":{\"maxPercentUnhealthyServices\":885785432,\"maxPercentUnhealthyPartitionsPerService\":768645194,\"maxPercentUnhealthyReplicasPerPartition\":700845418},\"ti\":{\"maxPercentUnhealthyServices\":950218840,\"maxPercentUnhealthyPartitionsPerService\":743985587,\"maxPercentUnhealthyReplicasPerPartition\":1780121294},\"kao\":{\"maxPercentUnhealthyServices\":732372528,\"maxPercentUnhealthyPartitionsPerService\":1686468499,\"maxPercentUnhealthyReplicasPerPartition\":1906017395},\"ftyhxhurokf\":{\"maxPercentUnhealthyServices\":563001635,\"maxPercentUnhealthyPartitionsPerService\":794319729,\"maxPercentUnhealthyReplicasPerPartition\":191194169}}},\"forceRestart\":true,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Manual\",\"healthCheckWaitDuration\":\"niwpwcukj\",\"healthCheckStableDuration\":\"kgiawxklryplwck\",\"healthCheckRetryTimeout\":\"asy\",\"upgradeTimeout\":\"pnddhsgcbacphejk\",\"upgradeDomainTimeout\":\"tynqgoul\"},\"instanceCloseDelayDuration\":7414415244733607086,\"upgradeMode\":\"Monitored\",\"upgradeReplicaSetCheckTimeout\":6280199240757284109,\"recreateApplication\":false}}")
            .toObject(ApplicationResourceProperties.class);
        Assertions.assertEquals("bljofxqeof", model.managedIdentities().get(0).name());
        Assertions.assertEquals("aeqjhqjbasvms", model.managedIdentities().get(0).principalId());
        Assertions.assertEquals("iksqr", model.version());
        Assertions.assertEquals("sainqpjwnzl", model.parameters().get("jfm"));
        Assertions.assertTrue(model.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(1438650135,
            model.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(1403309762,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(1969626150,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1554551214,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(885785432,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("datqxhocdgeabl")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(768645194,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("datqxhocdgeabl")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(700845418,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("datqxhocdgeabl")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertTrue(model.upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.MANUAL,
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("niwpwcukj",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("kgiawxklryplwck",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("asy",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("pnddhsgcbacphejk",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("tynqgoul",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(7414415244733607086L, model.upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.MONITORED, model.upgradePolicy().upgradeMode());
        Assertions.assertEquals(6280199240757284109L, model.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertFalse(model.upgradePolicy().recreateApplication());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationResourceProperties model = new ApplicationResourceProperties()
            .withManagedIdentities(Arrays.asList(
                new ApplicationUserAssignedIdentity().withName("bljofxqeof").withPrincipalId("aeqjhqjbasvms"),
                new ApplicationUserAssignedIdentity().withName("jqul").withPrincipalId("gsntnbybkzgcwr"),
                new ApplicationUserAssignedIdentity().withName("clxxwrljdo").withPrincipalId("skcqvkocrcjd")))
            .withVersion("iksqr")
            .withParameters(
                mapOf("jfm", "sainqpjwnzl", "vmgxsab", "pee", "jczdzevndh", "yqduujit", "feusnhut", "rwpdappdsbdkvwrw"))
            .withUpgradePolicy(new ApplicationUpgradePolicy()
                .withApplicationHealthPolicy(new ApplicationHealthPolicy().withConsiderWarningAsError(true)
                    .withMaxPercentUnhealthyDeployedApplications(1438650135)
                    .withDefaultServiceTypeHealthPolicy(
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1403309762)
                            .withMaxPercentUnhealthyPartitionsPerService(1969626150)
                            .withMaxPercentUnhealthyReplicasPerPartition(1554551214))
                    .withServiceTypeHealthPolicyMap(mapOf("datqxhocdgeabl",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(885785432)
                            .withMaxPercentUnhealthyPartitionsPerService(768645194)
                            .withMaxPercentUnhealthyReplicasPerPartition(700845418),
                        "ti",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(950218840)
                            .withMaxPercentUnhealthyPartitionsPerService(743985587)
                            .withMaxPercentUnhealthyReplicasPerPartition(1780121294),
                        "kao",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(732372528)
                            .withMaxPercentUnhealthyPartitionsPerService(1686468499)
                            .withMaxPercentUnhealthyReplicasPerPartition(1906017395),
                        "ftyhxhurokf",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(563001635)
                            .withMaxPercentUnhealthyPartitionsPerService(794319729)
                            .withMaxPercentUnhealthyReplicasPerPartition(191194169))))
                .withForceRestart(true)
                .withRollingUpgradeMonitoringPolicy(
                    new RollingUpgradeMonitoringPolicy().withFailureAction(FailureAction.MANUAL)
                        .withHealthCheckWaitDuration("niwpwcukj")
                        .withHealthCheckStableDuration("kgiawxklryplwck")
                        .withHealthCheckRetryTimeout("asy")
                        .withUpgradeTimeout("pnddhsgcbacphejk")
                        .withUpgradeDomainTimeout("tynqgoul"))
                .withInstanceCloseDelayDuration(7414415244733607086L)
                .withUpgradeMode(RollingUpgradeMode.MONITORED)
                .withUpgradeReplicaSetCheckTimeout(6280199240757284109L)
                .withRecreateApplication(false));
        model = BinaryData.fromObject(model).toObject(ApplicationResourceProperties.class);
        Assertions.assertEquals("bljofxqeof", model.managedIdentities().get(0).name());
        Assertions.assertEquals("aeqjhqjbasvms", model.managedIdentities().get(0).principalId());
        Assertions.assertEquals("iksqr", model.version());
        Assertions.assertEquals("sainqpjwnzl", model.parameters().get("jfm"));
        Assertions.assertTrue(model.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(1438650135,
            model.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(1403309762,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(1969626150,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1554551214,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(885785432,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("datqxhocdgeabl")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(768645194,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("datqxhocdgeabl")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(700845418,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("datqxhocdgeabl")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertTrue(model.upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.MANUAL,
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("niwpwcukj",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("kgiawxklryplwck",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("asy",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("pnddhsgcbacphejk",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("tynqgoul",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(7414415244733607086L, model.upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.MONITORED, model.upgradePolicy().upgradeMode());
        Assertions.assertEquals(6280199240757284109L, model.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertFalse(model.upgradePolicy().recreateApplication());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
