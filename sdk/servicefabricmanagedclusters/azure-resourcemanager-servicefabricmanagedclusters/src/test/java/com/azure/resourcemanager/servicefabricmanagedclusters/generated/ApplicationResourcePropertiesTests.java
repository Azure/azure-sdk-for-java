// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.ApplicationResourceProperties;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUpgradePolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUserAssignedIdentity;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMonitoringPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceTypeHealthPolicy;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationResourcePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationResourceProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"dwzjeiach\",\"version\":\"osfln\",\"parameters\":{\"hzzvypyq\":\"fqpte\",\"z\":\"i\",\"dqxhcrmnohjtckwh\":\"npvswjdkirso\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":1580515344,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":614073164,\"maxPercentUnhealthyPartitionsPerService\":62079989,\"maxPercentUnhealthyReplicasPerPartition\":1667085881},\"serviceTypeHealthPolicyMap\":{\"pgrjbz\":{\"maxPercentUnhealthyServices\":1921161938,\"maxPercentUnhealthyPartitionsPerService\":17169424,\"maxPercentUnhealthyReplicasPerPartition\":66732180},\"jxvsnbyxqabn\":{\"maxPercentUnhealthyServices\":343761655,\"maxPercentUnhealthyPartitionsPerService\":1424270489,\"maxPercentUnhealthyReplicasPerPartition\":969861111},\"cyshurzafbljjgp\":{\"maxPercentUnhealthyServices\":1299140464,\"maxPercentUnhealthyPartitionsPerService\":769076909,\"maxPercentUnhealthyReplicasPerPartition\":1412724720},\"c\":{\"maxPercentUnhealthyServices\":391171694,\"maxPercentUnhealthyPartitionsPerService\":293333183,\"maxPercentUnhealthyReplicasPerPartition\":1002684048}}},\"forceRestart\":false,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Manual\",\"healthCheckWaitDuration\":\"a\",\"healthCheckStableDuration\":\"bqidtqaj\",\"healthCheckRetryTimeout\":\"yulpkudjkr\",\"upgradeTimeout\":\"khbzhfepgzg\",\"upgradeDomainTimeout\":\"e\"},\"instanceCloseDelayDuration\":4405554762008371586,\"upgradeMode\":\"UnmonitoredAuto\",\"upgradeReplicaSetCheckTimeout\":643106143486636349,\"recreateApplication\":true},\"managedIdentities\":[{\"name\":\"hhbcsglummajtjao\",\"principalId\":\"xobnbdxkqpxok\"},{\"name\":\"jionpimexgstxgc\",\"principalId\":\"odgmaajrmvdjwz\"}]}")
            .toObject(ApplicationResourceProperties.class);
        Assertions.assertEquals("osfln", model.version());
        Assertions.assertEquals("fqpte", model.parameters().get("hzzvypyq"));
        Assertions.assertEquals(true, model.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(1580515344,
            model.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(614073164,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(62079989,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1667085881,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(1921161938,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("pgrjbz")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(17169424,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("pgrjbz")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(66732180,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("pgrjbz")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(false, model.upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.MANUAL,
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("a", model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("bqidtqaj",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("yulpkudjkr",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("khbzhfepgzg", model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("e", model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(4405554762008371586L, model.upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.UNMONITORED_AUTO, model.upgradePolicy().upgradeMode());
        Assertions.assertEquals(643106143486636349L, model.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(true, model.upgradePolicy().recreateApplication());
        Assertions.assertEquals("hhbcsglummajtjao", model.managedIdentities().get(0).name());
        Assertions.assertEquals("xobnbdxkqpxok", model.managedIdentities().get(0).principalId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationResourceProperties model = new ApplicationResourceProperties().withVersion("osfln")
            .withParameters(mapOf("hzzvypyq", "fqpte", "z", "i", "dqxhcrmnohjtckwh", "npvswjdkirso"))
            .withUpgradePolicy(new ApplicationUpgradePolicy()
                .withApplicationHealthPolicy(new ApplicationHealthPolicy().withConsiderWarningAsError(true)
                    .withMaxPercentUnhealthyDeployedApplications(1580515344)
                    .withDefaultServiceTypeHealthPolicy(
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(614073164)
                            .withMaxPercentUnhealthyPartitionsPerService(62079989)
                            .withMaxPercentUnhealthyReplicasPerPartition(1667085881))
                    .withServiceTypeHealthPolicyMap(mapOf("pgrjbz",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1921161938)
                            .withMaxPercentUnhealthyPartitionsPerService(17169424)
                            .withMaxPercentUnhealthyReplicasPerPartition(66732180),
                        "jxvsnbyxqabn",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(343761655)
                            .withMaxPercentUnhealthyPartitionsPerService(1424270489)
                            .withMaxPercentUnhealthyReplicasPerPartition(969861111),
                        "cyshurzafbljjgp",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1299140464)
                            .withMaxPercentUnhealthyPartitionsPerService(769076909)
                            .withMaxPercentUnhealthyReplicasPerPartition(1412724720),
                        "c",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(391171694)
                            .withMaxPercentUnhealthyPartitionsPerService(293333183)
                            .withMaxPercentUnhealthyReplicasPerPartition(1002684048))))
                .withForceRestart(false)
                .withRollingUpgradeMonitoringPolicy(
                    new RollingUpgradeMonitoringPolicy().withFailureAction(FailureAction.MANUAL)
                        .withHealthCheckWaitDuration("a")
                        .withHealthCheckStableDuration("bqidtqaj")
                        .withHealthCheckRetryTimeout("yulpkudjkr")
                        .withUpgradeTimeout("khbzhfepgzg")
                        .withUpgradeDomainTimeout("e"))
                .withInstanceCloseDelayDuration(4405554762008371586L)
                .withUpgradeMode(RollingUpgradeMode.UNMONITORED_AUTO)
                .withUpgradeReplicaSetCheckTimeout(643106143486636349L)
                .withRecreateApplication(true))
            .withManagedIdentities(Arrays.asList(
                new ApplicationUserAssignedIdentity().withName("hhbcsglummajtjao").withPrincipalId("xobnbdxkqpxok"),
                new ApplicationUserAssignedIdentity().withName("jionpimexgstxgc").withPrincipalId("odgmaajrmvdjwz")));
        model = BinaryData.fromObject(model).toObject(ApplicationResourceProperties.class);
        Assertions.assertEquals("osfln", model.version());
        Assertions.assertEquals("fqpte", model.parameters().get("hzzvypyq"));
        Assertions.assertEquals(true, model.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(1580515344,
            model.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(614073164,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(62079989,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1667085881,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(1921161938,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("pgrjbz")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(17169424,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("pgrjbz")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(66732180,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("pgrjbz")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(false, model.upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.MANUAL,
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("a", model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("bqidtqaj",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("yulpkudjkr",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("khbzhfepgzg", model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("e", model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(4405554762008371586L, model.upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.UNMONITORED_AUTO, model.upgradePolicy().upgradeMode());
        Assertions.assertEquals(643106143486636349L, model.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(true, model.upgradePolicy().recreateApplication());
        Assertions.assertEquals("hhbcsglummajtjao", model.managedIdentities().get(0).name());
        Assertions.assertEquals("xobnbdxkqpxok", model.managedIdentities().get(0).principalId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
