// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.ApplicationResourceInner;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUpgradePolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUserAssignedIdentity;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentity;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentityType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMonitoringPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceTypeHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"managedIdentities\":[{\"name\":\"bifpikxwczb\",\"principalId\":\"scnpqxuhivy\"},{\"name\":\"n\",\"principalId\":\"wby\"},{\"name\":\"rkxvdum\",\"principalId\":\"grtfwvu\"},{\"name\":\"xgaudccs\",\"principalId\":\"h\"}],\"provisioningState\":\"cnyejhkryhtnapcz\",\"version\":\"okjye\",\"parameters\":{\"jnchgej\":\"vnipjox\",\"huxinpmqnj\":\"podmailzydehojwy\",\"vcputegj\":\"qwixjspro\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":false,\"maxPercentUnhealthyDeployedApplications\":1651742779,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":105374828,\"maxPercentUnhealthyPartitionsPerService\":1162190758,\"maxPercentUnhealthyReplicasPerPartition\":1030512533},\"serviceTypeHealthPolicyMap\":{\"hulsuuvmkjozkrwf\":{\"maxPercentUnhealthyServices\":311951623,\"maxPercentUnhealthyPartitionsPerService\":883957794,\"maxPercentUnhealthyReplicasPerPartition\":902734826},\"djpslw\":{\"maxPercentUnhealthyServices\":566889363,\"maxPercentUnhealthyPartitionsPerService\":1302147866,\"maxPercentUnhealthyReplicasPerPartition\":287620729},\"vwryoqpso\":{\"maxPercentUnhealthyServices\":2028392349,\"maxPercentUnhealthyPartitionsPerService\":1912467695,\"maxPercentUnhealthyReplicasPerPartition\":1273374631},\"azakl\":{\"maxPercentUnhealthyServices\":1527303417,\"maxPercentUnhealthyPartitionsPerService\":2018987029,\"maxPercentUnhealthyReplicasPerPartition\":1144028813}}},\"forceRestart\":false,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Manual\",\"healthCheckWaitDuration\":\"cr\",\"healthCheckStableDuration\":\"ffdfdosygexpa\",\"healthCheckRetryTimeout\":\"jakhmsbzjh\",\"upgradeTimeout\":\"rzevdphlxaol\",\"upgradeDomainTimeout\":\"hqtrgqjbpf\"},\"instanceCloseDelayDuration\":1104586382722096920,\"upgradeMode\":\"UnmonitoredAuto\",\"upgradeReplicaSetCheckTimeout\":245001053683153134,\"recreateApplication\":false}},\"tags\":{\"lluwfzitonpeq\":\"zoxxjtf\"},\"identity\":{\"principalId\":\"kjlxofpdvhpf\",\"tenantId\":\"ypininm\",\"type\":\"None\",\"userAssignedIdentities\":{\"xzxtheo\":{\"principalId\":\"bkpodepooginuv\",\"clientId\":\"iheogna\"}}},\"location\":\"si\",\"id\":\"evcciqihnhun\",\"name\":\"bwjzr\",\"type\":\"fygxgispemvtzfk\"}")
            .toObject(ApplicationResourceInner.class);
        Assertions.assertEquals("zoxxjtf", model.tags().get("lluwfzitonpeq"));
        Assertions.assertEquals(ManagedIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("si", model.location());
        Assertions.assertEquals("bifpikxwczb", model.managedIdentities().get(0).name());
        Assertions.assertEquals("scnpqxuhivy", model.managedIdentities().get(0).principalId());
        Assertions.assertEquals("okjye", model.version());
        Assertions.assertEquals("vnipjox", model.parameters().get("jnchgej"));
        Assertions.assertFalse(model.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(1651742779,
            model.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(105374828,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(1162190758,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1030512533,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(311951623,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("hulsuuvmkjozkrwf")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(883957794,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("hulsuuvmkjozkrwf")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(902734826,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("hulsuuvmkjozkrwf")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertFalse(model.upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.MANUAL,
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("cr", model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("ffdfdosygexpa",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("jakhmsbzjh",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("rzevdphlxaol",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("hqtrgqjbpf",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(1104586382722096920L, model.upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.UNMONITORED_AUTO, model.upgradePolicy().upgradeMode());
        Assertions.assertEquals(245001053683153134L, model.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertFalse(model.upgradePolicy().recreateApplication());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationResourceInner model = new ApplicationResourceInner().withTags(mapOf("lluwfzitonpeq", "zoxxjtf"))
            .withIdentity(new ManagedIdentity().withType(ManagedIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("xzxtheo", new UserAssignedIdentity())))
            .withLocation("si")
            .withManagedIdentities(Arrays.asList(
                new ApplicationUserAssignedIdentity().withName("bifpikxwczb").withPrincipalId("scnpqxuhivy"),
                new ApplicationUserAssignedIdentity().withName("n").withPrincipalId("wby"),
                new ApplicationUserAssignedIdentity().withName("rkxvdum").withPrincipalId("grtfwvu"),
                new ApplicationUserAssignedIdentity().withName("xgaudccs").withPrincipalId("h")))
            .withVersion("okjye")
            .withParameters(mapOf("jnchgej", "vnipjox", "huxinpmqnj", "podmailzydehojwy", "vcputegj", "qwixjspro"))
            .withUpgradePolicy(new ApplicationUpgradePolicy()
                .withApplicationHealthPolicy(new ApplicationHealthPolicy().withConsiderWarningAsError(false)
                    .withMaxPercentUnhealthyDeployedApplications(1651742779)
                    .withDefaultServiceTypeHealthPolicy(
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(105374828)
                            .withMaxPercentUnhealthyPartitionsPerService(1162190758)
                            .withMaxPercentUnhealthyReplicasPerPartition(1030512533))
                    .withServiceTypeHealthPolicyMap(mapOf("hulsuuvmkjozkrwf",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(311951623)
                            .withMaxPercentUnhealthyPartitionsPerService(883957794)
                            .withMaxPercentUnhealthyReplicasPerPartition(902734826),
                        "djpslw",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(566889363)
                            .withMaxPercentUnhealthyPartitionsPerService(1302147866)
                            .withMaxPercentUnhealthyReplicasPerPartition(287620729),
                        "vwryoqpso",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(2028392349)
                            .withMaxPercentUnhealthyPartitionsPerService(1912467695)
                            .withMaxPercentUnhealthyReplicasPerPartition(1273374631),
                        "azakl",
                        new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1527303417)
                            .withMaxPercentUnhealthyPartitionsPerService(2018987029)
                            .withMaxPercentUnhealthyReplicasPerPartition(1144028813))))
                .withForceRestart(false)
                .withRollingUpgradeMonitoringPolicy(
                    new RollingUpgradeMonitoringPolicy().withFailureAction(FailureAction.MANUAL)
                        .withHealthCheckWaitDuration("cr")
                        .withHealthCheckStableDuration("ffdfdosygexpa")
                        .withHealthCheckRetryTimeout("jakhmsbzjh")
                        .withUpgradeTimeout("rzevdphlxaol")
                        .withUpgradeDomainTimeout("hqtrgqjbpf"))
                .withInstanceCloseDelayDuration(1104586382722096920L)
                .withUpgradeMode(RollingUpgradeMode.UNMONITORED_AUTO)
                .withUpgradeReplicaSetCheckTimeout(245001053683153134L)
                .withRecreateApplication(false));
        model = BinaryData.fromObject(model).toObject(ApplicationResourceInner.class);
        Assertions.assertEquals("zoxxjtf", model.tags().get("lluwfzitonpeq"));
        Assertions.assertEquals(ManagedIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("si", model.location());
        Assertions.assertEquals("bifpikxwczb", model.managedIdentities().get(0).name());
        Assertions.assertEquals("scnpqxuhivy", model.managedIdentities().get(0).principalId());
        Assertions.assertEquals("okjye", model.version());
        Assertions.assertEquals("vnipjox", model.parameters().get("jnchgej"));
        Assertions.assertFalse(model.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(1651742779,
            model.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(105374828,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(1162190758,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1030512533,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(311951623,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("hulsuuvmkjozkrwf")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(883957794,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("hulsuuvmkjozkrwf")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(902734826,
            model.upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("hulsuuvmkjozkrwf")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertFalse(model.upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.MANUAL,
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("cr", model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("ffdfdosygexpa",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("jakhmsbzjh",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("rzevdphlxaol",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("hqtrgqjbpf",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(1104586382722096920L, model.upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.UNMONITORED_AUTO, model.upgradePolicy().upgradeMode());
        Assertions.assertEquals(245001053683153134L, model.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertFalse(model.upgradePolicy().recreateApplication());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
