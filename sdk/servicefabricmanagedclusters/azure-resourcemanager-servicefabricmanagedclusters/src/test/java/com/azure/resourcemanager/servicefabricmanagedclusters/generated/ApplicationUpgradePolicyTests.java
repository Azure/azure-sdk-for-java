// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUpgradePolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMonitoringPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceTypeHealthPolicy;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationUpgradePolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationUpgradePolicy model = BinaryData.fromString(
            "{\"applicationHealthPolicy\":{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":1274470316,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":1409516732,\"maxPercentUnhealthyPartitionsPerService\":1769717852,\"maxPercentUnhealthyReplicasPerPartition\":1219720111},\"serviceTypeHealthPolicyMap\":{\"ejctbzaqsqsycb\":{\"maxPercentUnhealthyServices\":137439916,\"maxPercentUnhealthyPartitionsPerService\":657712894,\"maxPercentUnhealthyReplicasPerPartition\":1329098817},\"gukdkexxppo\":{\"maxPercentUnhealthyServices\":475549149,\"maxPercentUnhealthyPartitionsPerService\":1508721218,\"maxPercentUnhealthyReplicasPerPartition\":214775611},\"x\":{\"maxPercentUnhealthyServices\":1211894174,\"maxPercentUnhealthyPartitionsPerService\":2119531336,\"maxPercentUnhealthyReplicasPerPartition\":1878270858}}},\"forceRestart\":false,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Rollback\",\"healthCheckWaitDuration\":\"ddtocjjxhvp\",\"healthCheckStableDuration\":\"o\",\"healthCheckRetryTimeout\":\"exhd\",\"upgradeTimeout\":\"xibqeojnx\",\"upgradeDomainTimeout\":\"bzv\"},\"instanceCloseDelayDuration\":8376089334456563087,\"upgradeMode\":\"Monitored\",\"upgradeReplicaSetCheckTimeout\":2543360050548789201,\"recreateApplication\":true}")
            .toObject(ApplicationUpgradePolicy.class);
        Assertions.assertEquals(true, model.applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(1274470316, model.applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(1409516732,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(1769717852,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1219720111,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(137439916,
            model.applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("ejctbzaqsqsycb")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(657712894,
            model.applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("ejctbzaqsqsycb")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1329098817,
            model.applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("ejctbzaqsqsycb")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(false, model.forceRestart());
        Assertions.assertEquals(FailureAction.ROLLBACK, model.rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("ddtocjjxhvp", model.rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("o", model.rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("exhd", model.rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("xibqeojnx", model.rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("bzv", model.rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(8376089334456563087L, model.instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.MONITORED, model.upgradeMode());
        Assertions.assertEquals(2543360050548789201L, model.upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(true, model.recreateApplication());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationUpgradePolicy model = new ApplicationUpgradePolicy()
            .withApplicationHealthPolicy(new ApplicationHealthPolicy().withConsiderWarningAsError(true)
                .withMaxPercentUnhealthyDeployedApplications(1274470316)
                .withDefaultServiceTypeHealthPolicy(
                    new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1409516732)
                        .withMaxPercentUnhealthyPartitionsPerService(1769717852)
                        .withMaxPercentUnhealthyReplicasPerPartition(1219720111))
                .withServiceTypeHealthPolicyMap(mapOf("ejctbzaqsqsycb",
                    new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(137439916)
                        .withMaxPercentUnhealthyPartitionsPerService(657712894)
                        .withMaxPercentUnhealthyReplicasPerPartition(1329098817),
                    "gukdkexxppo",
                    new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(475549149)
                        .withMaxPercentUnhealthyPartitionsPerService(1508721218)
                        .withMaxPercentUnhealthyReplicasPerPartition(214775611),
                    "x",
                    new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1211894174)
                        .withMaxPercentUnhealthyPartitionsPerService(2119531336)
                        .withMaxPercentUnhealthyReplicasPerPartition(1878270858))))
            .withForceRestart(false)
            .withRollingUpgradeMonitoringPolicy(
                new RollingUpgradeMonitoringPolicy().withFailureAction(FailureAction.ROLLBACK)
                    .withHealthCheckWaitDuration("ddtocjjxhvp")
                    .withHealthCheckStableDuration("o")
                    .withHealthCheckRetryTimeout("exhd")
                    .withUpgradeTimeout("xibqeojnx")
                    .withUpgradeDomainTimeout("bzv"))
            .withInstanceCloseDelayDuration(8376089334456563087L)
            .withUpgradeMode(RollingUpgradeMode.MONITORED)
            .withUpgradeReplicaSetCheckTimeout(2543360050548789201L)
            .withRecreateApplication(true);
        model = BinaryData.fromObject(model).toObject(ApplicationUpgradePolicy.class);
        Assertions.assertEquals(true, model.applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(1274470316, model.applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(1409516732,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(1769717852,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1219720111,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(137439916,
            model.applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("ejctbzaqsqsycb")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(657712894,
            model.applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("ejctbzaqsqsycb")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1329098817,
            model.applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("ejctbzaqsqsycb")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(false, model.forceRestart());
        Assertions.assertEquals(FailureAction.ROLLBACK, model.rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("ddtocjjxhvp", model.rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("o", model.rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("exhd", model.rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("xibqeojnx", model.rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("bzv", model.rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(8376089334456563087L, model.instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.MONITORED, model.upgradeMode());
        Assertions.assertEquals(2543360050548789201L, model.upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(true, model.recreateApplication());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
