// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationUpgradePolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMonitoringPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceTypeHealthPolicy;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationUpgradePolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationUpgradePolicy model = BinaryData.fromString(
            "{\"applicationHealthPolicy\":{\"considerWarningAsError\":false,\"maxPercentUnhealthyDeployedApplications\":1677515825,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":792536973,\"maxPercentUnhealthyPartitionsPerService\":1041920176,\"maxPercentUnhealthyReplicasPerPartition\":494669618},\"serviceTypeHealthPolicyMap\":{\"uflmm\":{\"maxPercentUnhealthyServices\":834029576,\"maxPercentUnhealthyPartitionsPerService\":1291352097,\"maxPercentUnhealthyReplicasPerPartition\":590819227},\"modmglougpb\":{\"maxPercentUnhealthyServices\":1828393347,\"maxPercentUnhealthyPartitionsPerService\":799119693,\"maxPercentUnhealthyReplicasPerPartition\":492225371},\"utduqktapspwgcu\":{\"maxPercentUnhealthyServices\":1951665736,\"maxPercentUnhealthyPartitionsPerService\":815963973,\"maxPercentUnhealthyReplicasPerPartition\":542784283}}},\"forceRestart\":true,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Rollback\",\"healthCheckWaitDuration\":\"kdosvqw\",\"healthCheckStableDuration\":\"bmdg\",\"healthCheckRetryTimeout\":\"bjf\",\"upgradeTimeout\":\"dgmb\",\"upgradeDomainTimeout\":\"bexppb\"},\"instanceCloseDelayDuration\":907638754546671193,\"upgradeMode\":\"Monitored\",\"upgradeReplicaSetCheckTimeout\":7839032708041662310,\"recreateApplication\":true}")
            .toObject(ApplicationUpgradePolicy.class);
        Assertions.assertFalse(model.applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(1677515825, model.applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(792536973,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(1041920176,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(494669618,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(834029576,
            model.applicationHealthPolicy().serviceTypeHealthPolicyMap().get("uflmm").maxPercentUnhealthyServices());
        Assertions.assertEquals(1291352097,
            model.applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("uflmm")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(590819227,
            model.applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("uflmm")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertTrue(model.forceRestart());
        Assertions.assertEquals(FailureAction.ROLLBACK, model.rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("kdosvqw", model.rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("bmdg", model.rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("bjf", model.rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("dgmb", model.rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("bexppb", model.rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(907638754546671193L, model.instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.MONITORED, model.upgradeMode());
        Assertions.assertEquals(7839032708041662310L, model.upgradeReplicaSetCheckTimeout());
        Assertions.assertTrue(model.recreateApplication());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationUpgradePolicy model = new ApplicationUpgradePolicy()
            .withApplicationHealthPolicy(new ApplicationHealthPolicy().withConsiderWarningAsError(false)
                .withMaxPercentUnhealthyDeployedApplications(1677515825)
                .withDefaultServiceTypeHealthPolicy(
                    new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(792536973)
                        .withMaxPercentUnhealthyPartitionsPerService(1041920176)
                        .withMaxPercentUnhealthyReplicasPerPartition(494669618))
                .withServiceTypeHealthPolicyMap(mapOf("uflmm",
                    new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(834029576)
                        .withMaxPercentUnhealthyPartitionsPerService(1291352097)
                        .withMaxPercentUnhealthyReplicasPerPartition(590819227),
                    "modmglougpb",
                    new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1828393347)
                        .withMaxPercentUnhealthyPartitionsPerService(799119693)
                        .withMaxPercentUnhealthyReplicasPerPartition(492225371),
                    "utduqktapspwgcu",
                    new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1951665736)
                        .withMaxPercentUnhealthyPartitionsPerService(815963973)
                        .withMaxPercentUnhealthyReplicasPerPartition(542784283))))
            .withForceRestart(true)
            .withRollingUpgradeMonitoringPolicy(
                new RollingUpgradeMonitoringPolicy().withFailureAction(FailureAction.ROLLBACK)
                    .withHealthCheckWaitDuration("kdosvqw")
                    .withHealthCheckStableDuration("bmdg")
                    .withHealthCheckRetryTimeout("bjf")
                    .withUpgradeTimeout("dgmb")
                    .withUpgradeDomainTimeout("bexppb"))
            .withInstanceCloseDelayDuration(907638754546671193L)
            .withUpgradeMode(RollingUpgradeMode.MONITORED)
            .withUpgradeReplicaSetCheckTimeout(7839032708041662310L)
            .withRecreateApplication(true);
        model = BinaryData.fromObject(model).toObject(ApplicationUpgradePolicy.class);
        Assertions.assertFalse(model.applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(1677515825, model.applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(792536973,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(1041920176,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(494669618,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(834029576,
            model.applicationHealthPolicy().serviceTypeHealthPolicyMap().get("uflmm").maxPercentUnhealthyServices());
        Assertions.assertEquals(1291352097,
            model.applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("uflmm")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(590819227,
            model.applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("uflmm")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertTrue(model.forceRestart());
        Assertions.assertEquals(FailureAction.ROLLBACK, model.rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("kdosvqw", model.rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("bmdg", model.rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("bjf", model.rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("dgmb", model.rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("bexppb", model.rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(907638754546671193L, model.instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.MONITORED, model.upgradeMode());
        Assertions.assertEquals(7839032708041662310L, model.upgradeReplicaSetCheckTimeout());
        Assertions.assertTrue(model.recreateApplication());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
