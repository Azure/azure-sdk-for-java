// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceTypeHealthPolicy;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationHealthPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationHealthPolicy model = BinaryData.fromString(
            "{\"considerWarningAsError\":false,\"maxPercentUnhealthyDeployedApplications\":1189352281,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":2146582590,\"maxPercentUnhealthyPartitionsPerService\":2143599393,\"maxPercentUnhealthyReplicasPerPartition\":746148107},\"serviceTypeHealthPolicyMap\":{\"yjgzjaoyfhrtxiln\":{\"maxPercentUnhealthyServices\":1529578070,\"maxPercentUnhealthyPartitionsPerService\":1939362977,\"maxPercentUnhealthyReplicasPerPartition\":596871405},\"jysvl\":{\"maxPercentUnhealthyServices\":1167970761,\"maxPercentUnhealthyPartitionsPerService\":1275359394,\"maxPercentUnhealthyReplicasPerPartition\":1846063928},\"fqawrlyxw\":{\"maxPercentUnhealthyServices\":969433721,\"maxPercentUnhealthyPartitionsPerService\":867367638,\"maxPercentUnhealthyReplicasPerPartition\":1644570632},\"rbnwbxgjvtbvpy\":{\"maxPercentUnhealthyServices\":1769432566,\"maxPercentUnhealthyPartitionsPerService\":658406237,\"maxPercentUnhealthyReplicasPerPartition\":1138788956}}}")
            .toObject(ApplicationHealthPolicy.class);
        Assertions.assertFalse(model.considerWarningAsError());
        Assertions.assertEquals(1189352281, model.maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(2146582590, model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(2143599393,
            model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(746148107,
            model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(1529578070,
            model.serviceTypeHealthPolicyMap().get("yjgzjaoyfhrtxiln").maxPercentUnhealthyServices());
        Assertions.assertEquals(1939362977,
            model.serviceTypeHealthPolicyMap().get("yjgzjaoyfhrtxiln").maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(596871405,
            model.serviceTypeHealthPolicyMap().get("yjgzjaoyfhrtxiln").maxPercentUnhealthyReplicasPerPartition());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationHealthPolicy model = new ApplicationHealthPolicy().withConsiderWarningAsError(false)
            .withMaxPercentUnhealthyDeployedApplications(1189352281)
            .withDefaultServiceTypeHealthPolicy(
                new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(2146582590)
                    .withMaxPercentUnhealthyPartitionsPerService(2143599393)
                    .withMaxPercentUnhealthyReplicasPerPartition(746148107))
            .withServiceTypeHealthPolicyMap(mapOf("yjgzjaoyfhrtxiln",
                new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1529578070)
                    .withMaxPercentUnhealthyPartitionsPerService(1939362977)
                    .withMaxPercentUnhealthyReplicasPerPartition(596871405),
                "jysvl",
                new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1167970761)
                    .withMaxPercentUnhealthyPartitionsPerService(1275359394)
                    .withMaxPercentUnhealthyReplicasPerPartition(1846063928),
                "fqawrlyxw",
                new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(969433721)
                    .withMaxPercentUnhealthyPartitionsPerService(867367638)
                    .withMaxPercentUnhealthyReplicasPerPartition(1644570632),
                "rbnwbxgjvtbvpy",
                new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1769432566)
                    .withMaxPercentUnhealthyPartitionsPerService(658406237)
                    .withMaxPercentUnhealthyReplicasPerPartition(1138788956)));
        model = BinaryData.fromObject(model).toObject(ApplicationHealthPolicy.class);
        Assertions.assertFalse(model.considerWarningAsError());
        Assertions.assertEquals(1189352281, model.maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(2146582590, model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(2143599393,
            model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(746148107,
            model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(1529578070,
            model.serviceTypeHealthPolicyMap().get("yjgzjaoyfhrtxiln").maxPercentUnhealthyServices());
        Assertions.assertEquals(1939362977,
            model.serviceTypeHealthPolicyMap().get("yjgzjaoyfhrtxiln").maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(596871405,
            model.serviceTypeHealthPolicyMap().get("yjgzjaoyfhrtxiln").maxPercentUnhealthyReplicasPerPartition());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
