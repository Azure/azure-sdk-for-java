// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceTypeHealthPolicy;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationHealthPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationHealthPolicy model = BinaryData.fromString(
            "{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":206399167,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":99630495,\"maxPercentUnhealthyPartitionsPerService\":537336258,\"maxPercentUnhealthyReplicasPerPartition\":1502359819},\"serviceTypeHealthPolicyMap\":{\"rhcffcydd\":{\"maxPercentUnhealthyServices\":1391069168,\"maxPercentUnhealthyPartitionsPerService\":1330155911,\"maxPercentUnhealthyReplicasPerPartition\":2037494020},\"t\":{\"maxPercentUnhealthyServices\":1726993489,\"maxPercentUnhealthyPartitionsPerService\":76474266,\"maxPercentUnhealthyReplicasPerPartition\":661873212},\"wpyeicxmqciwqvh\":{\"maxPercentUnhealthyServices\":439652711,\"maxPercentUnhealthyPartitionsPerService\":1041112743,\"maxPercentUnhealthyReplicasPerPartition\":478155788},\"uigdtopbobjog\":{\"maxPercentUnhealthyServices\":621185104,\"maxPercentUnhealthyPartitionsPerService\":1191010695,\"maxPercentUnhealthyReplicasPerPartition\":1053923929}}}")
            .toObject(ApplicationHealthPolicy.class);
        Assertions.assertEquals(true, model.considerWarningAsError());
        Assertions.assertEquals(206399167, model.maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(99630495, model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(537336258,
            model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1502359819,
            model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(1391069168,
            model.serviceTypeHealthPolicyMap().get("rhcffcydd").maxPercentUnhealthyServices());
        Assertions.assertEquals(1330155911,
            model.serviceTypeHealthPolicyMap().get("rhcffcydd").maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(2037494020,
            model.serviceTypeHealthPolicyMap().get("rhcffcydd").maxPercentUnhealthyReplicasPerPartition());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationHealthPolicy model = new ApplicationHealthPolicy().withConsiderWarningAsError(true)
            .withMaxPercentUnhealthyDeployedApplications(206399167)
            .withDefaultServiceTypeHealthPolicy(new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(99630495)
                .withMaxPercentUnhealthyPartitionsPerService(537336258)
                .withMaxPercentUnhealthyReplicasPerPartition(1502359819))
            .withServiceTypeHealthPolicyMap(mapOf("rhcffcydd",
                new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1391069168)
                    .withMaxPercentUnhealthyPartitionsPerService(1330155911)
                    .withMaxPercentUnhealthyReplicasPerPartition(2037494020),
                "t",
                new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1726993489)
                    .withMaxPercentUnhealthyPartitionsPerService(76474266)
                    .withMaxPercentUnhealthyReplicasPerPartition(661873212),
                "wpyeicxmqciwqvh",
                new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(439652711)
                    .withMaxPercentUnhealthyPartitionsPerService(1041112743)
                    .withMaxPercentUnhealthyReplicasPerPartition(478155788),
                "uigdtopbobjog",
                new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(621185104)
                    .withMaxPercentUnhealthyPartitionsPerService(1191010695)
                    .withMaxPercentUnhealthyReplicasPerPartition(1053923929)));
        model = BinaryData.fromObject(model).toObject(ApplicationHealthPolicy.class);
        Assertions.assertEquals(true, model.considerWarningAsError());
        Assertions.assertEquals(206399167, model.maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(99630495, model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(537336258,
            model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1502359819,
            model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(1391069168,
            model.serviceTypeHealthPolicyMap().get("rhcffcydd").maxPercentUnhealthyServices());
        Assertions.assertEquals(1330155911,
            model.serviceTypeHealthPolicyMap().get("rhcffcydd").maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(2037494020,
            model.serviceTypeHealthPolicyMap().get("rhcffcydd").maxPercentUnhealthyReplicasPerPartition());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
