// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpConfigurationPublicIpAddressConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpTag;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PrivateIpAddressVersion;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PublicIpAddressVersion;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class IpConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IpConfiguration model = BinaryData.fromString(
            "{\"name\":\"saz\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"qkagfhsxt\"},{\"id\":\"ugzxnf\"},{\"id\":\"zpxdt\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"kqjjlwuenvrkp\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"ibreb\"},{\"id\":\"aysjkixqtnqttez\"},{\"id\":\"fffiak\"},{\"id\":\"pqqmted\"}],\"subnet\":{\"id\":\"mjihyeozphv\"},\"privateIPAddressVersion\":\"IPv6\",\"publicIPAddressConfiguration\":{\"name\":\"qncygupkvi\",\"ipTags\":[{\"ipTagType\":\"scw\",\"tag\":\"qupevzh\"},{\"ipTagType\":\"stotxh\",\"tag\":\"jujbypelmcuvhixb\"},{\"ipTagType\":\"xyfwnylrcool\",\"tag\":\"ttpkiwkkbnujrywv\"},{\"ipTagType\":\"y\",\"tag\":\"bfpncurdo\"}],\"publicIPAddressVersion\":\"IPv4\"}}")
            .toObject(IpConfiguration.class);
        Assertions.assertEquals("saz", model.name());
        Assertions.assertEquals("qkagfhsxt", model.applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("kqjjlwuenvrkp", model.loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("ibreb", model.loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals("mjihyeozphv", model.subnet().id());
        Assertions.assertEquals(PrivateIpAddressVersion.IPV6, model.privateIpAddressVersion());
        Assertions.assertEquals("qncygupkvi", model.publicIpAddressConfiguration().name());
        Assertions.assertEquals("scw", model.publicIpAddressConfiguration().ipTags().get(0).ipTagType());
        Assertions.assertEquals("qupevzh", model.publicIpAddressConfiguration().ipTags().get(0).tag());
        Assertions.assertEquals(PublicIpAddressVersion.IPV4,
            model.publicIpAddressConfiguration().publicIpAddressVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IpConfiguration model = new IpConfiguration().withName("saz")
            .withApplicationGatewayBackendAddressPools(Arrays.asList(new SubResource().withId("qkagfhsxt"),
                new SubResource().withId("ugzxnf"), new SubResource().withId("zpxdt")))
            .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("kqjjlwuenvrkp")))
            .withLoadBalancerInboundNatPools(
                Arrays.asList(new SubResource().withId("ibreb"), new SubResource().withId("aysjkixqtnqttez"),
                    new SubResource().withId("fffiak"), new SubResource().withId("pqqmted")))
            .withSubnet(new SubResource().withId("mjihyeozphv"))
            .withPrivateIpAddressVersion(PrivateIpAddressVersion.IPV6)
            .withPublicIpAddressConfiguration(new IpConfigurationPublicIpAddressConfiguration().withName("qncygupkvi")
                .withIpTags(Arrays.asList(new IpTag().withIpTagType("scw").withTag("qupevzh"),
                    new IpTag().withIpTagType("stotxh").withTag("jujbypelmcuvhixb"),
                    new IpTag().withIpTagType("xyfwnylrcool").withTag("ttpkiwkkbnujrywv"),
                    new IpTag().withIpTagType("y").withTag("bfpncurdo")))
                .withPublicIpAddressVersion(PublicIpAddressVersion.IPV4));
        model = BinaryData.fromObject(model).toObject(IpConfiguration.class);
        Assertions.assertEquals("saz", model.name());
        Assertions.assertEquals("qkagfhsxt", model.applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("kqjjlwuenvrkp", model.loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("ibreb", model.loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals("mjihyeozphv", model.subnet().id());
        Assertions.assertEquals(PrivateIpAddressVersion.IPV6, model.privateIpAddressVersion());
        Assertions.assertEquals("qncygupkvi", model.publicIpAddressConfiguration().name());
        Assertions.assertEquals("scw", model.publicIpAddressConfiguration().ipTags().get(0).ipTagType());
        Assertions.assertEquals("qupevzh", model.publicIpAddressConfiguration().ipTags().get(0).tag());
        Assertions.assertEquals(PublicIpAddressVersion.IPV4,
            model.publicIpAddressConfiguration().publicIpAddressVersion());
    }
}
