// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpConfigurationPublicIpAddressConfiguration;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.IpTag;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PrivateIpAddressVersion;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PublicIpAddressVersion;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class IpConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IpConfiguration model = BinaryData.fromString(
            "{\"name\":\"coolsttpkiwkkb\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"ywvtylbfpnc\"},{\"id\":\"doiwi\"},{\"id\":\"htywubxcbihwq\"},{\"id\":\"fdntwjchrdgoih\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"ctondz\"},{\"id\":\"uu\"},{\"id\":\"dlwggytsbwtovv\"},{\"id\":\"seinqfiuf\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"pirgnepttwq\"},{\"id\":\"niffcdmqnroj\"},{\"id\":\"ijnkrxfrdd\"},{\"id\":\"ratiz\"}],\"subnet\":{\"id\":\"nasx\"},\"privateIPAddressVersion\":\"IPv6\",\"publicIPAddressConfiguration\":{\"name\":\"zq\",\"ipTags\":[{\"ipTagType\":\"f\",\"tag\":\"wesgogczh\"},{\"ipTagType\":\"nnxk\",\"tag\":\"lgnyhmo\"},{\"ipTagType\":\"sxkkg\",\"tag\":\"h\"}],\"publicIPAddressVersion\":\"IPv4\"}}")
            .toObject(IpConfiguration.class);
        Assertions.assertEquals("coolsttpkiwkkb", model.name());
        Assertions.assertEquals("ywvtylbfpnc", model.applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("ctondz", model.loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("pirgnepttwq", model.loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals("nasx", model.subnet().id());
        Assertions.assertEquals(PrivateIpAddressVersion.IPV6, model.privateIpAddressVersion());
        Assertions.assertEquals("zq", model.publicIpAddressConfiguration().name());
        Assertions.assertEquals("f", model.publicIpAddressConfiguration().ipTags().get(0).ipTagType());
        Assertions.assertEquals("wesgogczh", model.publicIpAddressConfiguration().ipTags().get(0).tag());
        Assertions.assertEquals(PublicIpAddressVersion.IPV4,
            model.publicIpAddressConfiguration().publicIpAddressVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IpConfiguration model = new IpConfiguration().withName("coolsttpkiwkkb")
            .withApplicationGatewayBackendAddressPools(
                Arrays.asList(new SubResource().withId("ywvtylbfpnc"), new SubResource().withId("doiwi"),
                    new SubResource().withId("htywubxcbihwq"), new SubResource().withId("fdntwjchrdgoih")))
            .withLoadBalancerBackendAddressPools(
                Arrays.asList(new SubResource().withId("ctondz"), new SubResource().withId("uu"),
                    new SubResource().withId("dlwggytsbwtovv"), new SubResource().withId("seinqfiuf")))
            .withLoadBalancerInboundNatPools(
                Arrays.asList(new SubResource().withId("pirgnepttwq"), new SubResource().withId("niffcdmqnroj"),
                    new SubResource().withId("ijnkrxfrdd"), new SubResource().withId("ratiz")))
            .withSubnet(new SubResource().withId("nasx"))
            .withPrivateIpAddressVersion(PrivateIpAddressVersion.IPV6)
            .withPublicIpAddressConfiguration(new IpConfigurationPublicIpAddressConfiguration().withName("zq")
                .withIpTags(Arrays.asList(new IpTag().withIpTagType("f").withTag("wesgogczh"),
                    new IpTag().withIpTagType("nnxk").withTag("lgnyhmo"),
                    new IpTag().withIpTagType("sxkkg").withTag("h")))
                .withPublicIpAddressVersion(PublicIpAddressVersion.IPV4));
        model = BinaryData.fromObject(model).toObject(IpConfiguration.class);
        Assertions.assertEquals("coolsttpkiwkkb", model.name());
        Assertions.assertEquals("ywvtylbfpnc", model.applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("ctondz", model.loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("pirgnepttwq", model.loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals("nasx", model.subnet().id());
        Assertions.assertEquals(PrivateIpAddressVersion.IPV6, model.privateIpAddressVersion());
        Assertions.assertEquals("zq", model.publicIpAddressConfiguration().name());
        Assertions.assertEquals("f", model.publicIpAddressConfiguration().ipTags().get(0).ipTagType());
        Assertions.assertEquals("wesgogczh", model.publicIpAddressConfiguration().ipTags().get(0).tag());
        Assertions.assertEquals(PublicIpAddressVersion.IPV4,
            model.publicIpAddressConfiguration().publicIpAddressVersion());
    }
}
