// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.MoveCost;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePackageActivationMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServicesListByApplicationsMockTests {
    @Test
    public void testListByApplications() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"serviceKind\":\"ServiceResourceProperties\",\"provisioningState\":\"bu\",\"serviceTypeName\":\"qwyxebeybpm\",\"partitionDescription\":{\"partitionScheme\":\"Partition\"},\"servicePackageActivationMode\":\"ExclusiveProcess\",\"serviceDnsName\":\"tffyaqit\",\"placementConstraints\":\"heioqa\",\"correlationScheme\":[{\"scheme\":\"AlignedAffinity\",\"serviceName\":\"eufuqyrxpdlcgql\"}],\"serviceLoadMetrics\":[{\"name\":\"mjqfrddgamquhio\",\"weight\":\"High\",\"primaryDefaultLoad\":2131162818,\"secondaryDefaultLoad\":364566844,\"defaultLoad\":1776992890},{\"name\":\"disyirnxz\",\"weight\":\"Medium\",\"primaryDefaultLoad\":394290556,\"secondaryDefaultLoad\":1167405678,\"defaultLoad\":994025187},{\"name\":\"ujrtrhqvwr\",\"weight\":\"Zero\",\"primaryDefaultLoad\":589242227,\"secondaryDefaultLoad\":1550567255,\"defaultLoad\":1309315594}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"}],\"defaultMoveCost\":\"Medium\",\"scalingPolicies\":[{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}}]},\"tags\":{\"cvjtszcofiz\":\"yw\",\"gbjkvreljeamur\":\"htd\",\"xlpm\":\"zmlovuanash\"},\"location\":\"rbdkelvidiz\",\"id\":\"sdbccxjmonfdgnwn\",\"name\":\"ypuuwwltvuqjctze\",\"type\":\"keifzzhmkdasv\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServiceFabricManagedClustersManager manager = ServiceFabricManagedClustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<ServiceResource> response = manager.services()
            .listByApplications("tad", "jaeukmrsieekpn", "zaapmudqmeqwi", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("heioqa", response.iterator().next().properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.ALIGNED_AFFINITY,
            response.iterator().next().properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("eufuqyrxpdlcgql",
            response.iterator().next().properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("mjqfrddgamquhio",
            response.iterator().next().properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.HIGH,
            response.iterator().next().properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(2131162818,
            response.iterator().next().properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(364566844,
            response.iterator().next().properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(1776992890,
            response.iterator().next().properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.MEDIUM, response.iterator().next().properties().defaultMoveCost());
        Assertions.assertEquals("qwyxebeybpm", response.iterator().next().properties().serviceTypeName());
        Assertions.assertEquals(ServicePackageActivationMode.EXCLUSIVE_PROCESS,
            response.iterator().next().properties().servicePackageActivationMode());
        Assertions.assertEquals("tffyaqit", response.iterator().next().properties().serviceDnsName());
        Assertions.assertEquals("yw", response.iterator().next().tags().get("cvjtszcofiz"));
        Assertions.assertEquals("rbdkelvidiz", response.iterator().next().location());
    }
}
