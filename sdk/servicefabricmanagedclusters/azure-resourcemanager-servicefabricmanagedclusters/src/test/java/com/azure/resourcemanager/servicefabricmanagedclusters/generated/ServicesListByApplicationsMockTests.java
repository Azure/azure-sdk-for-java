// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.MoveCost;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePackageActivationMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServicesListByApplicationsMockTests {
    @Test
    public void testListByApplications() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"serviceKind\":\"ServiceResourceProperties\",\"provisioningState\":\"idizozsdbccxjmo\",\"serviceTypeName\":\"fdgnwncypuuwwlt\",\"partitionDescription\":{\"partitionScheme\":\"Partition\"},\"servicePackageActivationMode\":\"ExclusiveProcess\",\"serviceDnsName\":\"ctzenkeifzzhmkd\",\"placementConstraints\":\"vflyhbxcu\",\"correlationScheme\":[{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"gsrboldforobw\"},{\"scheme\":\"AlignedAffinity\",\"serviceName\":\"vizbfhfo\"},{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"acqpbtuodxesza\"}],\"serviceLoadMetrics\":[{\"name\":\"l\",\"weight\":\"High\",\"primaryDefaultLoad\":308639473,\"secondaryDefaultLoad\":1274363092,\"defaultLoad\":46527363},{\"name\":\"kwrrwo\",\"weight\":\"Medium\",\"primaryDefaultLoad\":2074554756,\"secondaryDefaultLoad\":913388028,\"defaultLoad\":671664231}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"}],\"defaultMoveCost\":\"Zero\",\"scalingPolicies\":[{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}}]},\"location\":\"ywuhpsvfuur\",\"tags\":{\"xwlalniexzsrzpg\":\"we\",\"wpgdak\":\"pqtybb\"},\"id\":\"zyvli\",\"name\":\"q\",\"type\":\"rkcxkj\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServiceFabricManagedClustersManager manager = ServiceFabricManagedClustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ServiceResource> response
            = manager.services().listByApplications("zmlovuanash", "xlpm", "erbdk", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("vflyhbxcu", response.iterator().next().properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY,
            response.iterator().next().properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("gsrboldforobw",
            response.iterator().next().properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("l", response.iterator().next().properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.HIGH,
            response.iterator().next().properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(308639473,
            response.iterator().next().properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(1274363092,
            response.iterator().next().properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(46527363,
            response.iterator().next().properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.ZERO, response.iterator().next().properties().defaultMoveCost());
        Assertions.assertEquals("fdgnwncypuuwwlt", response.iterator().next().properties().serviceTypeName());
        Assertions.assertEquals(ServicePackageActivationMode.EXCLUSIVE_PROCESS,
            response.iterator().next().properties().servicePackageActivationMode());
        Assertions.assertEquals("ctzenkeifzzhmkd", response.iterator().next().properties().serviceDnsName());
        Assertions.assertEquals("ywuhpsvfuur", response.iterator().next().location());
        Assertions.assertEquals("we", response.iterator().next().tags().get("xwlalniexzsrzpg"));
    }
}
