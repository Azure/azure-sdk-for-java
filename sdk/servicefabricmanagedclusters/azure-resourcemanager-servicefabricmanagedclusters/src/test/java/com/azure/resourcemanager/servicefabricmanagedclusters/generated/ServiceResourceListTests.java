// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.ServiceResourceInner;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.MoveCost;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.Partition;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingMechanism;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingTrigger;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelation;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetric;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePackageActivationMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePlacementPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceResourceList;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceResourceProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ServiceResourceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceResourceList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"serviceKind\":\"ServiceResourceProperties\",\"provisioningState\":\"v\",\"serviceTypeName\":\"elnsmvbxw\",\"partitionDescription\":{\"partitionScheme\":\"Partition\"},\"servicePackageActivationMode\":\"SharedProcess\",\"serviceDnsName\":\"lh\",\"placementConstraints\":\"aalnjixi\",\"correlationScheme\":[{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"wjo\"}],\"serviceLoadMetrics\":[{\"name\":\"cslyjpk\",\"weight\":\"Medium\",\"primaryDefaultLoad\":983085062,\"secondaryDefaultLoad\":1211885049,\"defaultLoad\":1066317539},{\"name\":\"eli\",\"weight\":\"Zero\",\"primaryDefaultLoad\":417791826,\"secondaryDefaultLoad\":644635434,\"defaultLoad\":1975568377},{\"name\":\"hb\",\"weight\":\"Medium\",\"primaryDefaultLoad\":2006567111,\"secondaryDefaultLoad\":1904300707,\"defaultLoad\":338367472}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicy\"}],\"defaultMoveCost\":\"Medium\",\"scalingPolicies\":[{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}}]},\"location\":\"napnyiropuhpigv\",\"tags\":{\"txmedj\":\"lgqg\",\"lynqwwncwzzh\":\"c\",\"ellwptfdy\":\"gktrmgucnapkte\",\"rhhuaopppcqeqx\":\"pfqbuaceopzf\"},\"id\":\"z\",\"name\":\"ahzxctobgbk\",\"type\":\"moizpos\"},{\"properties\":{\"serviceKind\":\"ServiceResourceProperties\",\"provisioningState\":\"rcfbunrm\",\"serviceTypeName\":\"qjhhkxbpv\",\"partitionDescription\":{\"partitionScheme\":\"Partition\"},\"servicePackageActivationMode\":\"SharedProcess\",\"serviceDnsName\":\"hx\",\"placementConstraints\":\"yngudivk\",\"correlationScheme\":[{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"bxqz\"},{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"zjf\"}],\"serviceLoadMetrics\":[{\"name\":\"j\",\"weight\":\"Low\",\"primaryDefaultLoad\":1924532267,\"secondaryDefaultLoad\":57389374,\"defaultLoad\":123770675},{\"name\":\"t\",\"weight\":\"Medium\",\"primaryDefaultLoad\":730619532,\"secondaryDefaultLoad\":1493412527,\"defaultLoad\":608754752}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"}],\"defaultMoveCost\":\"High\",\"scalingPolicies\":[{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}}]},\"location\":\"yslqbhsfx\",\"tags\":{\"wfbkrvrns\":\"ytkblmpew\"},\"id\":\"hqjohxcrsbfova\",\"name\":\"rruvwbhsq\",\"type\":\"sub\"}],\"nextLink\":\"jbi\"}")
            .toObject(ServiceResourceList.class);
        Assertions.assertEquals("aalnjixi", model.value().get(0).properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY,
            model.value().get(0).properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("wjo", model.value().get(0).properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("cslyjpk", model.value().get(0).properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.MEDIUM,
            model.value().get(0).properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(983085062,
            model.value().get(0).properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(1211885049,
            model.value().get(0).properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(1066317539,
            model.value().get(0).properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.MEDIUM, model.value().get(0).properties().defaultMoveCost());
        Assertions.assertEquals("elnsmvbxw", model.value().get(0).properties().serviceTypeName());
        Assertions.assertEquals(ServicePackageActivationMode.SHARED_PROCESS,
            model.value().get(0).properties().servicePackageActivationMode());
        Assertions.assertEquals("lh", model.value().get(0).properties().serviceDnsName());
        Assertions.assertEquals("napnyiropuhpigv", model.value().get(0).location());
        Assertions.assertEquals("lgqg", model.value().get(0).tags().get("txmedj"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceResourceList model
            = new ServiceResourceList()
                .withValue(
                    Arrays
                        .asList(
                            new ServiceResourceInner()
                                .withProperties(new ServiceResourceProperties().withPlacementConstraints("aalnjixi")
                                    .withCorrelationScheme(Arrays.asList(new ServiceCorrelation()
                                        .withScheme(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY)
                                        .withServiceName("wjo")))
                                    .withServiceLoadMetrics(Arrays.asList(
                                        new ServiceLoadMetric().withName("cslyjpk")
                                            .withWeight(ServiceLoadMetricWeight.MEDIUM)
                                            .withPrimaryDefaultLoad(983085062)
                                            .withSecondaryDefaultLoad(1211885049)
                                            .withDefaultLoad(1066317539),
                                        new ServiceLoadMetric().withName("eli")
                                            .withWeight(ServiceLoadMetricWeight.ZERO)
                                            .withPrimaryDefaultLoad(417791826)
                                            .withSecondaryDefaultLoad(644635434)
                                            .withDefaultLoad(1975568377),
                                        new ServiceLoadMetric().withName("hb")
                                            .withWeight(ServiceLoadMetricWeight.MEDIUM)
                                            .withPrimaryDefaultLoad(2006567111)
                                            .withSecondaryDefaultLoad(1904300707)
                                            .withDefaultLoad(338367472)))
                                    .withServicePlacementPolicies(Arrays.asList(new ServicePlacementPolicy()))
                                    .withDefaultMoveCost(MoveCost.MEDIUM)
                                    .withScalingPolicies(Arrays.asList(
                                        new ScalingPolicy().withScalingMechanism(new ScalingMechanism())
                                            .withScalingTrigger(new ScalingTrigger()),
                                        new ScalingPolicy().withScalingMechanism(new ScalingMechanism())
                                            .withScalingTrigger(new ScalingTrigger()),
                                        new ScalingPolicy().withScalingMechanism(new ScalingMechanism())
                                            .withScalingTrigger(new ScalingTrigger()),
                                        new ScalingPolicy().withScalingMechanism(new ScalingMechanism())
                                            .withScalingTrigger(new ScalingTrigger())))
                                    .withServiceTypeName("elnsmvbxw")
                                    .withPartitionDescription(new Partition())
                                    .withServicePackageActivationMode(ServicePackageActivationMode.SHARED_PROCESS)
                                    .withServiceDnsName("lh"))
                                .withLocation("napnyiropuhpigv")
                                .withTags(mapOf(
                                    "txmedj", "lgqg", "lynqwwncwzzh", "c", "ellwptfdy", "gktrmgucnapkte",
                                    "rhhuaopppcqeqx", "pfqbuaceopzf")),
                            new ServiceResourceInner()
                                .withProperties(new ServiceResourceProperties().withPlacementConstraints("yngudivk")
                                    .withCorrelationScheme(Arrays.asList(new ServiceCorrelation()
                                        .withScheme(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY)
                                        .withServiceName("bxqz"),
                                        new ServiceCorrelation()
                                            .withScheme(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY)
                                            .withServiceName("zjf")))
                                    .withServiceLoadMetrics(Arrays.asList(
                                        new ServiceLoadMetric().withName("j")
                                            .withWeight(ServiceLoadMetricWeight.LOW)
                                            .withPrimaryDefaultLoad(1924532267)
                                            .withSecondaryDefaultLoad(57389374)
                                            .withDefaultLoad(123770675),
                                        new ServiceLoadMetric().withName("t")
                                            .withWeight(ServiceLoadMetricWeight.MEDIUM)
                                            .withPrimaryDefaultLoad(730619532)
                                            .withSecondaryDefaultLoad(1493412527)
                                            .withDefaultLoad(608754752)))
                                    .withServicePlacementPolicies(
                                        Arrays.asList(new ServicePlacementPolicy(), new ServicePlacementPolicy()))
                                    .withDefaultMoveCost(MoveCost.HIGH)
                                    .withScalingPolicies(Arrays.asList(
                                        new ScalingPolicy().withScalingMechanism(new ScalingMechanism())
                                            .withScalingTrigger(new ScalingTrigger()),
                                        new ScalingPolicy().withScalingMechanism(new ScalingMechanism())
                                            .withScalingTrigger(new ScalingTrigger())))
                                    .withServiceTypeName("qjhhkxbpv")
                                    .withPartitionDescription(new Partition())
                                    .withServicePackageActivationMode(ServicePackageActivationMode.SHARED_PROCESS)
                                    .withServiceDnsName("hx"))
                                .withLocation("yslqbhsfx")
                                .withTags(mapOf("wfbkrvrns", "ytkblmpew"))));
        model = BinaryData.fromObject(model).toObject(ServiceResourceList.class);
        Assertions.assertEquals("aalnjixi", model.value().get(0).properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY,
            model.value().get(0).properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("wjo", model.value().get(0).properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("cslyjpk", model.value().get(0).properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.MEDIUM,
            model.value().get(0).properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(983085062,
            model.value().get(0).properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(1211885049,
            model.value().get(0).properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(1066317539,
            model.value().get(0).properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.MEDIUM, model.value().get(0).properties().defaultMoveCost());
        Assertions.assertEquals("elnsmvbxw", model.value().get(0).properties().serviceTypeName());
        Assertions.assertEquals(ServicePackageActivationMode.SHARED_PROCESS,
            model.value().get(0).properties().servicePackageActivationMode());
        Assertions.assertEquals("lh", model.value().get(0).properties().serviceDnsName());
        Assertions.assertEquals("napnyiropuhpigv", model.value().get(0).location());
        Assertions.assertEquals("lgqg", model.value().get(0).tags().get("txmedj"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
