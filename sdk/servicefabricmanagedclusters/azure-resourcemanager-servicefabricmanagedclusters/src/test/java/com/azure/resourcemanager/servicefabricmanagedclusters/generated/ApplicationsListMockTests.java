// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationResource;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentityType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApplicationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"identity\":{\"principalId\":\"grttikteusqczk\",\"tenantId\":\"klxubyja\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"lqxihhrmooiz\":{\"principalId\":\"lcqcuubgqibrt\",\"clientId\":\"metttwgd\"},\"vnh\":{\"principalId\":\"eypxiutcxapzhyr\",\"clientId\":\"togebjoxsl\"}}},\"properties\":{\"provisioningState\":\"rqnkkzjcjbtr\",\"version\":\"ehvvib\",\"parameters\":{\"beitpkx\":\"jsto\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":343104973,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":591032834,\"maxPercentUnhealthyPartitionsPerService\":1574210400,\"maxPercentUnhealthyReplicasPerPartition\":358908286},\"serviceTypeHealthPolicyMap\":{\"cwq\":{\"maxPercentUnhealthyServices\":2138880865,\"maxPercentUnhealthyPartitionsPerService\":2018577894,\"maxPercentUnhealthyReplicasPerPartition\":300774928},\"aqxzhemjyho\":{\"maxPercentUnhealthyServices\":1328800252,\"maxPercentUnhealthyPartitionsPerService\":817120127,\"maxPercentUnhealthyReplicasPerPartition\":658740777}}},\"forceRestart\":true,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Rollback\",\"healthCheckWaitDuration\":\"t\",\"healthCheckStableDuration\":\"kozzwculkb\",\"healthCheckRetryTimeout\":\"wpfaj\",\"upgradeTimeout\":\"jwltlwtjjgu\",\"upgradeDomainTimeout\":\"talhsnvkcdmxzr\"},\"instanceCloseDelayDuration\":2563620399740315229,\"upgradeMode\":\"UnmonitoredAuto\",\"upgradeReplicaSetCheckTimeout\":3743017470080783529,\"recreateApplication\":false},\"managedIdentities\":[{\"name\":\"ylweazulc\",\"principalId\":\"ethwwnpjhlfz\"},{\"name\":\"wpchwahf\",\"principalId\":\"ousnfepgfewe\"},{\"name\":\"wlyxgncxyk\",\"principalId\":\"hdjhlimmbcx\"}]},\"location\":\"bcporxvxcjzhqizx\",\"tags\":{\"qaz\":\"tgqscjavftjuh\",\"pijrajcivmmghf\":\"mtggu\",\"uvyinzqodfvpgs\":\"fiwrxgkn\",\"zflbqvg\":\"oxgsgbpfgzdjtx\"},\"id\":\"vl\",\"name\":\"a\",\"type\":\"cqusr\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServiceFabricManagedClustersManager manager = ServiceFabricManagedClustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ApplicationResource> response
            = manager.applications().list("ikf", "cvhrfsp", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            response.iterator().next().identity().type());
        Assertions.assertEquals("bcporxvxcjzhqizx", response.iterator().next().location());
        Assertions.assertEquals("tgqscjavftjuh", response.iterator().next().tags().get("qaz"));
        Assertions.assertEquals("ehvvib", response.iterator().next().version());
        Assertions.assertEquals("jsto", response.iterator().next().parameters().get("beitpkx"));
        Assertions.assertEquals(true,
            response.iterator().next().upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(343104973,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(591032834,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(1574210400,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(358908286,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(2138880865,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("cwq")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(2018577894,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("cwq")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(300774928,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("cwq")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(true, response.iterator().next().upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.ROLLBACK,
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("t",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("kozzwculkb",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("wpfaj",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("jwltlwtjjgu",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("talhsnvkcdmxzr",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(2563620399740315229L,
            response.iterator().next().upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.UNMONITORED_AUTO,
            response.iterator().next().upgradePolicy().upgradeMode());
        Assertions.assertEquals(3743017470080783529L,
            response.iterator().next().upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(false, response.iterator().next().upgradePolicy().recreateApplication());
        Assertions.assertEquals("ylweazulc", response.iterator().next().managedIdentities().get(0).name());
        Assertions.assertEquals("ethwwnpjhlfz", response.iterator().next().managedIdentities().get(0).principalId());
    }
}
