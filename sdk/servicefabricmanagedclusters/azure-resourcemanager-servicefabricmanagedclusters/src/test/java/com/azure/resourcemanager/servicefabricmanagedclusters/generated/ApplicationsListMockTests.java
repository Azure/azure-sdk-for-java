// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationResource;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ManagedIdentityType;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ApplicationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"identity\":{\"principalId\":\"tcojocqwo\",\"tenantId\":\"nzjvusfzldm\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"wn\":{\"principalId\":\"fsbtkad\",\"clientId\":\"s\"},\"pe\":{\"principalId\":\"gkbugrjqct\",\"clientId\":\"cmisofie\"}}},\"properties\":{\"provisioningState\":\"yqdhcuplcplcw\",\"version\":\"ihih\",\"parameters\":{\"gmvecactxmw\":\"dsqtzbsrgnowcjh\",\"ovekqvgqouwi\":\"teyowclu\",\"ikf\":\"zmpjwyiv\",\"uagrttikteusqc\":\"cvhrfsp\"},\"upgradePolicy\":{\"applicationHealthPolicy\":{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":2000944552,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":1879960367,\"maxPercentUnhealthyPartitionsPerService\":505977286,\"maxPercentUnhealthyReplicasPerPartition\":148819128},\"serviceTypeHealthPolicyMap\":{\"mmfblcqcuubgqib\":{\"maxPercentUnhealthyServices\":609812419,\"maxPercentUnhealthyPartitionsPerService\":490127820,\"maxPercentUnhealthyReplicasPerPartition\":472498299},\"metttwgd\":{\"maxPercentUnhealthyServices\":1835409247,\"maxPercentUnhealthyPartitionsPerService\":75239046,\"maxPercentUnhealthyReplicasPerPartition\":1522947792},\"ihhrmo\":{\"maxPercentUnhealthyServices\":822312101,\"maxPercentUnhealthyPartitionsPerService\":322424126,\"maxPercentUnhealthyReplicasPerPartition\":696295269},\"seypxiutcxapz\":{\"maxPercentUnhealthyServices\":144064729,\"maxPercentUnhealthyPartitionsPerService\":4493700,\"maxPercentUnhealthyReplicasPerPartition\":806728338}}},\"forceRestart\":true,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Rollback\",\"healthCheckWaitDuration\":\"togebjoxsl\",\"healthCheckStableDuration\":\"vnh\",\"healthCheckRetryTimeout\":\"abrqnkkzj\",\"upgradeTimeout\":\"jb\",\"upgradeDomainTimeout\":\"rgaehvvibrxjj\"},\"instanceCloseDelayDuration\":2423648304868086372,\"upgradeMode\":\"UnmonitoredAuto\",\"upgradeReplicaSetCheckTimeout\":5829409872258968702,\"recreateApplication\":false},\"managedIdentities\":[{\"name\":\"moob\",\"principalId\":\"lftidgfcwqmpim\"}]},\"location\":\"xzhemjyh\",\"tags\":{\"lkb\":\"jswtwkozzwc\"},\"id\":\"pfajnjwltlwtjj\",\"name\":\"uktalhsnvkcdmxz\",\"type\":\"poaimlnwiaaomyl\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServiceFabricManagedClustersManager manager = ServiceFabricManagedClustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ApplicationResource> response
            = manager.applications().list("iaa", "iuagydwqfbylyrfg", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            response.iterator().next().identity().type());
        Assertions.assertEquals("xzhemjyh", response.iterator().next().location());
        Assertions.assertEquals("jswtwkozzwc", response.iterator().next().tags().get("lkb"));
        Assertions.assertEquals("ihih", response.iterator().next().version());
        Assertions.assertEquals("dsqtzbsrgnowcjh", response.iterator().next().parameters().get("gmvecactxmw"));
        Assertions.assertEquals(true,
            response.iterator().next().upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(2000944552,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(1879960367,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(505977286,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(148819128,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .defaultServiceTypeHealthPolicy()
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(609812419,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("mmfblcqcuubgqib")
                .maxPercentUnhealthyServices());
        Assertions.assertEquals(490127820,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("mmfblcqcuubgqib")
                .maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(472498299,
            response.iterator()
                .next()
                .upgradePolicy()
                .applicationHealthPolicy()
                .serviceTypeHealthPolicyMap()
                .get("mmfblcqcuubgqib")
                .maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(true, response.iterator().next().upgradePolicy().forceRestart());
        Assertions.assertEquals(FailureAction.ROLLBACK,
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("togebjoxsl",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("vnh",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("abrqnkkzj",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("jb",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("rgaehvvibrxjj",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(2423648304868086372L,
            response.iterator().next().upgradePolicy().instanceCloseDelayDuration());
        Assertions.assertEquals(RollingUpgradeMode.UNMONITORED_AUTO,
            response.iterator().next().upgradePolicy().upgradeMode());
        Assertions.assertEquals(5829409872258968702L,
            response.iterator().next().upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(false, response.iterator().next().upgradePolicy().recreateApplication());
        Assertions.assertEquals("moob", response.iterator().next().managedIdentities().get(0).name());
        Assertions.assertEquals("lftidgfcwqmpim", response.iterator().next().managedIdentities().get(0).principalId());
    }
}
