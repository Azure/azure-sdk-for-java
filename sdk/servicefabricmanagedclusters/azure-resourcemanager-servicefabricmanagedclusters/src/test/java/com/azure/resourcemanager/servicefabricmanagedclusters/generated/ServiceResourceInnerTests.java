// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.ServiceResourceInner;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.MoveCost;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.Partition;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingMechanism;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingTrigger;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelation;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetric;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePackageActivationMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePlacementPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceResourceProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ServiceResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"serviceKind\":\"ServiceResourceProperties\",\"provisioningState\":\"kv\",\"serviceTypeName\":\"melmqkrha\",\"partitionDescription\":{\"partitionScheme\":\"Partition\"},\"servicePackageActivationMode\":\"ExclusiveProcess\",\"serviceDnsName\":\"uahaquhcdhmd\",\"placementConstraints\":\"laexqp\",\"correlationScheme\":[{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"mwsrcrgvxpvgo\"}],\"serviceLoadMetrics\":[{\"name\":\"fmisg\",\"weight\":\"Low\",\"primaryDefaultLoad\":1990301694,\"secondaryDefaultLoad\":2092849341,\"defaultLoad\":941784903}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicy\"}],\"defaultMoveCost\":\"High\",\"scalingPolicies\":[{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}}]},\"location\":\"ourqhakau\",\"tags\":{\"cjooxdjebwpucwwf\":\"hsfwxosowzxcug\",\"hzceuojgjrwjue\":\"ovbvmeueciv\",\"x\":\"otwmcdyt\",\"nrjawgqwg\":\"it\"},\"id\":\"ni\",\"name\":\"kxfbkpycgklwndn\",\"type\":\"jdauwhvy\"}")
            .toObject(ServiceResourceInner.class);
        Assertions.assertEquals("laexqp", model.properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY,
            model.properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("mwsrcrgvxpvgo", model.properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("fmisg", model.properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.LOW, model.properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(1990301694, model.properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(2092849341, model.properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(941784903, model.properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.HIGH, model.properties().defaultMoveCost());
        Assertions.assertEquals("melmqkrha", model.properties().serviceTypeName());
        Assertions.assertEquals(ServicePackageActivationMode.EXCLUSIVE_PROCESS,
            model.properties().servicePackageActivationMode());
        Assertions.assertEquals("uahaquhcdhmd", model.properties().serviceDnsName());
        Assertions.assertEquals("ourqhakau", model.location());
        Assertions.assertEquals("hsfwxosowzxcug", model.tags().get("cjooxdjebwpucwwf"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceResourceInner model = new ServiceResourceInner()
            .withProperties(new ServiceResourceProperties().withPlacementConstraints("laexqp")
                .withCorrelationScheme(
                    Arrays.asList(new ServiceCorrelation().withScheme(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY)
                        .withServiceName("mwsrcrgvxpvgo")))
                .withServiceLoadMetrics(Arrays.asList(new ServiceLoadMetric().withName("fmisg")
                    .withWeight(ServiceLoadMetricWeight.LOW)
                    .withPrimaryDefaultLoad(1990301694)
                    .withSecondaryDefaultLoad(2092849341)
                    .withDefaultLoad(941784903)))
                .withServicePlacementPolicies(Arrays.asList(new ServicePlacementPolicy()))
                .withDefaultMoveCost(MoveCost.HIGH)
                .withScalingPolicies(Arrays.asList(
                    new ScalingPolicy().withScalingMechanism(new ScalingMechanism())
                        .withScalingTrigger(new ScalingTrigger()),
                    new ScalingPolicy().withScalingMechanism(new ScalingMechanism())
                        .withScalingTrigger(new ScalingTrigger()),
                    new ScalingPolicy().withScalingMechanism(new ScalingMechanism())
                        .withScalingTrigger(new ScalingTrigger())))
                .withServiceTypeName("melmqkrha")
                .withPartitionDescription(new Partition())
                .withServicePackageActivationMode(ServicePackageActivationMode.EXCLUSIVE_PROCESS)
                .withServiceDnsName("uahaquhcdhmd"))
            .withLocation("ourqhakau")
            .withTags(mapOf("cjooxdjebwpucwwf", "hsfwxosowzxcug", "hzceuojgjrwjue", "ovbvmeueciv", "x", "otwmcdyt",
                "nrjawgqwg", "it"));
        model = BinaryData.fromObject(model).toObject(ServiceResourceInner.class);
        Assertions.assertEquals("laexqp", model.properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY,
            model.properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("mwsrcrgvxpvgo", model.properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("fmisg", model.properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.LOW, model.properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(1990301694, model.properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(2092849341, model.properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(941784903, model.properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.HIGH, model.properties().defaultMoveCost());
        Assertions.assertEquals("melmqkrha", model.properties().serviceTypeName());
        Assertions.assertEquals(ServicePackageActivationMode.EXCLUSIVE_PROCESS,
            model.properties().servicePackageActivationMode());
        Assertions.assertEquals("uahaquhcdhmd", model.properties().serviceDnsName());
        Assertions.assertEquals("ourqhakau", model.location());
        Assertions.assertEquals("hsfwxosowzxcug", model.tags().get("cjooxdjebwpucwwf"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
