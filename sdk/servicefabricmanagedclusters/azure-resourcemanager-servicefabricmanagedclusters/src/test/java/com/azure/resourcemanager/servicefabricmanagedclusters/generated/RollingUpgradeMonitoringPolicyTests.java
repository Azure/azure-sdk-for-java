// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.FailureAction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.RollingUpgradeMonitoringPolicy;
import org.junit.jupiter.api.Assertions;

public final class RollingUpgradeMonitoringPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RollingUpgradeMonitoringPolicy model = BinaryData.fromString(
            "{\"failureAction\":\"Rollback\",\"healthCheckWaitDuration\":\"rujqg\",\"healthCheckStableDuration\":\"hmuouqfprwzwbn\",\"healthCheckRetryTimeout\":\"uitnwuiz\",\"upgradeTimeout\":\"a\",\"upgradeDomainTimeout\":\"x\"}")
            .toObject(RollingUpgradeMonitoringPolicy.class);
        Assertions.assertEquals(FailureAction.ROLLBACK, model.failureAction());
        Assertions.assertEquals("rujqg", model.healthCheckWaitDuration());
        Assertions.assertEquals("hmuouqfprwzwbn", model.healthCheckStableDuration());
        Assertions.assertEquals("uitnwuiz", model.healthCheckRetryTimeout());
        Assertions.assertEquals("a", model.upgradeTimeout());
        Assertions.assertEquals("x", model.upgradeDomainTimeout());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RollingUpgradeMonitoringPolicy model
            = new RollingUpgradeMonitoringPolicy().withFailureAction(FailureAction.ROLLBACK)
                .withHealthCheckWaitDuration("rujqg")
                .withHealthCheckStableDuration("hmuouqfprwzwbn")
                .withHealthCheckRetryTimeout("uitnwuiz")
                .withUpgradeTimeout("a")
                .withUpgradeDomainTimeout("x");
        model = BinaryData.fromObject(model).toObject(RollingUpgradeMonitoringPolicy.class);
        Assertions.assertEquals(FailureAction.ROLLBACK, model.failureAction());
        Assertions.assertEquals("rujqg", model.healthCheckWaitDuration());
        Assertions.assertEquals("hmuouqfprwzwbn", model.healthCheckStableDuration());
        Assertions.assertEquals("uitnwuiz", model.healthCheckRetryTimeout());
        Assertions.assertEquals("a", model.upgradeTimeout());
        Assertions.assertEquals("x", model.upgradeDomainTimeout());
    }
}
