// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.fluent.models.ApplicationTypeVersionResourceInner;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ApplicationTypeVersionResourceList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationTypeVersionResourceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationTypeVersionResourceList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"atscmd\",\"appPackageUrl\":\"pjhulsuuvmkj\"},\"location\":\"k\",\"tags\":{\"ryo\":\"ndiodjpslwejdpv\"},\"id\":\"soacctazakl\",\"name\":\"lahbcryff\",\"type\":\"fdosyg\"},{\"properties\":{\"provisioningState\":\"aojakhmsbzjhcrz\",\"appPackageUrl\":\"vdphlxaolthqtr\"},\"location\":\"jbp\",\"tags\":{\"n\":\"s\",\"wzo\":\"gvfcj\",\"np\":\"xjtfelluwfzit\",\"lxofpdvhpfxxypin\":\"qfpjk\"},\"id\":\"mayhuybbkpodepoo\",\"name\":\"inuvamiheogn\",\"type\":\"rxzxtheo\"},{\"properties\":{\"provisioningState\":\"ivyevcciqihnhun\",\"appPackageUrl\":\"bwjzr\"},\"location\":\"ygxgispemvtz\",\"tags\":{\"fxqeof\":\"fublj\",\"jqul\":\"aeqjhqjbasvms\"},\"id\":\"sntnbybkzgcw\",\"name\":\"wclxxwrl\",\"type\":\"douskcqvkocrcjdk\"}],\"nextLink\":\"nh\"}")
            .toObject(ApplicationTypeVersionResourceList.class);
        Assertions.assertEquals("k", model.value().get(0).location());
        Assertions.assertEquals("ndiodjpslwejdpv", model.value().get(0).tags().get("ryo"));
        Assertions.assertEquals("pjhulsuuvmkj", model.value().get(0).appPackageUrl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationTypeVersionResourceList model = new ApplicationTypeVersionResourceList().withValue(Arrays.asList(
            new ApplicationTypeVersionResourceInner().withLocation("k")
                .withTags(mapOf("ryo", "ndiodjpslwejdpv"))
                .withAppPackageUrl("pjhulsuuvmkj"),
            new ApplicationTypeVersionResourceInner().withLocation("jbp")
                .withTags(mapOf("n", "s", "wzo", "gvfcj", "np", "xjtfelluwfzit", "lxofpdvhpfxxypin", "qfpjk"))
                .withAppPackageUrl("vdphlxaolthqtr"),
            new ApplicationTypeVersionResourceInner().withLocation("ygxgispemvtz")
                .withTags(mapOf("fxqeof", "fublj", "jqul", "aeqjhqjbasvms"))
                .withAppPackageUrl("bwjzr")));
        model = BinaryData.fromObject(model).toObject(ApplicationTypeVersionResourceList.class);
        Assertions.assertEquals("k", model.value().get(0).location());
        Assertions.assertEquals("ndiodjpslwejdpv", model.value().get(0).tags().get("ryo"));
        Assertions.assertEquals("pjhulsuuvmkj", model.value().get(0).appPackageUrl());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
