// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.MoveCost;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.Partition;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingMechanism;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingTrigger;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelation;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetric;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePackageActivationMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePlacementPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.StatelessServiceProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class StatelessServicePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StatelessServiceProperties model = BinaryData.fromString(
            "{\"serviceKind\":\"Stateless\",\"instanceCount\":1228255689,\"minInstanceCount\":1085647312,\"minInstancePercentage\":475839278,\"provisioningState\":\"ca\",\"serviceTypeName\":\"uzbpzkafku\",\"partitionDescription\":{\"partitionScheme\":\"Partition\"},\"servicePackageActivationMode\":\"SharedProcess\",\"serviceDnsName\":\"nwbmeh\",\"placementConstraints\":\"eyvjusrtslhspkde\",\"correlationScheme\":[{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"fm\"},{\"scheme\":\"AlignedAffinity\",\"serviceName\":\"gkvtmelmqkrhah\"},{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"juahaquhcdhmdual\"}],\"serviceLoadMetrics\":[{\"name\":\"qpv\",\"weight\":\"High\",\"primaryDefaultLoad\":294636913,\"secondaryDefaultLoad\":1606090132,\"defaultLoad\":205808204},{\"name\":\"gvxp\",\"weight\":\"Low\",\"primaryDefaultLoad\":1677729561,\"secondaryDefaultLoad\":1121960551,\"defaultLoad\":1625950300},{\"name\":\"sgwbnbbeld\",\"weight\":\"Zero\",\"primaryDefaultLoad\":1782633502,\"secondaryDefaultLoad\":70118233,\"defaultLoad\":113893877}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"}],\"defaultMoveCost\":\"Medium\",\"scalingPolicies\":[{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}}]}")
            .toObject(StatelessServiceProperties.class);
        Assertions.assertEquals("eyvjusrtslhspkde", model.placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY,
            model.correlationScheme().get(0).scheme());
        Assertions.assertEquals("fm", model.correlationScheme().get(0).serviceName());
        Assertions.assertEquals("qpv", model.serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.HIGH, model.serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(294636913, model.serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(1606090132, model.serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(205808204, model.serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.MEDIUM, model.defaultMoveCost());
        Assertions.assertEquals("uzbpzkafku", model.serviceTypeName());
        Assertions.assertEquals(ServicePackageActivationMode.SHARED_PROCESS, model.servicePackageActivationMode());
        Assertions.assertEquals("nwbmeh", model.serviceDnsName());
        Assertions.assertEquals(1228255689, model.instanceCount());
        Assertions.assertEquals(1085647312, model.minInstanceCount());
        Assertions.assertEquals(475839278, model.minInstancePercentage());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StatelessServiceProperties model = new StatelessServiceProperties().withPlacementConstraints("eyvjusrtslhspkde")
            .withCorrelationScheme(Arrays.asList(
                new ServiceCorrelation().withScheme(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY)
                    .withServiceName("fm"),
                new ServiceCorrelation().withScheme(ServiceCorrelationScheme.ALIGNED_AFFINITY)
                    .withServiceName("gkvtmelmqkrhah"),
                new ServiceCorrelation().withScheme(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY)
                    .withServiceName("juahaquhcdhmdual")))
            .withServiceLoadMetrics(Arrays.asList(
                new ServiceLoadMetric().withName("qpv")
                    .withWeight(ServiceLoadMetricWeight.HIGH)
                    .withPrimaryDefaultLoad(294636913)
                    .withSecondaryDefaultLoad(1606090132)
                    .withDefaultLoad(205808204),
                new ServiceLoadMetric().withName("gvxp")
                    .withWeight(ServiceLoadMetricWeight.LOW)
                    .withPrimaryDefaultLoad(1677729561)
                    .withSecondaryDefaultLoad(1121960551)
                    .withDefaultLoad(1625950300),
                new ServiceLoadMetric().withName("sgwbnbbeld")
                    .withWeight(ServiceLoadMetricWeight.ZERO)
                    .withPrimaryDefaultLoad(1782633502)
                    .withSecondaryDefaultLoad(70118233)
                    .withDefaultLoad(113893877)))
            .withServicePlacementPolicies(
                Arrays.asList(new ServicePlacementPolicy(), new ServicePlacementPolicy(), new ServicePlacementPolicy()))
            .withDefaultMoveCost(MoveCost.MEDIUM)
            .withScalingPolicies(Arrays.asList(
                new ScalingPolicy().withScalingMechanism(new ScalingMechanism())
                    .withScalingTrigger(new ScalingTrigger()),
                new ScalingPolicy().withScalingMechanism(new ScalingMechanism())
                    .withScalingTrigger(new ScalingTrigger()),
                new ScalingPolicy().withScalingMechanism(new ScalingMechanism())
                    .withScalingTrigger(new ScalingTrigger())))
            .withServiceTypeName("uzbpzkafku")
            .withPartitionDescription(new Partition())
            .withServicePackageActivationMode(ServicePackageActivationMode.SHARED_PROCESS)
            .withServiceDnsName("nwbmeh")
            .withInstanceCount(1228255689)
            .withMinInstanceCount(1085647312)
            .withMinInstancePercentage(475839278);
        model = BinaryData.fromObject(model).toObject(StatelessServiceProperties.class);
        Assertions.assertEquals("eyvjusrtslhspkde", model.placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY,
            model.correlationScheme().get(0).scheme());
        Assertions.assertEquals("fm", model.correlationScheme().get(0).serviceName());
        Assertions.assertEquals("qpv", model.serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.HIGH, model.serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(294636913, model.serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(1606090132, model.serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(205808204, model.serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.MEDIUM, model.defaultMoveCost());
        Assertions.assertEquals("uzbpzkafku", model.serviceTypeName());
        Assertions.assertEquals(ServicePackageActivationMode.SHARED_PROCESS, model.servicePackageActivationMode());
        Assertions.assertEquals("nwbmeh", model.serviceDnsName());
        Assertions.assertEquals(1228255689, model.instanceCount());
        Assertions.assertEquals(1085647312, model.minInstanceCount());
        Assertions.assertEquals(475839278, model.minInstancePercentage());
    }
}
