// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.MoveCost;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.Partition;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingMechanism;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ScalingTrigger;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelation;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetric;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePackageActivationMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePlacementPolicy;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceResource;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceResourceProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServicesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"serviceKind\":\"ServiceResourceProperties\",\"provisioningState\":\"Succeeded\",\"serviceTypeName\":\"mfg\",\"partitionDescription\":{\"partitionScheme\":\"Partition\"},\"servicePackageActivationMode\":\"SharedProcess\",\"serviceDnsName\":\"qgleohibetnluank\",\"placementConstraints\":\"fxeeebtijvacvbm\",\"correlationScheme\":[{\"scheme\":\"AlignedAffinity\",\"serviceName\":\"q\"},{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"aj\"}],\"serviceLoadMetrics\":[{\"name\":\"xaceve\",\"weight\":\"Low\",\"primaryDefaultLoad\":1137200728,\"secondaryDefaultLoad\":2050950039,\"defaultLoad\":1175028140},{\"name\":\"gaoql\",\"weight\":\"Low\",\"primaryDefaultLoad\":317392928,\"secondaryDefaultLoad\":420432271,\"defaultLoad\":1704902215},{\"name\":\"fgvxirpghriypoqe\",\"weight\":\"Medium\",\"primaryDefaultLoad\":98815164,\"secondaryDefaultLoad\":370083816,\"defaultLoad\":1894775279}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"}],\"defaultMoveCost\":\"Medium\",\"scalingPolicies\":[{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}}]},\"location\":\"iq\",\"tags\":{\"itdfuxtyasiib\":\"ex\",\"xhcmavmqfoudo\":\"iybnnustgnljhnmg\",\"ndm\":\"hcgyyprotwyp\"},\"id\":\"hu\",\"name\":\"cmjkavlgorbmftpm\",\"type\":\"tzfjltf\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServiceFabricManagedClustersManager manager = ServiceFabricManagedClustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ServiceResource response = manager.services()
            .define("tybbwwpgda")
            .withExistingApplication("ywuhpsvfuur", "tlwexxwlalniexz", "rzpgep")
            .withRegion("jdfqwmkyoqufdvr")
            .withTags(mapOf("hpc", "lzo", "fdgugeyzi", "fnmdxotn"))
            .withProperties(new ServiceResourceProperties().withPlacementConstraints("xs")
                .withCorrelationScheme(Arrays.asList(
                    new ServiceCorrelation().withScheme(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY)
                        .withServiceName("tvlwijpsttexoq"),
                    new ServiceCorrelation().withScheme(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY)
                        .withServiceName("wcyyufmhruncu"),
                    new ServiceCorrelation().withScheme(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY)
                        .withServiceName("qspkcdqzhlctd")))
                .withServiceLoadMetrics(Arrays.asList(
                    new ServiceLoadMetric().withName("qn")
                        .withWeight(ServiceLoadMetricWeight.ZERO)
                        .withPrimaryDefaultLoad(1212474723)
                        .withSecondaryDefaultLoad(2042763855)
                        .withDefaultLoad(811463724),
                    new ServiceLoadMetric().withName("njjrcgegydcwbox")
                        .withWeight(ServiceLoadMetricWeight.LOW)
                        .withPrimaryDefaultLoad(1314460255)
                        .withSecondaryDefaultLoad(1707929789)
                        .withDefaultLoad(733872098),
                    new ServiceLoadMetric().withName("hrraiouaubrj")
                        .withWeight(ServiceLoadMetricWeight.ZERO)
                        .withPrimaryDefaultLoad(1702747573)
                        .withSecondaryDefaultLoad(465765494)
                        .withDefaultLoad(1541278105),
                    new ServiceLoadMetric().withName("rngifl")
                        .withWeight(ServiceLoadMetricWeight.LOW)
                        .withPrimaryDefaultLoad(362097401)
                        .withSecondaryDefaultLoad(361409209)
                        .withDefaultLoad(243616363)))
                .withServicePlacementPolicies(Arrays.asList(new ServicePlacementPolicy(), new ServicePlacementPolicy()))
                .withDefaultMoveCost(MoveCost.MEDIUM)
                .withScalingPolicies(Arrays.asList(
                    new ScalingPolicy().withScalingMechanism(new ScalingMechanism())
                        .withScalingTrigger(new ScalingTrigger()),
                    new ScalingPolicy().withScalingMechanism(new ScalingMechanism())
                        .withScalingTrigger(new ScalingTrigger())))
                .withServiceTypeName("q")
                .withPartitionDescription(new Partition())
                .withServicePackageActivationMode(ServicePackageActivationMode.SHARED_PROCESS)
                .withServiceDnsName("xkjibnxmy"))
            .create();

        Assertions.assertEquals("fxeeebtijvacvbm", response.properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.ALIGNED_AFFINITY,
            response.properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("q", response.properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("xaceve", response.properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.LOW,
            response.properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(1137200728, response.properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(2050950039, response.properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(1175028140, response.properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.MEDIUM, response.properties().defaultMoveCost());
        Assertions.assertEquals("mfg", response.properties().serviceTypeName());
        Assertions.assertEquals(ServicePackageActivationMode.SHARED_PROCESS,
            response.properties().servicePackageActivationMode());
        Assertions.assertEquals("qgleohibetnluank", response.properties().serviceDnsName());
        Assertions.assertEquals("iq", response.location());
        Assertions.assertEquals("ex", response.tags().get("itdfuxtyasiib"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
