// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.AverageServiceLoadScalingTrigger;
import org.junit.jupiter.api.Assertions;

public final class AverageServiceLoadScalingTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AverageServiceLoadScalingTrigger model = BinaryData.fromString(
            "{\"kind\":\"AverageServiceLoadTrigger\",\"metricName\":\"c\",\"lowerLoadThreshold\":65.33544191967107,\"upperLoadThreshold\":79.37105398505092,\"scaleInterval\":\"lvqhjkbegibtnmx\",\"useOnlyPrimaryLoad\":true}")
            .toObject(AverageServiceLoadScalingTrigger.class);
        Assertions.assertEquals("c", model.metricName());
        Assertions.assertEquals(65.33544191967107, model.lowerLoadThreshold());
        Assertions.assertEquals(79.37105398505092, model.upperLoadThreshold());
        Assertions.assertEquals("lvqhjkbegibtnmx", model.scaleInterval());
        Assertions.assertTrue(model.useOnlyPrimaryLoad());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AverageServiceLoadScalingTrigger model = new AverageServiceLoadScalingTrigger().withMetricName("c")
            .withLowerLoadThreshold(65.33544191967107)
            .withUpperLoadThreshold(79.37105398505092)
            .withScaleInterval("lvqhjkbegibtnmx")
            .withUseOnlyPrimaryLoad(true);
        model = BinaryData.fromObject(model).toObject(AverageServiceLoadScalingTrigger.class);
        Assertions.assertEquals("c", model.metricName());
        Assertions.assertEquals(65.33544191967107, model.lowerLoadThreshold());
        Assertions.assertEquals(79.37105398505092, model.upperLoadThreshold());
        Assertions.assertEquals("lvqhjkbegibtnmx", model.scaleInterval());
        Assertions.assertTrue(model.useOnlyPrimaryLoad());
    }
}
