// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.AverageServiceLoadScalingTrigger;
import org.junit.jupiter.api.Assertions;

public final class AverageServiceLoadScalingTriggerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AverageServiceLoadScalingTrigger model = BinaryData.fromString(
            "{\"kind\":\"AverageServiceLoadTrigger\",\"metricName\":\"foimwkslircizjxv\",\"lowerLoadThreshold\":28.724017352929177,\"upperLoadThreshold\":69.63280181639969,\"scaleInterval\":\"acvlhv\",\"useOnlyPrimaryLoad\":true}")
            .toObject(AverageServiceLoadScalingTrigger.class);
        Assertions.assertEquals("foimwkslircizjxv", model.metricName());
        Assertions.assertEquals(28.724017352929177, model.lowerLoadThreshold());
        Assertions.assertEquals(69.63280181639969, model.upperLoadThreshold());
        Assertions.assertEquals("acvlhv", model.scaleInterval());
        Assertions.assertEquals(true, model.useOnlyPrimaryLoad());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AverageServiceLoadScalingTrigger model
            = new AverageServiceLoadScalingTrigger().withMetricName("foimwkslircizjxv")
                .withLowerLoadThreshold(28.724017352929177)
                .withUpperLoadThreshold(69.63280181639969)
                .withScaleInterval("acvlhv")
                .withUseOnlyPrimaryLoad(true);
        model = BinaryData.fromObject(model).toObject(AverageServiceLoadScalingTrigger.class);
        Assertions.assertEquals("foimwkslircizjxv", model.metricName());
        Assertions.assertEquals(28.724017352929177, model.lowerLoadThreshold());
        Assertions.assertEquals(69.63280181639969, model.upperLoadThreshold());
        Assertions.assertEquals("acvlhv", model.scaleInterval());
        Assertions.assertEquals(true, model.useOnlyPrimaryLoad());
    }
}
