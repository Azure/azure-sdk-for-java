// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabricmanagedclusters.ServiceFabricManagedClustersManager;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.MoveCost;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServicePackageActivationMode;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.ServiceResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServicesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"serviceKind\":\"ServiceResourceProperties\",\"provisioningState\":\"dqns\",\"serviceTypeName\":\"fzpbgtgkyl\",\"partitionDescription\":{\"partitionScheme\":\"Partition\"},\"servicePackageActivationMode\":\"ExclusiveProcess\",\"serviceDnsName\":\"rjeuut\",\"placementConstraints\":\"xezw\",\"correlationScheme\":[{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"vbwnhhtq\"},{\"scheme\":\"AlignedAffinity\",\"serviceName\":\"ehgpp\"},{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"ifhpf\"},{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"ajvgcxtxjcsheafi\"}],\"serviceLoadMetrics\":[{\"name\":\"ugsresmkssjhoi\",\"weight\":\"High\",\"primaryDefaultLoad\":1451676187,\"secondaryDefaultLoad\":1606818470,\"defaultLoad\":753800849},{\"name\":\"prhptillu\",\"weight\":\"Low\",\"primaryDefaultLoad\":1656639409,\"secondaryDefaultLoad\":1467633348,\"defaultLoad\":2010820897},{\"name\":\"hm\",\"weight\":\"High\",\"primaryDefaultLoad\":484782271,\"secondaryDefaultLoad\":1561127811,\"defaultLoad\":379885454},{\"name\":\"tpwb\",\"weight\":\"Low\",\"primaryDefaultLoad\":1155046174,\"secondaryDefaultLoad\":1996411708,\"defaultLoad\":1970354054}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicy\"},{\"type\":\"ServicePlacementPolicy\"}],\"defaultMoveCost\":\"Low\",\"scalingPolicies\":[{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}},{\"scalingMechanism\":{\"kind\":\"ScalingMechanism\"},\"scalingTrigger\":{\"kind\":\"ScalingTrigger\"}}]},\"tags\":{\"ankjpdnjzh\":\"a\",\"lmuoyxprimrsopte\":\"joylh\",\"wxdzaumweoohgu\":\"cjmeislstvasy\",\"emwmdxmebwjs\":\"fuzboyjathwtzolb\"},\"location\":\"p\",\"id\":\"lxveabfqx\",\"name\":\"mwmqtibx\",\"type\":\"ijddtvqc\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServiceFabricManagedClustersManager manager = ServiceFabricManagedClustersManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ServiceResource response = manager.services()
            .getWithResponse("c", "xgccknfnw", "btmvpdvjdhttza", "fedxihchrphkm", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("xezw", response.properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY,
            response.properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("vbwnhhtq", response.properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("ugsresmkssjhoi", response.properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.HIGH,
            response.properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(1451676187, response.properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(1606818470, response.properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(753800849, response.properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.LOW, response.properties().defaultMoveCost());
        Assertions.assertEquals("fzpbgtgkyl", response.properties().serviceTypeName());
        Assertions.assertEquals(ServicePackageActivationMode.EXCLUSIVE_PROCESS,
            response.properties().servicePackageActivationMode());
        Assertions.assertEquals("rjeuut", response.properties().serviceDnsName());
        Assertions.assertEquals("a", response.tags().get("ankjpdnjzh"));
        Assertions.assertEquals("p", response.location());
    }
}
