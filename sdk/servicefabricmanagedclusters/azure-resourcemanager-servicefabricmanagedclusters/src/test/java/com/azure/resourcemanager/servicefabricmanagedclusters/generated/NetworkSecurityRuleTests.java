// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.Access;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.Direction;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.NetworkSecurityRule;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.NsgProtocol;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkSecurityRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkSecurityRule model = BinaryData.fromString(
            "{\"name\":\"byyntwlrbqt\",\"description\":\"ievseotgqrllt\",\"protocol\":\"tcp\",\"sourceAddressPrefixes\":[\"auwzizxbmpgc\",\"efuzmuvpbttd\",\"morppxebmnzbtbh\",\"pglkf\"],\"destinationAddressPrefixes\":[\"dneu\",\"lfphsdyhtozfikd\",\"wwquuvxzxclvithh\"],\"sourcePortRanges\":[\"nosggbhcoh\"],\"destinationPortRanges\":[\"sjnkal\",\"utiiswacf\"],\"sourceAddressPrefix\":\"dkzzewkfvhqcrail\",\"destinationAddressPrefix\":\"n\",\"sourcePortRange\":\"fuflrwdmhdlx\",\"destinationPortRange\":\"rxsagafcnihgwqa\",\"access\":\"allow\",\"priority\":633865702,\"direction\":\"outbound\"}")
            .toObject(NetworkSecurityRule.class);
        Assertions.assertEquals("byyntwlrbqt", model.name());
        Assertions.assertEquals("ievseotgqrllt", model.description());
        Assertions.assertEquals(NsgProtocol.TCP, model.protocol());
        Assertions.assertEquals("auwzizxbmpgc", model.sourceAddressPrefixes().get(0));
        Assertions.assertEquals("dneu", model.destinationAddressPrefixes().get(0));
        Assertions.assertEquals("nosggbhcoh", model.sourcePortRanges().get(0));
        Assertions.assertEquals("sjnkal", model.destinationPortRanges().get(0));
        Assertions.assertEquals("dkzzewkfvhqcrail", model.sourceAddressPrefix());
        Assertions.assertEquals("n", model.destinationAddressPrefix());
        Assertions.assertEquals("fuflrwdmhdlx", model.sourcePortRange());
        Assertions.assertEquals("rxsagafcnihgwqa", model.destinationPortRange());
        Assertions.assertEquals(Access.ALLOW, model.access());
        Assertions.assertEquals(633865702, model.priority());
        Assertions.assertEquals(Direction.OUTBOUND, model.direction());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkSecurityRule model = new NetworkSecurityRule().withName("byyntwlrbqt")
            .withDescription("ievseotgqrllt")
            .withProtocol(NsgProtocol.TCP)
            .withSourceAddressPrefixes(Arrays.asList("auwzizxbmpgc", "efuzmuvpbttd", "morppxebmnzbtbh", "pglkf"))
            .withDestinationAddressPrefixes(Arrays.asList("dneu", "lfphsdyhtozfikd", "wwquuvxzxclvithh"))
            .withSourcePortRanges(Arrays.asList("nosggbhcoh"))
            .withDestinationPortRanges(Arrays.asList("sjnkal", "utiiswacf"))
            .withSourceAddressPrefix("dkzzewkfvhqcrail")
            .withDestinationAddressPrefix("n")
            .withSourcePortRange("fuflrwdmhdlx")
            .withDestinationPortRange("rxsagafcnihgwqa")
            .withAccess(Access.ALLOW)
            .withPriority(633865702)
            .withDirection(Direction.OUTBOUND);
        model = BinaryData.fromObject(model).toObject(NetworkSecurityRule.class);
        Assertions.assertEquals("byyntwlrbqt", model.name());
        Assertions.assertEquals("ievseotgqrllt", model.description());
        Assertions.assertEquals(NsgProtocol.TCP, model.protocol());
        Assertions.assertEquals("auwzizxbmpgc", model.sourceAddressPrefixes().get(0));
        Assertions.assertEquals("dneu", model.destinationAddressPrefixes().get(0));
        Assertions.assertEquals("nosggbhcoh", model.sourcePortRanges().get(0));
        Assertions.assertEquals("sjnkal", model.destinationPortRanges().get(0));
        Assertions.assertEquals("dkzzewkfvhqcrail", model.sourceAddressPrefix());
        Assertions.assertEquals("n", model.destinationAddressPrefix());
        Assertions.assertEquals("fuflrwdmhdlx", model.sourcePortRange());
        Assertions.assertEquals("rxsagafcnihgwqa", model.destinationPortRange());
        Assertions.assertEquals(Access.ALLOW, model.access());
        Assertions.assertEquals(633865702, model.priority());
        Assertions.assertEquals(Direction.OUTBOUND, model.direction());
    }
}
