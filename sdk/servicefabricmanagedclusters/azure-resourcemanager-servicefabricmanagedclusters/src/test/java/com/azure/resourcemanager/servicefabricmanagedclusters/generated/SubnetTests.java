// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmanagedclusters.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PrivateEndpointNetworkPolicies;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.PrivateLinkServiceNetworkPolicies;
import com.azure.resourcemanager.servicefabricmanagedclusters.models.Subnet;
import org.junit.jupiter.api.Assertions;

public final class SubnetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Subnet model = BinaryData.fromString(
            "{\"name\":\"xozap\",\"enableIpv6\":true,\"privateEndpointNetworkPolicies\":\"disabled\",\"privateLinkServiceNetworkPolicies\":\"enabled\",\"networkSecurityGroupId\":\"lya\"}")
            .toObject(Subnet.class);
        Assertions.assertEquals("xozap", model.name());
        Assertions.assertEquals(true, model.enableIpv6());
        Assertions.assertEquals(PrivateEndpointNetworkPolicies.DISABLED, model.privateEndpointNetworkPolicies());
        Assertions.assertEquals(PrivateLinkServiceNetworkPolicies.ENABLED, model.privateLinkServiceNetworkPolicies());
        Assertions.assertEquals("lya", model.networkSecurityGroupId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Subnet model = new Subnet().withName("xozap")
            .withEnableIpv6(true)
            .withPrivateEndpointNetworkPolicies(PrivateEndpointNetworkPolicies.DISABLED)
            .withPrivateLinkServiceNetworkPolicies(PrivateLinkServiceNetworkPolicies.ENABLED)
            .withNetworkSecurityGroupId("lya");
        model = BinaryData.fromObject(model).toObject(Subnet.class);
        Assertions.assertEquals("xozap", model.name());
        Assertions.assertEquals(true, model.enableIpv6());
        Assertions.assertEquals(PrivateEndpointNetworkPolicies.DISABLED, model.privateEndpointNetworkPolicies());
        Assertions.assertEquals(PrivateLinkServiceNetworkPolicies.ENABLED, model.privateLinkServiceNetworkPolicies());
        Assertions.assertEquals("lya", model.networkSecurityGroupId());
    }
}
