// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.providerhub.fluent.ProviderMonitorSettingsClient;
import com.azure.resourcemanager.providerhub.fluent.models.ProviderMonitorSettingInner;
import com.azure.resourcemanager.providerhub.models.ProviderMonitorSetting;
import com.azure.resourcemanager.providerhub.models.ProviderMonitorSettings;

public final class ProviderMonitorSettingsImpl implements ProviderMonitorSettings {
    private static final ClientLogger LOGGER = new ClientLogger(ProviderMonitorSettingsImpl.class);

    private final ProviderMonitorSettingsClient innerClient;

    private final com.azure.resourcemanager.providerhub.ProviderHubManager serviceManager;

    public ProviderMonitorSettingsImpl(ProviderMonitorSettingsClient innerClient,
        com.azure.resourcemanager.providerhub.ProviderHubManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<ProviderMonitorSetting> getByResourceGroupWithResponse(String resourceGroupName,
        String providerMonitorSettingName, Context context) {
        Response<ProviderMonitorSettingInner> inner = this.serviceClient()
            .getByResourceGroupWithResponse(resourceGroupName, providerMonitorSettingName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ProviderMonitorSettingImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ProviderMonitorSetting getByResourceGroup(String resourceGroupName, String providerMonitorSettingName) {
        ProviderMonitorSettingInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, providerMonitorSettingName);
        if (inner != null) {
            return new ProviderMonitorSettingImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ProviderMonitorSetting> updateWithResponse(String resourceGroupName,
        String providerMonitorSettingName, Context context) {
        Response<ProviderMonitorSettingInner> inner
            = this.serviceClient().updateWithResponse(resourceGroupName, providerMonitorSettingName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ProviderMonitorSettingImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ProviderMonitorSetting update(String resourceGroupName, String providerMonitorSettingName) {
        ProviderMonitorSettingInner inner = this.serviceClient().update(resourceGroupName, providerMonitorSettingName);
        if (inner != null) {
            return new ProviderMonitorSettingImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String providerMonitorSettingName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, providerMonitorSettingName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String providerMonitorSettingName) {
        this.serviceClient().delete(resourceGroupName, providerMonitorSettingName);
    }

    public PagedIterable<ProviderMonitorSetting> listByResourceGroup(String resourceGroupName) {
        PagedIterable<ProviderMonitorSettingInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ProviderMonitorSettingImpl(inner1, this.manager()));
    }

    public PagedIterable<ProviderMonitorSetting> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<ProviderMonitorSettingInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ProviderMonitorSettingImpl(inner1, this.manager()));
    }

    public PagedIterable<ProviderMonitorSetting> list() {
        PagedIterable<ProviderMonitorSettingInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ProviderMonitorSettingImpl(inner1, this.manager()));
    }

    public PagedIterable<ProviderMonitorSetting> list(Context context) {
        PagedIterable<ProviderMonitorSettingInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ProviderMonitorSettingImpl(inner1, this.manager()));
    }

    public ProviderMonitorSetting getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String providerMonitorSettingName = ResourceManagerUtils.getValueFromIdByName(id, "providerMonitorSettings");
        if (providerMonitorSettingName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'providerMonitorSettings'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, providerMonitorSettingName, Context.NONE)
            .getValue();
    }

    public Response<ProviderMonitorSetting> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String providerMonitorSettingName = ResourceManagerUtils.getValueFromIdByName(id, "providerMonitorSettings");
        if (providerMonitorSettingName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'providerMonitorSettings'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, providerMonitorSettingName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String providerMonitorSettingName = ResourceManagerUtils.getValueFromIdByName(id, "providerMonitorSettings");
        if (providerMonitorSettingName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'providerMonitorSettings'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, providerMonitorSettingName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String providerMonitorSettingName = ResourceManagerUtils.getValueFromIdByName(id, "providerMonitorSettings");
        if (providerMonitorSettingName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'providerMonitorSettings'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, providerMonitorSettingName, context);
    }

    private ProviderMonitorSettingsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.providerhub.ProviderHubManager manager() {
        return this.serviceManager;
    }

    public ProviderMonitorSettingImpl define(String name) {
        return new ProviderMonitorSettingImpl(name, this.manager());
    }
}
