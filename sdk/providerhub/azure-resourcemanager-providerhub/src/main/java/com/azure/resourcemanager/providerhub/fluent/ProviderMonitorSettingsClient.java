// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.providerhub.fluent.models.ProviderMonitorSettingInner;

/**
 * An instance of this class provides access to all the operations defined in ProviderMonitorSettingsClient.
 */
public interface ProviderMonitorSettingsClient {
    /**
     * Gets the provider monitor setting details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerMonitorSettingName The name of the provider monitor setting.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the provider monitor setting details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ProviderMonitorSettingInner> getByResourceGroupWithResponse(String resourceGroupName,
        String providerMonitorSettingName, Context context);

    /**
     * Gets the provider monitor setting details.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerMonitorSettingName The name of the provider monitor setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the provider monitor setting details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProviderMonitorSettingInner getByResourceGroup(String resourceGroupName, String providerMonitorSettingName);

    /**
     * Creates the provider monitor setting.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerMonitorSettingName The name of the provider monitor setting.
     * @param properties The provider monitor setting properties supplied to the create operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ProviderMonitorSettingInner>, ProviderMonitorSettingInner> beginCreate(
        String resourceGroupName, String providerMonitorSettingName, ProviderMonitorSettingInner properties);

    /**
     * Creates the provider monitor setting.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerMonitorSettingName The name of the provider monitor setting.
     * @param properties The provider monitor setting properties supplied to the create operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ProviderMonitorSettingInner>, ProviderMonitorSettingInner> beginCreate(
        String resourceGroupName, String providerMonitorSettingName, ProviderMonitorSettingInner properties,
        Context context);

    /**
     * Creates the provider monitor setting.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerMonitorSettingName The name of the provider monitor setting.
     * @param properties The provider monitor setting properties supplied to the create operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProviderMonitorSettingInner create(String resourceGroupName, String providerMonitorSettingName,
        ProviderMonitorSettingInner properties);

    /**
     * Creates the provider monitor setting.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerMonitorSettingName The name of the provider monitor setting.
     * @param properties The provider monitor setting properties supplied to the create operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProviderMonitorSettingInner create(String resourceGroupName, String providerMonitorSettingName,
        ProviderMonitorSettingInner properties, Context context);

    /**
     * Updates the provider monitor setting properties as specified in the request body. Update fails if the specified
     * provider monitor setting does not already exist.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerMonitorSettingName The name of the provider monitor setting.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ProviderMonitorSettingInner> updateWithResponse(String resourceGroupName,
        String providerMonitorSettingName, Context context);

    /**
     * Updates the provider monitor setting properties as specified in the request body. Update fails if the specified
     * provider monitor setting does not already exist.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerMonitorSettingName The name of the provider monitor setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProviderMonitorSettingInner update(String resourceGroupName, String providerMonitorSettingName);

    /**
     * Deletes a provider monitor setting.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerMonitorSettingName The name of the provider monitor setting.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceGroupName, String providerMonitorSettingName, Context context);

    /**
     * Deletes a provider monitor setting.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerMonitorSettingName The name of the provider monitor setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String providerMonitorSettingName);

    /**
     * Gets the list of the provider monitor settings in the resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of the provider monitor settings in the resource group as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProviderMonitorSettingInner> listByResourceGroup(String resourceGroupName);

    /**
     * Gets the list of the provider monitor settings in the resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of the provider monitor settings in the resource group as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProviderMonitorSettingInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Gets the list of the provider monitor settings in the subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of the provider monitor settings in the subscription as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProviderMonitorSettingInner> list();

    /**
     * Gets the list of the provider monitor settings in the subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of the provider monitor settings in the subscription as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProviderMonitorSettingInner> list(Context context);
}
