// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The DeleteDependency model.
 */
@Fluent
public final class DeleteDependency implements JsonSerializable<DeleteDependency> {
    /*
     * Required features.
     */
    private List<String> requiredFeatures;

    /*
     * Linked property.
     */
    private String linkedProperty;

    /*
     * Linked type.
     */
    private String linkedType;

    /**
     * Creates an instance of DeleteDependency class.
     */
    public DeleteDependency() {
    }

    /**
     * Get the requiredFeatures property: Required features.
     * 
     * @return the requiredFeatures value.
     */
    public List<String> requiredFeatures() {
        return this.requiredFeatures;
    }

    /**
     * Set the requiredFeatures property: Required features.
     * 
     * @param requiredFeatures the requiredFeatures value to set.
     * @return the DeleteDependency object itself.
     */
    public DeleteDependency withRequiredFeatures(List<String> requiredFeatures) {
        this.requiredFeatures = requiredFeatures;
        return this;
    }

    /**
     * Get the linkedProperty property: Linked property.
     * 
     * @return the linkedProperty value.
     */
    public String linkedProperty() {
        return this.linkedProperty;
    }

    /**
     * Set the linkedProperty property: Linked property.
     * 
     * @param linkedProperty the linkedProperty value to set.
     * @return the DeleteDependency object itself.
     */
    public DeleteDependency withLinkedProperty(String linkedProperty) {
        this.linkedProperty = linkedProperty;
        return this;
    }

    /**
     * Get the linkedType property: Linked type.
     * 
     * @return the linkedType value.
     */
    public String linkedType() {
        return this.linkedType;
    }

    /**
     * Set the linkedType property: Linked type.
     * 
     * @param linkedType the linkedType value to set.
     * @return the DeleteDependency object itself.
     */
    public DeleteDependency withLinkedType(String linkedType) {
        this.linkedType = linkedType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("requiredFeatures", this.requiredFeatures,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("linkedProperty", this.linkedProperty);
        jsonWriter.writeStringField("linkedType", this.linkedType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeleteDependency from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeleteDependency if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeleteDependency.
     */
    public static DeleteDependency fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeleteDependency deserializedDeleteDependency = new DeleteDependency();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("requiredFeatures".equals(fieldName)) {
                    List<String> requiredFeatures = reader.readArray(reader1 -> reader1.getString());
                    deserializedDeleteDependency.requiredFeatures = requiredFeatures;
                } else if ("linkedProperty".equals(fieldName)) {
                    deserializedDeleteDependency.linkedProperty = reader.getString();
                } else if ("linkedType".equals(fieldName)) {
                    deserializedDeleteDependency.linkedType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeleteDependency;
        });
    }
}
