// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The resource provider management.
 */
@Fluent
public final class ResourceTypeRegistrationPropertiesManagement extends ResourceProviderManagement {
    /**
     * Creates an instance of ResourceTypeRegistrationPropertiesManagement class.
     */
    public ResourceTypeRegistrationPropertiesManagement() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationPropertiesManagement withSchemaOwners(List<String> schemaOwners) {
        super.withSchemaOwners(schemaOwners);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationPropertiesManagement withManifestOwners(List<String> manifestOwners) {
        super.withManifestOwners(manifestOwners);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationPropertiesManagement withAuthorizationOwners(List<String> authorizationOwners) {
        super.withAuthorizationOwners(authorizationOwners);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationPropertiesManagement withIncidentRoutingService(String incidentRoutingService) {
        super.withIncidentRoutingService(incidentRoutingService);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationPropertiesManagement withIncidentRoutingTeam(String incidentRoutingTeam) {
        super.withIncidentRoutingTeam(incidentRoutingTeam);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationPropertiesManagement withIncidentContactEmail(String incidentContactEmail) {
        super.withIncidentContactEmail(incidentContactEmail);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationPropertiesManagement withServiceTreeInfos(List<ServiceTreeInfo> serviceTreeInfos) {
        super.withServiceTreeInfos(serviceTreeInfos);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationPropertiesManagement
        withResourceAccessPolicy(ResourceAccessPolicy resourceAccessPolicy) {
        super.withResourceAccessPolicy(resourceAccessPolicy);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationPropertiesManagement
        withResourceAccessRoles(List<ResourceAccessRole> resourceAccessRoles) {
        super.withResourceAccessRoles(resourceAccessRoles);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationPropertiesManagement
        withExpeditedRolloutSubmitters(List<String> expeditedRolloutSubmitters) {
        super.withExpeditedRolloutSubmitters(expeditedRolloutSubmitters);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationPropertiesManagement withErrorResponseMessageOptions(
        ResourceProviderManagementErrorResponseMessageOptions errorResponseMessageOptions) {
        super.withErrorResponseMessageOptions(errorResponseMessageOptions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationPropertiesManagement
        withExpeditedRolloutMetadata(ResourceProviderManagementExpeditedRolloutMetadata expeditedRolloutMetadata) {
        super.withExpeditedRolloutMetadata(expeditedRolloutMetadata);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationPropertiesManagement withCanaryManifestOwners(List<String> canaryManifestOwners) {
        super.withCanaryManifestOwners(canaryManifestOwners);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationPropertiesManagement withPcCode(String pcCode) {
        super.withPcCode(pcCode);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationPropertiesManagement withProfitCenterProgramId(String profitCenterProgramId) {
        super.withProfitCenterProgramId(profitCenterProgramId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (serviceTreeInfos() != null) {
            serviceTreeInfos().forEach(e -> e.validate());
        }
        if (resourceAccessRoles() != null) {
            resourceAccessRoles().forEach(e -> e.validate());
        }
        if (errorResponseMessageOptions() != null) {
            errorResponseMessageOptions().validate();
        }
        if (expeditedRolloutMetadata() != null) {
            expeditedRolloutMetadata().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("schemaOwners", schemaOwners(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("manifestOwners", manifestOwners(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("authorizationOwners", authorizationOwners(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("incidentRoutingService", incidentRoutingService());
        jsonWriter.writeStringField("incidentRoutingTeam", incidentRoutingTeam());
        jsonWriter.writeStringField("incidentContactEmail", incidentContactEmail());
        jsonWriter.writeArrayField("serviceTreeInfos", serviceTreeInfos(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("resourceAccessPolicy",
            resourceAccessPolicy() == null ? null : resourceAccessPolicy().toString());
        jsonWriter.writeArrayField("resourceAccessRoles", resourceAccessRoles(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("expeditedRolloutSubmitters", expeditedRolloutSubmitters(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("errorResponseMessageOptions", errorResponseMessageOptions());
        jsonWriter.writeJsonField("expeditedRolloutMetadata", expeditedRolloutMetadata());
        jsonWriter.writeArrayField("canaryManifestOwners", canaryManifestOwners(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("pcCode", pcCode());
        jsonWriter.writeStringField("profitCenterProgramId", profitCenterProgramId());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceTypeRegistrationPropertiesManagement from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceTypeRegistrationPropertiesManagement if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceTypeRegistrationPropertiesManagement.
     */
    public static ResourceTypeRegistrationPropertiesManagement fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceTypeRegistrationPropertiesManagement deserializedResourceTypeRegistrationPropertiesManagement
                = new ResourceTypeRegistrationPropertiesManagement();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("schemaOwners".equals(fieldName)) {
                    List<String> schemaOwners = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceTypeRegistrationPropertiesManagement.withSchemaOwners(schemaOwners);
                } else if ("manifestOwners".equals(fieldName)) {
                    List<String> manifestOwners = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceTypeRegistrationPropertiesManagement.withManifestOwners(manifestOwners);
                } else if ("authorizationOwners".equals(fieldName)) {
                    List<String> authorizationOwners = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceTypeRegistrationPropertiesManagement
                        .withAuthorizationOwners(authorizationOwners);
                } else if ("incidentRoutingService".equals(fieldName)) {
                    deserializedResourceTypeRegistrationPropertiesManagement
                        .withIncidentRoutingService(reader.getString());
                } else if ("incidentRoutingTeam".equals(fieldName)) {
                    deserializedResourceTypeRegistrationPropertiesManagement
                        .withIncidentRoutingTeam(reader.getString());
                } else if ("incidentContactEmail".equals(fieldName)) {
                    deserializedResourceTypeRegistrationPropertiesManagement
                        .withIncidentContactEmail(reader.getString());
                } else if ("serviceTreeInfos".equals(fieldName)) {
                    List<ServiceTreeInfo> serviceTreeInfos
                        = reader.readArray(reader1 -> ServiceTreeInfo.fromJson(reader1));
                    deserializedResourceTypeRegistrationPropertiesManagement.withServiceTreeInfos(serviceTreeInfos);
                } else if ("resourceAccessPolicy".equals(fieldName)) {
                    deserializedResourceTypeRegistrationPropertiesManagement
                        .withResourceAccessPolicy(ResourceAccessPolicy.fromString(reader.getString()));
                } else if ("resourceAccessRoles".equals(fieldName)) {
                    List<ResourceAccessRole> resourceAccessRoles
                        = reader.readArray(reader1 -> ResourceAccessRole.fromJson(reader1));
                    deserializedResourceTypeRegistrationPropertiesManagement
                        .withResourceAccessRoles(resourceAccessRoles);
                } else if ("expeditedRolloutSubmitters".equals(fieldName)) {
                    List<String> expeditedRolloutSubmitters = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceTypeRegistrationPropertiesManagement
                        .withExpeditedRolloutSubmitters(expeditedRolloutSubmitters);
                } else if ("errorResponseMessageOptions".equals(fieldName)) {
                    deserializedResourceTypeRegistrationPropertiesManagement.withErrorResponseMessageOptions(
                        ResourceProviderManagementErrorResponseMessageOptions.fromJson(reader));
                } else if ("expeditedRolloutMetadata".equals(fieldName)) {
                    deserializedResourceTypeRegistrationPropertiesManagement.withExpeditedRolloutMetadata(
                        ResourceProviderManagementExpeditedRolloutMetadata.fromJson(reader));
                } else if ("canaryManifestOwners".equals(fieldName)) {
                    List<String> canaryManifestOwners = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceTypeRegistrationPropertiesManagement
                        .withCanaryManifestOwners(canaryManifestOwners);
                } else if ("pcCode".equals(fieldName)) {
                    deserializedResourceTypeRegistrationPropertiesManagement.withPcCode(reader.getString());
                } else if ("profitCenterProgramId".equals(fieldName)) {
                    deserializedResourceTypeRegistrationPropertiesManagement
                        .withProfitCenterProgramId(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceTypeRegistrationPropertiesManagement;
        });
    }
}
