// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ApplicationDataAuthorization model.
 */
@Fluent
public final class ApplicationDataAuthorization implements JsonSerializable<ApplicationDataAuthorization> {
    /*
     * The ownership role the application has on the resource types. The service owner role gives the application owner
     * permissions. The limited owner role gives elevated permissions but does not allow all the permissions of a
     * service owner, such as read/write on internal metadata.
     */
    private Role role;

    /*
     * The resource types from the defined resource types in the provider namespace that the application can access. If
     * no resource types are specified and the role is service owner, the default is * which is all resource types
     */
    private List<String> resourceTypes;

    /**
     * Creates an instance of ApplicationDataAuthorization class.
     */
    public ApplicationDataAuthorization() {
    }

    /**
     * Get the role property: The ownership role the application has on the resource types. The service owner role gives
     * the application owner permissions. The limited owner role gives elevated permissions but does not allow all the
     * permissions of a service owner, such as read/write on internal metadata.
     * 
     * @return the role value.
     */
    public Role role() {
        return this.role;
    }

    /**
     * Set the role property: The ownership role the application has on the resource types. The service owner role gives
     * the application owner permissions. The limited owner role gives elevated permissions but does not allow all the
     * permissions of a service owner, such as read/write on internal metadata.
     * 
     * @param role the role value to set.
     * @return the ApplicationDataAuthorization object itself.
     */
    public ApplicationDataAuthorization withRole(Role role) {
        this.role = role;
        return this;
    }

    /**
     * Get the resourceTypes property: The resource types from the defined resource types in the provider namespace that
     * the application can access. If no resource types are specified and the role is service owner, the default is *
     * which is all resource types.
     * 
     * @return the resourceTypes value.
     */
    public List<String> resourceTypes() {
        return this.resourceTypes;
    }

    /**
     * Set the resourceTypes property: The resource types from the defined resource types in the provider namespace that
     * the application can access. If no resource types are specified and the role is service owner, the default is *
     * which is all resource types.
     * 
     * @param resourceTypes the resourceTypes value to set.
     * @return the ApplicationDataAuthorization object itself.
     */
    public ApplicationDataAuthorization withResourceTypes(List<String> resourceTypes) {
        this.resourceTypes = resourceTypes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (role() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property role in model ApplicationDataAuthorization"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApplicationDataAuthorization.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        jsonWriter.writeArrayField("resourceTypes", this.resourceTypes,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationDataAuthorization from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationDataAuthorization if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApplicationDataAuthorization.
     */
    public static ApplicationDataAuthorization fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationDataAuthorization deserializedApplicationDataAuthorization = new ApplicationDataAuthorization();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("role".equals(fieldName)) {
                    deserializedApplicationDataAuthorization.role = Role.fromString(reader.getString());
                } else if ("resourceTypes".equals(fieldName)) {
                    List<String> resourceTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedApplicationDataAuthorization.resourceTypes = resourceTypes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationDataAuthorization;
        });
    }
}
