// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.providerhub.fluent.models.ResourceTypeRegistrationInner;
import java.io.IOException;
import java.util.List;

/**
 * The CustomRolloutSpecification model.
 */
@Fluent
public class CustomRolloutSpecification implements JsonSerializable<CustomRolloutSpecification> {
    /*
     * The canary property.
     */
    private CustomRolloutSpecificationCanary canary;

    /*
     * The providerRegistration property.
     */
    private CustomRolloutSpecificationProviderRegistration providerRegistration;

    /*
     * The resourceTypeRegistrations property.
     */
    private List<ResourceTypeRegistrationInner> resourceTypeRegistrations;

    /**
     * Creates an instance of CustomRolloutSpecification class.
     */
    public CustomRolloutSpecification() {
    }

    /**
     * Get the canary property: The canary property.
     * 
     * @return the canary value.
     */
    public CustomRolloutSpecificationCanary canary() {
        return this.canary;
    }

    /**
     * Set the canary property: The canary property.
     * 
     * @param canary the canary value to set.
     * @return the CustomRolloutSpecification object itself.
     */
    public CustomRolloutSpecification withCanary(CustomRolloutSpecificationCanary canary) {
        this.canary = canary;
        return this;
    }

    /**
     * Get the providerRegistration property: The providerRegistration property.
     * 
     * @return the providerRegistration value.
     */
    public CustomRolloutSpecificationProviderRegistration providerRegistration() {
        return this.providerRegistration;
    }

    /**
     * Set the providerRegistration property: The providerRegistration property.
     * 
     * @param providerRegistration the providerRegistration value to set.
     * @return the CustomRolloutSpecification object itself.
     */
    public CustomRolloutSpecification
        withProviderRegistration(CustomRolloutSpecificationProviderRegistration providerRegistration) {
        this.providerRegistration = providerRegistration;
        return this;
    }

    /**
     * Get the resourceTypeRegistrations property: The resourceTypeRegistrations property.
     * 
     * @return the resourceTypeRegistrations value.
     */
    public List<ResourceTypeRegistrationInner> resourceTypeRegistrations() {
        return this.resourceTypeRegistrations;
    }

    /**
     * Set the resourceTypeRegistrations property: The resourceTypeRegistrations property.
     * 
     * @param resourceTypeRegistrations the resourceTypeRegistrations value to set.
     * @return the CustomRolloutSpecification object itself.
     */
    public CustomRolloutSpecification
        withResourceTypeRegistrations(List<ResourceTypeRegistrationInner> resourceTypeRegistrations) {
        this.resourceTypeRegistrations = resourceTypeRegistrations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (canary() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property canary in model CustomRolloutSpecification"));
        } else {
            canary().validate();
        }
        if (providerRegistration() != null) {
            providerRegistration().validate();
        }
        if (resourceTypeRegistrations() != null) {
            resourceTypeRegistrations().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CustomRolloutSpecification.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("canary", this.canary);
        jsonWriter.writeJsonField("providerRegistration", this.providerRegistration);
        jsonWriter.writeArrayField("resourceTypeRegistrations", this.resourceTypeRegistrations,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomRolloutSpecification from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomRolloutSpecification if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CustomRolloutSpecification.
     */
    public static CustomRolloutSpecification fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomRolloutSpecification deserializedCustomRolloutSpecification = new CustomRolloutSpecification();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("canary".equals(fieldName)) {
                    deserializedCustomRolloutSpecification.canary = CustomRolloutSpecificationCanary.fromJson(reader);
                } else if ("providerRegistration".equals(fieldName)) {
                    deserializedCustomRolloutSpecification.providerRegistration
                        = CustomRolloutSpecificationProviderRegistration.fromJson(reader);
                } else if ("resourceTypeRegistrations".equals(fieldName)) {
                    List<ResourceTypeRegistrationInner> resourceTypeRegistrations
                        = reader.readArray(reader1 -> ResourceTypeRegistrationInner.fromJson(reader1));
                    deserializedCustomRolloutSpecification.resourceTypeRegistrations = resourceTypeRegistrations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomRolloutSpecification;
        });
    }
}
