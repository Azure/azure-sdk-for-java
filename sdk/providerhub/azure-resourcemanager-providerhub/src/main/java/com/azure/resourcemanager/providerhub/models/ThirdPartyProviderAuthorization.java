// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ThirdPartyProviderAuthorization model.
 */
@Fluent
public class ThirdPartyProviderAuthorization implements JsonSerializable<ThirdPartyProviderAuthorization> {
    /*
     * The authorizations property.
     */
    private List<LightHouseAuthorization> authorizations;

    /*
     * The managedByTenantId property.
     */
    private String managedByTenantId;

    /**
     * Creates an instance of ThirdPartyProviderAuthorization class.
     */
    public ThirdPartyProviderAuthorization() {
    }

    /**
     * Get the authorizations property: The authorizations property.
     * 
     * @return the authorizations value.
     */
    public List<LightHouseAuthorization> authorizations() {
        return this.authorizations;
    }

    /**
     * Set the authorizations property: The authorizations property.
     * 
     * @param authorizations the authorizations value to set.
     * @return the ThirdPartyProviderAuthorization object itself.
     */
    public ThirdPartyProviderAuthorization withAuthorizations(List<LightHouseAuthorization> authorizations) {
        this.authorizations = authorizations;
        return this;
    }

    /**
     * Get the managedByTenantId property: The managedByTenantId property.
     * 
     * @return the managedByTenantId value.
     */
    public String managedByTenantId() {
        return this.managedByTenantId;
    }

    /**
     * Set the managedByTenantId property: The managedByTenantId property.
     * 
     * @param managedByTenantId the managedByTenantId value to set.
     * @return the ThirdPartyProviderAuthorization object itself.
     */
    public ThirdPartyProviderAuthorization withManagedByTenantId(String managedByTenantId) {
        this.managedByTenantId = managedByTenantId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (authorizations() != null) {
            authorizations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("authorizations", this.authorizations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("managedByTenantId", this.managedByTenantId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ThirdPartyProviderAuthorization from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ThirdPartyProviderAuthorization if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ThirdPartyProviderAuthorization.
     */
    public static ThirdPartyProviderAuthorization fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ThirdPartyProviderAuthorization deserializedThirdPartyProviderAuthorization
                = new ThirdPartyProviderAuthorization();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authorizations".equals(fieldName)) {
                    List<LightHouseAuthorization> authorizations
                        = reader.readArray(reader1 -> LightHouseAuthorization.fromJson(reader1));
                    deserializedThirdPartyProviderAuthorization.authorizations = authorizations;
                } else if ("managedByTenantId".equals(fieldName)) {
                    deserializedThirdPartyProviderAuthorization.managedByTenantId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedThirdPartyProviderAuthorization;
        });
    }
}
