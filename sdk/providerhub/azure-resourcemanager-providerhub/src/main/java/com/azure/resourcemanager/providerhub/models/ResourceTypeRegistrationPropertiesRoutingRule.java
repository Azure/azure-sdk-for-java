// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Routing rule.
 */
@Fluent
public final class ResourceTypeRegistrationPropertiesRoutingRule
    implements JsonSerializable<ResourceTypeRegistrationPropertiesRoutingRule> {
    /*
     * Hosted resource type.
     */
    private String hostResourceType;

    /**
     * Creates an instance of ResourceTypeRegistrationPropertiesRoutingRule class.
     */
    public ResourceTypeRegistrationPropertiesRoutingRule() {
    }

    /**
     * Get the hostResourceType property: Hosted resource type.
     * 
     * @return the hostResourceType value.
     */
    public String hostResourceType() {
        return this.hostResourceType;
    }

    /**
     * Set the hostResourceType property: Hosted resource type.
     * 
     * @param hostResourceType the hostResourceType value to set.
     * @return the ResourceTypeRegistrationPropertiesRoutingRule object itself.
     */
    public ResourceTypeRegistrationPropertiesRoutingRule withHostResourceType(String hostResourceType) {
        this.hostResourceType = hostResourceType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("hostResourceType", this.hostResourceType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceTypeRegistrationPropertiesRoutingRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceTypeRegistrationPropertiesRoutingRule if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceTypeRegistrationPropertiesRoutingRule.
     */
    public static ResourceTypeRegistrationPropertiesRoutingRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceTypeRegistrationPropertiesRoutingRule deserializedResourceTypeRegistrationPropertiesRoutingRule
                = new ResourceTypeRegistrationPropertiesRoutingRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hostResourceType".equals(fieldName)) {
                    deserializedResourceTypeRegistrationPropertiesRoutingRule.hostResourceType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceTypeRegistrationPropertiesRoutingRule;
        });
    }
}
