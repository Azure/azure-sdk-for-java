// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ResourceHydrationAccount model.
 */
@Fluent
public final class ResourceHydrationAccount implements JsonSerializable<ResourceHydrationAccount> {
    /*
     * The max child resource consistency job limit.
     */
    private Long maxChildResourceConsistencyJobLimit;

    /*
     * The encrypted key.
     */
    private String encryptedKey;

    /*
     * The account name.
     */
    private String accountName;

    /*
     * The subscription id.
     */
    private String subscriptionId;

    /**
     * Creates an instance of ResourceHydrationAccount class.
     */
    public ResourceHydrationAccount() {
    }

    /**
     * Get the maxChildResourceConsistencyJobLimit property: The max child resource consistency job limit.
     * 
     * @return the maxChildResourceConsistencyJobLimit value.
     */
    public Long maxChildResourceConsistencyJobLimit() {
        return this.maxChildResourceConsistencyJobLimit;
    }

    /**
     * Set the maxChildResourceConsistencyJobLimit property: The max child resource consistency job limit.
     * 
     * @param maxChildResourceConsistencyJobLimit the maxChildResourceConsistencyJobLimit value to set.
     * @return the ResourceHydrationAccount object itself.
     */
    public ResourceHydrationAccount withMaxChildResourceConsistencyJobLimit(Long maxChildResourceConsistencyJobLimit) {
        this.maxChildResourceConsistencyJobLimit = maxChildResourceConsistencyJobLimit;
        return this;
    }

    /**
     * Get the encryptedKey property: The encrypted key.
     * 
     * @return the encryptedKey value.
     */
    public String encryptedKey() {
        return this.encryptedKey;
    }

    /**
     * Set the encryptedKey property: The encrypted key.
     * 
     * @param encryptedKey the encryptedKey value to set.
     * @return the ResourceHydrationAccount object itself.
     */
    public ResourceHydrationAccount withEncryptedKey(String encryptedKey) {
        this.encryptedKey = encryptedKey;
        return this;
    }

    /**
     * Get the accountName property: The account name.
     * 
     * @return the accountName value.
     */
    public String accountName() {
        return this.accountName;
    }

    /**
     * Set the accountName property: The account name.
     * 
     * @param accountName the accountName value to set.
     * @return the ResourceHydrationAccount object itself.
     */
    public ResourceHydrationAccount withAccountName(String accountName) {
        this.accountName = accountName;
        return this;
    }

    /**
     * Get the subscriptionId property: The subscription id.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Set the subscriptionId property: The subscription id.
     * 
     * @param subscriptionId the subscriptionId value to set.
     * @return the ResourceHydrationAccount object itself.
     */
    public ResourceHydrationAccount withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("maxChildResourceConsistencyJobLimit", this.maxChildResourceConsistencyJobLimit);
        jsonWriter.writeStringField("encryptedKey", this.encryptedKey);
        jsonWriter.writeStringField("accountName", this.accountName);
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceHydrationAccount from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceHydrationAccount if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceHydrationAccount.
     */
    public static ResourceHydrationAccount fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceHydrationAccount deserializedResourceHydrationAccount = new ResourceHydrationAccount();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maxChildResourceConsistencyJobLimit".equals(fieldName)) {
                    deserializedResourceHydrationAccount.maxChildResourceConsistencyJobLimit
                        = reader.getNullable(JsonReader::getLong);
                } else if ("encryptedKey".equals(fieldName)) {
                    deserializedResourceHydrationAccount.encryptedKey = reader.getString();
                } else if ("accountName".equals(fieldName)) {
                    deserializedResourceHydrationAccount.accountName = reader.getString();
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedResourceHydrationAccount.subscriptionId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceHydrationAccount;
        });
    }
}
