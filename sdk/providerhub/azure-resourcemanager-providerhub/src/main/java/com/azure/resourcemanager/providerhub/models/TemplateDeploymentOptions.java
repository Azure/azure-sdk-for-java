// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The TemplateDeploymentOptions model.
 */
@Fluent
public class TemplateDeploymentOptions implements JsonSerializable<TemplateDeploymentOptions> {
    /*
     * The preflightSupported property.
     */
    private Boolean preflightSupported;

    /*
     * The preflightOptions property.
     */
    private List<PreflightOption> preflightOptions;

    /**
     * Creates an instance of TemplateDeploymentOptions class.
     */
    public TemplateDeploymentOptions() {
    }

    /**
     * Get the preflightSupported property: The preflightSupported property.
     * 
     * @return the preflightSupported value.
     */
    public Boolean preflightSupported() {
        return this.preflightSupported;
    }

    /**
     * Set the preflightSupported property: The preflightSupported property.
     * 
     * @param preflightSupported the preflightSupported value to set.
     * @return the TemplateDeploymentOptions object itself.
     */
    public TemplateDeploymentOptions withPreflightSupported(Boolean preflightSupported) {
        this.preflightSupported = preflightSupported;
        return this;
    }

    /**
     * Get the preflightOptions property: The preflightOptions property.
     * 
     * @return the preflightOptions value.
     */
    public List<PreflightOption> preflightOptions() {
        return this.preflightOptions;
    }

    /**
     * Set the preflightOptions property: The preflightOptions property.
     * 
     * @param preflightOptions the preflightOptions value to set.
     * @return the TemplateDeploymentOptions object itself.
     */
    public TemplateDeploymentOptions withPreflightOptions(List<PreflightOption> preflightOptions) {
        this.preflightOptions = preflightOptions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("preflightSupported", this.preflightSupported);
        jsonWriter.writeArrayField("preflightOptions", this.preflightOptions,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TemplateDeploymentOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TemplateDeploymentOptions if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TemplateDeploymentOptions.
     */
    public static TemplateDeploymentOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TemplateDeploymentOptions deserializedTemplateDeploymentOptions = new TemplateDeploymentOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("preflightSupported".equals(fieldName)) {
                    deserializedTemplateDeploymentOptions.preflightSupported
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("preflightOptions".equals(fieldName)) {
                    List<PreflightOption> preflightOptions
                        = reader.readArray(reader1 -> PreflightOption.fromString(reader1.getString()));
                    deserializedTemplateDeploymentOptions.preflightOptions = preflightOptions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTemplateDeploymentOptions;
        });
    }
}
