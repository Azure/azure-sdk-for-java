// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The AuthorizedApplicationProperties model.
 */
@Fluent
public final class AuthorizedApplicationProperties implements JsonSerializable<AuthorizedApplicationProperties> {
    /*
     * The providerAuthorization property.
     */
    private ApplicationProviderAuthorization providerAuthorization;

    /*
     * The authorizations that determine the level of data access permissions on the specified resource types.
     */
    private List<ApplicationDataAuthorization> dataAuthorizations;

    /*
     * The provisioning state.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of AuthorizedApplicationProperties class.
     */
    public AuthorizedApplicationProperties() {
    }

    /**
     * Get the providerAuthorization property: The providerAuthorization property.
     * 
     * @return the providerAuthorization value.
     */
    public ApplicationProviderAuthorization providerAuthorization() {
        return this.providerAuthorization;
    }

    /**
     * Set the providerAuthorization property: The providerAuthorization property.
     * 
     * @param providerAuthorization the providerAuthorization value to set.
     * @return the AuthorizedApplicationProperties object itself.
     */
    public AuthorizedApplicationProperties
        withProviderAuthorization(ApplicationProviderAuthorization providerAuthorization) {
        this.providerAuthorization = providerAuthorization;
        return this;
    }

    /**
     * Get the dataAuthorizations property: The authorizations that determine the level of data access permissions on
     * the specified resource types.
     * 
     * @return the dataAuthorizations value.
     */
    public List<ApplicationDataAuthorization> dataAuthorizations() {
        return this.dataAuthorizations;
    }

    /**
     * Set the dataAuthorizations property: The authorizations that determine the level of data access permissions on
     * the specified resource types.
     * 
     * @param dataAuthorizations the dataAuthorizations value to set.
     * @return the AuthorizedApplicationProperties object itself.
     */
    public AuthorizedApplicationProperties
        withDataAuthorizations(List<ApplicationDataAuthorization> dataAuthorizations) {
        this.dataAuthorizations = dataAuthorizations;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (providerAuthorization() != null) {
            providerAuthorization().validate();
        }
        if (dataAuthorizations() != null) {
            dataAuthorizations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("providerAuthorization", this.providerAuthorization);
        jsonWriter.writeArrayField("dataAuthorizations", this.dataAuthorizations,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AuthorizedApplicationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AuthorizedApplicationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AuthorizedApplicationProperties.
     */
    public static AuthorizedApplicationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AuthorizedApplicationProperties deserializedAuthorizedApplicationProperties
                = new AuthorizedApplicationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("providerAuthorization".equals(fieldName)) {
                    deserializedAuthorizedApplicationProperties.providerAuthorization
                        = ApplicationProviderAuthorization.fromJson(reader);
                } else if ("dataAuthorizations".equals(fieldName)) {
                    List<ApplicationDataAuthorization> dataAuthorizations
                        = reader.readArray(reader1 -> ApplicationDataAuthorization.fromJson(reader1));
                    deserializedAuthorizedApplicationProperties.dataAuthorizations = dataAuthorizations;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAuthorizedApplicationProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAuthorizedApplicationProperties;
        });
    }
}
