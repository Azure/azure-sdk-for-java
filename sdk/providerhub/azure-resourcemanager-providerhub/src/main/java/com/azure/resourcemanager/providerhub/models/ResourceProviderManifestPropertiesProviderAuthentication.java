// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ResourceProviderManifestPropertiesProviderAuthentication model.
 */
@Fluent
public final class ResourceProviderManifestPropertiesProviderAuthentication extends ResourceProviderAuthentication {
    /**
     * Creates an instance of ResourceProviderManifestPropertiesProviderAuthentication class.
     */
    public ResourceProviderManifestPropertiesProviderAuthentication() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceProviderManifestPropertiesProviderAuthentication
        withAllowedAudiences(List<String> allowedAudiences) {
        super.withAllowedAudiences(allowedAudiences);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (allowedAudiences() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property allowedAudiences in model ResourceProviderManifestPropertiesProviderAuthentication"));
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(ResourceProviderManifestPropertiesProviderAuthentication.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("allowedAudiences", allowedAudiences(),
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceProviderManifestPropertiesProviderAuthentication from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceProviderManifestPropertiesProviderAuthentication if the JsonReader was pointing to
     * an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the
     * ResourceProviderManifestPropertiesProviderAuthentication.
     */
    public static ResourceProviderManifestPropertiesProviderAuthentication fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceProviderManifestPropertiesProviderAuthentication deserializedResourceProviderManifestPropertiesProviderAuthentication
                = new ResourceProviderManifestPropertiesProviderAuthentication();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allowedAudiences".equals(fieldName)) {
                    List<String> allowedAudiences = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceProviderManifestPropertiesProviderAuthentication
                        .withAllowedAudiences(allowedAudiences);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceProviderManifestPropertiesProviderAuthentication;
        });
    }
}
