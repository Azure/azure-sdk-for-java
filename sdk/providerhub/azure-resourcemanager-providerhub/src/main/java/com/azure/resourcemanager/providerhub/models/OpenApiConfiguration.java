// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The OpenApiConfiguration model.
 */
@Fluent
public final class OpenApiConfiguration implements JsonSerializable<OpenApiConfiguration> {
    /*
     * The open api validation.
     */
    private OpenApiValidation validation;

    /**
     * Creates an instance of OpenApiConfiguration class.
     */
    public OpenApiConfiguration() {
    }

    /**
     * Get the validation property: The open api validation.
     * 
     * @return the validation value.
     */
    public OpenApiValidation validation() {
        return this.validation;
    }

    /**
     * Set the validation property: The open api validation.
     * 
     * @param validation the validation value to set.
     * @return the OpenApiConfiguration object itself.
     */
    public OpenApiConfiguration withValidation(OpenApiValidation validation) {
        this.validation = validation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (validation() != null) {
            validation().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("validation", this.validation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OpenApiConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OpenApiConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OpenApiConfiguration.
     */
    public static OpenApiConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OpenApiConfiguration deserializedOpenApiConfiguration = new OpenApiConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("validation".equals(fieldName)) {
                    deserializedOpenApiConfiguration.validation = OpenApiValidation.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOpenApiConfiguration;
        });
    }
}
