// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;
import java.util.List;

/**
 * The ResourceProviderEndpoint model.
 */
@Fluent
public final class ResourceProviderEndpoint implements JsonSerializable<ResourceProviderEndpoint> {
    /*
     * The enabled property.
     */
    private Boolean enabled;

    /*
     * The apiVersions property.
     */
    private List<String> apiVersions;

    /*
     * The endpointUri property.
     */
    private String endpointUri;

    /*
     * The locations property.
     */
    private List<String> locations;

    /*
     * The requiredFeatures property.
     */
    private List<String> requiredFeatures;

    /*
     * The featuresRule property.
     */
    private ResourceProviderEndpointFeaturesRule featuresRule;

    /*
     * The timeout property.
     */
    private Duration timeout;

    /**
     * Creates an instance of ResourceProviderEndpoint class.
     */
    public ResourceProviderEndpoint() {
    }

    /**
     * Get the enabled property: The enabled property.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: The enabled property.
     * 
     * @param enabled the enabled value to set.
     * @return the ResourceProviderEndpoint object itself.
     */
    public ResourceProviderEndpoint withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the apiVersions property: The apiVersions property.
     * 
     * @return the apiVersions value.
     */
    public List<String> apiVersions() {
        return this.apiVersions;
    }

    /**
     * Set the apiVersions property: The apiVersions property.
     * 
     * @param apiVersions the apiVersions value to set.
     * @return the ResourceProviderEndpoint object itself.
     */
    public ResourceProviderEndpoint withApiVersions(List<String> apiVersions) {
        this.apiVersions = apiVersions;
        return this;
    }

    /**
     * Get the endpointUri property: The endpointUri property.
     * 
     * @return the endpointUri value.
     */
    public String endpointUri() {
        return this.endpointUri;
    }

    /**
     * Set the endpointUri property: The endpointUri property.
     * 
     * @param endpointUri the endpointUri value to set.
     * @return the ResourceProviderEndpoint object itself.
     */
    public ResourceProviderEndpoint withEndpointUri(String endpointUri) {
        this.endpointUri = endpointUri;
        return this;
    }

    /**
     * Get the locations property: The locations property.
     * 
     * @return the locations value.
     */
    public List<String> locations() {
        return this.locations;
    }

    /**
     * Set the locations property: The locations property.
     * 
     * @param locations the locations value to set.
     * @return the ResourceProviderEndpoint object itself.
     */
    public ResourceProviderEndpoint withLocations(List<String> locations) {
        this.locations = locations;
        return this;
    }

    /**
     * Get the requiredFeatures property: The requiredFeatures property.
     * 
     * @return the requiredFeatures value.
     */
    public List<String> requiredFeatures() {
        return this.requiredFeatures;
    }

    /**
     * Set the requiredFeatures property: The requiredFeatures property.
     * 
     * @param requiredFeatures the requiredFeatures value to set.
     * @return the ResourceProviderEndpoint object itself.
     */
    public ResourceProviderEndpoint withRequiredFeatures(List<String> requiredFeatures) {
        this.requiredFeatures = requiredFeatures;
        return this;
    }

    /**
     * Get the featuresRule property: The featuresRule property.
     * 
     * @return the featuresRule value.
     */
    public ResourceProviderEndpointFeaturesRule featuresRule() {
        return this.featuresRule;
    }

    /**
     * Set the featuresRule property: The featuresRule property.
     * 
     * @param featuresRule the featuresRule value to set.
     * @return the ResourceProviderEndpoint object itself.
     */
    public ResourceProviderEndpoint withFeaturesRule(ResourceProviderEndpointFeaturesRule featuresRule) {
        this.featuresRule = featuresRule;
        return this;
    }

    /**
     * Get the timeout property: The timeout property.
     * 
     * @return the timeout value.
     */
    public Duration timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: The timeout property.
     * 
     * @param timeout the timeout value to set.
     * @return the ResourceProviderEndpoint object itself.
     */
    public ResourceProviderEndpoint withTimeout(Duration timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (featuresRule() != null) {
            featuresRule().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeArrayField("apiVersions", this.apiVersions, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("endpointUri", this.endpointUri);
        jsonWriter.writeArrayField("locations", this.locations, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("requiredFeatures", this.requiredFeatures,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("featuresRule", this.featuresRule);
        jsonWriter.writeStringField("timeout", CoreUtils.durationToStringWithDays(this.timeout));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceProviderEndpoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceProviderEndpoint if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceProviderEndpoint.
     */
    public static ResourceProviderEndpoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceProviderEndpoint deserializedResourceProviderEndpoint = new ResourceProviderEndpoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedResourceProviderEndpoint.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("apiVersions".equals(fieldName)) {
                    List<String> apiVersions = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceProviderEndpoint.apiVersions = apiVersions;
                } else if ("endpointUri".equals(fieldName)) {
                    deserializedResourceProviderEndpoint.endpointUri = reader.getString();
                } else if ("locations".equals(fieldName)) {
                    List<String> locations = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceProviderEndpoint.locations = locations;
                } else if ("requiredFeatures".equals(fieldName)) {
                    List<String> requiredFeatures = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceProviderEndpoint.requiredFeatures = requiredFeatures;
                } else if ("featuresRule".equals(fieldName)) {
                    deserializedResourceProviderEndpoint.featuresRule
                        = ResourceProviderEndpointFeaturesRule.fromJson(reader);
                } else if ("timeout".equals(fieldName)) {
                    deserializedResourceProviderEndpoint.timeout
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceProviderEndpoint;
        });
    }
}
