// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Notification settings.
 */
@Fluent
public final class ResourceProviderManifestPropertiesNotificationSettings
    implements JsonSerializable<ResourceProviderManifestPropertiesNotificationSettings> {
    /*
     * The subscriberSettings property.
     */
    private List<SubscriberSetting> subscriberSettings;

    /**
     * Creates an instance of ResourceProviderManifestPropertiesNotificationSettings class.
     */
    public ResourceProviderManifestPropertiesNotificationSettings() {
    }

    /**
     * Get the subscriberSettings property: The subscriberSettings property.
     * 
     * @return the subscriberSettings value.
     */
    public List<SubscriberSetting> subscriberSettings() {
        return this.subscriberSettings;
    }

    /**
     * Set the subscriberSettings property: The subscriberSettings property.
     * 
     * @param subscriberSettings the subscriberSettings value to set.
     * @return the ResourceProviderManifestPropertiesNotificationSettings object itself.
     */
    public ResourceProviderManifestPropertiesNotificationSettings
        withSubscriberSettings(List<SubscriberSetting> subscriberSettings) {
        this.subscriberSettings = subscriberSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subscriberSettings() != null) {
            subscriberSettings().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("subscriberSettings", this.subscriberSettings,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceProviderManifestPropertiesNotificationSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceProviderManifestPropertiesNotificationSettings if the JsonReader was pointing to
     * an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceProviderManifestPropertiesNotificationSettings.
     */
    public static ResourceProviderManifestPropertiesNotificationSettings fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceProviderManifestPropertiesNotificationSettings deserializedResourceProviderManifestPropertiesNotificationSettings
                = new ResourceProviderManifestPropertiesNotificationSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subscriberSettings".equals(fieldName)) {
                    List<SubscriberSetting> subscriberSettings
                        = reader.readArray(reader1 -> SubscriberSetting.fromJson(reader1));
                    deserializedResourceProviderManifestPropertiesNotificationSettings.subscriberSettings
                        = subscriberSettings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceProviderManifestPropertiesNotificationSettings;
        });
    }
}
