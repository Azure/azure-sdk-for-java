// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The TemplateDeploymentPolicy model.
 */
@Fluent
public class TemplateDeploymentPolicy implements JsonSerializable<TemplateDeploymentPolicy> {
    /*
     * The capabilities property.
     */
    private TemplateDeploymentCapabilities capabilities;

    /*
     * The preflightOptions property.
     */
    private TemplateDeploymentPreflightOptions preflightOptions;

    /**
     * Creates an instance of TemplateDeploymentPolicy class.
     */
    public TemplateDeploymentPolicy() {
    }

    /**
     * Get the capabilities property: The capabilities property.
     * 
     * @return the capabilities value.
     */
    public TemplateDeploymentCapabilities capabilities() {
        return this.capabilities;
    }

    /**
     * Set the capabilities property: The capabilities property.
     * 
     * @param capabilities the capabilities value to set.
     * @return the TemplateDeploymentPolicy object itself.
     */
    public TemplateDeploymentPolicy withCapabilities(TemplateDeploymentCapabilities capabilities) {
        this.capabilities = capabilities;
        return this;
    }

    /**
     * Get the preflightOptions property: The preflightOptions property.
     * 
     * @return the preflightOptions value.
     */
    public TemplateDeploymentPreflightOptions preflightOptions() {
        return this.preflightOptions;
    }

    /**
     * Set the preflightOptions property: The preflightOptions property.
     * 
     * @param preflightOptions the preflightOptions value to set.
     * @return the TemplateDeploymentPolicy object itself.
     */
    public TemplateDeploymentPolicy withPreflightOptions(TemplateDeploymentPreflightOptions preflightOptions) {
        this.preflightOptions = preflightOptions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (capabilities() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property capabilities in model TemplateDeploymentPolicy"));
        }
        if (preflightOptions() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property preflightOptions in model TemplateDeploymentPolicy"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TemplateDeploymentPolicy.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("capabilities", this.capabilities == null ? null : this.capabilities.toString());
        jsonWriter.writeStringField("preflightOptions",
            this.preflightOptions == null ? null : this.preflightOptions.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TemplateDeploymentPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TemplateDeploymentPolicy if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TemplateDeploymentPolicy.
     */
    public static TemplateDeploymentPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TemplateDeploymentPolicy deserializedTemplateDeploymentPolicy = new TemplateDeploymentPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("capabilities".equals(fieldName)) {
                    deserializedTemplateDeploymentPolicy.capabilities
                        = TemplateDeploymentCapabilities.fromString(reader.getString());
                } else if ("preflightOptions".equals(fieldName)) {
                    deserializedTemplateDeploymentPolicy.preflightOptions
                        = TemplateDeploymentPreflightOptions.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTemplateDeploymentPolicy;
        });
    }
}
