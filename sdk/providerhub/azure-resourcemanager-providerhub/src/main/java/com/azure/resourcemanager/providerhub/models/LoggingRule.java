// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The LoggingRule model.
 */
@Fluent
public final class LoggingRule implements JsonSerializable<LoggingRule> {
    /*
     * The action.
     */
    private String action;

    /*
     * The direction.
     */
    private LoggingDirections direction;

    /*
     * The detail level.
     */
    private LoggingDetails detailLevel;

    /*
     * The hidden property paths.
     */
    private LoggingRuleHiddenPropertyPaths hiddenPropertyPaths;

    /**
     * Creates an instance of LoggingRule class.
     */
    public LoggingRule() {
    }

    /**
     * Get the action property: The action.
     * 
     * @return the action value.
     */
    public String action() {
        return this.action;
    }

    /**
     * Set the action property: The action.
     * 
     * @param action the action value to set.
     * @return the LoggingRule object itself.
     */
    public LoggingRule withAction(String action) {
        this.action = action;
        return this;
    }

    /**
     * Get the direction property: The direction.
     * 
     * @return the direction value.
     */
    public LoggingDirections direction() {
        return this.direction;
    }

    /**
     * Set the direction property: The direction.
     * 
     * @param direction the direction value to set.
     * @return the LoggingRule object itself.
     */
    public LoggingRule withDirection(LoggingDirections direction) {
        this.direction = direction;
        return this;
    }

    /**
     * Get the detailLevel property: The detail level.
     * 
     * @return the detailLevel value.
     */
    public LoggingDetails detailLevel() {
        return this.detailLevel;
    }

    /**
     * Set the detailLevel property: The detail level.
     * 
     * @param detailLevel the detailLevel value to set.
     * @return the LoggingRule object itself.
     */
    public LoggingRule withDetailLevel(LoggingDetails detailLevel) {
        this.detailLevel = detailLevel;
        return this;
    }

    /**
     * Get the hiddenPropertyPaths property: The hidden property paths.
     * 
     * @return the hiddenPropertyPaths value.
     */
    public LoggingRuleHiddenPropertyPaths hiddenPropertyPaths() {
        return this.hiddenPropertyPaths;
    }

    /**
     * Set the hiddenPropertyPaths property: The hidden property paths.
     * 
     * @param hiddenPropertyPaths the hiddenPropertyPaths value to set.
     * @return the LoggingRule object itself.
     */
    public LoggingRule withHiddenPropertyPaths(LoggingRuleHiddenPropertyPaths hiddenPropertyPaths) {
        this.hiddenPropertyPaths = hiddenPropertyPaths;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (action() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property action in model LoggingRule"));
        }
        if (direction() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property direction in model LoggingRule"));
        }
        if (detailLevel() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property detailLevel in model LoggingRule"));
        }
        if (hiddenPropertyPaths() != null) {
            hiddenPropertyPaths().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LoggingRule.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("action", this.action);
        jsonWriter.writeStringField("direction", this.direction == null ? null : this.direction.toString());
        jsonWriter.writeStringField("detailLevel", this.detailLevel == null ? null : this.detailLevel.toString());
        jsonWriter.writeJsonField("hiddenPropertyPaths", this.hiddenPropertyPaths);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoggingRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoggingRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LoggingRule.
     */
    public static LoggingRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoggingRule deserializedLoggingRule = new LoggingRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("action".equals(fieldName)) {
                    deserializedLoggingRule.action = reader.getString();
                } else if ("direction".equals(fieldName)) {
                    deserializedLoggingRule.direction = LoggingDirections.fromString(reader.getString());
                } else if ("detailLevel".equals(fieldName)) {
                    deserializedLoggingRule.detailLevel = LoggingDetails.fromString(reader.getString());
                } else if ("hiddenPropertyPaths".equals(fieldName)) {
                    deserializedLoggingRule.hiddenPropertyPaths = LoggingRuleHiddenPropertyPaths.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoggingRule;
        });
    }
}
