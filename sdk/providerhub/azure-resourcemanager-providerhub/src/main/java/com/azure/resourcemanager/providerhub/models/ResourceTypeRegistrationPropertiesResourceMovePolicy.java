// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ResourceTypeRegistrationPropertiesResourceMovePolicy model.
 */
@Fluent
public final class ResourceTypeRegistrationPropertiesResourceMovePolicy extends ResourceMovePolicy {
    /**
     * Creates an instance of ResourceTypeRegistrationPropertiesResourceMovePolicy class.
     */
    public ResourceTypeRegistrationPropertiesResourceMovePolicy() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationPropertiesResourceMovePolicy withValidationRequired(Boolean validationRequired) {
        super.withValidationRequired(validationRequired);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationPropertiesResourceMovePolicy
        withCrossResourceGroupMoveEnabled(Boolean crossResourceGroupMoveEnabled) {
        super.withCrossResourceGroupMoveEnabled(crossResourceGroupMoveEnabled);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationPropertiesResourceMovePolicy
        withCrossSubscriptionMoveEnabled(Boolean crossSubscriptionMoveEnabled) {
        super.withCrossSubscriptionMoveEnabled(crossSubscriptionMoveEnabled);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("validationRequired", validationRequired());
        jsonWriter.writeBooleanField("crossResourceGroupMoveEnabled", crossResourceGroupMoveEnabled());
        jsonWriter.writeBooleanField("crossSubscriptionMoveEnabled", crossSubscriptionMoveEnabled());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceTypeRegistrationPropertiesResourceMovePolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceTypeRegistrationPropertiesResourceMovePolicy if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceTypeRegistrationPropertiesResourceMovePolicy.
     */
    public static ResourceTypeRegistrationPropertiesResourceMovePolicy fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceTypeRegistrationPropertiesResourceMovePolicy deserializedResourceTypeRegistrationPropertiesResourceMovePolicy
                = new ResourceTypeRegistrationPropertiesResourceMovePolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("validationRequired".equals(fieldName)) {
                    deserializedResourceTypeRegistrationPropertiesResourceMovePolicy
                        .withValidationRequired(reader.getNullable(JsonReader::getBoolean));
                } else if ("crossResourceGroupMoveEnabled".equals(fieldName)) {
                    deserializedResourceTypeRegistrationPropertiesResourceMovePolicy
                        .withCrossResourceGroupMoveEnabled(reader.getNullable(JsonReader::getBoolean));
                } else if ("crossSubscriptionMoveEnabled".equals(fieldName)) {
                    deserializedResourceTypeRegistrationPropertiesResourceMovePolicy
                        .withCrossSubscriptionMoveEnabled(reader.getNullable(JsonReader::getBoolean));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceTypeRegistrationPropertiesResourceMovePolicy;
        });
    }
}
