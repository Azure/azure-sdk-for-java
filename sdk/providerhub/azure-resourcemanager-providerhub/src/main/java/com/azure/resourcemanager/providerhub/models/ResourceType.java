// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ResourceType model.
 */
@Fluent
public final class ResourceType implements JsonSerializable<ResourceType> {
    /*
     * The resource type name.
     */
    private String name;

    /*
     * The resource routing type.
     */
    private RoutingType routingType;

    /*
     * The additional options.
     */
    private AdditionalOptions additionalOptions;

    /*
     * The cross tenant token validation.
     */
    private CrossTenantTokenValidation crossTenantTokenValidation;

    /*
     * The resource validation.
     */
    private ResourceValidation resourceValidation;

    /*
     * The allowed unauthorized actions.
     */
    private List<String> allowedUnauthorizedActions;

    /*
     * The allowed unauthorized actions extensions.
     */
    private List<AllowedUnauthorizedActionsExtension> allowedUnauthorizedActionsExtensions;

    /*
     * The authorization action mappings.
     */
    private List<AuthorizationActionMapping> authorizationActionMappings;

    /*
     * The linked access checks.
     */
    private List<LinkedAccessCheck> linkedAccessChecks;

    /*
     * The default api version.
     */
    private String defaultApiVersion;

    /*
     * The logging rules.
     */
    private List<LoggingRule> loggingRules;

    /*
     * The throttling rules.
     */
    private List<ThrottlingRule> throttlingRules;

    /*
     * The endpoints.
     */
    private List<ResourceProviderEndpoint> endpoints;

    /*
     * The marketplace type.
     */
    private MarketplaceType marketplaceType;

    /*
     * The identity management.
     */
    private ResourceTypeIdentityManagement identityManagement;

    /*
     * The metadata.
     */
    private Object metadata;

    /*
     * The required features.
     */
    private List<String> requiredFeatures;

    /*
     * The features rule.
     */
    private ResourceTypeFeaturesRule featuresRule;

    /*
     * The subscription state rules.
     */
    private List<SubscriptionStateRule> subscriptionStateRules;

    /*
     * The service tree infos.
     */
    private List<ServiceTreeInfo> serviceTreeInfos;

    /*
     * The request header options.
     */
    private ResourceTypeRequestHeaderOptions requestHeaderOptions;

    /*
     * The sku link.
     */
    private String skuLink;

    /*
     * The disallowed action verbs.
     */
    private List<String> disallowedActionVerbs;

    /*
     * The template deployment policy.
     */
    private ResourceTypeTemplateDeploymentPolicy templateDeploymentPolicy;

    /*
     * The extended locations.
     */
    private List<ExtendedLocationOptions> extendedLocations;

    /*
     * The linked operation rules.
     */
    private List<LinkedOperationRule> linkedOperationRules;

    /*
     * The resource deletion policy.
     */
    private ManifestResourceDeletionPolicy resourceDeletionPolicy;

    /*
     * The quota rule.
     */
    private QuotaRule quotaRule;

    /*
     * The notifications.
     */
    private List<Notification> notifications;

    /*
     * The linked notification rules.
     */
    private List<LinkedNotificationRule> linkedNotificationRules;

    /*
     * The resource provider authorization rules.
     */
    private ResourceProviderAuthorizationRules resourceProviderAuthorizationRules;

    /**
     * Creates an instance of ResourceType class.
     */
    public ResourceType() {
    }

    /**
     * Get the name property: The resource type name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The resource type name.
     * 
     * @param name the name value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the routingType property: The resource routing type.
     * 
     * @return the routingType value.
     */
    public RoutingType routingType() {
        return this.routingType;
    }

    /**
     * Set the routingType property: The resource routing type.
     * 
     * @param routingType the routingType value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withRoutingType(RoutingType routingType) {
        this.routingType = routingType;
        return this;
    }

    /**
     * Get the additionalOptions property: The additional options.
     * 
     * @return the additionalOptions value.
     */
    public AdditionalOptions additionalOptions() {
        return this.additionalOptions;
    }

    /**
     * Set the additionalOptions property: The additional options.
     * 
     * @param additionalOptions the additionalOptions value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withAdditionalOptions(AdditionalOptions additionalOptions) {
        this.additionalOptions = additionalOptions;
        return this;
    }

    /**
     * Get the crossTenantTokenValidation property: The cross tenant token validation.
     * 
     * @return the crossTenantTokenValidation value.
     */
    public CrossTenantTokenValidation crossTenantTokenValidation() {
        return this.crossTenantTokenValidation;
    }

    /**
     * Set the crossTenantTokenValidation property: The cross tenant token validation.
     * 
     * @param crossTenantTokenValidation the crossTenantTokenValidation value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withCrossTenantTokenValidation(CrossTenantTokenValidation crossTenantTokenValidation) {
        this.crossTenantTokenValidation = crossTenantTokenValidation;
        return this;
    }

    /**
     * Get the resourceValidation property: The resource validation.
     * 
     * @return the resourceValidation value.
     */
    public ResourceValidation resourceValidation() {
        return this.resourceValidation;
    }

    /**
     * Set the resourceValidation property: The resource validation.
     * 
     * @param resourceValidation the resourceValidation value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withResourceValidation(ResourceValidation resourceValidation) {
        this.resourceValidation = resourceValidation;
        return this;
    }

    /**
     * Get the allowedUnauthorizedActions property: The allowed unauthorized actions.
     * 
     * @return the allowedUnauthorizedActions value.
     */
    public List<String> allowedUnauthorizedActions() {
        return this.allowedUnauthorizedActions;
    }

    /**
     * Set the allowedUnauthorizedActions property: The allowed unauthorized actions.
     * 
     * @param allowedUnauthorizedActions the allowedUnauthorizedActions value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withAllowedUnauthorizedActions(List<String> allowedUnauthorizedActions) {
        this.allowedUnauthorizedActions = allowedUnauthorizedActions;
        return this;
    }

    /**
     * Get the allowedUnauthorizedActionsExtensions property: The allowed unauthorized actions extensions.
     * 
     * @return the allowedUnauthorizedActionsExtensions value.
     */
    public List<AllowedUnauthorizedActionsExtension> allowedUnauthorizedActionsExtensions() {
        return this.allowedUnauthorizedActionsExtensions;
    }

    /**
     * Set the allowedUnauthorizedActionsExtensions property: The allowed unauthorized actions extensions.
     * 
     * @param allowedUnauthorizedActionsExtensions the allowedUnauthorizedActionsExtensions value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withAllowedUnauthorizedActionsExtensions(
        List<AllowedUnauthorizedActionsExtension> allowedUnauthorizedActionsExtensions) {
        this.allowedUnauthorizedActionsExtensions = allowedUnauthorizedActionsExtensions;
        return this;
    }

    /**
     * Get the authorizationActionMappings property: The authorization action mappings.
     * 
     * @return the authorizationActionMappings value.
     */
    public List<AuthorizationActionMapping> authorizationActionMappings() {
        return this.authorizationActionMappings;
    }

    /**
     * Set the authorizationActionMappings property: The authorization action mappings.
     * 
     * @param authorizationActionMappings the authorizationActionMappings value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withAuthorizationActionMappings(List<AuthorizationActionMapping> authorizationActionMappings) {
        this.authorizationActionMappings = authorizationActionMappings;
        return this;
    }

    /**
     * Get the linkedAccessChecks property: The linked access checks.
     * 
     * @return the linkedAccessChecks value.
     */
    public List<LinkedAccessCheck> linkedAccessChecks() {
        return this.linkedAccessChecks;
    }

    /**
     * Set the linkedAccessChecks property: The linked access checks.
     * 
     * @param linkedAccessChecks the linkedAccessChecks value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withLinkedAccessChecks(List<LinkedAccessCheck> linkedAccessChecks) {
        this.linkedAccessChecks = linkedAccessChecks;
        return this;
    }

    /**
     * Get the defaultApiVersion property: The default api version.
     * 
     * @return the defaultApiVersion value.
     */
    public String defaultApiVersion() {
        return this.defaultApiVersion;
    }

    /**
     * Set the defaultApiVersion property: The default api version.
     * 
     * @param defaultApiVersion the defaultApiVersion value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withDefaultApiVersion(String defaultApiVersion) {
        this.defaultApiVersion = defaultApiVersion;
        return this;
    }

    /**
     * Get the loggingRules property: The logging rules.
     * 
     * @return the loggingRules value.
     */
    public List<LoggingRule> loggingRules() {
        return this.loggingRules;
    }

    /**
     * Set the loggingRules property: The logging rules.
     * 
     * @param loggingRules the loggingRules value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withLoggingRules(List<LoggingRule> loggingRules) {
        this.loggingRules = loggingRules;
        return this;
    }

    /**
     * Get the throttlingRules property: The throttling rules.
     * 
     * @return the throttlingRules value.
     */
    public List<ThrottlingRule> throttlingRules() {
        return this.throttlingRules;
    }

    /**
     * Set the throttlingRules property: The throttling rules.
     * 
     * @param throttlingRules the throttlingRules value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withThrottlingRules(List<ThrottlingRule> throttlingRules) {
        this.throttlingRules = throttlingRules;
        return this;
    }

    /**
     * Get the endpoints property: The endpoints.
     * 
     * @return the endpoints value.
     */
    public List<ResourceProviderEndpoint> endpoints() {
        return this.endpoints;
    }

    /**
     * Set the endpoints property: The endpoints.
     * 
     * @param endpoints the endpoints value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withEndpoints(List<ResourceProviderEndpoint> endpoints) {
        this.endpoints = endpoints;
        return this;
    }

    /**
     * Get the marketplaceType property: The marketplace type.
     * 
     * @return the marketplaceType value.
     */
    public MarketplaceType marketplaceType() {
        return this.marketplaceType;
    }

    /**
     * Set the marketplaceType property: The marketplace type.
     * 
     * @param marketplaceType the marketplaceType value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withMarketplaceType(MarketplaceType marketplaceType) {
        this.marketplaceType = marketplaceType;
        return this;
    }

    /**
     * Get the identityManagement property: The identity management.
     * 
     * @return the identityManagement value.
     */
    public ResourceTypeIdentityManagement identityManagement() {
        return this.identityManagement;
    }

    /**
     * Set the identityManagement property: The identity management.
     * 
     * @param identityManagement the identityManagement value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withIdentityManagement(ResourceTypeIdentityManagement identityManagement) {
        this.identityManagement = identityManagement;
        return this;
    }

    /**
     * Get the metadata property: The metadata.
     * 
     * @return the metadata value.
     */
    public Object metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The metadata.
     * 
     * @param metadata the metadata value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withMetadata(Object metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the requiredFeatures property: The required features.
     * 
     * @return the requiredFeatures value.
     */
    public List<String> requiredFeatures() {
        return this.requiredFeatures;
    }

    /**
     * Set the requiredFeatures property: The required features.
     * 
     * @param requiredFeatures the requiredFeatures value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withRequiredFeatures(List<String> requiredFeatures) {
        this.requiredFeatures = requiredFeatures;
        return this;
    }

    /**
     * Get the featuresRule property: The features rule.
     * 
     * @return the featuresRule value.
     */
    public ResourceTypeFeaturesRule featuresRule() {
        return this.featuresRule;
    }

    /**
     * Set the featuresRule property: The features rule.
     * 
     * @param featuresRule the featuresRule value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withFeaturesRule(ResourceTypeFeaturesRule featuresRule) {
        this.featuresRule = featuresRule;
        return this;
    }

    /**
     * Get the subscriptionStateRules property: The subscription state rules.
     * 
     * @return the subscriptionStateRules value.
     */
    public List<SubscriptionStateRule> subscriptionStateRules() {
        return this.subscriptionStateRules;
    }

    /**
     * Set the subscriptionStateRules property: The subscription state rules.
     * 
     * @param subscriptionStateRules the subscriptionStateRules value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withSubscriptionStateRules(List<SubscriptionStateRule> subscriptionStateRules) {
        this.subscriptionStateRules = subscriptionStateRules;
        return this;
    }

    /**
     * Get the serviceTreeInfos property: The service tree infos.
     * 
     * @return the serviceTreeInfos value.
     */
    public List<ServiceTreeInfo> serviceTreeInfos() {
        return this.serviceTreeInfos;
    }

    /**
     * Set the serviceTreeInfos property: The service tree infos.
     * 
     * @param serviceTreeInfos the serviceTreeInfos value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withServiceTreeInfos(List<ServiceTreeInfo> serviceTreeInfos) {
        this.serviceTreeInfos = serviceTreeInfos;
        return this;
    }

    /**
     * Get the requestHeaderOptions property: The request header options.
     * 
     * @return the requestHeaderOptions value.
     */
    public ResourceTypeRequestHeaderOptions requestHeaderOptions() {
        return this.requestHeaderOptions;
    }

    /**
     * Set the requestHeaderOptions property: The request header options.
     * 
     * @param requestHeaderOptions the requestHeaderOptions value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withRequestHeaderOptions(ResourceTypeRequestHeaderOptions requestHeaderOptions) {
        this.requestHeaderOptions = requestHeaderOptions;
        return this;
    }

    /**
     * Get the skuLink property: The sku link.
     * 
     * @return the skuLink value.
     */
    public String skuLink() {
        return this.skuLink;
    }

    /**
     * Set the skuLink property: The sku link.
     * 
     * @param skuLink the skuLink value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withSkuLink(String skuLink) {
        this.skuLink = skuLink;
        return this;
    }

    /**
     * Get the disallowedActionVerbs property: The disallowed action verbs.
     * 
     * @return the disallowedActionVerbs value.
     */
    public List<String> disallowedActionVerbs() {
        return this.disallowedActionVerbs;
    }

    /**
     * Set the disallowedActionVerbs property: The disallowed action verbs.
     * 
     * @param disallowedActionVerbs the disallowedActionVerbs value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withDisallowedActionVerbs(List<String> disallowedActionVerbs) {
        this.disallowedActionVerbs = disallowedActionVerbs;
        return this;
    }

    /**
     * Get the templateDeploymentPolicy property: The template deployment policy.
     * 
     * @return the templateDeploymentPolicy value.
     */
    public ResourceTypeTemplateDeploymentPolicy templateDeploymentPolicy() {
        return this.templateDeploymentPolicy;
    }

    /**
     * Set the templateDeploymentPolicy property: The template deployment policy.
     * 
     * @param templateDeploymentPolicy the templateDeploymentPolicy value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withTemplateDeploymentPolicy(ResourceTypeTemplateDeploymentPolicy templateDeploymentPolicy) {
        this.templateDeploymentPolicy = templateDeploymentPolicy;
        return this;
    }

    /**
     * Get the extendedLocations property: The extended locations.
     * 
     * @return the extendedLocations value.
     */
    public List<ExtendedLocationOptions> extendedLocations() {
        return this.extendedLocations;
    }

    /**
     * Set the extendedLocations property: The extended locations.
     * 
     * @param extendedLocations the extendedLocations value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withExtendedLocations(List<ExtendedLocationOptions> extendedLocations) {
        this.extendedLocations = extendedLocations;
        return this;
    }

    /**
     * Get the linkedOperationRules property: The linked operation rules.
     * 
     * @return the linkedOperationRules value.
     */
    public List<LinkedOperationRule> linkedOperationRules() {
        return this.linkedOperationRules;
    }

    /**
     * Set the linkedOperationRules property: The linked operation rules.
     * 
     * @param linkedOperationRules the linkedOperationRules value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withLinkedOperationRules(List<LinkedOperationRule> linkedOperationRules) {
        this.linkedOperationRules = linkedOperationRules;
        return this;
    }

    /**
     * Get the resourceDeletionPolicy property: The resource deletion policy.
     * 
     * @return the resourceDeletionPolicy value.
     */
    public ManifestResourceDeletionPolicy resourceDeletionPolicy() {
        return this.resourceDeletionPolicy;
    }

    /**
     * Set the resourceDeletionPolicy property: The resource deletion policy.
     * 
     * @param resourceDeletionPolicy the resourceDeletionPolicy value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withResourceDeletionPolicy(ManifestResourceDeletionPolicy resourceDeletionPolicy) {
        this.resourceDeletionPolicy = resourceDeletionPolicy;
        return this;
    }

    /**
     * Get the quotaRule property: The quota rule.
     * 
     * @return the quotaRule value.
     */
    public QuotaRule quotaRule() {
        return this.quotaRule;
    }

    /**
     * Set the quotaRule property: The quota rule.
     * 
     * @param quotaRule the quotaRule value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withQuotaRule(QuotaRule quotaRule) {
        this.quotaRule = quotaRule;
        return this;
    }

    /**
     * Get the notifications property: The notifications.
     * 
     * @return the notifications value.
     */
    public List<Notification> notifications() {
        return this.notifications;
    }

    /**
     * Set the notifications property: The notifications.
     * 
     * @param notifications the notifications value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withNotifications(List<Notification> notifications) {
        this.notifications = notifications;
        return this;
    }

    /**
     * Get the linkedNotificationRules property: The linked notification rules.
     * 
     * @return the linkedNotificationRules value.
     */
    public List<LinkedNotificationRule> linkedNotificationRules() {
        return this.linkedNotificationRules;
    }

    /**
     * Set the linkedNotificationRules property: The linked notification rules.
     * 
     * @param linkedNotificationRules the linkedNotificationRules value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType withLinkedNotificationRules(List<LinkedNotificationRule> linkedNotificationRules) {
        this.linkedNotificationRules = linkedNotificationRules;
        return this;
    }

    /**
     * Get the resourceProviderAuthorizationRules property: The resource provider authorization rules.
     * 
     * @return the resourceProviderAuthorizationRules value.
     */
    public ResourceProviderAuthorizationRules resourceProviderAuthorizationRules() {
        return this.resourceProviderAuthorizationRules;
    }

    /**
     * Set the resourceProviderAuthorizationRules property: The resource provider authorization rules.
     * 
     * @param resourceProviderAuthorizationRules the resourceProviderAuthorizationRules value to set.
     * @return the ResourceType object itself.
     */
    public ResourceType
        withResourceProviderAuthorizationRules(ResourceProviderAuthorizationRules resourceProviderAuthorizationRules) {
        this.resourceProviderAuthorizationRules = resourceProviderAuthorizationRules;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (allowedUnauthorizedActionsExtensions() != null) {
            allowedUnauthorizedActionsExtensions().forEach(e -> e.validate());
        }
        if (authorizationActionMappings() != null) {
            authorizationActionMappings().forEach(e -> e.validate());
        }
        if (linkedAccessChecks() != null) {
            linkedAccessChecks().forEach(e -> e.validate());
        }
        if (loggingRules() != null) {
            loggingRules().forEach(e -> e.validate());
        }
        if (throttlingRules() != null) {
            throttlingRules().forEach(e -> e.validate());
        }
        if (endpoints() != null) {
            endpoints().forEach(e -> e.validate());
        }
        if (identityManagement() != null) {
            identityManagement().validate();
        }
        if (featuresRule() != null) {
            featuresRule().validate();
        }
        if (subscriptionStateRules() != null) {
            subscriptionStateRules().forEach(e -> e.validate());
        }
        if (serviceTreeInfos() != null) {
            serviceTreeInfos().forEach(e -> e.validate());
        }
        if (requestHeaderOptions() != null) {
            requestHeaderOptions().validate();
        }
        if (templateDeploymentPolicy() != null) {
            templateDeploymentPolicy().validate();
        }
        if (extendedLocations() != null) {
            extendedLocations().forEach(e -> e.validate());
        }
        if (linkedOperationRules() != null) {
            linkedOperationRules().forEach(e -> e.validate());
        }
        if (quotaRule() != null) {
            quotaRule().validate();
        }
        if (notifications() != null) {
            notifications().forEach(e -> e.validate());
        }
        if (linkedNotificationRules() != null) {
            linkedNotificationRules().forEach(e -> e.validate());
        }
        if (resourceProviderAuthorizationRules() != null) {
            resourceProviderAuthorizationRules().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("routingType", this.routingType == null ? null : this.routingType.toString());
        jsonWriter.writeStringField("additionalOptions",
            this.additionalOptions == null ? null : this.additionalOptions.toString());
        jsonWriter.writeStringField("crossTenantTokenValidation",
            this.crossTenantTokenValidation == null ? null : this.crossTenantTokenValidation.toString());
        jsonWriter.writeStringField("resourceValidation",
            this.resourceValidation == null ? null : this.resourceValidation.toString());
        jsonWriter.writeArrayField("allowedUnauthorizedActions", this.allowedUnauthorizedActions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("allowedUnauthorizedActionsExtensions", this.allowedUnauthorizedActionsExtensions,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("authorizationActionMappings", this.authorizationActionMappings,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("linkedAccessChecks", this.linkedAccessChecks,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("defaultApiVersion", this.defaultApiVersion);
        jsonWriter.writeArrayField("loggingRules", this.loggingRules, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("throttlingRules", this.throttlingRules,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("endpoints", this.endpoints, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("marketplaceType",
            this.marketplaceType == null ? null : this.marketplaceType.toString());
        jsonWriter.writeJsonField("identityManagement", this.identityManagement);
        if (this.metadata != null) {
            jsonWriter.writeUntypedField("metadata", this.metadata);
        }
        jsonWriter.writeArrayField("requiredFeatures", this.requiredFeatures,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("featuresRule", this.featuresRule);
        jsonWriter.writeArrayField("subscriptionStateRules", this.subscriptionStateRules,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("serviceTreeInfos", this.serviceTreeInfos,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("requestHeaderOptions", this.requestHeaderOptions);
        jsonWriter.writeStringField("skuLink", this.skuLink);
        jsonWriter.writeArrayField("disallowedActionVerbs", this.disallowedActionVerbs,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("templateDeploymentPolicy", this.templateDeploymentPolicy);
        jsonWriter.writeArrayField("extendedLocations", this.extendedLocations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("linkedOperationRules", this.linkedOperationRules,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("resourceDeletionPolicy",
            this.resourceDeletionPolicy == null ? null : this.resourceDeletionPolicy.toString());
        jsonWriter.writeJsonField("quotaRule", this.quotaRule);
        jsonWriter.writeArrayField("notifications", this.notifications, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("linkedNotificationRules", this.linkedNotificationRules,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("resourceProviderAuthorizationRules", this.resourceProviderAuthorizationRules);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceType from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceType if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceType.
     */
    public static ResourceType fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceType deserializedResourceType = new ResourceType();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedResourceType.name = reader.getString();
                } else if ("routingType".equals(fieldName)) {
                    deserializedResourceType.routingType = RoutingType.fromString(reader.getString());
                } else if ("additionalOptions".equals(fieldName)) {
                    deserializedResourceType.additionalOptions = AdditionalOptions.fromString(reader.getString());
                } else if ("crossTenantTokenValidation".equals(fieldName)) {
                    deserializedResourceType.crossTenantTokenValidation
                        = CrossTenantTokenValidation.fromString(reader.getString());
                } else if ("resourceValidation".equals(fieldName)) {
                    deserializedResourceType.resourceValidation = ResourceValidation.fromString(reader.getString());
                } else if ("allowedUnauthorizedActions".equals(fieldName)) {
                    List<String> allowedUnauthorizedActions = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceType.allowedUnauthorizedActions = allowedUnauthorizedActions;
                } else if ("allowedUnauthorizedActionsExtensions".equals(fieldName)) {
                    List<AllowedUnauthorizedActionsExtension> allowedUnauthorizedActionsExtensions
                        = reader.readArray(reader1 -> AllowedUnauthorizedActionsExtension.fromJson(reader1));
                    deserializedResourceType.allowedUnauthorizedActionsExtensions
                        = allowedUnauthorizedActionsExtensions;
                } else if ("authorizationActionMappings".equals(fieldName)) {
                    List<AuthorizationActionMapping> authorizationActionMappings
                        = reader.readArray(reader1 -> AuthorizationActionMapping.fromJson(reader1));
                    deserializedResourceType.authorizationActionMappings = authorizationActionMappings;
                } else if ("linkedAccessChecks".equals(fieldName)) {
                    List<LinkedAccessCheck> linkedAccessChecks
                        = reader.readArray(reader1 -> LinkedAccessCheck.fromJson(reader1));
                    deserializedResourceType.linkedAccessChecks = linkedAccessChecks;
                } else if ("defaultApiVersion".equals(fieldName)) {
                    deserializedResourceType.defaultApiVersion = reader.getString();
                } else if ("loggingRules".equals(fieldName)) {
                    List<LoggingRule> loggingRules = reader.readArray(reader1 -> LoggingRule.fromJson(reader1));
                    deserializedResourceType.loggingRules = loggingRules;
                } else if ("throttlingRules".equals(fieldName)) {
                    List<ThrottlingRule> throttlingRules
                        = reader.readArray(reader1 -> ThrottlingRule.fromJson(reader1));
                    deserializedResourceType.throttlingRules = throttlingRules;
                } else if ("endpoints".equals(fieldName)) {
                    List<ResourceProviderEndpoint> endpoints
                        = reader.readArray(reader1 -> ResourceProviderEndpoint.fromJson(reader1));
                    deserializedResourceType.endpoints = endpoints;
                } else if ("marketplaceType".equals(fieldName)) {
                    deserializedResourceType.marketplaceType = MarketplaceType.fromString(reader.getString());
                } else if ("identityManagement".equals(fieldName)) {
                    deserializedResourceType.identityManagement = ResourceTypeIdentityManagement.fromJson(reader);
                } else if ("metadata".equals(fieldName)) {
                    deserializedResourceType.metadata = reader.readUntyped();
                } else if ("requiredFeatures".equals(fieldName)) {
                    List<String> requiredFeatures = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceType.requiredFeatures = requiredFeatures;
                } else if ("featuresRule".equals(fieldName)) {
                    deserializedResourceType.featuresRule = ResourceTypeFeaturesRule.fromJson(reader);
                } else if ("subscriptionStateRules".equals(fieldName)) {
                    List<SubscriptionStateRule> subscriptionStateRules
                        = reader.readArray(reader1 -> SubscriptionStateRule.fromJson(reader1));
                    deserializedResourceType.subscriptionStateRules = subscriptionStateRules;
                } else if ("serviceTreeInfos".equals(fieldName)) {
                    List<ServiceTreeInfo> serviceTreeInfos
                        = reader.readArray(reader1 -> ServiceTreeInfo.fromJson(reader1));
                    deserializedResourceType.serviceTreeInfos = serviceTreeInfos;
                } else if ("requestHeaderOptions".equals(fieldName)) {
                    deserializedResourceType.requestHeaderOptions = ResourceTypeRequestHeaderOptions.fromJson(reader);
                } else if ("skuLink".equals(fieldName)) {
                    deserializedResourceType.skuLink = reader.getString();
                } else if ("disallowedActionVerbs".equals(fieldName)) {
                    List<String> disallowedActionVerbs = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceType.disallowedActionVerbs = disallowedActionVerbs;
                } else if ("templateDeploymentPolicy".equals(fieldName)) {
                    deserializedResourceType.templateDeploymentPolicy
                        = ResourceTypeTemplateDeploymentPolicy.fromJson(reader);
                } else if ("extendedLocations".equals(fieldName)) {
                    List<ExtendedLocationOptions> extendedLocations
                        = reader.readArray(reader1 -> ExtendedLocationOptions.fromJson(reader1));
                    deserializedResourceType.extendedLocations = extendedLocations;
                } else if ("linkedOperationRules".equals(fieldName)) {
                    List<LinkedOperationRule> linkedOperationRules
                        = reader.readArray(reader1 -> LinkedOperationRule.fromJson(reader1));
                    deserializedResourceType.linkedOperationRules = linkedOperationRules;
                } else if ("resourceDeletionPolicy".equals(fieldName)) {
                    deserializedResourceType.resourceDeletionPolicy
                        = ManifestResourceDeletionPolicy.fromString(reader.getString());
                } else if ("quotaRule".equals(fieldName)) {
                    deserializedResourceType.quotaRule = QuotaRule.fromJson(reader);
                } else if ("notifications".equals(fieldName)) {
                    List<Notification> notifications = reader.readArray(reader1 -> Notification.fromJson(reader1));
                    deserializedResourceType.notifications = notifications;
                } else if ("linkedNotificationRules".equals(fieldName)) {
                    List<LinkedNotificationRule> linkedNotificationRules
                        = reader.readArray(reader1 -> LinkedNotificationRule.fromJson(reader1));
                    deserializedResourceType.linkedNotificationRules = linkedNotificationRules;
                } else if ("resourceProviderAuthorizationRules".equals(fieldName)) {
                    deserializedResourceType.resourceProviderAuthorizationRules
                        = ResourceProviderAuthorizationRules.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceType;
        });
    }
}
