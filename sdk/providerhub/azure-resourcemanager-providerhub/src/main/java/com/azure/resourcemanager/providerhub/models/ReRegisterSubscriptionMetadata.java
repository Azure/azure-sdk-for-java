// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ReRegisterSubscriptionMetadata model.
 */
@Fluent
public class ReRegisterSubscriptionMetadata implements JsonSerializable<ReRegisterSubscriptionMetadata> {
    /*
     * The enabled property.
     */
    private boolean enabled;

    /*
     * The concurrencyLimit property.
     */
    private Integer concurrencyLimit;

    /**
     * Creates an instance of ReRegisterSubscriptionMetadata class.
     */
    public ReRegisterSubscriptionMetadata() {
    }

    /**
     * Get the enabled property: The enabled property.
     * 
     * @return the enabled value.
     */
    public boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: The enabled property.
     * 
     * @param enabled the enabled value to set.
     * @return the ReRegisterSubscriptionMetadata object itself.
     */
    public ReRegisterSubscriptionMetadata withEnabled(boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the concurrencyLimit property: The concurrencyLimit property.
     * 
     * @return the concurrencyLimit value.
     */
    public Integer concurrencyLimit() {
        return this.concurrencyLimit;
    }

    /**
     * Set the concurrencyLimit property: The concurrencyLimit property.
     * 
     * @param concurrencyLimit the concurrencyLimit value to set.
     * @return the ReRegisterSubscriptionMetadata object itself.
     */
    public ReRegisterSubscriptionMetadata withConcurrencyLimit(Integer concurrencyLimit) {
        this.concurrencyLimit = concurrencyLimit;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeNumberField("concurrencyLimit", this.concurrencyLimit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReRegisterSubscriptionMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReRegisterSubscriptionMetadata if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ReRegisterSubscriptionMetadata.
     */
    public static ReRegisterSubscriptionMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReRegisterSubscriptionMetadata deserializedReRegisterSubscriptionMetadata
                = new ReRegisterSubscriptionMetadata();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedReRegisterSubscriptionMetadata.enabled = reader.getBoolean();
                } else if ("concurrencyLimit".equals(fieldName)) {
                    deserializedReRegisterSubscriptionMetadata.concurrencyLimit
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReRegisterSubscriptionMetadata;
        });
    }
}
