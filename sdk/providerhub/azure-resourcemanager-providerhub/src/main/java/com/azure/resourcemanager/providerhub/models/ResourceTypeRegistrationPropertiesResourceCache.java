// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Resource cache options.
 */
@Fluent
public final class ResourceTypeRegistrationPropertiesResourceCache
    implements JsonSerializable<ResourceTypeRegistrationPropertiesResourceCache> {
    /*
     * Enable resource cache.
     */
    private Boolean enableResourceCache;

    /*
     * Resource cache expiration timespan. This is a TimeSpan property.
     */
    private String resourceCacheExpirationTimespan;

    /**
     * Creates an instance of ResourceTypeRegistrationPropertiesResourceCache class.
     */
    public ResourceTypeRegistrationPropertiesResourceCache() {
    }

    /**
     * Get the enableResourceCache property: Enable resource cache.
     * 
     * @return the enableResourceCache value.
     */
    public Boolean enableResourceCache() {
        return this.enableResourceCache;
    }

    /**
     * Set the enableResourceCache property: Enable resource cache.
     * 
     * @param enableResourceCache the enableResourceCache value to set.
     * @return the ResourceTypeRegistrationPropertiesResourceCache object itself.
     */
    public ResourceTypeRegistrationPropertiesResourceCache withEnableResourceCache(Boolean enableResourceCache) {
        this.enableResourceCache = enableResourceCache;
        return this;
    }

    /**
     * Get the resourceCacheExpirationTimespan property: Resource cache expiration timespan. This is a TimeSpan
     * property.
     * 
     * @return the resourceCacheExpirationTimespan value.
     */
    public String resourceCacheExpirationTimespan() {
        return this.resourceCacheExpirationTimespan;
    }

    /**
     * Set the resourceCacheExpirationTimespan property: Resource cache expiration timespan. This is a TimeSpan
     * property.
     * 
     * @param resourceCacheExpirationTimespan the resourceCacheExpirationTimespan value to set.
     * @return the ResourceTypeRegistrationPropertiesResourceCache object itself.
     */
    public ResourceTypeRegistrationPropertiesResourceCache
        withResourceCacheExpirationTimespan(String resourceCacheExpirationTimespan) {
        this.resourceCacheExpirationTimespan = resourceCacheExpirationTimespan;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enableResourceCache", this.enableResourceCache);
        jsonWriter.writeStringField("resourceCacheExpirationTimespan", this.resourceCacheExpirationTimespan);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceTypeRegistrationPropertiesResourceCache from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceTypeRegistrationPropertiesResourceCache if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceTypeRegistrationPropertiesResourceCache.
     */
    public static ResourceTypeRegistrationPropertiesResourceCache fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceTypeRegistrationPropertiesResourceCache deserializedResourceTypeRegistrationPropertiesResourceCache
                = new ResourceTypeRegistrationPropertiesResourceCache();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enableResourceCache".equals(fieldName)) {
                    deserializedResourceTypeRegistrationPropertiesResourceCache.enableResourceCache
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("resourceCacheExpirationTimespan".equals(fieldName)) {
                    deserializedResourceTypeRegistrationPropertiesResourceCache.resourceCacheExpirationTimespan
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceTypeRegistrationPropertiesResourceCache;
        });
    }
}
