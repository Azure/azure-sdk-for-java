// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;
import java.util.List;

/**
 * The ResourceTypeExtension model.
 */
@Fluent
public final class ResourceTypeExtension implements JsonSerializable<ResourceTypeExtension> {
    /*
     * The endpointUri property.
     */
    private String endpointUri;

    /*
     * The extensionCategories property.
     */
    private List<ExtensionCategory> extensionCategories;

    /*
     * The timeout property.
     */
    private Duration timeout;

    /**
     * Creates an instance of ResourceTypeExtension class.
     */
    public ResourceTypeExtension() {
    }

    /**
     * Get the endpointUri property: The endpointUri property.
     * 
     * @return the endpointUri value.
     */
    public String endpointUri() {
        return this.endpointUri;
    }

    /**
     * Set the endpointUri property: The endpointUri property.
     * 
     * @param endpointUri the endpointUri value to set.
     * @return the ResourceTypeExtension object itself.
     */
    public ResourceTypeExtension withEndpointUri(String endpointUri) {
        this.endpointUri = endpointUri;
        return this;
    }

    /**
     * Get the extensionCategories property: The extensionCategories property.
     * 
     * @return the extensionCategories value.
     */
    public List<ExtensionCategory> extensionCategories() {
        return this.extensionCategories;
    }

    /**
     * Set the extensionCategories property: The extensionCategories property.
     * 
     * @param extensionCategories the extensionCategories value to set.
     * @return the ResourceTypeExtension object itself.
     */
    public ResourceTypeExtension withExtensionCategories(List<ExtensionCategory> extensionCategories) {
        this.extensionCategories = extensionCategories;
        return this;
    }

    /**
     * Get the timeout property: The timeout property.
     * 
     * @return the timeout value.
     */
    public Duration timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: The timeout property.
     * 
     * @param timeout the timeout value to set.
     * @return the ResourceTypeExtension object itself.
     */
    public ResourceTypeExtension withTimeout(Duration timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("endpointUri", this.endpointUri);
        jsonWriter.writeArrayField("extensionCategories", this.extensionCategories,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("timeout", CoreUtils.durationToStringWithDays(this.timeout));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceTypeExtension from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceTypeExtension if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceTypeExtension.
     */
    public static ResourceTypeExtension fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceTypeExtension deserializedResourceTypeExtension = new ResourceTypeExtension();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpointUri".equals(fieldName)) {
                    deserializedResourceTypeExtension.endpointUri = reader.getString();
                } else if ("extensionCategories".equals(fieldName)) {
                    List<ExtensionCategory> extensionCategories
                        = reader.readArray(reader1 -> ExtensionCategory.fromString(reader1.getString()));
                    deserializedResourceTypeExtension.extensionCategories = extensionCategories;
                } else if ("timeout".equals(fieldName)) {
                    deserializedResourceTypeExtension.timeout
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceTypeExtension;
        });
    }
}
