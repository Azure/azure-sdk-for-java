// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.providerhub.fluent.models.AuthorizedApplicationInner;
import java.util.UUID;

/**
 * An instance of this class provides access to all the operations defined in AuthorizedApplicationsClient.
 */
public interface AuthorizedApplicationsClient {
    /**
     * Gets the authorized application details.
     * 
     * @param providerNamespace The name of the resource provider hosted within ProviderHub.
     * @param applicationId The application ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the authorized application details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AuthorizedApplicationInner> getWithResponse(String providerNamespace, UUID applicationId, Context context);

    /**
     * Gets the authorized application details.
     * 
     * @param providerNamespace The name of the resource provider hosted within ProviderHub.
     * @param applicationId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the authorized application details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AuthorizedApplicationInner get(String providerNamespace, UUID applicationId);

    /**
     * Creates or updates the authorized application.
     * 
     * @param providerNamespace The name of the resource provider hosted within ProviderHub.
     * @param applicationId The application ID.
     * @param properties The authorized application properties supplied to the CreateOrUpdate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<AuthorizedApplicationInner>, AuthorizedApplicationInner>
        beginCreateOrUpdate(String providerNamespace, UUID applicationId, AuthorizedApplicationInner properties);

    /**
     * Creates or updates the authorized application.
     * 
     * @param providerNamespace The name of the resource provider hosted within ProviderHub.
     * @param applicationId The application ID.
     * @param properties The authorized application properties supplied to the CreateOrUpdate operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<AuthorizedApplicationInner>, AuthorizedApplicationInner> beginCreateOrUpdate(
        String providerNamespace, UUID applicationId, AuthorizedApplicationInner properties, Context context);

    /**
     * Creates or updates the authorized application.
     * 
     * @param providerNamespace The name of the resource provider hosted within ProviderHub.
     * @param applicationId The application ID.
     * @param properties The authorized application properties supplied to the CreateOrUpdate operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AuthorizedApplicationInner createOrUpdate(String providerNamespace, UUID applicationId,
        AuthorizedApplicationInner properties);

    /**
     * Creates or updates the authorized application.
     * 
     * @param providerNamespace The name of the resource provider hosted within ProviderHub.
     * @param applicationId The application ID.
     * @param properties The authorized application properties supplied to the CreateOrUpdate operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AuthorizedApplicationInner createOrUpdate(String providerNamespace, UUID applicationId,
        AuthorizedApplicationInner properties, Context context);

    /**
     * Deletes an authorized application.
     * 
     * @param providerNamespace The name of the resource provider hosted within ProviderHub.
     * @param applicationId The application ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String providerNamespace, UUID applicationId, Context context);

    /**
     * Deletes an authorized application.
     * 
     * @param providerNamespace The name of the resource provider hosted within ProviderHub.
     * @param applicationId The application ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String providerNamespace, UUID applicationId);

    /**
     * Gets the list of the authorized applications in the provider namespace.
     * 
     * @param providerNamespace The name of the resource provider hosted within ProviderHub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of the authorized applications in the provider namespace as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AuthorizedApplicationInner> list(String providerNamespace);

    /**
     * Gets the list of the authorized applications in the provider namespace.
     * 
     * @param providerNamespace The name of the resource provider hosted within ProviderHub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of the authorized applications in the provider namespace as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AuthorizedApplicationInner> list(String providerNamespace, Context context);
}
