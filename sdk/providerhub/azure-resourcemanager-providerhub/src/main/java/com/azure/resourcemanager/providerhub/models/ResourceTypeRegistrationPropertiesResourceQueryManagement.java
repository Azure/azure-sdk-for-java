// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Resource query management options.
 */
@Fluent
public final class ResourceTypeRegistrationPropertiesResourceQueryManagement
    implements JsonSerializable<ResourceTypeRegistrationPropertiesResourceQueryManagement> {
    /*
     * Filter option.
     */
    private FilterOption filterOption;

    /**
     * Creates an instance of ResourceTypeRegistrationPropertiesResourceQueryManagement class.
     */
    public ResourceTypeRegistrationPropertiesResourceQueryManagement() {
    }

    /**
     * Get the filterOption property: Filter option.
     * 
     * @return the filterOption value.
     */
    public FilterOption filterOption() {
        return this.filterOption;
    }

    /**
     * Set the filterOption property: Filter option.
     * 
     * @param filterOption the filterOption value to set.
     * @return the ResourceTypeRegistrationPropertiesResourceQueryManagement object itself.
     */
    public ResourceTypeRegistrationPropertiesResourceQueryManagement withFilterOption(FilterOption filterOption) {
        this.filterOption = filterOption;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("filterOption", this.filterOption == null ? null : this.filterOption.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceTypeRegistrationPropertiesResourceQueryManagement from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceTypeRegistrationPropertiesResourceQueryManagement if the JsonReader was pointing
     * to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * ResourceTypeRegistrationPropertiesResourceQueryManagement.
     */
    public static ResourceTypeRegistrationPropertiesResourceQueryManagement fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceTypeRegistrationPropertiesResourceQueryManagement deserializedResourceTypeRegistrationPropertiesResourceQueryManagement
                = new ResourceTypeRegistrationPropertiesResourceQueryManagement();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("filterOption".equals(fieldName)) {
                    deserializedResourceTypeRegistrationPropertiesResourceQueryManagement.filterOption
                        = FilterOption.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceTypeRegistrationPropertiesResourceQueryManagement;
        });
    }
}
