// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The LocalizedOperationDefinition model.
 */
@Fluent
public final class LocalizedOperationDefinition implements JsonSerializable<LocalizedOperationDefinition> {
    /*
     * Name of the operation.
     */
    private String name;

    /*
     * Indicates whether the operation applies to data-plane.
     */
    private Boolean isDataAction;

    /*
     * The origin.
     */
    private OperationOrigins origin;

    /*
     * Display information of the operation.
     */
    private LocalizedOperationDefinitionDisplay display;

    /*
     * The action type.
     */
    private OperationActionType actionType;

    /**
     * Creates an instance of LocalizedOperationDefinition class.
     */
    public LocalizedOperationDefinition() {
    }

    /**
     * Get the name property: Name of the operation.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the operation.
     * 
     * @param name the name value to set.
     * @return the LocalizedOperationDefinition object itself.
     */
    public LocalizedOperationDefinition withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the isDataAction property: Indicates whether the operation applies to data-plane.
     * 
     * @return the isDataAction value.
     */
    public Boolean isDataAction() {
        return this.isDataAction;
    }

    /**
     * Set the isDataAction property: Indicates whether the operation applies to data-plane.
     * 
     * @param isDataAction the isDataAction value to set.
     * @return the LocalizedOperationDefinition object itself.
     */
    public LocalizedOperationDefinition withIsDataAction(Boolean isDataAction) {
        this.isDataAction = isDataAction;
        return this;
    }

    /**
     * Get the origin property: The origin.
     * 
     * @return the origin value.
     */
    public OperationOrigins origin() {
        return this.origin;
    }

    /**
     * Set the origin property: The origin.
     * 
     * @param origin the origin value to set.
     * @return the LocalizedOperationDefinition object itself.
     */
    public LocalizedOperationDefinition withOrigin(OperationOrigins origin) {
        this.origin = origin;
        return this;
    }

    /**
     * Get the display property: Display information of the operation.
     * 
     * @return the display value.
     */
    public LocalizedOperationDefinitionDisplay display() {
        return this.display;
    }

    /**
     * Set the display property: Display information of the operation.
     * 
     * @param display the display value to set.
     * @return the LocalizedOperationDefinition object itself.
     */
    public LocalizedOperationDefinition withDisplay(LocalizedOperationDefinitionDisplay display) {
        this.display = display;
        return this;
    }

    /**
     * Get the actionType property: The action type.
     * 
     * @return the actionType value.
     */
    public OperationActionType actionType() {
        return this.actionType;
    }

    /**
     * Set the actionType property: The action type.
     * 
     * @param actionType the actionType value to set.
     * @return the LocalizedOperationDefinition object itself.
     */
    public LocalizedOperationDefinition withActionType(OperationActionType actionType) {
        this.actionType = actionType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property name in model LocalizedOperationDefinition"));
        }
        if (display() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property display in model LocalizedOperationDefinition"));
        } else {
            display().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LocalizedOperationDefinition.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("display", this.display);
        jsonWriter.writeBooleanField("isDataAction", this.isDataAction);
        jsonWriter.writeStringField("origin", this.origin == null ? null : this.origin.toString());
        jsonWriter.writeStringField("actionType", this.actionType == null ? null : this.actionType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LocalizedOperationDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LocalizedOperationDefinition if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LocalizedOperationDefinition.
     */
    public static LocalizedOperationDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LocalizedOperationDefinition deserializedLocalizedOperationDefinition = new LocalizedOperationDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedLocalizedOperationDefinition.name = reader.getString();
                } else if ("display".equals(fieldName)) {
                    deserializedLocalizedOperationDefinition.display
                        = LocalizedOperationDefinitionDisplay.fromJson(reader);
                } else if ("isDataAction".equals(fieldName)) {
                    deserializedLocalizedOperationDefinition.isDataAction = reader.getNullable(JsonReader::getBoolean);
                } else if ("origin".equals(fieldName)) {
                    deserializedLocalizedOperationDefinition.origin = OperationOrigins.fromString(reader.getString());
                } else if ("actionType".equals(fieldName)) {
                    deserializedLocalizedOperationDefinition.actionType
                        = OperationActionType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLocalizedOperationDefinition;
        });
    }
}
