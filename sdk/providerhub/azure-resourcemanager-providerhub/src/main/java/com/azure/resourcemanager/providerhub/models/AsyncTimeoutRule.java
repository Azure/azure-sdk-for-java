// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The AsyncTimeoutRule model.
 */
@Fluent
public final class AsyncTimeoutRule implements JsonSerializable<AsyncTimeoutRule> {
    /*
     * The actionName property.
     */
    private String actionName;

    /*
     * This is a TimeSpan property
     */
    private String timeout;

    /**
     * Creates an instance of AsyncTimeoutRule class.
     */
    public AsyncTimeoutRule() {
    }

    /**
     * Get the actionName property: The actionName property.
     * 
     * @return the actionName value.
     */
    public String actionName() {
        return this.actionName;
    }

    /**
     * Set the actionName property: The actionName property.
     * 
     * @param actionName the actionName value to set.
     * @return the AsyncTimeoutRule object itself.
     */
    public AsyncTimeoutRule withActionName(String actionName) {
        this.actionName = actionName;
        return this;
    }

    /**
     * Get the timeout property: This is a TimeSpan property.
     * 
     * @return the timeout value.
     */
    public String timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: This is a TimeSpan property.
     * 
     * @param timeout the timeout value to set.
     * @return the AsyncTimeoutRule object itself.
     */
    public AsyncTimeoutRule withTimeout(String timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("actionName", this.actionName);
        jsonWriter.writeStringField("timeout", this.timeout);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AsyncTimeoutRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AsyncTimeoutRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AsyncTimeoutRule.
     */
    public static AsyncTimeoutRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AsyncTimeoutRule deserializedAsyncTimeoutRule = new AsyncTimeoutRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("actionName".equals(fieldName)) {
                    deserializedAsyncTimeoutRule.actionName = reader.getString();
                } else if ("timeout".equals(fieldName)) {
                    deserializedAsyncTimeoutRule.timeout = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAsyncTimeoutRule;
        });
    }
}
