// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The availability zone rule.
 */
@Fluent
public final class ResourceTypeRegistrationPropertiesAvailabilityZoneRule
    implements JsonSerializable<ResourceTypeRegistrationPropertiesAvailabilityZoneRule> {
    /*
     * The availabilityZonePolicy property.
     */
    private AvailabilityZonePolicy availabilityZonePolicy;

    /**
     * Creates an instance of ResourceTypeRegistrationPropertiesAvailabilityZoneRule class.
     */
    public ResourceTypeRegistrationPropertiesAvailabilityZoneRule() {
    }

    /**
     * Get the availabilityZonePolicy property: The availabilityZonePolicy property.
     * 
     * @return the availabilityZonePolicy value.
     */
    public AvailabilityZonePolicy availabilityZonePolicy() {
        return this.availabilityZonePolicy;
    }

    /**
     * Set the availabilityZonePolicy property: The availabilityZonePolicy property.
     * 
     * @param availabilityZonePolicy the availabilityZonePolicy value to set.
     * @return the ResourceTypeRegistrationPropertiesAvailabilityZoneRule object itself.
     */
    public ResourceTypeRegistrationPropertiesAvailabilityZoneRule
        withAvailabilityZonePolicy(AvailabilityZonePolicy availabilityZonePolicy) {
        this.availabilityZonePolicy = availabilityZonePolicy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("availabilityZonePolicy",
            this.availabilityZonePolicy == null ? null : this.availabilityZonePolicy.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceTypeRegistrationPropertiesAvailabilityZoneRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceTypeRegistrationPropertiesAvailabilityZoneRule if the JsonReader was pointing to
     * an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceTypeRegistrationPropertiesAvailabilityZoneRule.
     */
    public static ResourceTypeRegistrationPropertiesAvailabilityZoneRule fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceTypeRegistrationPropertiesAvailabilityZoneRule deserializedResourceTypeRegistrationPropertiesAvailabilityZoneRule
                = new ResourceTypeRegistrationPropertiesAvailabilityZoneRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("availabilityZonePolicy".equals(fieldName)) {
                    deserializedResourceTypeRegistrationPropertiesAvailabilityZoneRule.availabilityZonePolicy
                        = AvailabilityZonePolicy.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceTypeRegistrationPropertiesAvailabilityZoneRule;
        });
    }
}
