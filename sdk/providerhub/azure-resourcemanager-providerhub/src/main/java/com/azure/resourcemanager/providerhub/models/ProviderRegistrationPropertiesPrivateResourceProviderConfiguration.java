// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The private resource provider configuration.
 */
@Fluent
public final class ProviderRegistrationPropertiesPrivateResourceProviderConfiguration
    extends PrivateResourceProviderConfiguration {
    /**
     * Creates an instance of ProviderRegistrationPropertiesPrivateResourceProviderConfiguration class.
     */
    public ProviderRegistrationPropertiesPrivateResourceProviderConfiguration() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationPropertiesPrivateResourceProviderConfiguration
        withAllowedSubscriptions(List<String> allowedSubscriptions) {
        super.withAllowedSubscriptions(allowedSubscriptions);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("allowedSubscriptions", allowedSubscriptions(),
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProviderRegistrationPropertiesPrivateResourceProviderConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProviderRegistrationPropertiesPrivateResourceProviderConfiguration if the JsonReader was
     * pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * ProviderRegistrationPropertiesPrivateResourceProviderConfiguration.
     */
    public static ProviderRegistrationPropertiesPrivateResourceProviderConfiguration fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ProviderRegistrationPropertiesPrivateResourceProviderConfiguration deserializedProviderRegistrationPropertiesPrivateResourceProviderConfiguration
                = new ProviderRegistrationPropertiesPrivateResourceProviderConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allowedSubscriptions".equals(fieldName)) {
                    List<String> allowedSubscriptions = reader.readArray(reader1 -> reader1.getString());
                    deserializedProviderRegistrationPropertiesPrivateResourceProviderConfiguration
                        .withAllowedSubscriptions(allowedSubscriptions);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProviderRegistrationPropertiesPrivateResourceProviderConfiguration;
        });
    }
}
