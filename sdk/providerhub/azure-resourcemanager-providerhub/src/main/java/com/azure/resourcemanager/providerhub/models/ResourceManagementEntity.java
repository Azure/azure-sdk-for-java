// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ResourceManagementEntity model.
 */
@Fluent
public final class ResourceManagementEntity implements JsonSerializable<ResourceManagementEntity> {
    /*
     * The resource id.
     */
    private String resourceId;

    /*
     * The home tenant id.
     */
    private String homeTenantId;

    /*
     * The location.
     */
    private String location;

    /*
     * The operation status.
     */
    private String status;

    /**
     * Creates an instance of ResourceManagementEntity class.
     */
    public ResourceManagementEntity() {
    }

    /**
     * Get the resourceId property: The resource id.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: The resource id.
     * 
     * @param resourceId the resourceId value to set.
     * @return the ResourceManagementEntity object itself.
     */
    public ResourceManagementEntity withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the homeTenantId property: The home tenant id.
     * 
     * @return the homeTenantId value.
     */
    public String homeTenantId() {
        return this.homeTenantId;
    }

    /**
     * Set the homeTenantId property: The home tenant id.
     * 
     * @param homeTenantId the homeTenantId value to set.
     * @return the ResourceManagementEntity object itself.
     */
    public ResourceManagementEntity withHomeTenantId(String homeTenantId) {
        this.homeTenantId = homeTenantId;
        return this;
    }

    /**
     * Get the location property: The location.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The location.
     * 
     * @param location the location value to set.
     * @return the ResourceManagementEntity object itself.
     */
    public ResourceManagementEntity withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the status property: The operation status.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceId in model ResourceManagementEntity"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResourceManagementEntity.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("homeTenantId", this.homeTenantId);
        jsonWriter.writeStringField("location", this.location);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceManagementEntity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceManagementEntity if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceManagementEntity.
     */
    public static ResourceManagementEntity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceManagementEntity deserializedResourceManagementEntity = new ResourceManagementEntity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    deserializedResourceManagementEntity.resourceId = reader.getString();
                } else if ("homeTenantId".equals(fieldName)) {
                    deserializedResourceManagementEntity.homeTenantId = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedResourceManagementEntity.location = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedResourceManagementEntity.status = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceManagementEntity;
        });
    }
}
