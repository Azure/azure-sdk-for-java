// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The DstsConfiguration model.
 */
@Fluent
public class DstsConfiguration implements JsonSerializable<DstsConfiguration> {
    /*
     * The service name.
     */
    private String serviceName;

    /*
     * This is a URI property.
     */
    private String serviceDnsName;

    /**
     * Creates an instance of DstsConfiguration class.
     */
    public DstsConfiguration() {
    }

    /**
     * Get the serviceName property: The service name.
     * 
     * @return the serviceName value.
     */
    public String serviceName() {
        return this.serviceName;
    }

    /**
     * Set the serviceName property: The service name.
     * 
     * @param serviceName the serviceName value to set.
     * @return the DstsConfiguration object itself.
     */
    public DstsConfiguration withServiceName(String serviceName) {
        this.serviceName = serviceName;
        return this;
    }

    /**
     * Get the serviceDnsName property: This is a URI property.
     * 
     * @return the serviceDnsName value.
     */
    public String serviceDnsName() {
        return this.serviceDnsName;
    }

    /**
     * Set the serviceDnsName property: This is a URI property.
     * 
     * @param serviceDnsName the serviceDnsName value to set.
     * @return the DstsConfiguration object itself.
     */
    public DstsConfiguration withServiceDnsName(String serviceDnsName) {
        this.serviceDnsName = serviceDnsName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (serviceName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property serviceName in model DstsConfiguration"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DstsConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serviceName", this.serviceName);
        jsonWriter.writeStringField("serviceDnsName", this.serviceDnsName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DstsConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DstsConfiguration if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DstsConfiguration.
     */
    public static DstsConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DstsConfiguration deserializedDstsConfiguration = new DstsConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceName".equals(fieldName)) {
                    deserializedDstsConfiguration.serviceName = reader.getString();
                } else if ("serviceDnsName".equals(fieldName)) {
                    deserializedDstsConfiguration.serviceDnsName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDstsConfiguration;
        });
    }
}
