// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The NotificationRegistrationProperties model.
 */
@Fluent
public final class NotificationRegistrationProperties extends NotificationRegistrationPropertiesAutoGenerated {
    /**
     * Creates an instance of NotificationRegistrationProperties class.
     */
    public NotificationRegistrationProperties() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NotificationRegistrationProperties withNotificationMode(NotificationMode notificationMode) {
        super.withNotificationMode(notificationMode);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NotificationRegistrationProperties withMessageScope(MessageScope messageScope) {
        super.withMessageScope(messageScope);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NotificationRegistrationProperties withIncludedEvents(List<String> includedEvents) {
        super.withIncludedEvents(includedEvents);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NotificationRegistrationProperties
        withNotificationEndpoints(List<NotificationEndpoint> notificationEndpoints) {
        super.withNotificationEndpoints(notificationEndpoints);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NotificationRegistrationProperties withProvisioningState(ProvisioningState provisioningState) {
        super.withProvisioningState(provisioningState);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (notificationEndpoints() != null) {
            notificationEndpoints().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("notificationMode",
            notificationMode() == null ? null : notificationMode().toString());
        jsonWriter.writeStringField("messageScope", messageScope() == null ? null : messageScope().toString());
        jsonWriter.writeArrayField("includedEvents", includedEvents(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("notificationEndpoints", notificationEndpoints(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("provisioningState",
            provisioningState() == null ? null : provisioningState().toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NotificationRegistrationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NotificationRegistrationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NotificationRegistrationProperties.
     */
    public static NotificationRegistrationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NotificationRegistrationProperties deserializedNotificationRegistrationProperties
                = new NotificationRegistrationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("notificationMode".equals(fieldName)) {
                    deserializedNotificationRegistrationProperties
                        .withNotificationMode(NotificationMode.fromString(reader.getString()));
                } else if ("messageScope".equals(fieldName)) {
                    deserializedNotificationRegistrationProperties
                        .withMessageScope(MessageScope.fromString(reader.getString()));
                } else if ("includedEvents".equals(fieldName)) {
                    List<String> includedEvents = reader.readArray(reader1 -> reader1.getString());
                    deserializedNotificationRegistrationProperties.withIncludedEvents(includedEvents);
                } else if ("notificationEndpoints".equals(fieldName)) {
                    List<NotificationEndpoint> notificationEndpoints
                        = reader.readArray(reader1 -> NotificationEndpoint.fromJson(reader1));
                    deserializedNotificationRegistrationProperties.withNotificationEndpoints(notificationEndpoints);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNotificationRegistrationProperties
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNotificationRegistrationProperties;
        });
    }
}
