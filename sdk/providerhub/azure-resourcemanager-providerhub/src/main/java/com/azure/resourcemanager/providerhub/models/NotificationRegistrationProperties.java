// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The NotificationRegistrationProperties model.
 */
@Fluent
public final class NotificationRegistrationProperties implements JsonSerializable<NotificationRegistrationProperties> {
    /*
     * The notification mode.
     */
    private NotificationMode notificationMode;

    /*
     * The message scope.
     */
    private MessageScope messageScope;

    /*
     * The included events.
     */
    private List<String> includedEvents;

    /*
     * The notification endpoints.
     */
    private List<NotificationEndpoint> notificationEndpoints;

    /*
     * The provisioned state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of NotificationRegistrationProperties class.
     */
    public NotificationRegistrationProperties() {
    }

    /**
     * Get the notificationMode property: The notification mode.
     * 
     * @return the notificationMode value.
     */
    public NotificationMode notificationMode() {
        return this.notificationMode;
    }

    /**
     * Set the notificationMode property: The notification mode.
     * 
     * @param notificationMode the notificationMode value to set.
     * @return the NotificationRegistrationProperties object itself.
     */
    public NotificationRegistrationProperties withNotificationMode(NotificationMode notificationMode) {
        this.notificationMode = notificationMode;
        return this;
    }

    /**
     * Get the messageScope property: The message scope.
     * 
     * @return the messageScope value.
     */
    public MessageScope messageScope() {
        return this.messageScope;
    }

    /**
     * Set the messageScope property: The message scope.
     * 
     * @param messageScope the messageScope value to set.
     * @return the NotificationRegistrationProperties object itself.
     */
    public NotificationRegistrationProperties withMessageScope(MessageScope messageScope) {
        this.messageScope = messageScope;
        return this;
    }

    /**
     * Get the includedEvents property: The included events.
     * 
     * @return the includedEvents value.
     */
    public List<String> includedEvents() {
        return this.includedEvents;
    }

    /**
     * Set the includedEvents property: The included events.
     * 
     * @param includedEvents the includedEvents value to set.
     * @return the NotificationRegistrationProperties object itself.
     */
    public NotificationRegistrationProperties withIncludedEvents(List<String> includedEvents) {
        this.includedEvents = includedEvents;
        return this;
    }

    /**
     * Get the notificationEndpoints property: The notification endpoints.
     * 
     * @return the notificationEndpoints value.
     */
    public List<NotificationEndpoint> notificationEndpoints() {
        return this.notificationEndpoints;
    }

    /**
     * Set the notificationEndpoints property: The notification endpoints.
     * 
     * @param notificationEndpoints the notificationEndpoints value to set.
     * @return the NotificationRegistrationProperties object itself.
     */
    public NotificationRegistrationProperties
        withNotificationEndpoints(List<NotificationEndpoint> notificationEndpoints) {
        this.notificationEndpoints = notificationEndpoints;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioned state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (notificationEndpoints() != null) {
            notificationEndpoints().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("notificationMode",
            this.notificationMode == null ? null : this.notificationMode.toString());
        jsonWriter.writeStringField("messageScope", this.messageScope == null ? null : this.messageScope.toString());
        jsonWriter.writeArrayField("includedEvents", this.includedEvents,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("notificationEndpoints", this.notificationEndpoints,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NotificationRegistrationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NotificationRegistrationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NotificationRegistrationProperties.
     */
    public static NotificationRegistrationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NotificationRegistrationProperties deserializedNotificationRegistrationProperties
                = new NotificationRegistrationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("notificationMode".equals(fieldName)) {
                    deserializedNotificationRegistrationProperties.notificationMode
                        = NotificationMode.fromString(reader.getString());
                } else if ("messageScope".equals(fieldName)) {
                    deserializedNotificationRegistrationProperties.messageScope
                        = MessageScope.fromString(reader.getString());
                } else if ("includedEvents".equals(fieldName)) {
                    List<String> includedEvents = reader.readArray(reader1 -> reader1.getString());
                    deserializedNotificationRegistrationProperties.includedEvents = includedEvents;
                } else if ("notificationEndpoints".equals(fieldName)) {
                    List<NotificationEndpoint> notificationEndpoints
                        = reader.readArray(reader1 -> NotificationEndpoint.fromJson(reader1));
                    deserializedNotificationRegistrationProperties.notificationEndpoints = notificationEndpoints;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNotificationRegistrationProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNotificationRegistrationProperties;
        });
    }
}
