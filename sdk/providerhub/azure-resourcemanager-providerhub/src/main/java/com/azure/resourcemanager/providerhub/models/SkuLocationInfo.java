// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The SkuLocationInfo model.
 */
@Fluent
public final class SkuLocationInfo implements JsonSerializable<SkuLocationInfo> {
    /*
     * The location property.
     */
    private String location;

    /*
     * The zones property.
     */
    private List<String> zones;

    /*
     * The zoneDetails property.
     */
    private List<SkuZoneDetail> zoneDetails;

    /*
     * The extendedLocations property.
     */
    private List<String> extendedLocations;

    /*
     * The type property.
     */
    private ExtendedLocationType type;

    /**
     * Creates an instance of SkuLocationInfo class.
     */
    public SkuLocationInfo() {
    }

    /**
     * Get the location property: The location property.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The location property.
     * 
     * @param location the location value to set.
     * @return the SkuLocationInfo object itself.
     */
    public SkuLocationInfo withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the zones property: The zones property.
     * 
     * @return the zones value.
     */
    public List<String> zones() {
        return this.zones;
    }

    /**
     * Set the zones property: The zones property.
     * 
     * @param zones the zones value to set.
     * @return the SkuLocationInfo object itself.
     */
    public SkuLocationInfo withZones(List<String> zones) {
        this.zones = zones;
        return this;
    }

    /**
     * Get the zoneDetails property: The zoneDetails property.
     * 
     * @return the zoneDetails value.
     */
    public List<SkuZoneDetail> zoneDetails() {
        return this.zoneDetails;
    }

    /**
     * Set the zoneDetails property: The zoneDetails property.
     * 
     * @param zoneDetails the zoneDetails value to set.
     * @return the SkuLocationInfo object itself.
     */
    public SkuLocationInfo withZoneDetails(List<SkuZoneDetail> zoneDetails) {
        this.zoneDetails = zoneDetails;
        return this;
    }

    /**
     * Get the extendedLocations property: The extendedLocations property.
     * 
     * @return the extendedLocations value.
     */
    public List<String> extendedLocations() {
        return this.extendedLocations;
    }

    /**
     * Set the extendedLocations property: The extendedLocations property.
     * 
     * @param extendedLocations the extendedLocations value to set.
     * @return the SkuLocationInfo object itself.
     */
    public SkuLocationInfo withExtendedLocations(List<String> extendedLocations) {
        this.extendedLocations = extendedLocations;
        return this;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    public ExtendedLocationType type() {
        return this.type;
    }

    /**
     * Set the type property: The type property.
     * 
     * @param type the type value to set.
     * @return the SkuLocationInfo object itself.
     */
    public SkuLocationInfo withType(ExtendedLocationType type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (location() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property location in model SkuLocationInfo"));
        }
        if (zoneDetails() != null) {
            zoneDetails().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SkuLocationInfo.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeArrayField("zones", this.zones, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("zoneDetails", this.zoneDetails, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("extendedLocations", this.extendedLocations,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SkuLocationInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SkuLocationInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SkuLocationInfo.
     */
    public static SkuLocationInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SkuLocationInfo deserializedSkuLocationInfo = new SkuLocationInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("location".equals(fieldName)) {
                    deserializedSkuLocationInfo.location = reader.getString();
                } else if ("zones".equals(fieldName)) {
                    List<String> zones = reader.readArray(reader1 -> reader1.getString());
                    deserializedSkuLocationInfo.zones = zones;
                } else if ("zoneDetails".equals(fieldName)) {
                    List<SkuZoneDetail> zoneDetails = reader.readArray(reader1 -> SkuZoneDetail.fromJson(reader1));
                    deserializedSkuLocationInfo.zoneDetails = zoneDetails;
                } else if ("extendedLocations".equals(fieldName)) {
                    List<String> extendedLocations = reader.readArray(reader1 -> reader1.getString());
                    deserializedSkuLocationInfo.extendedLocations = extendedLocations;
                } else if ("type".equals(fieldName)) {
                    deserializedSkuLocationInfo.type = ExtendedLocationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSkuLocationInfo;
        });
    }
}
