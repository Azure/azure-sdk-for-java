// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ResourceProviderManagement model.
 */
@Fluent
public class ResourceProviderManagement implements JsonSerializable<ResourceProviderManagement> {
    /*
     * The schema owners.
     */
    private List<String> schemaOwners;

    /*
     * The manifest owners.
     */
    private List<String> manifestOwners;

    /*
     * The authorization owners.
     */
    private List<String> authorizationOwners;

    /*
     * The incident routing service.
     */
    private String incidentRoutingService;

    /*
     * The incident routing team.
     */
    private String incidentRoutingTeam;

    /*
     * The incident contact email.
     */
    private String incidentContactEmail;

    /*
     * The service tree infos.
     */
    private List<ServiceTreeInfo> serviceTreeInfos;

    /*
     * The resource access policy.
     */
    private ResourceAccessPolicy resourceAccessPolicy;

    /*
     * The resource access roles.
     */
    private List<ResourceAccessRole> resourceAccessRoles;

    /*
     * List of expedited rollout submitters.
     */
    private List<String> expeditedRolloutSubmitters;

    /*
     * Options for error response messages.
     */
    private ResourceProviderManagementErrorResponseMessageOptions errorResponseMessageOptions;

    /*
     * Metadata for expedited rollout.
     */
    private ResourceProviderManagementExpeditedRolloutMetadata expeditedRolloutMetadata;

    /*
     * List of manifest owners for canary.
     */
    private List<String> canaryManifestOwners;

    /*
     * The profit center code for the subscription.
     */
    private String pcCode;

    /*
     * The profit center program id for the subscription.
     */
    private String profitCenterProgramId;

    /**
     * Creates an instance of ResourceProviderManagement class.
     */
    public ResourceProviderManagement() {
    }

    /**
     * Get the schemaOwners property: The schema owners.
     * 
     * @return the schemaOwners value.
     */
    public List<String> schemaOwners() {
        return this.schemaOwners;
    }

    /**
     * Set the schemaOwners property: The schema owners.
     * 
     * @param schemaOwners the schemaOwners value to set.
     * @return the ResourceProviderManagement object itself.
     */
    public ResourceProviderManagement withSchemaOwners(List<String> schemaOwners) {
        this.schemaOwners = schemaOwners;
        return this;
    }

    /**
     * Get the manifestOwners property: The manifest owners.
     * 
     * @return the manifestOwners value.
     */
    public List<String> manifestOwners() {
        return this.manifestOwners;
    }

    /**
     * Set the manifestOwners property: The manifest owners.
     * 
     * @param manifestOwners the manifestOwners value to set.
     * @return the ResourceProviderManagement object itself.
     */
    public ResourceProviderManagement withManifestOwners(List<String> manifestOwners) {
        this.manifestOwners = manifestOwners;
        return this;
    }

    /**
     * Get the authorizationOwners property: The authorization owners.
     * 
     * @return the authorizationOwners value.
     */
    public List<String> authorizationOwners() {
        return this.authorizationOwners;
    }

    /**
     * Set the authorizationOwners property: The authorization owners.
     * 
     * @param authorizationOwners the authorizationOwners value to set.
     * @return the ResourceProviderManagement object itself.
     */
    public ResourceProviderManagement withAuthorizationOwners(List<String> authorizationOwners) {
        this.authorizationOwners = authorizationOwners;
        return this;
    }

    /**
     * Get the incidentRoutingService property: The incident routing service.
     * 
     * @return the incidentRoutingService value.
     */
    public String incidentRoutingService() {
        return this.incidentRoutingService;
    }

    /**
     * Set the incidentRoutingService property: The incident routing service.
     * 
     * @param incidentRoutingService the incidentRoutingService value to set.
     * @return the ResourceProviderManagement object itself.
     */
    public ResourceProviderManagement withIncidentRoutingService(String incidentRoutingService) {
        this.incidentRoutingService = incidentRoutingService;
        return this;
    }

    /**
     * Get the incidentRoutingTeam property: The incident routing team.
     * 
     * @return the incidentRoutingTeam value.
     */
    public String incidentRoutingTeam() {
        return this.incidentRoutingTeam;
    }

    /**
     * Set the incidentRoutingTeam property: The incident routing team.
     * 
     * @param incidentRoutingTeam the incidentRoutingTeam value to set.
     * @return the ResourceProviderManagement object itself.
     */
    public ResourceProviderManagement withIncidentRoutingTeam(String incidentRoutingTeam) {
        this.incidentRoutingTeam = incidentRoutingTeam;
        return this;
    }

    /**
     * Get the incidentContactEmail property: The incident contact email.
     * 
     * @return the incidentContactEmail value.
     */
    public String incidentContactEmail() {
        return this.incidentContactEmail;
    }

    /**
     * Set the incidentContactEmail property: The incident contact email.
     * 
     * @param incidentContactEmail the incidentContactEmail value to set.
     * @return the ResourceProviderManagement object itself.
     */
    public ResourceProviderManagement withIncidentContactEmail(String incidentContactEmail) {
        this.incidentContactEmail = incidentContactEmail;
        return this;
    }

    /**
     * Get the serviceTreeInfos property: The service tree infos.
     * 
     * @return the serviceTreeInfos value.
     */
    public List<ServiceTreeInfo> serviceTreeInfos() {
        return this.serviceTreeInfos;
    }

    /**
     * Set the serviceTreeInfos property: The service tree infos.
     * 
     * @param serviceTreeInfos the serviceTreeInfos value to set.
     * @return the ResourceProviderManagement object itself.
     */
    public ResourceProviderManagement withServiceTreeInfos(List<ServiceTreeInfo> serviceTreeInfos) {
        this.serviceTreeInfos = serviceTreeInfos;
        return this;
    }

    /**
     * Get the resourceAccessPolicy property: The resource access policy.
     * 
     * @return the resourceAccessPolicy value.
     */
    public ResourceAccessPolicy resourceAccessPolicy() {
        return this.resourceAccessPolicy;
    }

    /**
     * Set the resourceAccessPolicy property: The resource access policy.
     * 
     * @param resourceAccessPolicy the resourceAccessPolicy value to set.
     * @return the ResourceProviderManagement object itself.
     */
    public ResourceProviderManagement withResourceAccessPolicy(ResourceAccessPolicy resourceAccessPolicy) {
        this.resourceAccessPolicy = resourceAccessPolicy;
        return this;
    }

    /**
     * Get the resourceAccessRoles property: The resource access roles.
     * 
     * @return the resourceAccessRoles value.
     */
    public List<ResourceAccessRole> resourceAccessRoles() {
        return this.resourceAccessRoles;
    }

    /**
     * Set the resourceAccessRoles property: The resource access roles.
     * 
     * @param resourceAccessRoles the resourceAccessRoles value to set.
     * @return the ResourceProviderManagement object itself.
     */
    public ResourceProviderManagement withResourceAccessRoles(List<ResourceAccessRole> resourceAccessRoles) {
        this.resourceAccessRoles = resourceAccessRoles;
        return this;
    }

    /**
     * Get the expeditedRolloutSubmitters property: List of expedited rollout submitters.
     * 
     * @return the expeditedRolloutSubmitters value.
     */
    public List<String> expeditedRolloutSubmitters() {
        return this.expeditedRolloutSubmitters;
    }

    /**
     * Set the expeditedRolloutSubmitters property: List of expedited rollout submitters.
     * 
     * @param expeditedRolloutSubmitters the expeditedRolloutSubmitters value to set.
     * @return the ResourceProviderManagement object itself.
     */
    public ResourceProviderManagement withExpeditedRolloutSubmitters(List<String> expeditedRolloutSubmitters) {
        this.expeditedRolloutSubmitters = expeditedRolloutSubmitters;
        return this;
    }

    /**
     * Get the errorResponseMessageOptions property: Options for error response messages.
     * 
     * @return the errorResponseMessageOptions value.
     */
    public ResourceProviderManagementErrorResponseMessageOptions errorResponseMessageOptions() {
        return this.errorResponseMessageOptions;
    }

    /**
     * Set the errorResponseMessageOptions property: Options for error response messages.
     * 
     * @param errorResponseMessageOptions the errorResponseMessageOptions value to set.
     * @return the ResourceProviderManagement object itself.
     */
    public ResourceProviderManagement withErrorResponseMessageOptions(
        ResourceProviderManagementErrorResponseMessageOptions errorResponseMessageOptions) {
        this.errorResponseMessageOptions = errorResponseMessageOptions;
        return this;
    }

    /**
     * Get the expeditedRolloutMetadata property: Metadata for expedited rollout.
     * 
     * @return the expeditedRolloutMetadata value.
     */
    public ResourceProviderManagementExpeditedRolloutMetadata expeditedRolloutMetadata() {
        return this.expeditedRolloutMetadata;
    }

    /**
     * Set the expeditedRolloutMetadata property: Metadata for expedited rollout.
     * 
     * @param expeditedRolloutMetadata the expeditedRolloutMetadata value to set.
     * @return the ResourceProviderManagement object itself.
     */
    public ResourceProviderManagement
        withExpeditedRolloutMetadata(ResourceProviderManagementExpeditedRolloutMetadata expeditedRolloutMetadata) {
        this.expeditedRolloutMetadata = expeditedRolloutMetadata;
        return this;
    }

    /**
     * Get the canaryManifestOwners property: List of manifest owners for canary.
     * 
     * @return the canaryManifestOwners value.
     */
    public List<String> canaryManifestOwners() {
        return this.canaryManifestOwners;
    }

    /**
     * Set the canaryManifestOwners property: List of manifest owners for canary.
     * 
     * @param canaryManifestOwners the canaryManifestOwners value to set.
     * @return the ResourceProviderManagement object itself.
     */
    public ResourceProviderManagement withCanaryManifestOwners(List<String> canaryManifestOwners) {
        this.canaryManifestOwners = canaryManifestOwners;
        return this;
    }

    /**
     * Get the pcCode property: The profit center code for the subscription.
     * 
     * @return the pcCode value.
     */
    public String pcCode() {
        return this.pcCode;
    }

    /**
     * Set the pcCode property: The profit center code for the subscription.
     * 
     * @param pcCode the pcCode value to set.
     * @return the ResourceProviderManagement object itself.
     */
    public ResourceProviderManagement withPcCode(String pcCode) {
        this.pcCode = pcCode;
        return this;
    }

    /**
     * Get the profitCenterProgramId property: The profit center program id for the subscription.
     * 
     * @return the profitCenterProgramId value.
     */
    public String profitCenterProgramId() {
        return this.profitCenterProgramId;
    }

    /**
     * Set the profitCenterProgramId property: The profit center program id for the subscription.
     * 
     * @param profitCenterProgramId the profitCenterProgramId value to set.
     * @return the ResourceProviderManagement object itself.
     */
    public ResourceProviderManagement withProfitCenterProgramId(String profitCenterProgramId) {
        this.profitCenterProgramId = profitCenterProgramId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (serviceTreeInfos() != null) {
            serviceTreeInfos().forEach(e -> e.validate());
        }
        if (resourceAccessRoles() != null) {
            resourceAccessRoles().forEach(e -> e.validate());
        }
        if (errorResponseMessageOptions() != null) {
            errorResponseMessageOptions().validate();
        }
        if (expeditedRolloutMetadata() != null) {
            expeditedRolloutMetadata().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("schemaOwners", this.schemaOwners, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("manifestOwners", this.manifestOwners,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("authorizationOwners", this.authorizationOwners,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("incidentRoutingService", this.incidentRoutingService);
        jsonWriter.writeStringField("incidentRoutingTeam", this.incidentRoutingTeam);
        jsonWriter.writeStringField("incidentContactEmail", this.incidentContactEmail);
        jsonWriter.writeArrayField("serviceTreeInfos", this.serviceTreeInfos,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("resourceAccessPolicy",
            this.resourceAccessPolicy == null ? null : this.resourceAccessPolicy.toString());
        jsonWriter.writeArrayField("resourceAccessRoles", this.resourceAccessRoles,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("expeditedRolloutSubmitters", this.expeditedRolloutSubmitters,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("errorResponseMessageOptions", this.errorResponseMessageOptions);
        jsonWriter.writeJsonField("expeditedRolloutMetadata", this.expeditedRolloutMetadata);
        jsonWriter.writeArrayField("canaryManifestOwners", this.canaryManifestOwners,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("pcCode", this.pcCode);
        jsonWriter.writeStringField("profitCenterProgramId", this.profitCenterProgramId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceProviderManagement from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceProviderManagement if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceProviderManagement.
     */
    public static ResourceProviderManagement fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceProviderManagement deserializedResourceProviderManagement = new ResourceProviderManagement();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("schemaOwners".equals(fieldName)) {
                    List<String> schemaOwners = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceProviderManagement.schemaOwners = schemaOwners;
                } else if ("manifestOwners".equals(fieldName)) {
                    List<String> manifestOwners = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceProviderManagement.manifestOwners = manifestOwners;
                } else if ("authorizationOwners".equals(fieldName)) {
                    List<String> authorizationOwners = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceProviderManagement.authorizationOwners = authorizationOwners;
                } else if ("incidentRoutingService".equals(fieldName)) {
                    deserializedResourceProviderManagement.incidentRoutingService = reader.getString();
                } else if ("incidentRoutingTeam".equals(fieldName)) {
                    deserializedResourceProviderManagement.incidentRoutingTeam = reader.getString();
                } else if ("incidentContactEmail".equals(fieldName)) {
                    deserializedResourceProviderManagement.incidentContactEmail = reader.getString();
                } else if ("serviceTreeInfos".equals(fieldName)) {
                    List<ServiceTreeInfo> serviceTreeInfos
                        = reader.readArray(reader1 -> ServiceTreeInfo.fromJson(reader1));
                    deserializedResourceProviderManagement.serviceTreeInfos = serviceTreeInfos;
                } else if ("resourceAccessPolicy".equals(fieldName)) {
                    deserializedResourceProviderManagement.resourceAccessPolicy
                        = ResourceAccessPolicy.fromString(reader.getString());
                } else if ("resourceAccessRoles".equals(fieldName)) {
                    List<ResourceAccessRole> resourceAccessRoles
                        = reader.readArray(reader1 -> ResourceAccessRole.fromJson(reader1));
                    deserializedResourceProviderManagement.resourceAccessRoles = resourceAccessRoles;
                } else if ("expeditedRolloutSubmitters".equals(fieldName)) {
                    List<String> expeditedRolloutSubmitters = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceProviderManagement.expeditedRolloutSubmitters = expeditedRolloutSubmitters;
                } else if ("errorResponseMessageOptions".equals(fieldName)) {
                    deserializedResourceProviderManagement.errorResponseMessageOptions
                        = ResourceProviderManagementErrorResponseMessageOptions.fromJson(reader);
                } else if ("expeditedRolloutMetadata".equals(fieldName)) {
                    deserializedResourceProviderManagement.expeditedRolloutMetadata
                        = ResourceProviderManagementExpeditedRolloutMetadata.fromJson(reader);
                } else if ("canaryManifestOwners".equals(fieldName)) {
                    List<String> canaryManifestOwners = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceProviderManagement.canaryManifestOwners = canaryManifestOwners;
                } else if ("pcCode".equals(fieldName)) {
                    deserializedResourceProviderManagement.pcCode = reader.getString();
                } else if ("profitCenterProgramId".equals(fieldName)) {
                    deserializedResourceProviderManagement.profitCenterProgramId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceProviderManagement;
        });
    }
}
