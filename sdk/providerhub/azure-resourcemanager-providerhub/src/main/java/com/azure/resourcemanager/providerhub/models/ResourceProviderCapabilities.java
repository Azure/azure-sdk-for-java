// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ResourceProviderCapabilities model.
 */
@Fluent
public final class ResourceProviderCapabilities implements JsonSerializable<ResourceProviderCapabilities> {
    /*
     * The quotaId property.
     */
    private String quotaId;

    /*
     * The effect property.
     */
    private ResourceProviderCapabilitiesEffect effect;

    /*
     * The requiredFeatures property.
     */
    private List<String> requiredFeatures;

    /**
     * Creates an instance of ResourceProviderCapabilities class.
     */
    public ResourceProviderCapabilities() {
    }

    /**
     * Get the quotaId property: The quotaId property.
     * 
     * @return the quotaId value.
     */
    public String quotaId() {
        return this.quotaId;
    }

    /**
     * Set the quotaId property: The quotaId property.
     * 
     * @param quotaId the quotaId value to set.
     * @return the ResourceProviderCapabilities object itself.
     */
    public ResourceProviderCapabilities withQuotaId(String quotaId) {
        this.quotaId = quotaId;
        return this;
    }

    /**
     * Get the effect property: The effect property.
     * 
     * @return the effect value.
     */
    public ResourceProviderCapabilitiesEffect effect() {
        return this.effect;
    }

    /**
     * Set the effect property: The effect property.
     * 
     * @param effect the effect value to set.
     * @return the ResourceProviderCapabilities object itself.
     */
    public ResourceProviderCapabilities withEffect(ResourceProviderCapabilitiesEffect effect) {
        this.effect = effect;
        return this;
    }

    /**
     * Get the requiredFeatures property: The requiredFeatures property.
     * 
     * @return the requiredFeatures value.
     */
    public List<String> requiredFeatures() {
        return this.requiredFeatures;
    }

    /**
     * Set the requiredFeatures property: The requiredFeatures property.
     * 
     * @param requiredFeatures the requiredFeatures value to set.
     * @return the ResourceProviderCapabilities object itself.
     */
    public ResourceProviderCapabilities withRequiredFeatures(List<String> requiredFeatures) {
        this.requiredFeatures = requiredFeatures;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (quotaId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property quotaId in model ResourceProviderCapabilities"));
        }
        if (effect() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property effect in model ResourceProviderCapabilities"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResourceProviderCapabilities.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("quotaId", this.quotaId);
        jsonWriter.writeStringField("effect", this.effect == null ? null : this.effect.toString());
        jsonWriter.writeArrayField("requiredFeatures", this.requiredFeatures,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceProviderCapabilities from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceProviderCapabilities if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceProviderCapabilities.
     */
    public static ResourceProviderCapabilities fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceProviderCapabilities deserializedResourceProviderCapabilities = new ResourceProviderCapabilities();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("quotaId".equals(fieldName)) {
                    deserializedResourceProviderCapabilities.quotaId = reader.getString();
                } else if ("effect".equals(fieldName)) {
                    deserializedResourceProviderCapabilities.effect
                        = ResourceProviderCapabilitiesEffect.fromString(reader.getString());
                } else if ("requiredFeatures".equals(fieldName)) {
                    List<String> requiredFeatures = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceProviderCapabilities.requiredFeatures = requiredFeatures;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceProviderCapabilities;
        });
    }
}
