// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ResourceProviderAuthorization model.
 */
@Fluent
public final class ResourceProviderAuthorization implements JsonSerializable<ResourceProviderAuthorization> {
    /*
     * The application id.
     */
    private String applicationId;

    /*
     * The role definition id.
     */
    private String roleDefinitionId;

    /*
     * The managed by role definition id.
     */
    private String managedByRoleDefinitionId;

    /*
     * Managed by authorization.
     */
    private ResourceProviderAuthorizationManagedByAuthorization managedByAuthorization;

    /*
     * The allowed third party extensions.
     */
    private List<ThirdPartyExtension> allowedThirdPartyExtensions;

    /*
     * The grouping tag.
     */
    private String groupingTag;

    /**
     * Creates an instance of ResourceProviderAuthorization class.
     */
    public ResourceProviderAuthorization() {
    }

    /**
     * Get the applicationId property: The application id.
     * 
     * @return the applicationId value.
     */
    public String applicationId() {
        return this.applicationId;
    }

    /**
     * Set the applicationId property: The application id.
     * 
     * @param applicationId the applicationId value to set.
     * @return the ResourceProviderAuthorization object itself.
     */
    public ResourceProviderAuthorization withApplicationId(String applicationId) {
        this.applicationId = applicationId;
        return this;
    }

    /**
     * Get the roleDefinitionId property: The role definition id.
     * 
     * @return the roleDefinitionId value.
     */
    public String roleDefinitionId() {
        return this.roleDefinitionId;
    }

    /**
     * Set the roleDefinitionId property: The role definition id.
     * 
     * @param roleDefinitionId the roleDefinitionId value to set.
     * @return the ResourceProviderAuthorization object itself.
     */
    public ResourceProviderAuthorization withRoleDefinitionId(String roleDefinitionId) {
        this.roleDefinitionId = roleDefinitionId;
        return this;
    }

    /**
     * Get the managedByRoleDefinitionId property: The managed by role definition id.
     * 
     * @return the managedByRoleDefinitionId value.
     */
    public String managedByRoleDefinitionId() {
        return this.managedByRoleDefinitionId;
    }

    /**
     * Set the managedByRoleDefinitionId property: The managed by role definition id.
     * 
     * @param managedByRoleDefinitionId the managedByRoleDefinitionId value to set.
     * @return the ResourceProviderAuthorization object itself.
     */
    public ResourceProviderAuthorization withManagedByRoleDefinitionId(String managedByRoleDefinitionId) {
        this.managedByRoleDefinitionId = managedByRoleDefinitionId;
        return this;
    }

    /**
     * Get the managedByAuthorization property: Managed by authorization.
     * 
     * @return the managedByAuthorization value.
     */
    public ResourceProviderAuthorizationManagedByAuthorization managedByAuthorization() {
        return this.managedByAuthorization;
    }

    /**
     * Set the managedByAuthorization property: Managed by authorization.
     * 
     * @param managedByAuthorization the managedByAuthorization value to set.
     * @return the ResourceProviderAuthorization object itself.
     */
    public ResourceProviderAuthorization
        withManagedByAuthorization(ResourceProviderAuthorizationManagedByAuthorization managedByAuthorization) {
        this.managedByAuthorization = managedByAuthorization;
        return this;
    }

    /**
     * Get the allowedThirdPartyExtensions property: The allowed third party extensions.
     * 
     * @return the allowedThirdPartyExtensions value.
     */
    public List<ThirdPartyExtension> allowedThirdPartyExtensions() {
        return this.allowedThirdPartyExtensions;
    }

    /**
     * Set the allowedThirdPartyExtensions property: The allowed third party extensions.
     * 
     * @param allowedThirdPartyExtensions the allowedThirdPartyExtensions value to set.
     * @return the ResourceProviderAuthorization object itself.
     */
    public ResourceProviderAuthorization
        withAllowedThirdPartyExtensions(List<ThirdPartyExtension> allowedThirdPartyExtensions) {
        this.allowedThirdPartyExtensions = allowedThirdPartyExtensions;
        return this;
    }

    /**
     * Get the groupingTag property: The grouping tag.
     * 
     * @return the groupingTag value.
     */
    public String groupingTag() {
        return this.groupingTag;
    }

    /**
     * Set the groupingTag property: The grouping tag.
     * 
     * @param groupingTag the groupingTag value to set.
     * @return the ResourceProviderAuthorization object itself.
     */
    public ResourceProviderAuthorization withGroupingTag(String groupingTag) {
        this.groupingTag = groupingTag;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (managedByAuthorization() != null) {
            managedByAuthorization().validate();
        }
        if (allowedThirdPartyExtensions() != null) {
            allowedThirdPartyExtensions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("applicationId", this.applicationId);
        jsonWriter.writeStringField("roleDefinitionId", this.roleDefinitionId);
        jsonWriter.writeStringField("managedByRoleDefinitionId", this.managedByRoleDefinitionId);
        jsonWriter.writeJsonField("managedByAuthorization", this.managedByAuthorization);
        jsonWriter.writeArrayField("allowedThirdPartyExtensions", this.allowedThirdPartyExtensions,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("groupingTag", this.groupingTag);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceProviderAuthorization from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceProviderAuthorization if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceProviderAuthorization.
     */
    public static ResourceProviderAuthorization fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceProviderAuthorization deserializedResourceProviderAuthorization
                = new ResourceProviderAuthorization();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("applicationId".equals(fieldName)) {
                    deserializedResourceProviderAuthorization.applicationId = reader.getString();
                } else if ("roleDefinitionId".equals(fieldName)) {
                    deserializedResourceProviderAuthorization.roleDefinitionId = reader.getString();
                } else if ("managedByRoleDefinitionId".equals(fieldName)) {
                    deserializedResourceProviderAuthorization.managedByRoleDefinitionId = reader.getString();
                } else if ("managedByAuthorization".equals(fieldName)) {
                    deserializedResourceProviderAuthorization.managedByAuthorization
                        = ResourceProviderAuthorizationManagedByAuthorization.fromJson(reader);
                } else if ("allowedThirdPartyExtensions".equals(fieldName)) {
                    List<ThirdPartyExtension> allowedThirdPartyExtensions
                        = reader.readArray(reader1 -> ThirdPartyExtension.fromJson(reader1));
                    deserializedResourceProviderAuthorization.allowedThirdPartyExtensions = allowedThirdPartyExtensions;
                } else if ("groupingTag".equals(fieldName)) {
                    deserializedResourceProviderAuthorization.groupingTag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceProviderAuthorization;
        });
    }
}
