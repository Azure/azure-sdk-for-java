// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ResourceProviderAuthorization model.
 */
@Fluent
public final class ResourceProviderAuthorization implements JsonSerializable<ResourceProviderAuthorization> {
    /*
     * The applicationId property.
     */
    private String applicationId;

    /*
     * The roleDefinitionId property.
     */
    private String roleDefinitionId;

    /*
     * The managedByRoleDefinitionId property.
     */
    private String managedByRoleDefinitionId;

    /**
     * Creates an instance of ResourceProviderAuthorization class.
     */
    public ResourceProviderAuthorization() {
    }

    /**
     * Get the applicationId property: The applicationId property.
     * 
     * @return the applicationId value.
     */
    public String applicationId() {
        return this.applicationId;
    }

    /**
     * Set the applicationId property: The applicationId property.
     * 
     * @param applicationId the applicationId value to set.
     * @return the ResourceProviderAuthorization object itself.
     */
    public ResourceProviderAuthorization withApplicationId(String applicationId) {
        this.applicationId = applicationId;
        return this;
    }

    /**
     * Get the roleDefinitionId property: The roleDefinitionId property.
     * 
     * @return the roleDefinitionId value.
     */
    public String roleDefinitionId() {
        return this.roleDefinitionId;
    }

    /**
     * Set the roleDefinitionId property: The roleDefinitionId property.
     * 
     * @param roleDefinitionId the roleDefinitionId value to set.
     * @return the ResourceProviderAuthorization object itself.
     */
    public ResourceProviderAuthorization withRoleDefinitionId(String roleDefinitionId) {
        this.roleDefinitionId = roleDefinitionId;
        return this;
    }

    /**
     * Get the managedByRoleDefinitionId property: The managedByRoleDefinitionId property.
     * 
     * @return the managedByRoleDefinitionId value.
     */
    public String managedByRoleDefinitionId() {
        return this.managedByRoleDefinitionId;
    }

    /**
     * Set the managedByRoleDefinitionId property: The managedByRoleDefinitionId property.
     * 
     * @param managedByRoleDefinitionId the managedByRoleDefinitionId value to set.
     * @return the ResourceProviderAuthorization object itself.
     */
    public ResourceProviderAuthorization withManagedByRoleDefinitionId(String managedByRoleDefinitionId) {
        this.managedByRoleDefinitionId = managedByRoleDefinitionId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("applicationId", this.applicationId);
        jsonWriter.writeStringField("roleDefinitionId", this.roleDefinitionId);
        jsonWriter.writeStringField("managedByRoleDefinitionId", this.managedByRoleDefinitionId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceProviderAuthorization from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceProviderAuthorization if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceProviderAuthorization.
     */
    public static ResourceProviderAuthorization fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceProviderAuthorization deserializedResourceProviderAuthorization
                = new ResourceProviderAuthorization();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("applicationId".equals(fieldName)) {
                    deserializedResourceProviderAuthorization.applicationId = reader.getString();
                } else if ("roleDefinitionId".equals(fieldName)) {
                    deserializedResourceProviderAuthorization.roleDefinitionId = reader.getString();
                } else if ("managedByRoleDefinitionId".equals(fieldName)) {
                    deserializedResourceProviderAuthorization.managedByRoleDefinitionId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceProviderAuthorization;
        });
    }
}
