// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;
import java.util.List;

/**
 * The DefaultRolloutSpecificationLowTraffic model.
 */
@Fluent
public final class DefaultRolloutSpecificationLowTraffic extends TrafficRegionRolloutConfiguration {
    /**
     * Creates an instance of DefaultRolloutSpecificationLowTraffic class.
     */
    public DefaultRolloutSpecificationLowTraffic() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DefaultRolloutSpecificationLowTraffic withWaitDuration(Duration waitDuration) {
        super.withWaitDuration(waitDuration);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DefaultRolloutSpecificationLowTraffic withRegions(List<String> regions) {
        super.withRegions(regions);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("regions", regions(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("waitDuration", CoreUtils.durationToStringWithDays(waitDuration()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DefaultRolloutSpecificationLowTraffic from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DefaultRolloutSpecificationLowTraffic if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DefaultRolloutSpecificationLowTraffic.
     */
    public static DefaultRolloutSpecificationLowTraffic fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DefaultRolloutSpecificationLowTraffic deserializedDefaultRolloutSpecificationLowTraffic
                = new DefaultRolloutSpecificationLowTraffic();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("regions".equals(fieldName)) {
                    List<String> regions = reader.readArray(reader1 -> reader1.getString());
                    deserializedDefaultRolloutSpecificationLowTraffic.withRegions(regions);
                } else if ("waitDuration".equals(fieldName)) {
                    deserializedDefaultRolloutSpecificationLowTraffic.withWaitDuration(
                        reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString())));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDefaultRolloutSpecificationLowTraffic;
        });
    }
}
