// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ProviderRegistrationProperties model.
 */
@Fluent
public final class ProviderRegistrationProperties extends ProviderRegistrationPropertiesAutoGenerated {
    /**
     * Creates an instance of ProviderRegistrationProperties class.
     */
    public ProviderRegistrationProperties() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties
        withProviderHubMetadata(ProviderRegistrationPropertiesProviderHubMetadata providerHubMetadata) {
        super.withProviderHubMetadata(providerHubMetadata);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withProvisioningState(ProvisioningState provisioningState) {
        super.withProvisioningState(provisioningState);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withSubscriptionLifecycleNotificationSpecifications(
        ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications subscriptionLifecycleNotificationSpecifications) {
        super.withSubscriptionLifecycleNotificationSpecifications(subscriptionLifecycleNotificationSpecifications);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties
        withProviderAuthentication(ResourceProviderManifestPropertiesProviderAuthentication providerAuthentication) {
        super.withProviderAuthentication(providerAuthentication);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties
        withProviderAuthorizations(List<ResourceProviderAuthorization> providerAuthorizations) {
        super.withProviderAuthorizations(providerAuthorizations);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withNamespace(String namespace) {
        super.withNamespace(namespace);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withProviderVersion(String providerVersion) {
        super.withProviderVersion(providerVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withProviderType(ResourceProviderType providerType) {
        super.withProviderType(providerType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withRequiredFeatures(List<String> requiredFeatures) {
        super.withRequiredFeatures(requiredFeatures);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties
        withFeaturesRule(ResourceProviderManifestPropertiesFeaturesRule featuresRule) {
        super.withFeaturesRule(featuresRule);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties
        withRequestHeaderOptions(ResourceProviderManifestPropertiesRequestHeaderOptions requestHeaderOptions) {
        super.withRequestHeaderOptions(requestHeaderOptions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withManagement(ResourceProviderManifestPropertiesManagement management) {
        super.withManagement(management);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withCapabilities(List<ResourceProviderCapabilities> capabilities) {
        super.withCapabilities(capabilities);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withMetadata(Object metadata) {
        super.withMetadata(metadata);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withTemplateDeploymentOptions(
        ResourceProviderManifestPropertiesTemplateDeploymentOptions templateDeploymentOptions) {
        super.withTemplateDeploymentOptions(templateDeploymentOptions);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (providerAuthentication() != null) {
            providerAuthentication().validate();
        }
        if (providerAuthorizations() != null) {
            providerAuthorizations().forEach(e -> e.validate());
        }
        if (featuresRule() != null) {
            featuresRule().validate();
        }
        if (requestHeaderOptions() != null) {
            requestHeaderOptions().validate();
        }
        if (management() != null) {
            management().validate();
        }
        if (capabilities() != null) {
            capabilities().forEach(e -> e.validate());
        }
        if (templateDeploymentOptions() != null) {
            templateDeploymentOptions().validate();
        }
        if (providerHubMetadata() != null) {
            providerHubMetadata().validate();
        }
        if (subscriptionLifecycleNotificationSpecifications() != null) {
            subscriptionLifecycleNotificationSpecifications().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("providerAuthentication", providerAuthentication());
        jsonWriter.writeArrayField("providerAuthorizations", providerAuthorizations(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("namespace", namespace());
        jsonWriter.writeStringField("providerVersion", providerVersion());
        jsonWriter.writeStringField("providerType", providerType() == null ? null : providerType().toString());
        jsonWriter.writeArrayField("requiredFeatures", requiredFeatures(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("featuresRule", featuresRule());
        jsonWriter.writeJsonField("requestHeaderOptions", requestHeaderOptions());
        jsonWriter.writeJsonField("management", management());
        jsonWriter.writeArrayField("capabilities", capabilities(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeUntypedField("metadata", metadata());
        jsonWriter.writeJsonField("templateDeploymentOptions", templateDeploymentOptions());
        jsonWriter.writeJsonField("providerHubMetadata", providerHubMetadata());
        jsonWriter.writeStringField("provisioningState",
            provisioningState() == null ? null : provisioningState().toString());
        jsonWriter.writeJsonField("subscriptionLifecycleNotificationSpecifications",
            subscriptionLifecycleNotificationSpecifications());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProviderRegistrationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProviderRegistrationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProviderRegistrationProperties.
     */
    public static ProviderRegistrationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProviderRegistrationProperties deserializedProviderRegistrationProperties
                = new ProviderRegistrationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("providerAuthentication".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.withProviderAuthentication(
                        ResourceProviderManifestPropertiesProviderAuthentication.fromJson(reader));
                } else if ("providerAuthorizations".equals(fieldName)) {
                    List<ResourceProviderAuthorization> providerAuthorizations
                        = reader.readArray(reader1 -> ResourceProviderAuthorization.fromJson(reader1));
                    deserializedProviderRegistrationProperties.withProviderAuthorizations(providerAuthorizations);
                } else if ("namespace".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.withNamespace(reader.getString());
                } else if ("providerVersion".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.withProviderVersion(reader.getString());
                } else if ("providerType".equals(fieldName)) {
                    deserializedProviderRegistrationProperties
                        .withProviderType(ResourceProviderType.fromString(reader.getString()));
                } else if ("requiredFeatures".equals(fieldName)) {
                    List<String> requiredFeatures = reader.readArray(reader1 -> reader1.getString());
                    deserializedProviderRegistrationProperties.withRequiredFeatures(requiredFeatures);
                } else if ("featuresRule".equals(fieldName)) {
                    deserializedProviderRegistrationProperties
                        .withFeaturesRule(ResourceProviderManifestPropertiesFeaturesRule.fromJson(reader));
                } else if ("requestHeaderOptions".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.withRequestHeaderOptions(
                        ResourceProviderManifestPropertiesRequestHeaderOptions.fromJson(reader));
                } else if ("management".equals(fieldName)) {
                    deserializedProviderRegistrationProperties
                        .withManagement(ResourceProviderManifestPropertiesManagement.fromJson(reader));
                } else if ("capabilities".equals(fieldName)) {
                    List<ResourceProviderCapabilities> capabilities
                        = reader.readArray(reader1 -> ResourceProviderCapabilities.fromJson(reader1));
                    deserializedProviderRegistrationProperties.withCapabilities(capabilities);
                } else if ("metadata".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.withMetadata(reader.readUntyped());
                } else if ("templateDeploymentOptions".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.withTemplateDeploymentOptions(
                        ResourceProviderManifestPropertiesTemplateDeploymentOptions.fromJson(reader));
                } else if ("providerHubMetadata".equals(fieldName)) {
                    deserializedProviderRegistrationProperties
                        .withProviderHubMetadata(ProviderRegistrationPropertiesProviderHubMetadata.fromJson(reader));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedProviderRegistrationProperties
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("subscriptionLifecycleNotificationSpecifications".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.withSubscriptionLifecycleNotificationSpecifications(
                        ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications.fromJson(reader));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProviderRegistrationProperties;
        });
    }
}
