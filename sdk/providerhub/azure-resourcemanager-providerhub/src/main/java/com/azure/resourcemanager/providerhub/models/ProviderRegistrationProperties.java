// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ProviderRegistrationProperties model.
 */
@Fluent
public final class ProviderRegistrationProperties extends ResourceProviderManifestProperties {
    /*
     * The provider hub metadata.
     */
    private ProviderRegistrationPropertiesProviderHubMetadata providerHubMetadata;

    /*
     * The provisioning state.
     */
    private ProvisioningState provisioningState;

    /*
     * The subscription lifecycle notification specifications.
     */
    private ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications subscriptionLifecycleNotificationSpecifications;

    /*
     * The private resource provider configuration.
     */
    private ProviderRegistrationPropertiesPrivateResourceProviderConfiguration privateResourceProviderConfiguration;

    /*
     * The token auth configuration.
     */
    private TokenAuthConfiguration tokenAuthConfiguration;

    /**
     * Creates an instance of ProviderRegistrationProperties class.
     */
    public ProviderRegistrationProperties() {
    }

    /**
     * Get the providerHubMetadata property: The provider hub metadata.
     * 
     * @return the providerHubMetadata value.
     */
    public ProviderRegistrationPropertiesProviderHubMetadata providerHubMetadata() {
        return this.providerHubMetadata;
    }

    /**
     * Set the providerHubMetadata property: The provider hub metadata.
     * 
     * @param providerHubMetadata the providerHubMetadata value to set.
     * @return the ProviderRegistrationProperties object itself.
     */
    public ProviderRegistrationProperties
        withProviderHubMetadata(ProviderRegistrationPropertiesProviderHubMetadata providerHubMetadata) {
        this.providerHubMetadata = providerHubMetadata;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the subscriptionLifecycleNotificationSpecifications property: The subscription lifecycle notification
     * specifications.
     * 
     * @return the subscriptionLifecycleNotificationSpecifications value.
     */
    public ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications
        subscriptionLifecycleNotificationSpecifications() {
        return this.subscriptionLifecycleNotificationSpecifications;
    }

    /**
     * Set the subscriptionLifecycleNotificationSpecifications property: The subscription lifecycle notification
     * specifications.
     * 
     * @param subscriptionLifecycleNotificationSpecifications the subscriptionLifecycleNotificationSpecifications value
     * to set.
     * @return the ProviderRegistrationProperties object itself.
     */
    public ProviderRegistrationProperties withSubscriptionLifecycleNotificationSpecifications(
        ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications subscriptionLifecycleNotificationSpecifications) {
        this.subscriptionLifecycleNotificationSpecifications = subscriptionLifecycleNotificationSpecifications;
        return this;
    }

    /**
     * Get the privateResourceProviderConfiguration property: The private resource provider configuration.
     * 
     * @return the privateResourceProviderConfiguration value.
     */
    public ProviderRegistrationPropertiesPrivateResourceProviderConfiguration privateResourceProviderConfiguration() {
        return this.privateResourceProviderConfiguration;
    }

    /**
     * Set the privateResourceProviderConfiguration property: The private resource provider configuration.
     * 
     * @param privateResourceProviderConfiguration the privateResourceProviderConfiguration value to set.
     * @return the ProviderRegistrationProperties object itself.
     */
    public ProviderRegistrationProperties withPrivateResourceProviderConfiguration(
        ProviderRegistrationPropertiesPrivateResourceProviderConfiguration privateResourceProviderConfiguration) {
        this.privateResourceProviderConfiguration = privateResourceProviderConfiguration;
        return this;
    }

    /**
     * Get the tokenAuthConfiguration property: The token auth configuration.
     * 
     * @return the tokenAuthConfiguration value.
     */
    public TokenAuthConfiguration tokenAuthConfiguration() {
        return this.tokenAuthConfiguration;
    }

    /**
     * Set the tokenAuthConfiguration property: The token auth configuration.
     * 
     * @param tokenAuthConfiguration the tokenAuthConfiguration value to set.
     * @return the ProviderRegistrationProperties object itself.
     */
    public ProviderRegistrationProperties withTokenAuthConfiguration(TokenAuthConfiguration tokenAuthConfiguration) {
        this.tokenAuthConfiguration = tokenAuthConfiguration;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties
        withProviderAuthentication(ResourceProviderManifestPropertiesProviderAuthentication providerAuthentication) {
        super.withProviderAuthentication(providerAuthentication);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties
        withProviderAuthorizations(List<ResourceProviderAuthorization> providerAuthorizations) {
        super.withProviderAuthorizations(providerAuthorizations);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withNamespace(String namespace) {
        super.withNamespace(namespace);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withServices(List<ResourceProviderService> services) {
        super.withServices(services);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withServiceName(String serviceName) {
        super.withServiceName(serviceName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withProviderVersion(String providerVersion) {
        super.withProviderVersion(providerVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withProviderType(ResourceProviderType providerType) {
        super.withProviderType(providerType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withRequiredFeatures(List<String> requiredFeatures) {
        super.withRequiredFeatures(requiredFeatures);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties
        withFeaturesRule(ResourceProviderManifestPropertiesFeaturesRule featuresRule) {
        super.withFeaturesRule(featuresRule);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties
        withRequestHeaderOptions(ResourceProviderManifestPropertiesRequestHeaderOptions requestHeaderOptions) {
        super.withRequestHeaderOptions(requestHeaderOptions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withManagement(ResourceProviderManifestPropertiesManagement management) {
        super.withManagement(management);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withCapabilities(List<ResourceProviderCapabilities> capabilities) {
        super.withCapabilities(capabilities);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties
        withCrossTenantTokenValidation(CrossTenantTokenValidation crossTenantTokenValidation) {
        super.withCrossTenantTokenValidation(crossTenantTokenValidation);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withMetadata(Object metadata) {
        super.withMetadata(metadata);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withTemplateDeploymentOptions(
        ResourceProviderManifestPropertiesTemplateDeploymentOptions templateDeploymentOptions) {
        super.withTemplateDeploymentOptions(templateDeploymentOptions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties
        withGlobalNotificationEndpoints(List<ResourceProviderEndpoint> globalNotificationEndpoints) {
        super.withGlobalNotificationEndpoints(globalNotificationEndpoints);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withEnableTenantLinkedNotification(Boolean enableTenantLinkedNotification) {
        super.withEnableTenantLinkedNotification(enableTenantLinkedNotification);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withNotifications(List<Notification> notifications) {
        super.withNotifications(notifications);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties
        withLinkedNotificationRules(List<FanoutLinkedNotificationRule> linkedNotificationRules) {
        super.withLinkedNotificationRules(linkedNotificationRules);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties
        withResourceProviderAuthorizationRules(ResourceProviderAuthorizationRules resourceProviderAuthorizationRules) {
        super.withResourceProviderAuthorizationRules(resourceProviderAuthorizationRules);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties
        withDstsConfiguration(ResourceProviderManifestPropertiesDstsConfiguration dstsConfiguration) {
        super.withDstsConfiguration(dstsConfiguration);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withNotificationOptions(NotificationOptions notificationOptions) {
        super.withNotificationOptions(notificationOptions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties
        withResourceHydrationAccounts(List<ResourceHydrationAccount> resourceHydrationAccounts) {
        super.withResourceHydrationAccounts(resourceHydrationAccounts);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties
        withNotificationSettings(ResourceProviderManifestPropertiesNotificationSettings notificationSettings) {
        super.withNotificationSettings(notificationSettings);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withManagementGroupGlobalNotificationEndpoints(
        List<ResourceProviderEndpoint> managementGroupGlobalNotificationEndpoints) {
        super.withManagementGroupGlobalNotificationEndpoints(managementGroupGlobalNotificationEndpoints);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withOptionalFeatures(List<String> optionalFeatures) {
        super.withOptionalFeatures(optionalFeatures);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withResourceGroupLockOptionDuringMove(
        ResourceProviderManifestPropertiesResourceGroupLockOptionDuringMove resourceGroupLockOptionDuringMove) {
        super.withResourceGroupLockOptionDuringMove(resourceGroupLockOptionDuringMove);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties
        withResponseOptions(ResourceProviderManifestPropertiesResponseOptions responseOptions) {
        super.withResponseOptions(responseOptions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withLegacyNamespace(String legacyNamespace) {
        super.withLegacyNamespace(legacyNamespace);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withLegacyRegistrations(List<String> legacyRegistrations) {
        super.withLegacyRegistrations(legacyRegistrations);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationProperties withCustomManifestVersion(String customManifestVersion) {
        super.withCustomManifestVersion(customManifestVersion);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (providerHubMetadata() != null) {
            providerHubMetadata().validate();
        }
        if (subscriptionLifecycleNotificationSpecifications() != null) {
            subscriptionLifecycleNotificationSpecifications().validate();
        }
        if (privateResourceProviderConfiguration() != null) {
            privateResourceProviderConfiguration().validate();
        }
        if (tokenAuthConfiguration() != null) {
            tokenAuthConfiguration().validate();
        }
        if (providerAuthentication() != null) {
            providerAuthentication().validate();
        }
        if (providerAuthorizations() != null) {
            providerAuthorizations().forEach(e -> e.validate());
        }
        if (services() != null) {
            services().forEach(e -> e.validate());
        }
        if (featuresRule() != null) {
            featuresRule().validate();
        }
        if (requestHeaderOptions() != null) {
            requestHeaderOptions().validate();
        }
        if (management() != null) {
            management().validate();
        }
        if (capabilities() != null) {
            capabilities().forEach(e -> e.validate());
        }
        if (templateDeploymentOptions() != null) {
            templateDeploymentOptions().validate();
        }
        if (globalNotificationEndpoints() != null) {
            globalNotificationEndpoints().forEach(e -> e.validate());
        }
        if (notifications() != null) {
            notifications().forEach(e -> e.validate());
        }
        if (linkedNotificationRules() != null) {
            linkedNotificationRules().forEach(e -> e.validate());
        }
        if (resourceProviderAuthorizationRules() != null) {
            resourceProviderAuthorizationRules().validate();
        }
        if (dstsConfiguration() != null) {
            dstsConfiguration().validate();
        }
        if (resourceHydrationAccounts() != null) {
            resourceHydrationAccounts().forEach(e -> e.validate());
        }
        if (notificationSettings() != null) {
            notificationSettings().validate();
        }
        if (managementGroupGlobalNotificationEndpoints() != null) {
            managementGroupGlobalNotificationEndpoints().forEach(e -> e.validate());
        }
        if (resourceGroupLockOptionDuringMove() != null) {
            resourceGroupLockOptionDuringMove().validate();
        }
        if (responseOptions() != null) {
            responseOptions().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("providerAuthentication", providerAuthentication());
        jsonWriter.writeArrayField("providerAuthorizations", providerAuthorizations(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("namespace", namespace());
        jsonWriter.writeArrayField("services", services(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("serviceName", serviceName());
        jsonWriter.writeStringField("providerVersion", providerVersion());
        jsonWriter.writeStringField("providerType", providerType() == null ? null : providerType().toString());
        jsonWriter.writeArrayField("requiredFeatures", requiredFeatures(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("featuresRule", featuresRule());
        jsonWriter.writeJsonField("requestHeaderOptions", requestHeaderOptions());
        jsonWriter.writeJsonField("management", management());
        jsonWriter.writeArrayField("capabilities", capabilities(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("crossTenantTokenValidation",
            crossTenantTokenValidation() == null ? null : crossTenantTokenValidation().toString());
        if (metadata() != null) {
            jsonWriter.writeUntypedField("metadata", metadata());
        }
        jsonWriter.writeJsonField("templateDeploymentOptions", templateDeploymentOptions());
        jsonWriter.writeArrayField("globalNotificationEndpoints", globalNotificationEndpoints(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("enableTenantLinkedNotification", enableTenantLinkedNotification());
        jsonWriter.writeArrayField("notifications", notifications(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("linkedNotificationRules", linkedNotificationRules(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("resourceProviderAuthorizationRules", resourceProviderAuthorizationRules());
        jsonWriter.writeJsonField("dstsConfiguration", dstsConfiguration());
        jsonWriter.writeStringField("notificationOptions",
            notificationOptions() == null ? null : notificationOptions().toString());
        jsonWriter.writeArrayField("resourceHydrationAccounts", resourceHydrationAccounts(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("notificationSettings", notificationSettings());
        jsonWriter.writeArrayField("managementGroupGlobalNotificationEndpoints",
            managementGroupGlobalNotificationEndpoints(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("optionalFeatures", optionalFeatures(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("resourceGroupLockOptionDuringMove", resourceGroupLockOptionDuringMove());
        jsonWriter.writeJsonField("responseOptions", responseOptions());
        jsonWriter.writeStringField("legacyNamespace", legacyNamespace());
        jsonWriter.writeArrayField("legacyRegistrations", legacyRegistrations(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("customManifestVersion", customManifestVersion());
        jsonWriter.writeJsonField("providerHubMetadata", this.providerHubMetadata);
        jsonWriter.writeJsonField("subscriptionLifecycleNotificationSpecifications",
            this.subscriptionLifecycleNotificationSpecifications);
        jsonWriter.writeJsonField("privateResourceProviderConfiguration", this.privateResourceProviderConfiguration);
        jsonWriter.writeJsonField("tokenAuthConfiguration", this.tokenAuthConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProviderRegistrationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProviderRegistrationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProviderRegistrationProperties.
     */
    public static ProviderRegistrationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProviderRegistrationProperties deserializedProviderRegistrationProperties
                = new ProviderRegistrationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("providerAuthentication".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.withProviderAuthentication(
                        ResourceProviderManifestPropertiesProviderAuthentication.fromJson(reader));
                } else if ("providerAuthorizations".equals(fieldName)) {
                    List<ResourceProviderAuthorization> providerAuthorizations
                        = reader.readArray(reader1 -> ResourceProviderAuthorization.fromJson(reader1));
                    deserializedProviderRegistrationProperties.withProviderAuthorizations(providerAuthorizations);
                } else if ("namespace".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.withNamespace(reader.getString());
                } else if ("services".equals(fieldName)) {
                    List<ResourceProviderService> services
                        = reader.readArray(reader1 -> ResourceProviderService.fromJson(reader1));
                    deserializedProviderRegistrationProperties.withServices(services);
                } else if ("serviceName".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.withServiceName(reader.getString());
                } else if ("providerVersion".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.withProviderVersion(reader.getString());
                } else if ("providerType".equals(fieldName)) {
                    deserializedProviderRegistrationProperties
                        .withProviderType(ResourceProviderType.fromString(reader.getString()));
                } else if ("requiredFeatures".equals(fieldName)) {
                    List<String> requiredFeatures = reader.readArray(reader1 -> reader1.getString());
                    deserializedProviderRegistrationProperties.withRequiredFeatures(requiredFeatures);
                } else if ("featuresRule".equals(fieldName)) {
                    deserializedProviderRegistrationProperties
                        .withFeaturesRule(ResourceProviderManifestPropertiesFeaturesRule.fromJson(reader));
                } else if ("requestHeaderOptions".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.withRequestHeaderOptions(
                        ResourceProviderManifestPropertiesRequestHeaderOptions.fromJson(reader));
                } else if ("management".equals(fieldName)) {
                    deserializedProviderRegistrationProperties
                        .withManagement(ResourceProviderManifestPropertiesManagement.fromJson(reader));
                } else if ("capabilities".equals(fieldName)) {
                    List<ResourceProviderCapabilities> capabilities
                        = reader.readArray(reader1 -> ResourceProviderCapabilities.fromJson(reader1));
                    deserializedProviderRegistrationProperties.withCapabilities(capabilities);
                } else if ("crossTenantTokenValidation".equals(fieldName)) {
                    deserializedProviderRegistrationProperties
                        .withCrossTenantTokenValidation(CrossTenantTokenValidation.fromString(reader.getString()));
                } else if ("metadata".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.withMetadata(reader.readUntyped());
                } else if ("templateDeploymentOptions".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.withTemplateDeploymentOptions(
                        ResourceProviderManifestPropertiesTemplateDeploymentOptions.fromJson(reader));
                } else if ("globalNotificationEndpoints".equals(fieldName)) {
                    List<ResourceProviderEndpoint> globalNotificationEndpoints
                        = reader.readArray(reader1 -> ResourceProviderEndpoint.fromJson(reader1));
                    deserializedProviderRegistrationProperties
                        .withGlobalNotificationEndpoints(globalNotificationEndpoints);
                } else if ("enableTenantLinkedNotification".equals(fieldName)) {
                    deserializedProviderRegistrationProperties
                        .withEnableTenantLinkedNotification(reader.getNullable(JsonReader::getBoolean));
                } else if ("notifications".equals(fieldName)) {
                    List<Notification> notifications = reader.readArray(reader1 -> Notification.fromJson(reader1));
                    deserializedProviderRegistrationProperties.withNotifications(notifications);
                } else if ("linkedNotificationRules".equals(fieldName)) {
                    List<FanoutLinkedNotificationRule> linkedNotificationRules
                        = reader.readArray(reader1 -> FanoutLinkedNotificationRule.fromJson(reader1));
                    deserializedProviderRegistrationProperties.withLinkedNotificationRules(linkedNotificationRules);
                } else if ("resourceProviderAuthorizationRules".equals(fieldName)) {
                    deserializedProviderRegistrationProperties
                        .withResourceProviderAuthorizationRules(ResourceProviderAuthorizationRules.fromJson(reader));
                } else if ("dstsConfiguration".equals(fieldName)) {
                    deserializedProviderRegistrationProperties
                        .withDstsConfiguration(ResourceProviderManifestPropertiesDstsConfiguration.fromJson(reader));
                } else if ("notificationOptions".equals(fieldName)) {
                    deserializedProviderRegistrationProperties
                        .withNotificationOptions(NotificationOptions.fromString(reader.getString()));
                } else if ("resourceHydrationAccounts".equals(fieldName)) {
                    List<ResourceHydrationAccount> resourceHydrationAccounts
                        = reader.readArray(reader1 -> ResourceHydrationAccount.fromJson(reader1));
                    deserializedProviderRegistrationProperties.withResourceHydrationAccounts(resourceHydrationAccounts);
                } else if ("notificationSettings".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.withNotificationSettings(
                        ResourceProviderManifestPropertiesNotificationSettings.fromJson(reader));
                } else if ("managementGroupGlobalNotificationEndpoints".equals(fieldName)) {
                    List<ResourceProviderEndpoint> managementGroupGlobalNotificationEndpoints
                        = reader.readArray(reader1 -> ResourceProviderEndpoint.fromJson(reader1));
                    deserializedProviderRegistrationProperties
                        .withManagementGroupGlobalNotificationEndpoints(managementGroupGlobalNotificationEndpoints);
                } else if ("optionalFeatures".equals(fieldName)) {
                    List<String> optionalFeatures = reader.readArray(reader1 -> reader1.getString());
                    deserializedProviderRegistrationProperties.withOptionalFeatures(optionalFeatures);
                } else if ("resourceGroupLockOptionDuringMove".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.withResourceGroupLockOptionDuringMove(
                        ResourceProviderManifestPropertiesResourceGroupLockOptionDuringMove.fromJson(reader));
                } else if ("responseOptions".equals(fieldName)) {
                    deserializedProviderRegistrationProperties
                        .withResponseOptions(ResourceProviderManifestPropertiesResponseOptions.fromJson(reader));
                } else if ("legacyNamespace".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.withLegacyNamespace(reader.getString());
                } else if ("legacyRegistrations".equals(fieldName)) {
                    List<String> legacyRegistrations = reader.readArray(reader1 -> reader1.getString());
                    deserializedProviderRegistrationProperties.withLegacyRegistrations(legacyRegistrations);
                } else if ("customManifestVersion".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.withCustomManifestVersion(reader.getString());
                } else if ("providerHubMetadata".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.providerHubMetadata
                        = ProviderRegistrationPropertiesProviderHubMetadata.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("subscriptionLifecycleNotificationSpecifications".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.subscriptionLifecycleNotificationSpecifications
                        = ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications
                            .fromJson(reader);
                } else if ("privateResourceProviderConfiguration".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.privateResourceProviderConfiguration
                        = ProviderRegistrationPropertiesPrivateResourceProviderConfiguration.fromJson(reader);
                } else if ("tokenAuthConfiguration".equals(fieldName)) {
                    deserializedProviderRegistrationProperties.tokenAuthConfiguration
                        = TokenAuthConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProviderRegistrationProperties;
        });
    }
}
