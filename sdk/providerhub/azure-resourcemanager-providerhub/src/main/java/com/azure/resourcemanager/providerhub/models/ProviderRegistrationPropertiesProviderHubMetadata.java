// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ProviderRegistrationPropertiesProviderHubMetadata model.
 */
@Fluent
public final class ProviderRegistrationPropertiesProviderHubMetadata extends ProviderHubMetadata {
    /**
     * Creates an instance of ProviderRegistrationPropertiesProviderHubMetadata class.
     */
    public ProviderRegistrationPropertiesProviderHubMetadata() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationPropertiesProviderHubMetadata
        withProviderAuthorizations(List<ResourceProviderAuthorization> providerAuthorizations) {
        super.withProviderAuthorizations(providerAuthorizations);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationPropertiesProviderHubMetadata
        withProviderAuthentication(ProviderHubMetadataProviderAuthentication providerAuthentication) {
        super.withProviderAuthentication(providerAuthentication);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationPropertiesProviderHubMetadata withThirdPartyProviderAuthorization(
        ProviderHubMetadataThirdPartyProviderAuthorization thirdPartyProviderAuthorization) {
        super.withThirdPartyProviderAuthorization(thirdPartyProviderAuthorization);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (providerAuthorizations() != null) {
            providerAuthorizations().forEach(e -> e.validate());
        }
        if (providerAuthentication() != null) {
            providerAuthentication().validate();
        }
        if (thirdPartyProviderAuthorization() != null) {
            thirdPartyProviderAuthorization().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("providerAuthorizations", providerAuthorizations(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("providerAuthentication", providerAuthentication());
        jsonWriter.writeJsonField("thirdPartyProviderAuthorization", thirdPartyProviderAuthorization());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProviderRegistrationPropertiesProviderHubMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProviderRegistrationPropertiesProviderHubMetadata if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProviderRegistrationPropertiesProviderHubMetadata.
     */
    public static ProviderRegistrationPropertiesProviderHubMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProviderRegistrationPropertiesProviderHubMetadata deserializedProviderRegistrationPropertiesProviderHubMetadata
                = new ProviderRegistrationPropertiesProviderHubMetadata();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("providerAuthorizations".equals(fieldName)) {
                    List<ResourceProviderAuthorization> providerAuthorizations
                        = reader.readArray(reader1 -> ResourceProviderAuthorization.fromJson(reader1));
                    deserializedProviderRegistrationPropertiesProviderHubMetadata
                        .withProviderAuthorizations(providerAuthorizations);
                } else if ("providerAuthentication".equals(fieldName)) {
                    deserializedProviderRegistrationPropertiesProviderHubMetadata
                        .withProviderAuthentication(ProviderHubMetadataProviderAuthentication.fromJson(reader));
                } else if ("thirdPartyProviderAuthorization".equals(fieldName)) {
                    deserializedProviderRegistrationPropertiesProviderHubMetadata.withThirdPartyProviderAuthorization(
                        ProviderHubMetadataThirdPartyProviderAuthorization.fromJson(reader));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProviderRegistrationPropertiesProviderHubMetadata;
        });
    }
}
