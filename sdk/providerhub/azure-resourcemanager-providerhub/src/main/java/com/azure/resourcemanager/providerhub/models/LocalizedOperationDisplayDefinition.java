// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The LocalizedOperationDisplayDefinition model.
 */
@Fluent
public class LocalizedOperationDisplayDefinition implements JsonSerializable<LocalizedOperationDisplayDefinition> {
    /*
     * Display information of the operation.
     */
    private LocalizedOperationDisplayDefinitionDefault defaultProperty;

    /*
     * Display information of the operation for en locale.
     */
    private LocalizedOperationDisplayDefinitionEn en;

    /*
     * Display information of the operation for cs locale.
     */
    private LocalizedOperationDisplayDefinitionCs cs;

    /*
     * Display information of the operation for de locale.
     */
    private LocalizedOperationDisplayDefinitionDe de;

    /*
     * Display information of the operation for es locale.
     */
    private LocalizedOperationDisplayDefinitionEs es;

    /*
     * Display information of the operation for fr locale.
     */
    private LocalizedOperationDisplayDefinitionFr fr;

    /*
     * Display information of the operation for hu locale.
     */
    private LocalizedOperationDisplayDefinitionHu hu;

    /*
     * Display information of the operation for it locale.
     */
    private LocalizedOperationDisplayDefinitionIt it;

    /*
     * Display information of the operation for ja locale.
     */
    private LocalizedOperationDisplayDefinitionJa ja;

    /*
     * Display information of the operation for ko locale.
     */
    private LocalizedOperationDisplayDefinitionKo ko;

    /*
     * Display information of the operation for nl locale.
     */
    private LocalizedOperationDisplayDefinitionNl nl;

    /*
     * Display information of the operation for pl locale.
     */
    private LocalizedOperationDisplayDefinitionPl pl;

    /*
     * Display information of the operation for pt-BR locale.
     */
    private LocalizedOperationDisplayDefinitionPtBR ptBR;

    /*
     * Display information of the operation for pt-PT locale.
     */
    private LocalizedOperationDisplayDefinitionPt pt;

    /*
     * Display information of the operation for ru locale.
     */
    private LocalizedOperationDisplayDefinitionRu ru;

    /*
     * Display information of the operation for sv locale.
     */
    private LocalizedOperationDisplayDefinitionSv sv;

    /*
     * Display information of the operation for zh-Hans locale.
     */
    private LocalizedOperationDisplayDefinitionZhHans zhHans;

    /*
     * Display information of the operation for zh-Hant locale.
     */
    private LocalizedOperationDisplayDefinitionZhHant zhHant;

    /**
     * Creates an instance of LocalizedOperationDisplayDefinition class.
     */
    public LocalizedOperationDisplayDefinition() {
    }

    /**
     * Get the defaultProperty property: Display information of the operation.
     * 
     * @return the defaultProperty value.
     */
    public LocalizedOperationDisplayDefinitionDefault defaultProperty() {
        return this.defaultProperty;
    }

    /**
     * Set the defaultProperty property: Display information of the operation.
     * 
     * @param defaultProperty the defaultProperty value to set.
     * @return the LocalizedOperationDisplayDefinition object itself.
     */
    public LocalizedOperationDisplayDefinition
        withDefaultProperty(LocalizedOperationDisplayDefinitionDefault defaultProperty) {
        this.defaultProperty = defaultProperty;
        return this;
    }

    /**
     * Get the en property: Display information of the operation for en locale.
     * 
     * @return the en value.
     */
    public LocalizedOperationDisplayDefinitionEn en() {
        return this.en;
    }

    /**
     * Set the en property: Display information of the operation for en locale.
     * 
     * @param en the en value to set.
     * @return the LocalizedOperationDisplayDefinition object itself.
     */
    public LocalizedOperationDisplayDefinition withEn(LocalizedOperationDisplayDefinitionEn en) {
        this.en = en;
        return this;
    }

    /**
     * Get the cs property: Display information of the operation for cs locale.
     * 
     * @return the cs value.
     */
    public LocalizedOperationDisplayDefinitionCs cs() {
        return this.cs;
    }

    /**
     * Set the cs property: Display information of the operation for cs locale.
     * 
     * @param cs the cs value to set.
     * @return the LocalizedOperationDisplayDefinition object itself.
     */
    public LocalizedOperationDisplayDefinition withCs(LocalizedOperationDisplayDefinitionCs cs) {
        this.cs = cs;
        return this;
    }

    /**
     * Get the de property: Display information of the operation for de locale.
     * 
     * @return the de value.
     */
    public LocalizedOperationDisplayDefinitionDe de() {
        return this.de;
    }

    /**
     * Set the de property: Display information of the operation for de locale.
     * 
     * @param de the de value to set.
     * @return the LocalizedOperationDisplayDefinition object itself.
     */
    public LocalizedOperationDisplayDefinition withDe(LocalizedOperationDisplayDefinitionDe de) {
        this.de = de;
        return this;
    }

    /**
     * Get the es property: Display information of the operation for es locale.
     * 
     * @return the es value.
     */
    public LocalizedOperationDisplayDefinitionEs es() {
        return this.es;
    }

    /**
     * Set the es property: Display information of the operation for es locale.
     * 
     * @param es the es value to set.
     * @return the LocalizedOperationDisplayDefinition object itself.
     */
    public LocalizedOperationDisplayDefinition withEs(LocalizedOperationDisplayDefinitionEs es) {
        this.es = es;
        return this;
    }

    /**
     * Get the fr property: Display information of the operation for fr locale.
     * 
     * @return the fr value.
     */
    public LocalizedOperationDisplayDefinitionFr fr() {
        return this.fr;
    }

    /**
     * Set the fr property: Display information of the operation for fr locale.
     * 
     * @param fr the fr value to set.
     * @return the LocalizedOperationDisplayDefinition object itself.
     */
    public LocalizedOperationDisplayDefinition withFr(LocalizedOperationDisplayDefinitionFr fr) {
        this.fr = fr;
        return this;
    }

    /**
     * Get the hu property: Display information of the operation for hu locale.
     * 
     * @return the hu value.
     */
    public LocalizedOperationDisplayDefinitionHu hu() {
        return this.hu;
    }

    /**
     * Set the hu property: Display information of the operation for hu locale.
     * 
     * @param hu the hu value to set.
     * @return the LocalizedOperationDisplayDefinition object itself.
     */
    public LocalizedOperationDisplayDefinition withHu(LocalizedOperationDisplayDefinitionHu hu) {
        this.hu = hu;
        return this;
    }

    /**
     * Get the it property: Display information of the operation for it locale.
     * 
     * @return the it value.
     */
    public LocalizedOperationDisplayDefinitionIt it() {
        return this.it;
    }

    /**
     * Set the it property: Display information of the operation for it locale.
     * 
     * @param it the it value to set.
     * @return the LocalizedOperationDisplayDefinition object itself.
     */
    public LocalizedOperationDisplayDefinition withIt(LocalizedOperationDisplayDefinitionIt it) {
        this.it = it;
        return this;
    }

    /**
     * Get the ja property: Display information of the operation for ja locale.
     * 
     * @return the ja value.
     */
    public LocalizedOperationDisplayDefinitionJa ja() {
        return this.ja;
    }

    /**
     * Set the ja property: Display information of the operation for ja locale.
     * 
     * @param ja the ja value to set.
     * @return the LocalizedOperationDisplayDefinition object itself.
     */
    public LocalizedOperationDisplayDefinition withJa(LocalizedOperationDisplayDefinitionJa ja) {
        this.ja = ja;
        return this;
    }

    /**
     * Get the ko property: Display information of the operation for ko locale.
     * 
     * @return the ko value.
     */
    public LocalizedOperationDisplayDefinitionKo ko() {
        return this.ko;
    }

    /**
     * Set the ko property: Display information of the operation for ko locale.
     * 
     * @param ko the ko value to set.
     * @return the LocalizedOperationDisplayDefinition object itself.
     */
    public LocalizedOperationDisplayDefinition withKo(LocalizedOperationDisplayDefinitionKo ko) {
        this.ko = ko;
        return this;
    }

    /**
     * Get the nl property: Display information of the operation for nl locale.
     * 
     * @return the nl value.
     */
    public LocalizedOperationDisplayDefinitionNl nl() {
        return this.nl;
    }

    /**
     * Set the nl property: Display information of the operation for nl locale.
     * 
     * @param nl the nl value to set.
     * @return the LocalizedOperationDisplayDefinition object itself.
     */
    public LocalizedOperationDisplayDefinition withNl(LocalizedOperationDisplayDefinitionNl nl) {
        this.nl = nl;
        return this;
    }

    /**
     * Get the pl property: Display information of the operation for pl locale.
     * 
     * @return the pl value.
     */
    public LocalizedOperationDisplayDefinitionPl pl() {
        return this.pl;
    }

    /**
     * Set the pl property: Display information of the operation for pl locale.
     * 
     * @param pl the pl value to set.
     * @return the LocalizedOperationDisplayDefinition object itself.
     */
    public LocalizedOperationDisplayDefinition withPl(LocalizedOperationDisplayDefinitionPl pl) {
        this.pl = pl;
        return this;
    }

    /**
     * Get the ptBR property: Display information of the operation for pt-BR locale.
     * 
     * @return the ptBR value.
     */
    public LocalizedOperationDisplayDefinitionPtBR ptBR() {
        return this.ptBR;
    }

    /**
     * Set the ptBR property: Display information of the operation for pt-BR locale.
     * 
     * @param ptBR the ptBR value to set.
     * @return the LocalizedOperationDisplayDefinition object itself.
     */
    public LocalizedOperationDisplayDefinition withPtBR(LocalizedOperationDisplayDefinitionPtBR ptBR) {
        this.ptBR = ptBR;
        return this;
    }

    /**
     * Get the pt property: Display information of the operation for pt-PT locale.
     * 
     * @return the pt value.
     */
    public LocalizedOperationDisplayDefinitionPt pt() {
        return this.pt;
    }

    /**
     * Set the pt property: Display information of the operation for pt-PT locale.
     * 
     * @param pt the pt value to set.
     * @return the LocalizedOperationDisplayDefinition object itself.
     */
    public LocalizedOperationDisplayDefinition withPt(LocalizedOperationDisplayDefinitionPt pt) {
        this.pt = pt;
        return this;
    }

    /**
     * Get the ru property: Display information of the operation for ru locale.
     * 
     * @return the ru value.
     */
    public LocalizedOperationDisplayDefinitionRu ru() {
        return this.ru;
    }

    /**
     * Set the ru property: Display information of the operation for ru locale.
     * 
     * @param ru the ru value to set.
     * @return the LocalizedOperationDisplayDefinition object itself.
     */
    public LocalizedOperationDisplayDefinition withRu(LocalizedOperationDisplayDefinitionRu ru) {
        this.ru = ru;
        return this;
    }

    /**
     * Get the sv property: Display information of the operation for sv locale.
     * 
     * @return the sv value.
     */
    public LocalizedOperationDisplayDefinitionSv sv() {
        return this.sv;
    }

    /**
     * Set the sv property: Display information of the operation for sv locale.
     * 
     * @param sv the sv value to set.
     * @return the LocalizedOperationDisplayDefinition object itself.
     */
    public LocalizedOperationDisplayDefinition withSv(LocalizedOperationDisplayDefinitionSv sv) {
        this.sv = sv;
        return this;
    }

    /**
     * Get the zhHans property: Display information of the operation for zh-Hans locale.
     * 
     * @return the zhHans value.
     */
    public LocalizedOperationDisplayDefinitionZhHans zhHans() {
        return this.zhHans;
    }

    /**
     * Set the zhHans property: Display information of the operation for zh-Hans locale.
     * 
     * @param zhHans the zhHans value to set.
     * @return the LocalizedOperationDisplayDefinition object itself.
     */
    public LocalizedOperationDisplayDefinition withZhHans(LocalizedOperationDisplayDefinitionZhHans zhHans) {
        this.zhHans = zhHans;
        return this;
    }

    /**
     * Get the zhHant property: Display information of the operation for zh-Hant locale.
     * 
     * @return the zhHant value.
     */
    public LocalizedOperationDisplayDefinitionZhHant zhHant() {
        return this.zhHant;
    }

    /**
     * Set the zhHant property: Display information of the operation for zh-Hant locale.
     * 
     * @param zhHant the zhHant value to set.
     * @return the LocalizedOperationDisplayDefinition object itself.
     */
    public LocalizedOperationDisplayDefinition withZhHant(LocalizedOperationDisplayDefinitionZhHant zhHant) {
        this.zhHant = zhHant;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (defaultProperty() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property defaultProperty in model LocalizedOperationDisplayDefinition"));
        } else {
            defaultProperty().validate();
        }
        if (en() != null) {
            en().validate();
        }
        if (cs() != null) {
            cs().validate();
        }
        if (de() != null) {
            de().validate();
        }
        if (es() != null) {
            es().validate();
        }
        if (fr() != null) {
            fr().validate();
        }
        if (hu() != null) {
            hu().validate();
        }
        if (it() != null) {
            it().validate();
        }
        if (ja() != null) {
            ja().validate();
        }
        if (ko() != null) {
            ko().validate();
        }
        if (nl() != null) {
            nl().validate();
        }
        if (pl() != null) {
            pl().validate();
        }
        if (ptBR() != null) {
            ptBR().validate();
        }
        if (pt() != null) {
            pt().validate();
        }
        if (ru() != null) {
            ru().validate();
        }
        if (sv() != null) {
            sv().validate();
        }
        if (zhHans() != null) {
            zhHans().validate();
        }
        if (zhHant() != null) {
            zhHant().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LocalizedOperationDisplayDefinition.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("default", this.defaultProperty);
        jsonWriter.writeJsonField("en", this.en);
        jsonWriter.writeJsonField("cs", this.cs);
        jsonWriter.writeJsonField("de", this.de);
        jsonWriter.writeJsonField("es", this.es);
        jsonWriter.writeJsonField("fr", this.fr);
        jsonWriter.writeJsonField("hu", this.hu);
        jsonWriter.writeJsonField("it", this.it);
        jsonWriter.writeJsonField("ja", this.ja);
        jsonWriter.writeJsonField("ko", this.ko);
        jsonWriter.writeJsonField("nl", this.nl);
        jsonWriter.writeJsonField("pl", this.pl);
        jsonWriter.writeJsonField("ptBR", this.ptBR);
        jsonWriter.writeJsonField("ptPT", this.pt);
        jsonWriter.writeJsonField("ru", this.ru);
        jsonWriter.writeJsonField("sv", this.sv);
        jsonWriter.writeJsonField("zhHans", this.zhHans);
        jsonWriter.writeJsonField("zhHant", this.zhHant);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LocalizedOperationDisplayDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LocalizedOperationDisplayDefinition if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LocalizedOperationDisplayDefinition.
     */
    public static LocalizedOperationDisplayDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LocalizedOperationDisplayDefinition deserializedLocalizedOperationDisplayDefinition
                = new LocalizedOperationDisplayDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("default".equals(fieldName)) {
                    deserializedLocalizedOperationDisplayDefinition.defaultProperty
                        = LocalizedOperationDisplayDefinitionDefault.fromJson(reader);
                } else if ("en".equals(fieldName)) {
                    deserializedLocalizedOperationDisplayDefinition.en
                        = LocalizedOperationDisplayDefinitionEn.fromJson(reader);
                } else if ("cs".equals(fieldName)) {
                    deserializedLocalizedOperationDisplayDefinition.cs
                        = LocalizedOperationDisplayDefinitionCs.fromJson(reader);
                } else if ("de".equals(fieldName)) {
                    deserializedLocalizedOperationDisplayDefinition.de
                        = LocalizedOperationDisplayDefinitionDe.fromJson(reader);
                } else if ("es".equals(fieldName)) {
                    deserializedLocalizedOperationDisplayDefinition.es
                        = LocalizedOperationDisplayDefinitionEs.fromJson(reader);
                } else if ("fr".equals(fieldName)) {
                    deserializedLocalizedOperationDisplayDefinition.fr
                        = LocalizedOperationDisplayDefinitionFr.fromJson(reader);
                } else if ("hu".equals(fieldName)) {
                    deserializedLocalizedOperationDisplayDefinition.hu
                        = LocalizedOperationDisplayDefinitionHu.fromJson(reader);
                } else if ("it".equals(fieldName)) {
                    deserializedLocalizedOperationDisplayDefinition.it
                        = LocalizedOperationDisplayDefinitionIt.fromJson(reader);
                } else if ("ja".equals(fieldName)) {
                    deserializedLocalizedOperationDisplayDefinition.ja
                        = LocalizedOperationDisplayDefinitionJa.fromJson(reader);
                } else if ("ko".equals(fieldName)) {
                    deserializedLocalizedOperationDisplayDefinition.ko
                        = LocalizedOperationDisplayDefinitionKo.fromJson(reader);
                } else if ("nl".equals(fieldName)) {
                    deserializedLocalizedOperationDisplayDefinition.nl
                        = LocalizedOperationDisplayDefinitionNl.fromJson(reader);
                } else if ("pl".equals(fieldName)) {
                    deserializedLocalizedOperationDisplayDefinition.pl
                        = LocalizedOperationDisplayDefinitionPl.fromJson(reader);
                } else if ("ptBR".equals(fieldName)) {
                    deserializedLocalizedOperationDisplayDefinition.ptBR
                        = LocalizedOperationDisplayDefinitionPtBR.fromJson(reader);
                } else if ("ptPT".equals(fieldName)) {
                    deserializedLocalizedOperationDisplayDefinition.pt
                        = LocalizedOperationDisplayDefinitionPt.fromJson(reader);
                } else if ("ru".equals(fieldName)) {
                    deserializedLocalizedOperationDisplayDefinition.ru
                        = LocalizedOperationDisplayDefinitionRu.fromJson(reader);
                } else if ("sv".equals(fieldName)) {
                    deserializedLocalizedOperationDisplayDefinition.sv
                        = LocalizedOperationDisplayDefinitionSv.fromJson(reader);
                } else if ("zhHans".equals(fieldName)) {
                    deserializedLocalizedOperationDisplayDefinition.zhHans
                        = LocalizedOperationDisplayDefinitionZhHans.fromJson(reader);
                } else if ("zhHant".equals(fieldName)) {
                    deserializedLocalizedOperationDisplayDefinition.zhHant
                        = LocalizedOperationDisplayDefinitionZhHant.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLocalizedOperationDisplayDefinition;
        });
    }
}
