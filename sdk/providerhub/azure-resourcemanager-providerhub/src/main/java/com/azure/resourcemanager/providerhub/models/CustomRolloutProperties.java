// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of the rollout.
 */
@Fluent
public final class CustomRolloutProperties extends CustomRolloutPropertiesAutoGenerated {
    /**
     * Creates an instance of CustomRolloutProperties class.
     */
    public CustomRolloutProperties() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomRolloutProperties withProvisioningState(ProvisioningState provisioningState) {
        super.withProvisioningState(provisioningState);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomRolloutProperties withSpecification(CustomRolloutPropertiesSpecification specification) {
        super.withSpecification(specification);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomRolloutProperties withStatus(CustomRolloutPropertiesStatus status) {
        super.withStatus(status);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (specification() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property specification in model CustomRolloutProperties"));
        } else {
            specification().validate();
        }
        if (status() != null) {
            status().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CustomRolloutProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("specification", specification());
        jsonWriter.writeStringField("provisioningState",
            provisioningState() == null ? null : provisioningState().toString());
        jsonWriter.writeJsonField("status", status());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomRolloutProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomRolloutProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CustomRolloutProperties.
     */
    public static CustomRolloutProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomRolloutProperties deserializedCustomRolloutProperties = new CustomRolloutProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("specification".equals(fieldName)) {
                    deserializedCustomRolloutProperties
                        .withSpecification(CustomRolloutPropertiesSpecification.fromJson(reader));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedCustomRolloutProperties
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedCustomRolloutProperties.withStatus(CustomRolloutPropertiesStatus.fromJson(reader));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomRolloutProperties;
        });
    }
}
