// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;
import java.util.List;

/**
 * The ResourceTypeEndpointBase model.
 */
@Fluent
public class ResourceTypeEndpointBase implements JsonSerializable<ResourceTypeEndpointBase> {
    /*
     * Whether it's enabled.
     */
    private boolean enabled;

    /*
     * The api versions.
     */
    private List<String> apiVersions;

    /*
     * The endpoint uri.
     */
    private String endpointUri;

    /*
     * The locations.
     */
    private List<String> locations;

    /*
     * The required features.
     */
    private List<String> requiredFeatures;

    /*
     * The features rule.
     */
    private ResourceTypeEndpointBaseFeaturesRule featuresRule;

    /*
     * This is a TimeSpan property.
     */
    private Duration timeout;

    /*
     * The endpoint type.
     */
    private EndpointType endpointType;

    /*
     * The dsts configuration.
     */
    private ResourceTypeEndpointBaseDstsConfiguration dstsConfiguration;

    /*
     * The sku link.
     */
    private String skuLink;

    /*
     * The api version.
     */
    private String apiVersion;

    /*
     * The zones.
     */
    private List<String> zones;

    /**
     * Creates an instance of ResourceTypeEndpointBase class.
     */
    public ResourceTypeEndpointBase() {
    }

    /**
     * Get the enabled property: Whether it's enabled.
     * 
     * @return the enabled value.
     */
    public boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Whether it's enabled.
     * 
     * @param enabled the enabled value to set.
     * @return the ResourceTypeEndpointBase object itself.
     */
    public ResourceTypeEndpointBase withEnabled(boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the apiVersions property: The api versions.
     * 
     * @return the apiVersions value.
     */
    public List<String> apiVersions() {
        return this.apiVersions;
    }

    /**
     * Set the apiVersions property: The api versions.
     * 
     * @param apiVersions the apiVersions value to set.
     * @return the ResourceTypeEndpointBase object itself.
     */
    public ResourceTypeEndpointBase withApiVersions(List<String> apiVersions) {
        this.apiVersions = apiVersions;
        return this;
    }

    /**
     * Get the endpointUri property: The endpoint uri.
     * 
     * @return the endpointUri value.
     */
    public String endpointUri() {
        return this.endpointUri;
    }

    /**
     * Set the endpointUri property: The endpoint uri.
     * 
     * @param endpointUri the endpointUri value to set.
     * @return the ResourceTypeEndpointBase object itself.
     */
    public ResourceTypeEndpointBase withEndpointUri(String endpointUri) {
        this.endpointUri = endpointUri;
        return this;
    }

    /**
     * Get the locations property: The locations.
     * 
     * @return the locations value.
     */
    public List<String> locations() {
        return this.locations;
    }

    /**
     * Set the locations property: The locations.
     * 
     * @param locations the locations value to set.
     * @return the ResourceTypeEndpointBase object itself.
     */
    public ResourceTypeEndpointBase withLocations(List<String> locations) {
        this.locations = locations;
        return this;
    }

    /**
     * Get the requiredFeatures property: The required features.
     * 
     * @return the requiredFeatures value.
     */
    public List<String> requiredFeatures() {
        return this.requiredFeatures;
    }

    /**
     * Set the requiredFeatures property: The required features.
     * 
     * @param requiredFeatures the requiredFeatures value to set.
     * @return the ResourceTypeEndpointBase object itself.
     */
    public ResourceTypeEndpointBase withRequiredFeatures(List<String> requiredFeatures) {
        this.requiredFeatures = requiredFeatures;
        return this;
    }

    /**
     * Get the featuresRule property: The features rule.
     * 
     * @return the featuresRule value.
     */
    public ResourceTypeEndpointBaseFeaturesRule featuresRule() {
        return this.featuresRule;
    }

    /**
     * Set the featuresRule property: The features rule.
     * 
     * @param featuresRule the featuresRule value to set.
     * @return the ResourceTypeEndpointBase object itself.
     */
    public ResourceTypeEndpointBase withFeaturesRule(ResourceTypeEndpointBaseFeaturesRule featuresRule) {
        this.featuresRule = featuresRule;
        return this;
    }

    /**
     * Get the timeout property: This is a TimeSpan property.
     * 
     * @return the timeout value.
     */
    public Duration timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: This is a TimeSpan property.
     * 
     * @param timeout the timeout value to set.
     * @return the ResourceTypeEndpointBase object itself.
     */
    public ResourceTypeEndpointBase withTimeout(Duration timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Get the endpointType property: The endpoint type.
     * 
     * @return the endpointType value.
     */
    public EndpointType endpointType() {
        return this.endpointType;
    }

    /**
     * Set the endpointType property: The endpoint type.
     * 
     * @param endpointType the endpointType value to set.
     * @return the ResourceTypeEndpointBase object itself.
     */
    public ResourceTypeEndpointBase withEndpointType(EndpointType endpointType) {
        this.endpointType = endpointType;
        return this;
    }

    /**
     * Get the dstsConfiguration property: The dsts configuration.
     * 
     * @return the dstsConfiguration value.
     */
    public ResourceTypeEndpointBaseDstsConfiguration dstsConfiguration() {
        return this.dstsConfiguration;
    }

    /**
     * Set the dstsConfiguration property: The dsts configuration.
     * 
     * @param dstsConfiguration the dstsConfiguration value to set.
     * @return the ResourceTypeEndpointBase object itself.
     */
    public ResourceTypeEndpointBase withDstsConfiguration(ResourceTypeEndpointBaseDstsConfiguration dstsConfiguration) {
        this.dstsConfiguration = dstsConfiguration;
        return this;
    }

    /**
     * Get the skuLink property: The sku link.
     * 
     * @return the skuLink value.
     */
    public String skuLink() {
        return this.skuLink;
    }

    /**
     * Set the skuLink property: The sku link.
     * 
     * @param skuLink the skuLink value to set.
     * @return the ResourceTypeEndpointBase object itself.
     */
    public ResourceTypeEndpointBase withSkuLink(String skuLink) {
        this.skuLink = skuLink;
        return this;
    }

    /**
     * Get the apiVersion property: The api version.
     * 
     * @return the apiVersion value.
     */
    public String apiVersion() {
        return this.apiVersion;
    }

    /**
     * Set the apiVersion property: The api version.
     * 
     * @param apiVersion the apiVersion value to set.
     * @return the ResourceTypeEndpointBase object itself.
     */
    public ResourceTypeEndpointBase withApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    /**
     * Get the zones property: The zones.
     * 
     * @return the zones value.
     */
    public List<String> zones() {
        return this.zones;
    }

    /**
     * Set the zones property: The zones.
     * 
     * @param zones the zones value to set.
     * @return the ResourceTypeEndpointBase object itself.
     */
    public ResourceTypeEndpointBase withZones(List<String> zones) {
        this.zones = zones;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (apiVersions() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property apiVersions in model ResourceTypeEndpointBase"));
        }
        if (endpointUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property endpointUri in model ResourceTypeEndpointBase"));
        }
        if (locations() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property locations in model ResourceTypeEndpointBase"));
        }
        if (requiredFeatures() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property requiredFeatures in model ResourceTypeEndpointBase"));
        }
        if (featuresRule() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property featuresRule in model ResourceTypeEndpointBase"));
        } else {
            featuresRule().validate();
        }
        if (timeout() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property timeout in model ResourceTypeEndpointBase"));
        }
        if (endpointType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property endpointType in model ResourceTypeEndpointBase"));
        }
        if (dstsConfiguration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dstsConfiguration in model ResourceTypeEndpointBase"));
        } else {
            dstsConfiguration().validate();
        }
        if (skuLink() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property skuLink in model ResourceTypeEndpointBase"));
        }
        if (apiVersion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property apiVersion in model ResourceTypeEndpointBase"));
        }
        if (zones() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property zones in model ResourceTypeEndpointBase"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResourceTypeEndpointBase.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeArrayField("apiVersions", this.apiVersions, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("endpointUri", this.endpointUri);
        jsonWriter.writeArrayField("locations", this.locations, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("requiredFeatures", this.requiredFeatures,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("featuresRule", this.featuresRule);
        jsonWriter.writeStringField("timeout", CoreUtils.durationToStringWithDays(this.timeout));
        jsonWriter.writeStringField("endpointType", this.endpointType == null ? null : this.endpointType.toString());
        jsonWriter.writeJsonField("dstsConfiguration", this.dstsConfiguration);
        jsonWriter.writeStringField("skuLink", this.skuLink);
        jsonWriter.writeStringField("apiVersion", this.apiVersion);
        jsonWriter.writeArrayField("zones", this.zones, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceTypeEndpointBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceTypeEndpointBase if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceTypeEndpointBase.
     */
    public static ResourceTypeEndpointBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceTypeEndpointBase deserializedResourceTypeEndpointBase = new ResourceTypeEndpointBase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedResourceTypeEndpointBase.enabled = reader.getBoolean();
                } else if ("apiVersions".equals(fieldName)) {
                    List<String> apiVersions = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceTypeEndpointBase.apiVersions = apiVersions;
                } else if ("endpointUri".equals(fieldName)) {
                    deserializedResourceTypeEndpointBase.endpointUri = reader.getString();
                } else if ("locations".equals(fieldName)) {
                    List<String> locations = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceTypeEndpointBase.locations = locations;
                } else if ("requiredFeatures".equals(fieldName)) {
                    List<String> requiredFeatures = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceTypeEndpointBase.requiredFeatures = requiredFeatures;
                } else if ("featuresRule".equals(fieldName)) {
                    deserializedResourceTypeEndpointBase.featuresRule
                        = ResourceTypeEndpointBaseFeaturesRule.fromJson(reader);
                } else if ("timeout".equals(fieldName)) {
                    deserializedResourceTypeEndpointBase.timeout
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("endpointType".equals(fieldName)) {
                    deserializedResourceTypeEndpointBase.endpointType = EndpointType.fromString(reader.getString());
                } else if ("dstsConfiguration".equals(fieldName)) {
                    deserializedResourceTypeEndpointBase.dstsConfiguration
                        = ResourceTypeEndpointBaseDstsConfiguration.fromJson(reader);
                } else if ("skuLink".equals(fieldName)) {
                    deserializedResourceTypeEndpointBase.skuLink = reader.getString();
                } else if ("apiVersion".equals(fieldName)) {
                    deserializedResourceTypeEndpointBase.apiVersion = reader.getString();
                } else if ("zones".equals(fieldName)) {
                    List<String> zones = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceTypeEndpointBase.zones = zones;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceTypeEndpointBase;
        });
    }
}
