// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The manifest level fields to override.
 */
@Fluent
public final class FrontloadPayloadPropertiesOverrideManifestLevelFields extends ManifestLevelPropertyBag {
    /**
     * Creates an instance of FrontloadPayloadPropertiesOverrideManifestLevelFields class.
     */
    public FrontloadPayloadPropertiesOverrideManifestLevelFields() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FrontloadPayloadPropertiesOverrideManifestLevelFields
        withResourceHydrationAccounts(List<ResourceHydrationAccount> resourceHydrationAccounts) {
        super.withResourceHydrationAccounts(resourceHydrationAccounts);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (resourceHydrationAccounts() != null) {
            resourceHydrationAccounts().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("resourceHydrationAccounts", resourceHydrationAccounts(),
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FrontloadPayloadPropertiesOverrideManifestLevelFields from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FrontloadPayloadPropertiesOverrideManifestLevelFields if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FrontloadPayloadPropertiesOverrideManifestLevelFields.
     */
    public static FrontloadPayloadPropertiesOverrideManifestLevelFields fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            FrontloadPayloadPropertiesOverrideManifestLevelFields deserializedFrontloadPayloadPropertiesOverrideManifestLevelFields
                = new FrontloadPayloadPropertiesOverrideManifestLevelFields();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceHydrationAccounts".equals(fieldName)) {
                    List<ResourceHydrationAccount> resourceHydrationAccounts
                        = reader.readArray(reader1 -> ResourceHydrationAccount.fromJson(reader1));
                    deserializedFrontloadPayloadPropertiesOverrideManifestLevelFields
                        .withResourceHydrationAccounts(resourceHydrationAccounts);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFrontloadPayloadPropertiesOverrideManifestLevelFields;
        });
    }
}
