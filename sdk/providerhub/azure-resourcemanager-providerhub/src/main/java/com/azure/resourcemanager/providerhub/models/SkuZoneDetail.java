// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The SkuZoneDetail model.
 */
@Fluent
public final class SkuZoneDetail implements JsonSerializable<SkuZoneDetail> {
    /*
     * The name property.
     */
    private List<String> name;

    /*
     * The capabilities property.
     */
    private List<SkuCapability> capabilities;

    /**
     * Creates an instance of SkuZoneDetail class.
     */
    public SkuZoneDetail() {
    }

    /**
     * Get the name property: The name property.
     * 
     * @return the name value.
     */
    public List<String> name() {
        return this.name;
    }

    /**
     * Set the name property: The name property.
     * 
     * @param name the name value to set.
     * @return the SkuZoneDetail object itself.
     */
    public SkuZoneDetail withName(List<String> name) {
        this.name = name;
        return this;
    }

    /**
     * Get the capabilities property: The capabilities property.
     * 
     * @return the capabilities value.
     */
    public List<SkuCapability> capabilities() {
        return this.capabilities;
    }

    /**
     * Set the capabilities property: The capabilities property.
     * 
     * @param capabilities the capabilities value to set.
     * @return the SkuZoneDetail object itself.
     */
    public SkuZoneDetail withCapabilities(List<SkuCapability> capabilities) {
        this.capabilities = capabilities;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (capabilities() != null) {
            capabilities().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("name", this.name, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("capabilities", this.capabilities, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SkuZoneDetail from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SkuZoneDetail if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SkuZoneDetail.
     */
    public static SkuZoneDetail fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SkuZoneDetail deserializedSkuZoneDetail = new SkuZoneDetail();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    List<String> name = reader.readArray(reader1 -> reader1.getString());
                    deserializedSkuZoneDetail.name = name;
                } else if ("capabilities".equals(fieldName)) {
                    List<SkuCapability> capabilities = reader.readArray(reader1 -> SkuCapability.fromJson(reader1));
                    deserializedSkuZoneDetail.capabilities = capabilities;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSkuZoneDetail;
        });
    }
}
