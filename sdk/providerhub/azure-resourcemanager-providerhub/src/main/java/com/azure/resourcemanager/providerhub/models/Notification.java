// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Notification model.
 */
@Fluent
public final class Notification implements JsonSerializable<Notification> {
    /*
     * The notification type.
     */
    private NotificationType notificationType;

    /*
     * Whether notifications should be skipped.
     */
    private SkipNotifications skipNotifications;

    /**
     * Creates an instance of Notification class.
     */
    public Notification() {
    }

    /**
     * Get the notificationType property: The notification type.
     * 
     * @return the notificationType value.
     */
    public NotificationType notificationType() {
        return this.notificationType;
    }

    /**
     * Set the notificationType property: The notification type.
     * 
     * @param notificationType the notificationType value to set.
     * @return the Notification object itself.
     */
    public Notification withNotificationType(NotificationType notificationType) {
        this.notificationType = notificationType;
        return this;
    }

    /**
     * Get the skipNotifications property: Whether notifications should be skipped.
     * 
     * @return the skipNotifications value.
     */
    public SkipNotifications skipNotifications() {
        return this.skipNotifications;
    }

    /**
     * Set the skipNotifications property: Whether notifications should be skipped.
     * 
     * @param skipNotifications the skipNotifications value to set.
     * @return the Notification object itself.
     */
    public Notification withSkipNotifications(SkipNotifications skipNotifications) {
        this.skipNotifications = skipNotifications;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("notificationType",
            this.notificationType == null ? null : this.notificationType.toString());
        jsonWriter.writeStringField("skipNotifications",
            this.skipNotifications == null ? null : this.skipNotifications.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Notification from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Notification if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the Notification.
     */
    public static Notification fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Notification deserializedNotification = new Notification();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("notificationType".equals(fieldName)) {
                    deserializedNotification.notificationType = NotificationType.fromString(reader.getString());
                } else if ("skipNotifications".equals(fieldName)) {
                    deserializedNotification.skipNotifications = SkipNotifications.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNotification;
        });
    }
}
