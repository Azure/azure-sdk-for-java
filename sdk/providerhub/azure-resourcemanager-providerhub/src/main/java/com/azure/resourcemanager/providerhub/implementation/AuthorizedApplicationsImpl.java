// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.providerhub.fluent.AuthorizedApplicationsClient;
import com.azure.resourcemanager.providerhub.fluent.models.AuthorizedApplicationInner;
import com.azure.resourcemanager.providerhub.models.AuthorizedApplication;
import com.azure.resourcemanager.providerhub.models.AuthorizedApplications;
import java.util.UUID;

public final class AuthorizedApplicationsImpl implements AuthorizedApplications {
    private static final ClientLogger LOGGER = new ClientLogger(AuthorizedApplicationsImpl.class);

    private final AuthorizedApplicationsClient innerClient;

    private final com.azure.resourcemanager.providerhub.ProviderHubManager serviceManager;

    public AuthorizedApplicationsImpl(AuthorizedApplicationsClient innerClient,
        com.azure.resourcemanager.providerhub.ProviderHubManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<AuthorizedApplication> getWithResponse(String providerNamespace, UUID applicationId,
        Context context) {
        Response<AuthorizedApplicationInner> inner
            = this.serviceClient().getWithResponse(providerNamespace, applicationId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AuthorizedApplicationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AuthorizedApplication get(String providerNamespace, UUID applicationId) {
        AuthorizedApplicationInner inner = this.serviceClient().get(providerNamespace, applicationId);
        if (inner != null) {
            return new AuthorizedApplicationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String providerNamespace, UUID applicationId, Context context) {
        return this.serviceClient().deleteWithResponse(providerNamespace, applicationId, context);
    }

    public void delete(String providerNamespace, UUID applicationId) {
        this.serviceClient().delete(providerNamespace, applicationId);
    }

    public PagedIterable<AuthorizedApplication> list(String providerNamespace) {
        PagedIterable<AuthorizedApplicationInner> inner = this.serviceClient().list(providerNamespace);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AuthorizedApplicationImpl(inner1, this.manager()));
    }

    public PagedIterable<AuthorizedApplication> list(String providerNamespace, Context context) {
        PagedIterable<AuthorizedApplicationInner> inner = this.serviceClient().list(providerNamespace, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AuthorizedApplicationImpl(inner1, this.manager()));
    }

    public AuthorizedApplication getById(String id) {
        String providerNamespace = ResourceManagerUtils.getValueFromIdByName(id, "providerRegistrations");
        if (providerNamespace == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'providerRegistrations'.", id)));
        }
        String applicationIdLocal = ResourceManagerUtils.getValueFromIdByName(id, "authorizedApplications");
        if (applicationIdLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'authorizedApplications'.", id)));
        }
        UUID applicationId = UUID.fromString(applicationIdLocal);
        return this.getWithResponse(providerNamespace, applicationId, Context.NONE).getValue();
    }

    public Response<AuthorizedApplication> getByIdWithResponse(String id, Context context) {
        String providerNamespace = ResourceManagerUtils.getValueFromIdByName(id, "providerRegistrations");
        if (providerNamespace == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'providerRegistrations'.", id)));
        }
        String applicationIdLocal = ResourceManagerUtils.getValueFromIdByName(id, "authorizedApplications");
        if (applicationIdLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'authorizedApplications'.", id)));
        }
        UUID applicationId = UUID.fromString(applicationIdLocal);
        return this.getWithResponse(providerNamespace, applicationId, context);
    }

    public void deleteById(String id) {
        String providerNamespace = ResourceManagerUtils.getValueFromIdByName(id, "providerRegistrations");
        if (providerNamespace == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'providerRegistrations'.", id)));
        }
        String applicationIdLocal = ResourceManagerUtils.getValueFromIdByName(id, "authorizedApplications");
        if (applicationIdLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'authorizedApplications'.", id)));
        }
        UUID applicationId = UUID.fromString(applicationIdLocal);
        this.deleteWithResponse(providerNamespace, applicationId, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String providerNamespace = ResourceManagerUtils.getValueFromIdByName(id, "providerRegistrations");
        if (providerNamespace == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'providerRegistrations'.", id)));
        }
        String applicationIdLocal = ResourceManagerUtils.getValueFromIdByName(id, "authorizedApplications");
        if (applicationIdLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'authorizedApplications'.", id)));
        }
        UUID applicationId = UUID.fromString(applicationIdLocal);
        return this.deleteWithResponse(providerNamespace, applicationId, context);
    }

    private AuthorizedApplicationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.providerhub.ProviderHubManager manager() {
        return this.serviceManager;
    }

    public AuthorizedApplicationImpl define(UUID name) {
        return new AuthorizedApplicationImpl(name, this.manager());
    }
}
