// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Nested provisioning support.
 */
@Fluent
public final class ResourceTypeRegistrationPropertiesResourceManagementOptionsNestedProvisioningSupport
    implements JsonSerializable<ResourceTypeRegistrationPropertiesResourceManagementOptionsNestedProvisioningSupport> {
    /*
     * Minimum API version.
     */
    private String minimumApiVersion;

    /**
     * Creates an instance of ResourceTypeRegistrationPropertiesResourceManagementOptionsNestedProvisioningSupport
     * class.
     */
    public ResourceTypeRegistrationPropertiesResourceManagementOptionsNestedProvisioningSupport() {
    }

    /**
     * Get the minimumApiVersion property: Minimum API version.
     * 
     * @return the minimumApiVersion value.
     */
    public String minimumApiVersion() {
        return this.minimumApiVersion;
    }

    /**
     * Set the minimumApiVersion property: Minimum API version.
     * 
     * @param minimumApiVersion the minimumApiVersion value to set.
     * @return the ResourceTypeRegistrationPropertiesResourceManagementOptionsNestedProvisioningSupport object itself.
     */
    public ResourceTypeRegistrationPropertiesResourceManagementOptionsNestedProvisioningSupport
        withMinimumApiVersion(String minimumApiVersion) {
        this.minimumApiVersion = minimumApiVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("minimumApiVersion", this.minimumApiVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceTypeRegistrationPropertiesResourceManagementOptionsNestedProvisioningSupport from
     * the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceTypeRegistrationPropertiesResourceManagementOptionsNestedProvisioningSupport if
     * the JsonReader was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * ResourceTypeRegistrationPropertiesResourceManagementOptionsNestedProvisioningSupport.
     */
    public static ResourceTypeRegistrationPropertiesResourceManagementOptionsNestedProvisioningSupport
        fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceTypeRegistrationPropertiesResourceManagementOptionsNestedProvisioningSupport deserializedResourceTypeRegistrationPropertiesResourceManagementOptionsNestedProvisioningSupport
                = new ResourceTypeRegistrationPropertiesResourceManagementOptionsNestedProvisioningSupport();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("minimumApiVersion".equals(fieldName)) {
                    deserializedResourceTypeRegistrationPropertiesResourceManagementOptionsNestedProvisioningSupport.minimumApiVersion
                        = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceTypeRegistrationPropertiesResourceManagementOptionsNestedProvisioningSupport;
        });
    }
}
