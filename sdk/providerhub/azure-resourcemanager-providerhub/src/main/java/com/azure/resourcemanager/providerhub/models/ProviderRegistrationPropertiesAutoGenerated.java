// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ProviderRegistrationPropertiesAutoGenerated model.
 */
@Fluent
public class ProviderRegistrationPropertiesAutoGenerated extends ResourceProviderManifestProperties {
    /*
     * The providerHubMetadata property.
     */
    private ProviderRegistrationPropertiesProviderHubMetadata providerHubMetadata;

    /*
     * The provisioningState property.
     */
    private ProvisioningState provisioningState;

    /*
     * The subscriptionLifecycleNotificationSpecifications property.
     */
    private ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications subscriptionLifecycleNotificationSpecifications;

    /**
     * Creates an instance of ProviderRegistrationPropertiesAutoGenerated class.
     */
    public ProviderRegistrationPropertiesAutoGenerated() {
    }

    /**
     * Get the providerHubMetadata property: The providerHubMetadata property.
     * 
     * @return the providerHubMetadata value.
     */
    public ProviderRegistrationPropertiesProviderHubMetadata providerHubMetadata() {
        return this.providerHubMetadata;
    }

    /**
     * Set the providerHubMetadata property: The providerHubMetadata property.
     * 
     * @param providerHubMetadata the providerHubMetadata value to set.
     * @return the ProviderRegistrationPropertiesAutoGenerated object itself.
     */
    public ProviderRegistrationPropertiesAutoGenerated
        withProviderHubMetadata(ProviderRegistrationPropertiesProviderHubMetadata providerHubMetadata) {
        this.providerHubMetadata = providerHubMetadata;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioningState property.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The provisioningState property.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the ProviderRegistrationPropertiesAutoGenerated object itself.
     */
    public ProviderRegistrationPropertiesAutoGenerated withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the subscriptionLifecycleNotificationSpecifications property: The
     * subscriptionLifecycleNotificationSpecifications property.
     * 
     * @return the subscriptionLifecycleNotificationSpecifications value.
     */
    public ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications
        subscriptionLifecycleNotificationSpecifications() {
        return this.subscriptionLifecycleNotificationSpecifications;
    }

    /**
     * Set the subscriptionLifecycleNotificationSpecifications property: The
     * subscriptionLifecycleNotificationSpecifications property.
     * 
     * @param subscriptionLifecycleNotificationSpecifications the subscriptionLifecycleNotificationSpecifications value
     * to set.
     * @return the ProviderRegistrationPropertiesAutoGenerated object itself.
     */
    public ProviderRegistrationPropertiesAutoGenerated withSubscriptionLifecycleNotificationSpecifications(
        ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications subscriptionLifecycleNotificationSpecifications) {
        this.subscriptionLifecycleNotificationSpecifications = subscriptionLifecycleNotificationSpecifications;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationPropertiesAutoGenerated
        withProviderAuthentication(ResourceProviderManifestPropertiesProviderAuthentication providerAuthentication) {
        super.withProviderAuthentication(providerAuthentication);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationPropertiesAutoGenerated
        withProviderAuthorizations(List<ResourceProviderAuthorization> providerAuthorizations) {
        super.withProviderAuthorizations(providerAuthorizations);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationPropertiesAutoGenerated withNamespace(String namespace) {
        super.withNamespace(namespace);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationPropertiesAutoGenerated withProviderVersion(String providerVersion) {
        super.withProviderVersion(providerVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationPropertiesAutoGenerated withProviderType(ResourceProviderType providerType) {
        super.withProviderType(providerType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationPropertiesAutoGenerated withRequiredFeatures(List<String> requiredFeatures) {
        super.withRequiredFeatures(requiredFeatures);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationPropertiesAutoGenerated
        withFeaturesRule(ResourceProviderManifestPropertiesFeaturesRule featuresRule) {
        super.withFeaturesRule(featuresRule);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationPropertiesAutoGenerated
        withRequestHeaderOptions(ResourceProviderManifestPropertiesRequestHeaderOptions requestHeaderOptions) {
        super.withRequestHeaderOptions(requestHeaderOptions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationPropertiesAutoGenerated
        withManagement(ResourceProviderManifestPropertiesManagement management) {
        super.withManagement(management);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationPropertiesAutoGenerated
        withCapabilities(List<ResourceProviderCapabilities> capabilities) {
        super.withCapabilities(capabilities);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationPropertiesAutoGenerated withMetadata(Object metadata) {
        super.withMetadata(metadata);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProviderRegistrationPropertiesAutoGenerated withTemplateDeploymentOptions(
        ResourceProviderManifestPropertiesTemplateDeploymentOptions templateDeploymentOptions) {
        super.withTemplateDeploymentOptions(templateDeploymentOptions);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (providerHubMetadata() != null) {
            providerHubMetadata().validate();
        }
        if (subscriptionLifecycleNotificationSpecifications() != null) {
            subscriptionLifecycleNotificationSpecifications().validate();
        }
        if (providerAuthentication() != null) {
            providerAuthentication().validate();
        }
        if (providerAuthorizations() != null) {
            providerAuthorizations().forEach(e -> e.validate());
        }
        if (featuresRule() != null) {
            featuresRule().validate();
        }
        if (requestHeaderOptions() != null) {
            requestHeaderOptions().validate();
        }
        if (management() != null) {
            management().validate();
        }
        if (capabilities() != null) {
            capabilities().forEach(e -> e.validate());
        }
        if (templateDeploymentOptions() != null) {
            templateDeploymentOptions().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("providerAuthentication", providerAuthentication());
        jsonWriter.writeArrayField("providerAuthorizations", providerAuthorizations(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("namespace", namespace());
        jsonWriter.writeStringField("providerVersion", providerVersion());
        jsonWriter.writeStringField("providerType", providerType() == null ? null : providerType().toString());
        jsonWriter.writeArrayField("requiredFeatures", requiredFeatures(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("featuresRule", featuresRule());
        jsonWriter.writeJsonField("requestHeaderOptions", requestHeaderOptions());
        jsonWriter.writeJsonField("management", management());
        jsonWriter.writeArrayField("capabilities", capabilities(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeUntypedField("metadata", metadata());
        jsonWriter.writeJsonField("templateDeploymentOptions", templateDeploymentOptions());
        jsonWriter.writeJsonField("providerHubMetadata", this.providerHubMetadata);
        jsonWriter.writeStringField("provisioningState",
            this.provisioningState == null ? null : this.provisioningState.toString());
        jsonWriter.writeJsonField("subscriptionLifecycleNotificationSpecifications",
            this.subscriptionLifecycleNotificationSpecifications);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProviderRegistrationPropertiesAutoGenerated from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProviderRegistrationPropertiesAutoGenerated if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProviderRegistrationPropertiesAutoGenerated.
     */
    public static ProviderRegistrationPropertiesAutoGenerated fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProviderRegistrationPropertiesAutoGenerated deserializedProviderRegistrationPropertiesAutoGenerated
                = new ProviderRegistrationPropertiesAutoGenerated();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("providerAuthentication".equals(fieldName)) {
                    deserializedProviderRegistrationPropertiesAutoGenerated.withProviderAuthentication(
                        ResourceProviderManifestPropertiesProviderAuthentication.fromJson(reader));
                } else if ("providerAuthorizations".equals(fieldName)) {
                    List<ResourceProviderAuthorization> providerAuthorizations
                        = reader.readArray(reader1 -> ResourceProviderAuthorization.fromJson(reader1));
                    deserializedProviderRegistrationPropertiesAutoGenerated
                        .withProviderAuthorizations(providerAuthorizations);
                } else if ("namespace".equals(fieldName)) {
                    deserializedProviderRegistrationPropertiesAutoGenerated.withNamespace(reader.getString());
                } else if ("providerVersion".equals(fieldName)) {
                    deserializedProviderRegistrationPropertiesAutoGenerated.withProviderVersion(reader.getString());
                } else if ("providerType".equals(fieldName)) {
                    deserializedProviderRegistrationPropertiesAutoGenerated
                        .withProviderType(ResourceProviderType.fromString(reader.getString()));
                } else if ("requiredFeatures".equals(fieldName)) {
                    List<String> requiredFeatures = reader.readArray(reader1 -> reader1.getString());
                    deserializedProviderRegistrationPropertiesAutoGenerated.withRequiredFeatures(requiredFeatures);
                } else if ("featuresRule".equals(fieldName)) {
                    deserializedProviderRegistrationPropertiesAutoGenerated
                        .withFeaturesRule(ResourceProviderManifestPropertiesFeaturesRule.fromJson(reader));
                } else if ("requestHeaderOptions".equals(fieldName)) {
                    deserializedProviderRegistrationPropertiesAutoGenerated.withRequestHeaderOptions(
                        ResourceProviderManifestPropertiesRequestHeaderOptions.fromJson(reader));
                } else if ("management".equals(fieldName)) {
                    deserializedProviderRegistrationPropertiesAutoGenerated
                        .withManagement(ResourceProviderManifestPropertiesManagement.fromJson(reader));
                } else if ("capabilities".equals(fieldName)) {
                    List<ResourceProviderCapabilities> capabilities
                        = reader.readArray(reader1 -> ResourceProviderCapabilities.fromJson(reader1));
                    deserializedProviderRegistrationPropertiesAutoGenerated.withCapabilities(capabilities);
                } else if ("metadata".equals(fieldName)) {
                    deserializedProviderRegistrationPropertiesAutoGenerated.withMetadata(reader.readUntyped());
                } else if ("templateDeploymentOptions".equals(fieldName)) {
                    deserializedProviderRegistrationPropertiesAutoGenerated.withTemplateDeploymentOptions(
                        ResourceProviderManifestPropertiesTemplateDeploymentOptions.fromJson(reader));
                } else if ("providerHubMetadata".equals(fieldName)) {
                    deserializedProviderRegistrationPropertiesAutoGenerated.providerHubMetadata
                        = ProviderRegistrationPropertiesProviderHubMetadata.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedProviderRegistrationPropertiesAutoGenerated.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("subscriptionLifecycleNotificationSpecifications".equals(fieldName)) {
                    deserializedProviderRegistrationPropertiesAutoGenerated.subscriptionLifecycleNotificationSpecifications
                        = ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications
                            .fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProviderRegistrationPropertiesAutoGenerated;
        });
    }
}
