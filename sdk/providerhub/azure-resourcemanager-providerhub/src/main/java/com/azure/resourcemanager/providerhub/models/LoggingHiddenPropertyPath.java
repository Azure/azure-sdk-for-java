// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The LoggingHiddenPropertyPath model.
 */
@Fluent
public class LoggingHiddenPropertyPath implements JsonSerializable<LoggingHiddenPropertyPath> {
    /*
     * The hiddenPathsOnRequest property.
     */
    private List<String> hiddenPathsOnRequest;

    /*
     * The hiddenPathsOnResponse property.
     */
    private List<String> hiddenPathsOnResponse;

    /**
     * Creates an instance of LoggingHiddenPropertyPath class.
     */
    public LoggingHiddenPropertyPath() {
    }

    /**
     * Get the hiddenPathsOnRequest property: The hiddenPathsOnRequest property.
     * 
     * @return the hiddenPathsOnRequest value.
     */
    public List<String> hiddenPathsOnRequest() {
        return this.hiddenPathsOnRequest;
    }

    /**
     * Set the hiddenPathsOnRequest property: The hiddenPathsOnRequest property.
     * 
     * @param hiddenPathsOnRequest the hiddenPathsOnRequest value to set.
     * @return the LoggingHiddenPropertyPath object itself.
     */
    public LoggingHiddenPropertyPath withHiddenPathsOnRequest(List<String> hiddenPathsOnRequest) {
        this.hiddenPathsOnRequest = hiddenPathsOnRequest;
        return this;
    }

    /**
     * Get the hiddenPathsOnResponse property: The hiddenPathsOnResponse property.
     * 
     * @return the hiddenPathsOnResponse value.
     */
    public List<String> hiddenPathsOnResponse() {
        return this.hiddenPathsOnResponse;
    }

    /**
     * Set the hiddenPathsOnResponse property: The hiddenPathsOnResponse property.
     * 
     * @param hiddenPathsOnResponse the hiddenPathsOnResponse value to set.
     * @return the LoggingHiddenPropertyPath object itself.
     */
    public LoggingHiddenPropertyPath withHiddenPathsOnResponse(List<String> hiddenPathsOnResponse) {
        this.hiddenPathsOnResponse = hiddenPathsOnResponse;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("hiddenPathsOnRequest", this.hiddenPathsOnRequest,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("hiddenPathsOnResponse", this.hiddenPathsOnResponse,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoggingHiddenPropertyPath from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoggingHiddenPropertyPath if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LoggingHiddenPropertyPath.
     */
    public static LoggingHiddenPropertyPath fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoggingHiddenPropertyPath deserializedLoggingHiddenPropertyPath = new LoggingHiddenPropertyPath();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hiddenPathsOnRequest".equals(fieldName)) {
                    List<String> hiddenPathsOnRequest = reader.readArray(reader1 -> reader1.getString());
                    deserializedLoggingHiddenPropertyPath.hiddenPathsOnRequest = hiddenPathsOnRequest;
                } else if ("hiddenPathsOnResponse".equals(fieldName)) {
                    List<String> hiddenPathsOnResponse = reader.readArray(reader1 -> reader1.getString());
                    deserializedLoggingHiddenPropertyPath.hiddenPathsOnResponse = hiddenPathsOnResponse;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoggingHiddenPropertyPath;
        });
    }
}
