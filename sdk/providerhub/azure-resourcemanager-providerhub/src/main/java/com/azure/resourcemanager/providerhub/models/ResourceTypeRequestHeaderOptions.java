// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ResourceTypeRequestHeaderOptions model.
 */
@Fluent
public final class ResourceTypeRequestHeaderOptions extends RequestHeaderOptions {
    /**
     * Creates an instance of ResourceTypeRequestHeaderOptions class.
     */
    public ResourceTypeRequestHeaderOptions() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRequestHeaderOptions withOptInHeaders(OptInHeaderType optInHeaders) {
        super.withOptInHeaders(optInHeaders);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("optInHeaders", optInHeaders() == null ? null : optInHeaders().toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceTypeRequestHeaderOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceTypeRequestHeaderOptions if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceTypeRequestHeaderOptions.
     */
    public static ResourceTypeRequestHeaderOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceTypeRequestHeaderOptions deserializedResourceTypeRequestHeaderOptions
                = new ResourceTypeRequestHeaderOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("optInHeaders".equals(fieldName)) {
                    deserializedResourceTypeRequestHeaderOptions
                        .withOptInHeaders(OptInHeaderType.fromString(reader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceTypeRequestHeaderOptions;
        });
    }
}
