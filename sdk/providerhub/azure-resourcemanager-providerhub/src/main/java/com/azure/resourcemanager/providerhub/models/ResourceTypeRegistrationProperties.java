// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ResourceTypeRegistrationProperties model.
 */
@Fluent
public final class ResourceTypeRegistrationProperties extends ResourceTypeRegistrationPropertiesAutoGenerated {
    /**
     * Creates an instance of ResourceTypeRegistrationProperties class.
     */
    public ResourceTypeRegistrationProperties() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties withRoutingType(RoutingType routingType) {
        super.withRoutingType(routingType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties withRegionality(Regionality regionality) {
        super.withRegionality(regionality);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties withEndpoints(List<ResourceTypeEndpoint> endpoints) {
        super.withEndpoints(endpoints);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties
        withExtensionOptions(ResourceTypeRegistrationPropertiesExtensionOptions extensionOptions) {
        super.withExtensionOptions(extensionOptions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties withMarketplaceType(MarketplaceType marketplaceType) {
        super.withMarketplaceType(marketplaceType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties
        withSwaggerSpecifications(List<SwaggerSpecification> swaggerSpecifications) {
        super.withSwaggerSpecifications(swaggerSpecifications);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties withAllowedUnauthorizedActions(List<String> allowedUnauthorizedActions) {
        super.withAllowedUnauthorizedActions(allowedUnauthorizedActions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties
        withAuthorizationActionMappings(List<AuthorizationActionMapping> authorizationActionMappings) {
        super.withAuthorizationActionMappings(authorizationActionMappings);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties withLinkedAccessChecks(List<LinkedAccessCheck> linkedAccessChecks) {
        super.withLinkedAccessChecks(linkedAccessChecks);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties withDefaultApiVersion(String defaultApiVersion) {
        super.withDefaultApiVersion(defaultApiVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties withLoggingRules(List<LoggingRule> loggingRules) {
        super.withLoggingRules(loggingRules);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties withThrottlingRules(List<ThrottlingRule> throttlingRules) {
        super.withThrottlingRules(throttlingRules);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties withRequiredFeatures(List<String> requiredFeatures) {
        super.withRequiredFeatures(requiredFeatures);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties
        withFeaturesRule(ResourceTypeRegistrationPropertiesFeaturesRule featuresRule) {
        super.withFeaturesRule(featuresRule);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties withEnableAsyncOperation(Boolean enableAsyncOperation) {
        super.withEnableAsyncOperation(enableAsyncOperation);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties withProvisioningState(ProvisioningState provisioningState) {
        super.withProvisioningState(provisioningState);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties withEnableThirdPartyS2S(Boolean enableThirdPartyS2S) {
        super.withEnableThirdPartyS2S(enableThirdPartyS2S);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties withSubscriptionLifecycleNotificationSpecifications(
        ResourceTypeRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications subscriptionLifecycleNotificationSpecifications) {
        super.withSubscriptionLifecycleNotificationSpecifications(subscriptionLifecycleNotificationSpecifications);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties withIsPureProxy(Boolean isPureProxy) {
        super.withIsPureProxy(isPureProxy);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties
        withIdentityManagement(ResourceTypeRegistrationPropertiesIdentityManagement identityManagement) {
        super.withIdentityManagement(identityManagement);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties withCheckNameAvailabilitySpecifications(
        ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications checkNameAvailabilitySpecifications) {
        super.withCheckNameAvailabilitySpecifications(checkNameAvailabilitySpecifications);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties withDisallowedActionVerbs(List<String> disallowedActionVerbs) {
        super.withDisallowedActionVerbs(disallowedActionVerbs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties withServiceTreeInfos(List<ServiceTreeInfo> serviceTreeInfos) {
        super.withServiceTreeInfos(serviceTreeInfos);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties
        withRequestHeaderOptions(ResourceTypeRegistrationPropertiesRequestHeaderOptions requestHeaderOptions) {
        super.withRequestHeaderOptions(requestHeaderOptions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties
        withSubscriptionStateRules(List<SubscriptionStateRule> subscriptionStateRules) {
        super.withSubscriptionStateRules(subscriptionStateRules);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties withTemplateDeploymentOptions(
        ResourceTypeRegistrationPropertiesTemplateDeploymentOptions templateDeploymentOptions) {
        super.withTemplateDeploymentOptions(templateDeploymentOptions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties withExtendedLocations(List<ExtendedLocationOptions> extendedLocations) {
        super.withExtendedLocations(extendedLocations);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties
        withResourceMovePolicy(ResourceTypeRegistrationPropertiesResourceMovePolicy resourceMovePolicy) {
        super.withResourceMovePolicy(resourceMovePolicy);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationProperties
        withResourceDeletionPolicy(ResourceDeletionPolicy resourceDeletionPolicy) {
        super.withResourceDeletionPolicy(resourceDeletionPolicy);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (endpoints() != null) {
            endpoints().forEach(e -> e.validate());
        }
        if (extensionOptions() != null) {
            extensionOptions().validate();
        }
        if (swaggerSpecifications() != null) {
            swaggerSpecifications().forEach(e -> e.validate());
        }
        if (authorizationActionMappings() != null) {
            authorizationActionMappings().forEach(e -> e.validate());
        }
        if (linkedAccessChecks() != null) {
            linkedAccessChecks().forEach(e -> e.validate());
        }
        if (loggingRules() != null) {
            loggingRules().forEach(e -> e.validate());
        }
        if (throttlingRules() != null) {
            throttlingRules().forEach(e -> e.validate());
        }
        if (featuresRule() != null) {
            featuresRule().validate();
        }
        if (subscriptionLifecycleNotificationSpecifications() != null) {
            subscriptionLifecycleNotificationSpecifications().validate();
        }
        if (identityManagement() != null) {
            identityManagement().validate();
        }
        if (checkNameAvailabilitySpecifications() != null) {
            checkNameAvailabilitySpecifications().validate();
        }
        if (serviceTreeInfos() != null) {
            serviceTreeInfos().forEach(e -> e.validate());
        }
        if (requestHeaderOptions() != null) {
            requestHeaderOptions().validate();
        }
        if (subscriptionStateRules() != null) {
            subscriptionStateRules().forEach(e -> e.validate());
        }
        if (templateDeploymentOptions() != null) {
            templateDeploymentOptions().validate();
        }
        if (extendedLocations() != null) {
            extendedLocations().forEach(e -> e.validate());
        }
        if (resourceMovePolicy() != null) {
            resourceMovePolicy().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("routingType", routingType() == null ? null : routingType().toString());
        jsonWriter.writeStringField("regionality", regionality() == null ? null : regionality().toString());
        jsonWriter.writeArrayField("endpoints", endpoints(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("extensionOptions", extensionOptions());
        jsonWriter.writeStringField("marketplaceType", marketplaceType() == null ? null : marketplaceType().toString());
        jsonWriter.writeArrayField("swaggerSpecifications", swaggerSpecifications(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("allowedUnauthorizedActions", allowedUnauthorizedActions(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("authorizationActionMappings", authorizationActionMappings(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("linkedAccessChecks", linkedAccessChecks(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("defaultApiVersion", defaultApiVersion());
        jsonWriter.writeArrayField("loggingRules", loggingRules(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("throttlingRules", throttlingRules(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("requiredFeatures", requiredFeatures(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("featuresRule", featuresRule());
        jsonWriter.writeBooleanField("enableAsyncOperation", enableAsyncOperation());
        jsonWriter.writeStringField("provisioningState",
            provisioningState() == null ? null : provisioningState().toString());
        jsonWriter.writeBooleanField("enableThirdPartyS2S", enableThirdPartyS2S());
        jsonWriter.writeJsonField("subscriptionLifecycleNotificationSpecifications",
            subscriptionLifecycleNotificationSpecifications());
        jsonWriter.writeBooleanField("isPureProxy", isPureProxy());
        jsonWriter.writeJsonField("identityManagement", identityManagement());
        jsonWriter.writeJsonField("checkNameAvailabilitySpecifications", checkNameAvailabilitySpecifications());
        jsonWriter.writeArrayField("disallowedActionVerbs", disallowedActionVerbs(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("serviceTreeInfos", serviceTreeInfos(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("requestHeaderOptions", requestHeaderOptions());
        jsonWriter.writeArrayField("subscriptionStateRules", subscriptionStateRules(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("templateDeploymentOptions", templateDeploymentOptions());
        jsonWriter.writeArrayField("extendedLocations", extendedLocations(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("resourceMovePolicy", resourceMovePolicy());
        jsonWriter.writeStringField("resourceDeletionPolicy",
            resourceDeletionPolicy() == null ? null : resourceDeletionPolicy().toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceTypeRegistrationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceTypeRegistrationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceTypeRegistrationProperties.
     */
    public static ResourceTypeRegistrationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceTypeRegistrationProperties deserializedResourceTypeRegistrationProperties
                = new ResourceTypeRegistrationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("routingType".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties
                        .withRoutingType(RoutingType.fromString(reader.getString()));
                } else if ("regionality".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties
                        .withRegionality(Regionality.fromString(reader.getString()));
                } else if ("endpoints".equals(fieldName)) {
                    List<ResourceTypeEndpoint> endpoints
                        = reader.readArray(reader1 -> ResourceTypeEndpoint.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.withEndpoints(endpoints);
                } else if ("extensionOptions".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties
                        .withExtensionOptions(ResourceTypeRegistrationPropertiesExtensionOptions.fromJson(reader));
                } else if ("marketplaceType".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties
                        .withMarketplaceType(MarketplaceType.fromString(reader.getString()));
                } else if ("swaggerSpecifications".equals(fieldName)) {
                    List<SwaggerSpecification> swaggerSpecifications
                        = reader.readArray(reader1 -> SwaggerSpecification.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.withSwaggerSpecifications(swaggerSpecifications);
                } else if ("allowedUnauthorizedActions".equals(fieldName)) {
                    List<String> allowedUnauthorizedActions = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceTypeRegistrationProperties
                        .withAllowedUnauthorizedActions(allowedUnauthorizedActions);
                } else if ("authorizationActionMappings".equals(fieldName)) {
                    List<AuthorizationActionMapping> authorizationActionMappings
                        = reader.readArray(reader1 -> AuthorizationActionMapping.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties
                        .withAuthorizationActionMappings(authorizationActionMappings);
                } else if ("linkedAccessChecks".equals(fieldName)) {
                    List<LinkedAccessCheck> linkedAccessChecks
                        = reader.readArray(reader1 -> LinkedAccessCheck.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.withLinkedAccessChecks(linkedAccessChecks);
                } else if ("defaultApiVersion".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.withDefaultApiVersion(reader.getString());
                } else if ("loggingRules".equals(fieldName)) {
                    List<LoggingRule> loggingRules = reader.readArray(reader1 -> LoggingRule.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.withLoggingRules(loggingRules);
                } else if ("throttlingRules".equals(fieldName)) {
                    List<ThrottlingRule> throttlingRules
                        = reader.readArray(reader1 -> ThrottlingRule.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.withThrottlingRules(throttlingRules);
                } else if ("requiredFeatures".equals(fieldName)) {
                    List<String> requiredFeatures = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceTypeRegistrationProperties.withRequiredFeatures(requiredFeatures);
                } else if ("featuresRule".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties
                        .withFeaturesRule(ResourceTypeRegistrationPropertiesFeaturesRule.fromJson(reader));
                } else if ("enableAsyncOperation".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties
                        .withEnableAsyncOperation(reader.getNullable(JsonReader::getBoolean));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("enableThirdPartyS2S".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties
                        .withEnableThirdPartyS2S(reader.getNullable(JsonReader::getBoolean));
                } else if ("subscriptionLifecycleNotificationSpecifications".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.withSubscriptionLifecycleNotificationSpecifications(
                        ResourceTypeRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications
                            .fromJson(reader));
                } else if ("isPureProxy".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties
                        .withIsPureProxy(reader.getNullable(JsonReader::getBoolean));
                } else if ("identityManagement".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties
                        .withIdentityManagement(ResourceTypeRegistrationPropertiesIdentityManagement.fromJson(reader));
                } else if ("checkNameAvailabilitySpecifications".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.withCheckNameAvailabilitySpecifications(
                        ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications.fromJson(reader));
                } else if ("disallowedActionVerbs".equals(fieldName)) {
                    List<String> disallowedActionVerbs = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceTypeRegistrationProperties.withDisallowedActionVerbs(disallowedActionVerbs);
                } else if ("serviceTreeInfos".equals(fieldName)) {
                    List<ServiceTreeInfo> serviceTreeInfos
                        = reader.readArray(reader1 -> ServiceTreeInfo.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.withServiceTreeInfos(serviceTreeInfos);
                } else if ("requestHeaderOptions".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.withRequestHeaderOptions(
                        ResourceTypeRegistrationPropertiesRequestHeaderOptions.fromJson(reader));
                } else if ("subscriptionStateRules".equals(fieldName)) {
                    List<SubscriptionStateRule> subscriptionStateRules
                        = reader.readArray(reader1 -> SubscriptionStateRule.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.withSubscriptionStateRules(subscriptionStateRules);
                } else if ("templateDeploymentOptions".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.withTemplateDeploymentOptions(
                        ResourceTypeRegistrationPropertiesTemplateDeploymentOptions.fromJson(reader));
                } else if ("extendedLocations".equals(fieldName)) {
                    List<ExtendedLocationOptions> extendedLocations
                        = reader.readArray(reader1 -> ExtendedLocationOptions.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.withExtendedLocations(extendedLocations);
                } else if ("resourceMovePolicy".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties
                        .withResourceMovePolicy(ResourceTypeRegistrationPropertiesResourceMovePolicy.fromJson(reader));
                } else if ("resourceDeletionPolicy".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties
                        .withResourceDeletionPolicy(ResourceDeletionPolicy.fromString(reader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceTypeRegistrationProperties;
        });
    }
}
