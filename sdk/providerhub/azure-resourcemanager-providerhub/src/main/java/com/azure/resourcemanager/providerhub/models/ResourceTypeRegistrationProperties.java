// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The ResourceTypeRegistrationProperties model.
 */
@Fluent
public final class ResourceTypeRegistrationProperties implements JsonSerializable<ResourceTypeRegistrationProperties> {
    /*
     * The resource routing type.
     */
    private RoutingType routingType;

    /*
     * The additional options.
     */
    private AdditionalOptionsResourceTypeRegistration additionalOptions;

    /*
     * The cross tenant token validation.
     */
    private CrossTenantTokenValidation crossTenantTokenValidation;

    /*
     * The regionality.
     */
    private Regionality regionality;

    /*
     * The extensions.
     */
    private List<ResourceTypeEndpoint> endpoints;

    /*
     * The extension options.
     */
    private ResourceTypeRegistrationPropertiesExtensionOptions extensionOptions;

    /*
     * The marketplace type.
     */
    private MarketplaceType marketplaceType;

    /*
     * The swagger specifications.
     */
    private List<SwaggerSpecification> swaggerSpecifications;

    /*
     * The allowed unauthorized actions.
     */
    private List<String> allowedUnauthorizedActions;

    /*
     * The allowed unauthorized actions extensions.
     */
    private List<AllowedUnauthorizedActionsExtension> allowedUnauthorizedActionsExtensions;

    /*
     * The authorization action mappings
     */
    private List<AuthorizationActionMapping> authorizationActionMappings;

    /*
     * The linked access checks.
     */
    private List<LinkedAccessCheck> linkedAccessChecks;

    /*
     * The default api version.
     */
    private String defaultApiVersion;

    /*
     * The logging rules.
     */
    private List<LoggingRule> loggingRules;

    /*
     * The throttling rules.
     */
    private List<ThrottlingRule> throttlingRules;

    /*
     * The required features.
     */
    private List<String> requiredFeatures;

    /*
     * The features rule.
     */
    private ResourceTypeRegistrationPropertiesFeaturesRule featuresRule;

    /*
     * Whether async operation is enabled.
     */
    private Boolean enableAsyncOperation;

    /*
     * The provisioning state.
     */
    private ProvisioningState provisioningState;

    /*
     * Whether third party S2S is enabled.
     */
    private Boolean enableThirdPartyS2S;

    /*
     * The subscription lifecycle notification specifications.
     */
    private ResourceTypeRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications subscriptionLifecycleNotificationSpecifications;

    /*
     * Whether it is pure proxy.
     */
    private Boolean isPureProxy;

    /*
     * The identity management.
     */
    private ResourceTypeRegistrationPropertiesIdentityManagement identityManagement;

    /*
     * The check name availability specifications.
     */
    private ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications checkNameAvailabilitySpecifications;

    /*
     * The disallowed action verbs.
     */
    private List<String> disallowedActionVerbs;

    /*
     * The service tree infos.
     */
    private List<ServiceTreeInfo> serviceTreeInfos;

    /*
     * The request header options.
     */
    private ResourceTypeRegistrationPropertiesRequestHeaderOptions requestHeaderOptions;

    /*
     * The subscription state rules.
     */
    private List<SubscriptionStateRule> subscriptionStateRules;

    /*
     * The template deployment options.
     */
    private ResourceTypeRegistrationPropertiesTemplateDeploymentOptions templateDeploymentOptions;

    /*
     * The extended locations.
     */
    private List<ExtendedLocationOptions> extendedLocations;

    /*
     * The resource move policy.
     */
    private ResourceTypeRegistrationPropertiesResourceMovePolicy resourceMovePolicy;

    /*
     * The resource deletion policy.
     */
    private ResourceDeletionPolicy resourceDeletionPolicy;

    /*
     * The resource concurrency control options.
     */
    private Map<String, ResourceConcurrencyControlOption> resourceConcurrencyControlOptions;

    /*
     * The resource graph configuration.
     */
    private ResourceTypeRegistrationPropertiesResourceGraphConfiguration resourceGraphConfiguration;

    /*
     * The resource provider management.
     */
    private ResourceTypeRegistrationPropertiesManagement management;

    /*
     * The open api configuration.
     */
    private OpenApiConfiguration openApiConfiguration;

    /*
     * The on behalf of tokens.
     */
    private ResourceTypeOnBehalfOfToken onBehalfOfTokens;

    /*
     * The category.
     */
    private ResourceTypeCategory category;

    /*
     * The resource validation.
     */
    private ResourceValidation resourceValidation;

    /*
     * The disallowed end user operations.
     */
    private List<String> disallowedEndUserOperations;

    /*
     * The metadata.
     */
    private Map<String, Object> metadata;

    /*
     * The sku link.
     */
    private String skuLink;

    /*
     * The quota rule.
     */
    private QuotaRule quotaRule;

    /*
     * The notifications.
     */
    private List<Notification> notifications;

    /*
     * The linked notification rules.
     */
    private List<LinkedNotificationRule> linkedNotificationRules;

    /*
     * The resource provider authorization rules.
     */
    private ResourceProviderAuthorizationRules resourceProviderAuthorizationRules;

    /*
     * The token auth configuration.
     */
    private TokenAuthConfiguration tokenAuthConfiguration;

    /*
     * The template deployment policy.
     */
    private ResourceTypeRegistrationPropertiesTemplateDeploymentPolicy templateDeploymentPolicy;

    /*
     * The allow empty role assignments.
     */
    private Boolean allowEmptyRoleAssignments;

    /*
     * The policy execution type.
     */
    private PolicyExecutionType policyExecutionType;

    /*
     * The availability zone rule.
     */
    private ResourceTypeRegistrationPropertiesAvailabilityZoneRule availabilityZoneRule;

    /*
     * The dsts configuration.
     */
    private ResourceTypeRegistrationPropertiesDstsConfiguration dstsConfiguration;

    /*
     * Async timeout rules
     */
    private List<AsyncTimeoutRule> asyncTimeoutRules;

    /*
     * Common API versions for the resource type.
     */
    private List<String> commonApiVersions;

    /*
     * The api profiles.
     */
    private List<ApiProfile> apiProfiles;

    /*
     * The linked operation rules.
     */
    private List<LinkedOperationRule> linkedOperationRules;

    /*
     * The legacy name.
     */
    private String legacyName;

    /*
     * The legacy names.
     */
    private List<String> legacyNames;

    /*
     * Allowed template deployment reference actions.
     */
    private List<String> allowedTemplateDeploymentReferenceActions;

    /*
     * The legacy policy.
     */
    private ResourceTypeRegistrationPropertiesLegacyPolicy legacyPolicy;

    /*
     * Manifest link.
     */
    private String manifestLink;

    /*
     * Capacity rule.
     */
    private ResourceTypeRegistrationPropertiesCapacityRule capacityRule;

    /*
     * Marketplace options.
     */
    private ResourceTypeRegistrationPropertiesMarketplaceOptions marketplaceOptions;

    /*
     * The allowed resource names.
     */
    private List<AllowedResourceName> allowedResourceNames;

    /*
     * Resource cache options.
     */
    private ResourceTypeRegistrationPropertiesResourceCache resourceCache;

    /*
     * Resource query management options.
     */
    private ResourceTypeRegistrationPropertiesResourceQueryManagement resourceQueryManagement;

    /*
     * Whether tags are supported.
     */
    private Boolean supportsTags;

    /*
     * Resource management options.
     */
    private ResourceTypeRegistrationPropertiesResourceManagementOptions resourceManagementOptions;

    /*
     * Grouping tag.
     */
    private String groupingTag;

    /*
     * Add resource list target locations?
     */
    private Boolean addResourceListTargetLocations;

    /*
     * Resource type common attribute management.
     */
    private ResourceTypeRegistrationPropertiesResourceTypeCommonAttributeManagement resourceTypeCommonAttributeManagement;

    /*
     * Routing rule.
     */
    private ResourceTypeRegistrationPropertiesRoutingRule routingRule;

    /*
     * The frontdoor request mode.
     */
    private FrontdoorRequestMode frontdoorRequestMode;

    /*
     * The resource sub type.
     */
    private ResourceSubType resourceSubType;

    /*
     * The async operation resource type name.
     */
    private String asyncOperationResourceTypeName;

    /**
     * Creates an instance of ResourceTypeRegistrationProperties class.
     */
    public ResourceTypeRegistrationProperties() {
    }

    /**
     * Get the routingType property: The resource routing type.
     * 
     * @return the routingType value.
     */
    public RoutingType routingType() {
        return this.routingType;
    }

    /**
     * Set the routingType property: The resource routing type.
     * 
     * @param routingType the routingType value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withRoutingType(RoutingType routingType) {
        this.routingType = routingType;
        return this;
    }

    /**
     * Get the additionalOptions property: The additional options.
     * 
     * @return the additionalOptions value.
     */
    public AdditionalOptionsResourceTypeRegistration additionalOptions() {
        return this.additionalOptions;
    }

    /**
     * Set the additionalOptions property: The additional options.
     * 
     * @param additionalOptions the additionalOptions value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withAdditionalOptions(AdditionalOptionsResourceTypeRegistration additionalOptions) {
        this.additionalOptions = additionalOptions;
        return this;
    }

    /**
     * Get the crossTenantTokenValidation property: The cross tenant token validation.
     * 
     * @return the crossTenantTokenValidation value.
     */
    public CrossTenantTokenValidation crossTenantTokenValidation() {
        return this.crossTenantTokenValidation;
    }

    /**
     * Set the crossTenantTokenValidation property: The cross tenant token validation.
     * 
     * @param crossTenantTokenValidation the crossTenantTokenValidation value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withCrossTenantTokenValidation(CrossTenantTokenValidation crossTenantTokenValidation) {
        this.crossTenantTokenValidation = crossTenantTokenValidation;
        return this;
    }

    /**
     * Get the regionality property: The regionality.
     * 
     * @return the regionality value.
     */
    public Regionality regionality() {
        return this.regionality;
    }

    /**
     * Set the regionality property: The regionality.
     * 
     * @param regionality the regionality value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withRegionality(Regionality regionality) {
        this.regionality = regionality;
        return this;
    }

    /**
     * Get the endpoints property: The extensions.
     * 
     * @return the endpoints value.
     */
    public List<ResourceTypeEndpoint> endpoints() {
        return this.endpoints;
    }

    /**
     * Set the endpoints property: The extensions.
     * 
     * @param endpoints the endpoints value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withEndpoints(List<ResourceTypeEndpoint> endpoints) {
        this.endpoints = endpoints;
        return this;
    }

    /**
     * Get the extensionOptions property: The extension options.
     * 
     * @return the extensionOptions value.
     */
    public ResourceTypeRegistrationPropertiesExtensionOptions extensionOptions() {
        return this.extensionOptions;
    }

    /**
     * Set the extensionOptions property: The extension options.
     * 
     * @param extensionOptions the extensionOptions value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withExtensionOptions(ResourceTypeRegistrationPropertiesExtensionOptions extensionOptions) {
        this.extensionOptions = extensionOptions;
        return this;
    }

    /**
     * Get the marketplaceType property: The marketplace type.
     * 
     * @return the marketplaceType value.
     */
    public MarketplaceType marketplaceType() {
        return this.marketplaceType;
    }

    /**
     * Set the marketplaceType property: The marketplace type.
     * 
     * @param marketplaceType the marketplaceType value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withMarketplaceType(MarketplaceType marketplaceType) {
        this.marketplaceType = marketplaceType;
        return this;
    }

    /**
     * Get the swaggerSpecifications property: The swagger specifications.
     * 
     * @return the swaggerSpecifications value.
     */
    public List<SwaggerSpecification> swaggerSpecifications() {
        return this.swaggerSpecifications;
    }

    /**
     * Set the swaggerSpecifications property: The swagger specifications.
     * 
     * @param swaggerSpecifications the swaggerSpecifications value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withSwaggerSpecifications(List<SwaggerSpecification> swaggerSpecifications) {
        this.swaggerSpecifications = swaggerSpecifications;
        return this;
    }

    /**
     * Get the allowedUnauthorizedActions property: The allowed unauthorized actions.
     * 
     * @return the allowedUnauthorizedActions value.
     */
    public List<String> allowedUnauthorizedActions() {
        return this.allowedUnauthorizedActions;
    }

    /**
     * Set the allowedUnauthorizedActions property: The allowed unauthorized actions.
     * 
     * @param allowedUnauthorizedActions the allowedUnauthorizedActions value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withAllowedUnauthorizedActions(List<String> allowedUnauthorizedActions) {
        this.allowedUnauthorizedActions = allowedUnauthorizedActions;
        return this;
    }

    /**
     * Get the allowedUnauthorizedActionsExtensions property: The allowed unauthorized actions extensions.
     * 
     * @return the allowedUnauthorizedActionsExtensions value.
     */
    public List<AllowedUnauthorizedActionsExtension> allowedUnauthorizedActionsExtensions() {
        return this.allowedUnauthorizedActionsExtensions;
    }

    /**
     * Set the allowedUnauthorizedActionsExtensions property: The allowed unauthorized actions extensions.
     * 
     * @param allowedUnauthorizedActionsExtensions the allowedUnauthorizedActionsExtensions value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withAllowedUnauthorizedActionsExtensions(
        List<AllowedUnauthorizedActionsExtension> allowedUnauthorizedActionsExtensions) {
        this.allowedUnauthorizedActionsExtensions = allowedUnauthorizedActionsExtensions;
        return this;
    }

    /**
     * Get the authorizationActionMappings property: The authorization action mappings.
     * 
     * @return the authorizationActionMappings value.
     */
    public List<AuthorizationActionMapping> authorizationActionMappings() {
        return this.authorizationActionMappings;
    }

    /**
     * Set the authorizationActionMappings property: The authorization action mappings.
     * 
     * @param authorizationActionMappings the authorizationActionMappings value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withAuthorizationActionMappings(List<AuthorizationActionMapping> authorizationActionMappings) {
        this.authorizationActionMappings = authorizationActionMappings;
        return this;
    }

    /**
     * Get the linkedAccessChecks property: The linked access checks.
     * 
     * @return the linkedAccessChecks value.
     */
    public List<LinkedAccessCheck> linkedAccessChecks() {
        return this.linkedAccessChecks;
    }

    /**
     * Set the linkedAccessChecks property: The linked access checks.
     * 
     * @param linkedAccessChecks the linkedAccessChecks value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withLinkedAccessChecks(List<LinkedAccessCheck> linkedAccessChecks) {
        this.linkedAccessChecks = linkedAccessChecks;
        return this;
    }

    /**
     * Get the defaultApiVersion property: The default api version.
     * 
     * @return the defaultApiVersion value.
     */
    public String defaultApiVersion() {
        return this.defaultApiVersion;
    }

    /**
     * Set the defaultApiVersion property: The default api version.
     * 
     * @param defaultApiVersion the defaultApiVersion value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withDefaultApiVersion(String defaultApiVersion) {
        this.defaultApiVersion = defaultApiVersion;
        return this;
    }

    /**
     * Get the loggingRules property: The logging rules.
     * 
     * @return the loggingRules value.
     */
    public List<LoggingRule> loggingRules() {
        return this.loggingRules;
    }

    /**
     * Set the loggingRules property: The logging rules.
     * 
     * @param loggingRules the loggingRules value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withLoggingRules(List<LoggingRule> loggingRules) {
        this.loggingRules = loggingRules;
        return this;
    }

    /**
     * Get the throttlingRules property: The throttling rules.
     * 
     * @return the throttlingRules value.
     */
    public List<ThrottlingRule> throttlingRules() {
        return this.throttlingRules;
    }

    /**
     * Set the throttlingRules property: The throttling rules.
     * 
     * @param throttlingRules the throttlingRules value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withThrottlingRules(List<ThrottlingRule> throttlingRules) {
        this.throttlingRules = throttlingRules;
        return this;
    }

    /**
     * Get the requiredFeatures property: The required features.
     * 
     * @return the requiredFeatures value.
     */
    public List<String> requiredFeatures() {
        return this.requiredFeatures;
    }

    /**
     * Set the requiredFeatures property: The required features.
     * 
     * @param requiredFeatures the requiredFeatures value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withRequiredFeatures(List<String> requiredFeatures) {
        this.requiredFeatures = requiredFeatures;
        return this;
    }

    /**
     * Get the featuresRule property: The features rule.
     * 
     * @return the featuresRule value.
     */
    public ResourceTypeRegistrationPropertiesFeaturesRule featuresRule() {
        return this.featuresRule;
    }

    /**
     * Set the featuresRule property: The features rule.
     * 
     * @param featuresRule the featuresRule value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withFeaturesRule(ResourceTypeRegistrationPropertiesFeaturesRule featuresRule) {
        this.featuresRule = featuresRule;
        return this;
    }

    /**
     * Get the enableAsyncOperation property: Whether async operation is enabled.
     * 
     * @return the enableAsyncOperation value.
     */
    public Boolean enableAsyncOperation() {
        return this.enableAsyncOperation;
    }

    /**
     * Set the enableAsyncOperation property: Whether async operation is enabled.
     * 
     * @param enableAsyncOperation the enableAsyncOperation value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withEnableAsyncOperation(Boolean enableAsyncOperation) {
        this.enableAsyncOperation = enableAsyncOperation;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the enableThirdPartyS2S property: Whether third party S2S is enabled.
     * 
     * @return the enableThirdPartyS2S value.
     */
    public Boolean enableThirdPartyS2S() {
        return this.enableThirdPartyS2S;
    }

    /**
     * Set the enableThirdPartyS2S property: Whether third party S2S is enabled.
     * 
     * @param enableThirdPartyS2S the enableThirdPartyS2S value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withEnableThirdPartyS2S(Boolean enableThirdPartyS2S) {
        this.enableThirdPartyS2S = enableThirdPartyS2S;
        return this;
    }

    /**
     * Get the subscriptionLifecycleNotificationSpecifications property: The subscription lifecycle notification
     * specifications.
     * 
     * @return the subscriptionLifecycleNotificationSpecifications value.
     */
    public ResourceTypeRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications
        subscriptionLifecycleNotificationSpecifications() {
        return this.subscriptionLifecycleNotificationSpecifications;
    }

    /**
     * Set the subscriptionLifecycleNotificationSpecifications property: The subscription lifecycle notification
     * specifications.
     * 
     * @param subscriptionLifecycleNotificationSpecifications the subscriptionLifecycleNotificationSpecifications value
     * to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withSubscriptionLifecycleNotificationSpecifications(
        ResourceTypeRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications subscriptionLifecycleNotificationSpecifications) {
        this.subscriptionLifecycleNotificationSpecifications = subscriptionLifecycleNotificationSpecifications;
        return this;
    }

    /**
     * Get the isPureProxy property: Whether it is pure proxy.
     * 
     * @return the isPureProxy value.
     */
    public Boolean isPureProxy() {
        return this.isPureProxy;
    }

    /**
     * Set the isPureProxy property: Whether it is pure proxy.
     * 
     * @param isPureProxy the isPureProxy value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withIsPureProxy(Boolean isPureProxy) {
        this.isPureProxy = isPureProxy;
        return this;
    }

    /**
     * Get the identityManagement property: The identity management.
     * 
     * @return the identityManagement value.
     */
    public ResourceTypeRegistrationPropertiesIdentityManagement identityManagement() {
        return this.identityManagement;
    }

    /**
     * Set the identityManagement property: The identity management.
     * 
     * @param identityManagement the identityManagement value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withIdentityManagement(ResourceTypeRegistrationPropertiesIdentityManagement identityManagement) {
        this.identityManagement = identityManagement;
        return this;
    }

    /**
     * Get the checkNameAvailabilitySpecifications property: The check name availability specifications.
     * 
     * @return the checkNameAvailabilitySpecifications value.
     */
    public ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications checkNameAvailabilitySpecifications() {
        return this.checkNameAvailabilitySpecifications;
    }

    /**
     * Set the checkNameAvailabilitySpecifications property: The check name availability specifications.
     * 
     * @param checkNameAvailabilitySpecifications the checkNameAvailabilitySpecifications value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withCheckNameAvailabilitySpecifications(
        ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications checkNameAvailabilitySpecifications) {
        this.checkNameAvailabilitySpecifications = checkNameAvailabilitySpecifications;
        return this;
    }

    /**
     * Get the disallowedActionVerbs property: The disallowed action verbs.
     * 
     * @return the disallowedActionVerbs value.
     */
    public List<String> disallowedActionVerbs() {
        return this.disallowedActionVerbs;
    }

    /**
     * Set the disallowedActionVerbs property: The disallowed action verbs.
     * 
     * @param disallowedActionVerbs the disallowedActionVerbs value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withDisallowedActionVerbs(List<String> disallowedActionVerbs) {
        this.disallowedActionVerbs = disallowedActionVerbs;
        return this;
    }

    /**
     * Get the serviceTreeInfos property: The service tree infos.
     * 
     * @return the serviceTreeInfos value.
     */
    public List<ServiceTreeInfo> serviceTreeInfos() {
        return this.serviceTreeInfos;
    }

    /**
     * Set the serviceTreeInfos property: The service tree infos.
     * 
     * @param serviceTreeInfos the serviceTreeInfos value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withServiceTreeInfos(List<ServiceTreeInfo> serviceTreeInfos) {
        this.serviceTreeInfos = serviceTreeInfos;
        return this;
    }

    /**
     * Get the requestHeaderOptions property: The request header options.
     * 
     * @return the requestHeaderOptions value.
     */
    public ResourceTypeRegistrationPropertiesRequestHeaderOptions requestHeaderOptions() {
        return this.requestHeaderOptions;
    }

    /**
     * Set the requestHeaderOptions property: The request header options.
     * 
     * @param requestHeaderOptions the requestHeaderOptions value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withRequestHeaderOptions(ResourceTypeRegistrationPropertiesRequestHeaderOptions requestHeaderOptions) {
        this.requestHeaderOptions = requestHeaderOptions;
        return this;
    }

    /**
     * Get the subscriptionStateRules property: The subscription state rules.
     * 
     * @return the subscriptionStateRules value.
     */
    public List<SubscriptionStateRule> subscriptionStateRules() {
        return this.subscriptionStateRules;
    }

    /**
     * Set the subscriptionStateRules property: The subscription state rules.
     * 
     * @param subscriptionStateRules the subscriptionStateRules value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withSubscriptionStateRules(List<SubscriptionStateRule> subscriptionStateRules) {
        this.subscriptionStateRules = subscriptionStateRules;
        return this;
    }

    /**
     * Get the templateDeploymentOptions property: The template deployment options.
     * 
     * @return the templateDeploymentOptions value.
     */
    public ResourceTypeRegistrationPropertiesTemplateDeploymentOptions templateDeploymentOptions() {
        return this.templateDeploymentOptions;
    }

    /**
     * Set the templateDeploymentOptions property: The template deployment options.
     * 
     * @param templateDeploymentOptions the templateDeploymentOptions value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withTemplateDeploymentOptions(
        ResourceTypeRegistrationPropertiesTemplateDeploymentOptions templateDeploymentOptions) {
        this.templateDeploymentOptions = templateDeploymentOptions;
        return this;
    }

    /**
     * Get the extendedLocations property: The extended locations.
     * 
     * @return the extendedLocations value.
     */
    public List<ExtendedLocationOptions> extendedLocations() {
        return this.extendedLocations;
    }

    /**
     * Set the extendedLocations property: The extended locations.
     * 
     * @param extendedLocations the extendedLocations value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withExtendedLocations(List<ExtendedLocationOptions> extendedLocations) {
        this.extendedLocations = extendedLocations;
        return this;
    }

    /**
     * Get the resourceMovePolicy property: The resource move policy.
     * 
     * @return the resourceMovePolicy value.
     */
    public ResourceTypeRegistrationPropertiesResourceMovePolicy resourceMovePolicy() {
        return this.resourceMovePolicy;
    }

    /**
     * Set the resourceMovePolicy property: The resource move policy.
     * 
     * @param resourceMovePolicy the resourceMovePolicy value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withResourceMovePolicy(ResourceTypeRegistrationPropertiesResourceMovePolicy resourceMovePolicy) {
        this.resourceMovePolicy = resourceMovePolicy;
        return this;
    }

    /**
     * Get the resourceDeletionPolicy property: The resource deletion policy.
     * 
     * @return the resourceDeletionPolicy value.
     */
    public ResourceDeletionPolicy resourceDeletionPolicy() {
        return this.resourceDeletionPolicy;
    }

    /**
     * Set the resourceDeletionPolicy property: The resource deletion policy.
     * 
     * @param resourceDeletionPolicy the resourceDeletionPolicy value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withResourceDeletionPolicy(ResourceDeletionPolicy resourceDeletionPolicy) {
        this.resourceDeletionPolicy = resourceDeletionPolicy;
        return this;
    }

    /**
     * Get the resourceConcurrencyControlOptions property: The resource concurrency control options.
     * 
     * @return the resourceConcurrencyControlOptions value.
     */
    public Map<String, ResourceConcurrencyControlOption> resourceConcurrencyControlOptions() {
        return this.resourceConcurrencyControlOptions;
    }

    /**
     * Set the resourceConcurrencyControlOptions property: The resource concurrency control options.
     * 
     * @param resourceConcurrencyControlOptions the resourceConcurrencyControlOptions value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withResourceConcurrencyControlOptions(
        Map<String, ResourceConcurrencyControlOption> resourceConcurrencyControlOptions) {
        this.resourceConcurrencyControlOptions = resourceConcurrencyControlOptions;
        return this;
    }

    /**
     * Get the resourceGraphConfiguration property: The resource graph configuration.
     * 
     * @return the resourceGraphConfiguration value.
     */
    public ResourceTypeRegistrationPropertiesResourceGraphConfiguration resourceGraphConfiguration() {
        return this.resourceGraphConfiguration;
    }

    /**
     * Set the resourceGraphConfiguration property: The resource graph configuration.
     * 
     * @param resourceGraphConfiguration the resourceGraphConfiguration value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withResourceGraphConfiguration(
        ResourceTypeRegistrationPropertiesResourceGraphConfiguration resourceGraphConfiguration) {
        this.resourceGraphConfiguration = resourceGraphConfiguration;
        return this;
    }

    /**
     * Get the management property: The resource provider management.
     * 
     * @return the management value.
     */
    public ResourceTypeRegistrationPropertiesManagement management() {
        return this.management;
    }

    /**
     * Set the management property: The resource provider management.
     * 
     * @param management the management value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withManagement(ResourceTypeRegistrationPropertiesManagement management) {
        this.management = management;
        return this;
    }

    /**
     * Get the openApiConfiguration property: The open api configuration.
     * 
     * @return the openApiConfiguration value.
     */
    public OpenApiConfiguration openApiConfiguration() {
        return this.openApiConfiguration;
    }

    /**
     * Set the openApiConfiguration property: The open api configuration.
     * 
     * @param openApiConfiguration the openApiConfiguration value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withOpenApiConfiguration(OpenApiConfiguration openApiConfiguration) {
        this.openApiConfiguration = openApiConfiguration;
        return this;
    }

    /**
     * Get the onBehalfOfTokens property: The on behalf of tokens.
     * 
     * @return the onBehalfOfTokens value.
     */
    public ResourceTypeOnBehalfOfToken onBehalfOfTokens() {
        return this.onBehalfOfTokens;
    }

    /**
     * Set the onBehalfOfTokens property: The on behalf of tokens.
     * 
     * @param onBehalfOfTokens the onBehalfOfTokens value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withOnBehalfOfTokens(ResourceTypeOnBehalfOfToken onBehalfOfTokens) {
        this.onBehalfOfTokens = onBehalfOfTokens;
        return this;
    }

    /**
     * Get the category property: The category.
     * 
     * @return the category value.
     */
    public ResourceTypeCategory category() {
        return this.category;
    }

    /**
     * Set the category property: The category.
     * 
     * @param category the category value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withCategory(ResourceTypeCategory category) {
        this.category = category;
        return this;
    }

    /**
     * Get the resourceValidation property: The resource validation.
     * 
     * @return the resourceValidation value.
     */
    public ResourceValidation resourceValidation() {
        return this.resourceValidation;
    }

    /**
     * Set the resourceValidation property: The resource validation.
     * 
     * @param resourceValidation the resourceValidation value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withResourceValidation(ResourceValidation resourceValidation) {
        this.resourceValidation = resourceValidation;
        return this;
    }

    /**
     * Get the disallowedEndUserOperations property: The disallowed end user operations.
     * 
     * @return the disallowedEndUserOperations value.
     */
    public List<String> disallowedEndUserOperations() {
        return this.disallowedEndUserOperations;
    }

    /**
     * Set the disallowedEndUserOperations property: The disallowed end user operations.
     * 
     * @param disallowedEndUserOperations the disallowedEndUserOperations value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withDisallowedEndUserOperations(List<String> disallowedEndUserOperations) {
        this.disallowedEndUserOperations = disallowedEndUserOperations;
        return this;
    }

    /**
     * Get the metadata property: The metadata.
     * 
     * @return the metadata value.
     */
    public Map<String, Object> metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The metadata.
     * 
     * @param metadata the metadata value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withMetadata(Map<String, Object> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the skuLink property: The sku link.
     * 
     * @return the skuLink value.
     */
    public String skuLink() {
        return this.skuLink;
    }

    /**
     * Set the skuLink property: The sku link.
     * 
     * @param skuLink the skuLink value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withSkuLink(String skuLink) {
        this.skuLink = skuLink;
        return this;
    }

    /**
     * Get the quotaRule property: The quota rule.
     * 
     * @return the quotaRule value.
     */
    public QuotaRule quotaRule() {
        return this.quotaRule;
    }

    /**
     * Set the quotaRule property: The quota rule.
     * 
     * @param quotaRule the quotaRule value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withQuotaRule(QuotaRule quotaRule) {
        this.quotaRule = quotaRule;
        return this;
    }

    /**
     * Get the notifications property: The notifications.
     * 
     * @return the notifications value.
     */
    public List<Notification> notifications() {
        return this.notifications;
    }

    /**
     * Set the notifications property: The notifications.
     * 
     * @param notifications the notifications value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withNotifications(List<Notification> notifications) {
        this.notifications = notifications;
        return this;
    }

    /**
     * Get the linkedNotificationRules property: The linked notification rules.
     * 
     * @return the linkedNotificationRules value.
     */
    public List<LinkedNotificationRule> linkedNotificationRules() {
        return this.linkedNotificationRules;
    }

    /**
     * Set the linkedNotificationRules property: The linked notification rules.
     * 
     * @param linkedNotificationRules the linkedNotificationRules value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withLinkedNotificationRules(List<LinkedNotificationRule> linkedNotificationRules) {
        this.linkedNotificationRules = linkedNotificationRules;
        return this;
    }

    /**
     * Get the resourceProviderAuthorizationRules property: The resource provider authorization rules.
     * 
     * @return the resourceProviderAuthorizationRules value.
     */
    public ResourceProviderAuthorizationRules resourceProviderAuthorizationRules() {
        return this.resourceProviderAuthorizationRules;
    }

    /**
     * Set the resourceProviderAuthorizationRules property: The resource provider authorization rules.
     * 
     * @param resourceProviderAuthorizationRules the resourceProviderAuthorizationRules value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withResourceProviderAuthorizationRules(ResourceProviderAuthorizationRules resourceProviderAuthorizationRules) {
        this.resourceProviderAuthorizationRules = resourceProviderAuthorizationRules;
        return this;
    }

    /**
     * Get the tokenAuthConfiguration property: The token auth configuration.
     * 
     * @return the tokenAuthConfiguration value.
     */
    public TokenAuthConfiguration tokenAuthConfiguration() {
        return this.tokenAuthConfiguration;
    }

    /**
     * Set the tokenAuthConfiguration property: The token auth configuration.
     * 
     * @param tokenAuthConfiguration the tokenAuthConfiguration value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withTokenAuthConfiguration(TokenAuthConfiguration tokenAuthConfiguration) {
        this.tokenAuthConfiguration = tokenAuthConfiguration;
        return this;
    }

    /**
     * Get the templateDeploymentPolicy property: The template deployment policy.
     * 
     * @return the templateDeploymentPolicy value.
     */
    public ResourceTypeRegistrationPropertiesTemplateDeploymentPolicy templateDeploymentPolicy() {
        return this.templateDeploymentPolicy;
    }

    /**
     * Set the templateDeploymentPolicy property: The template deployment policy.
     * 
     * @param templateDeploymentPolicy the templateDeploymentPolicy value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withTemplateDeploymentPolicy(
        ResourceTypeRegistrationPropertiesTemplateDeploymentPolicy templateDeploymentPolicy) {
        this.templateDeploymentPolicy = templateDeploymentPolicy;
        return this;
    }

    /**
     * Get the allowEmptyRoleAssignments property: The allow empty role assignments.
     * 
     * @return the allowEmptyRoleAssignments value.
     */
    public Boolean allowEmptyRoleAssignments() {
        return this.allowEmptyRoleAssignments;
    }

    /**
     * Set the allowEmptyRoleAssignments property: The allow empty role assignments.
     * 
     * @param allowEmptyRoleAssignments the allowEmptyRoleAssignments value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withAllowEmptyRoleAssignments(Boolean allowEmptyRoleAssignments) {
        this.allowEmptyRoleAssignments = allowEmptyRoleAssignments;
        return this;
    }

    /**
     * Get the policyExecutionType property: The policy execution type.
     * 
     * @return the policyExecutionType value.
     */
    public PolicyExecutionType policyExecutionType() {
        return this.policyExecutionType;
    }

    /**
     * Set the policyExecutionType property: The policy execution type.
     * 
     * @param policyExecutionType the policyExecutionType value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withPolicyExecutionType(PolicyExecutionType policyExecutionType) {
        this.policyExecutionType = policyExecutionType;
        return this;
    }

    /**
     * Get the availabilityZoneRule property: The availability zone rule.
     * 
     * @return the availabilityZoneRule value.
     */
    public ResourceTypeRegistrationPropertiesAvailabilityZoneRule availabilityZoneRule() {
        return this.availabilityZoneRule;
    }

    /**
     * Set the availabilityZoneRule property: The availability zone rule.
     * 
     * @param availabilityZoneRule the availabilityZoneRule value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withAvailabilityZoneRule(ResourceTypeRegistrationPropertiesAvailabilityZoneRule availabilityZoneRule) {
        this.availabilityZoneRule = availabilityZoneRule;
        return this;
    }

    /**
     * Get the dstsConfiguration property: The dsts configuration.
     * 
     * @return the dstsConfiguration value.
     */
    public ResourceTypeRegistrationPropertiesDstsConfiguration dstsConfiguration() {
        return this.dstsConfiguration;
    }

    /**
     * Set the dstsConfiguration property: The dsts configuration.
     * 
     * @param dstsConfiguration the dstsConfiguration value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withDstsConfiguration(ResourceTypeRegistrationPropertiesDstsConfiguration dstsConfiguration) {
        this.dstsConfiguration = dstsConfiguration;
        return this;
    }

    /**
     * Get the asyncTimeoutRules property: Async timeout rules.
     * 
     * @return the asyncTimeoutRules value.
     */
    public List<AsyncTimeoutRule> asyncTimeoutRules() {
        return this.asyncTimeoutRules;
    }

    /**
     * Set the asyncTimeoutRules property: Async timeout rules.
     * 
     * @param asyncTimeoutRules the asyncTimeoutRules value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withAsyncTimeoutRules(List<AsyncTimeoutRule> asyncTimeoutRules) {
        this.asyncTimeoutRules = asyncTimeoutRules;
        return this;
    }

    /**
     * Get the commonApiVersions property: Common API versions for the resource type.
     * 
     * @return the commonApiVersions value.
     */
    public List<String> commonApiVersions() {
        return this.commonApiVersions;
    }

    /**
     * Set the commonApiVersions property: Common API versions for the resource type.
     * 
     * @param commonApiVersions the commonApiVersions value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withCommonApiVersions(List<String> commonApiVersions) {
        this.commonApiVersions = commonApiVersions;
        return this;
    }

    /**
     * Get the apiProfiles property: The api profiles.
     * 
     * @return the apiProfiles value.
     */
    public List<ApiProfile> apiProfiles() {
        return this.apiProfiles;
    }

    /**
     * Set the apiProfiles property: The api profiles.
     * 
     * @param apiProfiles the apiProfiles value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withApiProfiles(List<ApiProfile> apiProfiles) {
        this.apiProfiles = apiProfiles;
        return this;
    }

    /**
     * Get the linkedOperationRules property: The linked operation rules.
     * 
     * @return the linkedOperationRules value.
     */
    public List<LinkedOperationRule> linkedOperationRules() {
        return this.linkedOperationRules;
    }

    /**
     * Set the linkedOperationRules property: The linked operation rules.
     * 
     * @param linkedOperationRules the linkedOperationRules value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withLinkedOperationRules(List<LinkedOperationRule> linkedOperationRules) {
        this.linkedOperationRules = linkedOperationRules;
        return this;
    }

    /**
     * Get the legacyName property: The legacy name.
     * 
     * @return the legacyName value.
     */
    public String legacyName() {
        return this.legacyName;
    }

    /**
     * Set the legacyName property: The legacy name.
     * 
     * @param legacyName the legacyName value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withLegacyName(String legacyName) {
        this.legacyName = legacyName;
        return this;
    }

    /**
     * Get the legacyNames property: The legacy names.
     * 
     * @return the legacyNames value.
     */
    public List<String> legacyNames() {
        return this.legacyNames;
    }

    /**
     * Set the legacyNames property: The legacy names.
     * 
     * @param legacyNames the legacyNames value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withLegacyNames(List<String> legacyNames) {
        this.legacyNames = legacyNames;
        return this;
    }

    /**
     * Get the allowedTemplateDeploymentReferenceActions property: Allowed template deployment reference actions.
     * 
     * @return the allowedTemplateDeploymentReferenceActions value.
     */
    public List<String> allowedTemplateDeploymentReferenceActions() {
        return this.allowedTemplateDeploymentReferenceActions;
    }

    /**
     * Set the allowedTemplateDeploymentReferenceActions property: Allowed template deployment reference actions.
     * 
     * @param allowedTemplateDeploymentReferenceActions the allowedTemplateDeploymentReferenceActions value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withAllowedTemplateDeploymentReferenceActions(List<String> allowedTemplateDeploymentReferenceActions) {
        this.allowedTemplateDeploymentReferenceActions = allowedTemplateDeploymentReferenceActions;
        return this;
    }

    /**
     * Get the legacyPolicy property: The legacy policy.
     * 
     * @return the legacyPolicy value.
     */
    public ResourceTypeRegistrationPropertiesLegacyPolicy legacyPolicy() {
        return this.legacyPolicy;
    }

    /**
     * Set the legacyPolicy property: The legacy policy.
     * 
     * @param legacyPolicy the legacyPolicy value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withLegacyPolicy(ResourceTypeRegistrationPropertiesLegacyPolicy legacyPolicy) {
        this.legacyPolicy = legacyPolicy;
        return this;
    }

    /**
     * Get the manifestLink property: Manifest link.
     * 
     * @return the manifestLink value.
     */
    public String manifestLink() {
        return this.manifestLink;
    }

    /**
     * Set the manifestLink property: Manifest link.
     * 
     * @param manifestLink the manifestLink value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withManifestLink(String manifestLink) {
        this.manifestLink = manifestLink;
        return this;
    }

    /**
     * Get the capacityRule property: Capacity rule.
     * 
     * @return the capacityRule value.
     */
    public ResourceTypeRegistrationPropertiesCapacityRule capacityRule() {
        return this.capacityRule;
    }

    /**
     * Set the capacityRule property: Capacity rule.
     * 
     * @param capacityRule the capacityRule value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withCapacityRule(ResourceTypeRegistrationPropertiesCapacityRule capacityRule) {
        this.capacityRule = capacityRule;
        return this;
    }

    /**
     * Get the marketplaceOptions property: Marketplace options.
     * 
     * @return the marketplaceOptions value.
     */
    public ResourceTypeRegistrationPropertiesMarketplaceOptions marketplaceOptions() {
        return this.marketplaceOptions;
    }

    /**
     * Set the marketplaceOptions property: Marketplace options.
     * 
     * @param marketplaceOptions the marketplaceOptions value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withMarketplaceOptions(ResourceTypeRegistrationPropertiesMarketplaceOptions marketplaceOptions) {
        this.marketplaceOptions = marketplaceOptions;
        return this;
    }

    /**
     * Get the allowedResourceNames property: The allowed resource names.
     * 
     * @return the allowedResourceNames value.
     */
    public List<AllowedResourceName> allowedResourceNames() {
        return this.allowedResourceNames;
    }

    /**
     * Set the allowedResourceNames property: The allowed resource names.
     * 
     * @param allowedResourceNames the allowedResourceNames value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withAllowedResourceNames(List<AllowedResourceName> allowedResourceNames) {
        this.allowedResourceNames = allowedResourceNames;
        return this;
    }

    /**
     * Get the resourceCache property: Resource cache options.
     * 
     * @return the resourceCache value.
     */
    public ResourceTypeRegistrationPropertiesResourceCache resourceCache() {
        return this.resourceCache;
    }

    /**
     * Set the resourceCache property: Resource cache options.
     * 
     * @param resourceCache the resourceCache value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withResourceCache(ResourceTypeRegistrationPropertiesResourceCache resourceCache) {
        this.resourceCache = resourceCache;
        return this;
    }

    /**
     * Get the resourceQueryManagement property: Resource query management options.
     * 
     * @return the resourceQueryManagement value.
     */
    public ResourceTypeRegistrationPropertiesResourceQueryManagement resourceQueryManagement() {
        return this.resourceQueryManagement;
    }

    /**
     * Set the resourceQueryManagement property: Resource query management options.
     * 
     * @param resourceQueryManagement the resourceQueryManagement value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withResourceQueryManagement(ResourceTypeRegistrationPropertiesResourceQueryManagement resourceQueryManagement) {
        this.resourceQueryManagement = resourceQueryManagement;
        return this;
    }

    /**
     * Get the supportsTags property: Whether tags are supported.
     * 
     * @return the supportsTags value.
     */
    public Boolean supportsTags() {
        return this.supportsTags;
    }

    /**
     * Set the supportsTags property: Whether tags are supported.
     * 
     * @param supportsTags the supportsTags value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withSupportsTags(Boolean supportsTags) {
        this.supportsTags = supportsTags;
        return this;
    }

    /**
     * Get the resourceManagementOptions property: Resource management options.
     * 
     * @return the resourceManagementOptions value.
     */
    public ResourceTypeRegistrationPropertiesResourceManagementOptions resourceManagementOptions() {
        return this.resourceManagementOptions;
    }

    /**
     * Set the resourceManagementOptions property: Resource management options.
     * 
     * @param resourceManagementOptions the resourceManagementOptions value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withResourceManagementOptions(
        ResourceTypeRegistrationPropertiesResourceManagementOptions resourceManagementOptions) {
        this.resourceManagementOptions = resourceManagementOptions;
        return this;
    }

    /**
     * Get the groupingTag property: Grouping tag.
     * 
     * @return the groupingTag value.
     */
    public String groupingTag() {
        return this.groupingTag;
    }

    /**
     * Set the groupingTag property: Grouping tag.
     * 
     * @param groupingTag the groupingTag value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withGroupingTag(String groupingTag) {
        this.groupingTag = groupingTag;
        return this;
    }

    /**
     * Get the addResourceListTargetLocations property: Add resource list target locations?.
     * 
     * @return the addResourceListTargetLocations value.
     */
    public Boolean addResourceListTargetLocations() {
        return this.addResourceListTargetLocations;
    }

    /**
     * Set the addResourceListTargetLocations property: Add resource list target locations?.
     * 
     * @param addResourceListTargetLocations the addResourceListTargetLocations value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withAddResourceListTargetLocations(Boolean addResourceListTargetLocations) {
        this.addResourceListTargetLocations = addResourceListTargetLocations;
        return this;
    }

    /**
     * Get the resourceTypeCommonAttributeManagement property: Resource type common attribute management.
     * 
     * @return the resourceTypeCommonAttributeManagement value.
     */
    public ResourceTypeRegistrationPropertiesResourceTypeCommonAttributeManagement
        resourceTypeCommonAttributeManagement() {
        return this.resourceTypeCommonAttributeManagement;
    }

    /**
     * Set the resourceTypeCommonAttributeManagement property: Resource type common attribute management.
     * 
     * @param resourceTypeCommonAttributeManagement the resourceTypeCommonAttributeManagement value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withResourceTypeCommonAttributeManagement(
        ResourceTypeRegistrationPropertiesResourceTypeCommonAttributeManagement resourceTypeCommonAttributeManagement) {
        this.resourceTypeCommonAttributeManagement = resourceTypeCommonAttributeManagement;
        return this;
    }

    /**
     * Get the routingRule property: Routing rule.
     * 
     * @return the routingRule value.
     */
    public ResourceTypeRegistrationPropertiesRoutingRule routingRule() {
        return this.routingRule;
    }

    /**
     * Set the routingRule property: Routing rule.
     * 
     * @param routingRule the routingRule value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withRoutingRule(ResourceTypeRegistrationPropertiesRoutingRule routingRule) {
        this.routingRule = routingRule;
        return this;
    }

    /**
     * Get the frontdoorRequestMode property: The frontdoor request mode.
     * 
     * @return the frontdoorRequestMode value.
     */
    public FrontdoorRequestMode frontdoorRequestMode() {
        return this.frontdoorRequestMode;
    }

    /**
     * Set the frontdoorRequestMode property: The frontdoor request mode.
     * 
     * @param frontdoorRequestMode the frontdoorRequestMode value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withFrontdoorRequestMode(FrontdoorRequestMode frontdoorRequestMode) {
        this.frontdoorRequestMode = frontdoorRequestMode;
        return this;
    }

    /**
     * Get the resourceSubType property: The resource sub type.
     * 
     * @return the resourceSubType value.
     */
    public ResourceSubType resourceSubType() {
        return this.resourceSubType;
    }

    /**
     * Set the resourceSubType property: The resource sub type.
     * 
     * @param resourceSubType the resourceSubType value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties withResourceSubType(ResourceSubType resourceSubType) {
        this.resourceSubType = resourceSubType;
        return this;
    }

    /**
     * Get the asyncOperationResourceTypeName property: The async operation resource type name.
     * 
     * @return the asyncOperationResourceTypeName value.
     */
    public String asyncOperationResourceTypeName() {
        return this.asyncOperationResourceTypeName;
    }

    /**
     * Set the asyncOperationResourceTypeName property: The async operation resource type name.
     * 
     * @param asyncOperationResourceTypeName the asyncOperationResourceTypeName value to set.
     * @return the ResourceTypeRegistrationProperties object itself.
     */
    public ResourceTypeRegistrationProperties
        withAsyncOperationResourceTypeName(String asyncOperationResourceTypeName) {
        this.asyncOperationResourceTypeName = asyncOperationResourceTypeName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (endpoints() != null) {
            endpoints().forEach(e -> e.validate());
        }
        if (extensionOptions() != null) {
            extensionOptions().validate();
        }
        if (swaggerSpecifications() != null) {
            swaggerSpecifications().forEach(e -> e.validate());
        }
        if (allowedUnauthorizedActionsExtensions() != null) {
            allowedUnauthorizedActionsExtensions().forEach(e -> e.validate());
        }
        if (authorizationActionMappings() != null) {
            authorizationActionMappings().forEach(e -> e.validate());
        }
        if (linkedAccessChecks() != null) {
            linkedAccessChecks().forEach(e -> e.validate());
        }
        if (loggingRules() != null) {
            loggingRules().forEach(e -> e.validate());
        }
        if (throttlingRules() != null) {
            throttlingRules().forEach(e -> e.validate());
        }
        if (featuresRule() != null) {
            featuresRule().validate();
        }
        if (subscriptionLifecycleNotificationSpecifications() != null) {
            subscriptionLifecycleNotificationSpecifications().validate();
        }
        if (identityManagement() != null) {
            identityManagement().validate();
        }
        if (checkNameAvailabilitySpecifications() != null) {
            checkNameAvailabilitySpecifications().validate();
        }
        if (serviceTreeInfos() != null) {
            serviceTreeInfos().forEach(e -> e.validate());
        }
        if (requestHeaderOptions() != null) {
            requestHeaderOptions().validate();
        }
        if (subscriptionStateRules() != null) {
            subscriptionStateRules().forEach(e -> e.validate());
        }
        if (templateDeploymentOptions() != null) {
            templateDeploymentOptions().validate();
        }
        if (extendedLocations() != null) {
            extendedLocations().forEach(e -> e.validate());
        }
        if (resourceMovePolicy() != null) {
            resourceMovePolicy().validate();
        }
        if (resourceConcurrencyControlOptions() != null) {
            resourceConcurrencyControlOptions().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (resourceGraphConfiguration() != null) {
            resourceGraphConfiguration().validate();
        }
        if (management() != null) {
            management().validate();
        }
        if (openApiConfiguration() != null) {
            openApiConfiguration().validate();
        }
        if (onBehalfOfTokens() != null) {
            onBehalfOfTokens().validate();
        }
        if (quotaRule() != null) {
            quotaRule().validate();
        }
        if (notifications() != null) {
            notifications().forEach(e -> e.validate());
        }
        if (linkedNotificationRules() != null) {
            linkedNotificationRules().forEach(e -> e.validate());
        }
        if (resourceProviderAuthorizationRules() != null) {
            resourceProviderAuthorizationRules().validate();
        }
        if (tokenAuthConfiguration() != null) {
            tokenAuthConfiguration().validate();
        }
        if (templateDeploymentPolicy() != null) {
            templateDeploymentPolicy().validate();
        }
        if (availabilityZoneRule() != null) {
            availabilityZoneRule().validate();
        }
        if (dstsConfiguration() != null) {
            dstsConfiguration().validate();
        }
        if (asyncTimeoutRules() != null) {
            asyncTimeoutRules().forEach(e -> e.validate());
        }
        if (apiProfiles() != null) {
            apiProfiles().forEach(e -> e.validate());
        }
        if (linkedOperationRules() != null) {
            linkedOperationRules().forEach(e -> e.validate());
        }
        if (legacyPolicy() != null) {
            legacyPolicy().validate();
        }
        if (capacityRule() != null) {
            capacityRule().validate();
        }
        if (marketplaceOptions() != null) {
            marketplaceOptions().validate();
        }
        if (allowedResourceNames() != null) {
            allowedResourceNames().forEach(e -> e.validate());
        }
        if (resourceCache() != null) {
            resourceCache().validate();
        }
        if (resourceQueryManagement() != null) {
            resourceQueryManagement().validate();
        }
        if (resourceManagementOptions() != null) {
            resourceManagementOptions().validate();
        }
        if (resourceTypeCommonAttributeManagement() != null) {
            resourceTypeCommonAttributeManagement().validate();
        }
        if (routingRule() != null) {
            routingRule().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("routingType", this.routingType == null ? null : this.routingType.toString());
        jsonWriter.writeStringField("additionalOptions",
            this.additionalOptions == null ? null : this.additionalOptions.toString());
        jsonWriter.writeStringField("crossTenantTokenValidation",
            this.crossTenantTokenValidation == null ? null : this.crossTenantTokenValidation.toString());
        jsonWriter.writeStringField("regionality", this.regionality == null ? null : this.regionality.toString());
        jsonWriter.writeArrayField("endpoints", this.endpoints, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("extensionOptions", this.extensionOptions);
        jsonWriter.writeStringField("marketplaceType",
            this.marketplaceType == null ? null : this.marketplaceType.toString());
        jsonWriter.writeArrayField("swaggerSpecifications", this.swaggerSpecifications,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("allowedUnauthorizedActions", this.allowedUnauthorizedActions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("allowedUnauthorizedActionsExtensions", this.allowedUnauthorizedActionsExtensions,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("authorizationActionMappings", this.authorizationActionMappings,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("linkedAccessChecks", this.linkedAccessChecks,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("defaultApiVersion", this.defaultApiVersion);
        jsonWriter.writeArrayField("loggingRules", this.loggingRules, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("throttlingRules", this.throttlingRules,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("requiredFeatures", this.requiredFeatures,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("featuresRule", this.featuresRule);
        jsonWriter.writeBooleanField("enableAsyncOperation", this.enableAsyncOperation);
        jsonWriter.writeBooleanField("enableThirdPartyS2S", this.enableThirdPartyS2S);
        jsonWriter.writeJsonField("subscriptionLifecycleNotificationSpecifications",
            this.subscriptionLifecycleNotificationSpecifications);
        jsonWriter.writeBooleanField("isPureProxy", this.isPureProxy);
        jsonWriter.writeJsonField("identityManagement", this.identityManagement);
        jsonWriter.writeJsonField("checkNameAvailabilitySpecifications", this.checkNameAvailabilitySpecifications);
        jsonWriter.writeArrayField("disallowedActionVerbs", this.disallowedActionVerbs,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("serviceTreeInfos", this.serviceTreeInfos,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("requestHeaderOptions", this.requestHeaderOptions);
        jsonWriter.writeArrayField("subscriptionStateRules", this.subscriptionStateRules,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("templateDeploymentOptions", this.templateDeploymentOptions);
        jsonWriter.writeArrayField("extendedLocations", this.extendedLocations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("resourceMovePolicy", this.resourceMovePolicy);
        jsonWriter.writeStringField("resourceDeletionPolicy",
            this.resourceDeletionPolicy == null ? null : this.resourceDeletionPolicy.toString());
        jsonWriter.writeMapField("resourceConcurrencyControlOptions", this.resourceConcurrencyControlOptions,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("resourceGraphConfiguration", this.resourceGraphConfiguration);
        jsonWriter.writeJsonField("management", this.management);
        jsonWriter.writeJsonField("openApiConfiguration", this.openApiConfiguration);
        jsonWriter.writeJsonField("onBehalfOfTokens", this.onBehalfOfTokens);
        jsonWriter.writeStringField("category", this.category == null ? null : this.category.toString());
        jsonWriter.writeStringField("resourceValidation",
            this.resourceValidation == null ? null : this.resourceValidation.toString());
        jsonWriter.writeArrayField("disallowedEndUserOperations", this.disallowedEndUserOperations,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("skuLink", this.skuLink);
        jsonWriter.writeJsonField("quotaRule", this.quotaRule);
        jsonWriter.writeArrayField("notifications", this.notifications, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("linkedNotificationRules", this.linkedNotificationRules,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("resourceProviderAuthorizationRules", this.resourceProviderAuthorizationRules);
        jsonWriter.writeJsonField("tokenAuthConfiguration", this.tokenAuthConfiguration);
        jsonWriter.writeJsonField("templateDeploymentPolicy", this.templateDeploymentPolicy);
        jsonWriter.writeBooleanField("allowEmptyRoleAssignments", this.allowEmptyRoleAssignments);
        jsonWriter.writeStringField("policyExecutionType",
            this.policyExecutionType == null ? null : this.policyExecutionType.toString());
        jsonWriter.writeJsonField("availabilityZoneRule", this.availabilityZoneRule);
        jsonWriter.writeJsonField("dstsConfiguration", this.dstsConfiguration);
        jsonWriter.writeArrayField("asyncTimeoutRules", this.asyncTimeoutRules,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("commonApiVersions", this.commonApiVersions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("apiProfiles", this.apiProfiles, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("linkedOperationRules", this.linkedOperationRules,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("legacyName", this.legacyName);
        jsonWriter.writeArrayField("legacyNames", this.legacyNames, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("allowedTemplateDeploymentReferenceActions",
            this.allowedTemplateDeploymentReferenceActions, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("legacyPolicy", this.legacyPolicy);
        jsonWriter.writeStringField("manifestLink", this.manifestLink);
        jsonWriter.writeJsonField("capacityRule", this.capacityRule);
        jsonWriter.writeJsonField("marketplaceOptions", this.marketplaceOptions);
        jsonWriter.writeArrayField("allowedResourceNames", this.allowedResourceNames,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("resourceCache", this.resourceCache);
        jsonWriter.writeJsonField("resourceQueryManagement", this.resourceQueryManagement);
        jsonWriter.writeBooleanField("supportsTags", this.supportsTags);
        jsonWriter.writeJsonField("resourceManagementOptions", this.resourceManagementOptions);
        jsonWriter.writeStringField("groupingTag", this.groupingTag);
        jsonWriter.writeBooleanField("addResourceListTargetLocations", this.addResourceListTargetLocations);
        jsonWriter.writeJsonField("resourceTypeCommonAttributeManagement", this.resourceTypeCommonAttributeManagement);
        jsonWriter.writeJsonField("routingRule", this.routingRule);
        jsonWriter.writeStringField("frontdoorRequestMode",
            this.frontdoorRequestMode == null ? null : this.frontdoorRequestMode.toString());
        jsonWriter.writeStringField("resourceSubType",
            this.resourceSubType == null ? null : this.resourceSubType.toString());
        jsonWriter.writeStringField("asyncOperationResourceTypeName", this.asyncOperationResourceTypeName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceTypeRegistrationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceTypeRegistrationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceTypeRegistrationProperties.
     */
    public static ResourceTypeRegistrationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceTypeRegistrationProperties deserializedResourceTypeRegistrationProperties
                = new ResourceTypeRegistrationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("routingType".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.routingType
                        = RoutingType.fromString(reader.getString());
                } else if ("additionalOptions".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.additionalOptions
                        = AdditionalOptionsResourceTypeRegistration.fromString(reader.getString());
                } else if ("crossTenantTokenValidation".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.crossTenantTokenValidation
                        = CrossTenantTokenValidation.fromString(reader.getString());
                } else if ("regionality".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.regionality
                        = Regionality.fromString(reader.getString());
                } else if ("endpoints".equals(fieldName)) {
                    List<ResourceTypeEndpoint> endpoints
                        = reader.readArray(reader1 -> ResourceTypeEndpoint.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.endpoints = endpoints;
                } else if ("extensionOptions".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.extensionOptions
                        = ResourceTypeRegistrationPropertiesExtensionOptions.fromJson(reader);
                } else if ("marketplaceType".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.marketplaceType
                        = MarketplaceType.fromString(reader.getString());
                } else if ("swaggerSpecifications".equals(fieldName)) {
                    List<SwaggerSpecification> swaggerSpecifications
                        = reader.readArray(reader1 -> SwaggerSpecification.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.swaggerSpecifications = swaggerSpecifications;
                } else if ("allowedUnauthorizedActions".equals(fieldName)) {
                    List<String> allowedUnauthorizedActions = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceTypeRegistrationProperties.allowedUnauthorizedActions
                        = allowedUnauthorizedActions;
                } else if ("allowedUnauthorizedActionsExtensions".equals(fieldName)) {
                    List<AllowedUnauthorizedActionsExtension> allowedUnauthorizedActionsExtensions
                        = reader.readArray(reader1 -> AllowedUnauthorizedActionsExtension.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.allowedUnauthorizedActionsExtensions
                        = allowedUnauthorizedActionsExtensions;
                } else if ("authorizationActionMappings".equals(fieldName)) {
                    List<AuthorizationActionMapping> authorizationActionMappings
                        = reader.readArray(reader1 -> AuthorizationActionMapping.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.authorizationActionMappings
                        = authorizationActionMappings;
                } else if ("linkedAccessChecks".equals(fieldName)) {
                    List<LinkedAccessCheck> linkedAccessChecks
                        = reader.readArray(reader1 -> LinkedAccessCheck.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.linkedAccessChecks = linkedAccessChecks;
                } else if ("defaultApiVersion".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.defaultApiVersion = reader.getString();
                } else if ("loggingRules".equals(fieldName)) {
                    List<LoggingRule> loggingRules = reader.readArray(reader1 -> LoggingRule.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.loggingRules = loggingRules;
                } else if ("throttlingRules".equals(fieldName)) {
                    List<ThrottlingRule> throttlingRules
                        = reader.readArray(reader1 -> ThrottlingRule.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.throttlingRules = throttlingRules;
                } else if ("requiredFeatures".equals(fieldName)) {
                    List<String> requiredFeatures = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceTypeRegistrationProperties.requiredFeatures = requiredFeatures;
                } else if ("featuresRule".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.featuresRule
                        = ResourceTypeRegistrationPropertiesFeaturesRule.fromJson(reader);
                } else if ("enableAsyncOperation".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.enableAsyncOperation
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("enableThirdPartyS2S".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.enableThirdPartyS2S
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("subscriptionLifecycleNotificationSpecifications".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.subscriptionLifecycleNotificationSpecifications
                        = ResourceTypeRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications
                            .fromJson(reader);
                } else if ("isPureProxy".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.isPureProxy
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("identityManagement".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.identityManagement
                        = ResourceTypeRegistrationPropertiesIdentityManagement.fromJson(reader);
                } else if ("checkNameAvailabilitySpecifications".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.checkNameAvailabilitySpecifications
                        = ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications.fromJson(reader);
                } else if ("disallowedActionVerbs".equals(fieldName)) {
                    List<String> disallowedActionVerbs = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceTypeRegistrationProperties.disallowedActionVerbs = disallowedActionVerbs;
                } else if ("serviceTreeInfos".equals(fieldName)) {
                    List<ServiceTreeInfo> serviceTreeInfos
                        = reader.readArray(reader1 -> ServiceTreeInfo.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.serviceTreeInfos = serviceTreeInfos;
                } else if ("requestHeaderOptions".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.requestHeaderOptions
                        = ResourceTypeRegistrationPropertiesRequestHeaderOptions.fromJson(reader);
                } else if ("subscriptionStateRules".equals(fieldName)) {
                    List<SubscriptionStateRule> subscriptionStateRules
                        = reader.readArray(reader1 -> SubscriptionStateRule.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.subscriptionStateRules = subscriptionStateRules;
                } else if ("templateDeploymentOptions".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.templateDeploymentOptions
                        = ResourceTypeRegistrationPropertiesTemplateDeploymentOptions.fromJson(reader);
                } else if ("extendedLocations".equals(fieldName)) {
                    List<ExtendedLocationOptions> extendedLocations
                        = reader.readArray(reader1 -> ExtendedLocationOptions.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.extendedLocations = extendedLocations;
                } else if ("resourceMovePolicy".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.resourceMovePolicy
                        = ResourceTypeRegistrationPropertiesResourceMovePolicy.fromJson(reader);
                } else if ("resourceDeletionPolicy".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.resourceDeletionPolicy
                        = ResourceDeletionPolicy.fromString(reader.getString());
                } else if ("resourceConcurrencyControlOptions".equals(fieldName)) {
                    Map<String, ResourceConcurrencyControlOption> resourceConcurrencyControlOptions
                        = reader.readMap(reader1 -> ResourceConcurrencyControlOption.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.resourceConcurrencyControlOptions
                        = resourceConcurrencyControlOptions;
                } else if ("resourceGraphConfiguration".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.resourceGraphConfiguration
                        = ResourceTypeRegistrationPropertiesResourceGraphConfiguration.fromJson(reader);
                } else if ("management".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.management
                        = ResourceTypeRegistrationPropertiesManagement.fromJson(reader);
                } else if ("openApiConfiguration".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.openApiConfiguration
                        = OpenApiConfiguration.fromJson(reader);
                } else if ("onBehalfOfTokens".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.onBehalfOfTokens
                        = ResourceTypeOnBehalfOfToken.fromJson(reader);
                } else if ("category".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.category
                        = ResourceTypeCategory.fromString(reader.getString());
                } else if ("resourceValidation".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.resourceValidation
                        = ResourceValidation.fromString(reader.getString());
                } else if ("disallowedEndUserOperations".equals(fieldName)) {
                    List<String> disallowedEndUserOperations = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceTypeRegistrationProperties.disallowedEndUserOperations
                        = disallowedEndUserOperations;
                } else if ("metadata".equals(fieldName)) {
                    Map<String, Object> metadata = reader.readMap(reader1 -> reader1.readUntyped());
                    deserializedResourceTypeRegistrationProperties.metadata = metadata;
                } else if ("skuLink".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.skuLink = reader.getString();
                } else if ("quotaRule".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.quotaRule = QuotaRule.fromJson(reader);
                } else if ("notifications".equals(fieldName)) {
                    List<Notification> notifications = reader.readArray(reader1 -> Notification.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.notifications = notifications;
                } else if ("linkedNotificationRules".equals(fieldName)) {
                    List<LinkedNotificationRule> linkedNotificationRules
                        = reader.readArray(reader1 -> LinkedNotificationRule.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.linkedNotificationRules = linkedNotificationRules;
                } else if ("resourceProviderAuthorizationRules".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.resourceProviderAuthorizationRules
                        = ResourceProviderAuthorizationRules.fromJson(reader);
                } else if ("tokenAuthConfiguration".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.tokenAuthConfiguration
                        = TokenAuthConfiguration.fromJson(reader);
                } else if ("templateDeploymentPolicy".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.templateDeploymentPolicy
                        = ResourceTypeRegistrationPropertiesTemplateDeploymentPolicy.fromJson(reader);
                } else if ("allowEmptyRoleAssignments".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.allowEmptyRoleAssignments
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("policyExecutionType".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.policyExecutionType
                        = PolicyExecutionType.fromString(reader.getString());
                } else if ("availabilityZoneRule".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.availabilityZoneRule
                        = ResourceTypeRegistrationPropertiesAvailabilityZoneRule.fromJson(reader);
                } else if ("dstsConfiguration".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.dstsConfiguration
                        = ResourceTypeRegistrationPropertiesDstsConfiguration.fromJson(reader);
                } else if ("asyncTimeoutRules".equals(fieldName)) {
                    List<AsyncTimeoutRule> asyncTimeoutRules
                        = reader.readArray(reader1 -> AsyncTimeoutRule.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.asyncTimeoutRules = asyncTimeoutRules;
                } else if ("commonApiVersions".equals(fieldName)) {
                    List<String> commonApiVersions = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceTypeRegistrationProperties.commonApiVersions = commonApiVersions;
                } else if ("apiProfiles".equals(fieldName)) {
                    List<ApiProfile> apiProfiles = reader.readArray(reader1 -> ApiProfile.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.apiProfiles = apiProfiles;
                } else if ("linkedOperationRules".equals(fieldName)) {
                    List<LinkedOperationRule> linkedOperationRules
                        = reader.readArray(reader1 -> LinkedOperationRule.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.linkedOperationRules = linkedOperationRules;
                } else if ("legacyName".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.legacyName = reader.getString();
                } else if ("legacyNames".equals(fieldName)) {
                    List<String> legacyNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceTypeRegistrationProperties.legacyNames = legacyNames;
                } else if ("allowedTemplateDeploymentReferenceActions".equals(fieldName)) {
                    List<String> allowedTemplateDeploymentReferenceActions
                        = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceTypeRegistrationProperties.allowedTemplateDeploymentReferenceActions
                        = allowedTemplateDeploymentReferenceActions;
                } else if ("legacyPolicy".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.legacyPolicy
                        = ResourceTypeRegistrationPropertiesLegacyPolicy.fromJson(reader);
                } else if ("manifestLink".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.manifestLink = reader.getString();
                } else if ("capacityRule".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.capacityRule
                        = ResourceTypeRegistrationPropertiesCapacityRule.fromJson(reader);
                } else if ("marketplaceOptions".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.marketplaceOptions
                        = ResourceTypeRegistrationPropertiesMarketplaceOptions.fromJson(reader);
                } else if ("allowedResourceNames".equals(fieldName)) {
                    List<AllowedResourceName> allowedResourceNames
                        = reader.readArray(reader1 -> AllowedResourceName.fromJson(reader1));
                    deserializedResourceTypeRegistrationProperties.allowedResourceNames = allowedResourceNames;
                } else if ("resourceCache".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.resourceCache
                        = ResourceTypeRegistrationPropertiesResourceCache.fromJson(reader);
                } else if ("resourceQueryManagement".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.resourceQueryManagement
                        = ResourceTypeRegistrationPropertiesResourceQueryManagement.fromJson(reader);
                } else if ("supportsTags".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.supportsTags
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("resourceManagementOptions".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.resourceManagementOptions
                        = ResourceTypeRegistrationPropertiesResourceManagementOptions.fromJson(reader);
                } else if ("groupingTag".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.groupingTag = reader.getString();
                } else if ("addResourceListTargetLocations".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.addResourceListTargetLocations
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("resourceTypeCommonAttributeManagement".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.resourceTypeCommonAttributeManagement
                        = ResourceTypeRegistrationPropertiesResourceTypeCommonAttributeManagement.fromJson(reader);
                } else if ("routingRule".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.routingRule
                        = ResourceTypeRegistrationPropertiesRoutingRule.fromJson(reader);
                } else if ("frontdoorRequestMode".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.frontdoorRequestMode
                        = FrontdoorRequestMode.fromString(reader.getString());
                } else if ("resourceSubType".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.resourceSubType
                        = ResourceSubType.fromString(reader.getString());
                } else if ("asyncOperationResourceTypeName".equals(fieldName)) {
                    deserializedResourceTypeRegistrationProperties.asyncOperationResourceTypeName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceTypeRegistrationProperties;
        });
    }
}
