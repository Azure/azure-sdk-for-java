// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Display information of the operation.
 */
@Fluent
public final class LocalizedOperationDefinitionDisplay extends LocalizedOperationDisplayDefinition {
    /**
     * Creates an instance of LocalizedOperationDefinitionDisplay class.
     */
    public LocalizedOperationDefinitionDisplay() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalizedOperationDefinitionDisplay
        withDefaultProperty(LocalizedOperationDisplayDefinitionDefault defaultProperty) {
        super.withDefaultProperty(defaultProperty);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalizedOperationDefinitionDisplay withEn(LocalizedOperationDisplayDefinitionEn en) {
        super.withEn(en);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalizedOperationDefinitionDisplay withCs(LocalizedOperationDisplayDefinitionCs cs) {
        super.withCs(cs);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalizedOperationDefinitionDisplay withDe(LocalizedOperationDisplayDefinitionDe de) {
        super.withDe(de);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalizedOperationDefinitionDisplay withEs(LocalizedOperationDisplayDefinitionEs es) {
        super.withEs(es);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalizedOperationDefinitionDisplay withFr(LocalizedOperationDisplayDefinitionFr fr) {
        super.withFr(fr);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalizedOperationDefinitionDisplay withHu(LocalizedOperationDisplayDefinitionHu hu) {
        super.withHu(hu);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalizedOperationDefinitionDisplay withIt(LocalizedOperationDisplayDefinitionIt it) {
        super.withIt(it);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalizedOperationDefinitionDisplay withJa(LocalizedOperationDisplayDefinitionJa ja) {
        super.withJa(ja);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalizedOperationDefinitionDisplay withKo(LocalizedOperationDisplayDefinitionKo ko) {
        super.withKo(ko);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalizedOperationDefinitionDisplay withNl(LocalizedOperationDisplayDefinitionNl nl) {
        super.withNl(nl);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalizedOperationDefinitionDisplay withPl(LocalizedOperationDisplayDefinitionPl pl) {
        super.withPl(pl);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalizedOperationDefinitionDisplay withPtBR(LocalizedOperationDisplayDefinitionPtBR ptBR) {
        super.withPtBR(ptBR);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalizedOperationDefinitionDisplay withPt(LocalizedOperationDisplayDefinitionPt pt) {
        super.withPt(pt);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalizedOperationDefinitionDisplay withRu(LocalizedOperationDisplayDefinitionRu ru) {
        super.withRu(ru);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalizedOperationDefinitionDisplay withSv(LocalizedOperationDisplayDefinitionSv sv) {
        super.withSv(sv);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalizedOperationDefinitionDisplay withZhHans(LocalizedOperationDisplayDefinitionZhHans zhHans) {
        super.withZhHans(zhHans);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalizedOperationDefinitionDisplay withZhHant(LocalizedOperationDisplayDefinitionZhHant zhHant) {
        super.withZhHant(zhHant);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (defaultProperty() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property defaultProperty in model LocalizedOperationDefinitionDisplay"));
        } else {
            defaultProperty().validate();
        }
        if (en() != null) {
            en().validate();
        }
        if (cs() != null) {
            cs().validate();
        }
        if (de() != null) {
            de().validate();
        }
        if (es() != null) {
            es().validate();
        }
        if (fr() != null) {
            fr().validate();
        }
        if (hu() != null) {
            hu().validate();
        }
        if (it() != null) {
            it().validate();
        }
        if (ja() != null) {
            ja().validate();
        }
        if (ko() != null) {
            ko().validate();
        }
        if (nl() != null) {
            nl().validate();
        }
        if (pl() != null) {
            pl().validate();
        }
        if (ptBR() != null) {
            ptBR().validate();
        }
        if (pt() != null) {
            pt().validate();
        }
        if (ru() != null) {
            ru().validate();
        }
        if (sv() != null) {
            sv().validate();
        }
        if (zhHans() != null) {
            zhHans().validate();
        }
        if (zhHant() != null) {
            zhHant().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LocalizedOperationDefinitionDisplay.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("default", defaultProperty());
        jsonWriter.writeJsonField("en", en());
        jsonWriter.writeJsonField("cs", cs());
        jsonWriter.writeJsonField("de", de());
        jsonWriter.writeJsonField("es", es());
        jsonWriter.writeJsonField("fr", fr());
        jsonWriter.writeJsonField("hu", hu());
        jsonWriter.writeJsonField("it", it());
        jsonWriter.writeJsonField("ja", ja());
        jsonWriter.writeJsonField("ko", ko());
        jsonWriter.writeJsonField("nl", nl());
        jsonWriter.writeJsonField("pl", pl());
        jsonWriter.writeJsonField("ptBR", ptBR());
        jsonWriter.writeJsonField("ptPT", pt());
        jsonWriter.writeJsonField("ru", ru());
        jsonWriter.writeJsonField("sv", sv());
        jsonWriter.writeJsonField("zhHans", zhHans());
        jsonWriter.writeJsonField("zhHant", zhHant());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LocalizedOperationDefinitionDisplay from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LocalizedOperationDefinitionDisplay if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LocalizedOperationDefinitionDisplay.
     */
    public static LocalizedOperationDefinitionDisplay fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LocalizedOperationDefinitionDisplay deserializedLocalizedOperationDefinitionDisplay
                = new LocalizedOperationDefinitionDisplay();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("default".equals(fieldName)) {
                    deserializedLocalizedOperationDefinitionDisplay
                        .withDefaultProperty(LocalizedOperationDisplayDefinitionDefault.fromJson(reader));
                } else if ("en".equals(fieldName)) {
                    deserializedLocalizedOperationDefinitionDisplay
                        .withEn(LocalizedOperationDisplayDefinitionEn.fromJson(reader));
                } else if ("cs".equals(fieldName)) {
                    deserializedLocalizedOperationDefinitionDisplay
                        .withCs(LocalizedOperationDisplayDefinitionCs.fromJson(reader));
                } else if ("de".equals(fieldName)) {
                    deserializedLocalizedOperationDefinitionDisplay
                        .withDe(LocalizedOperationDisplayDefinitionDe.fromJson(reader));
                } else if ("es".equals(fieldName)) {
                    deserializedLocalizedOperationDefinitionDisplay
                        .withEs(LocalizedOperationDisplayDefinitionEs.fromJson(reader));
                } else if ("fr".equals(fieldName)) {
                    deserializedLocalizedOperationDefinitionDisplay
                        .withFr(LocalizedOperationDisplayDefinitionFr.fromJson(reader));
                } else if ("hu".equals(fieldName)) {
                    deserializedLocalizedOperationDefinitionDisplay
                        .withHu(LocalizedOperationDisplayDefinitionHu.fromJson(reader));
                } else if ("it".equals(fieldName)) {
                    deserializedLocalizedOperationDefinitionDisplay
                        .withIt(LocalizedOperationDisplayDefinitionIt.fromJson(reader));
                } else if ("ja".equals(fieldName)) {
                    deserializedLocalizedOperationDefinitionDisplay
                        .withJa(LocalizedOperationDisplayDefinitionJa.fromJson(reader));
                } else if ("ko".equals(fieldName)) {
                    deserializedLocalizedOperationDefinitionDisplay
                        .withKo(LocalizedOperationDisplayDefinitionKo.fromJson(reader));
                } else if ("nl".equals(fieldName)) {
                    deserializedLocalizedOperationDefinitionDisplay
                        .withNl(LocalizedOperationDisplayDefinitionNl.fromJson(reader));
                } else if ("pl".equals(fieldName)) {
                    deserializedLocalizedOperationDefinitionDisplay
                        .withPl(LocalizedOperationDisplayDefinitionPl.fromJson(reader));
                } else if ("ptBR".equals(fieldName)) {
                    deserializedLocalizedOperationDefinitionDisplay
                        .withPtBR(LocalizedOperationDisplayDefinitionPtBR.fromJson(reader));
                } else if ("ptPT".equals(fieldName)) {
                    deserializedLocalizedOperationDefinitionDisplay
                        .withPt(LocalizedOperationDisplayDefinitionPt.fromJson(reader));
                } else if ("ru".equals(fieldName)) {
                    deserializedLocalizedOperationDefinitionDisplay
                        .withRu(LocalizedOperationDisplayDefinitionRu.fromJson(reader));
                } else if ("sv".equals(fieldName)) {
                    deserializedLocalizedOperationDefinitionDisplay
                        .withSv(LocalizedOperationDisplayDefinitionSv.fromJson(reader));
                } else if ("zhHans".equals(fieldName)) {
                    deserializedLocalizedOperationDefinitionDisplay
                        .withZhHans(LocalizedOperationDisplayDefinitionZhHans.fromJson(reader));
                } else if ("zhHant".equals(fieldName)) {
                    deserializedLocalizedOperationDefinitionDisplay
                        .withZhHant(LocalizedOperationDisplayDefinitionZhHant.fromJson(reader));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLocalizedOperationDefinitionDisplay;
        });
    }
}
