// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The FanoutLinkedNotificationRule model.
 */
@Fluent
public final class FanoutLinkedNotificationRule implements JsonSerializable<FanoutLinkedNotificationRule> {
    /*
     * The token auth configuration.
     */
    private TokenAuthConfiguration tokenAuthConfiguration;

    /*
     * The actions.
     */
    private List<String> actions;

    /*
     * The endpoints.
     */
    private List<ResourceProviderEndpoint> endpoints;

    /*
     * The dsts configuration.
     */
    private FanoutLinkedNotificationRuleDstsConfiguration dstsConfiguration;

    /**
     * Creates an instance of FanoutLinkedNotificationRule class.
     */
    public FanoutLinkedNotificationRule() {
    }

    /**
     * Get the tokenAuthConfiguration property: The token auth configuration.
     * 
     * @return the tokenAuthConfiguration value.
     */
    public TokenAuthConfiguration tokenAuthConfiguration() {
        return this.tokenAuthConfiguration;
    }

    /**
     * Set the tokenAuthConfiguration property: The token auth configuration.
     * 
     * @param tokenAuthConfiguration the tokenAuthConfiguration value to set.
     * @return the FanoutLinkedNotificationRule object itself.
     */
    public FanoutLinkedNotificationRule withTokenAuthConfiguration(TokenAuthConfiguration tokenAuthConfiguration) {
        this.tokenAuthConfiguration = tokenAuthConfiguration;
        return this;
    }

    /**
     * Get the actions property: The actions.
     * 
     * @return the actions value.
     */
    public List<String> actions() {
        return this.actions;
    }

    /**
     * Set the actions property: The actions.
     * 
     * @param actions the actions value to set.
     * @return the FanoutLinkedNotificationRule object itself.
     */
    public FanoutLinkedNotificationRule withActions(List<String> actions) {
        this.actions = actions;
        return this;
    }

    /**
     * Get the endpoints property: The endpoints.
     * 
     * @return the endpoints value.
     */
    public List<ResourceProviderEndpoint> endpoints() {
        return this.endpoints;
    }

    /**
     * Set the endpoints property: The endpoints.
     * 
     * @param endpoints the endpoints value to set.
     * @return the FanoutLinkedNotificationRule object itself.
     */
    public FanoutLinkedNotificationRule withEndpoints(List<ResourceProviderEndpoint> endpoints) {
        this.endpoints = endpoints;
        return this;
    }

    /**
     * Get the dstsConfiguration property: The dsts configuration.
     * 
     * @return the dstsConfiguration value.
     */
    public FanoutLinkedNotificationRuleDstsConfiguration dstsConfiguration() {
        return this.dstsConfiguration;
    }

    /**
     * Set the dstsConfiguration property: The dsts configuration.
     * 
     * @param dstsConfiguration the dstsConfiguration value to set.
     * @return the FanoutLinkedNotificationRule object itself.
     */
    public FanoutLinkedNotificationRule
        withDstsConfiguration(FanoutLinkedNotificationRuleDstsConfiguration dstsConfiguration) {
        this.dstsConfiguration = dstsConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tokenAuthConfiguration() != null) {
            tokenAuthConfiguration().validate();
        }
        if (endpoints() != null) {
            endpoints().forEach(e -> e.validate());
        }
        if (dstsConfiguration() != null) {
            dstsConfiguration().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("tokenAuthConfiguration", this.tokenAuthConfiguration);
        jsonWriter.writeArrayField("actions", this.actions, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("endpoints", this.endpoints, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("dstsConfiguration", this.dstsConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FanoutLinkedNotificationRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FanoutLinkedNotificationRule if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FanoutLinkedNotificationRule.
     */
    public static FanoutLinkedNotificationRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FanoutLinkedNotificationRule deserializedFanoutLinkedNotificationRule = new FanoutLinkedNotificationRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tokenAuthConfiguration".equals(fieldName)) {
                    deserializedFanoutLinkedNotificationRule.tokenAuthConfiguration
                        = TokenAuthConfiguration.fromJson(reader);
                } else if ("actions".equals(fieldName)) {
                    List<String> actions = reader.readArray(reader1 -> reader1.getString());
                    deserializedFanoutLinkedNotificationRule.actions = actions;
                } else if ("endpoints".equals(fieldName)) {
                    List<ResourceProviderEndpoint> endpoints
                        = reader.readArray(reader1 -> ResourceProviderEndpoint.fromJson(reader1));
                    deserializedFanoutLinkedNotificationRule.endpoints = endpoints;
                } else if ("dstsConfiguration".equals(fieldName)) {
                    deserializedFanoutLinkedNotificationRule.dstsConfiguration
                        = FanoutLinkedNotificationRuleDstsConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFanoutLinkedNotificationRule;
        });
    }
}
