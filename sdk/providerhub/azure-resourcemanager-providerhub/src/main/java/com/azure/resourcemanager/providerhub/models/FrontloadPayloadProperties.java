// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The FrontloadPayloadProperties model.
 */
@Fluent
public final class FrontloadPayloadProperties implements JsonSerializable<FrontloadPayloadProperties> {
    /*
     * The operation type.
     */
    private String operationType;

    /*
     * The provider namespace.
     */
    private String providerNamespace;

    /*
     * The frontload location.
     */
    private String frontloadLocation;

    /*
     * The copy from location.
     */
    private String copyFromLocation;

    /*
     * The environment type.
     */
    private AvailableCheckInManifestEnvironment environmentType;

    /*
     * The service feature flag.
     */
    private ServiceFeatureFlagAction serviceFeatureFlag;

    /*
     * The resource types to include.
     */
    private List<String> includeResourceTypes;

    /*
     * The resource types to exclude.
     */
    private List<String> excludeResourceTypes;

    /*
     * The manifest level fields to override.
     */
    private FrontloadPayloadPropertiesOverrideManifestLevelFields overrideManifestLevelFields;

    /*
     * The endpoint level fields to override.
     */
    private FrontloadPayloadPropertiesOverrideEndpointLevelFields overrideEndpointLevelFields;

    /*
     * The fields to ignore.
     */
    private List<String> ignoreFields;

    /**
     * Creates an instance of FrontloadPayloadProperties class.
     */
    public FrontloadPayloadProperties() {
    }

    /**
     * Get the operationType property: The operation type.
     * 
     * @return the operationType value.
     */
    public String operationType() {
        return this.operationType;
    }

    /**
     * Set the operationType property: The operation type.
     * 
     * @param operationType the operationType value to set.
     * @return the FrontloadPayloadProperties object itself.
     */
    public FrontloadPayloadProperties withOperationType(String operationType) {
        this.operationType = operationType;
        return this;
    }

    /**
     * Get the providerNamespace property: The provider namespace.
     * 
     * @return the providerNamespace value.
     */
    public String providerNamespace() {
        return this.providerNamespace;
    }

    /**
     * Set the providerNamespace property: The provider namespace.
     * 
     * @param providerNamespace the providerNamespace value to set.
     * @return the FrontloadPayloadProperties object itself.
     */
    public FrontloadPayloadProperties withProviderNamespace(String providerNamespace) {
        this.providerNamespace = providerNamespace;
        return this;
    }

    /**
     * Get the frontloadLocation property: The frontload location.
     * 
     * @return the frontloadLocation value.
     */
    public String frontloadLocation() {
        return this.frontloadLocation;
    }

    /**
     * Set the frontloadLocation property: The frontload location.
     * 
     * @param frontloadLocation the frontloadLocation value to set.
     * @return the FrontloadPayloadProperties object itself.
     */
    public FrontloadPayloadProperties withFrontloadLocation(String frontloadLocation) {
        this.frontloadLocation = frontloadLocation;
        return this;
    }

    /**
     * Get the copyFromLocation property: The copy from location.
     * 
     * @return the copyFromLocation value.
     */
    public String copyFromLocation() {
        return this.copyFromLocation;
    }

    /**
     * Set the copyFromLocation property: The copy from location.
     * 
     * @param copyFromLocation the copyFromLocation value to set.
     * @return the FrontloadPayloadProperties object itself.
     */
    public FrontloadPayloadProperties withCopyFromLocation(String copyFromLocation) {
        this.copyFromLocation = copyFromLocation;
        return this;
    }

    /**
     * Get the environmentType property: The environment type.
     * 
     * @return the environmentType value.
     */
    public AvailableCheckInManifestEnvironment environmentType() {
        return this.environmentType;
    }

    /**
     * Set the environmentType property: The environment type.
     * 
     * @param environmentType the environmentType value to set.
     * @return the FrontloadPayloadProperties object itself.
     */
    public FrontloadPayloadProperties withEnvironmentType(AvailableCheckInManifestEnvironment environmentType) {
        this.environmentType = environmentType;
        return this;
    }

    /**
     * Get the serviceFeatureFlag property: The service feature flag.
     * 
     * @return the serviceFeatureFlag value.
     */
    public ServiceFeatureFlagAction serviceFeatureFlag() {
        return this.serviceFeatureFlag;
    }

    /**
     * Set the serviceFeatureFlag property: The service feature flag.
     * 
     * @param serviceFeatureFlag the serviceFeatureFlag value to set.
     * @return the FrontloadPayloadProperties object itself.
     */
    public FrontloadPayloadProperties withServiceFeatureFlag(ServiceFeatureFlagAction serviceFeatureFlag) {
        this.serviceFeatureFlag = serviceFeatureFlag;
        return this;
    }

    /**
     * Get the includeResourceTypes property: The resource types to include.
     * 
     * @return the includeResourceTypes value.
     */
    public List<String> includeResourceTypes() {
        return this.includeResourceTypes;
    }

    /**
     * Set the includeResourceTypes property: The resource types to include.
     * 
     * @param includeResourceTypes the includeResourceTypes value to set.
     * @return the FrontloadPayloadProperties object itself.
     */
    public FrontloadPayloadProperties withIncludeResourceTypes(List<String> includeResourceTypes) {
        this.includeResourceTypes = includeResourceTypes;
        return this;
    }

    /**
     * Get the excludeResourceTypes property: The resource types to exclude.
     * 
     * @return the excludeResourceTypes value.
     */
    public List<String> excludeResourceTypes() {
        return this.excludeResourceTypes;
    }

    /**
     * Set the excludeResourceTypes property: The resource types to exclude.
     * 
     * @param excludeResourceTypes the excludeResourceTypes value to set.
     * @return the FrontloadPayloadProperties object itself.
     */
    public FrontloadPayloadProperties withExcludeResourceTypes(List<String> excludeResourceTypes) {
        this.excludeResourceTypes = excludeResourceTypes;
        return this;
    }

    /**
     * Get the overrideManifestLevelFields property: The manifest level fields to override.
     * 
     * @return the overrideManifestLevelFields value.
     */
    public FrontloadPayloadPropertiesOverrideManifestLevelFields overrideManifestLevelFields() {
        return this.overrideManifestLevelFields;
    }

    /**
     * Set the overrideManifestLevelFields property: The manifest level fields to override.
     * 
     * @param overrideManifestLevelFields the overrideManifestLevelFields value to set.
     * @return the FrontloadPayloadProperties object itself.
     */
    public FrontloadPayloadProperties withOverrideManifestLevelFields(
        FrontloadPayloadPropertiesOverrideManifestLevelFields overrideManifestLevelFields) {
        this.overrideManifestLevelFields = overrideManifestLevelFields;
        return this;
    }

    /**
     * Get the overrideEndpointLevelFields property: The endpoint level fields to override.
     * 
     * @return the overrideEndpointLevelFields value.
     */
    public FrontloadPayloadPropertiesOverrideEndpointLevelFields overrideEndpointLevelFields() {
        return this.overrideEndpointLevelFields;
    }

    /**
     * Set the overrideEndpointLevelFields property: The endpoint level fields to override.
     * 
     * @param overrideEndpointLevelFields the overrideEndpointLevelFields value to set.
     * @return the FrontloadPayloadProperties object itself.
     */
    public FrontloadPayloadProperties withOverrideEndpointLevelFields(
        FrontloadPayloadPropertiesOverrideEndpointLevelFields overrideEndpointLevelFields) {
        this.overrideEndpointLevelFields = overrideEndpointLevelFields;
        return this;
    }

    /**
     * Get the ignoreFields property: The fields to ignore.
     * 
     * @return the ignoreFields value.
     */
    public List<String> ignoreFields() {
        return this.ignoreFields;
    }

    /**
     * Set the ignoreFields property: The fields to ignore.
     * 
     * @param ignoreFields the ignoreFields value to set.
     * @return the FrontloadPayloadProperties object itself.
     */
    public FrontloadPayloadProperties withIgnoreFields(List<String> ignoreFields) {
        this.ignoreFields = ignoreFields;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (operationType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property operationType in model FrontloadPayloadProperties"));
        }
        if (providerNamespace() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property providerNamespace in model FrontloadPayloadProperties"));
        }
        if (frontloadLocation() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property frontloadLocation in model FrontloadPayloadProperties"));
        }
        if (copyFromLocation() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property copyFromLocation in model FrontloadPayloadProperties"));
        }
        if (environmentType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property environmentType in model FrontloadPayloadProperties"));
        }
        if (serviceFeatureFlag() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property serviceFeatureFlag in model FrontloadPayloadProperties"));
        }
        if (includeResourceTypes() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property includeResourceTypes in model FrontloadPayloadProperties"));
        }
        if (excludeResourceTypes() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property excludeResourceTypes in model FrontloadPayloadProperties"));
        }
        if (overrideManifestLevelFields() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property overrideManifestLevelFields in model FrontloadPayloadProperties"));
        } else {
            overrideManifestLevelFields().validate();
        }
        if (overrideEndpointLevelFields() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property overrideEndpointLevelFields in model FrontloadPayloadProperties"));
        } else {
            overrideEndpointLevelFields().validate();
        }
        if (ignoreFields() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property ignoreFields in model FrontloadPayloadProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FrontloadPayloadProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("operationType", this.operationType);
        jsonWriter.writeStringField("providerNamespace", this.providerNamespace);
        jsonWriter.writeStringField("frontloadLocation", this.frontloadLocation);
        jsonWriter.writeStringField("copyFromLocation", this.copyFromLocation);
        jsonWriter.writeStringField("environmentType",
            this.environmentType == null ? null : this.environmentType.toString());
        jsonWriter.writeStringField("serviceFeatureFlag",
            this.serviceFeatureFlag == null ? null : this.serviceFeatureFlag.toString());
        jsonWriter.writeArrayField("includeResourceTypes", this.includeResourceTypes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("excludeResourceTypes", this.excludeResourceTypes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("overrideManifestLevelFields", this.overrideManifestLevelFields);
        jsonWriter.writeJsonField("overrideEndpointLevelFields", this.overrideEndpointLevelFields);
        jsonWriter.writeArrayField("ignoreFields", this.ignoreFields, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FrontloadPayloadProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FrontloadPayloadProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FrontloadPayloadProperties.
     */
    public static FrontloadPayloadProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FrontloadPayloadProperties deserializedFrontloadPayloadProperties = new FrontloadPayloadProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operationType".equals(fieldName)) {
                    deserializedFrontloadPayloadProperties.operationType = reader.getString();
                } else if ("providerNamespace".equals(fieldName)) {
                    deserializedFrontloadPayloadProperties.providerNamespace = reader.getString();
                } else if ("frontloadLocation".equals(fieldName)) {
                    deserializedFrontloadPayloadProperties.frontloadLocation = reader.getString();
                } else if ("copyFromLocation".equals(fieldName)) {
                    deserializedFrontloadPayloadProperties.copyFromLocation = reader.getString();
                } else if ("environmentType".equals(fieldName)) {
                    deserializedFrontloadPayloadProperties.environmentType
                        = AvailableCheckInManifestEnvironment.fromString(reader.getString());
                } else if ("serviceFeatureFlag".equals(fieldName)) {
                    deserializedFrontloadPayloadProperties.serviceFeatureFlag
                        = ServiceFeatureFlagAction.fromString(reader.getString());
                } else if ("includeResourceTypes".equals(fieldName)) {
                    List<String> includeResourceTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedFrontloadPayloadProperties.includeResourceTypes = includeResourceTypes;
                } else if ("excludeResourceTypes".equals(fieldName)) {
                    List<String> excludeResourceTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedFrontloadPayloadProperties.excludeResourceTypes = excludeResourceTypes;
                } else if ("overrideManifestLevelFields".equals(fieldName)) {
                    deserializedFrontloadPayloadProperties.overrideManifestLevelFields
                        = FrontloadPayloadPropertiesOverrideManifestLevelFields.fromJson(reader);
                } else if ("overrideEndpointLevelFields".equals(fieldName)) {
                    deserializedFrontloadPayloadProperties.overrideEndpointLevelFields
                        = FrontloadPayloadPropertiesOverrideEndpointLevelFields.fromJson(reader);
                } else if ("ignoreFields".equals(fieldName)) {
                    List<String> ignoreFields = reader.readArray(reader1 -> reader1.getString());
                    deserializedFrontloadPayloadProperties.ignoreFields = ignoreFields;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFrontloadPayloadProperties;
        });
    }
}
