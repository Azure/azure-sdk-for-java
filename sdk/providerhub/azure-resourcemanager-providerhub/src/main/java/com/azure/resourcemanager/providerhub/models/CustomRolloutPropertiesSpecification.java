// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.providerhub.fluent.models.ResourceTypeRegistrationInner;
import java.io.IOException;
import java.util.List;

/**
 * The specification.
 */
@Fluent
public final class CustomRolloutPropertiesSpecification extends CustomRolloutSpecification {
    /**
     * Creates an instance of CustomRolloutPropertiesSpecification class.
     */
    public CustomRolloutPropertiesSpecification() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomRolloutPropertiesSpecification
        withAutoProvisionConfig(CustomRolloutSpecificationAutoProvisionConfig autoProvisionConfig) {
        super.withAutoProvisionConfig(autoProvisionConfig);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomRolloutPropertiesSpecification withCanary(CustomRolloutSpecificationCanary canary) {
        super.withCanary(canary);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomRolloutPropertiesSpecification withReleaseScopes(List<String> releaseScopes) {
        super.withReleaseScopes(releaseScopes);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomRolloutPropertiesSpecification
        withRefreshSubscriptionRegistration(Boolean refreshSubscriptionRegistration) {
        super.withRefreshSubscriptionRegistration(refreshSubscriptionRegistration);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomRolloutPropertiesSpecification withSkipReleaseScopeValidation(Boolean skipReleaseScopeValidation) {
        super.withSkipReleaseScopeValidation(skipReleaseScopeValidation);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomRolloutPropertiesSpecification
        withProviderRegistration(CustomRolloutSpecificationProviderRegistration providerRegistration) {
        super.withProviderRegistration(providerRegistration);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomRolloutPropertiesSpecification
        withResourceTypeRegistrations(List<ResourceTypeRegistrationInner> resourceTypeRegistrations) {
        super.withResourceTypeRegistrations(resourceTypeRegistrations);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (autoProvisionConfig() != null) {
            autoProvisionConfig().validate();
        }
        if (canary() != null) {
            canary().validate();
        }
        if (providerRegistration() != null) {
            providerRegistration().validate();
        }
        if (resourceTypeRegistrations() != null) {
            resourceTypeRegistrations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("autoProvisionConfig", autoProvisionConfig());
        jsonWriter.writeJsonField("canary", canary());
        jsonWriter.writeArrayField("releaseScopes", releaseScopes(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("refreshSubscriptionRegistration", refreshSubscriptionRegistration());
        jsonWriter.writeBooleanField("skipReleaseScopeValidation", skipReleaseScopeValidation());
        jsonWriter.writeJsonField("providerRegistration", providerRegistration());
        jsonWriter.writeArrayField("resourceTypeRegistrations", resourceTypeRegistrations(),
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomRolloutPropertiesSpecification from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomRolloutPropertiesSpecification if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CustomRolloutPropertiesSpecification.
     */
    public static CustomRolloutPropertiesSpecification fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomRolloutPropertiesSpecification deserializedCustomRolloutPropertiesSpecification
                = new CustomRolloutPropertiesSpecification();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("autoProvisionConfig".equals(fieldName)) {
                    deserializedCustomRolloutPropertiesSpecification
                        .withAutoProvisionConfig(CustomRolloutSpecificationAutoProvisionConfig.fromJson(reader));
                } else if ("canary".equals(fieldName)) {
                    deserializedCustomRolloutPropertiesSpecification
                        .withCanary(CustomRolloutSpecificationCanary.fromJson(reader));
                } else if ("releaseScopes".equals(fieldName)) {
                    List<String> releaseScopes = reader.readArray(reader1 -> reader1.getString());
                    deserializedCustomRolloutPropertiesSpecification.withReleaseScopes(releaseScopes);
                } else if ("refreshSubscriptionRegistration".equals(fieldName)) {
                    deserializedCustomRolloutPropertiesSpecification
                        .withRefreshSubscriptionRegistration(reader.getNullable(JsonReader::getBoolean));
                } else if ("skipReleaseScopeValidation".equals(fieldName)) {
                    deserializedCustomRolloutPropertiesSpecification
                        .withSkipReleaseScopeValidation(reader.getNullable(JsonReader::getBoolean));
                } else if ("providerRegistration".equals(fieldName)) {
                    deserializedCustomRolloutPropertiesSpecification
                        .withProviderRegistration(CustomRolloutSpecificationProviderRegistration.fromJson(reader));
                } else if ("resourceTypeRegistrations".equals(fieldName)) {
                    List<ResourceTypeRegistrationInner> resourceTypeRegistrations
                        = reader.readArray(reader1 -> ResourceTypeRegistrationInner.fromJson(reader1));
                    deserializedCustomRolloutPropertiesSpecification
                        .withResourceTypeRegistrations(resourceTypeRegistrations);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomRolloutPropertiesSpecification;
        });
    }
}
