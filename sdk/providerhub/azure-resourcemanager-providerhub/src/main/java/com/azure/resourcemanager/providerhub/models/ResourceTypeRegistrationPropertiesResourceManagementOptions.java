// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Resource management options.
 */
@Fluent
public final class ResourceTypeRegistrationPropertiesResourceManagementOptions
    implements JsonSerializable<ResourceTypeRegistrationPropertiesResourceManagementOptions> {
    /*
     * Batch provisioning support.
     */
    private ResourceTypeRegistrationPropertiesResourceManagementOptionsBatchProvisioningSupport batchProvisioningSupport;

    /*
     * Delete dependencies.
     */
    private List<DeleteDependency> deleteDependencies;

    /*
     * Nested provisioning support.
     */
    private ResourceTypeRegistrationPropertiesResourceManagementOptionsNestedProvisioningSupport nestedProvisioningSupport;

    /**
     * Creates an instance of ResourceTypeRegistrationPropertiesResourceManagementOptions class.
     */
    public ResourceTypeRegistrationPropertiesResourceManagementOptions() {
    }

    /**
     * Get the batchProvisioningSupport property: Batch provisioning support.
     * 
     * @return the batchProvisioningSupport value.
     */
    public ResourceTypeRegistrationPropertiesResourceManagementOptionsBatchProvisioningSupport
        batchProvisioningSupport() {
        return this.batchProvisioningSupport;
    }

    /**
     * Set the batchProvisioningSupport property: Batch provisioning support.
     * 
     * @param batchProvisioningSupport the batchProvisioningSupport value to set.
     * @return the ResourceTypeRegistrationPropertiesResourceManagementOptions object itself.
     */
    public ResourceTypeRegistrationPropertiesResourceManagementOptions withBatchProvisioningSupport(
        ResourceTypeRegistrationPropertiesResourceManagementOptionsBatchProvisioningSupport batchProvisioningSupport) {
        this.batchProvisioningSupport = batchProvisioningSupport;
        return this;
    }

    /**
     * Get the deleteDependencies property: Delete dependencies.
     * 
     * @return the deleteDependencies value.
     */
    public List<DeleteDependency> deleteDependencies() {
        return this.deleteDependencies;
    }

    /**
     * Set the deleteDependencies property: Delete dependencies.
     * 
     * @param deleteDependencies the deleteDependencies value to set.
     * @return the ResourceTypeRegistrationPropertiesResourceManagementOptions object itself.
     */
    public ResourceTypeRegistrationPropertiesResourceManagementOptions
        withDeleteDependencies(List<DeleteDependency> deleteDependencies) {
        this.deleteDependencies = deleteDependencies;
        return this;
    }

    /**
     * Get the nestedProvisioningSupport property: Nested provisioning support.
     * 
     * @return the nestedProvisioningSupport value.
     */
    public ResourceTypeRegistrationPropertiesResourceManagementOptionsNestedProvisioningSupport
        nestedProvisioningSupport() {
        return this.nestedProvisioningSupport;
    }

    /**
     * Set the nestedProvisioningSupport property: Nested provisioning support.
     * 
     * @param nestedProvisioningSupport the nestedProvisioningSupport value to set.
     * @return the ResourceTypeRegistrationPropertiesResourceManagementOptions object itself.
     */
    public ResourceTypeRegistrationPropertiesResourceManagementOptions withNestedProvisioningSupport(
        ResourceTypeRegistrationPropertiesResourceManagementOptionsNestedProvisioningSupport nestedProvisioningSupport) {
        this.nestedProvisioningSupport = nestedProvisioningSupport;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (batchProvisioningSupport() != null) {
            batchProvisioningSupport().validate();
        }
        if (deleteDependencies() != null) {
            deleteDependencies().forEach(e -> e.validate());
        }
        if (nestedProvisioningSupport() != null) {
            nestedProvisioningSupport().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("batchProvisioningSupport", this.batchProvisioningSupport);
        jsonWriter.writeArrayField("deleteDependencies", this.deleteDependencies,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("nestedProvisioningSupport", this.nestedProvisioningSupport);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceTypeRegistrationPropertiesResourceManagementOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceTypeRegistrationPropertiesResourceManagementOptions if the JsonReader was pointing
     * to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * ResourceTypeRegistrationPropertiesResourceManagementOptions.
     */
    public static ResourceTypeRegistrationPropertiesResourceManagementOptions fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceTypeRegistrationPropertiesResourceManagementOptions deserializedResourceTypeRegistrationPropertiesResourceManagementOptions
                = new ResourceTypeRegistrationPropertiesResourceManagementOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("batchProvisioningSupport".equals(fieldName)) {
                    deserializedResourceTypeRegistrationPropertiesResourceManagementOptions.batchProvisioningSupport
                        = ResourceTypeRegistrationPropertiesResourceManagementOptionsBatchProvisioningSupport
                            .fromJson(reader);
                } else if ("deleteDependencies".equals(fieldName)) {
                    List<DeleteDependency> deleteDependencies
                        = reader.readArray(reader1 -> DeleteDependency.fromJson(reader1));
                    deserializedResourceTypeRegistrationPropertiesResourceManagementOptions.deleteDependencies
                        = deleteDependencies;
                } else if ("nestedProvisioningSupport".equals(fieldName)) {
                    deserializedResourceTypeRegistrationPropertiesResourceManagementOptions.nestedProvisioningSupport
                        = ResourceTypeRegistrationPropertiesResourceManagementOptionsNestedProvisioningSupport
                            .fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceTypeRegistrationPropertiesResourceManagementOptions;
        });
    }
}
