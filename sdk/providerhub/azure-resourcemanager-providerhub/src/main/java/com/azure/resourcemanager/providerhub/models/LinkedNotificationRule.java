// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;
import java.util.List;

/**
 * The LinkedNotificationRule model.
 */
@Fluent
public final class LinkedNotificationRule implements JsonSerializable<LinkedNotificationRule> {
    /*
     * The actions.
     */
    private List<String> actions;

    /*
     * The actions on failed operation.
     */
    private List<String> actionsOnFailedOperation;

    /*
     * The fast path actions.
     */
    private List<String> fastPathActions;

    /*
     * The fast path action on failed operation.
     */
    private List<String> fastPathActionsOnFailedOperation;

    /*
     * This is a TimeSpan property.
     */
    private Duration linkedNotificationTimeout;

    /**
     * Creates an instance of LinkedNotificationRule class.
     */
    public LinkedNotificationRule() {
    }

    /**
     * Get the actions property: The actions.
     * 
     * @return the actions value.
     */
    public List<String> actions() {
        return this.actions;
    }

    /**
     * Set the actions property: The actions.
     * 
     * @param actions the actions value to set.
     * @return the LinkedNotificationRule object itself.
     */
    public LinkedNotificationRule withActions(List<String> actions) {
        this.actions = actions;
        return this;
    }

    /**
     * Get the actionsOnFailedOperation property: The actions on failed operation.
     * 
     * @return the actionsOnFailedOperation value.
     */
    public List<String> actionsOnFailedOperation() {
        return this.actionsOnFailedOperation;
    }

    /**
     * Set the actionsOnFailedOperation property: The actions on failed operation.
     * 
     * @param actionsOnFailedOperation the actionsOnFailedOperation value to set.
     * @return the LinkedNotificationRule object itself.
     */
    public LinkedNotificationRule withActionsOnFailedOperation(List<String> actionsOnFailedOperation) {
        this.actionsOnFailedOperation = actionsOnFailedOperation;
        return this;
    }

    /**
     * Get the fastPathActions property: The fast path actions.
     * 
     * @return the fastPathActions value.
     */
    public List<String> fastPathActions() {
        return this.fastPathActions;
    }

    /**
     * Set the fastPathActions property: The fast path actions.
     * 
     * @param fastPathActions the fastPathActions value to set.
     * @return the LinkedNotificationRule object itself.
     */
    public LinkedNotificationRule withFastPathActions(List<String> fastPathActions) {
        this.fastPathActions = fastPathActions;
        return this;
    }

    /**
     * Get the fastPathActionsOnFailedOperation property: The fast path action on failed operation.
     * 
     * @return the fastPathActionsOnFailedOperation value.
     */
    public List<String> fastPathActionsOnFailedOperation() {
        return this.fastPathActionsOnFailedOperation;
    }

    /**
     * Set the fastPathActionsOnFailedOperation property: The fast path action on failed operation.
     * 
     * @param fastPathActionsOnFailedOperation the fastPathActionsOnFailedOperation value to set.
     * @return the LinkedNotificationRule object itself.
     */
    public LinkedNotificationRule withFastPathActionsOnFailedOperation(List<String> fastPathActionsOnFailedOperation) {
        this.fastPathActionsOnFailedOperation = fastPathActionsOnFailedOperation;
        return this;
    }

    /**
     * Get the linkedNotificationTimeout property: This is a TimeSpan property.
     * 
     * @return the linkedNotificationTimeout value.
     */
    public Duration linkedNotificationTimeout() {
        return this.linkedNotificationTimeout;
    }

    /**
     * Set the linkedNotificationTimeout property: This is a TimeSpan property.
     * 
     * @param linkedNotificationTimeout the linkedNotificationTimeout value to set.
     * @return the LinkedNotificationRule object itself.
     */
    public LinkedNotificationRule withLinkedNotificationTimeout(Duration linkedNotificationTimeout) {
        this.linkedNotificationTimeout = linkedNotificationTimeout;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("actions", this.actions, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("actionsOnFailedOperation", this.actionsOnFailedOperation,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("fastPathActions", this.fastPathActions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("fastPathActionsOnFailedOperation", this.fastPathActionsOnFailedOperation,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("linkedNotificationTimeout",
            CoreUtils.durationToStringWithDays(this.linkedNotificationTimeout));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LinkedNotificationRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LinkedNotificationRule if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LinkedNotificationRule.
     */
    public static LinkedNotificationRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LinkedNotificationRule deserializedLinkedNotificationRule = new LinkedNotificationRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("actions".equals(fieldName)) {
                    List<String> actions = reader.readArray(reader1 -> reader1.getString());
                    deserializedLinkedNotificationRule.actions = actions;
                } else if ("actionsOnFailedOperation".equals(fieldName)) {
                    List<String> actionsOnFailedOperation = reader.readArray(reader1 -> reader1.getString());
                    deserializedLinkedNotificationRule.actionsOnFailedOperation = actionsOnFailedOperation;
                } else if ("fastPathActions".equals(fieldName)) {
                    List<String> fastPathActions = reader.readArray(reader1 -> reader1.getString());
                    deserializedLinkedNotificationRule.fastPathActions = fastPathActions;
                } else if ("fastPathActionsOnFailedOperation".equals(fieldName)) {
                    List<String> fastPathActionsOnFailedOperation = reader.readArray(reader1 -> reader1.getString());
                    deserializedLinkedNotificationRule.fastPathActionsOnFailedOperation
                        = fastPathActionsOnFailedOperation;
                } else if ("linkedNotificationTimeout".equals(fieldName)) {
                    deserializedLinkedNotificationRule.linkedNotificationTimeout
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLinkedNotificationRule;
        });
    }
}
