// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SkuSettingCapacity model.
 */
@Fluent
public final class SkuSettingCapacity extends SkuCapacity {
    /**
     * Creates an instance of SkuSettingCapacity class.
     */
    public SkuSettingCapacity() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SkuSettingCapacity withMinimum(int minimum) {
        super.withMinimum(minimum);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SkuSettingCapacity withMaximum(Integer maximum) {
        super.withMaximum(maximum);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SkuSettingCapacity withDefaultProperty(Integer defaultProperty) {
        super.withDefaultProperty(defaultProperty);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SkuSettingCapacity withScaleType(SkuScaleType scaleType) {
        super.withScaleType(scaleType);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("minimum", minimum());
        jsonWriter.writeNumberField("maximum", maximum());
        jsonWriter.writeNumberField("default", defaultProperty());
        jsonWriter.writeStringField("scaleType", scaleType() == null ? null : scaleType().toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SkuSettingCapacity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SkuSettingCapacity if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SkuSettingCapacity.
     */
    public static SkuSettingCapacity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SkuSettingCapacity deserializedSkuSettingCapacity = new SkuSettingCapacity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("minimum".equals(fieldName)) {
                    deserializedSkuSettingCapacity.withMinimum(reader.getInt());
                } else if ("maximum".equals(fieldName)) {
                    deserializedSkuSettingCapacity.withMaximum(reader.getNullable(JsonReader::getInt));
                } else if ("default".equals(fieldName)) {
                    deserializedSkuSettingCapacity.withDefaultProperty(reader.getNullable(JsonReader::getInt));
                } else if ("scaleType".equals(fieldName)) {
                    deserializedSkuSettingCapacity.withScaleType(SkuScaleType.fromString(reader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSkuSettingCapacity;
        });
    }
}
