// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.providerhub.fluent.models.CheckinManifestInfoInner;
import java.io.IOException;

/**
 * The manifest checkin status.
 */
@Fluent
public final class CustomRolloutStatusManifestCheckinStatus extends CheckinManifestInfoInner {
    /**
     * Creates an instance of CustomRolloutStatusManifestCheckinStatus class.
     */
    public CustomRolloutStatusManifestCheckinStatus() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomRolloutStatusManifestCheckinStatus withIsCheckedIn(boolean isCheckedIn) {
        super.withIsCheckedIn(isCheckedIn);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomRolloutStatusManifestCheckinStatus withStatusMessage(String statusMessage) {
        super.withStatusMessage(statusMessage);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomRolloutStatusManifestCheckinStatus withPullRequest(String pullRequest) {
        super.withPullRequest(pullRequest);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomRolloutStatusManifestCheckinStatus withCommitId(String commitId) {
        super.withCommitId(commitId);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (statusMessage() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property statusMessage in model CustomRolloutStatusManifestCheckinStatus"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CustomRolloutStatusManifestCheckinStatus.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("isCheckedIn", isCheckedIn());
        jsonWriter.writeStringField("statusMessage", statusMessage());
        jsonWriter.writeStringField("pullRequest", pullRequest());
        jsonWriter.writeStringField("commitId", commitId());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomRolloutStatusManifestCheckinStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomRolloutStatusManifestCheckinStatus if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CustomRolloutStatusManifestCheckinStatus.
     */
    public static CustomRolloutStatusManifestCheckinStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomRolloutStatusManifestCheckinStatus deserializedCustomRolloutStatusManifestCheckinStatus
                = new CustomRolloutStatusManifestCheckinStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("isCheckedIn".equals(fieldName)) {
                    deserializedCustomRolloutStatusManifestCheckinStatus.withIsCheckedIn(reader.getBoolean());
                } else if ("statusMessage".equals(fieldName)) {
                    deserializedCustomRolloutStatusManifestCheckinStatus.withStatusMessage(reader.getString());
                } else if ("pullRequest".equals(fieldName)) {
                    deserializedCustomRolloutStatusManifestCheckinStatus.withPullRequest(reader.getString());
                } else if ("commitId".equals(fieldName)) {
                    deserializedCustomRolloutStatusManifestCheckinStatus.withCommitId(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomRolloutStatusManifestCheckinStatus;
        });
    }
}
