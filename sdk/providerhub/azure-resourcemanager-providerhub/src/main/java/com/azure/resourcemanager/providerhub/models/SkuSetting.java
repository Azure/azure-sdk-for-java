// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The SkuSetting model.
 */
@Fluent
public final class SkuSetting implements JsonSerializable<SkuSetting> {
    /*
     * The name property.
     */
    private String name;

    /*
     * The tier property.
     */
    private String tier;

    /*
     * The size property.
     */
    private String size;

    /*
     * The family property.
     */
    private String family;

    /*
     * The kind property.
     */
    private String kind;

    /*
     * The locations property.
     */
    private List<String> locations;

    /*
     * The locationInfo property.
     */
    private List<SkuLocationInfo> locationInfo;

    /*
     * The requiredQuotaIds property.
     */
    private List<String> requiredQuotaIds;

    /*
     * The requiredFeatures property.
     */
    private List<String> requiredFeatures;

    /*
     * The capacity property.
     */
    private SkuSettingCapacity capacity;

    /*
     * The costs property.
     */
    private List<SkuCost> costs;

    /*
     * The capabilities property.
     */
    private List<SkuCapability> capabilities;

    /**
     * Creates an instance of SkuSetting class.
     */
    public SkuSetting() {
    }

    /**
     * Get the name property: The name property.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name property.
     * 
     * @param name the name value to set.
     * @return the SkuSetting object itself.
     */
    public SkuSetting withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the tier property: The tier property.
     * 
     * @return the tier value.
     */
    public String tier() {
        return this.tier;
    }

    /**
     * Set the tier property: The tier property.
     * 
     * @param tier the tier value to set.
     * @return the SkuSetting object itself.
     */
    public SkuSetting withTier(String tier) {
        this.tier = tier;
        return this;
    }

    /**
     * Get the size property: The size property.
     * 
     * @return the size value.
     */
    public String size() {
        return this.size;
    }

    /**
     * Set the size property: The size property.
     * 
     * @param size the size value to set.
     * @return the SkuSetting object itself.
     */
    public SkuSetting withSize(String size) {
        this.size = size;
        return this;
    }

    /**
     * Get the family property: The family property.
     * 
     * @return the family value.
     */
    public String family() {
        return this.family;
    }

    /**
     * Set the family property: The family property.
     * 
     * @param family the family value to set.
     * @return the SkuSetting object itself.
     */
    public SkuSetting withFamily(String family) {
        this.family = family;
        return this;
    }

    /**
     * Get the kind property: The kind property.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: The kind property.
     * 
     * @param kind the kind value to set.
     * @return the SkuSetting object itself.
     */
    public SkuSetting withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the locations property: The locations property.
     * 
     * @return the locations value.
     */
    public List<String> locations() {
        return this.locations;
    }

    /**
     * Set the locations property: The locations property.
     * 
     * @param locations the locations value to set.
     * @return the SkuSetting object itself.
     */
    public SkuSetting withLocations(List<String> locations) {
        this.locations = locations;
        return this;
    }

    /**
     * Get the locationInfo property: The locationInfo property.
     * 
     * @return the locationInfo value.
     */
    public List<SkuLocationInfo> locationInfo() {
        return this.locationInfo;
    }

    /**
     * Set the locationInfo property: The locationInfo property.
     * 
     * @param locationInfo the locationInfo value to set.
     * @return the SkuSetting object itself.
     */
    public SkuSetting withLocationInfo(List<SkuLocationInfo> locationInfo) {
        this.locationInfo = locationInfo;
        return this;
    }

    /**
     * Get the requiredQuotaIds property: The requiredQuotaIds property.
     * 
     * @return the requiredQuotaIds value.
     */
    public List<String> requiredQuotaIds() {
        return this.requiredQuotaIds;
    }

    /**
     * Set the requiredQuotaIds property: The requiredQuotaIds property.
     * 
     * @param requiredQuotaIds the requiredQuotaIds value to set.
     * @return the SkuSetting object itself.
     */
    public SkuSetting withRequiredQuotaIds(List<String> requiredQuotaIds) {
        this.requiredQuotaIds = requiredQuotaIds;
        return this;
    }

    /**
     * Get the requiredFeatures property: The requiredFeatures property.
     * 
     * @return the requiredFeatures value.
     */
    public List<String> requiredFeatures() {
        return this.requiredFeatures;
    }

    /**
     * Set the requiredFeatures property: The requiredFeatures property.
     * 
     * @param requiredFeatures the requiredFeatures value to set.
     * @return the SkuSetting object itself.
     */
    public SkuSetting withRequiredFeatures(List<String> requiredFeatures) {
        this.requiredFeatures = requiredFeatures;
        return this;
    }

    /**
     * Get the capacity property: The capacity property.
     * 
     * @return the capacity value.
     */
    public SkuSettingCapacity capacity() {
        return this.capacity;
    }

    /**
     * Set the capacity property: The capacity property.
     * 
     * @param capacity the capacity value to set.
     * @return the SkuSetting object itself.
     */
    public SkuSetting withCapacity(SkuSettingCapacity capacity) {
        this.capacity = capacity;
        return this;
    }

    /**
     * Get the costs property: The costs property.
     * 
     * @return the costs value.
     */
    public List<SkuCost> costs() {
        return this.costs;
    }

    /**
     * Set the costs property: The costs property.
     * 
     * @param costs the costs value to set.
     * @return the SkuSetting object itself.
     */
    public SkuSetting withCosts(List<SkuCost> costs) {
        this.costs = costs;
        return this;
    }

    /**
     * Get the capabilities property: The capabilities property.
     * 
     * @return the capabilities value.
     */
    public List<SkuCapability> capabilities() {
        return this.capabilities;
    }

    /**
     * Set the capabilities property: The capabilities property.
     * 
     * @param capabilities the capabilities value to set.
     * @return the SkuSetting object itself.
     */
    public SkuSetting withCapabilities(List<SkuCapability> capabilities) {
        this.capabilities = capabilities;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model SkuSetting"));
        }
        if (locationInfo() != null) {
            locationInfo().forEach(e -> e.validate());
        }
        if (capacity() != null) {
            capacity().validate();
        }
        if (costs() != null) {
            costs().forEach(e -> e.validate());
        }
        if (capabilities() != null) {
            capabilities().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SkuSetting.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("tier", this.tier);
        jsonWriter.writeStringField("size", this.size);
        jsonWriter.writeStringField("family", this.family);
        jsonWriter.writeStringField("kind", this.kind);
        jsonWriter.writeArrayField("locations", this.locations, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("locationInfo", this.locationInfo, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("requiredQuotaIds", this.requiredQuotaIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("requiredFeatures", this.requiredFeatures,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("capacity", this.capacity);
        jsonWriter.writeArrayField("costs", this.costs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("capabilities", this.capabilities, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SkuSetting from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SkuSetting if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SkuSetting.
     */
    public static SkuSetting fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SkuSetting deserializedSkuSetting = new SkuSetting();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSkuSetting.name = reader.getString();
                } else if ("tier".equals(fieldName)) {
                    deserializedSkuSetting.tier = reader.getString();
                } else if ("size".equals(fieldName)) {
                    deserializedSkuSetting.size = reader.getString();
                } else if ("family".equals(fieldName)) {
                    deserializedSkuSetting.family = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    deserializedSkuSetting.kind = reader.getString();
                } else if ("locations".equals(fieldName)) {
                    List<String> locations = reader.readArray(reader1 -> reader1.getString());
                    deserializedSkuSetting.locations = locations;
                } else if ("locationInfo".equals(fieldName)) {
                    List<SkuLocationInfo> locationInfo = reader.readArray(reader1 -> SkuLocationInfo.fromJson(reader1));
                    deserializedSkuSetting.locationInfo = locationInfo;
                } else if ("requiredQuotaIds".equals(fieldName)) {
                    List<String> requiredQuotaIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedSkuSetting.requiredQuotaIds = requiredQuotaIds;
                } else if ("requiredFeatures".equals(fieldName)) {
                    List<String> requiredFeatures = reader.readArray(reader1 -> reader1.getString());
                    deserializedSkuSetting.requiredFeatures = requiredFeatures;
                } else if ("capacity".equals(fieldName)) {
                    deserializedSkuSetting.capacity = SkuSettingCapacity.fromJson(reader);
                } else if ("costs".equals(fieldName)) {
                    List<SkuCost> costs = reader.readArray(reader1 -> SkuCost.fromJson(reader1));
                    deserializedSkuSetting.costs = costs;
                } else if ("capabilities".equals(fieldName)) {
                    List<SkuCapability> capabilities = reader.readArray(reader1 -> SkuCapability.fromJson(reader1));
                    deserializedSkuSetting.capabilities = capabilities;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSkuSetting;
        });
    }
}
