// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications model.
 */
@Fluent
public final class ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications
    extends CheckNameAvailabilitySpecifications {
    /**
     * Creates an instance of ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications class.
     */
    public ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications
        withEnableDefaultValidation(Boolean enableDefaultValidation) {
        super.withEnableDefaultValidation(enableDefaultValidation);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications
        withResourceTypesWithCustomValidation(List<String> resourceTypesWithCustomValidation) {
        super.withResourceTypesWithCustomValidation(resourceTypesWithCustomValidation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enableDefaultValidation", enableDefaultValidation());
        jsonWriter.writeArrayField("resourceTypesWithCustomValidation", resourceTypesWithCustomValidation(),
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications if the JsonReader
     * was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications.
     */
    public static ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications deserializedResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications
                = new ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enableDefaultValidation".equals(fieldName)) {
                    deserializedResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications
                        .withEnableDefaultValidation(reader.getNullable(JsonReader::getBoolean));
                } else if ("resourceTypesWithCustomValidation".equals(fieldName)) {
                    List<String> resourceTypesWithCustomValidation = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications
                        .withResourceTypesWithCustomValidation(resourceTypesWithCustomValidation);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications;
        });
    }
}
