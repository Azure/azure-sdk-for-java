// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.providerhub.fluent.models.AuthorizedApplicationInner;
import com.azure.resourcemanager.providerhub.models.AuthorizedApplication;
import com.azure.resourcemanager.providerhub.models.AuthorizedApplicationProperties;
import java.util.UUID;

public final class AuthorizedApplicationImpl
    implements AuthorizedApplication, AuthorizedApplication.Definition, AuthorizedApplication.Update {
    private AuthorizedApplicationInner innerObject;

    private final com.azure.resourcemanager.providerhub.ProviderHubManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public AuthorizedApplicationProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public AuthorizedApplicationInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.providerhub.ProviderHubManager manager() {
        return this.serviceManager;
    }

    private String providerNamespace;

    private UUID applicationId;

    public AuthorizedApplicationImpl withExistingProviderRegistration(String providerNamespace) {
        this.providerNamespace = providerNamespace;
        return this;
    }

    public AuthorizedApplication create() {
        this.innerObject = serviceManager.serviceClient()
            .getAuthorizedApplications()
            .createOrUpdate(providerNamespace, applicationId, this.innerModel(), Context.NONE);
        return this;
    }

    public AuthorizedApplication create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getAuthorizedApplications()
            .createOrUpdate(providerNamespace, applicationId, this.innerModel(), context);
        return this;
    }

    AuthorizedApplicationImpl(UUID name, com.azure.resourcemanager.providerhub.ProviderHubManager serviceManager) {
        this.innerObject = new AuthorizedApplicationInner();
        this.serviceManager = serviceManager;
        this.applicationId = name;
    }

    public AuthorizedApplicationImpl update() {
        return this;
    }

    public AuthorizedApplication apply() {
        this.innerObject = serviceManager.serviceClient()
            .getAuthorizedApplications()
            .createOrUpdate(providerNamespace, applicationId, this.innerModel(), Context.NONE);
        return this;
    }

    public AuthorizedApplication apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getAuthorizedApplications()
            .createOrUpdate(providerNamespace, applicationId, this.innerModel(), context);
        return this;
    }

    AuthorizedApplicationImpl(AuthorizedApplicationInner innerObject,
        com.azure.resourcemanager.providerhub.ProviderHubManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.providerNamespace = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "providerRegistrations");
        this.applicationId
            = UUID.fromString(ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "authorizedApplications"));
    }

    public AuthorizedApplication refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getAuthorizedApplications()
            .getWithResponse(providerNamespace, applicationId, Context.NONE)
            .getValue();
        return this;
    }

    public AuthorizedApplication refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getAuthorizedApplications()
            .getWithResponse(providerNamespace, applicationId, context)
            .getValue();
        return this;
    }

    public AuthorizedApplicationImpl withProperties(AuthorizedApplicationProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
