// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.providerhub.ProviderhubManager;
import com.azure.resourcemanager.providerhub.fluent.models.CustomRolloutInner;
import com.azure.resourcemanager.providerhub.fluent.models.CustomRolloutPropertiesInner;
import com.azure.resourcemanager.providerhub.fluent.models.CustomRolloutSpecificationInner;
import com.azure.resourcemanager.providerhub.models.CustomRollout;
import com.azure.resourcemanager.providerhub.models.CustomRolloutSpecification;
import com.azure.resourcemanager.providerhub.models.CustomRolloutStatus;
import com.azure.resourcemanager.providerhub.models.ProvisioningState;

public final class CustomRolloutImpl implements CustomRollout, CustomRollout.Definition, CustomRollout.Update {
    private CustomRolloutInner innerObject;

    private final ProviderhubManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public CustomRolloutSpecification specification() {
        CustomRolloutSpecificationInner inner = this.innerModel().specification();
        if (inner != null) {
            return new CustomRolloutSpecificationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CustomRolloutStatus status() {
        return this.innerModel().status();
    }

    public CustomRolloutInner innerModel() {
        return this.innerObject;
    }

    private ProviderhubManager manager() {
        return this.serviceManager;
    }

    private String providerNamespace;

    private String rolloutName;

    private CustomRolloutPropertiesInner createProperties;

    private CustomRolloutPropertiesInner updateProperties;

    public CustomRolloutImpl withExistingProviderRegistration(String providerNamespace) {
        this.providerNamespace = providerNamespace;
        return this;
    }

    public CustomRollout create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCustomRollouts()
                .createOrUpdateWithResponse(providerNamespace, rolloutName, createProperties, Context.NONE)
                .getValue();
        return this;
    }

    public CustomRollout create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCustomRollouts()
                .createOrUpdateWithResponse(providerNamespace, rolloutName, createProperties, context)
                .getValue();
        return this;
    }

    CustomRolloutImpl(String name, ProviderhubManager serviceManager) {
        this.innerObject = new CustomRolloutInner();
        this.serviceManager = serviceManager;
        this.rolloutName = name;
        this.createProperties = new CustomRolloutPropertiesInner();
    }

    public CustomRolloutImpl update() {
        this.updateProperties = new CustomRolloutPropertiesInner();
        return this;
    }

    public CustomRollout apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCustomRollouts()
                .createOrUpdateWithResponse(providerNamespace, rolloutName, updateProperties, Context.NONE)
                .getValue();
        return this;
    }

    public CustomRollout apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCustomRollouts()
                .createOrUpdateWithResponse(providerNamespace, rolloutName, updateProperties, context)
                .getValue();
        return this;
    }

    CustomRolloutImpl(CustomRolloutInner innerObject, ProviderhubManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.providerNamespace = Utils.getValueFromIdByName(innerObject.id(), "providerRegistrations");
        this.rolloutName = Utils.getValueFromIdByName(innerObject.id(), "customRollouts");
    }

    public CustomRollout refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCustomRollouts()
                .getWithResponse(providerNamespace, rolloutName, Context.NONE)
                .getValue();
        return this;
    }

    public CustomRollout refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getCustomRollouts()
                .getWithResponse(providerNamespace, rolloutName, context)
                .getValue();
        return this;
    }

    public CustomRolloutImpl withSpecification(CustomRolloutSpecificationInner specification) {
        if (isInCreateMode()) {
            this.createProperties.withSpecification(specification);
            return this;
        } else {
            this.updateProperties.withSpecification(specification);
            return this;
        }
    }

    public CustomRolloutImpl withProvisioningState(ProvisioningState provisioningState) {
        if (isInCreateMode()) {
            this.createProperties.withProvisioningState(provisioningState);
            return this;
        } else {
            this.updateProperties.withProvisioningState(provisioningState);
            return this;
        }
    }

    public CustomRolloutImpl withStatus(CustomRolloutStatus status) {
        if (isInCreateMode()) {
            this.createProperties.withStatus(status);
            return this;
        } else {
            this.updateProperties.withStatus(status);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
