// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Managed by authorization.
 */
@Fluent
public final class ResourceProviderAuthorizationManagedByAuthorization
    implements JsonSerializable<ResourceProviderAuthorizationManagedByAuthorization> {
    /*
     * The additionalAuthorizations property.
     */
    private List<AdditionalAuthorization> additionalAuthorizations;

    /*
     * The managed by resource role definition ID for the application.
     */
    private String managedByResourceRoleDefinitionId;

    /*
     * Indicates whether the managed by resource role definition ID should be inherited.
     */
    private Boolean allowManagedByInheritance;

    /**
     * Creates an instance of ResourceProviderAuthorizationManagedByAuthorization class.
     */
    public ResourceProviderAuthorizationManagedByAuthorization() {
    }

    /**
     * Get the additionalAuthorizations property: The additionalAuthorizations property.
     * 
     * @return the additionalAuthorizations value.
     */
    public List<AdditionalAuthorization> additionalAuthorizations() {
        return this.additionalAuthorizations;
    }

    /**
     * Set the additionalAuthorizations property: The additionalAuthorizations property.
     * 
     * @param additionalAuthorizations the additionalAuthorizations value to set.
     * @return the ResourceProviderAuthorizationManagedByAuthorization object itself.
     */
    public ResourceProviderAuthorizationManagedByAuthorization
        withAdditionalAuthorizations(List<AdditionalAuthorization> additionalAuthorizations) {
        this.additionalAuthorizations = additionalAuthorizations;
        return this;
    }

    /**
     * Get the managedByResourceRoleDefinitionId property: The managed by resource role definition ID for the
     * application.
     * 
     * @return the managedByResourceRoleDefinitionId value.
     */
    public String managedByResourceRoleDefinitionId() {
        return this.managedByResourceRoleDefinitionId;
    }

    /**
     * Set the managedByResourceRoleDefinitionId property: The managed by resource role definition ID for the
     * application.
     * 
     * @param managedByResourceRoleDefinitionId the managedByResourceRoleDefinitionId value to set.
     * @return the ResourceProviderAuthorizationManagedByAuthorization object itself.
     */
    public ResourceProviderAuthorizationManagedByAuthorization
        withManagedByResourceRoleDefinitionId(String managedByResourceRoleDefinitionId) {
        this.managedByResourceRoleDefinitionId = managedByResourceRoleDefinitionId;
        return this;
    }

    /**
     * Get the allowManagedByInheritance property: Indicates whether the managed by resource role definition ID should
     * be inherited.
     * 
     * @return the allowManagedByInheritance value.
     */
    public Boolean allowManagedByInheritance() {
        return this.allowManagedByInheritance;
    }

    /**
     * Set the allowManagedByInheritance property: Indicates whether the managed by resource role definition ID should
     * be inherited.
     * 
     * @param allowManagedByInheritance the allowManagedByInheritance value to set.
     * @return the ResourceProviderAuthorizationManagedByAuthorization object itself.
     */
    public ResourceProviderAuthorizationManagedByAuthorization
        withAllowManagedByInheritance(Boolean allowManagedByInheritance) {
        this.allowManagedByInheritance = allowManagedByInheritance;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (additionalAuthorizations() != null) {
            additionalAuthorizations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("additionalAuthorizations", this.additionalAuthorizations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("managedByResourceRoleDefinitionId", this.managedByResourceRoleDefinitionId);
        jsonWriter.writeBooleanField("allowManagedByInheritance", this.allowManagedByInheritance);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceProviderAuthorizationManagedByAuthorization from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceProviderAuthorizationManagedByAuthorization if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceProviderAuthorizationManagedByAuthorization.
     */
    public static ResourceProviderAuthorizationManagedByAuthorization fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceProviderAuthorizationManagedByAuthorization deserializedResourceProviderAuthorizationManagedByAuthorization
                = new ResourceProviderAuthorizationManagedByAuthorization();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("additionalAuthorizations".equals(fieldName)) {
                    List<AdditionalAuthorization> additionalAuthorizations
                        = reader.readArray(reader1 -> AdditionalAuthorization.fromJson(reader1));
                    deserializedResourceProviderAuthorizationManagedByAuthorization.additionalAuthorizations
                        = additionalAuthorizations;
                } else if ("managedByResourceRoleDefinitionId".equals(fieldName)) {
                    deserializedResourceProviderAuthorizationManagedByAuthorization.managedByResourceRoleDefinitionId
                        = reader.getString();
                } else if ("allowManagedByInheritance".equals(fieldName)) {
                    deserializedResourceProviderAuthorizationManagedByAuthorization.allowManagedByInheritance
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceProviderAuthorizationManagedByAuthorization;
        });
    }
}
