// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.providerhub.models.ResourceProviderAuthorization;
import com.azure.resourcemanager.providerhub.models.ResourceProviderCapabilities;
import com.azure.resourcemanager.providerhub.models.ResourceProviderEndpoint;
import com.azure.resourcemanager.providerhub.models.ResourceProviderManifestFeaturesRule;
import com.azure.resourcemanager.providerhub.models.ResourceProviderManifestManagement;
import com.azure.resourcemanager.providerhub.models.ResourceProviderManifestProviderAuthentication;
import com.azure.resourcemanager.providerhub.models.ResourceProviderManifestReRegisterSubscriptionMetadata;
import com.azure.resourcemanager.providerhub.models.ResourceProviderManifestRequestHeaderOptions;
import com.azure.resourcemanager.providerhub.models.ResourceProviderType;
import com.azure.resourcemanager.providerhub.models.ResourceType;
import java.io.IOException;
import java.util.List;

/**
 * The ResourceProviderManifest model.
 */
@Fluent
public final class ResourceProviderManifestInner implements JsonSerializable<ResourceProviderManifestInner> {
    /*
     * The providerAuthentication property.
     */
    private ResourceProviderManifestProviderAuthentication providerAuthentication;

    /*
     * The providerAuthorizations property.
     */
    private List<ResourceProviderAuthorization> providerAuthorizations;

    /*
     * The namespace property.
     */
    private String namespace;

    /*
     * The providerVersion property.
     */
    private String providerVersion;

    /*
     * The providerType property.
     */
    private ResourceProviderType providerType;

    /*
     * The requiredFeatures property.
     */
    private List<String> requiredFeatures;

    /*
     * The featuresRule property.
     */
    private ResourceProviderManifestFeaturesRule featuresRule;

    /*
     * The requestHeaderOptions property.
     */
    private ResourceProviderManifestRequestHeaderOptions requestHeaderOptions;

    /*
     * The resourceTypes property.
     */
    private List<ResourceType> resourceTypes;

    /*
     * The management property.
     */
    private ResourceProviderManifestManagement management;

    /*
     * The capabilities property.
     */
    private List<ResourceProviderCapabilities> capabilities;

    /*
     * Anything
     */
    private Object metadata;

    /*
     * The globalNotificationEndpoints property.
     */
    private List<ResourceProviderEndpoint> globalNotificationEndpoints;

    /*
     * The reRegisterSubscriptionMetadata property.
     */
    private ResourceProviderManifestReRegisterSubscriptionMetadata reRegisterSubscriptionMetadata;

    /**
     * Creates an instance of ResourceProviderManifestInner class.
     */
    public ResourceProviderManifestInner() {
    }

    /**
     * Get the providerAuthentication property: The providerAuthentication property.
     * 
     * @return the providerAuthentication value.
     */
    public ResourceProviderManifestProviderAuthentication providerAuthentication() {
        return this.providerAuthentication;
    }

    /**
     * Set the providerAuthentication property: The providerAuthentication property.
     * 
     * @param providerAuthentication the providerAuthentication value to set.
     * @return the ResourceProviderManifestInner object itself.
     */
    public ResourceProviderManifestInner
        withProviderAuthentication(ResourceProviderManifestProviderAuthentication providerAuthentication) {
        this.providerAuthentication = providerAuthentication;
        return this;
    }

    /**
     * Get the providerAuthorizations property: The providerAuthorizations property.
     * 
     * @return the providerAuthorizations value.
     */
    public List<ResourceProviderAuthorization> providerAuthorizations() {
        return this.providerAuthorizations;
    }

    /**
     * Set the providerAuthorizations property: The providerAuthorizations property.
     * 
     * @param providerAuthorizations the providerAuthorizations value to set.
     * @return the ResourceProviderManifestInner object itself.
     */
    public ResourceProviderManifestInner
        withProviderAuthorizations(List<ResourceProviderAuthorization> providerAuthorizations) {
        this.providerAuthorizations = providerAuthorizations;
        return this;
    }

    /**
     * Get the namespace property: The namespace property.
     * 
     * @return the namespace value.
     */
    public String namespace() {
        return this.namespace;
    }

    /**
     * Set the namespace property: The namespace property.
     * 
     * @param namespace the namespace value to set.
     * @return the ResourceProviderManifestInner object itself.
     */
    public ResourceProviderManifestInner withNamespace(String namespace) {
        this.namespace = namespace;
        return this;
    }

    /**
     * Get the providerVersion property: The providerVersion property.
     * 
     * @return the providerVersion value.
     */
    public String providerVersion() {
        return this.providerVersion;
    }

    /**
     * Set the providerVersion property: The providerVersion property.
     * 
     * @param providerVersion the providerVersion value to set.
     * @return the ResourceProviderManifestInner object itself.
     */
    public ResourceProviderManifestInner withProviderVersion(String providerVersion) {
        this.providerVersion = providerVersion;
        return this;
    }

    /**
     * Get the providerType property: The providerType property.
     * 
     * @return the providerType value.
     */
    public ResourceProviderType providerType() {
        return this.providerType;
    }

    /**
     * Set the providerType property: The providerType property.
     * 
     * @param providerType the providerType value to set.
     * @return the ResourceProviderManifestInner object itself.
     */
    public ResourceProviderManifestInner withProviderType(ResourceProviderType providerType) {
        this.providerType = providerType;
        return this;
    }

    /**
     * Get the requiredFeatures property: The requiredFeatures property.
     * 
     * @return the requiredFeatures value.
     */
    public List<String> requiredFeatures() {
        return this.requiredFeatures;
    }

    /**
     * Set the requiredFeatures property: The requiredFeatures property.
     * 
     * @param requiredFeatures the requiredFeatures value to set.
     * @return the ResourceProviderManifestInner object itself.
     */
    public ResourceProviderManifestInner withRequiredFeatures(List<String> requiredFeatures) {
        this.requiredFeatures = requiredFeatures;
        return this;
    }

    /**
     * Get the featuresRule property: The featuresRule property.
     * 
     * @return the featuresRule value.
     */
    public ResourceProviderManifestFeaturesRule featuresRule() {
        return this.featuresRule;
    }

    /**
     * Set the featuresRule property: The featuresRule property.
     * 
     * @param featuresRule the featuresRule value to set.
     * @return the ResourceProviderManifestInner object itself.
     */
    public ResourceProviderManifestInner withFeaturesRule(ResourceProviderManifestFeaturesRule featuresRule) {
        this.featuresRule = featuresRule;
        return this;
    }

    /**
     * Get the requestHeaderOptions property: The requestHeaderOptions property.
     * 
     * @return the requestHeaderOptions value.
     */
    public ResourceProviderManifestRequestHeaderOptions requestHeaderOptions() {
        return this.requestHeaderOptions;
    }

    /**
     * Set the requestHeaderOptions property: The requestHeaderOptions property.
     * 
     * @param requestHeaderOptions the requestHeaderOptions value to set.
     * @return the ResourceProviderManifestInner object itself.
     */
    public ResourceProviderManifestInner
        withRequestHeaderOptions(ResourceProviderManifestRequestHeaderOptions requestHeaderOptions) {
        this.requestHeaderOptions = requestHeaderOptions;
        return this;
    }

    /**
     * Get the resourceTypes property: The resourceTypes property.
     * 
     * @return the resourceTypes value.
     */
    public List<ResourceType> resourceTypes() {
        return this.resourceTypes;
    }

    /**
     * Set the resourceTypes property: The resourceTypes property.
     * 
     * @param resourceTypes the resourceTypes value to set.
     * @return the ResourceProviderManifestInner object itself.
     */
    public ResourceProviderManifestInner withResourceTypes(List<ResourceType> resourceTypes) {
        this.resourceTypes = resourceTypes;
        return this;
    }

    /**
     * Get the management property: The management property.
     * 
     * @return the management value.
     */
    public ResourceProviderManifestManagement management() {
        return this.management;
    }

    /**
     * Set the management property: The management property.
     * 
     * @param management the management value to set.
     * @return the ResourceProviderManifestInner object itself.
     */
    public ResourceProviderManifestInner withManagement(ResourceProviderManifestManagement management) {
        this.management = management;
        return this;
    }

    /**
     * Get the capabilities property: The capabilities property.
     * 
     * @return the capabilities value.
     */
    public List<ResourceProviderCapabilities> capabilities() {
        return this.capabilities;
    }

    /**
     * Set the capabilities property: The capabilities property.
     * 
     * @param capabilities the capabilities value to set.
     * @return the ResourceProviderManifestInner object itself.
     */
    public ResourceProviderManifestInner withCapabilities(List<ResourceProviderCapabilities> capabilities) {
        this.capabilities = capabilities;
        return this;
    }

    /**
     * Get the metadata property: Anything.
     * 
     * @return the metadata value.
     */
    public Object metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: Anything.
     * 
     * @param metadata the metadata value to set.
     * @return the ResourceProviderManifestInner object itself.
     */
    public ResourceProviderManifestInner withMetadata(Object metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the globalNotificationEndpoints property: The globalNotificationEndpoints property.
     * 
     * @return the globalNotificationEndpoints value.
     */
    public List<ResourceProviderEndpoint> globalNotificationEndpoints() {
        return this.globalNotificationEndpoints;
    }

    /**
     * Set the globalNotificationEndpoints property: The globalNotificationEndpoints property.
     * 
     * @param globalNotificationEndpoints the globalNotificationEndpoints value to set.
     * @return the ResourceProviderManifestInner object itself.
     */
    public ResourceProviderManifestInner
        withGlobalNotificationEndpoints(List<ResourceProviderEndpoint> globalNotificationEndpoints) {
        this.globalNotificationEndpoints = globalNotificationEndpoints;
        return this;
    }

    /**
     * Get the reRegisterSubscriptionMetadata property: The reRegisterSubscriptionMetadata property.
     * 
     * @return the reRegisterSubscriptionMetadata value.
     */
    public ResourceProviderManifestReRegisterSubscriptionMetadata reRegisterSubscriptionMetadata() {
        return this.reRegisterSubscriptionMetadata;
    }

    /**
     * Set the reRegisterSubscriptionMetadata property: The reRegisterSubscriptionMetadata property.
     * 
     * @param reRegisterSubscriptionMetadata the reRegisterSubscriptionMetadata value to set.
     * @return the ResourceProviderManifestInner object itself.
     */
    public ResourceProviderManifestInner withReRegisterSubscriptionMetadata(
        ResourceProviderManifestReRegisterSubscriptionMetadata reRegisterSubscriptionMetadata) {
        this.reRegisterSubscriptionMetadata = reRegisterSubscriptionMetadata;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (providerAuthentication() != null) {
            providerAuthentication().validate();
        }
        if (providerAuthorizations() != null) {
            providerAuthorizations().forEach(e -> e.validate());
        }
        if (featuresRule() != null) {
            featuresRule().validate();
        }
        if (requestHeaderOptions() != null) {
            requestHeaderOptions().validate();
        }
        if (resourceTypes() != null) {
            resourceTypes().forEach(e -> e.validate());
        }
        if (management() != null) {
            management().validate();
        }
        if (capabilities() != null) {
            capabilities().forEach(e -> e.validate());
        }
        if (globalNotificationEndpoints() != null) {
            globalNotificationEndpoints().forEach(e -> e.validate());
        }
        if (reRegisterSubscriptionMetadata() != null) {
            reRegisterSubscriptionMetadata().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("providerAuthentication", this.providerAuthentication);
        jsonWriter.writeArrayField("providerAuthorizations", this.providerAuthorizations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("namespace", this.namespace);
        jsonWriter.writeStringField("providerVersion", this.providerVersion);
        jsonWriter.writeStringField("providerType", this.providerType == null ? null : this.providerType.toString());
        jsonWriter.writeArrayField("requiredFeatures", this.requiredFeatures,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("featuresRule", this.featuresRule);
        jsonWriter.writeJsonField("requestHeaderOptions", this.requestHeaderOptions);
        jsonWriter.writeArrayField("resourceTypes", this.resourceTypes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("management", this.management);
        jsonWriter.writeArrayField("capabilities", this.capabilities, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeUntypedField("metadata", this.metadata);
        jsonWriter.writeArrayField("globalNotificationEndpoints", this.globalNotificationEndpoints,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("reRegisterSubscriptionMetadata", this.reRegisterSubscriptionMetadata);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceProviderManifestInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceProviderManifestInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceProviderManifestInner.
     */
    public static ResourceProviderManifestInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceProviderManifestInner deserializedResourceProviderManifestInner
                = new ResourceProviderManifestInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("providerAuthentication".equals(fieldName)) {
                    deserializedResourceProviderManifestInner.providerAuthentication
                        = ResourceProviderManifestProviderAuthentication.fromJson(reader);
                } else if ("providerAuthorizations".equals(fieldName)) {
                    List<ResourceProviderAuthorization> providerAuthorizations
                        = reader.readArray(reader1 -> ResourceProviderAuthorization.fromJson(reader1));
                    deserializedResourceProviderManifestInner.providerAuthorizations = providerAuthorizations;
                } else if ("namespace".equals(fieldName)) {
                    deserializedResourceProviderManifestInner.namespace = reader.getString();
                } else if ("providerVersion".equals(fieldName)) {
                    deserializedResourceProviderManifestInner.providerVersion = reader.getString();
                } else if ("providerType".equals(fieldName)) {
                    deserializedResourceProviderManifestInner.providerType
                        = ResourceProviderType.fromString(reader.getString());
                } else if ("requiredFeatures".equals(fieldName)) {
                    List<String> requiredFeatures = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceProviderManifestInner.requiredFeatures = requiredFeatures;
                } else if ("featuresRule".equals(fieldName)) {
                    deserializedResourceProviderManifestInner.featuresRule
                        = ResourceProviderManifestFeaturesRule.fromJson(reader);
                } else if ("requestHeaderOptions".equals(fieldName)) {
                    deserializedResourceProviderManifestInner.requestHeaderOptions
                        = ResourceProviderManifestRequestHeaderOptions.fromJson(reader);
                } else if ("resourceTypes".equals(fieldName)) {
                    List<ResourceType> resourceTypes = reader.readArray(reader1 -> ResourceType.fromJson(reader1));
                    deserializedResourceProviderManifestInner.resourceTypes = resourceTypes;
                } else if ("management".equals(fieldName)) {
                    deserializedResourceProviderManifestInner.management
                        = ResourceProviderManifestManagement.fromJson(reader);
                } else if ("capabilities".equals(fieldName)) {
                    List<ResourceProviderCapabilities> capabilities
                        = reader.readArray(reader1 -> ResourceProviderCapabilities.fromJson(reader1));
                    deserializedResourceProviderManifestInner.capabilities = capabilities;
                } else if ("metadata".equals(fieldName)) {
                    deserializedResourceProviderManifestInner.metadata = reader.readUntyped();
                } else if ("globalNotificationEndpoints".equals(fieldName)) {
                    List<ResourceProviderEndpoint> globalNotificationEndpoints
                        = reader.readArray(reader1 -> ResourceProviderEndpoint.fromJson(reader1));
                    deserializedResourceProviderManifestInner.globalNotificationEndpoints = globalNotificationEndpoints;
                } else if ("reRegisterSubscriptionMetadata".equals(fieldName)) {
                    deserializedResourceProviderManifestInner.reRegisterSubscriptionMetadata
                        = ResourceProviderManifestReRegisterSubscriptionMetadata.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceProviderManifestInner;
        });
    }
}
