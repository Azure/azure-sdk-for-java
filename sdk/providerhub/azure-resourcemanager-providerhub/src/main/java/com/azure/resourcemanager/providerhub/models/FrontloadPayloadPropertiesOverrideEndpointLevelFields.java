// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;
import java.util.List;

/**
 * The endpoint level fields to override.
 */
@Fluent
public final class FrontloadPayloadPropertiesOverrideEndpointLevelFields extends ResourceTypeEndpointBase {
    /**
     * Creates an instance of FrontloadPayloadPropertiesOverrideEndpointLevelFields class.
     */
    public FrontloadPayloadPropertiesOverrideEndpointLevelFields() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FrontloadPayloadPropertiesOverrideEndpointLevelFields withEnabled(boolean enabled) {
        super.withEnabled(enabled);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FrontloadPayloadPropertiesOverrideEndpointLevelFields withApiVersions(List<String> apiVersions) {
        super.withApiVersions(apiVersions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FrontloadPayloadPropertiesOverrideEndpointLevelFields withEndpointUri(String endpointUri) {
        super.withEndpointUri(endpointUri);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FrontloadPayloadPropertiesOverrideEndpointLevelFields withLocations(List<String> locations) {
        super.withLocations(locations);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FrontloadPayloadPropertiesOverrideEndpointLevelFields withRequiredFeatures(List<String> requiredFeatures) {
        super.withRequiredFeatures(requiredFeatures);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FrontloadPayloadPropertiesOverrideEndpointLevelFields
        withFeaturesRule(ResourceTypeEndpointBaseFeaturesRule featuresRule) {
        super.withFeaturesRule(featuresRule);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FrontloadPayloadPropertiesOverrideEndpointLevelFields withTimeout(Duration timeout) {
        super.withTimeout(timeout);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FrontloadPayloadPropertiesOverrideEndpointLevelFields withEndpointType(EndpointType endpointType) {
        super.withEndpointType(endpointType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FrontloadPayloadPropertiesOverrideEndpointLevelFields
        withDstsConfiguration(ResourceTypeEndpointBaseDstsConfiguration dstsConfiguration) {
        super.withDstsConfiguration(dstsConfiguration);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FrontloadPayloadPropertiesOverrideEndpointLevelFields withSkuLink(String skuLink) {
        super.withSkuLink(skuLink);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FrontloadPayloadPropertiesOverrideEndpointLevelFields withApiVersion(String apiVersion) {
        super.withApiVersion(apiVersion);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FrontloadPayloadPropertiesOverrideEndpointLevelFields withZones(List<String> zones) {
        super.withZones(zones);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (apiVersions() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property apiVersions in model FrontloadPayloadPropertiesOverrideEndpointLevelFields"));
        }
        if (endpointUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property endpointUri in model FrontloadPayloadPropertiesOverrideEndpointLevelFields"));
        }
        if (locations() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property locations in model FrontloadPayloadPropertiesOverrideEndpointLevelFields"));
        }
        if (requiredFeatures() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property requiredFeatures in model FrontloadPayloadPropertiesOverrideEndpointLevelFields"));
        }
        if (featuresRule() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property featuresRule in model FrontloadPayloadPropertiesOverrideEndpointLevelFields"));
        } else {
            featuresRule().validate();
        }
        if (timeout() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property timeout in model FrontloadPayloadPropertiesOverrideEndpointLevelFields"));
        }
        if (endpointType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property endpointType in model FrontloadPayloadPropertiesOverrideEndpointLevelFields"));
        }
        if (dstsConfiguration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dstsConfiguration in model FrontloadPayloadPropertiesOverrideEndpointLevelFields"));
        } else {
            dstsConfiguration().validate();
        }
        if (skuLink() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property skuLink in model FrontloadPayloadPropertiesOverrideEndpointLevelFields"));
        }
        if (apiVersion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property apiVersion in model FrontloadPayloadPropertiesOverrideEndpointLevelFields"));
        }
        if (zones() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property zones in model FrontloadPayloadPropertiesOverrideEndpointLevelFields"));
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(FrontloadPayloadPropertiesOverrideEndpointLevelFields.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", enabled());
        jsonWriter.writeArrayField("apiVersions", apiVersions(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("endpointUri", endpointUri());
        jsonWriter.writeArrayField("locations", locations(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("requiredFeatures", requiredFeatures(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("featuresRule", featuresRule());
        jsonWriter.writeStringField("timeout", CoreUtils.durationToStringWithDays(timeout()));
        jsonWriter.writeStringField("endpointType", endpointType() == null ? null : endpointType().toString());
        jsonWriter.writeJsonField("dstsConfiguration", dstsConfiguration());
        jsonWriter.writeStringField("skuLink", skuLink());
        jsonWriter.writeStringField("apiVersion", apiVersion());
        jsonWriter.writeArrayField("zones", zones(), (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FrontloadPayloadPropertiesOverrideEndpointLevelFields from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FrontloadPayloadPropertiesOverrideEndpointLevelFields if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FrontloadPayloadPropertiesOverrideEndpointLevelFields.
     */
    public static FrontloadPayloadPropertiesOverrideEndpointLevelFields fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            FrontloadPayloadPropertiesOverrideEndpointLevelFields deserializedFrontloadPayloadPropertiesOverrideEndpointLevelFields
                = new FrontloadPayloadPropertiesOverrideEndpointLevelFields();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedFrontloadPayloadPropertiesOverrideEndpointLevelFields.withEnabled(reader.getBoolean());
                } else if ("apiVersions".equals(fieldName)) {
                    List<String> apiVersions = reader.readArray(reader1 -> reader1.getString());
                    deserializedFrontloadPayloadPropertiesOverrideEndpointLevelFields.withApiVersions(apiVersions);
                } else if ("endpointUri".equals(fieldName)) {
                    deserializedFrontloadPayloadPropertiesOverrideEndpointLevelFields
                        .withEndpointUri(reader.getString());
                } else if ("locations".equals(fieldName)) {
                    List<String> locations = reader.readArray(reader1 -> reader1.getString());
                    deserializedFrontloadPayloadPropertiesOverrideEndpointLevelFields.withLocations(locations);
                } else if ("requiredFeatures".equals(fieldName)) {
                    List<String> requiredFeatures = reader.readArray(reader1 -> reader1.getString());
                    deserializedFrontloadPayloadPropertiesOverrideEndpointLevelFields
                        .withRequiredFeatures(requiredFeatures);
                } else if ("featuresRule".equals(fieldName)) {
                    deserializedFrontloadPayloadPropertiesOverrideEndpointLevelFields
                        .withFeaturesRule(ResourceTypeEndpointBaseFeaturesRule.fromJson(reader));
                } else if ("timeout".equals(fieldName)) {
                    deserializedFrontloadPayloadPropertiesOverrideEndpointLevelFields
                        .withTimeout(reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString())));
                } else if ("endpointType".equals(fieldName)) {
                    deserializedFrontloadPayloadPropertiesOverrideEndpointLevelFields
                        .withEndpointType(EndpointType.fromString(reader.getString()));
                } else if ("dstsConfiguration".equals(fieldName)) {
                    deserializedFrontloadPayloadPropertiesOverrideEndpointLevelFields
                        .withDstsConfiguration(ResourceTypeEndpointBaseDstsConfiguration.fromJson(reader));
                } else if ("skuLink".equals(fieldName)) {
                    deserializedFrontloadPayloadPropertiesOverrideEndpointLevelFields.withSkuLink(reader.getString());
                } else if ("apiVersion".equals(fieldName)) {
                    deserializedFrontloadPayloadPropertiesOverrideEndpointLevelFields
                        .withApiVersion(reader.getString());
                } else if ("zones".equals(fieldName)) {
                    List<String> zones = reader.readArray(reader1 -> reader1.getString());
                    deserializedFrontloadPayloadPropertiesOverrideEndpointLevelFields.withZones(zones);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFrontloadPayloadPropertiesOverrideEndpointLevelFields;
        });
    }
}
