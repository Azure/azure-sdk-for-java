// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ResourceTypeOnBehalfOfToken model.
 */
@Fluent
public final class ResourceTypeOnBehalfOfToken implements JsonSerializable<ResourceTypeOnBehalfOfToken> {
    /*
     * The action name.
     */
    private String actionName;

    /*
     * This is a TimeSpan property.
     */
    private String lifeTime;

    /**
     * Creates an instance of ResourceTypeOnBehalfOfToken class.
     */
    public ResourceTypeOnBehalfOfToken() {
    }

    /**
     * Get the actionName property: The action name.
     * 
     * @return the actionName value.
     */
    public String actionName() {
        return this.actionName;
    }

    /**
     * Set the actionName property: The action name.
     * 
     * @param actionName the actionName value to set.
     * @return the ResourceTypeOnBehalfOfToken object itself.
     */
    public ResourceTypeOnBehalfOfToken withActionName(String actionName) {
        this.actionName = actionName;
        return this;
    }

    /**
     * Get the lifeTime property: This is a TimeSpan property.
     * 
     * @return the lifeTime value.
     */
    public String lifeTime() {
        return this.lifeTime;
    }

    /**
     * Set the lifeTime property: This is a TimeSpan property.
     * 
     * @param lifeTime the lifeTime value to set.
     * @return the ResourceTypeOnBehalfOfToken object itself.
     */
    public ResourceTypeOnBehalfOfToken withLifeTime(String lifeTime) {
        this.lifeTime = lifeTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("actionName", this.actionName);
        jsonWriter.writeStringField("lifeTime", this.lifeTime);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceTypeOnBehalfOfToken from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceTypeOnBehalfOfToken if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceTypeOnBehalfOfToken.
     */
    public static ResourceTypeOnBehalfOfToken fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceTypeOnBehalfOfToken deserializedResourceTypeOnBehalfOfToken = new ResourceTypeOnBehalfOfToken();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("actionName".equals(fieldName)) {
                    deserializedResourceTypeOnBehalfOfToken.actionName = reader.getString();
                } else if ("lifeTime".equals(fieldName)) {
                    deserializedResourceTypeOnBehalfOfToken.lifeTime = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceTypeOnBehalfOfToken;
        });
    }
}
