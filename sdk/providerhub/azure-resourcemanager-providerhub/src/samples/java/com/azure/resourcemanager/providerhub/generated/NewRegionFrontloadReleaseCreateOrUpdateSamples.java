// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.generated;

import com.azure.resourcemanager.providerhub.models.AvailableCheckInManifestEnvironment;
import com.azure.resourcemanager.providerhub.models.EndpointType;
import com.azure.resourcemanager.providerhub.models.FrontloadPayload;
import com.azure.resourcemanager.providerhub.models.FrontloadPayloadProperties;
import com.azure.resourcemanager.providerhub.models.FrontloadPayloadPropertiesOverrideEndpointLevelFields;
import com.azure.resourcemanager.providerhub.models.FrontloadPayloadPropertiesOverrideManifestLevelFields;
import com.azure.resourcemanager.providerhub.models.ResourceHydrationAccount;
import com.azure.resourcemanager.providerhub.models.ResourceTypeEndpointBaseDstsConfiguration;
import com.azure.resourcemanager.providerhub.models.ResourceTypeEndpointBaseFeaturesRule;
import com.azure.resourcemanager.providerhub.models.ServiceFeatureFlagAction;
import java.time.Duration;
import java.util.Arrays;

/**
 * Samples for NewRegionFrontloadRelease CreateOrUpdate.
 */
public final class NewRegionFrontloadReleaseCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/providerhub/resource-manager/Microsoft.ProviderHub/stable/2024-09-01/examples/
     * NewRegionFrontloadRelease_CreateOrUpdate.json
     */
    /**
     * Sample code: NewRegionFrontloadRelease_CreateOrUpdate.
     * 
     * @param manager Entry point to ProviderHubManager.
     */
    public static void
        newRegionFrontloadReleaseCreateOrUpdate(com.azure.resourcemanager.providerhub.ProviderHubManager manager) {
        manager.newRegionFrontloadReleases()
            .createOrUpdateWithResponse("Microsoft.Contoso", "2020week10",
                new FrontloadPayload().withProperties(new FrontloadPayloadProperties().withOperationType("Rollout")
                    .withProviderNamespace("Microsoft.Contoso")
                    .withFrontloadLocation("Israel Central")
                    .withCopyFromLocation("eastus")
                    .withEnvironmentType(AvailableCheckInManifestEnvironment.PROD)
                    .withServiceFeatureFlag(ServiceFeatureFlagAction.DO_NOT_CREATE)
                    .withIncludeResourceTypes(Arrays.asList("servers"))
                    .withExcludeResourceTypes(Arrays.asList("monitors"))
                    .withOverrideManifestLevelFields(
                        new FrontloadPayloadPropertiesOverrideManifestLevelFields().withResourceHydrationAccounts(
                            Arrays.asList(new ResourceHydrationAccount().withAccountName("classichydrationprodsn01")
                                .withSubscriptionId("e4eae963-2d15-43e6-a097-98bd75b33edd"))))
                    .withOverrideEndpointLevelFields(
                        new FrontloadPayloadPropertiesOverrideEndpointLevelFields().withEnabled(true)
                            .withApiVersions(Arrays.asList("2024-04-01-preview"))
                            .withEndpointUri("https://resource-endpoint.com/")
                            .withLocations(Arrays.asList("East US"))
                            .withRequiredFeatures(Arrays.asList("<feature flag>"))
                            .withFeaturesRule(new ResourceTypeEndpointBaseFeaturesRule())
                            .withTimeout(Duration.parse("PT20S"))
                            .withEndpointType(EndpointType.PRODUCTION)
                            .withDstsConfiguration(
                                new ResourceTypeEndpointBaseDstsConfiguration().withServiceName("resourceprovider")
                                    .withServiceDnsName("messaging.azure-ppe.net"))
                            .withSkuLink("http://endpointuri/westus/skus")
                            .withApiVersion("2024-04-01-preview")
                            .withZones(Arrays.asList("zone1")))
                    .withIgnoreFields(Arrays.asList("apiversion"))),
                com.azure.core.util.Context.NONE);
    }
}
