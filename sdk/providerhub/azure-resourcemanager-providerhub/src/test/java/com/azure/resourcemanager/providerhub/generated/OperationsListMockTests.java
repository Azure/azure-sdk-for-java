// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.providerhub.ProviderHubManager;
import com.azure.resourcemanager.providerhub.models.OperationActionType;
import com.azure.resourcemanager.providerhub.models.OperationOrigins;
import com.azure.resourcemanager.providerhub.models.OperationsDefinition;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"ihywartspph\",\"isDataAction\":true,\"origin\":\"User\",\"display\":{\"provider\":\"kxdssjpemmucfxh\",\"resource\":\"kkflrmymyincqlhr\",\"operation\":\"s\",\"description\":\"sl\"},\"actionType\":\"Internal\",\"properties\":\"dataovgqcgxuugqkctot\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ProviderHubManager manager = ProviderHubManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<OperationsDefinition> response = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ihywartspph", response.iterator().next().name());
        Assertions.assertEquals(true, response.iterator().next().isDataAction());
        Assertions.assertEquals(OperationOrigins.USER, response.iterator().next().origin());
        Assertions.assertEquals("kxdssjpemmucfxh", response.iterator().next().display().provider());
        Assertions.assertEquals("kkflrmymyincqlhr", response.iterator().next().display().resource());
        Assertions.assertEquals("s", response.iterator().next().display().operation());
        Assertions.assertEquals("sl", response.iterator().next().display().description());
        Assertions.assertEquals(OperationActionType.INTERNAL, response.iterator().next().actionType());
    }
}
