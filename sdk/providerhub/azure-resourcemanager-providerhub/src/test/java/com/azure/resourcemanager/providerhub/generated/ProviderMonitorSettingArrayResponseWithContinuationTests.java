// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.providerhub.fluent.models.ProviderMonitorSettingInner;
import com.azure.resourcemanager.providerhub.models.ProviderMonitorSettingArrayResponseWithContinuation;
import com.azure.resourcemanager.providerhub.models.ProviderMonitorSettingProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProviderMonitorSettingArrayResponseWithContinuationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProviderMonitorSettingArrayResponseWithContinuation model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleted\"},\"location\":\"pmcrdcuelj\",\"tags\":{\"lcjkayspthzodub\":\"hxmfqryarvsxzqb\"},\"id\":\"lmjtg\",\"name\":\"lioskkfmkmfdjx\",\"type\":\"xgbkkqvjcteo\"},{\"properties\":{\"provisioningState\":\"TransientFailure\"},\"location\":\"lskkzpxvj\",\"tags\":{\"xzfsnggytexvzilm\":\"pvocojhpcna\",\"kwwwnckn\":\"iv\",\"weucyrth\":\"zdajlskzptjxu\"},\"id\":\"qlehmcgcjeinu\",\"name\":\"hokamvfej\",\"type\":\"qnttmbq\"},{\"properties\":{\"provisioningState\":\"Accepted\"},\"location\":\"ivfokpysthhzagj\",\"tags\":{\"g\":\"yrl\",\"qszllrz\":\"nuzejgvkveb\",\"gmihzpimcqr\":\"smmd\"},\"id\":\"nxtminklog\",\"name\":\"svtzarhzv\",\"type\":\"nsqktc\"}],\"nextLink\":\"jwzzoslpk\"}")
            .toObject(ProviderMonitorSettingArrayResponseWithContinuation.class);
        Assertions.assertEquals("pmcrdcuelj", model.value().get(0).location());
        Assertions.assertEquals("hxmfqryarvsxzqb", model.value().get(0).tags().get("lcjkayspthzodub"));
        Assertions.assertEquals("jwzzoslpk", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProviderMonitorSettingArrayResponseWithContinuation model
            = new ProviderMonitorSettingArrayResponseWithContinuation().withValue(Arrays.asList(
                new ProviderMonitorSettingInner().withLocation("pmcrdcuelj")
                    .withTags(mapOf("lcjkayspthzodub", "hxmfqryarvsxzqb"))
                    .withProperties(new ProviderMonitorSettingProperties()),
                new ProviderMonitorSettingInner().withLocation("lskkzpxvj")
                    .withTags(mapOf("xzfsnggytexvzilm", "pvocojhpcna", "kwwwnckn", "iv", "weucyrth", "zdajlskzptjxu"))
                    .withProperties(new ProviderMonitorSettingProperties()),
                new ProviderMonitorSettingInner().withLocation("ivfokpysthhzagj")
                    .withTags(mapOf("g", "yrl", "qszllrz", "nuzejgvkveb", "gmihzpimcqr", "smmd"))
                    .withProperties(new ProviderMonitorSettingProperties())))
                .withNextLink("jwzzoslpk");
        model = BinaryData.fromObject(model).toObject(ProviderMonitorSettingArrayResponseWithContinuation.class);
        Assertions.assertEquals("pmcrdcuelj", model.value().get(0).location());
        Assertions.assertEquals("hxmfqryarvsxzqb", model.value().get(0).tags().get("lcjkayspthzodub"));
        Assertions.assertEquals("jwzzoslpk", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
