// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.providerhub.ProviderHubManager;
import com.azure.resourcemanager.providerhub.models.SkuResource;
import com.azure.resourcemanager.providerhub.models.SkuScaleType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SkusListByResourceTypeRegistrationsNestedResourceTypeSecondMockTests {
    @Test
    public void testListByResourceTypeRegistrationsNestedResourceTypeSecond() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"skuSettings\":[{\"name\":\"qvjweiwtczk\",\"tier\":\"nvovbooqbmdqrxy\",\"size\":\"ae\",\"family\":\"cflwtjdtlr\",\"kind\":\"fooy\",\"locations\":[\"xdtzcqipsdudgco\",\"zomehxlantolam\"],\"locationInfo\":[{\"location\":\"juxkqll\"}],\"requiredQuotaIds\":[\"pvwdtgckzdqiq\"],\"requiredFeatures\":[\"atrkwxoauwxs\",\"ykznhrfgslglhp\",\"yjfzi\",\"uioaeocpaj\"],\"capacity\":{\"minimum\":989988387,\"maximum\":2085922825,\"default\":1963332561,\"scaleType\":\"Manual\"},\"costs\":[{\"meterId\":\"krhd\"},{\"meterId\":\"cxbeuuqutkzwtjww\"},{\"meterId\":\"uzy\"}],\"capabilities\":[{\"name\":\"cxfnondegjdydhqk\",\"value\":\"kbjuckcatuqbhp\"},{\"name\":\"wcnxtpzdlyseid\",\"value\":\"oa\"}]}],\"provisioningState\":\"NotSpecified\"},\"id\":\"rytgrhzbqfdpfawr\",\"name\":\"tvcshtkutzcttb\",\"type\":\"gdirda\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ProviderHubManager manager = ProviderHubManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<SkuResource> response = manager.skus()
            .listByResourceTypeRegistrationsNestedResourceTypeSecond("mjodu", "fvulxfaryr", "jlgdez", "jqwahoyi",
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qvjweiwtczk", response.iterator().next().properties().skuSettings().get(0).name());
        Assertions.assertEquals("nvovbooqbmdqrxy", response.iterator().next().properties().skuSettings().get(0).tier());
        Assertions.assertEquals("ae", response.iterator().next().properties().skuSettings().get(0).size());
        Assertions.assertEquals("cflwtjdtlr", response.iterator().next().properties().skuSettings().get(0).family());
        Assertions.assertEquals("fooy", response.iterator().next().properties().skuSettings().get(0).kind());
        Assertions.assertEquals("xdtzcqipsdudgco",
            response.iterator().next().properties().skuSettings().get(0).locations().get(0));
        Assertions.assertEquals("juxkqll",
            response.iterator().next().properties().skuSettings().get(0).locationInfo().get(0).location());
        Assertions.assertEquals("pvwdtgckzdqiq",
            response.iterator().next().properties().skuSettings().get(0).requiredQuotaIds().get(0));
        Assertions.assertEquals("atrkwxoauwxs",
            response.iterator().next().properties().skuSettings().get(0).requiredFeatures().get(0));
        Assertions.assertEquals(989988387,
            response.iterator().next().properties().skuSettings().get(0).capacity().minimum());
        Assertions.assertEquals(2085922825,
            response.iterator().next().properties().skuSettings().get(0).capacity().maximum());
        Assertions.assertEquals(1963332561,
            response.iterator().next().properties().skuSettings().get(0).capacity().defaultProperty());
        Assertions.assertEquals(SkuScaleType.MANUAL,
            response.iterator().next().properties().skuSettings().get(0).capacity().scaleType());
        Assertions.assertEquals("krhd",
            response.iterator().next().properties().skuSettings().get(0).costs().get(0).meterId());
        Assertions.assertEquals("cxfnondegjdydhqk",
            response.iterator().next().properties().skuSettings().get(0).capabilities().get(0).name());
        Assertions.assertEquals("kbjuckcatuqbhp",
            response.iterator().next().properties().skuSettings().get(0).capabilities().get(0).value());
    }
}
