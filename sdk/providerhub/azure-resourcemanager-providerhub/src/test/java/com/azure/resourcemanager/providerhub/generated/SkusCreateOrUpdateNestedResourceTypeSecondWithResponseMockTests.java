// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.providerhub.ProviderHubManager;
import com.azure.resourcemanager.providerhub.fluent.models.SkuResourceInner;
import com.azure.resourcemanager.providerhub.models.ProvisioningState;
import com.azure.resourcemanager.providerhub.models.SkuCapability;
import com.azure.resourcemanager.providerhub.models.SkuCost;
import com.azure.resourcemanager.providerhub.models.SkuLocationInfo;
import com.azure.resourcemanager.providerhub.models.SkuResource;
import com.azure.resourcemanager.providerhub.models.SkuResourceProperties;
import com.azure.resourcemanager.providerhub.models.SkuScaleType;
import com.azure.resourcemanager.providerhub.models.SkuSetting;
import com.azure.resourcemanager.providerhub.models.SkuSettingCapacity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SkusCreateOrUpdateNestedResourceTypeSecondWithResponseMockTests {
    @Test
    public void testCreateOrUpdateNestedResourceTypeSecondWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"skuSettings\":[{\"name\":\"mrzoep\",\"tier\":\"wdvwnjkgvfnmx\",\"size\":\"rsqftib\",\"family\":\"ibuyvpirf\",\"kind\":\"pnqn\",\"locations\":[\"sbede\"],\"locationInfo\":[{\"location\":\"xkxbhxvu\"},{\"location\":\"nul\"}],\"requiredQuotaIds\":[\"hjevd\"],\"requiredFeatures\":[\"fajs\"],\"capacity\":{\"minimum\":1219985620,\"maximum\":183150913,\"default\":1133822985,\"scaleType\":\"None\"},\"costs\":[{\"meterId\":\"vyhjrl\"},{\"meterId\":\"izjixlq\"},{\"meterId\":\"hefkwabsolronqq\"},{\"meterId\":\"mgnlqxsjxtel\"}],\"capabilities\":[{\"name\":\"vuqbozoo\",\"value\":\"zqocarku\"},{\"name\":\"lbcnndt\",\"value\":\"nx\"}]},{\"name\":\"wqy\",\"tier\":\"lhdyzmyckzex\",\"size\":\"akckywym\",\"family\":\"aabjkdtfohfao\",\"kind\":\"vkiwrsiwdyjqu\",\"locations\":[\"crraueekcsu\"],\"locationInfo\":[{\"location\":\"gdda\"}],\"requiredQuotaIds\":[\"bgydlqidywm\",\"mptyrilkfbnrqqxv\"],\"requiredFeatures\":[\"bnfnqtxjtoma\",\"swbnfddepldwqjns\"],\"capacity\":{\"minimum\":1832889654,\"maximum\":799123872,\"default\":587916896,\"scaleType\":\"Automatic\"},\"costs\":[{\"meterId\":\"mywhsb\"},{\"meterId\":\"carycsjjzyvoaqa\"},{\"meterId\":\"uvehzptd\"},{\"meterId\":\"krrbhmpful\"}],\"capabilities\":[{\"name\":\"fgybpmfbf\",\"value\":\"nunmpzkrv\"},{\"name\":\"yifkdschlzvf\",\"value\":\"ctnkjjwgcwnph\"},{\"name\":\"kgf\",\"value\":\"rtogmhmj\"},{\"name\":\"jsc\",\"value\":\"fp\"}]},{\"name\":\"qwtygevgwmseharx\",\"tier\":\"vqnrxtmbpj\",\"size\":\"nvwjhrsidqpxl\",\"family\":\"pakftngatwm\",\"kind\":\"yutrymd\",\"locations\":[\"jhp\"],\"locationInfo\":[{\"location\":\"jqdvdwkqpldrlefg\"},{\"location\":\"aavuagntetaout\"},{\"location\":\"pdctuhspfefyi\"}],\"requiredQuotaIds\":[\"yeuyldph\",\"tybkcgs\"],\"requiredFeatures\":[\"hllnmwynefxe\"],\"capacity\":{\"minimum\":291211491,\"maximum\":110653977,\"default\":666857233,\"scaleType\":\"Automatic\"},\"costs\":[{\"meterId\":\"rl\"},{\"meterId\":\"mdskjhhxdlajfoxc\"},{\"meterId\":\"scv\"}],\"capabilities\":[{\"name\":\"lh\",\"value\":\"a\"},{\"name\":\"krmukmyjmkxett\",\"value\":\"slojfkqidnqt\"},{\"name\":\"qxjhqxcsqhtkbtnq\",\"value\":\"rngl\"}]}],\"provisioningState\":\"RolloutInProgress\"},\"id\":\"iipsnawwlqkz\",\"name\":\"xhhllxricct\",\"type\":\"wmuqqoajxeiygle\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ProviderHubManager manager = ProviderHubManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        SkuResource response = manager.skus()
            .createOrUpdateNestedResourceTypeSecondWithResponse("abmvmsxbaevwjc", "kottlwuhvajmailf", "mjjz",
                "kzwjiqullq", "bdmvrscmqerndbr",
                new SkuResourceInner().withProperties(new SkuResourceProperties()
                    .withSkuSettings(Arrays.asList(new SkuSetting().withName("ofltfnnxrkadjfy")
                        .withTier("fmu")
                        .withSize("iripfohyk")
                        .withFamily("xbbcbrw")
                        .withKind("u")
                        .withLocations(Arrays.asList("jizbeew", "iy"))
                        .withLocationInfo(Arrays.asList(new SkuLocationInfo().withLocation("zbju"),
                            new SkuLocationInfo().withLocation("rsrziuctix"),
                            new SkuLocationInfo().withLocation("bdsuifr")))
                        .withRequiredQuotaIds(
                            Arrays.asList("aapezkiswqjmdghs", "parybjufpt", "jczjnciuiyqv", "daswvpp"))
                        .withRequiredFeatures(Arrays.asList("qzlgcndhzxrrfcfs", "hkhg", "nxu"))
                        .withCapacity(new SkuSettingCapacity().withMinimum(446800244)
                            .withMaximum(704078862)
                            .withDefaultProperty(77482590)
                            .withScaleType(SkuScaleType.AUTOMATIC))
                        .withCosts(Arrays.asList(new SkuCost().withMeterId("xlb")))
                        .withCapabilities(Arrays.asList(new SkuCapability().withName("meikj").withValue("lwzacn"),
                            new SkuCapability().withName("wpfsuqtaaz").withValue("qbxyxoyfpuqqi")))))
                    .withProvisioningState(ProvisioningState.CREATED)),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("mrzoep", response.properties().skuSettings().get(0).name());
        Assertions.assertEquals("wdvwnjkgvfnmx", response.properties().skuSettings().get(0).tier());
        Assertions.assertEquals("rsqftib", response.properties().skuSettings().get(0).size());
        Assertions.assertEquals("ibuyvpirf", response.properties().skuSettings().get(0).family());
        Assertions.assertEquals("pnqn", response.properties().skuSettings().get(0).kind());
        Assertions.assertEquals("sbede", response.properties().skuSettings().get(0).locations().get(0));
        Assertions.assertEquals("xkxbhxvu",
            response.properties().skuSettings().get(0).locationInfo().get(0).location());
        Assertions.assertEquals("hjevd", response.properties().skuSettings().get(0).requiredQuotaIds().get(0));
        Assertions.assertEquals("fajs", response.properties().skuSettings().get(0).requiredFeatures().get(0));
        Assertions.assertEquals(1219985620, response.properties().skuSettings().get(0).capacity().minimum());
        Assertions.assertEquals(183150913, response.properties().skuSettings().get(0).capacity().maximum());
        Assertions.assertEquals(1133822985, response.properties().skuSettings().get(0).capacity().defaultProperty());
        Assertions.assertEquals(SkuScaleType.NONE, response.properties().skuSettings().get(0).capacity().scaleType());
        Assertions.assertEquals("vyhjrl", response.properties().skuSettings().get(0).costs().get(0).meterId());
        Assertions.assertEquals("vuqbozoo", response.properties().skuSettings().get(0).capabilities().get(0).name());
        Assertions.assertEquals("zqocarku", response.properties().skuSettings().get(0).capabilities().get(0).value());
        Assertions.assertEquals(ProvisioningState.ROLLOUT_IN_PROGRESS, response.properties().provisioningState());
    }
}
