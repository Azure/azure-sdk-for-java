// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.providerhub.models.ThrottlingMetric;
import com.azure.resourcemanager.providerhub.models.ThrottlingMetricType;
import com.azure.resourcemanager.providerhub.models.ThrottlingRule;
import java.time.Duration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ThrottlingRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ThrottlingRule model = BinaryData.fromString(
            "{\"action\":\"gkvtmelmqkrhah\",\"metrics\":[{\"type\":\"NotSpecified\",\"limit\":4311555676641493549,\"interval\":\"PT48H37M31S\"},{\"type\":\"NumberOfResources\",\"limit\":6531016586304771464,\"interval\":\"PT145H31M14S\"},{\"type\":\"NumberOfRequests\",\"limit\":4535829174726898901,\"interval\":\"PT125H13M24S\"}],\"requiredFeatures\":[\"exq\"]}")
            .toObject(ThrottlingRule.class);
        Assertions.assertEquals("gkvtmelmqkrhah", model.action());
        Assertions.assertEquals(ThrottlingMetricType.NOT_SPECIFIED, model.metrics().get(0).type());
        Assertions.assertEquals(4311555676641493549L, model.metrics().get(0).limit());
        Assertions.assertEquals(Duration.parse("PT48H37M31S"), model.metrics().get(0).interval());
        Assertions.assertEquals("exq", model.requiredFeatures().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ThrottlingRule model = new ThrottlingRule().withAction("gkvtmelmqkrhah")
            .withMetrics(Arrays.asList(
                new ThrottlingMetric().withType(ThrottlingMetricType.NOT_SPECIFIED)
                    .withLimit(4311555676641493549L)
                    .withInterval(Duration.parse("PT48H37M31S")),
                new ThrottlingMetric().withType(ThrottlingMetricType.NUMBER_OF_RESOURCES)
                    .withLimit(6531016586304771464L)
                    .withInterval(Duration.parse("PT145H31M14S")),
                new ThrottlingMetric().withType(ThrottlingMetricType.NUMBER_OF_REQUESTS)
                    .withLimit(4535829174726898901L)
                    .withInterval(Duration.parse("PT125H13M24S"))))
            .withRequiredFeatures(Arrays.asList("exq"));
        model = BinaryData.fromObject(model).toObject(ThrottlingRule.class);
        Assertions.assertEquals("gkvtmelmqkrhah", model.action());
        Assertions.assertEquals(ThrottlingMetricType.NOT_SPECIFIED, model.metrics().get(0).type());
        Assertions.assertEquals(4311555676641493549L, model.metrics().get(0).limit());
        Assertions.assertEquals(Duration.parse("PT48H37M31S"), model.metrics().get(0).interval());
        Assertions.assertEquals("exq", model.requiredFeatures().get(0));
    }
}
