// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.providerhub.models.ExtensionOptionType;
import com.azure.resourcemanager.providerhub.models.ResourceTypeExtensionOptionsResourceCreationBegin;
import com.azure.resourcemanager.providerhub.models.ResourceTypeRegistrationPropertiesExtensionOptions;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ResourceTypeRegistrationPropertiesExtensionOptionsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ResourceTypeRegistrationPropertiesExtensionOptions model = BinaryData.fromString(
            "{\"resourceCreationBegin\":{\"request\":[\"IncludeInternalMetadata\",\"DoNotMergeExistingReadOnlyAndSecretProperties\",\"DoNotMergeExistingReadOnlyAndSecretProperties\"],\"response\":[\"DoNotMergeExistingReadOnlyAndSecretProperties\"]}}")
            .toObject(ResourceTypeRegistrationPropertiesExtensionOptions.class);
        Assertions.assertEquals(ExtensionOptionType.INCLUDE_INTERNAL_METADATA,
            model.resourceCreationBegin().request().get(0));
        Assertions.assertEquals(ExtensionOptionType.DO_NOT_MERGE_EXISTING_READ_ONLY_AND_SECRET_PROPERTIES,
            model.resourceCreationBegin().response().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ResourceTypeRegistrationPropertiesExtensionOptions model
            = new ResourceTypeRegistrationPropertiesExtensionOptions()
                .withResourceCreationBegin(new ResourceTypeExtensionOptionsResourceCreationBegin()
                    .withRequest(Arrays.asList(ExtensionOptionType.INCLUDE_INTERNAL_METADATA,
                        ExtensionOptionType.DO_NOT_MERGE_EXISTING_READ_ONLY_AND_SECRET_PROPERTIES,
                        ExtensionOptionType.DO_NOT_MERGE_EXISTING_READ_ONLY_AND_SECRET_PROPERTIES))
                    .withResponse(
                        Arrays.asList(ExtensionOptionType.DO_NOT_MERGE_EXISTING_READ_ONLY_AND_SECRET_PROPERTIES)));
        model = BinaryData.fromObject(model).toObject(ResourceTypeRegistrationPropertiesExtensionOptions.class);
        Assertions.assertEquals(ExtensionOptionType.INCLUDE_INTERNAL_METADATA,
            model.resourceCreationBegin().request().get(0));
        Assertions.assertEquals(ExtensionOptionType.DO_NOT_MERGE_EXISTING_READ_ONLY_AND_SECRET_PROPERTIES,
            model.resourceCreationBegin().response().get(0));
    }
}
