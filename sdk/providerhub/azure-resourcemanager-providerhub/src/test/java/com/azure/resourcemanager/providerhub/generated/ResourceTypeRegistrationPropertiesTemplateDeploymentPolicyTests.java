// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.providerhub.models.ResourceTypeRegistrationPropertiesTemplateDeploymentPolicy;
import com.azure.resourcemanager.providerhub.models.TemplateDeploymentCapabilities;
import com.azure.resourcemanager.providerhub.models.TemplateDeploymentPreflightNotifications;
import com.azure.resourcemanager.providerhub.models.TemplateDeploymentPreflightOptions;
import org.junit.jupiter.api.Assertions;

public final class ResourceTypeRegistrationPropertiesTemplateDeploymentPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ResourceTypeRegistrationPropertiesTemplateDeploymentPolicy model = BinaryData.fromString(
            "{\"capabilities\":\"Preflight\",\"preflightOptions\":\"RegisteredOnly\",\"preflightNotifications\":\"UnregisteredSubscriptions\"}")
            .toObject(ResourceTypeRegistrationPropertiesTemplateDeploymentPolicy.class);
        Assertions.assertEquals(TemplateDeploymentCapabilities.PREFLIGHT, model.capabilities());
        Assertions.assertEquals(TemplateDeploymentPreflightOptions.REGISTERED_ONLY, model.preflightOptions());
        Assertions.assertEquals(TemplateDeploymentPreflightNotifications.UNREGISTERED_SUBSCRIPTIONS,
            model.preflightNotifications());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ResourceTypeRegistrationPropertiesTemplateDeploymentPolicy model
            = new ResourceTypeRegistrationPropertiesTemplateDeploymentPolicy()
                .withCapabilities(TemplateDeploymentCapabilities.PREFLIGHT)
                .withPreflightOptions(TemplateDeploymentPreflightOptions.REGISTERED_ONLY)
                .withPreflightNotifications(TemplateDeploymentPreflightNotifications.UNREGISTERED_SUBSCRIPTIONS);
        model = BinaryData.fromObject(model).toObject(ResourceTypeRegistrationPropertiesTemplateDeploymentPolicy.class);
        Assertions.assertEquals(TemplateDeploymentCapabilities.PREFLIGHT, model.capabilities());
        Assertions.assertEquals(TemplateDeploymentPreflightOptions.REGISTERED_ONLY, model.preflightOptions());
        Assertions.assertEquals(TemplateDeploymentPreflightNotifications.UNREGISTERED_SUBSCRIPTIONS,
            model.preflightNotifications());
    }
}
