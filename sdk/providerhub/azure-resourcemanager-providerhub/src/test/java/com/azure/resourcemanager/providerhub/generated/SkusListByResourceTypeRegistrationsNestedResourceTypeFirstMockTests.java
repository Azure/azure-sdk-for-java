// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.providerhub.ProviderHubManager;
import com.azure.resourcemanager.providerhub.models.ProvisioningState;
import com.azure.resourcemanager.providerhub.models.SkuResource;
import com.azure.resourcemanager.providerhub.models.SkuScaleType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SkusListByResourceTypeRegistrationsNestedResourceTypeFirstMockTests {
    @Test
    public void testListByResourceTypeRegistrationsNestedResourceTypeFirst() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"skuSettings\":[{\"name\":\"trwntfmtbgw\",\"tier\":\"xwnaz\",\"size\":\"rrdreyzjwhset\",\"family\":\"jwzzqseuzu\",\"kind\":\"y\",\"locations\":[\"qhyqqzzdcykey\",\"tewfopazdazgbsq\",\"pew\",\"c\"],\"locationInfo\":[{\"location\":\"mdpv\"},{\"location\":\"zgl\"},{\"location\":\"jbkn\"},{\"location\":\"zcl\"}],\"requiredQuotaIds\":[\"eyowmndcovd\",\"zqauxzan\",\"mk\",\"fruwkud\"],\"requiredFeatures\":[\"pftxudqyeme\"],\"capacity\":{\"minimum\":837268188,\"maximum\":1305142488,\"default\":507713109,\"scaleType\":\"Manual\"},\"costs\":[{\"meterId\":\"nee\"},{\"meterId\":\"mjauwcgx\"},{\"meterId\":\"fnohaitran\"},{\"meterId\":\"zerwgudas\"}],\"capabilities\":[{\"name\":\"bvfbngfcocefhpri\",\"value\":\"lfmpztr\"}]},{\"name\":\"ud\",\"tier\":\"hlcdc\",\"size\":\"regp\",\"family\":\"moj\",\"kind\":\"rztnv\",\"locations\":[\"hqrdgrtwmewjzlpy\",\"cf\"],\"locationInfo\":[{\"location\":\"wjcayerzrr\"},{\"location\":\"nsyby\"}],\"requiredQuotaIds\":[\"lwzrg\"],\"requiredFeatures\":[\"l\",\"inkfscj\"],\"capacity\":{\"minimum\":2003402338,\"maximum\":325474754,\"default\":941574835,\"scaleType\":\"Automatic\"},\"costs\":[{\"meterId\":\"wtltngvmreuptrk\"},{\"meterId\":\"zmijajwo\"},{\"meterId\":\"xfsv\"},{\"meterId\":\"ghmp\"}],\"capabilities\":[{\"name\":\"lslrcigtzjc\",\"value\":\"bxqla\"}]},{\"name\":\"snsso\",\"tier\":\"xpavid\",\"size\":\"ev\",\"family\":\"fcvvy\",\"kind\":\"slpuxgcbdsva\",\"locations\":[\"ptwtrkxgpazwugxy\"],\"locationInfo\":[{\"location\":\"jo\"},{\"location\":\"felhldiuhzzgqlm\"},{\"location\":\"aewzgiudjp\"}],\"requiredQuotaIds\":[\"httqh\",\"mhk\",\"ezsdsuxheq\"],\"requiredFeatures\":[\"ruxspinymmqgwok\",\"ikpazf\",\"mjxuvjipfdvhaxd\"],\"capacity\":{\"minimum\":456970353,\"maximum\":1625333661,\"default\":2097746238,\"scaleType\":\"Automatic\"},\"costs\":[{\"meterId\":\"dklmvetatlakf\"},{\"meterId\":\"oixwgiksb\"},{\"meterId\":\"vtooxrpo\"}],\"capabilities\":[{\"name\":\"hchgjtnhtukf\",\"value\":\"cihmbfntumeezbxv\"},{\"name\":\"xbnuvwcga\",\"value\":\"gomtm\"},{\"name\":\"zwxuqgovsx\",\"value\":\"wwztj\"},{\"name\":\"mkkhtgfredml\",\"value\":\"cgrllc\"}]}],\"provisioningState\":\"NotSpecified\"},\"id\":\"ovjowazhpabacom\",\"name\":\"yotgkwsxnsrqorc\",\"type\":\"enmvcebxeetq\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ProviderHubManager manager = ProviderHubManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SkuResource> response = manager.skus()
            .listByResourceTypeRegistrationsNestedResourceTypeFirst("suenyg", "xcgjtf", "nquktrfnslnlrxs",
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("trwntfmtbgw", response.iterator().next().properties().skuSettings().get(0).name());
        Assertions.assertEquals("xwnaz", response.iterator().next().properties().skuSettings().get(0).tier());
        Assertions.assertEquals("rrdreyzjwhset", response.iterator().next().properties().skuSettings().get(0).size());
        Assertions.assertEquals("jwzzqseuzu", response.iterator().next().properties().skuSettings().get(0).family());
        Assertions.assertEquals("y", response.iterator().next().properties().skuSettings().get(0).kind());
        Assertions.assertEquals("qhyqqzzdcykey",
            response.iterator().next().properties().skuSettings().get(0).locations().get(0));
        Assertions.assertEquals("mdpv",
            response.iterator().next().properties().skuSettings().get(0).locationInfo().get(0).location());
        Assertions.assertEquals("eyowmndcovd",
            response.iterator().next().properties().skuSettings().get(0).requiredQuotaIds().get(0));
        Assertions.assertEquals("pftxudqyeme",
            response.iterator().next().properties().skuSettings().get(0).requiredFeatures().get(0));
        Assertions.assertEquals(837268188,
            response.iterator().next().properties().skuSettings().get(0).capacity().minimum());
        Assertions.assertEquals(1305142488,
            response.iterator().next().properties().skuSettings().get(0).capacity().maximum());
        Assertions.assertEquals(507713109,
            response.iterator().next().properties().skuSettings().get(0).capacity().defaultProperty());
        Assertions.assertEquals(SkuScaleType.MANUAL,
            response.iterator().next().properties().skuSettings().get(0).capacity().scaleType());
        Assertions.assertEquals("nee",
            response.iterator().next().properties().skuSettings().get(0).costs().get(0).meterId());
        Assertions.assertEquals("bvfbngfcocefhpri",
            response.iterator().next().properties().skuSettings().get(0).capabilities().get(0).name());
        Assertions.assertEquals("lfmpztr",
            response.iterator().next().properties().skuSettings().get(0).capabilities().get(0).value());
        Assertions.assertEquals(ProvisioningState.NOT_SPECIFIED,
            response.iterator().next().properties().provisioningState());
    }
}
