// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.providerhub.ProviderHubManager;
import com.azure.resourcemanager.providerhub.models.ProvisioningState;
import com.azure.resourcemanager.providerhub.models.SkuResource;
import com.azure.resourcemanager.providerhub.models.SkuScaleType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SkusListByResourceTypeRegistrationsNestedResourceTypeThirdMockTests {
    @Test
    public void testListByResourceTypeRegistrationsNestedResourceTypeThird() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"skuSettings\":[{\"name\":\"krie\",\"tier\":\"gnixxowwzkyfwnw\",\"size\":\"wxeiicrmpepk\",\"family\":\"maxxijvskwsdgkjg\",\"kind\":\"cwrase\",\"locations\":[\"fcvoinwoqar\",\"wyxqiclad\"],\"locationInfo\":[{\"location\":\"davuqmcbyms\"},{\"location\":\"ob\"},{\"location\":\"lquvjezcjumvp\"},{\"location\":\"imioyo\"}],\"requiredQuotaIds\":[\"kmi\"],\"requiredFeatures\":[\"nracli\",\"bfqpspkladyd\",\"nhautwukexzgpmnm\",\"be\"],\"capacity\":{\"minimum\":1689468127,\"maximum\":1109451921,\"default\":1004297288,\"scaleType\":\"Automatic\"},\"costs\":[{\"meterId\":\"qfp\"}],\"capabilities\":[{\"name\":\"tclg\",\"value\":\"rvwerfwxbsmtb\"}]},{\"name\":\"jj\",\"tier\":\"hci\",\"size\":\"wdv\",\"family\":\"brekqhsqhtf\",\"kind\":\"pqbye\",\"locations\":[\"yqwdqi\"],\"locationInfo\":[{\"location\":\"hg\"}],\"requiredQuotaIds\":[\"txlujkhnjcmr\"],\"requiredFeatures\":[\"mkh\",\"qtwmlmhjnqtqeahj\",\"dvragpokddxejhh\",\"vgua\"],\"capacity\":{\"minimum\":1671331570,\"maximum\":996749819,\"default\":1069997729,\"scaleType\":\"Automatic\"},\"costs\":[{\"meterId\":\"n\"}],\"capabilities\":[{\"name\":\"bvoffb\",\"value\":\"kwvdxa\"},{\"name\":\"xqokmyrlji\",\"value\":\"lzbnobrqlpbcjt\"},{\"name\":\"pzuyudivbxnh\",\"value\":\"qeae\"}]},{\"name\":\"nqelwgdhuru\",\"tier\":\"tzarogatmoljiy\",\"size\":\"pinm\",\"family\":\"fkneerzztrkn\",\"kind\":\"ulugdybnhrxlelfj\",\"locations\":[\"izcpihtdmiw\",\"ekpt\"],\"locationInfo\":[{\"location\":\"ydbjzcqymlcf\"}],\"requiredQuotaIds\":[\"mhsurlgwqkpmm\",\"pstauol\",\"wiubmomsgvv\",\"hvvlrl\"],\"requiredFeatures\":[\"wjjmajnkdflqi\",\"ns\",\"aeqkzfzqxjoshoh\",\"otryegp\"],\"capacity\":{\"minimum\":113232070,\"maximum\":79529746,\"default\":815771409,\"scaleType\":\"Manual\"},\"costs\":[{\"meterId\":\"kbfok\"},{\"meterId\":\"khup\"},{\"meterId\":\"erufgjblcdrmy\"},{\"meterId\":\"cemftzgyykyalu\"}],\"capabilities\":[{\"name\":\"dfqnhttwdowrczfj\",\"value\":\"nnuxxrkkmhm\"}]}],\"provisioningState\":\"Canceled\"},\"id\":\"wempdcifrhju\",\"name\":\"rsulwzp\",\"type\":\"lusnawmhhgzotfr\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ProviderHubManager manager = ProviderHubManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SkuResource> response = manager.skus()
            .listByResourceTypeRegistrationsNestedResourceTypeThird("angp", "bfaxyxzlbc", "phmsexroq", "ndktxfv",
                "nfee", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("krie", response.iterator().next().properties().skuSettings().get(0).name());
        Assertions.assertEquals("gnixxowwzkyfwnw", response.iterator().next().properties().skuSettings().get(0).tier());
        Assertions.assertEquals("wxeiicrmpepk", response.iterator().next().properties().skuSettings().get(0).size());
        Assertions.assertEquals("maxxijvskwsdgkjg",
            response.iterator().next().properties().skuSettings().get(0).family());
        Assertions.assertEquals("cwrase", response.iterator().next().properties().skuSettings().get(0).kind());
        Assertions.assertEquals("fcvoinwoqar",
            response.iterator().next().properties().skuSettings().get(0).locations().get(0));
        Assertions.assertEquals("davuqmcbyms",
            response.iterator().next().properties().skuSettings().get(0).locationInfo().get(0).location());
        Assertions.assertEquals("kmi",
            response.iterator().next().properties().skuSettings().get(0).requiredQuotaIds().get(0));
        Assertions.assertEquals("nracli",
            response.iterator().next().properties().skuSettings().get(0).requiredFeatures().get(0));
        Assertions.assertEquals(1689468127,
            response.iterator().next().properties().skuSettings().get(0).capacity().minimum());
        Assertions.assertEquals(1109451921,
            response.iterator().next().properties().skuSettings().get(0).capacity().maximum());
        Assertions.assertEquals(1004297288,
            response.iterator().next().properties().skuSettings().get(0).capacity().defaultProperty());
        Assertions.assertEquals(SkuScaleType.AUTOMATIC,
            response.iterator().next().properties().skuSettings().get(0).capacity().scaleType());
        Assertions.assertEquals("qfp",
            response.iterator().next().properties().skuSettings().get(0).costs().get(0).meterId());
        Assertions.assertEquals("tclg",
            response.iterator().next().properties().skuSettings().get(0).capabilities().get(0).name());
        Assertions.assertEquals("rvwerfwxbsmtb",
            response.iterator().next().properties().skuSettings().get(0).capabilities().get(0).value());
        Assertions.assertEquals(ProvisioningState.CANCELED,
            response.iterator().next().properties().provisioningState());
    }
}
