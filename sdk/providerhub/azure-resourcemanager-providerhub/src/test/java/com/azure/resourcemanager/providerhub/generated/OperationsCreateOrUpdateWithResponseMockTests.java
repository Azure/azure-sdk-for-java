// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.providerhub.ProviderHubManager;
import com.azure.resourcemanager.providerhub.fluent.models.OperationsDefinitionInner;
import com.azure.resourcemanager.providerhub.models.OperationActionType;
import com.azure.resourcemanager.providerhub.models.OperationOrigins;
import com.azure.resourcemanager.providerhub.models.OperationsContent;
import com.azure.resourcemanager.providerhub.models.OperationsDefinitionDisplay;
import com.azure.resourcemanager.providerhub.models.OperationsPutContent;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OperationsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"name\":\"dzsylollgtrczz\",\"isDataAction\":true,\"origin\":\"System\",\"display\":{\"provider\":\"ji\",\"resource\":\"p\",\"operation\":\"uaurkihcir\",\"description\":\"defxrdc\"},\"actionType\":\"Internal\",\"properties\":\"datakkjanurnnqbnqbp\"},\"id\":\"zxqltgrdogypx\",\"name\":\"x\",\"type\":\"bfihw\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ProviderHubManager manager = ProviderHubManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        OperationsContent response = manager.operations()
            .createOrUpdateWithResponse("mguaml",
                new OperationsPutContent().withContents(Arrays.asList(
                    new OperationsDefinitionInner().withName("l")
                        .withIsDataAction(true)
                        .withOrigin(OperationOrigins.SYSTEM)
                        .withDisplay(new OperationsDefinitionDisplay().withProvider("lzgaufcshhvnew")
                            .withResource("nxkympqanxrjk")
                            .withOperation("xtwbta")
                            .withDescription("ypnyghshxc"))
                        .withActionType(OperationActionType.NOT_SPECIFIED)
                        .withProperties("datagmnsghpxy"),
                    new OperationsDefinitionInner().withName("phdrw")
                        .withIsDataAction(false)
                        .withOrigin(OperationOrigins.USER)
                        .withDisplay(new OperationsDefinitionDisplay().withProvider("yomacluzvxnqm")
                            .withResource("rpqpd")
                            .withOperation("wmkoisq")
                            .withDescription("ssffxuifmc"))
                        .withActionType(OperationActionType.NOT_SPECIFIED)
                        .withProperties("databkdq"))),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("dzsylollgtrczz", response.namePropertiesName());
        Assertions.assertEquals(true, response.isDataAction());
        Assertions.assertEquals(OperationOrigins.SYSTEM, response.origin());
        Assertions.assertEquals("ji", response.display().provider());
        Assertions.assertEquals("p", response.display().resource());
        Assertions.assertEquals("uaurkihcir", response.display().operation());
        Assertions.assertEquals("defxrdc", response.display().description());
        Assertions.assertEquals(OperationActionType.INTERNAL, response.actionType());
    }
}
