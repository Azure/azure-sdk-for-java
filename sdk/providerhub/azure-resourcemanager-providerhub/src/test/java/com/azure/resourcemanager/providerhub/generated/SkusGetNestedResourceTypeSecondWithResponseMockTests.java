// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.providerhub.ProviderHubManager;
import com.azure.resourcemanager.providerhub.models.SkuResource;
import com.azure.resourcemanager.providerhub.models.SkuScaleType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SkusGetNestedResourceTypeSecondWithResponseMockTests {
    @Test
    public void testGetNestedResourceTypeSecondWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"skuSettings\":[{\"name\":\"bdhlltq\",\"tier\":\"qkqsygxiyneco\",\"size\":\"gzkheubanl\",\"family\":\"npqcc\",\"kind\":\"iawzlzklaslgac\",\"locations\":[\"xlrarwpewsaudo\",\"jtighsxj\",\"ytnkqb\"],\"locationInfo\":[{\"location\":\"ho\"},{\"location\":\"uuwxhmehjnhjioti\"}],\"requiredQuotaIds\":[\"bcngkegxc\",\"pxbbfe\"],\"requiredFeatures\":[\"lyr\",\"oxpdxq\"],\"capacity\":{\"minimum\":133618171,\"maximum\":90782176,\"default\":418140405,\"scaleType\":\"Automatic\"},\"costs\":[{\"meterId\":\"u\"}],\"capabilities\":[{\"name\":\"wnah\",\"value\":\"k\"},{\"name\":\"jjmztnlmsoodtmv\",\"value\":\"cdhdyswcrpt\"},{\"name\":\"eajczxvlgsrgkr\",\"value\":\"izrpywlptyuqhrl\"},{\"name\":\"cs\",\"value\":\"ykpfu\"}]}],\"provisioningState\":\"Deleting\"},\"id\":\"c\",\"name\":\"pcfykkpy\",\"type\":\"cpawmp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ProviderHubManager manager = ProviderHubManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SkuResource response = manager.skus()
            .getNestedResourceTypeSecondWithResponse("okstsinvagovjyh", "rxbrdv", "ehqwhitxnmxgn", "guzbuw", "orbalkj",
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("bdhlltq", response.properties().skuSettings().get(0).name());
        Assertions.assertEquals("qkqsygxiyneco", response.properties().skuSettings().get(0).tier());
        Assertions.assertEquals("gzkheubanl", response.properties().skuSettings().get(0).size());
        Assertions.assertEquals("npqcc", response.properties().skuSettings().get(0).family());
        Assertions.assertEquals("iawzlzklaslgac", response.properties().skuSettings().get(0).kind());
        Assertions.assertEquals("xlrarwpewsaudo", response.properties().skuSettings().get(0).locations().get(0));
        Assertions.assertEquals("ho", response.properties().skuSettings().get(0).locationInfo().get(0).location());
        Assertions.assertEquals("bcngkegxc", response.properties().skuSettings().get(0).requiredQuotaIds().get(0));
        Assertions.assertEquals("lyr", response.properties().skuSettings().get(0).requiredFeatures().get(0));
        Assertions.assertEquals(133618171, response.properties().skuSettings().get(0).capacity().minimum());
        Assertions.assertEquals(90782176, response.properties().skuSettings().get(0).capacity().maximum());
        Assertions.assertEquals(418140405, response.properties().skuSettings().get(0).capacity().defaultProperty());
        Assertions.assertEquals(SkuScaleType.AUTOMATIC,
            response.properties().skuSettings().get(0).capacity().scaleType());
        Assertions.assertEquals("u", response.properties().skuSettings().get(0).costs().get(0).meterId());
        Assertions.assertEquals("wnah", response.properties().skuSettings().get(0).capabilities().get(0).name());
        Assertions.assertEquals("k", response.properties().skuSettings().get(0).capabilities().get(0).value());
    }
}
