// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.providerhub.ProviderHubManager;
import com.azure.resourcemanager.providerhub.models.SkuCapability;
import com.azure.resourcemanager.providerhub.models.SkuCost;
import com.azure.resourcemanager.providerhub.models.SkuLocationInfo;
import com.azure.resourcemanager.providerhub.models.SkuResource;
import com.azure.resourcemanager.providerhub.models.SkuResourceProperties;
import com.azure.resourcemanager.providerhub.models.SkuScaleType;
import com.azure.resourcemanager.providerhub.models.SkuSetting;
import com.azure.resourcemanager.providerhub.models.SkuSettingCapacity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SkusCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"skuSettings\":[{\"name\":\"skowkrbhzhrbkh\",\"tier\":\"qowiua\",\"size\":\"gqgucyhfaimqvd\",\"family\":\"ozkgyfpeoehg\",\"kind\":\"qmskkixv\",\"locations\":[\"xplhpeva\",\"yntvzjyielbq\"],\"locationInfo\":[{\"location\":\"bqvknmpecqxgiq\"}],\"requiredQuotaIds\":[\"fubnsnstlpwqpj\",\"xjkhtupsv\",\"ouweuiyx\",\"wkztsmsfbevyl\"],\"requiredFeatures\":[\"fhkqytkzta\",\"opgfzdgjfcy\",\"rsvloy\",\"h\"],\"capacity\":{\"minimum\":490275489,\"maximum\":1383935224,\"default\":771141351,\"scaleType\":\"Manual\"},\"costs\":[{\"meterId\":\"jquzx\"},{\"meterId\":\"ixhyoipnfdbgso\"},{\"meterId\":\"cienezfvbenn\"},{\"meterId\":\"fkbpjn\"}],\"capabilities\":[{\"name\":\"kwwnthropmdud\",\"value\":\"yiurztvktjh\"},{\"name\":\"fecqkoqyouerga\",\"value\":\"hpuzxkpye\"},{\"name\":\"hfdyldhgye\",\"value\":\"zfz\"},{\"name\":\"iyuq\",\"value\":\"tdereunokakzw\"}]},{\"name\":\"pjlwyxe\",\"tier\":\"nmxrfomckewvmyi\",\"size\":\"px\",\"family\":\"jt\",\"kind\":\"yzoutxfptofh\",\"locations\":[\"ywezy\",\"vadga\",\"qwvkgjpytpmpv\"],\"locationInfo\":[{\"location\":\"gehlufbortbnu\"},{\"location\":\"k\"}],\"requiredQuotaIds\":[\"zsvbxxyjisskobq\",\"clflioe\",\"yhxess\"],\"requiredFeatures\":[\"kdpsqeqfbd\",\"mdsesbrujbjpp\",\"ktlpdibfmthieat\"],\"capacity\":{\"minimum\":884718180,\"maximum\":873447963,\"default\":932238736,\"scaleType\":\"Manual\"},\"costs\":[{\"meterId\":\"lgtkihoni\"},{\"meterId\":\"zsrzfffjilzfbpnt\"},{\"meterId\":\"gkensckhbmcarmo\"},{\"meterId\":\"fxxkwykuqdndxl\"}],\"capabilities\":[{\"name\":\"kggapvdgtfpeer\",\"value\":\"cd\"}]}],\"provisioningState\":\"Created\"},\"id\":\"njrcuf\",\"name\":\"bgacnr\",\"type\":\"fdtncmspsanma\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ProviderHubManager manager = ProviderHubManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SkuResource response = manager.skus()
            .define("d")
            .withExistingResourcetypeRegistration("wuusiecktybh", "uxidhhxomilddxj")
            .withProperties(new SkuResourceProperties().withSkuSettings(Arrays.asList(
                new SkuSetting().withName("wjwi")
                    .withTier("qrslaate")
                    .withSize("wuj")
                    .withFamily("gxqgqwlxrhgtvhv")
                    .withKind("qykbkkt")
                    .withLocations(Arrays.asList("ejogmkor", "vmvm", "ofnqhlbs", "osnqliwkmzojfe"))
                    .withLocationInfo(Arrays.asList(new SkuLocationInfo().withLocation("lhtgmkn"),
                        new SkuLocationInfo().withLocation("zgbjbhrpgi"),
                        new SkuLocationInfo().withLocation("sttcucrcmm")))
                    .withRequiredQuotaIds(Arrays.asList("p"))
                    .withRequiredFeatures(Arrays.asList("wifhbksldttohq", "lna"))
                    .withCapacity(new SkuSettingCapacity().withMinimum(745351738)
                        .withMaximum(670450081)
                        .withDefaultProperty(592531724)
                        .withScaleType(SkuScaleType.AUTOMATIC))
                    .withCosts(Arrays.asList(new SkuCost().withMeterId("lr"),
                        new SkuCost().withMeterId("tpmglxkoikmtr"), new SkuCost().withMeterId("wrqkza")))
                    .withCapabilities(Arrays.asList(new SkuCapability().withName("nmpaklwzlweepr").withValue("ejzltka"),
                        new SkuCapability().withName("zfjsxscbd").withValue("xapgrcqebmvrdjom"),
                        new SkuCapability().withName("nwsb").withValue("vdlsflxkqesdfeds"))),
                new SkuSetting().withName("gzancoinmphy")
                    .withTier("qidkltvdh")
                    .withSize("ufbxweiibnto")
                    .withFamily("vfnybydh")
                    .withKind("haouwudhuaorhjk")
                    .withLocations(Arrays.asList("vumosqircamqp", "l", "brugejcvjkjycz", "mtagelajdyol"))
                    .withLocationInfo(Arrays.asList(new SkuLocationInfo().withLocation("yxqfmzsizzhravr")))
                    .withRequiredQuotaIds(Arrays.asList("jymgqbgcxhn", "xgzxlermkmer", "hskirhnp"))
                    .withRequiredFeatures(Arrays.asList("cbkfukd", "jqnvtsdyd", "hkpafyaloowwzizz"))
                    .withCapacity(new SkuSettingCapacity().withMinimum(397595273)
                        .withMaximum(1201640739)
                        .withDefaultProperty(339814756)
                        .withScaleType(SkuScaleType.AUTOMATIC))
                    .withCosts(Arrays.asList(new SkuCost().withMeterId("gufy"), new SkuCost().withMeterId("fdk"),
                        new SkuCost().withMeterId("iyvndjokgwes")))
                    .withCapabilities(Arrays.asList(new SkuCapability().withName("qh").withValue("qpfzlpejtznxlue"),
                        new SkuCapability().withName("ujqbbgsimwejl").withValue("bkbpjzobd"),
                        new SkuCapability().withName("bcpr").withValue("swku"),
                        new SkuCapability().withName("ydtnaczkfwfatgaw").withValue("hnskivdwgtqcume"))))))
            .create();

        Assertions.assertEquals("skowkrbhzhrbkh", response.properties().skuSettings().get(0).name());
        Assertions.assertEquals("qowiua", response.properties().skuSettings().get(0).tier());
        Assertions.assertEquals("gqgucyhfaimqvd", response.properties().skuSettings().get(0).size());
        Assertions.assertEquals("ozkgyfpeoehg", response.properties().skuSettings().get(0).family());
        Assertions.assertEquals("qmskkixv", response.properties().skuSettings().get(0).kind());
        Assertions.assertEquals("xplhpeva", response.properties().skuSettings().get(0).locations().get(0));
        Assertions.assertEquals("bqvknmpecqxgiq",
            response.properties().skuSettings().get(0).locationInfo().get(0).location());
        Assertions.assertEquals("fubnsnstlpwqpj", response.properties().skuSettings().get(0).requiredQuotaIds().get(0));
        Assertions.assertEquals("fhkqytkzta", response.properties().skuSettings().get(0).requiredFeatures().get(0));
        Assertions.assertEquals(490275489, response.properties().skuSettings().get(0).capacity().minimum());
        Assertions.assertEquals(1383935224, response.properties().skuSettings().get(0).capacity().maximum());
        Assertions.assertEquals(771141351, response.properties().skuSettings().get(0).capacity().defaultProperty());
        Assertions.assertEquals(SkuScaleType.MANUAL, response.properties().skuSettings().get(0).capacity().scaleType());
        Assertions.assertEquals("jquzx", response.properties().skuSettings().get(0).costs().get(0).meterId());
        Assertions.assertEquals("kwwnthropmdud",
            response.properties().skuSettings().get(0).capabilities().get(0).name());
        Assertions.assertEquals("yiurztvktjh",
            response.properties().skuSettings().get(0).capabilities().get(0).value());
    }
}
