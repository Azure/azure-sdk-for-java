// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.providerhub.models.EndpointType;
import com.azure.resourcemanager.providerhub.models.FeaturesPolicy;
import com.azure.resourcemanager.providerhub.models.ResourceProviderEndpoint;
import com.azure.resourcemanager.providerhub.models.ResourceProviderEndpointFeaturesRule;
import java.time.Duration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ResourceProviderEndpointTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ResourceProviderEndpoint model = BinaryData.fromString(
            "{\"enabled\":true,\"apiVersions\":[\"npime\",\"gstxgcp\",\"dg\"],\"endpointUri\":\"ajrmvdjwzrlovmc\",\"locations\":[\"ijcoejctb\",\"aqsqsycbkbfk\"],\"requiredFeatures\":[\"dkexxppofm\",\"axcfjpgddtocjjx\"],\"featuresRule\":{\"requiredFeaturesPolicy\":\"All\"},\"timeout\":\"PT138H2M36S\",\"endpointType\":\"NotSpecified\",\"skuLink\":\"hd\"}")
            .toObject(ResourceProviderEndpoint.class);
        Assertions.assertTrue(model.enabled());
        Assertions.assertEquals("npime", model.apiVersions().get(0));
        Assertions.assertEquals("ajrmvdjwzrlovmc", model.endpointUri());
        Assertions.assertEquals("ijcoejctb", model.locations().get(0));
        Assertions.assertEquals("dkexxppofm", model.requiredFeatures().get(0));
        Assertions.assertEquals(FeaturesPolicy.ALL, model.featuresRule().requiredFeaturesPolicy());
        Assertions.assertEquals(Duration.parse("PT138H2M36S"), model.timeout());
        Assertions.assertEquals(EndpointType.NOT_SPECIFIED, model.endpointType());
        Assertions.assertEquals("hd", model.skuLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ResourceProviderEndpoint model = new ResourceProviderEndpoint().withEnabled(true)
            .withApiVersions(Arrays.asList("npime", "gstxgcp", "dg"))
            .withEndpointUri("ajrmvdjwzrlovmc")
            .withLocations(Arrays.asList("ijcoejctb", "aqsqsycbkbfk"))
            .withRequiredFeatures(Arrays.asList("dkexxppofm", "axcfjpgddtocjjx"))
            .withFeaturesRule(new ResourceProviderEndpointFeaturesRule().withRequiredFeaturesPolicy(FeaturesPolicy.ALL))
            .withTimeout(Duration.parse("PT138H2M36S"))
            .withEndpointType(EndpointType.NOT_SPECIFIED)
            .withSkuLink("hd");
        model = BinaryData.fromObject(model).toObject(ResourceProviderEndpoint.class);
        Assertions.assertTrue(model.enabled());
        Assertions.assertEquals("npime", model.apiVersions().get(0));
        Assertions.assertEquals("ajrmvdjwzrlovmc", model.endpointUri());
        Assertions.assertEquals("ijcoejctb", model.locations().get(0));
        Assertions.assertEquals("dkexxppofm", model.requiredFeatures().get(0));
        Assertions.assertEquals(FeaturesPolicy.ALL, model.featuresRule().requiredFeaturesPolicy());
        Assertions.assertEquals(Duration.parse("PT138H2M36S"), model.timeout());
        Assertions.assertEquals(EndpointType.NOT_SPECIFIED, model.endpointType());
        Assertions.assertEquals("hd", model.skuLink());
    }
}
