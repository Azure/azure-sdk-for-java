// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.providerhub.fluent.models.CustomRolloutInner;
import com.azure.resourcemanager.providerhub.fluent.models.ResourceTypeRegistrationInner;
import com.azure.resourcemanager.providerhub.models.CustomRolloutArrayResponseWithContinuation;
import com.azure.resourcemanager.providerhub.models.CustomRolloutProperties;
import com.azure.resourcemanager.providerhub.models.CustomRolloutPropertiesSpecification;
import com.azure.resourcemanager.providerhub.models.CustomRolloutPropertiesStatus;
import com.azure.resourcemanager.providerhub.models.CustomRolloutSpecificationCanary;
import com.azure.resourcemanager.providerhub.models.CustomRolloutSpecificationProviderRegistration;
import com.azure.resourcemanager.providerhub.models.ExtendedErrorInfo;
import com.azure.resourcemanager.providerhub.models.ProviderRegistrationProperties;
import com.azure.resourcemanager.providerhub.models.ProvisioningState;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomRolloutArrayResponseWithContinuationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomRolloutArrayResponseWithContinuation model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleted\",\"specification\":{\"canary\":{\"regions\":[\"ovawjvzunlu\",\"hnnpr\"]},\"providerRegistration\":{\"properties\":{},\"id\":\"peilpjzuaejxdu\",\"name\":\"tskzbbtdzumveek\",\"type\":\"pwo\"},\"resourceTypeRegistrations\":[{\"id\":\"kfpbs\",\"name\":\"yofd\",\"type\":\"luu\"},{\"id\":\"dttouwaboekqvkel\",\"name\":\"smv\",\"type\":\"xwyjsflhhc\"}]},\"status\":{\"completedRegions\":[\"jixisxyawjoyaqcs\"],\"failedOrSkippedRegions\":{\"pkii\":{},\"zyexzn\":{},\"lixhnrztfol\":{},\"bnxknalaulppg\":{}}}},\"id\":\"dtpnapnyiropuhp\",\"name\":\"gvpgy\",\"type\":\"gqgitxmedjvcsl\"}],\"nextLink\":\"qwwncw\"}")
            .toObject(CustomRolloutArrayResponseWithContinuation.class);
        Assertions.assertEquals(ProvisioningState.DELETED, model.value().get(0).properties().provisioningState());
        Assertions.assertEquals("ovawjvzunlu",
            model.value().get(0).properties().specification().canary().regions().get(0));
        Assertions.assertEquals("jixisxyawjoyaqcs",
            model.value().get(0).properties().status().completedRegions().get(0));
        Assertions.assertEquals("qwwncw", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomRolloutArrayResponseWithContinuation model = new CustomRolloutArrayResponseWithContinuation()
            .withValue(Arrays.asList(new CustomRolloutInner()
                .withProperties(new CustomRolloutProperties().withProvisioningState(ProvisioningState.DELETED)
                    .withSpecification(new CustomRolloutPropertiesSpecification()
                        .withCanary(
                            new CustomRolloutSpecificationCanary().withRegions(Arrays.asList("ovawjvzunlu", "hnnpr")))
                        .withProviderRegistration(new CustomRolloutSpecificationProviderRegistration()
                            .withProperties(new ProviderRegistrationProperties()))
                        .withResourceTypeRegistrations(
                            Arrays.asList(new ResourceTypeRegistrationInner(), new ResourceTypeRegistrationInner())))
                    .withStatus(
                        new CustomRolloutPropertiesStatus().withCompletedRegions(Arrays.asList("jixisxyawjoyaqcs"))
                            .withFailedOrSkippedRegions(
                                mapOf("pkii", new ExtendedErrorInfo(), "zyexzn", new ExtendedErrorInfo(), "lixhnrztfol",
                                    new ExtendedErrorInfo(), "bnxknalaulppg", new ExtendedErrorInfo()))))))
            .withNextLink("qwwncw");
        model = BinaryData.fromObject(model).toObject(CustomRolloutArrayResponseWithContinuation.class);
        Assertions.assertEquals(ProvisioningState.DELETED, model.value().get(0).properties().provisioningState());
        Assertions.assertEquals("ovawjvzunlu",
            model.value().get(0).properties().specification().canary().regions().get(0));
        Assertions.assertEquals("jixisxyawjoyaqcs",
            model.value().get(0).properties().status().completedRegions().get(0));
        Assertions.assertEquals("qwwncw", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
