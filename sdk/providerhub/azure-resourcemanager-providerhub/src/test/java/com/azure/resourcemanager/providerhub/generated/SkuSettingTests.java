// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.providerhub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.providerhub.models.ExtendedLocationType;
import com.azure.resourcemanager.providerhub.models.SkuCapability;
import com.azure.resourcemanager.providerhub.models.SkuCost;
import com.azure.resourcemanager.providerhub.models.SkuLocationInfo;
import com.azure.resourcemanager.providerhub.models.SkuScaleType;
import com.azure.resourcemanager.providerhub.models.SkuSetting;
import com.azure.resourcemanager.providerhub.models.SkuSettingCapacity;
import com.azure.resourcemanager.providerhub.models.SkuZoneDetail;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SkuSettingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SkuSetting model = BinaryData.fromString(
            "{\"name\":\"xbkwv\",\"tier\":\"nzvdfbzdixzmq\",\"size\":\"odawopqhewjptmcg\",\"family\":\"ostzelndlatu\",\"kind\":\"zlbiojlvfhrbbpn\",\"locations\":[\"cwwyyur\",\"ochpprpr\",\"nmokayzejnhlbk\",\"bzpcpiljhahzvec\"],\"locationInfo\":[{\"location\":\"bnwieholew\",\"zones\":[\"uubw\",\"fqsfa\",\"aqtferr\"],\"zoneDetails\":[{\"name\":[\"kmfx\",\"pjwogqqno\",\"pud\"],\"capabilities\":[{\"name\":\"btqwpwyawbzas\",\"value\":\"bucljgkyexaogu\"},{\"name\":\"aipidsdaultxi\",\"value\":\"jumfqwazlnq\"},{\"name\":\"mcjn\",\"value\":\"zqdqxt\"},{\"name\":\"jw\",\"value\":\"nyfusfzsvtuikzh\"}]}],\"extendedLocations\":[\"glcfhmlrqryxyn\",\"nzrdpsovwxz\",\"ptgoeiybbabp\",\"hv\"],\"type\":\"NotSpecified\"}],\"requiredQuotaIds\":[\"ntjlr\",\"gjkskyrioov\",\"idsxwaabzmifry\"],\"requiredFeatures\":[\"mmaxrizkzobgo\",\"xlhslnel\",\"ieixynllxe\"],\"capacity\":{\"minimum\":1222388745,\"maximum\":2008141079,\"default\":1839785994,\"scaleType\":\"None\"},\"costs\":[{\"meterId\":\"cawjutifdwfmvi\",\"quantity\":817044673,\"extendedUnit\":\"jbt\"},{\"meterId\":\"zhraglkafh\",\"quantity\":1272146098,\"extendedUnit\":\"ujeickp\"},{\"meterId\":\"vcpopmxe\",\"quantity\":62072923,\"extendedUnit\":\"ltyjedexxmlfmk\"},{\"meterId\":\"scazuawxtzxpu\",\"quantity\":1528230497,\"extendedUnit\":\"bzxrvxcushsphai\"}],\"capabilities\":[{\"name\":\"yasflvgsgzwy\",\"value\":\"akoi\"},{\"name\":\"knsmjblmljhlnymz\",\"value\":\"tqyryuzcbmqqv\"},{\"name\":\"mv\",\"value\":\"fgtayxonsup\"}]}")
            .toObject(SkuSetting.class);
        Assertions.assertEquals("xbkwv", model.name());
        Assertions.assertEquals("nzvdfbzdixzmq", model.tier());
        Assertions.assertEquals("odawopqhewjptmcg", model.size());
        Assertions.assertEquals("ostzelndlatu", model.family());
        Assertions.assertEquals("zlbiojlvfhrbbpn", model.kind());
        Assertions.assertEquals("cwwyyur", model.locations().get(0));
        Assertions.assertEquals("bnwieholew", model.locationInfo().get(0).location());
        Assertions.assertEquals("uubw", model.locationInfo().get(0).zones().get(0));
        Assertions.assertEquals("kmfx", model.locationInfo().get(0).zoneDetails().get(0).name().get(0));
        Assertions.assertEquals("btqwpwyawbzas",
            model.locationInfo().get(0).zoneDetails().get(0).capabilities().get(0).name());
        Assertions.assertEquals("bucljgkyexaogu",
            model.locationInfo().get(0).zoneDetails().get(0).capabilities().get(0).value());
        Assertions.assertEquals("glcfhmlrqryxyn", model.locationInfo().get(0).extendedLocations().get(0));
        Assertions.assertEquals(ExtendedLocationType.NOT_SPECIFIED, model.locationInfo().get(0).type());
        Assertions.assertEquals("ntjlr", model.requiredQuotaIds().get(0));
        Assertions.assertEquals("mmaxrizkzobgo", model.requiredFeatures().get(0));
        Assertions.assertEquals(1222388745, model.capacity().minimum());
        Assertions.assertEquals(2008141079, model.capacity().maximum());
        Assertions.assertEquals(1839785994, model.capacity().defaultProperty());
        Assertions.assertEquals(SkuScaleType.NONE, model.capacity().scaleType());
        Assertions.assertEquals("cawjutifdwfmvi", model.costs().get(0).meterId());
        Assertions.assertEquals(817044673, model.costs().get(0).quantity());
        Assertions.assertEquals("jbt", model.costs().get(0).extendedUnit());
        Assertions.assertEquals("yasflvgsgzwy", model.capabilities().get(0).name());
        Assertions.assertEquals("akoi", model.capabilities().get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SkuSetting model
            = new SkuSetting().withName("xbkwv")
                .withTier("nzvdfbzdixzmq")
                .withSize("odawopqhewjptmcg")
                .withFamily("ostzelndlatu")
                .withKind("zlbiojlvfhrbbpn")
                .withLocations(Arrays.asList("cwwyyur", "ochpprpr", "nmokayzejnhlbk", "bzpcpiljhahzvec"))
                .withLocationInfo(
                    Arrays.asList(new SkuLocationInfo().withLocation("bnwieholew")
                        .withZones(Arrays.asList("uubw", "fqsfa", "aqtferr"))
                        .withZoneDetails(
                            Arrays.asList(new SkuZoneDetail().withName(Arrays.asList("kmfx", "pjwogqqno", "pud"))
                                .withCapabilities(Arrays.asList(
                                    new SkuCapability().withName("btqwpwyawbzas").withValue("bucljgkyexaogu"),
                                    new SkuCapability().withName("aipidsdaultxi").withValue("jumfqwazlnq"),
                                    new SkuCapability().withName("mcjn").withValue("zqdqxt"),
                                    new SkuCapability().withName("jw").withValue("nyfusfzsvtuikzh")))))
                        .withExtendedLocations(Arrays.asList("glcfhmlrqryxyn", "nzrdpsovwxz", "ptgoeiybbabp", "hv"))
                        .withType(ExtendedLocationType.NOT_SPECIFIED)))
                .withRequiredQuotaIds(Arrays.asList("ntjlr", "gjkskyrioov", "idsxwaabzmifry"))
                .withRequiredFeatures(Arrays.asList("mmaxrizkzobgo", "xlhslnel", "ieixynllxe"))
                .withCapacity(new SkuSettingCapacity().withMinimum(1222388745)
                    .withMaximum(2008141079)
                    .withDefaultProperty(1839785994)
                    .withScaleType(SkuScaleType.NONE))
                .withCosts(Arrays.asList(
                    new SkuCost().withMeterId("cawjutifdwfmvi").withQuantity(817044673).withExtendedUnit("jbt"),
                    new SkuCost().withMeterId("zhraglkafh").withQuantity(1272146098).withExtendedUnit("ujeickp"),
                    new SkuCost().withMeterId("vcpopmxe").withQuantity(62072923).withExtendedUnit("ltyjedexxmlfmk"),
                    new SkuCost().withMeterId("scazuawxtzxpu")
                        .withQuantity(1528230497)
                        .withExtendedUnit("bzxrvxcushsphai")))
                .withCapabilities(Arrays.asList(new SkuCapability().withName("yasflvgsgzwy").withValue("akoi"),
                    new SkuCapability().withName("knsmjblmljhlnymz").withValue("tqyryuzcbmqqv"),
                    new SkuCapability().withName("mv").withValue("fgtayxonsup")));
        model = BinaryData.fromObject(model).toObject(SkuSetting.class);
        Assertions.assertEquals("xbkwv", model.name());
        Assertions.assertEquals("nzvdfbzdixzmq", model.tier());
        Assertions.assertEquals("odawopqhewjptmcg", model.size());
        Assertions.assertEquals("ostzelndlatu", model.family());
        Assertions.assertEquals("zlbiojlvfhrbbpn", model.kind());
        Assertions.assertEquals("cwwyyur", model.locations().get(0));
        Assertions.assertEquals("bnwieholew", model.locationInfo().get(0).location());
        Assertions.assertEquals("uubw", model.locationInfo().get(0).zones().get(0));
        Assertions.assertEquals("kmfx", model.locationInfo().get(0).zoneDetails().get(0).name().get(0));
        Assertions.assertEquals("btqwpwyawbzas",
            model.locationInfo().get(0).zoneDetails().get(0).capabilities().get(0).name());
        Assertions.assertEquals("bucljgkyexaogu",
            model.locationInfo().get(0).zoneDetails().get(0).capabilities().get(0).value());
        Assertions.assertEquals("glcfhmlrqryxyn", model.locationInfo().get(0).extendedLocations().get(0));
        Assertions.assertEquals(ExtendedLocationType.NOT_SPECIFIED, model.locationInfo().get(0).type());
        Assertions.assertEquals("ntjlr", model.requiredQuotaIds().get(0));
        Assertions.assertEquals("mmaxrizkzobgo", model.requiredFeatures().get(0));
        Assertions.assertEquals(1222388745, model.capacity().minimum());
        Assertions.assertEquals(2008141079, model.capacity().maximum());
        Assertions.assertEquals(1839785994, model.capacity().defaultProperty());
        Assertions.assertEquals(SkuScaleType.NONE, model.capacity().scaleType());
        Assertions.assertEquals("cawjutifdwfmvi", model.costs().get(0).meterId());
        Assertions.assertEquals(817044673, model.costs().get(0).quantity());
        Assertions.assertEquals("jbt", model.costs().get(0).extendedUnit());
        Assertions.assertEquals("yasflvgsgzwy", model.capabilities().get(0).name());
        Assertions.assertEquals("akoi", model.capabilities().get(0).value());
    }
}
