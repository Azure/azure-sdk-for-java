// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.monitor.models;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.management.monitor.ErrorResponseException;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * DiagnosticSettingsCategorys.
 */
public final class DiagnosticSettingsCategorysInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private DiagnosticSettingsCategorysService service;

    /**
     * The service client containing this operation class.
     */
    private MonitorClientImpl client;

    /**
     * Initializes an instance of DiagnosticSettingsCategorysInner.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DiagnosticSettingsCategorysInner(MonitorClientImpl client) {
        this.service = RestProxy.create(DiagnosticSettingsCategorysService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * MonitorClientDiagnosticSettingsCategorys to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MonitorClientDiagnosticSettingsCategorys")
    private interface DiagnosticSettingsCategorysService {
        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("/{resourceUri}/providers/microsoft.insights/diagnosticSettingsCategories/{name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<DiagnosticSettingsCategoryResourceInner>> get(@HostParam("$host") String host, @PathParam(value = "resourceUri", encoded = true) String resourceUri, @QueryParam("api-version") String apiVersion, @PathParam("name") String name);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("/{resourceUri}/providers/microsoft.insights/diagnosticSettingsCategories")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<DiagnosticSettingsCategoryResourceCollectionInner>> list(@HostParam("$host") String host, @PathParam(value = "resourceUri", encoded = true) String resourceUri, @QueryParam("api-version") String apiVersion);
    }

    /**
     * Gets the diagnostic settings category for the specified resource.
     * 
     * @param resourceUri 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DiagnosticSettingsCategoryResourceInner>> getWithResponseAsync(String resourceUri, String name) {
        final String apiVersion = "2017-05-01-preview";
        return service.get(this.client.getHost(), resourceUri, apiVersion, name);
    }

    /**
     * Gets the diagnostic settings category for the specified resource.
     * 
     * @param resourceUri 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiagnosticSettingsCategoryResourceInner> getAsync(String resourceUri, String name) {
        return getWithResponseAsync(resourceUri, name)
            .flatMap((SimpleResponse<DiagnosticSettingsCategoryResourceInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Gets the diagnostic settings category for the specified resource.
     * 
     * @param resourceUri 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticSettingsCategoryResourceInner get(String resourceUri, String name) {
        return getAsync(resourceUri, name).block();
    }

    /**
     * Lists the diagnostic settings categories for the specified resource.
     * 
     * @param resourceUri 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DiagnosticSettingsCategoryResourceCollectionInner>> listWithResponseAsync(String resourceUri) {
        final String apiVersion = "2017-05-01-preview";
        return service.list(this.client.getHost(), resourceUri, apiVersion);
    }

    /**
     * Lists the diagnostic settings categories for the specified resource.
     * 
     * @param resourceUri 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiagnosticSettingsCategoryResourceCollectionInner> listAsync(String resourceUri) {
        return listWithResponseAsync(resourceUri)
            .flatMap((SimpleResponse<DiagnosticSettingsCategoryResourceCollectionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Lists the diagnostic settings categories for the specified resource.
     * 
     * @param resourceUri 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticSettingsCategoryResourceCollectionInner list(String resourceUri) {
        return listAsync(resourceUri).block();
    }
}
