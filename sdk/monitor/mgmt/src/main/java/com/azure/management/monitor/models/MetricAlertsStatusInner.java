// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.monitor.models;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.management.monitor.ErrorResponseException;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * MetricAlertsStatus.
 */
public final class MetricAlertsStatusInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private MetricAlertsStatusService service;

    /**
     * The service client containing this operation class.
     */
    private MonitorClientImpl client;

    /**
     * Initializes an instance of MetricAlertsStatusInner.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    MetricAlertsStatusInner(MonitorClientImpl client) {
        this.service = RestProxy.create(MetricAlertsStatusService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * MonitorClientMetricAlertsStatus to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MonitorClientMetricAlertsStatus")
    private interface MetricAlertsStatusService {
        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}/status")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<MetricAlertStatusCollectionInner>> list(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("ruleName") String ruleName, @QueryParam("api-version") String apiVersion);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}/status/{statusName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<MetricAlertStatusCollectionInner>> listByName(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("ruleName") String ruleName, @PathParam("statusName") String statusName, @QueryParam("api-version") String apiVersion);
    }

    /**
     * Retrieve an alert rule status.
     * 
     * @param resourceGroupName 
     * @param ruleName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<MetricAlertStatusCollectionInner>> listWithResponseAsync(String resourceGroupName, String ruleName) {
        final String apiVersion = "2018-03-01";
        return service.list(this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, ruleName, apiVersion);
    }

    /**
     * Retrieve an alert rule status.
     * 
     * @param resourceGroupName 
     * @param ruleName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MetricAlertStatusCollectionInner> listAsync(String resourceGroupName, String ruleName) {
        return listWithResponseAsync(resourceGroupName, ruleName)
            .flatMap((SimpleResponse<MetricAlertStatusCollectionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Retrieve an alert rule status.
     * 
     * @param resourceGroupName 
     * @param ruleName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MetricAlertStatusCollectionInner list(String resourceGroupName, String ruleName) {
        return listAsync(resourceGroupName, ruleName).block();
    }

    /**
     * Retrieve an alert rule status.
     * 
     * @param resourceGroupName 
     * @param ruleName 
     * @param statusName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<MetricAlertStatusCollectionInner>> listByNameWithResponseAsync(String resourceGroupName, String ruleName, String statusName) {
        final String apiVersion = "2018-03-01";
        return service.listByName(this.client.getHost(), this.client.getSubscriptionId(), resourceGroupName, ruleName, statusName, apiVersion);
    }

    /**
     * Retrieve an alert rule status.
     * 
     * @param resourceGroupName 
     * @param ruleName 
     * @param statusName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MetricAlertStatusCollectionInner> listByNameAsync(String resourceGroupName, String ruleName, String statusName) {
        return listByNameWithResponseAsync(resourceGroupName, ruleName, statusName)
            .flatMap((SimpleResponse<MetricAlertStatusCollectionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Retrieve an alert rule status.
     * 
     * @param resourceGroupName 
     * @param ruleName 
     * @param statusName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MetricAlertStatusCollectionInner listByName(String resourceGroupName, String ruleName, String statusName) {
        return listByNameAsync(resourceGroupName, ruleName, statusName).block();
    }
}
