/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.monitor.v2019_11_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.monitor.v2019_11_01.SubscriptionDiagnosticSettings;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import rx.Completable;
import com.microsoft.azure.management.monitor.v2019_11_01.SubscriptionDiagnosticSettingsResource;
import com.microsoft.azure.arm.utils.PagedListConverter;

class SubscriptionDiagnosticSettingsImpl extends WrapperImpl<SubscriptionDiagnosticSettingsInner> implements SubscriptionDiagnosticSettings {
    private PagedListConverter<SubscriptionDiagnosticSettingsResourceInner, SubscriptionDiagnosticSettingsResource> converter;
    private final MonitorManager manager;

    SubscriptionDiagnosticSettingsImpl(MonitorManager manager) {
        super(manager.inner().subscriptionDiagnosticSettings());
        this.manager = manager;
        this.converter = new PagedListConverter<SubscriptionDiagnosticSettingsResourceInner, SubscriptionDiagnosticSettingsResource>() {
            @Override
            public Observable<SubscriptionDiagnosticSettingsResource> typeConvertAsync(SubscriptionDiagnosticSettingsResourceInner inner) {
                return Observable.just((SubscriptionDiagnosticSettingsResource) wrapModel(inner));
            }
        };
    }

    public MonitorManager manager() {
        return this.manager;
    }

    @Override
    public SubscriptionDiagnosticSettingsResourceImpl define(String name) {
        return wrapModel(name);
    }

    private SubscriptionDiagnosticSettingsResourceImpl wrapModel(SubscriptionDiagnosticSettingsResourceInner inner) {
        return  new SubscriptionDiagnosticSettingsResourceImpl(inner, manager());
    }

    private SubscriptionDiagnosticSettingsResourceImpl wrapModel(String name) {
        return new SubscriptionDiagnosticSettingsResourceImpl(name, this.manager());
    }

    @Override
    public Observable<SubscriptionDiagnosticSettingsResource> getAsync(String name) {
        SubscriptionDiagnosticSettingsInner client = this.inner();
        return client.getAsync(name)
        .map(new Func1<SubscriptionDiagnosticSettingsResourceInner, SubscriptionDiagnosticSettingsResource>() {
            @Override
            public SubscriptionDiagnosticSettingsResource call(SubscriptionDiagnosticSettingsResourceInner inner) {
                return new SubscriptionDiagnosticSettingsResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String name) {
        SubscriptionDiagnosticSettingsInner client = this.inner();
        return client.deleteAsync(name).toCompletable();
    }

    @Override
    public PagedList<SubscriptionDiagnosticSettingsResource> list() {
        SubscriptionDiagnosticSettingsInner client = this.inner();
        return converter.convert(client.list());
    }

    @Override
    public Observable<SubscriptionDiagnosticSettingsResource> listAsync() {
        SubscriptionDiagnosticSettingsInner client = this.inner();
        return client.listAsync()
        .flatMap(new Func1<Page<SubscriptionDiagnosticSettingsResourceInner>, Observable<SubscriptionDiagnosticSettingsResourceInner>>() {
            @Override
            public Observable<SubscriptionDiagnosticSettingsResourceInner> call(Page<SubscriptionDiagnosticSettingsResourceInner> innerPage) {
                return Observable.from(innerPage.items());
            }
        })
        .map(new Func1<SubscriptionDiagnosticSettingsResourceInner, SubscriptionDiagnosticSettingsResource>() {
            @Override
            public SubscriptionDiagnosticSettingsResource call(SubscriptionDiagnosticSettingsResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
