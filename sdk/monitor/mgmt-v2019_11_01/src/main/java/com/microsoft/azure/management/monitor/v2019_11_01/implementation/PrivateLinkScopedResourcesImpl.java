/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.monitor.v2019_11_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.monitor.v2019_11_01.PrivateLinkScopedResources;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.monitor.v2019_11_01.ScopedResource;

class PrivateLinkScopedResourcesImpl extends WrapperImpl<PrivateLinkScopedResourcesInner> implements PrivateLinkScopedResources {
    private final MonitorManager manager;

    PrivateLinkScopedResourcesImpl(MonitorManager manager) {
        super(manager.inner().privateLinkScopedResources());
        this.manager = manager;
    }

    public MonitorManager manager() {
        return this.manager;
    }

    @Override
    public ScopedResourceImpl define(String name) {
        return wrapModel(name);
    }

    private ScopedResourceImpl wrapModel(ScopedResourceInner inner) {
        return  new ScopedResourceImpl(inner, manager());
    }

    private ScopedResourceImpl wrapModel(String name) {
        return new ScopedResourceImpl(name, this.manager());
    }

    @Override
    public Observable<ScopedResource> listByPrivateLinkScopeAsync(final String resourceGroupName, final String scopeName) {
        PrivateLinkScopedResourcesInner client = this.inner();
        return client.listByPrivateLinkScopeAsync(resourceGroupName, scopeName)
        .flatMapIterable(new Func1<Page<ScopedResourceInner>, Iterable<ScopedResourceInner>>() {
            @Override
            public Iterable<ScopedResourceInner> call(Page<ScopedResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ScopedResourceInner, ScopedResource>() {
            @Override
            public ScopedResource call(ScopedResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<ScopedResource> getAsync(String resourceGroupName, String scopeName, String name) {
        PrivateLinkScopedResourcesInner client = this.inner();
        return client.getAsync(resourceGroupName, scopeName, name)
        .flatMap(new Func1<ScopedResourceInner, Observable<ScopedResource>>() {
            @Override
            public Observable<ScopedResource> call(ScopedResourceInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((ScopedResource)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String scopeName, String name) {
        PrivateLinkScopedResourcesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, scopeName, name).toCompletable();
    }

}
