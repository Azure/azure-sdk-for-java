/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.monitor.v2019_11_01.implementation;

import com.microsoft.azure.management.monitor.v2019_11_01.DiagnosticSettingsResource;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.monitor.v2019_11_01.MetricSettings;
import com.microsoft.azure.management.monitor.v2019_11_01.LogSettings;

class DiagnosticSettingsResourceImpl extends CreatableUpdatableImpl<DiagnosticSettingsResource, DiagnosticSettingsResourceInner, DiagnosticSettingsResourceImpl> implements DiagnosticSettingsResource, DiagnosticSettingsResource.Definition, DiagnosticSettingsResource.Update {
    private String resourceUri;
    private String name;
    private final MonitorManager manager;

    DiagnosticSettingsResourceImpl(String name, MonitorManager manager) {
        super(name, new DiagnosticSettingsResourceInner());
        this.manager = manager;
        // Set resource name
        this.name = name;
        //
    }

    DiagnosticSettingsResourceImpl(DiagnosticSettingsResourceInner inner, MonitorManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.name = inner.name();
        // set resource ancestor and positional variables
        this.name = IdParsingUtils.getValueFromIdByName(inner.id(), "diagnosticSettings");
        this.resourceUri = IdParsingUtils.getValueFromIdByPosition(inner.id(), 0);
        // set other parameters for create and update
    }

    @Override
    public MonitorManager manager() {
        return this.manager;
    }

    @Override
    public Observable<DiagnosticSettingsResource> createResourceAsync() {
        DiagnosticSettingsInner client = this.manager().inner().diagnosticSettings();
        return client.createOrUpdateAsync(this.resourceUri, this.name, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<DiagnosticSettingsResource> updateResourceAsync() {
        DiagnosticSettingsInner client = this.manager().inner().diagnosticSettings();
        return client.createOrUpdateAsync(this.resourceUri, this.name, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DiagnosticSettingsResourceInner> getInnerAsync() {
        DiagnosticSettingsInner client = this.manager().inner().diagnosticSettings();
        return client.getAsync(this.resourceUri, this.name);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String eventHubAuthorizationRuleId() {
        return this.inner().eventHubAuthorizationRuleId();
    }

    @Override
    public String eventHubName() {
        return this.inner().eventHubName();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String logAnalyticsDestinationType() {
        return this.inner().logAnalyticsDestinationType();
    }

    @Override
    public List<LogSettings> logs() {
        return this.inner().logs();
    }

    @Override
    public List<MetricSettings> metrics() {
        return this.inner().metrics();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String serviceBusRuleId() {
        return this.inner().serviceBusRuleId();
    }

    @Override
    public String storageAccountId() {
        return this.inner().storageAccountId();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String workspaceId() {
        return this.inner().workspaceId();
    }

    @Override
    public DiagnosticSettingsResourceImpl withResourceUri(String resourceUri) {
        this.resourceUri = resourceUri;
        return this;
    }

    @Override
    public DiagnosticSettingsResourceImpl withEventHubAuthorizationRuleId(String eventHubAuthorizationRuleId) {
        this.inner().withEventHubAuthorizationRuleId(eventHubAuthorizationRuleId);
        return this;
    }

    @Override
    public DiagnosticSettingsResourceImpl withEventHubName(String eventHubName) {
        this.inner().withEventHubName(eventHubName);
        return this;
    }

    @Override
    public DiagnosticSettingsResourceImpl withLogAnalyticsDestinationType(String logAnalyticsDestinationType) {
        this.inner().withLogAnalyticsDestinationType(logAnalyticsDestinationType);
        return this;
    }

    @Override
    public DiagnosticSettingsResourceImpl withLogs(List<LogSettings> logs) {
        this.inner().withLogs(logs);
        return this;
    }

    @Override
    public DiagnosticSettingsResourceImpl withMetrics(List<MetricSettings> metrics) {
        this.inner().withMetrics(metrics);
        return this;
    }

    @Override
    public DiagnosticSettingsResourceImpl withServiceBusRuleId(String serviceBusRuleId) {
        this.inner().withServiceBusRuleId(serviceBusRuleId);
        return this;
    }

    @Override
    public DiagnosticSettingsResourceImpl withStorageAccountId(String storageAccountId) {
        this.inner().withStorageAccountId(storageAccountId);
        return this;
    }

    @Override
    public DiagnosticSettingsResourceImpl withWorkspaceId(String workspaceId) {
        this.inner().withWorkspaceId(workspaceId);
        return this;
    }

}
