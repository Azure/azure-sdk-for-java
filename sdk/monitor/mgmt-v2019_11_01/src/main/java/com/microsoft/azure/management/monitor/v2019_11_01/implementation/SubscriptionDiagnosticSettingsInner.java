/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.monitor.v2019_11_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.monitor.v2019_11_01.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in SubscriptionDiagnosticSettings.
 */
public class SubscriptionDiagnosticSettingsInner {
    /** The Retrofit service to perform REST calls. */
    private SubscriptionDiagnosticSettingsService service;
    /** The service client containing this operation class. */
    private MonitorManagementClientImpl client;

    /**
     * Initializes an instance of SubscriptionDiagnosticSettingsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SubscriptionDiagnosticSettingsInner(Retrofit retrofit, MonitorManagementClientImpl client) {
        this.service = retrofit.create(SubscriptionDiagnosticSettingsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for SubscriptionDiagnosticSettings to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SubscriptionDiagnosticSettingsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.monitor.v2019_11_01.SubscriptionDiagnosticSettings get" })
        @GET("subscriptions/{subscriptionId}/providers/microsoft.insights/diagnosticSettings/{name}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("name") String name, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.monitor.v2019_11_01.SubscriptionDiagnosticSettings createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/providers/microsoft.insights/diagnosticSettings/{name}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("name") String name, @Query("api-version") String apiVersion, @Body SubscriptionDiagnosticSettingsResourceInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.monitor.v2019_11_01.SubscriptionDiagnosticSettings delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/providers/microsoft.insights/diagnosticSettings/{name}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("name") String name, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.monitor.v2019_11_01.SubscriptionDiagnosticSettings list" })
        @GET("subscriptions/{subscriptionId}/providers/microsoft.insights/diagnosticSettings")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the active subscription diagnostic settings for the specified resource.
     *
     * @param name The name of the diagnostic setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SubscriptionDiagnosticSettingsResourceInner object if successful.
     */
    public SubscriptionDiagnosticSettingsResourceInner get(String name) {
        return getWithServiceResponseAsync(name).toBlocking().single().body();
    }

    /**
     * Gets the active subscription diagnostic settings for the specified resource.
     *
     * @param name The name of the diagnostic setting.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SubscriptionDiagnosticSettingsResourceInner> getAsync(String name, final ServiceCallback<SubscriptionDiagnosticSettingsResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(name), serviceCallback);
    }

    /**
     * Gets the active subscription diagnostic settings for the specified resource.
     *
     * @param name The name of the diagnostic setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SubscriptionDiagnosticSettingsResourceInner object
     */
    public Observable<SubscriptionDiagnosticSettingsResourceInner> getAsync(String name) {
        return getWithServiceResponseAsync(name).map(new Func1<ServiceResponse<SubscriptionDiagnosticSettingsResourceInner>, SubscriptionDiagnosticSettingsResourceInner>() {
            @Override
            public SubscriptionDiagnosticSettingsResourceInner call(ServiceResponse<SubscriptionDiagnosticSettingsResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the active subscription diagnostic settings for the specified resource.
     *
     * @param name The name of the diagnostic setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SubscriptionDiagnosticSettingsResourceInner object
     */
    public Observable<ServiceResponse<SubscriptionDiagnosticSettingsResourceInner>> getWithServiceResponseAsync(String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        final String apiVersion = "2017-05-01-preview";
        return service.get(this.client.subscriptionId(), name, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SubscriptionDiagnosticSettingsResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<SubscriptionDiagnosticSettingsResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SubscriptionDiagnosticSettingsResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SubscriptionDiagnosticSettingsResourceInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SubscriptionDiagnosticSettingsResourceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SubscriptionDiagnosticSettingsResourceInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates or updates subscription diagnostic settings for the specified resource.
     *
     * @param name The name of the diagnostic setting.
     * @param parameters Parameters supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SubscriptionDiagnosticSettingsResourceInner object if successful.
     */
    public SubscriptionDiagnosticSettingsResourceInner createOrUpdate(String name, SubscriptionDiagnosticSettingsResourceInner parameters) {
        return createOrUpdateWithServiceResponseAsync(name, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates subscription diagnostic settings for the specified resource.
     *
     * @param name The name of the diagnostic setting.
     * @param parameters Parameters supplied to the operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SubscriptionDiagnosticSettingsResourceInner> createOrUpdateAsync(String name, SubscriptionDiagnosticSettingsResourceInner parameters, final ServiceCallback<SubscriptionDiagnosticSettingsResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(name, parameters), serviceCallback);
    }

    /**
     * Creates or updates subscription diagnostic settings for the specified resource.
     *
     * @param name The name of the diagnostic setting.
     * @param parameters Parameters supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SubscriptionDiagnosticSettingsResourceInner object
     */
    public Observable<SubscriptionDiagnosticSettingsResourceInner> createOrUpdateAsync(String name, SubscriptionDiagnosticSettingsResourceInner parameters) {
        return createOrUpdateWithServiceResponseAsync(name, parameters).map(new Func1<ServiceResponse<SubscriptionDiagnosticSettingsResourceInner>, SubscriptionDiagnosticSettingsResourceInner>() {
            @Override
            public SubscriptionDiagnosticSettingsResourceInner call(ServiceResponse<SubscriptionDiagnosticSettingsResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates subscription diagnostic settings for the specified resource.
     *
     * @param name The name of the diagnostic setting.
     * @param parameters Parameters supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SubscriptionDiagnosticSettingsResourceInner object
     */
    public Observable<ServiceResponse<SubscriptionDiagnosticSettingsResourceInner>> createOrUpdateWithServiceResponseAsync(String name, SubscriptionDiagnosticSettingsResourceInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2017-05-01-preview";
        return service.createOrUpdate(this.client.subscriptionId(), name, apiVersion, parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SubscriptionDiagnosticSettingsResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<SubscriptionDiagnosticSettingsResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SubscriptionDiagnosticSettingsResourceInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SubscriptionDiagnosticSettingsResourceInner> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SubscriptionDiagnosticSettingsResourceInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SubscriptionDiagnosticSettingsResourceInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes existing subscription diagnostic settings for the specified resource.
     *
     * @param name The name of the diagnostic setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String name) {
        deleteWithServiceResponseAsync(name).toBlocking().single().body();
    }

    /**
     * Deletes existing subscription diagnostic settings for the specified resource.
     *
     * @param name The name of the diagnostic setting.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String name, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(name), serviceCallback);
    }

    /**
     * Deletes existing subscription diagnostic settings for the specified resource.
     *
     * @param name The name of the diagnostic setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String name) {
        return deleteWithServiceResponseAsync(name).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes existing subscription diagnostic settings for the specified resource.
     *
     * @param name The name of the diagnostic setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        final String apiVersion = "2017-05-01-preview";
        return service.delete(this.client.subscriptionId(), name, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the active subscription diagnostic settings list for the specified subscriptionId.
     *
     * @return the PagedList<SubscriptionDiagnosticSettingsResourceInner> object if successful.
     */
    public PagedList<SubscriptionDiagnosticSettingsResourceInner> list() {
        PageImpl1<SubscriptionDiagnosticSettingsResourceInner> page = new PageImpl1<>();
        page.setItems(listWithServiceResponseAsync().toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<SubscriptionDiagnosticSettingsResourceInner>(page) {
            @Override
            public Page<SubscriptionDiagnosticSettingsResourceInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Gets the active subscription diagnostic settings list for the specified subscriptionId.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SubscriptionDiagnosticSettingsResourceInner>> listAsync(final ServiceCallback<List<SubscriptionDiagnosticSettingsResourceInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Gets the active subscription diagnostic settings list for the specified subscriptionId.
     *
     * @return the observable to the List&lt;SubscriptionDiagnosticSettingsResourceInner&gt; object
     */
    public Observable<Page<SubscriptionDiagnosticSettingsResourceInner>> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<List<SubscriptionDiagnosticSettingsResourceInner>>, Page<SubscriptionDiagnosticSettingsResourceInner>>() {
            @Override
            public Page<SubscriptionDiagnosticSettingsResourceInner> call(ServiceResponse<List<SubscriptionDiagnosticSettingsResourceInner>> response) {
                PageImpl1<SubscriptionDiagnosticSettingsResourceInner> page = new PageImpl1<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Gets the active subscription diagnostic settings list for the specified subscriptionId.
     *
     * @return the observable to the List&lt;SubscriptionDiagnosticSettingsResourceInner&gt; object
     */
    public Observable<ServiceResponse<List<SubscriptionDiagnosticSettingsResourceInner>>> listWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2017-05-01-preview";
        return service.list(this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<SubscriptionDiagnosticSettingsResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<SubscriptionDiagnosticSettingsResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<SubscriptionDiagnosticSettingsResourceInner>> result = listDelegate(response);
                        List<SubscriptionDiagnosticSettingsResourceInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<SubscriptionDiagnosticSettingsResourceInner>> clientResponse = new ServiceResponse<List<SubscriptionDiagnosticSettingsResourceInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<SubscriptionDiagnosticSettingsResourceInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<SubscriptionDiagnosticSettingsResourceInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<SubscriptionDiagnosticSettingsResourceInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
