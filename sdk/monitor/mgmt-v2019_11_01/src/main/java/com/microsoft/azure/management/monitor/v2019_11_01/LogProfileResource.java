/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.monitor.v2019_11_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.monitor.v2019_11_01.implementation.LogProfileResourceInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.monitor.v2019_11_01.implementation.MonitorManager;
import java.util.Map;
import java.util.List;

/**
 * Type representing LogProfileResource.
 */
public interface LogProfileResource extends HasInner<LogProfileResourceInner>, Indexable, Updatable<LogProfileResource.Update>, Refreshable<LogProfileResource>, HasManager<MonitorManager> {
    /**
     * @return the categories value.
     */
    List<String> categories();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the locations value.
     */
    List<String> locations();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the retentionPolicy value.
     */
    RetentionPolicy retentionPolicy();

    /**
     * @return the serviceBusRuleId value.
     */
    String serviceBusRuleId();

    /**
     * @return the storageAccountId value.
     */
    String storageAccountId();

    /**
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the LogProfileResource definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithCategories, DefinitionStages.WithLocation, DefinitionStages.WithLocations, DefinitionStages.WithRetentionPolicy, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of LogProfileResource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a LogProfileResource definition.
         */
        interface Blank extends WithCategories {
        }

        /**
         * The stage of the logprofileresource definition allowing to specify Categories.
         */
        interface WithCategories {
           /**
            * Specifies categories.
            * @param categories the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'
            * @return the next definition stage
            */
            WithLocation withCategories(List<String> categories);
        }

        /**
         * The stage of the logprofileresource definition allowing to specify Location.
         */
        interface WithLocation {
           /**
            * Specifies location.
            * @param location Resource location
            * @return the next definition stage
            */
            WithLocations withLocation(String location);
        }

        /**
         * The stage of the logprofileresource definition allowing to specify Locations.
         */
        interface WithLocations {
           /**
            * Specifies locations.
            * @param locations List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location
            * @return the next definition stage
            */
            WithRetentionPolicy withLocations(List<String> locations);
        }

        /**
         * The stage of the logprofileresource definition allowing to specify RetentionPolicy.
         */
        interface WithRetentionPolicy {
           /**
            * Specifies retentionPolicy.
            * @param retentionPolicy the retention policy for the events in the log
            * @return the next definition stage
            */
            WithCreate withRetentionPolicy(RetentionPolicy retentionPolicy);
        }

        /**
         * The stage of the logprofileresource definition allowing to specify ServiceBusRuleId.
         */
        interface WithServiceBusRuleId {
            /**
             * Specifies serviceBusRuleId.
             * @param serviceBusRuleId The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'
             * @return the next definition stage
             */
            WithCreate withServiceBusRuleId(String serviceBusRuleId);
        }

        /**
         * The stage of the logprofileresource definition allowing to specify StorageAccountId.
         */
        interface WithStorageAccountId {
            /**
             * Specifies storageAccountId.
             * @param storageAccountId the resource id of the storage account to which you would like to send the Activity Log
             * @return the next definition stage
             */
            WithCreate withStorageAccountId(String storageAccountId);
        }

        /**
         * The stage of the logprofileresource definition allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Resource tags
             * @return the next definition stage
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<LogProfileResource>, DefinitionStages.WithServiceBusRuleId, DefinitionStages.WithStorageAccountId, DefinitionStages.WithTags {
        }
    }
    /**
     * The template for a LogProfileResource update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<LogProfileResource>, UpdateStages.WithServiceBusRuleId, UpdateStages.WithStorageAccountId, UpdateStages.WithTags {
    }

    /**
     * Grouping of LogProfileResource update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the logprofileresource update allowing to specify ServiceBusRuleId.
         */
        interface WithServiceBusRuleId {
            /**
             * Specifies serviceBusRuleId.
             * @param serviceBusRuleId The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'
             * @return the next update stage
             */
            Update withServiceBusRuleId(String serviceBusRuleId);
        }

        /**
         * The stage of the logprofileresource update allowing to specify StorageAccountId.
         */
        interface WithStorageAccountId {
            /**
             * Specifies storageAccountId.
             * @param storageAccountId the resource id of the storage account to which you would like to send the Activity Log
             * @return the next update stage
             */
            Update withStorageAccountId(String storageAccountId);
        }

        /**
         * The stage of the logprofileresource update allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Resource tags
             * @return the next update stage
             */
            Update withTags(Map<String, String> tags);
        }

    }
}
