/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.monitor.v2019_11_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.monitor.v2019_11_01.MetricAlertsStatus;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.monitor.v2019_11_01.MetricAlertStatusCollection;

class MetricAlertsStatusImpl extends WrapperImpl<MetricAlertsStatusInner> implements MetricAlertsStatus {
    private final MonitorManager manager;

    MetricAlertsStatusImpl(MonitorManager manager) {
        super(manager.inner().metricAlertsStatus());
        this.manager = manager;
    }

    public MonitorManager manager() {
        return this.manager;
    }

    private MetricAlertStatusCollectionImpl wrapModel(MetricAlertStatusCollectionInner inner) {
        return  new MetricAlertStatusCollectionImpl(inner, manager());
    }

    @Override
    public Observable<MetricAlertStatusCollection> listAsync(String resourceGroupName, String ruleName) {
        MetricAlertsStatusInner client = this.inner();
        return client.listAsync(resourceGroupName, ruleName)
        .map(new Func1<MetricAlertStatusCollectionInner, MetricAlertStatusCollection>() {
            @Override
            public MetricAlertStatusCollection call(MetricAlertStatusCollectionInner inner) {
                return new MetricAlertStatusCollectionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<MetricAlertStatusCollection> listByNameAsync(String resourceGroupName, String ruleName, String statusName) {
        MetricAlertsStatusInner client = this.inner();
        return client.listByNameAsync(resourceGroupName, ruleName, statusName)
        .flatMap(new Func1<MetricAlertStatusCollectionInner, Observable<MetricAlertStatusCollection>>() {
            @Override
            public Observable<MetricAlertStatusCollection> call(MetricAlertStatusCollectionInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((MetricAlertStatusCollection)wrapModel(inner));
                }
            }
       });
    }

}
