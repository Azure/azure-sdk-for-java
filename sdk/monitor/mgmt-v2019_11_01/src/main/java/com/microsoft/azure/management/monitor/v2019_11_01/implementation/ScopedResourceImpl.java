/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.monitor.v2019_11_01.implementation;

import com.microsoft.azure.management.monitor.v2019_11_01.ScopedResource;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;

class ScopedResourceImpl extends CreatableUpdatableImpl<ScopedResource, ScopedResourceInner, ScopedResourceImpl> implements ScopedResource, ScopedResource.Definition, ScopedResource.Update {
    private final MonitorManager manager;
    private String resourceGroupName;
    private String scopeName;
    private String name;
    private String clinkedResourceId;
    private String ulinkedResourceId;

    ScopedResourceImpl(String name, MonitorManager manager) {
        super(name, new ScopedResourceInner());
        this.manager = manager;
        // Set resource name
        this.name = name;
        //
    }

    ScopedResourceImpl(ScopedResourceInner inner, MonitorManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.name = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.scopeName = IdParsingUtils.getValueFromIdByName(inner.id(), "privateLinkScopes");
        this.name = IdParsingUtils.getValueFromIdByName(inner.id(), "scopedResources");
        //
    }

    @Override
    public MonitorManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ScopedResource> createResourceAsync() {
        PrivateLinkScopedResourcesInner client = this.manager().inner().privateLinkScopedResources();
        return client.createOrUpdateAsync(this.resourceGroupName, this.scopeName, this.name, this.clinkedResourceId)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ScopedResource> updateResourceAsync() {
        PrivateLinkScopedResourcesInner client = this.manager().inner().privateLinkScopedResources();
        return client.createOrUpdateAsync(this.resourceGroupName, this.scopeName, this.name, this.ulinkedResourceId)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ScopedResourceInner> getInnerAsync() {
        PrivateLinkScopedResourcesInner client = this.manager().inner().privateLinkScopedResources();
        return client.getAsync(this.resourceGroupName, this.scopeName, this.name);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String linkedResourceId() {
        return this.inner().linkedResourceId();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ScopedResourceImpl withExistingPrivateLinkScope(String resourceGroupName, String scopeName) {
        this.resourceGroupName = resourceGroupName;
        this.scopeName = scopeName;
        return this;
    }

    @Override
    public ScopedResourceImpl withLinkedResourceId(String linkedResourceId) {
        if (isInCreateMode()) {
            this.clinkedResourceId = linkedResourceId;
        } else {
            this.ulinkedResourceId = linkedResourceId;
        }
        return this;
    }

}
