/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.monitor.v2019_11_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.monitor.v2019_11_01.AzureMonitorPrivateLinkScope;
import rx.Observable;
import java.util.List;
import java.util.ArrayList;
import com.microsoft.azure.management.monitor.v2019_11_01.PrivateEndpointConnection;

class AzureMonitorPrivateLinkScopeImpl extends GroupableResourceCoreImpl<AzureMonitorPrivateLinkScope, AzureMonitorPrivateLinkScopeInner, AzureMonitorPrivateLinkScopeImpl, MonitorManager> implements AzureMonitorPrivateLinkScope, AzureMonitorPrivateLinkScope.Definition, AzureMonitorPrivateLinkScope.Update {
    AzureMonitorPrivateLinkScopeImpl(String name, AzureMonitorPrivateLinkScopeInner inner, MonitorManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<AzureMonitorPrivateLinkScope> createResourceAsync() {
        PrivateLinkScopesInner client = this.manager().inner().privateLinkScopes();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<AzureMonitorPrivateLinkScope> updateResourceAsync() {
        PrivateLinkScopesInner client = this.manager().inner().privateLinkScopes();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<AzureMonitorPrivateLinkScopeInner> getInnerAsync() {
        PrivateLinkScopesInner client = this.manager().inner().privateLinkScopes();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public List<PrivateEndpointConnection> privateEndpointConnections() {
        List<PrivateEndpointConnection> lst = new ArrayList<PrivateEndpointConnection>();
        if (this.inner().privateEndpointConnections() != null) {
            for (PrivateEndpointConnectionInner inner : this.inner().privateEndpointConnections()) {
                lst.add( new PrivateEndpointConnectionImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

}
