/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.monitor.v2019_11_01.implementation;

import com.microsoft.azure.management.monitor.v2019_11_01.OperationStatus;
import com.microsoft.azure.arm.model.implementation.IndexableRefreshableWrapperImpl;
import rx.Observable;
import org.joda.time.DateTime;
import com.microsoft.azure.management.monitor.v2019_11_01.ErrorResponseCommon;

class OperationStatusImpl extends IndexableRefreshableWrapperImpl<OperationStatus, OperationStatusInner> implements OperationStatus {
    private String asyncOperationId;
    private String resourceGroupName;
    private final MonitorManager manager;

    OperationStatusImpl(OperationStatusInner inner,  MonitorManager manager) {
        super(null, inner);
        this.manager = manager;
        // set resource ancestor and positional variables
        this.asyncOperationId = IdParsingUtils.getValueFromIdByName(inner.id(), "privateLinkScopeOperationStatuses");
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
    }

    @Override
    public MonitorManager manager() {
        return this.manager;
    }

    @Override
    protected Observable<OperationStatusInner> getInnerAsync() {
        PrivateLinkScopeOperationStatusInner client = this.manager().inner().privateLinkScopeOperationStatus();
        return client.getByResourceGroupAsync(this.asyncOperationId, this.resourceGroupName);
    }



    @Override
    public DateTime endTime() {
        return this.inner().endTime();
    }

    @Override
    public ErrorResponseCommon error() {
        return this.inner().error();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public DateTime startTime() {
        return this.inner().startTime();
    }

    @Override
    public String status() {
        return this.inner().status();
    }

}
