/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.monitor.v2019_11_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.monitor.v2019_11_01.AlertRuleResource;
import rx.Observable;
import com.microsoft.azure.management.monitor.v2019_11_01.AlertRuleResourcePatch;
import java.util.List;
import org.joda.time.DateTime;
import com.microsoft.azure.management.monitor.v2019_11_01.RuleCondition;
import com.microsoft.azure.management.monitor.v2019_11_01.RuleAction;
import rx.functions.Func1;

class AlertRuleResourceImpl extends GroupableResourceCoreImpl<AlertRuleResource, AlertRuleResourceInner, AlertRuleResourceImpl, MonitorManager> implements AlertRuleResource, AlertRuleResource.Definition, AlertRuleResource.Update {
    private AlertRuleResourcePatch updateParameter;
    AlertRuleResourceImpl(String name, AlertRuleResourceInner inner, MonitorManager manager) {
        super(name, inner, manager);
        this.updateParameter = new AlertRuleResourcePatch();
    }

    @Override
    public Observable<AlertRuleResource> createResourceAsync() {
        AlertRulesInner client = this.manager().inner().alertRules();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(new Func1<AlertRuleResourceInner, AlertRuleResourceInner>() {
               @Override
               public AlertRuleResourceInner call(AlertRuleResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<AlertRuleResource> updateResourceAsync() {
        AlertRulesInner client = this.manager().inner().alertRules();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.updateParameter)
            .map(new Func1<AlertRuleResourceInner, AlertRuleResourceInner>() {
               @Override
               public AlertRuleResourceInner call(AlertRuleResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<AlertRuleResourceInner> getInnerAsync() {
        AlertRulesInner client = this.manager().inner().alertRules();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new AlertRuleResourcePatch();
    }

    @Override
    public List<RuleAction> actions() {
        return this.inner().actions();
    }

    @Override
    public String alertRuleResourceName() {
        return this.inner().alertRuleResourceName();
    }

    @Override
    public RuleCondition condition() {
        return this.inner().condition();
    }

    @Override
    public String description() {
        return this.inner().description();
    }

    @Override
    public boolean isEnabled() {
        return this.inner().isEnabled();
    }

    @Override
    public DateTime lastUpdatedTime() {
        return this.inner().lastUpdatedTime();
    }

    @Override
    public AlertRuleResourceImpl withAlertRuleResourceName(String alertRuleResourceName) {
        this.inner().withAlertRuleResourceName(alertRuleResourceName);
        return this;
    }

    @Override
    public AlertRuleResourceImpl withCondition(RuleCondition condition) {
        this.inner().withCondition(condition);
        return this;
    }

    @Override
    public AlertRuleResourceImpl withIsEnabled(boolean isEnabled) {
        this.inner().withIsEnabled(isEnabled);
        return this;
    }

    @Override
    public AlertRuleResourceImpl withActions(List<RuleAction> actions) {
        if (isInCreateMode()) {
            this.inner().withActions(actions);
        } else {
            this.updateParameter.withActions(actions);
        }
        return this;
    }

    @Override
    public AlertRuleResourceImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.inner().withDescription(description);
        } else {
            this.updateParameter.withDescription(description);
        }
        return this;
    }

}
