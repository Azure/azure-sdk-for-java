/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.monitor.v2019_11_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.monitor.v2019_11_01.DiagnosticSettings;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.management.monitor.v2019_11_01.DiagnosticSettingsResource;
import com.microsoft.azure.management.monitor.v2019_11_01.DiagnosticSettingsResourceCollection;

class DiagnosticSettingsImpl extends WrapperImpl<DiagnosticSettingsInner> implements DiagnosticSettings {
    private final MonitorManager manager;

    DiagnosticSettingsImpl(MonitorManager manager) {
        super(manager.inner().diagnosticSettings());
        this.manager = manager;
    }

    public MonitorManager manager() {
        return this.manager;
    }

    @Override
    public DiagnosticSettingsResourceImpl define(String name) {
        return wrapModel(name);
    }

    private DiagnosticSettingsResourceImpl wrapModel(DiagnosticSettingsResourceInner inner) {
        return  new DiagnosticSettingsResourceImpl(inner, manager());
    }

    private DiagnosticSettingsResourceImpl wrapModel(String name) {
        return new DiagnosticSettingsResourceImpl(name, this.manager());
    }

    @Override
    public Observable<DiagnosticSettingsResource> getAsync(String resourceUri, String name) {
        DiagnosticSettingsInner client = this.inner();
        return client.getAsync(resourceUri, name)
        .map(new Func1<DiagnosticSettingsResourceInner, DiagnosticSettingsResource>() {
            @Override
            public DiagnosticSettingsResource call(DiagnosticSettingsResourceInner inner) {
                return new DiagnosticSettingsResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String resourceUri, String name) {
        DiagnosticSettingsInner client = this.inner();
        return client.deleteAsync(resourceUri, name).toCompletable();
    }

    @Override
    public Observable<DiagnosticSettingsResourceCollection> listAsync(String resourceUri) {
        DiagnosticSettingsInner client = this.inner();
        return client.listAsync(resourceUri)
        .map(new Func1<DiagnosticSettingsResourceCollectionInner, DiagnosticSettingsResourceCollection>() {
            @Override
            public DiagnosticSettingsResourceCollection call(DiagnosticSettingsResourceCollectionInner inner) {
                return new DiagnosticSettingsResourceCollectionImpl(inner, manager());
            }
        });
    }

}
