/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.monitor.v2019_11_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.monitor.v2019_11_01.implementation.MonitorManager;
import java.util.List;
import com.microsoft.azure.management.monitor.v2019_11_01.implementation.ActivityLogAlertResourceInner;

/**
 * Type representing ActivityLogAlertResource.
 */
public interface ActivityLogAlertResource extends HasInner<ActivityLogAlertResourceInner>, Resource, GroupableResourceCore<MonitorManager, ActivityLogAlertResourceInner>, HasResourceGroup, Refreshable<ActivityLogAlertResource>, Updatable<ActivityLogAlertResource.Update>, HasManager<MonitorManager> {
    /**
     * @return the actions value.
     */
    ActivityLogAlertActionList actions();

    /**
     * @return the condition value.
     */
    ActivityLogAlertAllOfCondition condition();

    /**
     * @return the description value.
     */
    String description();

    /**
     * @return the enabled value.
     */
    Boolean enabled();

    /**
     * @return the scopes value.
     */
    List<String> scopes();

    /**
     * The entirety of the ActivityLogAlertResource definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithActions, DefinitionStages.WithCondition, DefinitionStages.WithScopes, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of ActivityLogAlertResource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a ActivityLogAlertResource definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the ActivityLogAlertResource definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithActions> {
        }

        /**
         * The stage of the activitylogalertresource definition allowing to specify Actions.
         */
        interface WithActions {
           /**
            * Specifies actions.
            * @param actions The actions that will activate when the condition is met
            * @return the next definition stage
*/
            WithCondition withActions(ActivityLogAlertActionList actions);
        }

        /**
         * The stage of the activitylogalertresource definition allowing to specify Condition.
         */
        interface WithCondition {
           /**
            * Specifies condition.
            * @param condition The condition that will cause this alert to activate
            * @return the next definition stage
*/
            WithScopes withCondition(ActivityLogAlertAllOfCondition condition);
        }

        /**
         * The stage of the activitylogalertresource definition allowing to specify Scopes.
         */
        interface WithScopes {
           /**
            * Specifies scopes.
            * @param scopes A list of resourceIds that will be used as prefixes. The alert will only apply to activityLogs with resourceIds that fall under one of these prefixes. This list must include at least one item
            * @return the next definition stage
*/
            WithCreate withScopes(List<String> scopes);
        }

        /**
         * The stage of the activitylogalertresource definition allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             * @param description A description of this activity log alert
             * @return the next definition stage
             */
            WithCreate withDescription(String description);
        }

        /**
         * The stage of the activitylogalertresource definition allowing to specify Enabled.
         */
        interface WithEnabled {
            /**
             * Specifies enabled.
             * @param enabled Indicates whether this activity log alert is enabled. If an activity log alert is not enabled, then none of its actions will be activated
             * @return the next definition stage
             */
            WithCreate withEnabled(Boolean enabled);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<ActivityLogAlertResource>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithDescription, DefinitionStages.WithEnabled {
        }
    }
    /**
     * The template for a ActivityLogAlertResource update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<ActivityLogAlertResource>, Resource.UpdateWithTags<Update>, UpdateStages.WithEnabled {
    }

    /**
     * Grouping of ActivityLogAlertResource update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the activitylogalertresource update allowing to specify Enabled.
         */
        interface WithEnabled {
            /**
             * Specifies enabled.
             * @param enabled Indicates whether this activity log alert is enabled. If an activity log alert is not enabled, then none of its actions will be activated
             * @return the next update stage
             */
            Update withEnabled(Boolean enabled);
        }

    }
}
