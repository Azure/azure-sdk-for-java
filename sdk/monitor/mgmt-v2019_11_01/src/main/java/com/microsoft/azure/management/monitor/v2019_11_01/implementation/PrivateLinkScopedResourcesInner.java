/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.monitor.v2019_11_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PrivateLinkScopedResources.
 */
public class PrivateLinkScopedResourcesInner {
    /** The Retrofit service to perform REST calls. */
    private PrivateLinkScopedResourcesService service;
    /** The service client containing this operation class. */
    private MonitorManagementClientImpl client;

    /**
     * Initializes an instance of PrivateLinkScopedResourcesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PrivateLinkScopedResourcesInner(Retrofit retrofit, MonitorManagementClientImpl client) {
        this.service = retrofit.create(PrivateLinkScopedResourcesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for PrivateLinkScopedResources to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PrivateLinkScopedResourcesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.monitor.v2019_11_01.PrivateLinkScopedResources get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/scopedResources/{name}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("scopeName") String scopeName, @Path("name") String name, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.monitor.v2019_11_01.PrivateLinkScopedResources createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/scopedResources/{name}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("scopeName") String scopeName, @Path("name") String name, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ScopedResourceInner parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.monitor.v2019_11_01.PrivateLinkScopedResources beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/scopedResources/{name}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("scopeName") String scopeName, @Path("name") String name, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ScopedResourceInner parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.monitor.v2019_11_01.PrivateLinkScopedResources delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/scopedResources/{name}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("scopeName") String scopeName, @Path("name") String name, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.monitor.v2019_11_01.PrivateLinkScopedResources beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/scopedResources/{name}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("scopeName") String scopeName, @Path("name") String name, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.monitor.v2019_11_01.PrivateLinkScopedResources listByPrivateLinkScope" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/scopedResources")
        Observable<Response<ResponseBody>> listByPrivateLinkScope(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("scopeName") String scopeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.monitor.v2019_11_01.PrivateLinkScopedResources listByPrivateLinkScopeNext" })
        @GET
        Observable<Response<ResponseBody>> listByPrivateLinkScopeNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets a scoped resource in a private link scope.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ScopedResourceInner object if successful.
     */
    public ScopedResourceInner get(String resourceGroupName, String scopeName, String name) {
        return getWithServiceResponseAsync(resourceGroupName, scopeName, name).toBlocking().single().body();
    }

    /**
     * Gets a scoped resource in a private link scope.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ScopedResourceInner> getAsync(String resourceGroupName, String scopeName, String name, final ServiceCallback<ScopedResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, scopeName, name), serviceCallback);
    }

    /**
     * Gets a scoped resource in a private link scope.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScopedResourceInner object
     */
    public Observable<ScopedResourceInner> getAsync(String resourceGroupName, String scopeName, String name) {
        return getWithServiceResponseAsync(resourceGroupName, scopeName, name).map(new Func1<ServiceResponse<ScopedResourceInner>, ScopedResourceInner>() {
            @Override
            public ScopedResourceInner call(ServiceResponse<ScopedResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a scoped resource in a private link scope.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScopedResourceInner object
     */
    public Observable<ServiceResponse<ScopedResourceInner>> getWithServiceResponseAsync(String resourceGroupName, String scopeName, String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (scopeName == null) {
            throw new IllegalArgumentException("Parameter scopeName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        final String apiVersion = "2019-10-17-preview";
        return service.get(this.client.subscriptionId(), resourceGroupName, scopeName, name, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ScopedResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ScopedResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ScopedResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ScopedResourceInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ScopedResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ScopedResourceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Approve or reject a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ScopedResourceInner object if successful.
     */
    public ScopedResourceInner createOrUpdate(String resourceGroupName, String scopeName, String name) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, scopeName, name).toBlocking().last().body();
    }

    /**
     * Approve or reject a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ScopedResourceInner> createOrUpdateAsync(String resourceGroupName, String scopeName, String name, final ServiceCallback<ScopedResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, scopeName, name), serviceCallback);
    }

    /**
     * Approve or reject a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ScopedResourceInner> createOrUpdateAsync(String resourceGroupName, String scopeName, String name) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, scopeName, name).map(new Func1<ServiceResponse<ScopedResourceInner>, ScopedResourceInner>() {
            @Override
            public ScopedResourceInner call(ServiceResponse<ScopedResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Approve or reject a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ScopedResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String scopeName, String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (scopeName == null) {
            throw new IllegalArgumentException("Parameter scopeName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        final String apiVersion = "2019-10-17-preview";
        final String linkedResourceId = null;
        ScopedResourceInner parameters = new ScopedResourceInner();
        parameters.withLinkedResourceId(null);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, scopeName, name, apiVersion, this.client.acceptLanguage(), parameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ScopedResourceInner>() { }.getType());
    }
    /**
     * Approve or reject a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @param linkedResourceId The resource id of the scoped Azure monitor resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ScopedResourceInner object if successful.
     */
    public ScopedResourceInner createOrUpdate(String resourceGroupName, String scopeName, String name, String linkedResourceId) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, scopeName, name, linkedResourceId).toBlocking().last().body();
    }

    /**
     * Approve or reject a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @param linkedResourceId The resource id of the scoped Azure monitor resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ScopedResourceInner> createOrUpdateAsync(String resourceGroupName, String scopeName, String name, String linkedResourceId, final ServiceCallback<ScopedResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, scopeName, name, linkedResourceId), serviceCallback);
    }

    /**
     * Approve or reject a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @param linkedResourceId The resource id of the scoped Azure monitor resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ScopedResourceInner> createOrUpdateAsync(String resourceGroupName, String scopeName, String name, String linkedResourceId) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, scopeName, name, linkedResourceId).map(new Func1<ServiceResponse<ScopedResourceInner>, ScopedResourceInner>() {
            @Override
            public ScopedResourceInner call(ServiceResponse<ScopedResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Approve or reject a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @param linkedResourceId The resource id of the scoped Azure monitor resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ScopedResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String scopeName, String name, String linkedResourceId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (scopeName == null) {
            throw new IllegalArgumentException("Parameter scopeName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        final String apiVersion = "2019-10-17-preview";
        ScopedResourceInner parameters = new ScopedResourceInner();
        parameters.withLinkedResourceId(linkedResourceId);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, scopeName, name, apiVersion, this.client.acceptLanguage(), parameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ScopedResourceInner>() { }.getType());
    }

    /**
     * Approve or reject a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ScopedResourceInner object if successful.
     */
    public ScopedResourceInner beginCreateOrUpdate(String resourceGroupName, String scopeName, String name) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, scopeName, name).toBlocking().single().body();
    }

    /**
     * Approve or reject a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ScopedResourceInner> beginCreateOrUpdateAsync(String resourceGroupName, String scopeName, String name, final ServiceCallback<ScopedResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, scopeName, name), serviceCallback);
    }

    /**
     * Approve or reject a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScopedResourceInner object
     */
    public Observable<ScopedResourceInner> beginCreateOrUpdateAsync(String resourceGroupName, String scopeName, String name) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, scopeName, name).map(new Func1<ServiceResponse<ScopedResourceInner>, ScopedResourceInner>() {
            @Override
            public ScopedResourceInner call(ServiceResponse<ScopedResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Approve or reject a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScopedResourceInner object
     */
    public Observable<ServiceResponse<ScopedResourceInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String scopeName, String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (scopeName == null) {
            throw new IllegalArgumentException("Parameter scopeName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        final String apiVersion = "2019-10-17-preview";
        final String linkedResourceId = null;
        ScopedResourceInner parameters = new ScopedResourceInner();
        parameters.withLinkedResourceId(null);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, scopeName, name, apiVersion, this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ScopedResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ScopedResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ScopedResourceInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Approve or reject a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @param linkedResourceId The resource id of the scoped Azure monitor resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ScopedResourceInner object if successful.
     */
    public ScopedResourceInner beginCreateOrUpdate(String resourceGroupName, String scopeName, String name, String linkedResourceId) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, scopeName, name, linkedResourceId).toBlocking().single().body();
    }

    /**
     * Approve or reject a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @param linkedResourceId The resource id of the scoped Azure monitor resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ScopedResourceInner> beginCreateOrUpdateAsync(String resourceGroupName, String scopeName, String name, String linkedResourceId, final ServiceCallback<ScopedResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, scopeName, name, linkedResourceId), serviceCallback);
    }

    /**
     * Approve or reject a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @param linkedResourceId The resource id of the scoped Azure monitor resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScopedResourceInner object
     */
    public Observable<ScopedResourceInner> beginCreateOrUpdateAsync(String resourceGroupName, String scopeName, String name, String linkedResourceId) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, scopeName, name, linkedResourceId).map(new Func1<ServiceResponse<ScopedResourceInner>, ScopedResourceInner>() {
            @Override
            public ScopedResourceInner call(ServiceResponse<ScopedResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Approve or reject a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @param linkedResourceId The resource id of the scoped Azure monitor resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ScopedResourceInner object
     */
    public Observable<ServiceResponse<ScopedResourceInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String scopeName, String name, String linkedResourceId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (scopeName == null) {
            throw new IllegalArgumentException("Parameter scopeName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        final String apiVersion = "2019-10-17-preview";
        ScopedResourceInner parameters = new ScopedResourceInner();
        parameters.withLinkedResourceId(linkedResourceId);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, scopeName, name, apiVersion, this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ScopedResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<ScopedResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ScopedResourceInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ScopedResourceInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ScopedResourceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ScopedResourceInner>() { }.getType())
                .register(201, new TypeToken<ScopedResourceInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String scopeName, String name) {
        deleteWithServiceResponseAsync(resourceGroupName, scopeName, name).toBlocking().last().body();
    }

    /**
     * Deletes a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String scopeName, String name, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, scopeName, name), serviceCallback);
    }

    /**
     * Deletes a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String scopeName, String name) {
        return deleteWithServiceResponseAsync(resourceGroupName, scopeName, name).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String scopeName, String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (scopeName == null) {
            throw new IllegalArgumentException("Parameter scopeName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        final String apiVersion = "2019-10-17-preview";
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, scopeName, name, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String scopeName, String name) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, scopeName, name).toBlocking().single().body();
    }

    /**
     * Deletes a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String scopeName, String name, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, scopeName, name), serviceCallback);
    }

    /**
     * Deletes a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String scopeName, String name) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, scopeName, name).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a private endpoint connection with a given name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param name The name of the scoped resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String scopeName, String name) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (scopeName == null) {
            throw new IllegalArgumentException("Parameter scopeName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        final String apiVersion = "2019-10-17-preview";
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, scopeName, name, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all private endpoint connections on a private link scope.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ScopedResourceInner&gt; object if successful.
     */
    public PagedList<ScopedResourceInner> listByPrivateLinkScope(final String resourceGroupName, final String scopeName) {
        ServiceResponse<Page<ScopedResourceInner>> response = listByPrivateLinkScopeSinglePageAsync(resourceGroupName, scopeName).toBlocking().single();
        return new PagedList<ScopedResourceInner>(response.body()) {
            @Override
            public Page<ScopedResourceInner> nextPage(String nextPageLink) {
                return listByPrivateLinkScopeNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all private endpoint connections on a private link scope.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ScopedResourceInner>> listByPrivateLinkScopeAsync(final String resourceGroupName, final String scopeName, final ListOperationCallback<ScopedResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByPrivateLinkScopeSinglePageAsync(resourceGroupName, scopeName),
            new Func1<String, Observable<ServiceResponse<Page<ScopedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ScopedResourceInner>>> call(String nextPageLink) {
                    return listByPrivateLinkScopeNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all private endpoint connections on a private link scope.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ScopedResourceInner&gt; object
     */
    public Observable<Page<ScopedResourceInner>> listByPrivateLinkScopeAsync(final String resourceGroupName, final String scopeName) {
        return listByPrivateLinkScopeWithServiceResponseAsync(resourceGroupName, scopeName)
            .map(new Func1<ServiceResponse<Page<ScopedResourceInner>>, Page<ScopedResourceInner>>() {
                @Override
                public Page<ScopedResourceInner> call(ServiceResponse<Page<ScopedResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all private endpoint connections on a private link scope.
     *
     * @param resourceGroupName The name of the resource group.
     * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ScopedResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<ScopedResourceInner>>> listByPrivateLinkScopeWithServiceResponseAsync(final String resourceGroupName, final String scopeName) {
        return listByPrivateLinkScopeSinglePageAsync(resourceGroupName, scopeName)
            .concatMap(new Func1<ServiceResponse<Page<ScopedResourceInner>>, Observable<ServiceResponse<Page<ScopedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ScopedResourceInner>>> call(ServiceResponse<Page<ScopedResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByPrivateLinkScopeNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all private endpoint connections on a private link scope.
     *
    ServiceResponse<PageImpl<ScopedResourceInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<ScopedResourceInner>> * @param scopeName The name of the Azure Monitor PrivateLinkScope resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ScopedResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ScopedResourceInner>>> listByPrivateLinkScopeSinglePageAsync(final String resourceGroupName, final String scopeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (scopeName == null) {
            throw new IllegalArgumentException("Parameter scopeName is required and cannot be null.");
        }
        final String apiVersion = "2019-10-17-preview";
        return service.listByPrivateLinkScope(this.client.subscriptionId(), resourceGroupName, scopeName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ScopedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ScopedResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ScopedResourceInner>> result = listByPrivateLinkScopeDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ScopedResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ScopedResourceInner>> listByPrivateLinkScopeDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ScopedResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ScopedResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all private endpoint connections on a private link scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ScopedResourceInner&gt; object if successful.
     */
    public PagedList<ScopedResourceInner> listByPrivateLinkScopeNext(final String nextPageLink) {
        ServiceResponse<Page<ScopedResourceInner>> response = listByPrivateLinkScopeNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ScopedResourceInner>(response.body()) {
            @Override
            public Page<ScopedResourceInner> nextPage(String nextPageLink) {
                return listByPrivateLinkScopeNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all private endpoint connections on a private link scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ScopedResourceInner>> listByPrivateLinkScopeNextAsync(final String nextPageLink, final ServiceFuture<List<ScopedResourceInner>> serviceFuture, final ListOperationCallback<ScopedResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByPrivateLinkScopeNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ScopedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ScopedResourceInner>>> call(String nextPageLink) {
                    return listByPrivateLinkScopeNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all private endpoint connections on a private link scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ScopedResourceInner&gt; object
     */
    public Observable<Page<ScopedResourceInner>> listByPrivateLinkScopeNextAsync(final String nextPageLink) {
        return listByPrivateLinkScopeNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ScopedResourceInner>>, Page<ScopedResourceInner>>() {
                @Override
                public Page<ScopedResourceInner> call(ServiceResponse<Page<ScopedResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all private endpoint connections on a private link scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ScopedResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<ScopedResourceInner>>> listByPrivateLinkScopeNextWithServiceResponseAsync(final String nextPageLink) {
        return listByPrivateLinkScopeNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ScopedResourceInner>>, Observable<ServiceResponse<Page<ScopedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ScopedResourceInner>>> call(ServiceResponse<Page<ScopedResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByPrivateLinkScopeNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all private endpoint connections on a private link scope.
     *
    ServiceResponse<PageImpl<ScopedResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ScopedResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ScopedResourceInner>>> listByPrivateLinkScopeNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByPrivateLinkScopeNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ScopedResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ScopedResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ScopedResourceInner>> result = listByPrivateLinkScopeNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ScopedResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ScopedResourceInner>> listByPrivateLinkScopeNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<ScopedResourceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<ScopedResourceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
