// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.query.implementation.logs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Contains the batch query response and the headers, id, and status of the request.
 */
@Fluent
public final class BatchQueryResponse implements JsonSerializable<BatchQueryResponse> {
    /*
     * The id property.
     */
    private String id;

    /*
     * The status property.
     */
    private Integer status;

    /*
     * A query response for a single query in a batch.
     * 
     * Contains the tables, columns & rows resulting from a query.
     */
    private BatchQueryResults body;

    /*
     * Dictionary of <string>
     */
    private Map<String, String> headers;

    /**
     * Creates an instance of BatchQueryResponse class.
     */
    public BatchQueryResponse() {
    }

    /**
     * Get the id property: The id property.
     * 
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: The id property.
     * 
     * @param id the id value to set.
     * @return the BatchQueryResponse object itself.
     */
    public BatchQueryResponse setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the status property: The status property.
     * 
     * @return the status value.
     */
    public Integer getStatus() {
        return this.status;
    }

    /**
     * Set the status property: The status property.
     * 
     * @param status the status value to set.
     * @return the BatchQueryResponse object itself.
     */
    public BatchQueryResponse setStatus(Integer status) {
        this.status = status;
        return this;
    }

    /**
     * Get the body property: A query response for a single query in a batch.
     * 
     * Contains the tables, columns &amp; rows resulting from a query.
     * 
     * @return the body value.
     */
    public BatchQueryResults getBody() {
        return this.body;
    }

    /**
     * Set the body property: A query response for a single query in a batch.
     * 
     * Contains the tables, columns &amp; rows resulting from a query.
     * 
     * @param body the body value to set.
     * @return the BatchQueryResponse object itself.
     */
    public BatchQueryResponse setBody(BatchQueryResults body) {
        this.body = body;
        return this;
    }

    /**
     * Get the headers property: Dictionary of &lt;string&gt;.
     * 
     * @return the headers value.
     */
    public Map<String, String> getHeaders() {
        return this.headers;
    }

    /**
     * Set the headers property: Dictionary of &lt;string&gt;.
     * 
     * @param headers the headers value to set.
     * @return the BatchQueryResponse object itself.
     */
    public BatchQueryResponse setHeaders(Map<String, String> headers) {
        this.headers = headers;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeNumberField("status", this.status);
        jsonWriter.writeJsonField("body", this.body);
        jsonWriter.writeMapField("headers", this.headers, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchQueryResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchQueryResponse if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchQueryResponse.
     */
    public static BatchQueryResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchQueryResponse deserializedBatchQueryResponse = new BatchQueryResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedBatchQueryResponse.id = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedBatchQueryResponse.status = reader.getNullable(JsonReader::getInt);
                } else if ("body".equals(fieldName)) {
                    deserializedBatchQueryResponse.body = BatchQueryResults.fromJson(reader);
                } else if ("headers".equals(fieldName)) {
                    Map<String, String> headers = reader.readMap(reader1 -> reader1.getString());
                    deserializedBatchQueryResponse.headers = headers;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBatchQueryResponse;
        });
    }
}
