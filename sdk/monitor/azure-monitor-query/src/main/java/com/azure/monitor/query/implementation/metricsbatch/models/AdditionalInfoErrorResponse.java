// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.query.implementation.metricsbatch.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The response to a metrics query that results in a bad request, with optional additional information.
 */
@Immutable
public final class AdditionalInfoErrorResponse implements JsonSerializable<AdditionalInfoErrorResponse> {
    /*
     * Top level error object that contains all relevant information.
     */
    private final AdditionalInfoErrorResponseError error;

    /**
     * Creates an instance of AdditionalInfoErrorResponse class.
     * 
     * @param error the error value to set.
     */
    public AdditionalInfoErrorResponse(AdditionalInfoErrorResponseError error) {
        this.error = error;
    }

    /**
     * Get the error property: Top level error object that contains all relevant information.
     * 
     * @return the error value.
     */
    public AdditionalInfoErrorResponseError getError() {
        return this.error;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdditionalInfoErrorResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdditionalInfoErrorResponse if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AdditionalInfoErrorResponse.
     */
    public static AdditionalInfoErrorResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean errorFound = false;
            AdditionalInfoErrorResponseError error = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("error".equals(fieldName)) {
                    error = AdditionalInfoErrorResponseError.fromJson(reader);
                    errorFound = true;
                } else {
                    reader.skipChildren();
                }
            }
            if (errorFound) {
                return new AdditionalInfoErrorResponse(error);
            }
            throw new IllegalStateException("Missing required property: error");
        });
    }
}
