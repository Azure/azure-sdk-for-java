// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.query.implementation.logs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The code and message for an error.
 */
@Fluent
public final class ErrorInfo implements JsonSerializable<ErrorInfo> {
    /*
     * A machine readable error code.
     */
    private final String code;

    /*
     * A human readable error message.
     */
    private final String message;

    /*
     * error details.
     */
    private List<ErrorDetail> details;

    /*
     * The code and message for an error.
     * 
     * Inner error details if they exist.
     */
    private ErrorInfo innererror;

    /*
     * Additional properties that can be provided on the error info object
     */
    private Object additionalProperties;

    /**
     * Creates an instance of ErrorInfo class.
     * 
     * @param code the code value to set.
     * @param message the message value to set.
     */
    public ErrorInfo(String code, String message) {
        this.code = code;
        this.message = message;
    }

    /**
     * Get the code property: A machine readable error code.
     * 
     * @return the code value.
     */
    public String getCode() {
        return this.code;
    }

    /**
     * Get the message property: A human readable error message.
     * 
     * @return the message value.
     */
    public String getMessage() {
        return this.message;
    }

    /**
     * Get the details property: error details.
     * 
     * @return the details value.
     */
    public List<ErrorDetail> getDetails() {
        return this.details;
    }

    /**
     * Set the details property: error details.
     * 
     * @param details the details value to set.
     * @return the ErrorInfo object itself.
     */
    public ErrorInfo setDetails(List<ErrorDetail> details) {
        this.details = details;
        return this;
    }

    /**
     * Get the innererror property: The code and message for an error.
     * 
     * Inner error details if they exist.
     * 
     * @return the innererror value.
     */
    public ErrorInfo getInnererror() {
        return this.innererror;
    }

    /**
     * Set the innererror property: The code and message for an error.
     * 
     * Inner error details if they exist.
     * 
     * @param innererror the innererror value to set.
     * @return the ErrorInfo object itself.
     */
    public ErrorInfo setInnererror(ErrorInfo innererror) {
        this.innererror = innererror;
        return this;
    }

    /**
     * Get the additionalProperties property: Additional properties that can be provided on the error info object.
     * 
     * @return the additionalProperties value.
     */
    public Object getAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Additional properties that can be provided on the error info object.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the ErrorInfo object itself.
     */
    public ErrorInfo setAdditionalProperties(Object additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("code", this.code);
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeArrayField("details", this.details, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("innererror", this.innererror);
        jsonWriter.writeUntypedField("additionalProperties", this.additionalProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ErrorInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ErrorInfo if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ErrorInfo.
     */
    public static ErrorInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean codeFound = false;
            String code = null;
            boolean messageFound = false;
            String message = null;
            List<ErrorDetail> details = null;
            ErrorInfo innererror = null;
            Object additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("code".equals(fieldName)) {
                    code = reader.getString();
                    codeFound = true;
                } else if ("message".equals(fieldName)) {
                    message = reader.getString();
                    messageFound = true;
                } else if ("details".equals(fieldName)) {
                    details = reader.readArray(reader1 -> ErrorDetail.fromJson(reader1));
                } else if ("innererror".equals(fieldName)) {
                    innererror = ErrorInfo.fromJson(reader);
                } else if ("additionalProperties".equals(fieldName)) {
                    additionalProperties = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }
            if (codeFound && messageFound) {
                ErrorInfo deserializedErrorInfo = new ErrorInfo(code, message);
                deserializedErrorInfo.details = details;
                deserializedErrorInfo.innererror = innererror;
                deserializedErrorInfo.additionalProperties = additionalProperties;

                return deserializedErrorInfo;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!codeFound) {
                missingProperties.add("code");
            }
            if (!messageFound) {
                missingProperties.add("message");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
