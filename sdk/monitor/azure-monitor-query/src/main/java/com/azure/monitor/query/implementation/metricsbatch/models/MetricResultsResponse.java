// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.query.implementation.metricsbatch.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The metrics result for a resource.
 */
@Fluent
public final class MetricResultsResponse implements JsonSerializable<MetricResultsResponse> {
    /*
     * The collection of metric data responses per resource, per metric.
     */
    private List<MetricResultsResponseValuesItem> values;

    /**
     * Creates an instance of MetricResultsResponse class.
     */
    public MetricResultsResponse() {
    }

    /**
     * Get the values property: The collection of metric data responses per resource, per metric.
     * 
     * @return the values value.
     */
    public List<MetricResultsResponseValuesItem> getValues() {
        return this.values;
    }

    /**
     * Set the values property: The collection of metric data responses per resource, per metric.
     * 
     * @param values the values value to set.
     * @return the MetricResultsResponse object itself.
     */
    public MetricResultsResponse setValues(List<MetricResultsResponseValuesItem> values) {
        this.values = values;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("values", this.values, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricResultsResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricResultsResponse if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MetricResultsResponse.
     */
    public static MetricResultsResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetricResultsResponse deserializedMetricResultsResponse = new MetricResultsResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("values".equals(fieldName)) {
                    List<MetricResultsResponseValuesItem> values
                        = reader.readArray(reader1 -> MetricResultsResponseValuesItem.fromJson(reader1));
                    deserializedMetricResultsResponse.values = values;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetricResultsResponse;
        });
    }
}
