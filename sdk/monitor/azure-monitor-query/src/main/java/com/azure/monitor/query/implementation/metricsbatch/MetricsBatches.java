// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.query.implementation.metricsbatch;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.monitor.query.implementation.metricsbatch.models.ErrorResponseException;
import com.azure.monitor.query.implementation.metricsbatch.models.MetricResultsResponse;
import com.azure.monitor.query.implementation.metricsbatch.models.ResourceIdList;
import java.time.Duration;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in MetricsBatches.
 */
public final class MetricsBatches {
    /**
     * The proxy service used to perform REST calls.
     */
    private final MetricsBatchesService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureMonitorMetricBatch client;

    /**
     * Initializes an instance of MetricsBatches.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    MetricsBatches(AzureMonitorMetricBatch client) {
        this.service
            = RestProxy.create(MetricsBatchesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureMonitorMetricBatchMetricsBatches to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AzureMonitorMetricBa")
    public interface MetricsBatchesService {
        @Post("/subscriptions/{subscriptionId}/metrics:getBatch")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<MetricResultsResponse>> batch(@HostParam("endpoint") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @QueryParam("starttime") String starttime,
            @QueryParam("endtime") String endtime, @QueryParam("interval") Duration interval,
            @QueryParam("metricnamespace") String metricnamespace, @QueryParam("metricnames") String metricnames,
            @QueryParam("aggregation") String aggregation, @QueryParam("top") Integer top,
            @QueryParam("orderby") String orderBy, @QueryParam("filter") String filter,
            @QueryParam("rollupby") String rollupby, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ResourceIdList batchRequest, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/subscriptions/{subscriptionId}/metrics:getBatch")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Response<MetricResultsResponse> batchSync(@HostParam("endpoint") String endpoint,
            @PathParam("subscriptionId") String subscriptionId, @QueryParam("starttime") String starttime,
            @QueryParam("endtime") String endtime, @QueryParam("interval") Duration interval,
            @QueryParam("metricnamespace") String metricnamespace, @QueryParam("metricnames") String metricnames,
            @QueryParam("aggregation") String aggregation, @QueryParam("top") Integer top,
            @QueryParam("orderby") String orderBy, @QueryParam("filter") String filter,
            @QueryParam("rollupby") String rollupby, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ResourceIdList batchRequest, @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Lists the metric values for multiple resources.
     * 
     * @param subscriptionId The subscription identifier for the resources in this batch.
     * @param metricnamespace Metric namespace that contains the requested metric names.
     * @param metricnames The names of the metrics (comma separated) to retrieve.
     * @param batchRequest Metrics batch body including the list of resource ids.
     * @param starttime The start time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you
     * have specified the endtime parameter, then this parameter is required.
     * If only starttime is specified, then endtime defaults to the current time.
     * If no time interval is specified, the default is 1 hour.
     * @param endtime The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'.
     * @param interval The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special
     * case for 'FULL' value that returns single datapoint for entire time span requested.
     * *Examples: PT15M, PT1H, P1D, FULL*.
     * @param aggregation The list of aggregation types (comma separated) to retrieve.
     * *Examples: average, minimum, maximum*.
     * @param top The maximum number of records to retrieve per resource ID in the request.
     * Valid only if filter is specified.
     * Defaults to 10.
     * @param orderBy The aggregation to use for sorting results and the direction of the sort.
     * Only one order can be specified.
     * *Examples: sum asc*.
     * @param filter The filter is used to reduce the set of metric data returned.&lt;br&gt;Example:&lt;br&gt;Metric
     * contains metadata A, B and C.&lt;br&gt;- Return all time series of C where A = a1 and B = b1 or
     * b2&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**&lt;br&gt;- Invalid
     * variant:&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**&lt;br&gt;This is invalid because
     * the logical or operator cannot separate two different metadata names.&lt;br&gt;- Return all time series where A =
     * a1, B = b1 and C = c1:&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**&lt;br&gt;- Return all time
     * series where A = a1&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.
     * @param rollupby Dimension name(s) to rollup results by. For example if you only want to see metric values with a
     * filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can
     * specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the metrics result for a resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MetricResultsResponse>> batchWithResponseAsync(String subscriptionId, String metricnamespace,
        List<String> metricnames, ResourceIdList batchRequest, String starttime, String endtime, Duration interval,
        String aggregation, Integer top, String orderBy, String filter, String rollupby) {
        final String accept = "application/json";
        String metricnamesConverted = metricnames.stream()
            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
            .collect(Collectors.joining(","));
        return FluxUtil.withContext(context -> service.batch(this.client.getEndpoint(), subscriptionId, starttime,
            endtime, interval, metricnamespace, metricnamesConverted, aggregation, top, orderBy, filter, rollupby,
            this.client.getApiVersion(), batchRequest, accept, context));
    }

    /**
     * Lists the metric values for multiple resources.
     * 
     * @param subscriptionId The subscription identifier for the resources in this batch.
     * @param metricnamespace Metric namespace that contains the requested metric names.
     * @param metricnames The names of the metrics (comma separated) to retrieve.
     * @param batchRequest Metrics batch body including the list of resource ids.
     * @param starttime The start time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you
     * have specified the endtime parameter, then this parameter is required.
     * If only starttime is specified, then endtime defaults to the current time.
     * If no time interval is specified, the default is 1 hour.
     * @param endtime The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'.
     * @param interval The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special
     * case for 'FULL' value that returns single datapoint for entire time span requested.
     * *Examples: PT15M, PT1H, P1D, FULL*.
     * @param aggregation The list of aggregation types (comma separated) to retrieve.
     * *Examples: average, minimum, maximum*.
     * @param top The maximum number of records to retrieve per resource ID in the request.
     * Valid only if filter is specified.
     * Defaults to 10.
     * @param orderBy The aggregation to use for sorting results and the direction of the sort.
     * Only one order can be specified.
     * *Examples: sum asc*.
     * @param filter The filter is used to reduce the set of metric data returned.&lt;br&gt;Example:&lt;br&gt;Metric
     * contains metadata A, B and C.&lt;br&gt;- Return all time series of C where A = a1 and B = b1 or
     * b2&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**&lt;br&gt;- Invalid
     * variant:&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**&lt;br&gt;This is invalid because
     * the logical or operator cannot separate two different metadata names.&lt;br&gt;- Return all time series where A =
     * a1, B = b1 and C = c1:&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**&lt;br&gt;- Return all time
     * series where A = a1&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.
     * @param rollupby Dimension name(s) to rollup results by. For example if you only want to see metric values with a
     * filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can
     * specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the metrics result for a resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<MetricResultsResponse>> batchWithResponseAsync(String subscriptionId, String metricnamespace,
        List<String> metricnames, ResourceIdList batchRequest, String starttime, String endtime, Duration interval,
        String aggregation, Integer top, String orderBy, String filter, String rollupby, Context context) {
        final String accept = "application/json";
        String metricnamesConverted = metricnames.stream()
            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
            .collect(Collectors.joining(","));
        return service.batch(this.client.getEndpoint(), subscriptionId, starttime, endtime, interval, metricnamespace,
            metricnamesConverted, aggregation, top, orderBy, filter, rollupby, this.client.getApiVersion(),
            batchRequest, accept, context);
    }

    /**
     * Lists the metric values for multiple resources.
     * 
     * @param subscriptionId The subscription identifier for the resources in this batch.
     * @param metricnamespace Metric namespace that contains the requested metric names.
     * @param metricnames The names of the metrics (comma separated) to retrieve.
     * @param batchRequest Metrics batch body including the list of resource ids.
     * @param starttime The start time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you
     * have specified the endtime parameter, then this parameter is required.
     * If only starttime is specified, then endtime defaults to the current time.
     * If no time interval is specified, the default is 1 hour.
     * @param endtime The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'.
     * @param interval The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special
     * case for 'FULL' value that returns single datapoint for entire time span requested.
     * *Examples: PT15M, PT1H, P1D, FULL*.
     * @param aggregation The list of aggregation types (comma separated) to retrieve.
     * *Examples: average, minimum, maximum*.
     * @param top The maximum number of records to retrieve per resource ID in the request.
     * Valid only if filter is specified.
     * Defaults to 10.
     * @param orderBy The aggregation to use for sorting results and the direction of the sort.
     * Only one order can be specified.
     * *Examples: sum asc*.
     * @param filter The filter is used to reduce the set of metric data returned.&lt;br&gt;Example:&lt;br&gt;Metric
     * contains metadata A, B and C.&lt;br&gt;- Return all time series of C where A = a1 and B = b1 or
     * b2&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**&lt;br&gt;- Invalid
     * variant:&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**&lt;br&gt;This is invalid because
     * the logical or operator cannot separate two different metadata names.&lt;br&gt;- Return all time series where A =
     * a1, B = b1 and C = c1:&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**&lt;br&gt;- Return all time
     * series where A = a1&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.
     * @param rollupby Dimension name(s) to rollup results by. For example if you only want to see metric values with a
     * filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can
     * specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the metrics result for a resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MetricResultsResponse> batchAsync(String subscriptionId, String metricnamespace,
        List<String> metricnames, ResourceIdList batchRequest, String starttime, String endtime, Duration interval,
        String aggregation, Integer top, String orderBy, String filter, String rollupby) {
        return batchWithResponseAsync(subscriptionId, metricnamespace, metricnames, batchRequest, starttime, endtime,
            interval, aggregation, top, orderBy, filter, rollupby).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Lists the metric values for multiple resources.
     * 
     * @param subscriptionId The subscription identifier for the resources in this batch.
     * @param metricnamespace Metric namespace that contains the requested metric names.
     * @param metricnames The names of the metrics (comma separated) to retrieve.
     * @param batchRequest Metrics batch body including the list of resource ids.
     * @param starttime The start time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you
     * have specified the endtime parameter, then this parameter is required.
     * If only starttime is specified, then endtime defaults to the current time.
     * If no time interval is specified, the default is 1 hour.
     * @param endtime The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'.
     * @param interval The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special
     * case for 'FULL' value that returns single datapoint for entire time span requested.
     * *Examples: PT15M, PT1H, P1D, FULL*.
     * @param aggregation The list of aggregation types (comma separated) to retrieve.
     * *Examples: average, minimum, maximum*.
     * @param top The maximum number of records to retrieve per resource ID in the request.
     * Valid only if filter is specified.
     * Defaults to 10.
     * @param orderBy The aggregation to use for sorting results and the direction of the sort.
     * Only one order can be specified.
     * *Examples: sum asc*.
     * @param filter The filter is used to reduce the set of metric data returned.&lt;br&gt;Example:&lt;br&gt;Metric
     * contains metadata A, B and C.&lt;br&gt;- Return all time series of C where A = a1 and B = b1 or
     * b2&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**&lt;br&gt;- Invalid
     * variant:&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**&lt;br&gt;This is invalid because
     * the logical or operator cannot separate two different metadata names.&lt;br&gt;- Return all time series where A =
     * a1, B = b1 and C = c1:&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**&lt;br&gt;- Return all time
     * series where A = a1&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.
     * @param rollupby Dimension name(s) to rollup results by. For example if you only want to see metric values with a
     * filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can
     * specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the metrics result for a resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MetricResultsResponse> batchAsync(String subscriptionId, String metricnamespace,
        List<String> metricnames, ResourceIdList batchRequest, String starttime, String endtime, Duration interval,
        String aggregation, Integer top, String orderBy, String filter, String rollupby, Context context) {
        return batchWithResponseAsync(subscriptionId, metricnamespace, metricnames, batchRequest, starttime, endtime,
            interval, aggregation, top, orderBy, filter, rollupby, context)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Lists the metric values for multiple resources.
     * 
     * @param subscriptionId The subscription identifier for the resources in this batch.
     * @param metricnamespace Metric namespace that contains the requested metric names.
     * @param metricnames The names of the metrics (comma separated) to retrieve.
     * @param batchRequest Metrics batch body including the list of resource ids.
     * @param starttime The start time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you
     * have specified the endtime parameter, then this parameter is required.
     * If only starttime is specified, then endtime defaults to the current time.
     * If no time interval is specified, the default is 1 hour.
     * @param endtime The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'.
     * @param interval The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special
     * case for 'FULL' value that returns single datapoint for entire time span requested.
     * *Examples: PT15M, PT1H, P1D, FULL*.
     * @param aggregation The list of aggregation types (comma separated) to retrieve.
     * *Examples: average, minimum, maximum*.
     * @param top The maximum number of records to retrieve per resource ID in the request.
     * Valid only if filter is specified.
     * Defaults to 10.
     * @param orderBy The aggregation to use for sorting results and the direction of the sort.
     * Only one order can be specified.
     * *Examples: sum asc*.
     * @param filter The filter is used to reduce the set of metric data returned.&lt;br&gt;Example:&lt;br&gt;Metric
     * contains metadata A, B and C.&lt;br&gt;- Return all time series of C where A = a1 and B = b1 or
     * b2&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**&lt;br&gt;- Invalid
     * variant:&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**&lt;br&gt;This is invalid because
     * the logical or operator cannot separate two different metadata names.&lt;br&gt;- Return all time series where A =
     * a1, B = b1 and C = c1:&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**&lt;br&gt;- Return all time
     * series where A = a1&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.
     * @param rollupby Dimension name(s) to rollup results by. For example if you only want to see metric values with a
     * filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can
     * specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the metrics result for a resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<MetricResultsResponse> batchWithResponse(String subscriptionId, String metricnamespace,
        List<String> metricnames, ResourceIdList batchRequest, String starttime, String endtime, Duration interval,
        String aggregation, Integer top, String orderBy, String filter, String rollupby, Context context) {
        final String accept = "application/json";
        String metricnamesConverted = metricnames.stream()
            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
            .collect(Collectors.joining(","));
        return service.batchSync(this.client.getEndpoint(), subscriptionId, starttime, endtime, interval,
            metricnamespace, metricnamesConverted, aggregation, top, orderBy, filter, rollupby,
            this.client.getApiVersion(), batchRequest, accept, context);
    }

    /**
     * Lists the metric values for multiple resources.
     * 
     * @param subscriptionId The subscription identifier for the resources in this batch.
     * @param metricnamespace Metric namespace that contains the requested metric names.
     * @param metricnames The names of the metrics (comma separated) to retrieve.
     * @param batchRequest Metrics batch body including the list of resource ids.
     * @param starttime The start time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you
     * have specified the endtime parameter, then this parameter is required.
     * If only starttime is specified, then endtime defaults to the current time.
     * If no time interval is specified, the default is 1 hour.
     * @param endtime The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'.
     * @param interval The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special
     * case for 'FULL' value that returns single datapoint for entire time span requested.
     * *Examples: PT15M, PT1H, P1D, FULL*.
     * @param aggregation The list of aggregation types (comma separated) to retrieve.
     * *Examples: average, minimum, maximum*.
     * @param top The maximum number of records to retrieve per resource ID in the request.
     * Valid only if filter is specified.
     * Defaults to 10.
     * @param orderBy The aggregation to use for sorting results and the direction of the sort.
     * Only one order can be specified.
     * *Examples: sum asc*.
     * @param filter The filter is used to reduce the set of metric data returned.&lt;br&gt;Example:&lt;br&gt;Metric
     * contains metadata A, B and C.&lt;br&gt;- Return all time series of C where A = a1 and B = b1 or
     * b2&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**&lt;br&gt;- Invalid
     * variant:&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**&lt;br&gt;This is invalid because
     * the logical or operator cannot separate two different metadata names.&lt;br&gt;- Return all time series where A =
     * a1, B = b1 and C = c1:&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**&lt;br&gt;- Return all time
     * series where A = a1&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.
     * @param rollupby Dimension name(s) to rollup results by. For example if you only want to see metric values with a
     * filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can
     * specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the metrics result for a resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MetricResultsResponse batch(String subscriptionId, String metricnamespace, List<String> metricnames,
        ResourceIdList batchRequest, String starttime, String endtime, Duration interval, String aggregation,
        Integer top, String orderBy, String filter, String rollupby) {
        return batchWithResponse(subscriptionId, metricnamespace, metricnames, batchRequest, starttime, endtime,
            interval, aggregation, top, orderBy, filter, rollupby, Context.NONE).getValue();
    }
}
