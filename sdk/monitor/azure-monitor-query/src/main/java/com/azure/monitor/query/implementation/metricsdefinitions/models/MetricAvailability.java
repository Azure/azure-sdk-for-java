// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.query.implementation.metricsdefinitions.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.monitor.query.implementation.metricsdefinitions.implementation.CoreToCodegenBridgeUtils;
import java.io.IOException;
import java.time.Duration;

/**
 * Metric availability specifies the time grain (aggregation interval or frequency) and the retention period for that
 * time grain.
 */
@Fluent
public final class MetricAvailability implements JsonSerializable<MetricAvailability> {
    /*
     * The time grain specifies a supported aggregation interval for the metric. Expressed as a duration 'PT1M', 'P1D',
     * etc.
     */
    private Duration timeGrain;

    /*
     * The retention period for the metric at the specified timegrain. Expressed as a duration 'PT1M', 'P1D', etc.
     */
    private Duration retention;

    /**
     * Creates an instance of MetricAvailability class.
     */
    public MetricAvailability() {
    }

    /**
     * Get the timeGrain property: The time grain specifies a supported aggregation interval for the metric. Expressed
     * as a duration 'PT1M', 'P1D', etc.
     * 
     * @return the timeGrain value.
     */
    public Duration getTimeGrain() {
        return this.timeGrain;
    }

    /**
     * Set the timeGrain property: The time grain specifies a supported aggregation interval for the metric. Expressed
     * as a duration 'PT1M', 'P1D', etc.
     * 
     * @param timeGrain the timeGrain value to set.
     * @return the MetricAvailability object itself.
     */
    public MetricAvailability setTimeGrain(Duration timeGrain) {
        this.timeGrain = timeGrain;
        return this;
    }

    /**
     * Get the retention property: The retention period for the metric at the specified timegrain. Expressed as a
     * duration 'PT1M', 'P1D', etc.
     * 
     * @return the retention value.
     */
    public Duration getRetention() {
        return this.retention;
    }

    /**
     * Set the retention property: The retention period for the metric at the specified timegrain. Expressed as a
     * duration 'PT1M', 'P1D', etc.
     * 
     * @param retention the retention value to set.
     * @return the MetricAvailability object itself.
     */
    public MetricAvailability setRetention(Duration retention) {
        this.retention = retention;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("timeGrain", CoreToCodegenBridgeUtils.durationToStringWithDays(this.timeGrain));
        jsonWriter.writeStringField("retention", CoreToCodegenBridgeUtils.durationToStringWithDays(this.retention));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricAvailability from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricAvailability if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MetricAvailability.
     */
    public static MetricAvailability fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetricAvailability deserializedMetricAvailability = new MetricAvailability();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timeGrain".equals(fieldName)) {
                    deserializedMetricAvailability.timeGrain
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("retention".equals(fieldName)) {
                    deserializedMetricAvailability.retention
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetricAvailability;
        });
    }
}
