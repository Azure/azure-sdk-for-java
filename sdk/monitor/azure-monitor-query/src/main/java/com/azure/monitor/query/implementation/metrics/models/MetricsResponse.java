// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.query.implementation.metrics.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.monitor.query.implementation.metrics.implementation.CoreToCodegenBridgeUtils;
import java.io.IOException;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;

/**
 * The response to a metrics query.
 */
@Fluent
public final class MetricsResponse implements JsonSerializable<MetricsResponse> {
    /*
     * The integer value representing the relative cost of the query.
     */
    private Integer cost;

    /*
     * The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by
     * '/'. This may be adjusted in the future and returned back from what was originally requested.
     */
    private final String timespan;

    /*
     * The interval (window size) for which the metric data was returned in ISO 8601 duration format with a special
     * case for 'FULL' value that returns single datapoint for entire time span requested (*Examples: PT15M, PT1H, P1D,
     * FULL*).
     * This may be adjusted and different from what was originally requested if AutoAdjustTimegrain=true is specified.
     * This is not present if a metadata request was made.
     */
    private Duration interval;

    /*
     * The namespace of the metrics being queried
     */
    private String namespace;

    /*
     * The region of the resource being queried for metrics.
     */
    private String resourceregion;

    /*
     * The value of the collection.
     */
    private final List<Metric> value;

    /**
     * Creates an instance of MetricsResponse class.
     * 
     * @param timespan the timespan value to set.
     * @param value the value value to set.
     */
    public MetricsResponse(String timespan, List<Metric> value) {
        this.timespan = timespan;
        this.value = value;
    }

    /**
     * Get the cost property: The integer value representing the relative cost of the query.
     * 
     * @return the cost value.
     */
    public Integer getCost() {
        return this.cost;
    }

    /**
     * Set the cost property: The integer value representing the relative cost of the query.
     * 
     * @param cost the cost value to set.
     * @return the MetricsResponse object itself.
     */
    public MetricsResponse setCost(Integer cost) {
        this.cost = cost;
        return this;
    }

    /**
     * Get the timespan property: The timespan for which the data was retrieved. Its value consists of two datetimes
     * concatenated, separated by '/'. This may be adjusted in the future and returned back from what was originally
     * requested.
     * 
     * @return the timespan value.
     */
    public String getTimespan() {
        return this.timespan;
    }

    /**
     * Get the interval property: The interval (window size) for which the metric data was returned in ISO 8601
     * duration format with a special case for 'FULL' value that returns single datapoint for entire time span
     * requested (*Examples: PT15M, PT1H, P1D, FULL*).
     * This may be adjusted and different from what was originally requested if AutoAdjustTimegrain=true is specified.
     * This is not present if a metadata request was made.
     * 
     * @return the interval value.
     */
    public Duration getInterval() {
        return this.interval;
    }

    /**
     * Set the interval property: The interval (window size) for which the metric data was returned in ISO 8601
     * duration format with a special case for 'FULL' value that returns single datapoint for entire time span
     * requested (*Examples: PT15M, PT1H, P1D, FULL*).
     * This may be adjusted and different from what was originally requested if AutoAdjustTimegrain=true is specified.
     * This is not present if a metadata request was made.
     * 
     * @param interval the interval value to set.
     * @return the MetricsResponse object itself.
     */
    public MetricsResponse setInterval(Duration interval) {
        this.interval = interval;
        return this;
    }

    /**
     * Get the namespace property: The namespace of the metrics being queried.
     * 
     * @return the namespace value.
     */
    public String getNamespace() {
        return this.namespace;
    }

    /**
     * Set the namespace property: The namespace of the metrics being queried.
     * 
     * @param namespace the namespace value to set.
     * @return the MetricsResponse object itself.
     */
    public MetricsResponse setNamespace(String namespace) {
        this.namespace = namespace;
        return this;
    }

    /**
     * Get the resourceregion property: The region of the resource being queried for metrics.
     * 
     * @return the resourceregion value.
     */
    public String getResourceregion() {
        return this.resourceregion;
    }

    /**
     * Set the resourceregion property: The region of the resource being queried for metrics.
     * 
     * @param resourceregion the resourceregion value to set.
     * @return the MetricsResponse object itself.
     */
    public MetricsResponse setResourceregion(String resourceregion) {
        this.resourceregion = resourceregion;
        return this;
    }

    /**
     * Get the value property: The value of the collection.
     * 
     * @return the value value.
     */
    public List<Metric> getValue() {
        return this.value;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("timespan", this.timespan);
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("cost", this.cost);
        jsonWriter.writeStringField("interval", CoreToCodegenBridgeUtils.durationToStringWithDays(this.interval));
        jsonWriter.writeStringField("namespace", this.namespace);
        jsonWriter.writeStringField("resourceregion", this.resourceregion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricsResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricsResponse if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MetricsResponse.
     */
    public static MetricsResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean timespanFound = false;
            String timespan = null;
            boolean valueFound = false;
            List<Metric> value = null;
            Integer cost = null;
            Duration interval = null;
            String namespace = null;
            String resourceregion = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timespan".equals(fieldName)) {
                    timespan = reader.getString();
                    timespanFound = true;
                } else if ("value".equals(fieldName)) {
                    value = reader.readArray(reader1 -> Metric.fromJson(reader1));
                    valueFound = true;
                } else if ("cost".equals(fieldName)) {
                    cost = reader.getNullable(JsonReader::getInt);
                } else if ("interval".equals(fieldName)) {
                    interval = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("namespace".equals(fieldName)) {
                    namespace = reader.getString();
                } else if ("resourceregion".equals(fieldName)) {
                    resourceregion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (timespanFound && valueFound) {
                MetricsResponse deserializedMetricsResponse = new MetricsResponse(timespan, value);
                deserializedMetricsResponse.cost = cost;
                deserializedMetricsResponse.interval = interval;
                deserializedMetricsResponse.namespace = namespace;
                deserializedMetricsResponse.resourceregion = resourceregion;

                return deserializedMetricsResponse;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!timespanFound) {
                missingProperties.add("timespan");
            }
            if (!valueFound) {
                missingProperties.add("value");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
