// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.query.implementation.logs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * An Application Insights application.
 * 
 * Application Insights apps that were part of the metadata request and that the user has access to.
 */
@Fluent
public final class MetadataApplication implements JsonSerializable<MetadataApplication> {
    /*
     * The ID of the Application Insights app.
     */
    private final String id;

    /*
     * The ARM resource ID of the Application Insights app.
     */
    private final String resourceId;

    /*
     * The name of the Application Insights app.
     */
    private final String name;

    /*
     * The Azure region of the Application Insights app.
     */
    private final String region;

    /*
     * The related metadata items for the Application Insights app.
     */
    private MetadataApplicationRelated related;

    /**
     * Creates an instance of MetadataApplication class.
     * 
     * @param id the id value to set.
     * @param resourceId the resourceId value to set.
     * @param name the name value to set.
     * @param region the region value to set.
     */
    public MetadataApplication(String id, String resourceId, String name, String region) {
        this.id = id;
        this.resourceId = resourceId;
        this.name = name;
        this.region = region;
    }

    /**
     * Get the id property: The ID of the Application Insights app.
     * 
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Get the resourceId property: The ARM resource ID of the Application Insights app.
     * 
     * @return the resourceId value.
     */
    public String getResourceId() {
        return this.resourceId;
    }

    /**
     * Get the name property: The name of the Application Insights app.
     * 
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Get the region property: The Azure region of the Application Insights app.
     * 
     * @return the region value.
     */
    public String getRegion() {
        return this.region;
    }

    /**
     * Get the related property: The related metadata items for the Application Insights app.
     * 
     * @return the related value.
     */
    public MetadataApplicationRelated getRelated() {
        return this.related;
    }

    /**
     * Set the related property: The related metadata items for the Application Insights app.
     * 
     * @param related the related value to set.
     * @return the MetadataApplication object itself.
     */
    public MetadataApplication setRelated(MetadataApplicationRelated related) {
        this.related = related;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("region", this.region);
        jsonWriter.writeJsonField("related", this.related);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetadataApplication from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetadataApplication if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MetadataApplication.
     */
    public static MetadataApplication fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean idFound = false;
            String id = null;
            boolean resourceIdFound = false;
            String resourceId = null;
            boolean nameFound = false;
            String name = null;
            boolean regionFound = false;
            String region = null;
            MetadataApplicationRelated related = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                    idFound = true;
                } else if ("resourceId".equals(fieldName)) {
                    resourceId = reader.getString();
                    resourceIdFound = true;
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("region".equals(fieldName)) {
                    region = reader.getString();
                    regionFound = true;
                } else if ("related".equals(fieldName)) {
                    related = MetadataApplicationRelated.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            if (idFound && resourceIdFound && nameFound && regionFound) {
                MetadataApplication deserializedMetadataApplication
                    = new MetadataApplication(id, resourceId, name, region);
                deserializedMetadataApplication.related = related;

                return deserializedMetadataApplication;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!idFound) {
                missingProperties.add("id");
            }
            if (!resourceIdFound) {
                missingProperties.add("resourceId");
            }
            if (!nameFound) {
                missingProperties.add("name");
            }
            if (!regionFound) {
                missingProperties.add("region");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
