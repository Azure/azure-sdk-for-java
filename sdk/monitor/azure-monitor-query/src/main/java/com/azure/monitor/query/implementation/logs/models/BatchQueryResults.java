// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.query.implementation.logs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A query response for a single query in a batch.
 * 
 * Contains the tables, columns &amp; rows resulting from a query.
 */
@Fluent
public final class BatchQueryResults implements JsonSerializable<BatchQueryResults> {
    /*
     * The results of the query in tabular format.
     */
    private List<Table> tables;

    /*
     * Statistics represented in JSON format.
     */
    private Object statistics;

    /*
     * Visualization data in JSON format.
     */
    private Object render;

    /*
     * The code and message for an error.
     */
    private ErrorInfo error;

    /**
     * Creates an instance of BatchQueryResults class.
     */
    public BatchQueryResults() {
    }

    /**
     * Get the tables property: The results of the query in tabular format.
     * 
     * @return the tables value.
     */
    public List<Table> getTables() {
        return this.tables;
    }

    /**
     * Set the tables property: The results of the query in tabular format.
     * 
     * @param tables the tables value to set.
     * @return the BatchQueryResults object itself.
     */
    public BatchQueryResults setTables(List<Table> tables) {
        this.tables = tables;
        return this;
    }

    /**
     * Get the statistics property: Statistics represented in JSON format.
     * 
     * @return the statistics value.
     */
    public Object getStatistics() {
        return this.statistics;
    }

    /**
     * Set the statistics property: Statistics represented in JSON format.
     * 
     * @param statistics the statistics value to set.
     * @return the BatchQueryResults object itself.
     */
    public BatchQueryResults setStatistics(Object statistics) {
        this.statistics = statistics;
        return this;
    }

    /**
     * Get the render property: Visualization data in JSON format.
     * 
     * @return the render value.
     */
    public Object getRender() {
        return this.render;
    }

    /**
     * Set the render property: Visualization data in JSON format.
     * 
     * @param render the render value to set.
     * @return the BatchQueryResults object itself.
     */
    public BatchQueryResults setRender(Object render) {
        this.render = render;
        return this;
    }

    /**
     * Get the error property: The code and message for an error.
     * 
     * @return the error value.
     */
    public ErrorInfo getError() {
        return this.error;
    }

    /**
     * Set the error property: The code and message for an error.
     * 
     * @param error the error value to set.
     * @return the BatchQueryResults object itself.
     */
    public BatchQueryResults setError(ErrorInfo error) {
        this.error = error;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("tables", this.tables, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeUntypedField("statistics", this.statistics);
        jsonWriter.writeUntypedField("render", this.render);
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchQueryResults from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchQueryResults if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchQueryResults.
     */
    public static BatchQueryResults fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchQueryResults deserializedBatchQueryResults = new BatchQueryResults();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tables".equals(fieldName)) {
                    List<Table> tables = reader.readArray(reader1 -> Table.fromJson(reader1));
                    deserializedBatchQueryResults.tables = tables;
                } else if ("statistics".equals(fieldName)) {
                    deserializedBatchQueryResults.statistics = reader.readUntyped();
                } else if ("render".equals(fieldName)) {
                    deserializedBatchQueryResults.render = reader.readUntyped();
                } else if ("error".equals(fieldName)) {
                    deserializedBatchQueryResults.error = ErrorInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBatchQueryResults;
        });
    }
}
