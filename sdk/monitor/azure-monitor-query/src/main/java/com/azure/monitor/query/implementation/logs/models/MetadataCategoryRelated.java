// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.query.implementation.logs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The related metadata items for the category.
 */
@Fluent
public final class MetadataCategoryRelated implements JsonSerializable<MetadataCategoryRelated> {
    /*
     * The tables related to the category
     */
    private List<String> tables;

    /*
     * The functions related to the category
     */
    private List<String> functions;

    /*
     * The resource types related to the category
     */
    private List<String> resourceTypes;

    /*
     * The saved queries related to the category
     */
    private List<String> queries;

    /*
     * The Log Analytics solutions related to the category
     */
    private List<String> solutions;

    /**
     * Creates an instance of MetadataCategoryRelated class.
     */
    public MetadataCategoryRelated() {
    }

    /**
     * Get the tables property: The tables related to the category.
     * 
     * @return the tables value.
     */
    public List<String> getTables() {
        return this.tables;
    }

    /**
     * Set the tables property: The tables related to the category.
     * 
     * @param tables the tables value to set.
     * @return the MetadataCategoryRelated object itself.
     */
    public MetadataCategoryRelated setTables(List<String> tables) {
        this.tables = tables;
        return this;
    }

    /**
     * Get the functions property: The functions related to the category.
     * 
     * @return the functions value.
     */
    public List<String> getFunctions() {
        return this.functions;
    }

    /**
     * Set the functions property: The functions related to the category.
     * 
     * @param functions the functions value to set.
     * @return the MetadataCategoryRelated object itself.
     */
    public MetadataCategoryRelated setFunctions(List<String> functions) {
        this.functions = functions;
        return this;
    }

    /**
     * Get the resourceTypes property: The resource types related to the category.
     * 
     * @return the resourceTypes value.
     */
    public List<String> getResourceTypes() {
        return this.resourceTypes;
    }

    /**
     * Set the resourceTypes property: The resource types related to the category.
     * 
     * @param resourceTypes the resourceTypes value to set.
     * @return the MetadataCategoryRelated object itself.
     */
    public MetadataCategoryRelated setResourceTypes(List<String> resourceTypes) {
        this.resourceTypes = resourceTypes;
        return this;
    }

    /**
     * Get the queries property: The saved queries related to the category.
     * 
     * @return the queries value.
     */
    public List<String> getQueries() {
        return this.queries;
    }

    /**
     * Set the queries property: The saved queries related to the category.
     * 
     * @param queries the queries value to set.
     * @return the MetadataCategoryRelated object itself.
     */
    public MetadataCategoryRelated setQueries(List<String> queries) {
        this.queries = queries;
        return this;
    }

    /**
     * Get the solutions property: The Log Analytics solutions related to the category.
     * 
     * @return the solutions value.
     */
    public List<String> getSolutions() {
        return this.solutions;
    }

    /**
     * Set the solutions property: The Log Analytics solutions related to the category.
     * 
     * @param solutions the solutions value to set.
     * @return the MetadataCategoryRelated object itself.
     */
    public MetadataCategoryRelated setSolutions(List<String> solutions) {
        this.solutions = solutions;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("tables", this.tables, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("functions", this.functions, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("resourceTypes", this.resourceTypes,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("queries", this.queries, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("solutions", this.solutions, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetadataCategoryRelated from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetadataCategoryRelated if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MetadataCategoryRelated.
     */
    public static MetadataCategoryRelated fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetadataCategoryRelated deserializedMetadataCategoryRelated = new MetadataCategoryRelated();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tables".equals(fieldName)) {
                    List<String> tables = reader.readArray(reader1 -> reader1.getString());
                    deserializedMetadataCategoryRelated.tables = tables;
                } else if ("functions".equals(fieldName)) {
                    List<String> functions = reader.readArray(reader1 -> reader1.getString());
                    deserializedMetadataCategoryRelated.functions = functions;
                } else if ("resourceTypes".equals(fieldName)) {
                    List<String> resourceTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedMetadataCategoryRelated.resourceTypes = resourceTypes;
                } else if ("queries".equals(fieldName)) {
                    List<String> queries = reader.readArray(reader1 -> reader1.getString());
                    deserializedMetadataCategoryRelated.queries = queries;
                } else if ("solutions".equals(fieldName)) {
                    List<String> solutions = reader.readArray(reader1 -> reader1.getString());
                    deserializedMetadataCategoryRelated.solutions = solutions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetadataCategoryRelated;
        });
    }
}
