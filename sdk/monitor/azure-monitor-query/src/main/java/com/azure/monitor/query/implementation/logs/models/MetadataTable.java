// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.query.implementation.logs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * A data table that takes part in a workspace schema.
 * 
 * Tables are part of the workspace schema, and contain a list of columns and a reference to other relevant metadata
 * items.
 */
@Fluent
public final class MetadataTable implements JsonSerializable<MetadataTable> {
    /*
     * The ID of the table
     */
    private final String id;

    /*
     * The name of the table
     */
    private final String name;

    /*
     * The description of the table
     */
    private String description;

    /*
     * The column associated with the timespan query parameter for the table
     */
    private String timespanColumn;

    /*
     * The user defined labels of the table
     */
    private List<String> labels;

    /*
     * The tags associated with the table
     */
    private Object tags;

    /*
     * The properties of the table
     */
    private Object properties;

    /*
     * The list of columns defined on the table
     */
    private List<MetadataTableColumnsItem> columns;

    /*
     * The related metadata items for the table
     */
    private MetadataTableRelated related;

    /**
     * Creates an instance of MetadataTable class.
     * 
     * @param id the id value to set.
     * @param name the name value to set.
     */
    public MetadataTable(String id, String name) {
        this.id = id;
        this.name = name;
    }

    /**
     * Get the id property: The ID of the table.
     * 
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: The name of the table.
     * 
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Get the description property: The description of the table.
     * 
     * @return the description value.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The description of the table.
     * 
     * @param description the description value to set.
     * @return the MetadataTable object itself.
     */
    public MetadataTable setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the timespanColumn property: The column associated with the timespan query parameter for the table.
     * 
     * @return the timespanColumn value.
     */
    public String getTimespanColumn() {
        return this.timespanColumn;
    }

    /**
     * Set the timespanColumn property: The column associated with the timespan query parameter for the table.
     * 
     * @param timespanColumn the timespanColumn value to set.
     * @return the MetadataTable object itself.
     */
    public MetadataTable setTimespanColumn(String timespanColumn) {
        this.timespanColumn = timespanColumn;
        return this;
    }

    /**
     * Get the labels property: The user defined labels of the table.
     * 
     * @return the labels value.
     */
    public List<String> getLabels() {
        return this.labels;
    }

    /**
     * Set the labels property: The user defined labels of the table.
     * 
     * @param labels the labels value to set.
     * @return the MetadataTable object itself.
     */
    public MetadataTable setLabels(List<String> labels) {
        this.labels = labels;
        return this;
    }

    /**
     * Get the tags property: The tags associated with the table.
     * 
     * @return the tags value.
     */
    public Object getTags() {
        return this.tags;
    }

    /**
     * Set the tags property: The tags associated with the table.
     * 
     * @param tags the tags value to set.
     * @return the MetadataTable object itself.
     */
    public MetadataTable setTags(Object tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the properties property: The properties of the table.
     * 
     * @return the properties value.
     */
    public Object getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: The properties of the table.
     * 
     * @param properties the properties value to set.
     * @return the MetadataTable object itself.
     */
    public MetadataTable setProperties(Object properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the columns property: The list of columns defined on the table.
     * 
     * @return the columns value.
     */
    public List<MetadataTableColumnsItem> getColumns() {
        return this.columns;
    }

    /**
     * Set the columns property: The list of columns defined on the table.
     * 
     * @param columns the columns value to set.
     * @return the MetadataTable object itself.
     */
    public MetadataTable setColumns(List<MetadataTableColumnsItem> columns) {
        this.columns = columns;
        return this;
    }

    /**
     * Get the related property: The related metadata items for the table.
     * 
     * @return the related value.
     */
    public MetadataTableRelated getRelated() {
        return this.related;
    }

    /**
     * Set the related property: The related metadata items for the table.
     * 
     * @param related the related value to set.
     * @return the MetadataTable object itself.
     */
    public MetadataTable setRelated(MetadataTableRelated related) {
        this.related = related;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("timespanColumn", this.timespanColumn);
        jsonWriter.writeArrayField("labels", this.labels, (writer, element) -> writer.writeString(element));
        jsonWriter.writeUntypedField("tags", this.tags);
        jsonWriter.writeUntypedField("properties", this.properties);
        jsonWriter.writeArrayField("columns", this.columns, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("related", this.related);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetadataTable from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetadataTable if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MetadataTable.
     */
    public static MetadataTable fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean idFound = false;
            String id = null;
            boolean nameFound = false;
            String name = null;
            String description = null;
            String timespanColumn = null;
            List<String> labels = null;
            Object tags = null;
            Object properties = null;
            List<MetadataTableColumnsItem> columns = null;
            MetadataTableRelated related = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                    idFound = true;
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("timespanColumn".equals(fieldName)) {
                    timespanColumn = reader.getString();
                } else if ("labels".equals(fieldName)) {
                    labels = reader.readArray(reader1 -> reader1.getString());
                } else if ("tags".equals(fieldName)) {
                    tags = reader.readUntyped();
                } else if ("properties".equals(fieldName)) {
                    properties = reader.readUntyped();
                } else if ("columns".equals(fieldName)) {
                    columns = reader.readArray(reader1 -> MetadataTableColumnsItem.fromJson(reader1));
                } else if ("related".equals(fieldName)) {
                    related = MetadataTableRelated.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            if (idFound && nameFound) {
                MetadataTable deserializedMetadataTable = new MetadataTable(id, name);
                deserializedMetadataTable.description = description;
                deserializedMetadataTable.timespanColumn = timespanColumn;
                deserializedMetadataTable.labels = labels;
                deserializedMetadataTable.tags = tags;
                deserializedMetadataTable.properties = properties;
                deserializedMetadataTable.columns = columns;
                deserializedMetadataTable.related = related;

                return deserializedMetadataTable;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!idFound) {
                missingProperties.add("id");
            }
            if (!nameFound) {
                missingProperties.add("name");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
