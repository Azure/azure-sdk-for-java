// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.query.implementation.logs.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Error details.
 *
 * <p>Contains details when the response code indicates an error.
 */
@Immutable
public final class ErrorResponse implements JsonSerializable<ErrorResponse> {
    /*
     * The code and message for an error.
     *
     * The error details.
     */
    private final ErrorInfo error;

    /**
     * Creates an instance of ErrorResponse class.
     *
     * @param error the error value to set.
     */
    public ErrorResponse(ErrorInfo error) {
        this.error = error;
    }

    /**
     * Get the error property: The code and message for an error.
     *
     * <p>The error details.
     *
     * @return the error value.
     */
    public ErrorInfo getError() {
        return this.error;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (getError() == null) {
            throw new IllegalArgumentException("Missing required property error in model ErrorResponse");
        } else {
            getError().validate();
        }
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ErrorResponse from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ErrorResponse if the JsonReader was pointing to an instance of it, or null if it was
     *     pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ErrorResponse.
     */
    public static ErrorResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(
                reader -> {
                    boolean errorFound = false;
                    ErrorInfo error = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("error".equals(fieldName)) {
                            error = ErrorInfo.fromJson(reader);
                            errorFound = true;
                        } else {
                            reader.skipChildren();
                        }
                    }
                    if (errorFound) {
                        ErrorResponse deserializedErrorResponse = new ErrorResponse(error);

                        return deserializedErrorResponse;
                    }
                    List<String> missingProperties = new ArrayList<>();
                    if (!errorFound) {
                        missingProperties.add("error");
                    }

                    throw new IllegalStateException(
                            "Missing required property/properties: " + String.join(", ", missingProperties));
                });
    }
}
