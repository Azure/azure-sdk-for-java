// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.query.implementation.logs.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * An array of requests.
 */
@Immutable
public final class BatchRequest implements JsonSerializable<BatchRequest> {
    /*
     * An single request in a batch.
     */
    private final List<BatchQueryRequest> requests;

    /**
     * Creates an instance of BatchRequest class.
     * 
     * @param requests the requests value to set.
     */
    public BatchRequest(List<BatchQueryRequest> requests) {
        this.requests = requests;
    }

    /**
     * Get the requests property: An single request in a batch.
     * 
     * @return the requests value.
     */
    public List<BatchQueryRequest> getRequests() {
        return this.requests;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("requests", this.requests, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BatchRequest.
     */
    public static BatchRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean requestsFound = false;
            List<BatchQueryRequest> requests = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("requests".equals(fieldName)) {
                    requests = reader.readArray(reader1 -> BatchQueryRequest.fromJson(reader1));
                    requestsFound = true;
                } else {
                    reader.skipChildren();
                }
            }
            if (requestsFound) {
                return new BatchRequest(requests);
            }
            throw new IllegalStateException("Missing required property: requests");
        });
    }
}
