// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.query.implementation.metricsbatch.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The comma separated list of resource IDs to query metrics for.
 */
@Fluent
public final class ResourceIdList implements JsonSerializable<ResourceIdList> {
    /*
     * The list of resource IDs to query metrics for.
     */
    private List<String> resourceids;

    /**
     * Creates an instance of ResourceIdList class.
     */
    public ResourceIdList() {
    }

    /**
     * Get the resourceids property: The list of resource IDs to query metrics for.
     * 
     * @return the resourceids value.
     */
    public List<String> getResourceids() {
        return this.resourceids;
    }

    /**
     * Set the resourceids property: The list of resource IDs to query metrics for.
     * 
     * @param resourceids the resourceids value to set.
     * @return the ResourceIdList object itself.
     */
    public ResourceIdList setResourceids(List<String> resourceids) {
        this.resourceids = resourceids;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("resourceids", this.resourceids, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceIdList from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceIdList if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceIdList.
     */
    public static ResourceIdList fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceIdList deserializedResourceIdList = new ResourceIdList();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceids".equals(fieldName)) {
                    List<String> resourceids = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceIdList.resourceids = resourceids;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceIdList;
        });
    }
}
