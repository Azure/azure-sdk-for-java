// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.query.implementation.logs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The related metadata items for the Application Insights app.
 */
@Fluent
public final class MetadataApplicationRelated implements JsonSerializable<MetadataApplicationRelated> {
    /*
     * The related tables for the Application Insights app.
     */
    private List<String> tables;

    /*
     * The related functions for the Application Insights app.
     */
    private List<String> functions;

    /**
     * Creates an instance of MetadataApplicationRelated class.
     */
    public MetadataApplicationRelated() {
    }

    /**
     * Get the tables property: The related tables for the Application Insights app.
     * 
     * @return the tables value.
     */
    public List<String> getTables() {
        return this.tables;
    }

    /**
     * Set the tables property: The related tables for the Application Insights app.
     * 
     * @param tables the tables value to set.
     * @return the MetadataApplicationRelated object itself.
     */
    public MetadataApplicationRelated setTables(List<String> tables) {
        this.tables = tables;
        return this;
    }

    /**
     * Get the functions property: The related functions for the Application Insights app.
     * 
     * @return the functions value.
     */
    public List<String> getFunctions() {
        return this.functions;
    }

    /**
     * Set the functions property: The related functions for the Application Insights app.
     * 
     * @param functions the functions value to set.
     * @return the MetadataApplicationRelated object itself.
     */
    public MetadataApplicationRelated setFunctions(List<String> functions) {
        this.functions = functions;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("tables", this.tables, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("functions", this.functions, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetadataApplicationRelated from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetadataApplicationRelated if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MetadataApplicationRelated.
     */
    public static MetadataApplicationRelated fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetadataApplicationRelated deserializedMetadataApplicationRelated = new MetadataApplicationRelated();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tables".equals(fieldName)) {
                    List<String> tables = reader.readArray(reader1 -> reader1.getString());
                    deserializedMetadataApplicationRelated.tables = tables;
                } else if ("functions".equals(fieldName)) {
                    List<String> functions = reader.readArray(reader1 -> reader1.getString());
                    deserializedMetadataApplicationRelated.functions = functions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetadataApplicationRelated;
        });
    }
}
