// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.query.implementation.logs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * A metadata category.
 * 
 * Categories are used to group other metadata entities.
 */
@Fluent
public final class MetadataCategory implements JsonSerializable<MetadataCategory> {
    /*
     * The ID of the category
     */
    private final String id;

    /*
     * The display name of the category
     */
    private final String displayName;

    /*
     * The description of the category
     */
    private String description;

    /*
     * The related metadata items for the category
     */
    private MetadataCategoryRelated related;

    /**
     * Creates an instance of MetadataCategory class.
     * 
     * @param id the id value to set.
     * @param displayName the displayName value to set.
     */
    public MetadataCategory(String id, String displayName) {
        this.id = id;
        this.displayName = displayName;
    }

    /**
     * Get the id property: The ID of the category.
     * 
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Get the displayName property: The display name of the category.
     * 
     * @return the displayName value.
     */
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Get the description property: The description of the category.
     * 
     * @return the description value.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The description of the category.
     * 
     * @param description the description value to set.
     * @return the MetadataCategory object itself.
     */
    public MetadataCategory setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the related property: The related metadata items for the category.
     * 
     * @return the related value.
     */
    public MetadataCategoryRelated getRelated() {
        return this.related;
    }

    /**
     * Set the related property: The related metadata items for the category.
     * 
     * @param related the related value to set.
     * @return the MetadataCategory object itself.
     */
    public MetadataCategory setRelated(MetadataCategoryRelated related) {
        this.related = related;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeJsonField("related", this.related);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetadataCategory from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetadataCategory if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MetadataCategory.
     */
    public static MetadataCategory fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean idFound = false;
            String id = null;
            boolean displayNameFound = false;
            String displayName = null;
            String description = null;
            MetadataCategoryRelated related = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                    idFound = true;
                } else if ("displayName".equals(fieldName)) {
                    displayName = reader.getString();
                    displayNameFound = true;
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("related".equals(fieldName)) {
                    related = MetadataCategoryRelated.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            if (idFound && displayNameFound) {
                MetadataCategory deserializedMetadataCategory = new MetadataCategory(id, displayName);
                deserializedMetadataCategory.description = description;
                deserializedMetadataCategory.related = related;

                return deserializedMetadataCategory;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!idFound) {
                missingProperties.add("id");
            }
            if (!displayNameFound) {
                missingProperties.add("displayName");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
