// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.query.log.implementation.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Contains the tables, columns &amp; rows resulting from a query. */
@Fluent
public final class QueryResults {
    /*
     * The list of tables, columns and rows.
     */
    @JsonProperty(value = "tables")
    private List<Table> tables;

    @JsonProperty(value = "error")
    private ErrorInfo error;

    public ErrorInfo getError() {
        return error;
    }

    public void setError(ErrorInfo error) {
        this.error = error;
    }

    /*
     * The errors property.
     */
    @JsonProperty(value = "errors")
    private ErrorDetails errors;

    /**
     * Get the tables property: The list of tables, columns and rows.
     *
     * @return the tables value.
     */
    public List<Table> getTables() {
        return this.tables;
    }

    /**
     * Set the tables property: The list of tables, columns and rows.
     *
     * @param tables the tables value to set.
     * @return the QueryResults object itself.
     */
    public QueryResults setTables(List<Table> tables) {
        this.tables = tables;
        return this;
    }

    /**
     * Get the errors property: The errors property.
     *
     * @return the errors value.
     */
    public ErrorDetails getErrors() {
        return this.errors;
    }

    /**
     * Set the errors property: The errors property.
     *
     * @param errors the errors value to set.
     * @return the QueryResults object itself.
     */
    public QueryResults setErrors(ErrorDetails errors) {
        this.errors = errors;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (getTables() != null) {
            getTables().forEach(e -> e.validate());
        }
        if (getErrors() != null) {
            getErrors().validate();
        }
    }
}
