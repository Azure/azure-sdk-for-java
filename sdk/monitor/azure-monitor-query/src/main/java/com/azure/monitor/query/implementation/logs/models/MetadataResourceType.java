// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.query.implementation.logs.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * A type of resource in Azure.
 * 
 * Metadata about types of Azure resources, containing relevant tables, functions, etc.
 */
@Fluent
public final class MetadataResourceType implements JsonSerializable<MetadataResourceType> {
    /*
     * The ID of the resource-type
     */
    @Generated
    private final String id;

    /*
     * The type of the resource-type
     */
    @Generated
    private final String type;

    /*
     * The display name of the resource-type
     */
    @Generated
    private String displayName;

    /*
     * The description of the resource-type
     */
    @Generated
    private String description;

    /*
     * The user-defined labels of the resource-type
     */
    @Generated
    private List<String> labels;

    /*
     * The tags associated with the resource-type
     */
    @Generated
    private Object tags;

    /*
     * The properties of the resource-type
     */
    @Generated
    private Object properties;

    /*
     * The related metadata items for the resource-type
     */
    @Generated
    private MetadataResourceTypeRelated related;

    /**
     * Creates an instance of MetadataResourceType class.
     * 
     * @param id the id value to set.
     * @param type the type value to set.
     */
    @Generated
    public MetadataResourceType(String id, String type) {
        this.id = id;
        this.type = type;
    }

    /**
     * Get the id property: The ID of the resource-type.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the type property: The type of the resource-type.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the displayName property: The display name of the resource-type.
     * 
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the resource-type.
     * 
     * @param displayName the displayName value to set.
     * @return the MetadataResourceType object itself.
     */
    @Generated
    public MetadataResourceType setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: The description of the resource-type.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The description of the resource-type.
     * 
     * @param description the description value to set.
     * @return the MetadataResourceType object itself.
     */
    @Generated
    public MetadataResourceType setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the labels property: The user-defined labels of the resource-type.
     * 
     * @return the labels value.
     */
    @Generated
    public List<String> getLabels() {
        return this.labels;
    }

    /**
     * Set the labels property: The user-defined labels of the resource-type.
     * 
     * @param labels the labels value to set.
     * @return the MetadataResourceType object itself.
     */
    @Generated
    public MetadataResourceType setLabels(List<String> labels) {
        this.labels = labels;
        return this;
    }

    /**
     * Get the tags property: The tags associated with the resource-type.
     * 
     * @return the tags value.
     */
    @Generated
    public Object getTags() {
        return this.tags;
    }

    /**
     * Set the tags property: The tags associated with the resource-type.
     * 
     * @param tags the tags value to set.
     * @return the MetadataResourceType object itself.
     */
    @Generated
    public MetadataResourceType setTags(Object tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the properties property: The properties of the resource-type.
     * 
     * @return the properties value.
     */
    @Generated
    public Object getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: The properties of the resource-type.
     * 
     * @param properties the properties value to set.
     * @return the MetadataResourceType object itself.
     */
    @Generated
    public MetadataResourceType setProperties(Object properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the related property: The related metadata items for the resource-type.
     * 
     * @return the related value.
     */
    @Generated
    public MetadataResourceTypeRelated getRelated() {
        return this.related;
    }

    /**
     * Set the related property: The related metadata items for the resource-type.
     * 
     * @param related the related value to set.
     * @return the MetadataResourceType object itself.
     */
    @Generated
    public MetadataResourceType setRelated(MetadataResourceTypeRelated related) {
        this.related = related;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("labels", this.labels, (writer, element) -> writer.writeString(element));
        if (this.tags != null) {
            jsonWriter.writeUntypedField("tags", this.tags);
        }
        if (this.properties != null) {
            jsonWriter.writeUntypedField("properties", this.properties);
        }
        jsonWriter.writeJsonField("related", this.related);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetadataResourceType from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetadataResourceType if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MetadataResourceType.
     */
    @Generated
    public static MetadataResourceType fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean idFound = false;
            String id = null;
            boolean typeFound = false;
            String type = null;
            String displayName = null;
            String description = null;
            List<String> labels = null;
            Object tags = null;
            Object properties = null;
            MetadataResourceTypeRelated related = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                    idFound = true;
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                    typeFound = true;
                } else if ("displayName".equals(fieldName)) {
                    displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("labels".equals(fieldName)) {
                    labels = reader.readArray(reader1 -> reader1.getString());
                } else if ("tags".equals(fieldName)) {
                    tags = reader.readUntyped();
                } else if ("properties".equals(fieldName)) {
                    properties = reader.readUntyped();
                } else if ("related".equals(fieldName)) {
                    related = MetadataResourceTypeRelated.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            if (idFound && typeFound) {
                MetadataResourceType deserializedMetadataResourceType = new MetadataResourceType(id, type);
                deserializedMetadataResourceType.displayName = displayName;
                deserializedMetadataResourceType.description = description;
                deserializedMetadataResourceType.labels = labels;
                deserializedMetadataResourceType.tags = tags;
                deserializedMetadataResourceType.properties = properties;
                deserializedMetadataResourceType.related = related;

                return deserializedMetadataResourceType;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!idFound) {
                missingProperties.add("id");
            }
            if (!typeFound) {
                missingProperties.add("type");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
