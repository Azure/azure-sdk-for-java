// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.generated;

import com.azure.resourcemanager.monitor.generated.models.ActionGroupAutoGenerated;
import com.azure.resourcemanager.monitor.generated.models.ActionList;
import com.azure.resourcemanager.monitor.generated.models.AlertRuleAllOfCondition;
import com.azure.resourcemanager.monitor.generated.models.AlertRuleAnyOfOrLeafCondition;
import com.azure.resourcemanager.monitor.generated.models.AlertRuleLeafCondition;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for ActivityLogAlerts CreateOrUpdate. */
public final class ActivityLogAlertsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_CreateOrUpdateRuleWithContainsAny.json
     */
    /**
     * Sample code: Create or update an Activity Log Alert rule with 'containsAny'.
     *
     * @param manager Entry point to MonitorManager.
     */
    public static void createOrUpdateAnActivityLogAlertRuleWithContainsAny(
        com.azure.resourcemanager.monitor.generated.MonitorManager manager) {
        manager
            .activityLogAlerts()
            .define("SampleActivityLogAlertRuleWithContainsAny")
            .withRegion("Global")
            .withExistingResourceGroup("MyResourceGroup")
            .withTags(mapOf())
            .withScopes(Arrays.asList("subscriptions/187f412d-1758-44d9-b052-169e2564721d"))
            .withCondition(
                new AlertRuleAllOfCondition()
                    .withAllOf(
                        Arrays
                            .asList(
                                new AlertRuleAnyOfOrLeafCondition().withField("category").withEquals("ServiceHealth"),
                                new AlertRuleAnyOfOrLeafCondition()
                                    .withField("properties.impactedServices[*].ImpactedRegions[*].RegionName")
                                    .withContainsAny(Arrays.asList("North Europe", "West Europe")))))
            .withActions(
                new ActionList()
                    .withActionGroups(
                        Arrays
                            .asList(
                                new ActionGroupAutoGenerated()
                                    .withActionGroupId(
                                        "/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/actionGroups/SampleActionGroup")
                                    .withWebhookProperties(mapOf("sampleWebhookProperty", "SamplePropertyValue")))))
            .withEnabled(true)
            .withDescription("Description of sample Activity Log Alert rule with 'containsAny'.")
            .create();
    }

    /*
     * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_CreateOrUpdateRuleWithAnyOfCondition.json
     */
    /**
     * Sample code: Create or update an Activity Log Alert rule with 'anyOf' condition.
     *
     * @param manager Entry point to MonitorManager.
     */
    public static void createOrUpdateAnActivityLogAlertRuleWithAnyOfCondition(
        com.azure.resourcemanager.monitor.generated.MonitorManager manager) {
        manager
            .activityLogAlerts()
            .define("SampleActivityLogAlertRuleWithAnyOfCondition")
            .withRegion("Global")
            .withExistingResourceGroup("MyResourceGroup")
            .withTags(mapOf())
            .withScopes(Arrays.asList("subscriptions/187f412d-1758-44d9-b052-169e2564721d"))
            .withCondition(
                new AlertRuleAllOfCondition()
                    .withAllOf(
                        Arrays
                            .asList(
                                new AlertRuleAnyOfOrLeafCondition().withField("category").withEquals("ServiceHealth"),
                                new AlertRuleAnyOfOrLeafCondition()
                                    .withAnyOf(
                                        Arrays
                                            .asList(
                                                new AlertRuleLeafCondition()
                                                    .withField("properties.incidentType")
                                                    .withEquals("Incident"),
                                                new AlertRuleLeafCondition()
                                                    .withField("properties.incidentType")
                                                    .withEquals("Maintenance"))))))
            .withActions(
                new ActionList()
                    .withActionGroups(
                        Arrays
                            .asList(
                                new ActionGroupAutoGenerated()
                                    .withActionGroupId(
                                        "/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/actionGroups/SampleActionGroup")
                                    .withWebhookProperties(mapOf("sampleWebhookProperty", "SamplePropertyValue")))))
            .withEnabled(true)
            .withDescription("Description of sample Activity Log Alert rule with 'anyOf' condition.")
            .create();
    }

    /*
     * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2020-10-01/examples/ActivityLogAlertRule_CreateOrUpdate.json
     */
    /**
     * Sample code: Create or update an Activity Log Alert rule.
     *
     * @param manager Entry point to MonitorManager.
     */
    public static void createOrUpdateAnActivityLogAlertRule(
        com.azure.resourcemanager.monitor.generated.MonitorManager manager) {
        manager
            .activityLogAlerts()
            .define("SampleActivityLogAlertRule")
            .withRegion("Global")
            .withExistingResourceGroup("MyResourceGroup")
            .withTags(mapOf())
            .withScopes(Arrays.asList("/subscriptions/187f412d-1758-44d9-b052-169e2564721d"))
            .withCondition(
                new AlertRuleAllOfCondition()
                    .withAllOf(
                        Arrays
                            .asList(
                                new AlertRuleAnyOfOrLeafCondition().withField("category").withEquals("Administrative"),
                                new AlertRuleAnyOfOrLeafCondition().withField("level").withEquals("Error"))))
            .withActions(
                new ActionList()
                    .withActionGroups(
                        Arrays
                            .asList(
                                new ActionGroupAutoGenerated()
                                    .withActionGroupId(
                                        "/subscriptions/187f412d-1758-44d9-b052-169e2564721d/resourceGroups/MyResourceGroup/providers/Microsoft.Insights/actionGroups/SampleActionGroup")
                                    .withWebhookProperties(mapOf("sampleWebhookProperty", "SamplePropertyValue")))))
            .withEnabled(true)
            .withDescription("Description of sample Activity Log Alert rule.")
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
