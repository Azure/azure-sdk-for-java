// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.generated;

import com.azure.resourcemanager.monitor.generated.models.AlertSeverity;
import com.azure.resourcemanager.monitor.generated.models.AlertingAction;
import com.azure.resourcemanager.monitor.generated.models.AzNsActionGroup;
import com.azure.resourcemanager.monitor.generated.models.ConditionalOperator;
import com.azure.resourcemanager.monitor.generated.models.Criteria;
import com.azure.resourcemanager.monitor.generated.models.Enabled;
import com.azure.resourcemanager.monitor.generated.models.LogMetricTrigger;
import com.azure.resourcemanager.monitor.generated.models.LogToMetricAction;
import com.azure.resourcemanager.monitor.generated.models.MetricTriggerType;
import com.azure.resourcemanager.monitor.generated.models.QueryType;
import com.azure.resourcemanager.monitor.generated.models.Schedule;
import com.azure.resourcemanager.monitor.generated.models.Source;
import com.azure.resourcemanager.monitor.generated.models.TriggerCondition;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for ScheduledQueryRules CreateOrUpdate. */
public final class ScheduledQueryRulesCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/createOrUpdateScheduledQueryRule-LogToMetricAction.json
     */
    /**
     * Sample code: Create or Update rule - LogToMetricAction.
     *
     * @param manager Entry point to MonitorManager.
     */
    public static void createOrUpdateRuleLogToMetricAction(
        com.azure.resourcemanager.monitor.generated.MonitorManager manager) {
        manager
            .scheduledQueryRules()
            .define("logtometricfoo")
            .withRegion("West Europe")
            .withExistingResourceGroup("alertsweu")
            .withSource(
                new Source()
                    .withDataSourceId(
                        "/subscriptions/af52d502-a447-4bc6-8cb7-4780fbb00490/resourceGroups/alertsweu/providers/Microsoft.OperationalInsights/workspaces/alertsweu"))
            .withAction(
                new LogToMetricAction()
                    .withCriteria(
                        Arrays
                            .asList(
                                new Criteria().withMetricName("Average_% Idle Time").withDimensions(Arrays.asList()))))
            .withTags(mapOf())
            .withDescription("log to metric description")
            .withEnabled(Enabled.TRUE)
            .create();
    }

    /*
     * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/createOrUpdateScheduledQueryRuleswithCrossResource.json
     */
    /**
     * Sample code: Create or Update rule - AlertingAction with Cross-Resource.
     *
     * @param manager Entry point to MonitorManager.
     */
    public static void createOrUpdateRuleAlertingActionWithCrossResource(
        com.azure.resourcemanager.monitor.generated.MonitorManager manager) {
        manager
            .scheduledQueryRules()
            .define("SampleCrossResourceAlert")
            .withRegion("eastus")
            .withExistingResourceGroup("Rac46PostSwapRG")
            .withSource(
                new Source()
                    .withQuery("union requests, workspace(\"sampleWorkspace\").Update")
                    .withAuthorizedResources(
                        Arrays
                            .asList(
                                "/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.OperationalInsights/workspaces/sampleWorkspace",
                                "/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/components/sampleAI"))
                    .withDataSourceId(
                        "/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/components/sampleAI")
                    .withQueryType(QueryType.RESULT_COUNT))
            .withAction(
                new AlertingAction()
                    .withSeverity(AlertSeverity.THREE)
                    .withAznsAction(
                        new AzNsActionGroup()
                            .withActionGroup(
                                Arrays
                                    .asList(
                                        "/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/microsoft.insights/actiongroups/test-ag"))
                            .withEmailSubject("Cross Resource Mail!!"))
                    .withTrigger(
                        new TriggerCondition()
                            .withThresholdOperator(ConditionalOperator.GREATER_THAN)
                            .withThreshold(5000.0)))
            .withTags(mapOf())
            .withDescription("Sample Cross Resource alert")
            .withEnabled(Enabled.TRUE)
            .withSchedule(new Schedule().withFrequencyInMinutes(60).withTimeWindowInMinutes(60))
            .create();
    }

    /*
     * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2018-04-16/examples/createOrUpdateScheduledQueryRules.json
     */
    /**
     * Sample code: Create or Update rule - AlertingAction.
     *
     * @param manager Entry point to MonitorManager.
     */
    public static void createOrUpdateRuleAlertingAction(
        com.azure.resourcemanager.monitor.generated.MonitorManager manager) {
        manager
            .scheduledQueryRules()
            .define("logalertfoo")
            .withRegion("eastus")
            .withExistingResourceGroup("Rac46PostSwapRG")
            .withSource(
                new Source()
                    .withQuery("Heartbeat | summarize AggregatedValue = count() by bin(TimeGenerated, 5m)")
                    .withDataSourceId(
                        "/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.OperationalInsights/workspaces/sampleWorkspace")
                    .withQueryType(QueryType.RESULT_COUNT))
            .withAction(
                new AlertingAction()
                    .withSeverity(AlertSeverity.ONE)
                    .withAznsAction(
                        new AzNsActionGroup()
                            .withActionGroup(Arrays.asList())
                            .withEmailSubject("Email Header")
                            .withCustomWebhookPayload("{}"))
                    .withTrigger(
                        new TriggerCondition()
                            .withThresholdOperator(ConditionalOperator.GREATER_THAN)
                            .withThreshold(3.0)
                            .withMetricTrigger(
                                new LogMetricTrigger()
                                    .withThresholdOperator(ConditionalOperator.GREATER_THAN)
                                    .withThreshold(5.0)
                                    .withMetricTriggerType(MetricTriggerType.CONSECUTIVE)
                                    .withMetricColumn("Computer"))))
            .withTags(mapOf())
            .withDescription("log alert description")
            .withEnabled(Enabled.TRUE)
            .withSchedule(new Schedule().withFrequencyInMinutes(15).withTimeWindowInMinutes(15))
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
