// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.monitor.generated.fluent.PrivateLinkScopedResourcesClient;
import com.azure.resourcemanager.monitor.generated.fluent.models.ScopedResourceInner;
import com.azure.resourcemanager.monitor.generated.models.PrivateLinkScopedResources;
import com.azure.resourcemanager.monitor.generated.models.ScopedResource;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class PrivateLinkScopedResourcesImpl implements PrivateLinkScopedResources {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(PrivateLinkScopedResourcesImpl.class);

    private final PrivateLinkScopedResourcesClient innerClient;

    private final com.azure.resourcemanager.monitor.generated.MonitorManager serviceManager;

    public PrivateLinkScopedResourcesImpl(
        PrivateLinkScopedResourcesClient innerClient,
        com.azure.resourcemanager.monitor.generated.MonitorManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ScopedResource get(String resourceGroupName, String scopeName, String name) {
        ScopedResourceInner inner = this.serviceClient().get(resourceGroupName, scopeName, name);
        if (inner != null) {
            return new ScopedResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ScopedResource> getWithResponse(
        String resourceGroupName, String scopeName, String name, Context context) {
        Response<ScopedResourceInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, scopeName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ScopedResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String scopeName, String name) {
        this.serviceClient().delete(resourceGroupName, scopeName, name);
    }

    public void delete(String resourceGroupName, String scopeName, String name, Context context) {
        this.serviceClient().delete(resourceGroupName, scopeName, name, context);
    }

    public PagedIterable<ScopedResource> listByPrivateLinkScope(String resourceGroupName, String scopeName) {
        PagedIterable<ScopedResourceInner> inner =
            this.serviceClient().listByPrivateLinkScope(resourceGroupName, scopeName);
        return Utils.mapPage(inner, inner1 -> new ScopedResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ScopedResource> listByPrivateLinkScope(
        String resourceGroupName, String scopeName, Context context) {
        PagedIterable<ScopedResourceInner> inner =
            this.serviceClient().listByPrivateLinkScope(resourceGroupName, scopeName, context);
        return Utils.mapPage(inner, inner1 -> new ScopedResourceImpl(inner1, this.manager()));
    }

    public ScopedResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String scopeName = Utils.getValueFromIdByName(id, "privateLinkScopes");
        if (scopeName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'privateLinkScopes'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "scopedResources");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'scopedResources'.", id)));
        }
        return this.getWithResponse(resourceGroupName, scopeName, name, Context.NONE).getValue();
    }

    public Response<ScopedResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String scopeName = Utils.getValueFromIdByName(id, "privateLinkScopes");
        if (scopeName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'privateLinkScopes'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "scopedResources");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'scopedResources'.", id)));
        }
        return this.getWithResponse(resourceGroupName, scopeName, name, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String scopeName = Utils.getValueFromIdByName(id, "privateLinkScopes");
        if (scopeName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'privateLinkScopes'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "scopedResources");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'scopedResources'.", id)));
        }
        this.delete(resourceGroupName, scopeName, name, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String scopeName = Utils.getValueFromIdByName(id, "privateLinkScopes");
        if (scopeName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'privateLinkScopes'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "scopedResources");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'scopedResources'.", id)));
        }
        this.delete(resourceGroupName, scopeName, name, context);
    }

    private PrivateLinkScopedResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.monitor.generated.MonitorManager manager() {
        return this.serviceManager;
    }

    public ScopedResourceImpl define(String name) {
        return new ScopedResourceImpl(name, this.manager());
    }
}
