// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.monitor.generated.fluent.models.LogProfileResourceInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of LogProfileResource. */
public interface LogProfileResource {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the storageAccountId property: the resource id of the storage account to which you would like to send the
     * Activity Log.
     *
     * @return the storageAccountId value.
     */
    String storageAccountId();

    /**
     * Gets the serviceBusRuleId property: The service bus rule ID of the service bus namespace in which you would like
     * to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource
     * ID}/authorizationrules/{key name}'.
     *
     * @return the serviceBusRuleId value.
     */
    String serviceBusRuleId();

    /**
     * Gets the locations property: List of regions for which Activity Log events should be stored or streamed. It is a
     * comma separated list of valid ARM locations including the 'global' location.
     *
     * @return the locations value.
     */
    List<String> locations();

    /**
     * Gets the categories property: the categories of the logs. These categories are created as is convenient to the
     * user. Some values are: 'Write', 'Delete', and/or 'Action.'.
     *
     * @return the categories value.
     */
    List<String> categories();

    /**
     * Gets the retentionPolicy property: the retention policy for the events in the log.
     *
     * @return the retentionPolicy value.
     */
    RetentionPolicy retentionPolicy();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.monitor.generated.fluent.models.LogProfileResourceInner object.
     *
     * @return the inner object.
     */
    LogProfileResourceInner innerModel();

    /** The entirety of the LogProfileResource definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithLocations,
            DefinitionStages.WithCategories,
            DefinitionStages.WithRetentionPolicy,
            DefinitionStages.WithCreate {
    }
    /** The LogProfileResource definition stages. */
    interface DefinitionStages {
        /** The first stage of the LogProfileResource definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the LogProfileResource definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithLocations withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithLocations withRegion(String location);
        }
        /** The stage of the LogProfileResource definition allowing to specify locations. */
        interface WithLocations {
            /**
             * Specifies the locations property: List of regions for which Activity Log events should be stored or
             * streamed. It is a comma separated list of valid ARM locations including the 'global' location..
             *
             * @param locations List of regions for which Activity Log events should be stored or streamed. It is a
             *     comma separated list of valid ARM locations including the 'global' location.
             * @return the next definition stage.
             */
            WithCategories withLocations(List<String> locations);
        }
        /** The stage of the LogProfileResource definition allowing to specify categories. */
        interface WithCategories {
            /**
             * Specifies the categories property: the categories of the logs. These categories are created as is
             * convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'.
             *
             * @param categories the categories of the logs. These categories are created as is convenient to the user.
             *     Some values are: 'Write', 'Delete', and/or 'Action.'.
             * @return the next definition stage.
             */
            WithRetentionPolicy withCategories(List<String> categories);
        }
        /** The stage of the LogProfileResource definition allowing to specify retentionPolicy. */
        interface WithRetentionPolicy {
            /**
             * Specifies the retentionPolicy property: the retention policy for the events in the log..
             *
             * @param retentionPolicy the retention policy for the events in the log.
             * @return the next definition stage.
             */
            WithCreate withRetentionPolicy(RetentionPolicy retentionPolicy);
        }
        /**
         * The stage of the LogProfileResource definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithStorageAccountId,
                DefinitionStages.WithServiceBusRuleId {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            LogProfileResource create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            LogProfileResource create(Context context);
        }
        /** The stage of the LogProfileResource definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the LogProfileResource definition allowing to specify storageAccountId. */
        interface WithStorageAccountId {
            /**
             * Specifies the storageAccountId property: the resource id of the storage account to which you would like
             * to send the Activity Log..
             *
             * @param storageAccountId the resource id of the storage account to which you would like to send the
             *     Activity Log.
             * @return the next definition stage.
             */
            WithCreate withStorageAccountId(String storageAccountId);
        }
        /** The stage of the LogProfileResource definition allowing to specify serviceBusRuleId. */
        interface WithServiceBusRuleId {
            /**
             * Specifies the serviceBusRuleId property: The service bus rule ID of the service bus namespace in which
             * you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format:
             * '{service bus resource ID}/authorizationrules/{key name}'..
             *
             * @param serviceBusRuleId The service bus rule ID of the service bus namespace in which you would like to
             *     have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus
             *     resource ID}/authorizationrules/{key name}'.
             * @return the next definition stage.
             */
            WithCreate withServiceBusRuleId(String serviceBusRuleId);
        }
    }
    /**
     * Begins update for the LogProfileResource resource.
     *
     * @return the stage of resource update.
     */
    LogProfileResource.Update update();

    /** The template for LogProfileResource update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithStorageAccountId,
            UpdateStages.WithServiceBusRuleId,
            UpdateStages.WithLocations,
            UpdateStages.WithCategories,
            UpdateStages.WithRetentionPolicy {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        LogProfileResource apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        LogProfileResource apply(Context context);
    }
    /** The LogProfileResource update stages. */
    interface UpdateStages {
        /** The stage of the LogProfileResource update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags.
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the LogProfileResource update allowing to specify storageAccountId. */
        interface WithStorageAccountId {
            /**
             * Specifies the storageAccountId property: the resource id of the storage account to which you would like
             * to send the Activity Log..
             *
             * @param storageAccountId the resource id of the storage account to which you would like to send the
             *     Activity Log.
             * @return the next definition stage.
             */
            Update withStorageAccountId(String storageAccountId);
        }
        /** The stage of the LogProfileResource update allowing to specify serviceBusRuleId. */
        interface WithServiceBusRuleId {
            /**
             * Specifies the serviceBusRuleId property: The service bus rule ID of the service bus namespace in which
             * you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format:
             * '{service bus resource ID}/authorizationrules/{key name}'..
             *
             * @param serviceBusRuleId The service bus rule ID of the service bus namespace in which you would like to
             *     have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus
             *     resource ID}/authorizationrules/{key name}'.
             * @return the next definition stage.
             */
            Update withServiceBusRuleId(String serviceBusRuleId);
        }
        /** The stage of the LogProfileResource update allowing to specify locations. */
        interface WithLocations {
            /**
             * Specifies the locations property: List of regions for which Activity Log events should be stored or
             * streamed. It is a comma separated list of valid ARM locations including the 'global' location..
             *
             * @param locations List of regions for which Activity Log events should be stored or streamed. It is a
             *     comma separated list of valid ARM locations including the 'global' location.
             * @return the next definition stage.
             */
            Update withLocations(List<String> locations);
        }
        /** The stage of the LogProfileResource update allowing to specify categories. */
        interface WithCategories {
            /**
             * Specifies the categories property: the categories of the logs. These categories are created as is
             * convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'.
             *
             * @param categories the categories of the logs. These categories are created as is convenient to the user.
             *     Some values are: 'Write', 'Delete', and/or 'Action.'.
             * @return the next definition stage.
             */
            Update withCategories(List<String> categories);
        }
        /** The stage of the LogProfileResource update allowing to specify retentionPolicy. */
        interface WithRetentionPolicy {
            /**
             * Specifies the retentionPolicy property: the retention policy for the events in the log..
             *
             * @param retentionPolicy the retention policy for the events in the log.
             * @return the next definition stage.
             */
            Update withRetentionPolicy(RetentionPolicy retentionPolicy);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    LogProfileResource refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    LogProfileResource refresh(Context context);
}
