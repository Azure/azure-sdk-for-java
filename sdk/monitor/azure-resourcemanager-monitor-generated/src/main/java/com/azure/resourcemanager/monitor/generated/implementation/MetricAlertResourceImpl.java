// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.monitor.generated.MonitorManager;
import com.azure.resourcemanager.monitor.generated.fluent.models.MetricAlertResourceInner;
import com.azure.resourcemanager.monitor.generated.models.MetricAlertAction;
import com.azure.resourcemanager.monitor.generated.models.MetricAlertCriteria;
import com.azure.resourcemanager.monitor.generated.models.MetricAlertResource;
import com.azure.resourcemanager.monitor.generated.models.MetricAlertResourcePatch;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class MetricAlertResourceImpl
    implements MetricAlertResource, MetricAlertResource.Definition, MetricAlertResource.Update {
    private MetricAlertResourceInner innerObject;

    private final MonitorManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String description() {
        return this.innerModel().description();
    }

    public int severity() {
        return this.innerModel().severity();
    }

    public boolean enabled() {
        return this.innerModel().enabled();
    }

    public List<String> scopes() {
        List<String> inner = this.innerModel().scopes();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Duration evaluationFrequency() {
        return this.innerModel().evaluationFrequency();
    }

    public Duration windowSize() {
        return this.innerModel().windowSize();
    }

    public String targetResourceType() {
        return this.innerModel().targetResourceType();
    }

    public String targetResourceRegion() {
        return this.innerModel().targetResourceRegion();
    }

    public MetricAlertCriteria criteria() {
        return this.innerModel().criteria();
    }

    public Boolean autoMitigate() {
        return this.innerModel().autoMitigate();
    }

    public List<MetricAlertAction> actions() {
        List<MetricAlertAction> inner = this.innerModel().actions();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public OffsetDateTime lastUpdatedTime() {
        return this.innerModel().lastUpdatedTime();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public MetricAlertResourceInner innerModel() {
        return this.innerObject;
    }

    private MonitorManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String ruleName;

    private MetricAlertResourcePatch updateParameters;

    public MetricAlertResourceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public MetricAlertResource create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMetricAlerts()
                .createOrUpdateWithResponse(resourceGroupName, ruleName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public MetricAlertResource create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMetricAlerts()
                .createOrUpdateWithResponse(resourceGroupName, ruleName, this.innerModel(), context)
                .getValue();
        return this;
    }

    MetricAlertResourceImpl(String name, MonitorManager serviceManager) {
        this.innerObject = new MetricAlertResourceInner();
        this.serviceManager = serviceManager;
        this.ruleName = name;
    }

    public MetricAlertResourceImpl update() {
        this.updateParameters = new MetricAlertResourcePatch();
        return this;
    }

    public MetricAlertResource apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMetricAlerts()
                .updateWithResponse(resourceGroupName, ruleName, updateParameters, Context.NONE)
                .getValue();
        return this;
    }

    public MetricAlertResource apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMetricAlerts()
                .updateWithResponse(resourceGroupName, ruleName, updateParameters, context)
                .getValue();
        return this;
    }

    MetricAlertResourceImpl(MetricAlertResourceInner innerObject, MonitorManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.ruleName = Utils.getValueFromIdByName(innerObject.id(), "metricAlerts");
    }

    public MetricAlertResource refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMetricAlerts()
                .getByResourceGroupWithResponse(resourceGroupName, ruleName, Context.NONE)
                .getValue();
        return this;
    }

    public MetricAlertResource refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getMetricAlerts()
                .getByResourceGroupWithResponse(resourceGroupName, ruleName, context)
                .getValue();
        return this;
    }

    public MetricAlertResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public MetricAlertResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public MetricAlertResourceImpl withDescription(String description) {
        if (isInCreateMode()) {
            this.innerModel().withDescription(description);
            return this;
        } else {
            this.updateParameters.withDescription(description);
            return this;
        }
    }

    public MetricAlertResourceImpl withSeverity(int severity) {
        this.innerModel().withSeverity(severity);
        return this;
    }

    public MetricAlertResourceImpl withEnabled(boolean enabled) {
        this.innerModel().withEnabled(enabled);
        return this;
    }

    public MetricAlertResourceImpl withEvaluationFrequency(Duration evaluationFrequency) {
        if (isInCreateMode()) {
            this.innerModel().withEvaluationFrequency(evaluationFrequency);
            return this;
        } else {
            this.updateParameters.withEvaluationFrequency(evaluationFrequency);
            return this;
        }
    }

    public MetricAlertResourceImpl withWindowSize(Duration windowSize) {
        if (isInCreateMode()) {
            this.innerModel().withWindowSize(windowSize);
            return this;
        } else {
            this.updateParameters.withWindowSize(windowSize);
            return this;
        }
    }

    public MetricAlertResourceImpl withCriteria(MetricAlertCriteria criteria) {
        if (isInCreateMode()) {
            this.innerModel().withCriteria(criteria);
            return this;
        } else {
            this.updateParameters.withCriteria(criteria);
            return this;
        }
    }

    public MetricAlertResourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public MetricAlertResourceImpl withScopes(List<String> scopes) {
        if (isInCreateMode()) {
            this.innerModel().withScopes(scopes);
            return this;
        } else {
            this.updateParameters.withScopes(scopes);
            return this;
        }
    }

    public MetricAlertResourceImpl withTargetResourceType(String targetResourceType) {
        if (isInCreateMode()) {
            this.innerModel().withTargetResourceType(targetResourceType);
            return this;
        } else {
            this.updateParameters.withTargetResourceType(targetResourceType);
            return this;
        }
    }

    public MetricAlertResourceImpl withTargetResourceRegion(String targetResourceRegion) {
        if (isInCreateMode()) {
            this.innerModel().withTargetResourceRegion(targetResourceRegion);
            return this;
        } else {
            this.updateParameters.withTargetResourceRegion(targetResourceRegion);
            return this;
        }
    }

    public MetricAlertResourceImpl withAutoMitigate(Boolean autoMitigate) {
        if (isInCreateMode()) {
            this.innerModel().withAutoMitigate(autoMitigate);
            return this;
        } else {
            this.updateParameters.withAutoMitigate(autoMitigate);
            return this;
        }
    }

    public MetricAlertResourceImpl withActions(List<MetricAlertAction> actions) {
        if (isInCreateMode()) {
            this.innerModel().withActions(actions);
            return this;
        } else {
            this.updateParameters.withActions(actions);
            return this;
        }
    }

    public MetricAlertResourceImpl withSeverity(Integer severity) {
        this.updateParameters.withSeverity(severity);
        return this;
    }

    public MetricAlertResourceImpl withEnabled(Boolean enabled) {
        this.updateParameters.withEnabled(enabled);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
