// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.monitor.generated.MonitorManager;
import com.azure.resourcemanager.monitor.generated.fluent.MetricsClient;
import com.azure.resourcemanager.monitor.generated.fluent.models.ResponseInner;
import com.azure.resourcemanager.monitor.generated.models.Metrics;
import com.azure.resourcemanager.monitor.generated.models.ResponseModel;
import com.azure.resourcemanager.monitor.generated.models.ResultType;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.time.Duration;

public final class MetricsImpl implements Metrics {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MetricsImpl.class);

    private final MetricsClient innerClient;

    private final MonitorManager serviceManager;

    public MetricsImpl(MetricsClient innerClient, MonitorManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ResponseModel list(String resourceUri) {
        ResponseInner inner = this.serviceClient().list(resourceUri);
        if (inner != null) {
            return new ResponseModelImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ResponseModel> listWithResponse(
        String resourceUri,
        String timespan,
        Duration interval,
        String metricnames,
        String aggregation,
        Integer top,
        String orderby,
        String filter,
        ResultType resultType,
        String metricnamespace,
        Context context) {
        Response<ResponseInner> inner =
            this
                .serviceClient()
                .listWithResponse(
                    resourceUri,
                    timespan,
                    interval,
                    metricnames,
                    aggregation,
                    top,
                    orderby,
                    filter,
                    resultType,
                    metricnamespace,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ResponseModelImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private MetricsClient serviceClient() {
        return this.innerClient;
    }

    private MonitorManager manager() {
        return this.serviceManager;
    }
}
