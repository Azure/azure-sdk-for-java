// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.monitor.generated.fluent.models.LogProfileResourceInner;
import com.azure.resourcemanager.monitor.generated.models.LogProfileResource;
import com.azure.resourcemanager.monitor.generated.models.LogProfileResourcePatch;
import com.azure.resourcemanager.monitor.generated.models.RetentionPolicy;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class LogProfileResourceImpl
    implements LogProfileResource, LogProfileResource.Definition, LogProfileResource.Update {
    private LogProfileResourceInner innerObject;

    private final com.azure.resourcemanager.monitor.generated.MonitorManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String storageAccountId() {
        return this.innerModel().storageAccountId();
    }

    public String serviceBusRuleId() {
        return this.innerModel().serviceBusRuleId();
    }

    public List<String> locations() {
        List<String> inner = this.innerModel().locations();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<String> categories() {
        List<String> inner = this.innerModel().categories();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public RetentionPolicy retentionPolicy() {
        return this.innerModel().retentionPolicy();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public LogProfileResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.monitor.generated.MonitorManager manager() {
        return this.serviceManager;
    }

    private String logProfileName;

    private LogProfileResourcePatch updateLogProfilesResource;

    public LogProfileResource create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLogProfiles()
                .createOrUpdateWithResponse(logProfileName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public LogProfileResource create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLogProfiles()
                .createOrUpdateWithResponse(logProfileName, this.innerModel(), context)
                .getValue();
        return this;
    }

    LogProfileResourceImpl(String name, com.azure.resourcemanager.monitor.generated.MonitorManager serviceManager) {
        this.innerObject = new LogProfileResourceInner();
        this.serviceManager = serviceManager;
        this.logProfileName = name;
    }

    public LogProfileResourceImpl update() {
        this.updateLogProfilesResource = new LogProfileResourcePatch();
        return this;
    }

    public LogProfileResource apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLogProfiles()
                .updateWithResponse(logProfileName, updateLogProfilesResource, Context.NONE)
                .getValue();
        return this;
    }

    public LogProfileResource apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLogProfiles()
                .updateWithResponse(logProfileName, updateLogProfilesResource, context)
                .getValue();
        return this;
    }

    LogProfileResourceImpl(
        LogProfileResourceInner innerObject,
        com.azure.resourcemanager.monitor.generated.MonitorManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.logProfileName = Utils.getValueFromIdByName(innerObject.id(), "logprofiles");
    }

    public LogProfileResource refresh() {
        this.innerObject =
            serviceManager.serviceClient().getLogProfiles().getWithResponse(logProfileName, Context.NONE).getValue();
        return this;
    }

    public LogProfileResource refresh(Context context) {
        this.innerObject =
            serviceManager.serviceClient().getLogProfiles().getWithResponse(logProfileName, context).getValue();
        return this;
    }

    public LogProfileResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public LogProfileResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public LogProfileResourceImpl withLocations(List<String> locations) {
        if (isInCreateMode()) {
            this.innerModel().withLocations(locations);
            return this;
        } else {
            this.updateLogProfilesResource.withLocations(locations);
            return this;
        }
    }

    public LogProfileResourceImpl withCategories(List<String> categories) {
        if (isInCreateMode()) {
            this.innerModel().withCategories(categories);
            return this;
        } else {
            this.updateLogProfilesResource.withCategories(categories);
            return this;
        }
    }

    public LogProfileResourceImpl withRetentionPolicy(RetentionPolicy retentionPolicy) {
        if (isInCreateMode()) {
            this.innerModel().withRetentionPolicy(retentionPolicy);
            return this;
        } else {
            this.updateLogProfilesResource.withRetentionPolicy(retentionPolicy);
            return this;
        }
    }

    public LogProfileResourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateLogProfilesResource.withTags(tags);
            return this;
        }
    }

    public LogProfileResourceImpl withStorageAccountId(String storageAccountId) {
        if (isInCreateMode()) {
            this.innerModel().withStorageAccountId(storageAccountId);
            return this;
        } else {
            this.updateLogProfilesResource.withStorageAccountId(storageAccountId);
            return this;
        }
    }

    public LogProfileResourceImpl withServiceBusRuleId(String serviceBusRuleId) {
        if (isInCreateMode()) {
            this.innerModel().withServiceBusRuleId(serviceBusRuleId);
            return this;
        } else {
            this.updateLogProfilesResource.withServiceBusRuleId(serviceBusRuleId);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
