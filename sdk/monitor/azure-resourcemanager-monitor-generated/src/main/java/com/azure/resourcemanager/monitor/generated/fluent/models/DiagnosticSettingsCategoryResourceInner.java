// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.monitor.generated.models.CategoryType;
import com.azure.resourcemanager.monitor.generated.models.ProxyOnlyResource;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The diagnostic settings category resource. */
@Fluent
public final class DiagnosticSettingsCategoryResourceInner extends ProxyOnlyResource {
    /*
     * The properties of a Diagnostic Settings Category.
     */
    @JsonProperty(value = "properties")
    private DiagnosticSettingsCategory innerProperties;

    /**
     * Get the innerProperties property: The properties of a Diagnostic Settings Category.
     *
     * @return the innerProperties value.
     */
    private DiagnosticSettingsCategory innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the categoryType property: The type of the diagnostic settings category.
     *
     * @return the categoryType value.
     */
    public CategoryType categoryType() {
        return this.innerProperties() == null ? null : this.innerProperties().categoryType();
    }

    /**
     * Set the categoryType property: The type of the diagnostic settings category.
     *
     * @param categoryType the categoryType value to set.
     * @return the DiagnosticSettingsCategoryResourceInner object itself.
     */
    public DiagnosticSettingsCategoryResourceInner withCategoryType(CategoryType categoryType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DiagnosticSettingsCategory();
        }
        this.innerProperties().withCategoryType(categoryType);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
