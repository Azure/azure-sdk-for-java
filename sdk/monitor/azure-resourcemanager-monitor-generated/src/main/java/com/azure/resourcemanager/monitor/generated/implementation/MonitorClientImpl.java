// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.implementation;

import com.azure.core.annotation.ServiceClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.Response;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.management.polling.PollerFactory;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.AsyncPollResponse;
import com.azure.core.util.polling.LongRunningOperationStatus;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.monitor.generated.fluent.ActionGroupsClient;
import com.azure.resourcemanager.monitor.generated.fluent.ActivityLogAlertsClient;
import com.azure.resourcemanager.monitor.generated.fluent.ActivityLogsClient;
import com.azure.resourcemanager.monitor.generated.fluent.AlertRuleIncidentsClient;
import com.azure.resourcemanager.monitor.generated.fluent.AlertRulesClient;
import com.azure.resourcemanager.monitor.generated.fluent.AutoscaleSettingsClient;
import com.azure.resourcemanager.monitor.generated.fluent.BaselinesClient;
import com.azure.resourcemanager.monitor.generated.fluent.DiagnosticSettingsCategoriesClient;
import com.azure.resourcemanager.monitor.generated.fluent.DiagnosticSettingsClient;
import com.azure.resourcemanager.monitor.generated.fluent.EventCategoriesClient;
import com.azure.resourcemanager.monitor.generated.fluent.LogProfilesClient;
import com.azure.resourcemanager.monitor.generated.fluent.MetricAlertsClient;
import com.azure.resourcemanager.monitor.generated.fluent.MetricAlertsStatusClient;
import com.azure.resourcemanager.monitor.generated.fluent.MetricBaselinesClient;
import com.azure.resourcemanager.monitor.generated.fluent.MetricDefinitionsClient;
import com.azure.resourcemanager.monitor.generated.fluent.MetricNamespacesClient;
import com.azure.resourcemanager.monitor.generated.fluent.MetricsClient;
import com.azure.resourcemanager.monitor.generated.fluent.MonitorClient;
import com.azure.resourcemanager.monitor.generated.fluent.OperationsClient;
import com.azure.resourcemanager.monitor.generated.fluent.ScheduledQueryRulesClient;
import com.azure.resourcemanager.monitor.generated.fluent.TenantActivityLogsClient;
import com.azure.resourcemanager.monitor.generated.fluent.VMInsightsClient;
import java.io.IOException;
import java.lang.reflect.Type;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.util.Map;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the MonitorClientImpl type. */
@ServiceClient(builder = MonitorClientBuilder.class)
public final class MonitorClientImpl implements MonitorClient {
    private final ClientLogger logger = new ClientLogger(MonitorClientImpl.class);

    /** The Azure subscription Id. */
    private final String subscriptionId;

    /**
     * Gets The Azure subscription Id.
     *
     * @return the subscriptionId value.
     */
    public String getSubscriptionId() {
        return this.subscriptionId;
    }

    /** server parameter. */
    private final String endpoint;

    /**
     * Gets server parameter.
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /** The default poll interval for long-running operation. */
    private final Duration defaultPollInterval;

    /**
     * Gets The default poll interval for long-running operation.
     *
     * @return the defaultPollInterval value.
     */
    public Duration getDefaultPollInterval() {
        return this.defaultPollInterval;
    }

    /** The AutoscaleSettingsClient object to access its operations. */
    private final AutoscaleSettingsClient autoscaleSettings;

    /**
     * Gets the AutoscaleSettingsClient object to access its operations.
     *
     * @return the AutoscaleSettingsClient object.
     */
    public AutoscaleSettingsClient getAutoscaleSettings() {
        return this.autoscaleSettings;
    }

    /** The OperationsClient object to access its operations. */
    private final OperationsClient operations;

    /**
     * Gets the OperationsClient object to access its operations.
     *
     * @return the OperationsClient object.
     */
    public OperationsClient getOperations() {
        return this.operations;
    }

    /** The AlertRuleIncidentsClient object to access its operations. */
    private final AlertRuleIncidentsClient alertRuleIncidents;

    /**
     * Gets the AlertRuleIncidentsClient object to access its operations.
     *
     * @return the AlertRuleIncidentsClient object.
     */
    public AlertRuleIncidentsClient getAlertRuleIncidents() {
        return this.alertRuleIncidents;
    }

    /** The AlertRulesClient object to access its operations. */
    private final AlertRulesClient alertRules;

    /**
     * Gets the AlertRulesClient object to access its operations.
     *
     * @return the AlertRulesClient object.
     */
    public AlertRulesClient getAlertRules() {
        return this.alertRules;
    }

    /** The LogProfilesClient object to access its operations. */
    private final LogProfilesClient logProfiles;

    /**
     * Gets the LogProfilesClient object to access its operations.
     *
     * @return the LogProfilesClient object.
     */
    public LogProfilesClient getLogProfiles() {
        return this.logProfiles;
    }

    /** The DiagnosticSettingsClient object to access its operations. */
    private final DiagnosticSettingsClient diagnosticSettings;

    /**
     * Gets the DiagnosticSettingsClient object to access its operations.
     *
     * @return the DiagnosticSettingsClient object.
     */
    public DiagnosticSettingsClient getDiagnosticSettings() {
        return this.diagnosticSettings;
    }

    /** The DiagnosticSettingsCategoriesClient object to access its operations. */
    private final DiagnosticSettingsCategoriesClient diagnosticSettingsCategories;

    /**
     * Gets the DiagnosticSettingsCategoriesClient object to access its operations.
     *
     * @return the DiagnosticSettingsCategoriesClient object.
     */
    public DiagnosticSettingsCategoriesClient getDiagnosticSettingsCategories() {
        return this.diagnosticSettingsCategories;
    }

    /** The ActionGroupsClient object to access its operations. */
    private final ActionGroupsClient actionGroups;

    /**
     * Gets the ActionGroupsClient object to access its operations.
     *
     * @return the ActionGroupsClient object.
     */
    public ActionGroupsClient getActionGroups() {
        return this.actionGroups;
    }

    /** The ActivityLogAlertsClient object to access its operations. */
    private final ActivityLogAlertsClient activityLogAlerts;

    /**
     * Gets the ActivityLogAlertsClient object to access its operations.
     *
     * @return the ActivityLogAlertsClient object.
     */
    public ActivityLogAlertsClient getActivityLogAlerts() {
        return this.activityLogAlerts;
    }

    /** The ActivityLogsClient object to access its operations. */
    private final ActivityLogsClient activityLogs;

    /**
     * Gets the ActivityLogsClient object to access its operations.
     *
     * @return the ActivityLogsClient object.
     */
    public ActivityLogsClient getActivityLogs() {
        return this.activityLogs;
    }

    /** The EventCategoriesClient object to access its operations. */
    private final EventCategoriesClient eventCategories;

    /**
     * Gets the EventCategoriesClient object to access its operations.
     *
     * @return the EventCategoriesClient object.
     */
    public EventCategoriesClient getEventCategories() {
        return this.eventCategories;
    }

    /** The TenantActivityLogsClient object to access its operations. */
    private final TenantActivityLogsClient tenantActivityLogs;

    /**
     * Gets the TenantActivityLogsClient object to access its operations.
     *
     * @return the TenantActivityLogsClient object.
     */
    public TenantActivityLogsClient getTenantActivityLogs() {
        return this.tenantActivityLogs;
    }

    /** The MetricDefinitionsClient object to access its operations. */
    private final MetricDefinitionsClient metricDefinitions;

    /**
     * Gets the MetricDefinitionsClient object to access its operations.
     *
     * @return the MetricDefinitionsClient object.
     */
    public MetricDefinitionsClient getMetricDefinitions() {
        return this.metricDefinitions;
    }

    /** The MetricsClient object to access its operations. */
    private final MetricsClient metrics;

    /**
     * Gets the MetricsClient object to access its operations.
     *
     * @return the MetricsClient object.
     */
    public MetricsClient getMetrics() {
        return this.metrics;
    }

    /** The MetricBaselinesClient object to access its operations. */
    private final MetricBaselinesClient metricBaselines;

    /**
     * Gets the MetricBaselinesClient object to access its operations.
     *
     * @return the MetricBaselinesClient object.
     */
    public MetricBaselinesClient getMetricBaselines() {
        return this.metricBaselines;
    }

    /** The BaselinesClient object to access its operations. */
    private final BaselinesClient baselines;

    /**
     * Gets the BaselinesClient object to access its operations.
     *
     * @return the BaselinesClient object.
     */
    public BaselinesClient getBaselines() {
        return this.baselines;
    }

    /** The MetricAlertsClient object to access its operations. */
    private final MetricAlertsClient metricAlerts;

    /**
     * Gets the MetricAlertsClient object to access its operations.
     *
     * @return the MetricAlertsClient object.
     */
    public MetricAlertsClient getMetricAlerts() {
        return this.metricAlerts;
    }

    /** The MetricAlertsStatusClient object to access its operations. */
    private final MetricAlertsStatusClient metricAlertsStatus;

    /**
     * Gets the MetricAlertsStatusClient object to access its operations.
     *
     * @return the MetricAlertsStatusClient object.
     */
    public MetricAlertsStatusClient getMetricAlertsStatus() {
        return this.metricAlertsStatus;
    }

    /** The ScheduledQueryRulesClient object to access its operations. */
    private final ScheduledQueryRulesClient scheduledQueryRules;

    /**
     * Gets the ScheduledQueryRulesClient object to access its operations.
     *
     * @return the ScheduledQueryRulesClient object.
     */
    public ScheduledQueryRulesClient getScheduledQueryRules() {
        return this.scheduledQueryRules;
    }

    /** The MetricNamespacesClient object to access its operations. */
    private final MetricNamespacesClient metricNamespaces;

    /**
     * Gets the MetricNamespacesClient object to access its operations.
     *
     * @return the MetricNamespacesClient object.
     */
    public MetricNamespacesClient getMetricNamespaces() {
        return this.metricNamespaces;
    }

    /** The VMInsightsClient object to access its operations. */
    private final VMInsightsClient vMInsights;

    /**
     * Gets the VMInsightsClient object to access its operations.
     *
     * @return the VMInsightsClient object.
     */
    public VMInsightsClient getVMInsights() {
        return this.vMInsights;
    }

    /**
     * Initializes an instance of MonitorClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param defaultPollInterval The default poll interval for long-running operation.
     * @param environment The Azure environment.
     * @param subscriptionId The Azure subscription Id.
     * @param endpoint server parameter.
     */
    MonitorClientImpl(
        HttpPipeline httpPipeline,
        SerializerAdapter serializerAdapter,
        Duration defaultPollInterval,
        AzureEnvironment environment,
        String subscriptionId,
        String endpoint) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.defaultPollInterval = defaultPollInterval;
        this.subscriptionId = subscriptionId;
        this.endpoint = endpoint;
        this.autoscaleSettings = new AutoscaleSettingsClientImpl(this);
        this.operations = new OperationsClientImpl(this);
        this.alertRuleIncidents = new AlertRuleIncidentsClientImpl(this);
        this.alertRules = new AlertRulesClientImpl(this);
        this.logProfiles = new LogProfilesClientImpl(this);
        this.diagnosticSettings = new DiagnosticSettingsClientImpl(this);
        this.diagnosticSettingsCategories = new DiagnosticSettingsCategoriesClientImpl(this);
        this.actionGroups = new ActionGroupsClientImpl(this);
        this.activityLogAlerts = new ActivityLogAlertsClientImpl(this);
        this.activityLogs = new ActivityLogsClientImpl(this);
        this.eventCategories = new EventCategoriesClientImpl(this);
        this.tenantActivityLogs = new TenantActivityLogsClientImpl(this);
        this.metricDefinitions = new MetricDefinitionsClientImpl(this);
        this.metrics = new MetricsClientImpl(this);
        this.metricBaselines = new MetricBaselinesClientImpl(this);
        this.baselines = new BaselinesClientImpl(this);
        this.metricAlerts = new MetricAlertsClientImpl(this);
        this.metricAlertsStatus = new MetricAlertsStatusClientImpl(this);
        this.scheduledQueryRules = new ScheduledQueryRulesClientImpl(this);
        this.metricNamespaces = new MetricNamespacesClientImpl(this);
        this.vMInsights = new VMInsightsClientImpl(this);
    }

    /**
     * Gets default client context.
     *
     * @return the default client context.
     */
    public Context getContext() {
        return Context.NONE;
    }

    /**
     * Merges default client context with provided context.
     *
     * @param context the context to be merged with default client context.
     * @return the merged context.
     */
    public Context mergeContext(Context context) {
        for (Map.Entry<Object, Object> entry : this.getContext().getValues().entrySet()) {
            context = context.addData(entry.getKey(), entry.getValue());
        }
        return context;
    }

    /**
     * Gets long running operation result.
     *
     * @param activationResponse the response of activation operation.
     * @param httpPipeline the http pipeline.
     * @param pollResultType type of poll result.
     * @param finalResultType type of final result.
     * @param context the context shared by all requests.
     * @param <T> type of poll result.
     * @param <U> type of final result.
     * @return poller flux for poll result and final result.
     */
    public <T, U> PollerFlux<PollResult<T>, U> getLroResult(
        Mono<Response<Flux<ByteBuffer>>> activationResponse,
        HttpPipeline httpPipeline,
        Type pollResultType,
        Type finalResultType,
        Context context) {
        return PollerFactory
            .create(
                serializerAdapter,
                httpPipeline,
                pollResultType,
                finalResultType,
                defaultPollInterval,
                activationResponse,
                context);
    }

    /**
     * Gets the final result, or an error, based on last async poll response.
     *
     * @param response the last async poll response.
     * @param <T> type of poll result.
     * @param <U> type of final result.
     * @return the final result, or an error.
     */
    public <T, U> Mono<U> getLroFinalResultOrError(AsyncPollResponse<PollResult<T>, U> response) {
        if (response.getStatus() != LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {
            String errorMessage;
            ManagementError managementError = null;
            HttpResponse errorResponse = null;
            PollResult.Error lroError = response.getValue().getError();
            if (lroError != null) {
                errorResponse =
                    new HttpResponseImpl(
                        lroError.getResponseStatusCode(), lroError.getResponseHeaders(), lroError.getResponseBody());

                errorMessage = response.getValue().getError().getMessage();
                String errorBody = response.getValue().getError().getResponseBody();
                if (errorBody != null) {
                    // try to deserialize error body to ManagementError
                    try {
                        managementError =
                            this
                                .getSerializerAdapter()
                                .deserialize(errorBody, ManagementError.class, SerializerEncoding.JSON);
                        if (managementError.getCode() == null || managementError.getMessage() == null) {
                            managementError = null;
                        }
                    } catch (IOException ioe) {
                        logger.logThrowableAsWarning(ioe);
                    }
                }
            } else {
                // fallback to default error message
                errorMessage = "Long running operation failed.";
            }
            if (managementError == null) {
                // fallback to default ManagementError
                managementError = new ManagementError(response.getStatus().toString(), errorMessage);
            }
            return Mono.error(new ManagementException(errorMessage, errorResponse, managementError));
        } else {
            return response.getFinalResult();
        }
    }

    private static final class HttpResponseImpl extends HttpResponse {
        private final int statusCode;

        private final byte[] responseBody;

        private final HttpHeaders httpHeaders;

        HttpResponseImpl(int statusCode, HttpHeaders httpHeaders, String responseBody) {
            super(null);
            this.statusCode = statusCode;
            this.httpHeaders = httpHeaders;
            this.responseBody = responseBody.getBytes(StandardCharsets.UTF_8);
        }

        public int getStatusCode() {
            return statusCode;
        }

        public String getHeaderValue(String s) {
            return httpHeaders.getValue(s);
        }

        public HttpHeaders getHeaders() {
            return httpHeaders;
        }

        public Flux<ByteBuffer> getBody() {
            return Flux.just(ByteBuffer.wrap(responseBody));
        }

        public Mono<byte[]> getBodyAsByteArray() {
            return Mono.just(responseBody);
        }

        public Mono<String> getBodyAsString() {
            return Mono.just(new String(responseBody, StandardCharsets.UTF_8));
        }

        public Mono<String> getBodyAsString(Charset charset) {
            return Mono.just(new String(responseBody, charset));
        }
    }
}
