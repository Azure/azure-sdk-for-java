// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.monitor.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.monitor.generated.fluent.DataCollectionRuleAssociationsClient;
import com.azure.resourcemanager.monitor.generated.fluent.models.DataCollectionRuleAssociationProxyOnlyResourceInner;
import com.azure.resourcemanager.monitor.generated.models.DataCollectionRuleAssociationProxyOnlyResource;
import com.azure.resourcemanager.monitor.generated.models.DataCollectionRuleAssociations;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class DataCollectionRuleAssociationsImpl implements DataCollectionRuleAssociations {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DataCollectionRuleAssociationsImpl.class);

    private final DataCollectionRuleAssociationsClient innerClient;

    private final com.azure.resourcemanager.monitor.generated.MonitorManager serviceManager;

    public DataCollectionRuleAssociationsImpl(
        DataCollectionRuleAssociationsClient innerClient,
        com.azure.resourcemanager.monitor.generated.MonitorManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<DataCollectionRuleAssociationProxyOnlyResource> listByResource(String resourceUri) {
        PagedIterable<DataCollectionRuleAssociationProxyOnlyResourceInner> inner =
            this.serviceClient().listByResource(resourceUri);
        return Utils
            .mapPage(inner, inner1 -> new DataCollectionRuleAssociationProxyOnlyResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<DataCollectionRuleAssociationProxyOnlyResource> listByResource(
        String resourceUri, Context context) {
        PagedIterable<DataCollectionRuleAssociationProxyOnlyResourceInner> inner =
            this.serviceClient().listByResource(resourceUri, context);
        return Utils
            .mapPage(inner, inner1 -> new DataCollectionRuleAssociationProxyOnlyResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<DataCollectionRuleAssociationProxyOnlyResource> listByRule(
        String resourceGroupName, String dataCollectionRuleName) {
        PagedIterable<DataCollectionRuleAssociationProxyOnlyResourceInner> inner =
            this.serviceClient().listByRule(resourceGroupName, dataCollectionRuleName);
        return Utils
            .mapPage(inner, inner1 -> new DataCollectionRuleAssociationProxyOnlyResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<DataCollectionRuleAssociationProxyOnlyResource> listByRule(
        String resourceGroupName, String dataCollectionRuleName, Context context) {
        PagedIterable<DataCollectionRuleAssociationProxyOnlyResourceInner> inner =
            this.serviceClient().listByRule(resourceGroupName, dataCollectionRuleName, context);
        return Utils
            .mapPage(inner, inner1 -> new DataCollectionRuleAssociationProxyOnlyResourceImpl(inner1, this.manager()));
    }

    public DataCollectionRuleAssociationProxyOnlyResource get(String resourceUri, String associationName) {
        DataCollectionRuleAssociationProxyOnlyResourceInner inner =
            this.serviceClient().get(resourceUri, associationName);
        if (inner != null) {
            return new DataCollectionRuleAssociationProxyOnlyResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DataCollectionRuleAssociationProxyOnlyResource> getWithResponse(
        String resourceUri, String associationName, Context context) {
        Response<DataCollectionRuleAssociationProxyOnlyResourceInner> inner =
            this.serviceClient().getWithResponse(resourceUri, associationName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DataCollectionRuleAssociationProxyOnlyResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceUri, String associationName) {
        this.serviceClient().delete(resourceUri, associationName);
    }

    public Response<Void> deleteWithResponse(String resourceUri, String associationName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceUri, associationName, context);
    }

    public DataCollectionRuleAssociationProxyOnlyResource getById(String id) {
        String resourceUri =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations/{associationName}",
                    "resourceUri");
        if (resourceUri == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String associationName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations/{associationName}",
                    "associationName");
        if (associationName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'dataCollectionRuleAssociations'.",
                                id)));
        }
        return this.getWithResponse(resourceUri, associationName, Context.NONE).getValue();
    }

    public Response<DataCollectionRuleAssociationProxyOnlyResource> getByIdWithResponse(String id, Context context) {
        String resourceUri =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations/{associationName}",
                    "resourceUri");
        if (resourceUri == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String associationName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations/{associationName}",
                    "associationName");
        if (associationName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'dataCollectionRuleAssociations'.",
                                id)));
        }
        return this.getWithResponse(resourceUri, associationName, context);
    }

    public void deleteById(String id) {
        String resourceUri =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations/{associationName}",
                    "resourceUri");
        if (resourceUri == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String associationName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations/{associationName}",
                    "associationName");
        if (associationName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'dataCollectionRuleAssociations'.",
                                id)));
        }
        this.deleteWithResponse(resourceUri, associationName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceUri =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations/{associationName}",
                    "resourceUri");
        if (resourceUri == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'resourceUri'.", id)));
        }
        String associationName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations/{associationName}",
                    "associationName");
        if (associationName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'dataCollectionRuleAssociations'.",
                                id)));
        }
        return this.deleteWithResponse(resourceUri, associationName, context);
    }

    private DataCollectionRuleAssociationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.monitor.generated.MonitorManager manager() {
        return this.serviceManager;
    }

    public DataCollectionRuleAssociationProxyOnlyResourceImpl define(String name) {
        return new DataCollectionRuleAssociationProxyOnlyResourceImpl(name, this.manager());
    }
}
