// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.logsingestion.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.monitor.logsingestion.implementation.models.ErrorResponseException;
import java.util.List;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in DataCollectionRules. */
public final class DataCollectionRulesImpl {
    /** The proxy service used to perform REST calls. */
    private final DataCollectionRulesService service;

    /** The service client containing this operation class. */
    private final IngestionUsingDataCollectionRulesImpl client;

    /**
     * Initializes an instance of DataCollectionRulesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    DataCollectionRulesImpl(IngestionUsingDataCollectionRulesImpl client) {
        this.service =
                RestProxy.create(
                        DataCollectionRulesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for IngestionUsingDataCollectionRulesDataCollectionRules to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "IngestionUsingDataCo")
    private interface DataCollectionRulesService {
        @Post("/dataCollectionRules/{ruleId}/streams/{stream}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<Response<Void>> ingest(
                @HostParam("endpoint") String endpoint,
                @PathParam("ruleId") String ruleId,
                @PathParam("stream") String stream,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Content-Encoding") String contentEncoding,
                @HeaderParam("x-ms-client-request-id") String xMsClientRequestId,
                @BodyParam("application/json") List<Object> body,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * See error response code and error response message for more detail.
     *
     * @param ruleId The immutable Id of the Data Collection Rule resource.
     * @param stream The streamDeclaration name as defined in the Data Collection Rule.
     * @param body An array of objects matching the schema defined by the provided stream.
     * @param contentEncoding gzip.
     * @param xMsClientRequestId Client request Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> ingestWithResponseAsync(
            String ruleId, String stream, List<Object> body, String contentEncoding, String xMsClientRequestId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                    new IllegalArgumentException(
                            "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (ruleId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ruleId is required and cannot be null."));
        }
        if (stream == null) {
            return Mono.error(new IllegalArgumentException("Parameter stream is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.ingest(
                                this.client.getEndpoint(),
                                ruleId,
                                stream,
                                this.client.getApiVersion(),
                                contentEncoding,
                                xMsClientRequestId,
                                body,
                                accept,
                                context));
    }

    /**
     * See error response code and error response message for more detail.
     *
     * @param ruleId The immutable Id of the Data Collection Rule resource.
     * @param stream The streamDeclaration name as defined in the Data Collection Rule.
     * @param body An array of objects matching the schema defined by the provided stream.
     * @param contentEncoding gzip.
     * @param xMsClientRequestId Client request Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> ingestWithResponseAsync(
            String ruleId,
            String stream,
            List<Object> body,
            String contentEncoding,
            String xMsClientRequestId,
            Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                    new IllegalArgumentException(
                            "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (ruleId == null) {
            return Mono.error(new IllegalArgumentException("Parameter ruleId is required and cannot be null."));
        }
        if (stream == null) {
            return Mono.error(new IllegalArgumentException("Parameter stream is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.ingest(
                this.client.getEndpoint(),
                ruleId,
                stream,
                this.client.getApiVersion(),
                contentEncoding,
                xMsClientRequestId,
                body,
                accept,
                context);
    }

    /**
     * See error response code and error response message for more detail.
     *
     * @param ruleId The immutable Id of the Data Collection Rule resource.
     * @param stream The streamDeclaration name as defined in the Data Collection Rule.
     * @param body An array of objects matching the schema defined by the provided stream.
     * @param contentEncoding gzip.
     * @param xMsClientRequestId Client request Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> ingestAsync(
            String ruleId, String stream, List<Object> body, String contentEncoding, String xMsClientRequestId) {
        return ingestWithResponseAsync(ruleId, stream, body, contentEncoding, xMsClientRequestId)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * See error response code and error response message for more detail.
     *
     * @param ruleId The immutable Id of the Data Collection Rule resource.
     * @param stream The streamDeclaration name as defined in the Data Collection Rule.
     * @param body An array of objects matching the schema defined by the provided stream.
     * @param contentEncoding gzip.
     * @param xMsClientRequestId Client request Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> ingestAsync(
            String ruleId,
            String stream,
            List<Object> body,
            String contentEncoding,
            String xMsClientRequestId,
            Context context) {
        return ingestWithResponseAsync(ruleId, stream, body, contentEncoding, xMsClientRequestId, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * See error response code and error response message for more detail.
     *
     * @param ruleId The immutable Id of the Data Collection Rule resource.
     * @param stream The streamDeclaration name as defined in the Data Collection Rule.
     * @param body An array of objects matching the schema defined by the provided stream.
     * @param contentEncoding gzip.
     * @param xMsClientRequestId Client request Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void ingest(
            String ruleId, String stream, List<Object> body, String contentEncoding, String xMsClientRequestId) {
        ingestAsync(ruleId, stream, body, contentEncoding, xMsClientRequestId).block();
    }

    /**
     * See error response code and error response message for more detail.
     *
     * @param ruleId The immutable Id of the Data Collection Rule resource.
     * @param stream The streamDeclaration name as defined in the Data Collection Rule.
     * @param body An array of objects matching the schema defined by the provided stream.
     * @param contentEncoding gzip.
     * @param xMsClientRequestId Client request Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> ingestWithResponse(
            String ruleId,
            String stream,
            List<Object> body,
            String contentEncoding,
            String xMsClientRequestId,
            Context context) {
        return ingestWithResponseAsync(ruleId, stream, body, contentEncoding, xMsClientRequestId, context).block();
    }
}
