// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.monitor.query.logs.implementation.models;

import com.azure.core.annotation.Generated;
import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * The data type of a column.
 */
public final class ColumnDataType extends ExpandableStringEnum<ColumnDataType> {

    /**
     * Boolean data type.
     */
    @Generated
    public static final ColumnDataType BOOL = fromString("bool");

    /**
     * DateTime data type.
     */
    @Generated
    public static final ColumnDataType DATETIME = fromString("datetime");

    /**
     * Dynamic data type.
     */
    @Generated
    public static final ColumnDataType DYNAMIC = fromString("dynamic");

    /**
     * Integer data type.
     */
    @Generated
    public static final ColumnDataType INT = fromString("int");

    /**
     * Long integer data type.
     */
    @Generated
    public static final ColumnDataType LONG = fromString("long");

    /**
     * Real/floating point data type.
     */
    @Generated
    public static final ColumnDataType REAL = fromString("real");

    /**
     * String data type.
     */
    @Generated
    public static final ColumnDataType STRING = fromString("string");

    /**
     * GUID data type.
     */
    @Generated
    public static final ColumnDataType GUID = fromString("guid");

    /**
     * Decimal data type.
     */
    @Generated
    public static final ColumnDataType DECIMAL = fromString("decimal");

    /**
     * Timespan data type.
     */
    @Generated
    public static final ColumnDataType TIMESPAN = fromString("timespan");

    /**
     * Creates a new instance of ColumnDataType value.
     *
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Generated
    @Deprecated
    public ColumnDataType() {
    }

    /**
     * Creates or finds a ColumnDataType from its string representation.
     *
     * @param name a name to look for.
     * @return the corresponding ColumnDataType.
     */
    @Generated
    public static ColumnDataType fromString(String name) {
        return fromString(name, ColumnDataType.class);
    }

    /**
     * Gets known ColumnDataType values.
     *
     * @return known ColumnDataType values.
     */
    @Generated
    public static Collection<ColumnDataType> values() {
        return values(ColumnDataType.class);
    }
}
