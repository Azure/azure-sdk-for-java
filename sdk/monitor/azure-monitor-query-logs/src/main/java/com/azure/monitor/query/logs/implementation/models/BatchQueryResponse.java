// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.monitor.query.logs.implementation.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Contains the batch query response and the headers, id, and status of the request.
 */
@Immutable
public final class BatchQueryResponse implements JsonSerializable<BatchQueryResponse> {

    /*
     * Unique ID corresponding to each request in the batch.
     */
    @Generated
    private String id;

    /*
     * The HTTP status code of the response.
     */
    @Generated
    private Integer status;

    /*
     * Contains the tables, columns & rows resulting from a query.
     */
    @Generated
    private BatchQueryResults body;

    /*
     * Dictionary of <string>
     */
    @Generated
    private Map<String, String> headers;

    /**
     * Creates an instance of BatchQueryResponse class.
     */
    @Generated
    private BatchQueryResponse() {
    }

    /**
     * Get the id property: Unique ID corresponding to each request in the batch.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the status property: The HTTP status code of the response.
     *
     * @return the status value.
     */
    @Generated
    public Integer getStatus() {
        return this.status;
    }

    /**
     * Get the body property: Contains the tables, columns &amp; rows resulting from a query.
     *
     * @return the body value.
     */
    @Generated
    public BatchQueryResults getBody() {
        return this.body;
    }

    /**
     * Get the headers property: Dictionary of &lt;string&gt;.
     *
     * @return the headers value.
     */
    @Generated
    public Map<String, String> getHeaders() {
        return this.headers;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeNumberField("status", this.status);
        jsonWriter.writeJsonField("body", this.body);
        jsonWriter.writeMapField("headers", this.headers, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchQueryResponse from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchQueryResponse if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchQueryResponse.
     */
    @Generated
    public static BatchQueryResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchQueryResponse deserializedBatchQueryResponse = new BatchQueryResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    deserializedBatchQueryResponse.id = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedBatchQueryResponse.status = reader.getNullable(JsonReader::getInt);
                } else if ("body".equals(fieldName)) {
                    deserializedBatchQueryResponse.body = BatchQueryResults.fromJson(reader);
                } else if ("headers".equals(fieldName)) {
                    Map<String, String> headers = reader.readMap(reader1 -> reader1.getString());
                    deserializedBatchQueryResponse.headers = headers;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedBatchQueryResponse;
        });
    }
}
