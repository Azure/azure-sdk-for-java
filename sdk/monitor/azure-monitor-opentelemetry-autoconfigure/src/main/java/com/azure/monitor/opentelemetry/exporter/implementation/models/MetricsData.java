// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.opentelemetry.exporter.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * An instance of the Metric item is a list of measurements (single data points) and/or aggregations.
 */
@Fluent
public final class MetricsData extends MonitorDomain {
    /*
     * List of metrics. Only one metric in the list is currently supported by Application Insights storage. If multiple data points were sent only the first one will be used.
     */
    private List<MetricDataPoint> metrics;

    /*
     * Collection of custom properties.
     */
    private Map<String, String> properties;

    /**
     * Creates an instance of MetricsData class.
     */
    public MetricsData() {
    }

    /**
     * Get the metrics property: List of metrics. Only one metric in the list is currently supported by Application
     * Insights storage. If multiple data points were sent only the first one will be used.
     *
     * @return the metrics value.
     */
    public List<MetricDataPoint> getMetrics() {
        return this.metrics;
    }

    /**
     * Set the metrics property: List of metrics. Only one metric in the list is currently supported by Application
     * Insights storage. If multiple data points were sent only the first one will be used.
     *
     * @param metrics the metrics value to set.
     * @return the MetricsData object itself.
     */
    public MetricsData setMetrics(List<MetricDataPoint> metrics) {
        this.metrics = metrics;
        return this;
    }

    /**
     * Get the properties property: Collection of custom properties.
     *
     * @return the properties value.
     */
    public Map<String, String> getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: Collection of custom properties.
     *
     * @param properties the properties value to set.
     * @return the MetricsData object itself.
     */
    public MetricsData setProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MetricsData setVersion(int version) {
        super.setVersion(version);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("ver", getVersion());
        jsonWriter.writeArrayField("metrics", this.metrics, JsonWriter::writeJson);
        jsonWriter.writeMapField("properties", this.properties, JsonWriter::writeString);
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricsData from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricsData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MetricsData.
     */
    public static MetricsData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetricsData deserializedMetricsData = new MetricsData();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ver".equals(fieldName)) {
                    deserializedMetricsData.setVersion(reader.getInt());
                } else if ("metrics".equals(fieldName)) {
                    deserializedMetricsData.metrics = reader.readArray(MetricDataPoint::fromJson);
                } else if ("properties".equals(fieldName)) {
                    deserializedMetricsData.properties = reader.readMap(JsonReader::getString);
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedMetricsData.setAdditionalProperties(additionalProperties);

            return deserializedMetricsData;
        });
    }
}
