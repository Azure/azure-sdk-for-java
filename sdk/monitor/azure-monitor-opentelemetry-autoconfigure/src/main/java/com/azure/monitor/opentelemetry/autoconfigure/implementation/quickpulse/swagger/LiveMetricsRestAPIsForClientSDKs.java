// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.opentelemetry.autoconfigure.implementation.quickpulse.swagger;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.ResponseBase;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.monitor.opentelemetry.autoconfigure.implementation.quickpulse.swagger.models.CollectionConfigurationInfo;
import com.azure.monitor.opentelemetry.autoconfigure.implementation.quickpulse.swagger.models.IsSubscribedHeaders;
import com.azure.monitor.opentelemetry.autoconfigure.implementation.quickpulse.swagger.models.MonitoringDataPoint;
import com.azure.monitor.opentelemetry.autoconfigure.implementation.quickpulse.swagger.models.PublishHeaders;
import com.azure.monitor.opentelemetry.autoconfigure.implementation.quickpulse.swagger.models.ServiceErrorException;
import java.util.List;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the LiveMetricsRestAPIsForClientSDKs type.
 */
public final class LiveMetricsRestAPIsForClientSDKs {
    /**
     * The proxy service used to perform REST calls.
     */
    private final LiveMetricsRestAPIsForClientSDKsService service;

    /**
     * Api Version.
     */
    private final String apiVersion;

    /**
     * Gets Api Version.
     * 
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of LiveMetricsRestAPIsForClientSDKs client.
     * 
     * @param apiVersion Api Version.
     */
    LiveMetricsRestAPIsForClientSDKs(String apiVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), apiVersion);
    }

    /**
     * Initializes an instance of LiveMetricsRestAPIsForClientSDKs client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param apiVersion Api Version.
     */
    LiveMetricsRestAPIsForClientSDKs(HttpPipeline httpPipeline, String apiVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), apiVersion);
    }

    /**
     * Initializes an instance of LiveMetricsRestAPIsForClientSDKs client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param apiVersion Api Version.
     */
    LiveMetricsRestAPIsForClientSDKs(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter,
        String apiVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.apiVersion = apiVersion;
        this.service = RestProxy.create(LiveMetricsRestAPIsForClientSDKsService.class, this.httpPipeline,
            this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for LiveMetricsRestAPIsForClientSDKs to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "LiveMetricsRestAPIsF")
    public interface LiveMetricsRestAPIsForClientSDKsService {
        @Post("/QuickPulseService.svc/ping")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ServiceErrorException.class)
        Mono<ResponseBase<IsSubscribedHeaders, CollectionConfigurationInfo>> isSubscribed(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @QueryParam("ikey") String ikey, @HeaderParam("x-ms-qps-transmission-time") Long transmissionTime,
            @HeaderParam("x-ms-qps-machine-name") String machineName,
            @HeaderParam("x-ms-qps-instance-name") String instanceName,
            @HeaderParam("x-ms-qps-stream-id") String streamId, @HeaderParam("x-ms-qps-role-name") String roleName,
            @HeaderParam("x-ms-qps-invariant-version") String invariantVersion,
            @HeaderParam("x-ms-qps-configuration-etag") String configurationEtag,
            @BodyParam("application/json") MonitoringDataPoint monitoringDataPoint,
            @HeaderParam("Accept") String accept, Context context);

        @Post("/QuickPulseService.svc/ping")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ServiceErrorException.class)
        Mono<Response<CollectionConfigurationInfo>> isSubscribedNoCustomHeaders(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("ikey") String ikey,
            @HeaderParam("x-ms-qps-transmission-time") Long transmissionTime,
            @HeaderParam("x-ms-qps-machine-name") String machineName,
            @HeaderParam("x-ms-qps-instance-name") String instanceName,
            @HeaderParam("x-ms-qps-stream-id") String streamId, @HeaderParam("x-ms-qps-role-name") String roleName,
            @HeaderParam("x-ms-qps-invariant-version") String invariantVersion,
            @HeaderParam("x-ms-qps-configuration-etag") String configurationEtag,
            @BodyParam("application/json") MonitoringDataPoint monitoringDataPoint,
            @HeaderParam("Accept") String accept, Context context);

        @Post("/QuickPulseService.svc/post")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ServiceErrorException.class)
        Mono<ResponseBase<PublishHeaders, CollectionConfigurationInfo>> publish(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("ikey") String ikey,
            @HeaderParam("x-ms-qps-configuration-etag") String configurationEtag,
            @HeaderParam("x-ms-qps-transmission-time") Long transmissionTime,
            @BodyParam("application/json") List<MonitoringDataPoint> monitoringDataPoints,
            @HeaderParam("Accept") String accept, Context context);

        @Post("/QuickPulseService.svc/post")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ServiceErrorException.class)
        Mono<Response<CollectionConfigurationInfo>> publishNoCustomHeaders(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @QueryParam("ikey") String ikey,
            @HeaderParam("x-ms-qps-configuration-etag") String configurationEtag,
            @HeaderParam("x-ms-qps-transmission-time") Long transmissionTime,
            @BodyParam("application/json") List<MonitoringDataPoint> monitoringDataPoints,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Determine whether there is any subscription to the metrics and documents.
     * 
     * @param endpoint The endpoint of the Live Metrics service.
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @param transmissionTime Timestamp when the client transmits the metrics and documents to Live Metrics. A 8-byte
     * long type of ticks.
     * @param machineName Computer name where Application Insights SDK lives. Live Metrics uses machine name with
     * instance name as a backup.
     * @param instanceName Service instance name where Application Insights SDK lives. Live Metrics uses machine name
     * with instance name as a backup.
     * @param streamId Identifies an Application Insights SDK as trusted agent to report metrics and documents.
     * @param roleName Cloud role name of the service.
     * @param invariantVersion Version/generation of the data contract (MonitoringDataPoint) between the client and Live
     * Metrics.
     * @param configurationEtag An encoded string that indicates whether the collection configuration is changed.
     * @param monitoringDataPoint Data contract between Application Insights client SDK and Live Metrics.
     * /QuickPulseService.svc/ping uses this as a backup source of machine name, instance name and invariant version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ServiceErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK along with {@link ResponseBase} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<IsSubscribedHeaders, CollectionConfigurationInfo>> isSubscribedWithResponseAsync(
        String endpoint, String ikey, Long transmissionTime, String machineName, String instanceName, String streamId,
        String roleName, String invariantVersion, String configurationEtag, MonitoringDataPoint monitoringDataPoint) {
        return FluxUtil
            .withContext(context -> isSubscribedWithResponseAsync(endpoint, ikey, transmissionTime, machineName,
                instanceName, streamId, roleName, invariantVersion, configurationEtag, monitoringDataPoint, context));
    }

    /**
     * Determine whether there is any subscription to the metrics and documents.
     * 
     * @param endpoint The endpoint of the Live Metrics service.
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @param transmissionTime Timestamp when the client transmits the metrics and documents to Live Metrics. A 8-byte
     * long type of ticks.
     * @param machineName Computer name where Application Insights SDK lives. Live Metrics uses machine name with
     * instance name as a backup.
     * @param instanceName Service instance name where Application Insights SDK lives. Live Metrics uses machine name
     * with instance name as a backup.
     * @param streamId Identifies an Application Insights SDK as trusted agent to report metrics and documents.
     * @param roleName Cloud role name of the service.
     * @param invariantVersion Version/generation of the data contract (MonitoringDataPoint) between the client and Live
     * Metrics.
     * @param configurationEtag An encoded string that indicates whether the collection configuration is changed.
     * @param monitoringDataPoint Data contract between Application Insights client SDK and Live Metrics.
     * /QuickPulseService.svc/ping uses this as a backup source of machine name, instance name and invariant version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ServiceErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK along with {@link ResponseBase} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<IsSubscribedHeaders, CollectionConfigurationInfo>> isSubscribedWithResponseAsync(
        String endpoint, String ikey, Long transmissionTime, String machineName, String instanceName, String streamId,
        String roleName, String invariantVersion, String configurationEtag, MonitoringDataPoint monitoringDataPoint,
        Context context) {
        final String accept = "application/json";
        return service.isSubscribed(endpoint, this.getApiVersion(), ikey, transmissionTime, machineName, instanceName,
            streamId, roleName, invariantVersion, configurationEtag, monitoringDataPoint, accept, context);
    }

    /**
     * Determine whether there is any subscription to the metrics and documents.
     * 
     * @param endpoint The endpoint of the Live Metrics service.
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @param transmissionTime Timestamp when the client transmits the metrics and documents to Live Metrics. A 8-byte
     * long type of ticks.
     * @param machineName Computer name where Application Insights SDK lives. Live Metrics uses machine name with
     * instance name as a backup.
     * @param instanceName Service instance name where Application Insights SDK lives. Live Metrics uses machine name
     * with instance name as a backup.
     * @param streamId Identifies an Application Insights SDK as trusted agent to report metrics and documents.
     * @param roleName Cloud role name of the service.
     * @param invariantVersion Version/generation of the data contract (MonitoringDataPoint) between the client and Live
     * Metrics.
     * @param configurationEtag An encoded string that indicates whether the collection configuration is changed.
     * @param monitoringDataPoint Data contract between Application Insights client SDK and Live Metrics.
     * /QuickPulseService.svc/ping uses this as a backup source of machine name, instance name and invariant version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ServiceErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CollectionConfigurationInfo> isSubscribedAsync(String endpoint, String ikey, Long transmissionTime,
        String machineName, String instanceName, String streamId, String roleName, String invariantVersion,
        String configurationEtag, MonitoringDataPoint monitoringDataPoint) {
        return isSubscribedWithResponseAsync(endpoint, ikey, transmissionTime, machineName, instanceName, streamId,
            roleName, invariantVersion, configurationEtag, monitoringDataPoint)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Determine whether there is any subscription to the metrics and documents.
     * 
     * @param endpoint The endpoint of the Live Metrics service.
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @param transmissionTime Timestamp when the client transmits the metrics and documents to Live Metrics. A 8-byte
     * long type of ticks.
     * @param machineName Computer name where Application Insights SDK lives. Live Metrics uses machine name with
     * instance name as a backup.
     * @param instanceName Service instance name where Application Insights SDK lives. Live Metrics uses machine name
     * with instance name as a backup.
     * @param streamId Identifies an Application Insights SDK as trusted agent to report metrics and documents.
     * @param roleName Cloud role name of the service.
     * @param invariantVersion Version/generation of the data contract (MonitoringDataPoint) between the client and Live
     * Metrics.
     * @param configurationEtag An encoded string that indicates whether the collection configuration is changed.
     * @param monitoringDataPoint Data contract between Application Insights client SDK and Live Metrics.
     * /QuickPulseService.svc/ping uses this as a backup source of machine name, instance name and invariant version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ServiceErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CollectionConfigurationInfo> isSubscribedAsync(String endpoint, String ikey, Long transmissionTime,
        String machineName, String instanceName, String streamId, String roleName, String invariantVersion,
        String configurationEtag, MonitoringDataPoint monitoringDataPoint, Context context) {
        return isSubscribedWithResponseAsync(endpoint, ikey, transmissionTime, machineName, instanceName, streamId,
            roleName, invariantVersion, configurationEtag, monitoringDataPoint, context)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Determine whether there is any subscription to the metrics and documents.
     * 
     * @param endpoint The endpoint of the Live Metrics service.
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @param transmissionTime Timestamp when the client transmits the metrics and documents to Live Metrics. A 8-byte
     * long type of ticks.
     * @param machineName Computer name where Application Insights SDK lives. Live Metrics uses machine name with
     * instance name as a backup.
     * @param instanceName Service instance name where Application Insights SDK lives. Live Metrics uses machine name
     * with instance name as a backup.
     * @param streamId Identifies an Application Insights SDK as trusted agent to report metrics and documents.
     * @param roleName Cloud role name of the service.
     * @param invariantVersion Version/generation of the data contract (MonitoringDataPoint) between the client and Live
     * Metrics.
     * @param configurationEtag An encoded string that indicates whether the collection configuration is changed.
     * @param monitoringDataPoint Data contract between Application Insights client SDK and Live Metrics.
     * /QuickPulseService.svc/ping uses this as a backup source of machine name, instance name and invariant version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ServiceErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CollectionConfigurationInfo>> isSubscribedNoCustomHeadersWithResponseAsync(String endpoint,
        String ikey, Long transmissionTime, String machineName, String instanceName, String streamId, String roleName,
        String invariantVersion, String configurationEtag, MonitoringDataPoint monitoringDataPoint) {
        return FluxUtil.withContext(
            context -> isSubscribedNoCustomHeadersWithResponseAsync(endpoint, ikey, transmissionTime, machineName,
                instanceName, streamId, roleName, invariantVersion, configurationEtag, monitoringDataPoint, context));
    }

    /**
     * Determine whether there is any subscription to the metrics and documents.
     * 
     * @param endpoint The endpoint of the Live Metrics service.
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @param transmissionTime Timestamp when the client transmits the metrics and documents to Live Metrics. A 8-byte
     * long type of ticks.
     * @param machineName Computer name where Application Insights SDK lives. Live Metrics uses machine name with
     * instance name as a backup.
     * @param instanceName Service instance name where Application Insights SDK lives. Live Metrics uses machine name
     * with instance name as a backup.
     * @param streamId Identifies an Application Insights SDK as trusted agent to report metrics and documents.
     * @param roleName Cloud role name of the service.
     * @param invariantVersion Version/generation of the data contract (MonitoringDataPoint) between the client and Live
     * Metrics.
     * @param configurationEtag An encoded string that indicates whether the collection configuration is changed.
     * @param monitoringDataPoint Data contract between Application Insights client SDK and Live Metrics.
     * /QuickPulseService.svc/ping uses this as a backup source of machine name, instance name and invariant version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ServiceErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CollectionConfigurationInfo>> isSubscribedNoCustomHeadersWithResponseAsync(String endpoint,
        String ikey, Long transmissionTime, String machineName, String instanceName, String streamId, String roleName,
        String invariantVersion, String configurationEtag, MonitoringDataPoint monitoringDataPoint, Context context) {
        final String accept = "application/json";
        return service.isSubscribedNoCustomHeaders(endpoint, this.getApiVersion(), ikey, transmissionTime, machineName,
            instanceName, streamId, roleName, invariantVersion, configurationEtag, monitoringDataPoint, accept,
            context);
    }

    /**
     * Publish live metrics to the Live Metrics service when there is an active subscription to the metrics.
     * 
     * @param endpoint The endpoint of the Live Metrics service.
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @param configurationEtag An encoded string that indicates whether the collection configuration is changed.
     * @param transmissionTime Timestamp when the client transmits the metrics and documents to Live Metrics. A 8-byte
     * long type of ticks.
     * @param monitoringDataPoints Data contract between the client and Live Metrics. /QuickPulseService.svc/ping uses
     * this as a backup source of machine name, instance name and invariant version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ServiceErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK along with {@link ResponseBase} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<PublishHeaders, CollectionConfigurationInfo>> publishWithResponseAsync(String endpoint,
        String ikey, String configurationEtag, Long transmissionTime, List<MonitoringDataPoint> monitoringDataPoints) {
        return FluxUtil.withContext(context -> publishWithResponseAsync(endpoint, ikey, configurationEtag,
            transmissionTime, monitoringDataPoints, context));
    }

    /**
     * Publish live metrics to the Live Metrics service when there is an active subscription to the metrics.
     * 
     * @param endpoint The endpoint of the Live Metrics service.
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @param configurationEtag An encoded string that indicates whether the collection configuration is changed.
     * @param transmissionTime Timestamp when the client transmits the metrics and documents to Live Metrics. A 8-byte
     * long type of ticks.
     * @param monitoringDataPoints Data contract between the client and Live Metrics. /QuickPulseService.svc/ping uses
     * this as a backup source of machine name, instance name and invariant version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ServiceErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK along with {@link ResponseBase} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<PublishHeaders, CollectionConfigurationInfo>> publishWithResponseAsync(String endpoint,
        String ikey, String configurationEtag, Long transmissionTime, List<MonitoringDataPoint> monitoringDataPoints,
        Context context) {
        final String accept = "application/json";
        return service.publish(endpoint, this.getApiVersion(), ikey, configurationEtag, transmissionTime,
            monitoringDataPoints, accept, context);
    }

    /**
     * Publish live metrics to the Live Metrics service when there is an active subscription to the metrics.
     * 
     * @param endpoint The endpoint of the Live Metrics service.
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @param configurationEtag An encoded string that indicates whether the collection configuration is changed.
     * @param transmissionTime Timestamp when the client transmits the metrics and documents to Live Metrics. A 8-byte
     * long type of ticks.
     * @param monitoringDataPoints Data contract between the client and Live Metrics. /QuickPulseService.svc/ping uses
     * this as a backup source of machine name, instance name and invariant version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ServiceErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CollectionConfigurationInfo> publishAsync(String endpoint, String ikey, String configurationEtag,
        Long transmissionTime, List<MonitoringDataPoint> monitoringDataPoints) {
        return publishWithResponseAsync(endpoint, ikey, configurationEtag, transmissionTime, monitoringDataPoints)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Publish live metrics to the Live Metrics service when there is an active subscription to the metrics.
     * 
     * @param endpoint The endpoint of the Live Metrics service.
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @param configurationEtag An encoded string that indicates whether the collection configuration is changed.
     * @param transmissionTime Timestamp when the client transmits the metrics and documents to Live Metrics. A 8-byte
     * long type of ticks.
     * @param monitoringDataPoints Data contract between the client and Live Metrics. /QuickPulseService.svc/ping uses
     * this as a backup source of machine name, instance name and invariant version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ServiceErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CollectionConfigurationInfo> publishAsync(String endpoint, String ikey, String configurationEtag,
        Long transmissionTime, List<MonitoringDataPoint> monitoringDataPoints, Context context) {
        return publishWithResponseAsync(endpoint, ikey, configurationEtag, transmissionTime, monitoringDataPoints,
            context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Publish live metrics to the Live Metrics service when there is an active subscription to the metrics.
     * 
     * @param endpoint The endpoint of the Live Metrics service.
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @param configurationEtag An encoded string that indicates whether the collection configuration is changed.
     * @param transmissionTime Timestamp when the client transmits the metrics and documents to Live Metrics. A 8-byte
     * long type of ticks.
     * @param monitoringDataPoints Data contract between the client and Live Metrics. /QuickPulseService.svc/ping uses
     * this as a backup source of machine name, instance name and invariant version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ServiceErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CollectionConfigurationInfo>> publishNoCustomHeadersWithResponseAsync(String endpoint,
        String ikey, String configurationEtag, Long transmissionTime, List<MonitoringDataPoint> monitoringDataPoints) {
        return FluxUtil.withContext(context -> publishNoCustomHeadersWithResponseAsync(endpoint, ikey,
            configurationEtag, transmissionTime, monitoringDataPoints, context));
    }

    /**
     * Publish live metrics to the Live Metrics service when there is an active subscription to the metrics.
     * 
     * @param endpoint The endpoint of the Live Metrics service.
     * @param ikey The instrumentation key of the target Application Insights component for which the client checks
     * whether there's any subscription to it.
     * @param configurationEtag An encoded string that indicates whether the collection configuration is changed.
     * @param transmissionTime Timestamp when the client transmits the metrics and documents to Live Metrics. A 8-byte
     * long type of ticks.
     * @param monitoringDataPoints Data contract between the client and Live Metrics. /QuickPulseService.svc/ping uses
     * this as a backup source of machine name, instance name and invariant version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ServiceErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents the collection configuration - a customizable description of performance counters, metrics,
     * and full telemetry documents to be collected by the client SDK along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CollectionConfigurationInfo>> publishNoCustomHeadersWithResponseAsync(String endpoint,
        String ikey, String configurationEtag, Long transmissionTime, List<MonitoringDataPoint> monitoringDataPoints,
        Context context) {
        final String accept = "application/json";
        return service.publishNoCustomHeaders(endpoint, this.getApiVersion(), ikey, configurationEtag, transmissionTime,
            monitoringDataPoints, accept, context);
    }
}
