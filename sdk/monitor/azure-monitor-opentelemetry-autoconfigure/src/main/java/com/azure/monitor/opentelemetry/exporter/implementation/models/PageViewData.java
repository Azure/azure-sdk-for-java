// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.opentelemetry.exporter.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * An instance of PageView represents a generic action on a page like a button click. It is also the base type for
 * PageView.
 */
@Fluent
public final class PageViewData extends MonitorDomain {
    /*
     * Identifier of a page view instance. Used for correlation between page view and other telemetry items.
     */
    private String id;

    /*
     * Event name. Keep it low cardinality to allow proper grouping and useful metrics.
     */
    private String name;

    /*
     * Request URL with all query string parameters
     */
    private String url;

    /*
     * Request duration in format: DD.HH:MM:SS.MMMMMM. For a page view (PageViewData), this is the duration. For a page view with performance information (PageViewPerfData), this is the page load time. Must be less than 1000 days.
     */
    private String duration;

    /*
     * Fully qualified page URI or URL of the referring page; if unknown, leave blank
     */
    private String referredUri;

    /*
     * Collection of custom properties.
     */
    private Map<String, String> properties;

    /*
     * Collection of custom measurements.
     */
    private Map<String, Double> measurements;

    /**
     * Creates an instance of PageViewData class.
     */
    public PageViewData() {
    }

    /**
     * Get the id property: Identifier of a page view instance. Used for correlation between page view and other
     * telemetry items.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: Identifier of a page view instance. Used for correlation between page view and other
     * telemetry items.
     *
     * @param id the id value to set.
     * @return the PageViewData object itself.
     */
    public PageViewData setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Event name. Keep it low cardinality to allow proper grouping and useful metrics.
     *
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Event name. Keep it low cardinality to allow proper grouping and useful metrics.
     *
     * @param name the name value to set.
     * @return the PageViewData object itself.
     */
    public PageViewData setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the url property: Request URL with all query string parameters.
     *
     * @return the url value.
     */
    public String getUrl() {
        return this.url;
    }

    /**
     * Set the url property: Request URL with all query string parameters.
     *
     * @param url the url value to set.
     * @return the PageViewData object itself.
     */
    public PageViewData setUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Get the duration property: Request duration in format: DD.HH:MM:SS.MMMMMM. For a page view (PageViewData), this
     * is the duration. For a page view with performance information (PageViewPerfData), this is the page load time.
     * Must be less than 1000 days.
     *
     * @return the duration value.
     */
    public String getDuration() {
        return this.duration;
    }

    /**
     * Set the duration property: Request duration in format: DD.HH:MM:SS.MMMMMM. For a page view (PageViewData), this
     * is the duration. For a page view with performance information (PageViewPerfData), this is the page load time.
     * Must be less than 1000 days.
     *
     * @param duration the duration value to set.
     * @return the PageViewData object itself.
     */
    public PageViewData setDuration(String duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get the referredUri property: Fully qualified page URI or URL of the referring page; if unknown, leave blank.
     *
     * @return the referredUri value.
     */
    public String getReferredUri() {
        return this.referredUri;
    }

    /**
     * Set the referredUri property: Fully qualified page URI or URL of the referring page; if unknown, leave blank.
     *
     * @param referredUri the referredUri value to set.
     * @return the PageViewData object itself.
     */
    public PageViewData setReferredUri(String referredUri) {
        this.referredUri = referredUri;
        return this;
    }

    /**
     * Get the properties property: Collection of custom properties.
     *
     * @return the properties value.
     */
    public Map<String, String> getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: Collection of custom properties.
     *
     * @param properties the properties value to set.
     * @return the PageViewData object itself.
     */
    public PageViewData setProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the measurements property: Collection of custom measurements.
     *
     * @return the measurements value.
     */
    public Map<String, Double> getMeasurements() {
        return this.measurements;
    }

    /**
     * Set the measurements property: Collection of custom measurements.
     *
     * @param measurements the measurements value to set.
     * @return the PageViewData object itself.
     */
    public PageViewData setMeasurements(Map<String, Double> measurements) {
        this.measurements = measurements;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PageViewData setVersion(int version) {
        super.setVersion(version);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("ver", getVersion());
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("duration", this.duration);
        jsonWriter.writeStringField("referredUri", this.referredUri);
        jsonWriter.writeMapField("properties", this.properties, JsonWriter::writeString);
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PageViewData from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of PageViewData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PageViewData.
     */
    public static PageViewData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PageViewData deserializedPageViewData = new PageViewData();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ver".equals(fieldName)) {
                    deserializedPageViewData.setVersion(reader.getInt());
                } else if ("id".equals(fieldName)) {
                    deserializedPageViewData.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedPageViewData.name = reader.getString();
                } else if ("url".equals(fieldName)) {
                    deserializedPageViewData.url = reader.getString();
                } else if ("duration".equals(fieldName)) {
                    deserializedPageViewData.duration = reader.getString();
                } else if ("referredUri".equals(fieldName)) {
                    deserializedPageViewData.referredUri = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedPageViewData.properties = reader.readMap(JsonReader::getString);
                } else if ("measurements".equals(fieldName)) {
                    deserializedPageViewData.measurements = reader.readMap(JsonReader::getDouble);
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedPageViewData.setAdditionalProperties(additionalProperties);

            return deserializedPageViewData;
        });
    }
}
