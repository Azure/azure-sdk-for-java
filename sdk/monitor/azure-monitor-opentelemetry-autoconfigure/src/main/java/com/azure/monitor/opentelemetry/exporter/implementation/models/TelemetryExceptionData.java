// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.opentelemetry.exporter.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * An instance of Exception represents a handled or unhandled exception that occurred during execution of the monitored
 * application.
 */
@Fluent
public final class TelemetryExceptionData extends MonitorDomain {
    /*
     * Exception chain - list of inner exceptions.
     */
    private List<TelemetryExceptionDetails> exceptions;

    /*
     * Severity level. Mostly used to indicate exception severity level when it is reported by logging library.
     */
    private SeverityLevel severityLevel;

    /*
     * Identifier of where the exception was thrown in code. Used for exceptions grouping. Typically a combination of exception type and a function from the call stack.
     */
    private String problemId;

    /*
     * Collection of custom properties.
     */
    private Map<String, String> properties;

    /*
     * Collection of custom measurements.
     */
    private Map<String, Double> measurements;

    /**
     * Creates an instance of TelemetryExceptionData class.
     */
    public TelemetryExceptionData() {
    }

    /**
     * Get the exceptions property: Exception chain - list of inner exceptions.
     *
     * @return the exceptions value.
     */
    public List<TelemetryExceptionDetails> getExceptions() {
        return this.exceptions;
    }

    /**
     * Set the exceptions property: Exception chain - list of inner exceptions.
     *
     * @param exceptions the exceptions value to set.
     * @return the TelemetryExceptionData object itself.
     */
    public TelemetryExceptionData setExceptions(List<TelemetryExceptionDetails> exceptions) {
        this.exceptions = exceptions;
        return this;
    }

    /**
     * Get the severityLevel property: Severity level. Mostly used to indicate exception severity level when it is
     * reported by logging library.
     *
     * @return the severityLevel value.
     */
    public SeverityLevel getSeverityLevel() {
        return this.severityLevel;
    }

    /**
     * Set the severityLevel property: Severity level. Mostly used to indicate exception severity level when it is
     * reported by logging library.
     *
     * @param severityLevel the severityLevel value to set.
     * @return the TelemetryExceptionData object itself.
     */
    public TelemetryExceptionData setSeverityLevel(SeverityLevel severityLevel) {
        this.severityLevel = severityLevel;
        return this;
    }

    /**
     * Get the problemId property: Identifier of where the exception was thrown in code. Used for exceptions grouping.
     * Typically a combination of exception type and a function from the call stack.
     *
     * @return the problemId value.
     */
    public String getProblemId() {
        return this.problemId;
    }

    /**
     * Set the problemId property: Identifier of where the exception was thrown in code. Used for exceptions grouping.
     * Typically a combination of exception type and a function from the call stack.
     *
     * @param problemId the problemId value to set.
     * @return the TelemetryExceptionData object itself.
     */
    public TelemetryExceptionData setProblemId(String problemId) {
        this.problemId = problemId;
        return this;
    }

    /**
     * Get the properties property: Collection of custom properties.
     *
     * @return the properties value.
     */
    public Map<String, String> getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: Collection of custom properties.
     *
     * @param properties the properties value to set.
     * @return the TelemetryExceptionData object itself.
     */
    public TelemetryExceptionData setProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the measurements property: Collection of custom measurements.
     *
     * @return the measurements value.
     */
    public Map<String, Double> getMeasurements() {
        return this.measurements;
    }

    /**
     * Set the measurements property: Collection of custom measurements.
     *
     * @param measurements the measurements value to set.
     * @return the TelemetryExceptionData object itself.
     */
    public TelemetryExceptionData setMeasurements(Map<String, Double> measurements) {
        this.measurements = measurements;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TelemetryExceptionData setVersion(int version) {
        super.setVersion(version);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("ver", getVersion());
        jsonWriter.writeArrayField("exceptions", this.exceptions, JsonWriter::writeJson);
        jsonWriter.writeStringField("severityLevel", this.severityLevel == null ? null : this.severityLevel.toString());
        jsonWriter.writeStringField("problemId", this.problemId);
        jsonWriter.writeMapField("properties", this.properties, JsonWriter::writeString);
        jsonWriter.writeMapField("measurements", this.measurements, JsonWriter::writeDouble);
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TelemetryExceptionData from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TelemetryExceptionData if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TelemetryExceptionData.
     */
    public static TelemetryExceptionData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TelemetryExceptionData deserializedTelemetryExceptionData = new TelemetryExceptionData();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ver".equals(fieldName)) {
                    deserializedTelemetryExceptionData.setVersion(reader.getInt());
                } else if ("exceptions".equals(fieldName)) {
                    deserializedTelemetryExceptionData.exceptions
                        = reader.readArray(TelemetryExceptionDetails::fromJson);
                } else if ("severityLevel".equals(fieldName)) {
                    deserializedTelemetryExceptionData.severityLevel = SeverityLevel.fromString(reader.getString());
                } else if ("problemId".equals(fieldName)) {
                    deserializedTelemetryExceptionData.problemId = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedTelemetryExceptionData.properties = reader.readMap(JsonReader::getString);
                } else if ("measurements".equals(fieldName)) {
                    deserializedTelemetryExceptionData.measurements = reader.readMap(JsonReader::getDouble);
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedTelemetryExceptionData.setAdditionalProperties(additionalProperties);

            return deserializedTelemetryExceptionData;
        });
    }
}
