// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.opentelemetry.autoconfigure.implementation;

import io.opentelemetry.api.common.Attributes;
import io.opentelemetry.api.trace.SpanKind;
import io.opentelemetry.context.Context;
import io.opentelemetry.sdk.trace.data.LinkData;
import io.opentelemetry.sdk.trace.samplers.Sampler;
import io.opentelemetry.sdk.trace.samplers.SamplingDecision;
import io.opentelemetry.sdk.trace.samplers.SamplingResult;

import java.util.List;

public class ApplicationInsightsSampler implements Sampler {

    private final double percentage;
    private final SamplingResult recordAndSample;
    private final String description;

    public ApplicationInsightsSampler(double ratio) {
        this.percentage = ratio * 100;
        recordAndSample = new RecordAndSampleWithSampleRate(percentage);
        description = "ApplicationInsightsSampler{" + ratio + "}";
    }

    @Override
    public SamplingResult shouldSample(
            Context parentContext,
            String traceId,
            String name,
            SpanKind spanKind,
            Attributes attributes,
            List<LinkData> parentLinks) {

        if (shouldRecordAndSample(traceId)) {
            return recordAndSample;
        }
        return SamplingResult.drop();
    }

    private static class RecordAndSampleWithSampleRate implements SamplingResult {

        private final Attributes attributes;

        RecordAndSampleWithSampleRate(double sampleRate) {
            attributes = Attributes.builder().put(AiSemanticAttributes.SAMPLE_RATE, sampleRate).build();
        }

        @Override
        public SamplingDecision getDecision() {
            return SamplingDecision.RECORD_AND_SAMPLE;
        }

        @Override
        public Attributes getAttributes() {
            return attributes;
        }
    }

    private boolean shouldRecordAndSample(String traceId) {
        if (percentage == 100) {
            // optimization, no need to calculate score
            return true;
        }
        if (percentage == 0) {
            // optimization, no need to calculate score
            return false;
        }
        return SamplingScoreGeneratorV2.getSamplingScore(traceId) < percentage;
    }

    @Override
    public String getDescription() {
        return description;
    }
}
