// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.opentelemetry.autoconfigure.implementation.quickpulse.swagger.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * An AND-connected group of FilterInfo objects.
 */
@Fluent
public final class FilterConjunctionGroupInfo implements JsonSerializable<FilterConjunctionGroupInfo> {
    /*
     * An array of filters.
     */
    private List<FilterInfo> filters;

    /**
     * Creates an instance of FilterConjunctionGroupInfo class.
     */
    public FilterConjunctionGroupInfo() {
    }

    /**
     * Get the filters property: An array of filters.
     * 
     * @return the filters value.
     */
    public List<FilterInfo> getFilters() {
        return this.filters;
    }

    /**
     * Set the filters property: An array of filters.
     * 
     * @param filters the filters value to set.
     * @return the FilterConjunctionGroupInfo object itself.
     */
    public FilterConjunctionGroupInfo setFilters(List<FilterInfo> filters) {
        this.filters = filters;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("Filters", this.filters, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FilterConjunctionGroupInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FilterConjunctionGroupInfo if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FilterConjunctionGroupInfo.
     */
    public static FilterConjunctionGroupInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FilterConjunctionGroupInfo deserializedFilterConjunctionGroupInfo = new FilterConjunctionGroupInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("Filters".equals(fieldName)) {
                    List<FilterInfo> filters = reader.readArray(reader1 -> FilterInfo.fromJson(reader1));
                    deserializedFilterConjunctionGroupInfo.filters = filters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFilterConjunctionGroupInfo;
        });
    }
}
