// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.opentelemetry.autoconfigure.implementation.quickpulse.swagger.models;

import com.azure.core.annotation.Generated;
import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * Enum representing the different types of predicates.
 */
public final class PredicateType extends ExpandableStringEnum<PredicateType> {
    /**
     * Represents an equality predicate.
     */
    @Generated
    public static final PredicateType EQUAL = fromString("Equal");

    /**
     * Represents a not-equal predicate.
     */
    @Generated
    public static final PredicateType NOT_EQUAL = fromString("NotEqual");

    /**
     * Represents a less-than predicate.
     */
    @Generated
    public static final PredicateType LESS_THAN = fromString("LessThan");

    /**
     * Represents a greater-than predicate.
     */
    @Generated
    public static final PredicateType GREATER_THAN = fromString("GreaterThan");

    /**
     * Represents a less-than-or-equal predicate.
     */
    @Generated
    public static final PredicateType LESS_THAN_OR_EQUAL = fromString("LessThanOrEqual");

    /**
     * Represents a greater-than-or-equal predicate.
     */
    @Generated
    public static final PredicateType GREATER_THAN_OR_EQUAL = fromString("GreaterThanOrEqual");

    /**
     * Represents a contains predicate.
     */
    @Generated
    public static final PredicateType CONTAINS = fromString("Contains");

    /**
     * Represents a does-not-contain predicate.
     */
    @Generated
    public static final PredicateType DOES_NOT_CONTAIN = fromString("DoesNotContain");

    /**
     * Creates a new instance of PredicateType value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Generated
    @Deprecated
    public PredicateType() {
    }

    /**
     * Creates or finds a PredicateType from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding PredicateType.
     */
    @Generated
    public static PredicateType fromString(String name) {
        return fromString(name, PredicateType.class);
    }

    /**
     * Gets known PredicateType values.
     * 
     * @return known PredicateType values.
     */
    @Generated
    public static Collection<PredicateType> values() {
        return values(PredicateType.class);
    }
}
