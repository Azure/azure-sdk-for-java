// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.opentelemetry.autoconfigure.implementation.quickpulse.swagger.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * RemoteDependency document type.
 */
@Fluent
public final class RemoteDependency extends DocumentIngress {
    /*
     * Telemetry type. Types not defined in enum will get replaced with a 'Unknown' type.
     */
    private DocumentType documentType = DocumentType.REMOTE_DEPENDENCY;

    /*
     * Name of the command initiated with this dependency call, e.g., GET /username.
     */
    private String name;

    /*
     * URL of the dependency call to the target, with all query string parameters.
     */
    private String commandName;

    /*
     * Result code of a dependency call. Examples are SQL error code and HTTP status code.
     */
    private String resultCode;

    /*
     * Request duration in ISO 8601 duration format, i.e., P[n]Y[n]M[n]DT[n]H[n]M[n]S or P[n]W.
     */
    private String duration;

    /**
     * Creates an instance of RemoteDependency class.
     */
    public RemoteDependency() {
    }

    /**
     * Get the documentType property: Telemetry type. Types not defined in enum will get replaced with a 'Unknown' type.
     * 
     * @return the documentType value.
     */
    @Override
    public DocumentType getDocumentType() {
        return this.documentType;
    }

    /**
     * Get the name property: Name of the command initiated with this dependency call, e.g., GET /username.
     * 
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Name of the command initiated with this dependency call, e.g., GET /username.
     * 
     * @param name the name value to set.
     * @return the RemoteDependency object itself.
     */
    public RemoteDependency setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the commandName property: URL of the dependency call to the target, with all query string parameters.
     * 
     * @return the commandName value.
     */
    public String getCommandName() {
        return this.commandName;
    }

    /**
     * Set the commandName property: URL of the dependency call to the target, with all query string parameters.
     * 
     * @param commandName the commandName value to set.
     * @return the RemoteDependency object itself.
     */
    public RemoteDependency setCommandName(String commandName) {
        this.commandName = commandName;
        return this;
    }

    /**
     * Get the resultCode property: Result code of a dependency call. Examples are SQL error code and HTTP status code.
     * 
     * @return the resultCode value.
     */
    public String getResultCode() {
        return this.resultCode;
    }

    /**
     * Set the resultCode property: Result code of a dependency call. Examples are SQL error code and HTTP status code.
     * 
     * @param resultCode the resultCode value to set.
     * @return the RemoteDependency object itself.
     */
    public RemoteDependency setResultCode(String resultCode) {
        this.resultCode = resultCode;
        return this;
    }

    /**
     * Get the duration property: Request duration in ISO 8601 duration format, i.e., P[n]Y[n]M[n]DT[n]H[n]M[n]S or
     * P[n]W.
     * 
     * @return the duration value.
     */
    public String getDuration() {
        return this.duration;
    }

    /**
     * Set the duration property: Request duration in ISO 8601 duration format, i.e., P[n]Y[n]M[n]DT[n]H[n]M[n]S or
     * P[n]W.
     * 
     * @param duration the duration value to set.
     * @return the RemoteDependency object itself.
     */
    public RemoteDependency setDuration(String duration) {
        this.duration = duration;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RemoteDependency setDocumentStreamIds(List<String> documentStreamIds) {
        super.setDocumentStreamIds(documentStreamIds);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RemoteDependency setProperties(List<KeyValuePairString> properties) {
        super.setProperties(properties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("DocumentStreamIds", getDocumentStreamIds(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("Properties", getProperties(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("DocumentType", this.documentType == null ? null : this.documentType.toString());
        jsonWriter.writeStringField("Name", this.name);
        jsonWriter.writeStringField("CommandName", this.commandName);
        jsonWriter.writeStringField("ResultCode", this.resultCode);
        jsonWriter.writeStringField("Duration", this.duration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RemoteDependency from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RemoteDependency if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RemoteDependency.
     */
    public static RemoteDependency fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RemoteDependency deserializedRemoteDependency = new RemoteDependency();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("DocumentStreamIds".equals(fieldName)) {
                    List<String> documentStreamIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedRemoteDependency.setDocumentStreamIds(documentStreamIds);
                } else if ("Properties".equals(fieldName)) {
                    List<KeyValuePairString> properties
                        = reader.readArray(reader1 -> KeyValuePairString.fromJson(reader1));
                    deserializedRemoteDependency.setProperties(properties);
                } else if ("DocumentType".equals(fieldName)) {
                    deserializedRemoteDependency.documentType = DocumentType.fromString(reader.getString());
                } else if ("Name".equals(fieldName)) {
                    deserializedRemoteDependency.name = reader.getString();
                } else if ("CommandName".equals(fieldName)) {
                    deserializedRemoteDependency.commandName = reader.getString();
                } else if ("ResultCode".equals(fieldName)) {
                    deserializedRemoteDependency.resultCode = reader.getString();
                } else if ("Duration".equals(fieldName)) {
                    deserializedRemoteDependency.duration = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRemoteDependency;
        });
    }
}
