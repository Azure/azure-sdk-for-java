// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.opentelemetry.autoconfigure.implementation.quickpulse.swagger.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A collection of filters for a specific telemetry type.
 */
@Fluent
public final class DocumentFilterConjunctionGroupInfo implements JsonSerializable<DocumentFilterConjunctionGroupInfo> {
    /*
     * Telemetry type.
     */
    private TelemetryType telemetryType;

    /*
     * An array of filter groups.
     */
    private FilterConjunctionGroupInfo filters;

    /**
     * Creates an instance of DocumentFilterConjunctionGroupInfo class.
     */
    public DocumentFilterConjunctionGroupInfo() {
    }

    /**
     * Get the telemetryType property: Telemetry type.
     * 
     * @return the telemetryType value.
     */
    public TelemetryType getTelemetryType() {
        return this.telemetryType;
    }

    /**
     * Set the telemetryType property: Telemetry type.
     * 
     * @param telemetryType the telemetryType value to set.
     * @return the DocumentFilterConjunctionGroupInfo object itself.
     */
    public DocumentFilterConjunctionGroupInfo setTelemetryType(TelemetryType telemetryType) {
        this.telemetryType = telemetryType;
        return this;
    }

    /**
     * Get the filters property: An array of filter groups.
     * 
     * @return the filters value.
     */
    public FilterConjunctionGroupInfo getFilters() {
        return this.filters;
    }

    /**
     * Set the filters property: An array of filter groups.
     * 
     * @param filters the filters value to set.
     * @return the DocumentFilterConjunctionGroupInfo object itself.
     */
    public DocumentFilterConjunctionGroupInfo setFilters(FilterConjunctionGroupInfo filters) {
        this.filters = filters;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("TelemetryType", this.telemetryType == null ? null : this.telemetryType.toString());
        jsonWriter.writeJsonField("Filters", this.filters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DocumentFilterConjunctionGroupInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DocumentFilterConjunctionGroupInfo if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DocumentFilterConjunctionGroupInfo.
     */
    public static DocumentFilterConjunctionGroupInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DocumentFilterConjunctionGroupInfo deserializedDocumentFilterConjunctionGroupInfo
                = new DocumentFilterConjunctionGroupInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("TelemetryType".equals(fieldName)) {
                    deserializedDocumentFilterConjunctionGroupInfo.telemetryType
                        = TelemetryType.fromString(reader.getString());
                } else if ("Filters".equals(fieldName)) {
                    deserializedDocumentFilterConjunctionGroupInfo.filters
                        = FilterConjunctionGroupInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDocumentFilterConjunctionGroupInfo;
        });
    }
}
