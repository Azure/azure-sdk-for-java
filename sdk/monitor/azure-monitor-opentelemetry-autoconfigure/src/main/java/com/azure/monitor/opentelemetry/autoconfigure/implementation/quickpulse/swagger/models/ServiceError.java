// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.opentelemetry.autoconfigure.implementation.quickpulse.swagger.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Optional http response body, whose existence carries additional error descriptions.
 */
@Fluent
public final class ServiceError implements JsonSerializable<ServiceError> {
    /*
     * A globally unique identifier to identify the diagnostic context. It defaults to the empty GUID.
     */
    private String requestId;

    /*
     * Service error response date time.
     */
    private String responseDateTime;

    /*
     * Error code.
     */
    private String code;

    /*
     * Error message.
     */
    private String message;

    /*
     * Message of the exception that triggers the error response.
     */
    private String exception;

    /**
     * Creates an instance of ServiceError class.
     */
    public ServiceError() {
    }

    /**
     * Get the requestId property: A globally unique identifier to identify the diagnostic context. It defaults to the
     * empty GUID.
     * 
     * @return the requestId value.
     */
    public String getRequestId() {
        return this.requestId;
    }

    /**
     * Set the requestId property: A globally unique identifier to identify the diagnostic context. It defaults to the
     * empty GUID.
     * 
     * @param requestId the requestId value to set.
     * @return the ServiceError object itself.
     */
    public ServiceError setRequestId(String requestId) {
        this.requestId = requestId;
        return this;
    }

    /**
     * Get the responseDateTime property: Service error response date time.
     * 
     * @return the responseDateTime value.
     */
    public String getResponseDateTime() {
        return this.responseDateTime;
    }

    /**
     * Set the responseDateTime property: Service error response date time.
     * 
     * @param responseDateTime the responseDateTime value to set.
     * @return the ServiceError object itself.
     */
    public ServiceError setResponseDateTime(String responseDateTime) {
        this.responseDateTime = responseDateTime;
        return this;
    }

    /**
     * Get the code property: Error code.
     * 
     * @return the code value.
     */
    public String getCode() {
        return this.code;
    }

    /**
     * Set the code property: Error code.
     * 
     * @param code the code value to set.
     * @return the ServiceError object itself.
     */
    public ServiceError setCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Get the message property: Error message.
     * 
     * @return the message value.
     */
    public String getMessage() {
        return this.message;
    }

    /**
     * Set the message property: Error message.
     * 
     * @param message the message value to set.
     * @return the ServiceError object itself.
     */
    public ServiceError setMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the exception property: Message of the exception that triggers the error response.
     * 
     * @return the exception value.
     */
    public String getException() {
        return this.exception;
    }

    /**
     * Set the exception property: Message of the exception that triggers the error response.
     * 
     * @param exception the exception value to set.
     * @return the ServiceError object itself.
     */
    public ServiceError setException(String exception) {
        this.exception = exception;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("RequestId", this.requestId);
        jsonWriter.writeStringField("ResponseDateTime", this.responseDateTime);
        jsonWriter.writeStringField("Code", this.code);
        jsonWriter.writeStringField("Message", this.message);
        jsonWriter.writeStringField("Exception", this.exception);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceError if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ServiceError.
     */
    public static ServiceError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceError deserializedServiceError = new ServiceError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("RequestId".equals(fieldName)) {
                    deserializedServiceError.requestId = reader.getString();
                } else if ("ResponseDateTime".equals(fieldName)) {
                    deserializedServiceError.responseDateTime = reader.getString();
                } else if ("Code".equals(fieldName)) {
                    deserializedServiceError.code = reader.getString();
                } else if ("Message".equals(fieldName)) {
                    deserializedServiceError.message = reader.getString();
                } else if ("Exception".equals(fieldName)) {
                    deserializedServiceError.exception = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceError;
        });
    }
}
