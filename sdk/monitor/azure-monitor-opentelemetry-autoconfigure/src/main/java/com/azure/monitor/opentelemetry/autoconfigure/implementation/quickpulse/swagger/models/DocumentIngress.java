// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.opentelemetry.autoconfigure.implementation.quickpulse.swagger.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Base class of the specific document types.
 */
@Fluent
public class DocumentIngress implements JsonSerializable<DocumentIngress> {
    /*
     * Telemetry type. Types not defined in enum will get replaced with a 'Unknown' type.
     */
    private DocumentType documentType = DocumentType.fromString("DocumentIngress");

    /*
     * An array of document streaming ids. Each id identifies a flow of documents customized by UX customers.
     */
    private List<String> documentStreamIds;

    /*
     * Collection of custom properties.
     */
    private List<KeyValuePairString> properties;

    /**
     * Creates an instance of DocumentIngress class.
     */
    public DocumentIngress() {
    }

    /**
     * Get the documentType property: Telemetry type. Types not defined in enum will get replaced with a 'Unknown' type.
     * 
     * @return the documentType value.
     */
    public DocumentType getDocumentType() {
        return this.documentType;
    }

    /**
     * Get the documentStreamIds property: An array of document streaming ids. Each id identifies a flow of documents
     * customized by UX customers.
     * 
     * @return the documentStreamIds value.
     */
    public List<String> getDocumentStreamIds() {
        return this.documentStreamIds;
    }

    /**
     * Set the documentStreamIds property: An array of document streaming ids. Each id identifies a flow of documents
     * customized by UX customers.
     * 
     * @param documentStreamIds the documentStreamIds value to set.
     * @return the DocumentIngress object itself.
     */
    public DocumentIngress setDocumentStreamIds(List<String> documentStreamIds) {
        this.documentStreamIds = documentStreamIds;
        return this;
    }

    /**
     * Get the properties property: Collection of custom properties.
     * 
     * @return the properties value.
     */
    public List<KeyValuePairString> getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: Collection of custom properties.
     * 
     * @param properties the properties value to set.
     * @return the DocumentIngress object itself.
     */
    public DocumentIngress setProperties(List<KeyValuePairString> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("DocumentType", this.documentType == null ? null : this.documentType.toString());
        jsonWriter.writeArrayField("DocumentStreamIds", this.documentStreamIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("Properties", this.properties, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DocumentIngress from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DocumentIngress if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DocumentIngress.
     */
    public static DocumentIngress fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("DocumentType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Event".equals(discriminatorValue)) {
                    return Event.fromJson(readerToUse.reset());
                } else if ("Exception".equals(discriminatorValue)) {
                    return Exception.fromJson(readerToUse.reset());
                } else if ("RemoteDependency".equals(discriminatorValue)) {
                    return RemoteDependency.fromJson(readerToUse.reset());
                } else if ("Request".equals(discriminatorValue)) {
                    return Request.fromJson(readerToUse.reset());
                } else if ("Trace".equals(discriminatorValue)) {
                    return Trace.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static DocumentIngress fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DocumentIngress deserializedDocumentIngress = new DocumentIngress();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("DocumentType".equals(fieldName)) {
                    deserializedDocumentIngress.documentType = DocumentType.fromString(reader.getString());
                } else if ("DocumentStreamIds".equals(fieldName)) {
                    List<String> documentStreamIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedDocumentIngress.documentStreamIds = documentStreamIds;
                } else if ("Properties".equals(fieldName)) {
                    List<KeyValuePairString> properties
                        = reader.readArray(reader1 -> KeyValuePairString.fromJson(reader1));
                    deserializedDocumentIngress.properties = properties;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDocumentIngress;
        });
    }
}
