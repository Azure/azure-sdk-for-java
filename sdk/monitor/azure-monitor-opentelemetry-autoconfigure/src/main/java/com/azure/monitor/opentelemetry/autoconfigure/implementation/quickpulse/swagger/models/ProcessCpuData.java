// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.opentelemetry.autoconfigure.implementation.quickpulse.swagger.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * CPU consumption datapoint.
 */
@Fluent
public final class ProcessCpuData implements JsonSerializable<ProcessCpuData> {
    /*
     * Process name.
     */
    private String processName;

    /*
     * CPU consumption percentage.
     */
    private int cpuPercentage;

    /**
     * Creates an instance of ProcessCpuData class.
     */
    public ProcessCpuData() {
    }

    /**
     * Get the processName property: Process name.
     * 
     * @return the processName value.
     */
    public String getProcessName() {
        return this.processName;
    }

    /**
     * Set the processName property: Process name.
     * 
     * @param processName the processName value to set.
     * @return the ProcessCpuData object itself.
     */
    public ProcessCpuData setProcessName(String processName) {
        this.processName = processName;
        return this;
    }

    /**
     * Get the cpuPercentage property: CPU consumption percentage.
     * 
     * @return the cpuPercentage value.
     */
    public int getCpuPercentage() {
        return this.cpuPercentage;
    }

    /**
     * Set the cpuPercentage property: CPU consumption percentage.
     * 
     * @param cpuPercentage the cpuPercentage value to set.
     * @return the ProcessCpuData object itself.
     */
    public ProcessCpuData setCpuPercentage(int cpuPercentage) {
        this.cpuPercentage = cpuPercentage;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ProcessName", this.processName);
        jsonWriter.writeIntField("CpuPercentage", this.cpuPercentage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProcessCpuData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProcessCpuData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ProcessCpuData.
     */
    public static ProcessCpuData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProcessCpuData deserializedProcessCpuData = new ProcessCpuData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ProcessName".equals(fieldName)) {
                    deserializedProcessCpuData.processName = reader.getString();
                } else if ("CpuPercentage".equals(fieldName)) {
                    deserializedProcessCpuData.cpuPercentage = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProcessCpuData;
        });
    }
}
