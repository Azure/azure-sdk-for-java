// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.opentelemetry.autoconfigure.implementation.quickpulse.swagger.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Exception document type.
 */
@Fluent
public final class Exception extends DocumentIngress {
    /*
     * Telemetry type. Types not defined in enum will get replaced with a 'Unknown' type.
     */
    private DocumentType documentType = DocumentType.EXCEPTION;

    /*
     * Exception type name.
     */
    private String exceptionType;

    /*
     * Exception message.
     */
    private String exceptionMessage;

    /**
     * Creates an instance of Exception class.
     */
    public Exception() {
    }

    /**
     * Get the documentType property: Telemetry type. Types not defined in enum will get replaced with a 'Unknown' type.
     * 
     * @return the documentType value.
     */
    @Override
    public DocumentType getDocumentType() {
        return this.documentType;
    }

    /**
     * Get the exceptionType property: Exception type name.
     * 
     * @return the exceptionType value.
     */
    public String getExceptionType() {
        return this.exceptionType;
    }

    /**
     * Set the exceptionType property: Exception type name.
     * 
     * @param exceptionType the exceptionType value to set.
     * @return the Exception object itself.
     */
    public Exception setExceptionType(String exceptionType) {
        this.exceptionType = exceptionType;
        return this;
    }

    /**
     * Get the exceptionMessage property: Exception message.
     * 
     * @return the exceptionMessage value.
     */
    public String getExceptionMessage() {
        return this.exceptionMessage;
    }

    /**
     * Set the exceptionMessage property: Exception message.
     * 
     * @param exceptionMessage the exceptionMessage value to set.
     * @return the Exception object itself.
     */
    public Exception setExceptionMessage(String exceptionMessage) {
        this.exceptionMessage = exceptionMessage;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Exception setDocumentStreamIds(List<String> documentStreamIds) {
        super.setDocumentStreamIds(documentStreamIds);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Exception setProperties(List<KeyValuePairString> properties) {
        super.setProperties(properties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("DocumentStreamIds", getDocumentStreamIds(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("Properties", getProperties(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("DocumentType", this.documentType == null ? null : this.documentType.toString());
        jsonWriter.writeStringField("ExceptionType", this.exceptionType);
        jsonWriter.writeStringField("ExceptionMessage", this.exceptionMessage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Exception from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Exception if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Exception.
     */
    public static Exception fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Exception deserializedException = new Exception();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("DocumentStreamIds".equals(fieldName)) {
                    List<String> documentStreamIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedException.setDocumentStreamIds(documentStreamIds);
                } else if ("Properties".equals(fieldName)) {
                    List<KeyValuePairString> properties
                        = reader.readArray(reader1 -> KeyValuePairString.fromJson(reader1));
                    deserializedException.setProperties(properties);
                } else if ("DocumentType".equals(fieldName)) {
                    deserializedException.documentType = DocumentType.fromString(reader.getString());
                } else if ("ExceptionType".equals(fieldName)) {
                    deserializedException.exceptionType = reader.getString();
                } else if ("ExceptionMessage".equals(fieldName)) {
                    deserializedException.exceptionMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedException;
        });
    }
}
