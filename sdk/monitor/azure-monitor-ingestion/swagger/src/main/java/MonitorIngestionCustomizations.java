// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

import com.azure.autorest.customization.ClassCustomization;
import com.azure.autorest.customization.Customization;
import com.azure.autorest.customization.LibraryCustomization;
import com.azure.autorest.customization.PackageCustomization;
import com.github.javaparser.StaticJavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.NodeList;
import com.github.javaparser.ast.expr.Name;
import com.github.javaparser.ast.modules.ModuleExportsDirective;
import com.github.javaparser.ast.modules.ModuleOpensDirective;
import com.github.javaparser.ast.modules.ModuleRequiresDirective;
import com.github.javaparser.javadoc.Javadoc;
import com.github.javaparser.javadoc.description.JavadocDescription;
import org.slf4j.Logger;

/**
 * Customization class for Monitor. These customizations will be applied on top of the generated code.
 */
public class MonitorIngestionCustomizations extends Customization {

    /**
     * Customizes the generated code.
     *
     * <br/>
     *
     * The following customizations are applied:
     *
     * <ol>
     *     <li>The package customization for the package `com.azure.monitor.ingestion.implementation`.</li>
     * </ol>
     *
     * @param libraryCustomization The library customization.
     * @param logger The logger.
     */
    @Override
    public void customize(LibraryCustomization libraryCustomization, Logger logger) {
        monitorIngestionImplementation(libraryCustomization.getPackage("com.azure.monitor.ingestion.implementation"));
        CompilationUnit moduleInfo = StaticJavaParser.parse(libraryCustomization.getRawEditor()
            .getFileContent("src/main/java/module-info.java"));
        moduleInfo.getModule()
            .ifPresent(module -> {
                module.setName("com.azure.monitor.ingestion");
                module.setDirectives(new NodeList<>(
                    new ModuleRequiresDirective().setTransitive(true).setName("com.azure.core"),
                    new ModuleExportsDirective().setName("com.azure.monitor.ingestion"),
                    new ModuleExportsDirective().setName("com.azure.monitor.ingestion.models"),
                    new ModuleOpensDirective().setName("com.azure.monitor.ingestion")
                        .setModuleNames(new NodeList<>(new Name("com.azure.core")))));
            });

        libraryCustomization.getRawEditor()
            .replaceFile("src/main/java/module-info.java",
                "// Copyright (c) Microsoft Corporation. All rights reserved.\n"
                + "// Licensed under the MIT License.\n"
                + "// Code generated by Microsoft (R) AutoRest Code Generator.\n\n"
                + moduleInfo);
    }

    /**
     * Customizes the generated code for the package com.azure.monitor.ingestion.implementation.
     *
     * <br/>
     *
     * The following classes are customized:
     * <ol>
     *     <li>IngestionUsingDataCollectionRulesClientBuilder</li>
     * </ol>
     *
     * @param packageCustomization The package customization.
     */
    private void monitorIngestionImplementation(PackageCustomization packageCustomization) {
        IngestionUsingDataCollectionRulesClientBuilderCustomization(packageCustomization.getClass("IngestionUsingDataCollectionRulesClientBuilder"));
    }

    /**
     * Customizes the generated code for `IngestionUsingDataCollectionRulesClientBuilder`.
     *
     * <br/>
     *
     * The following customizations are applied:
     *
     * <ol>
     *     <li>Adds an import statement for the class `LogsIngestionAudience`.</li>
     *     <li>Adds a field `audience` of type `LogsIngestionAudience` to the class.</li>
     *     <li>Adds a Javadoc for the field `audience`.</li>
     *     <li>Adds the generated annotation to the field `audience`.</li>
     *     <li>Adds a setter for the field `audience`.</li>
     *     <li>Adds a Javadoc for the setter.</li>
     *     <li>Adds the generated annotation to the setter.</li>
     *     <li>Replaces the body of the method `createHttpPipeline()` with a custom implementation that sets the
     *     audience in the `BearerTokenAuthenticationPolicy`.</li>
     * </ol>
     *
     * @param classCustomization The class customization.
     */
    private void IngestionUsingDataCollectionRulesClientBuilderCustomization(ClassCustomization classCustomization) {
        classCustomization.customizeAst(ast -> {
            ast.addImport("com.azure.monitor.ingestion.models.LogsIngestionAudience");
            ast.getClassByName(classCustomization.getClassName()).ifPresent(clazz -> {
                clazz.addPrivateField("LogsIngestionAudience", "audience")
                    .addAnnotation("Generated")
                    .setJavadocComment("The audience indicating the authorization scope of log ingestion clients.")
                    .createSetter()
                    .setName("audience")
                    .setType("IngestionUsingDataCollectionRulesClientBuilder")
                    .setBody(StaticJavaParser.parseBlock("{this.audience = audience; return this; }"))
                    .addAnnotation("Generated")
                    .setJavadocComment(new Javadoc(JavadocDescription.parseText("Sets the audience."))
                        .addBlockTag("param", "audience", "the audience indicating the authorization scope of log ingestion clients.")
                        .addBlockTag("return", "the IngestionUsingDataCollectionRulesClientBuilder."));

                clazz.getMethodsByName("createHttpPipeline").get(0).setBody(StaticJavaParser.parseBlock(
                    String.join("\n",
                        "{",
                        "Configuration buildConfiguration",
                        "    = (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;",
                        "HttpLogOptions localHttpLogOptions = this.httpLogOptions == null ? new HttpLogOptions() : this.httpLogOptions;",
                        "ClientOptions localClientOptions = this.clientOptions == null ? new ClientOptions() : this.clientOptions;",
                        "List<HttpPipelinePolicy> policies = new ArrayList<>();",
                        "String clientName = PROPERTIES.getOrDefault(SDK_NAME, \"UnknownName\");",
                        "String clientVersion = PROPERTIES.getOrDefault(SDK_VERSION, \"UnknownVersion\");",
                        "String applicationId = CoreUtils.getApplicationId(localClientOptions, localHttpLogOptions);",
                        "policies.add(new UserAgentPolicy(applicationId, clientName, clientVersion, buildConfiguration));",
                        "policies.add(new RequestIdPolicy());",
                        "policies.add(new AddHeadersFromContextPolicy());",
                        "HttpHeaders headers = CoreUtils.createHttpHeadersFromClientOptions(localClientOptions);",
                        "if (headers != null) {",
                        "    policies.add(new AddHeadersPolicy(headers));",
                        "}",
                        "this.pipelinePolicies.stream()",
                        "    .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)",
                        "    .forEach(p -> policies.add(p));",
                        "HttpPolicyProviders.addBeforeRetryPolicies(policies);",
                        "policies.add(ClientBuilderUtil.validateAndGetRetryPolicy(retryPolicy, retryOptions, new RetryPolicy()));",
                        "policies.add(new AddDatePolicy());",
                        "if (tokenCredential != null) {",
                        "    policies.add(new BearerTokenAuthenticationPolicy(tokenCredential, audience == null ? DEFAULT_SCOPES : new String[] { audience.toString() }));",
                        "}",
                        "this.pipelinePolicies.stream()",
                        "    .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)",
                        "    .forEach(p -> policies.add(p));",
                        "HttpPolicyProviders.addAfterRetryPolicies(policies);",
                        "policies.add(new HttpLoggingPolicy(localHttpLogOptions));",
                        "HttpPipeline httpPipeline = new HttpPipelineBuilder().policies(policies.toArray(new HttpPipelinePolicy[0]))",
                        "    .httpClient(httpClient)",
                        "    .clientOptions(localClientOptions)",
                        "    .build();",
                        "return httpPipeline;",
                        "}"
                    )
                ));
            });
        });
    }
}
