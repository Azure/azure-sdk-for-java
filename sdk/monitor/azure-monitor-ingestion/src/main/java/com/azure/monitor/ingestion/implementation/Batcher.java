// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.ingestion.implementation;

import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.serializer.ObjectSerializer;
import com.azure.monitor.ingestion.models.LogsUploadOptions;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import reactor.core.publisher.Flux;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

import static com.azure.monitor.ingestion.implementation.Utils.getConcurrency;
import static com.azure.monitor.ingestion.implementation.Utils.getSerializer;

public class Batcher implements Iterator<LogsIngestionRequest> {
    private static final ClientLogger LOGGER = new ClientLogger(Utils.class);
    private final ObjectSerializer serializer;
    private final int concurrency;
    private final Iterator<Object> iterator;
    private long currentBatchSize;
    private List<String> serializedLogs;
    private List<Object> originalLogsRequest;

    public Batcher(LogsUploadOptions options, Iterable<Object> iterable) {
        this.serializer = getSerializer(options);
        this.concurrency = getConcurrency(options);
        this.serializedLogs = new ArrayList<>();
        this.originalLogsRequest = new ArrayList<>();
        this.iterator = iterable.iterator();
    }

    LogsIngestionRequest nextInternal() throws IOException {
        LogsIngestionRequest result = null;
        while (iterator.hasNext() && result == null) {
            Object currentLog = iterator.next();
            byte[] bytes = serializer.serializeToBytes(currentLog);
            currentBatchSize += bytes.length;
            if (currentBatchSize > Utils.MAX_REQUEST_PAYLOAD_SIZE) {
                result = createRequest(false);
                currentBatchSize = bytes.length;
            }

            serializedLogs.add(new String(bytes, StandardCharsets.UTF_8));
            originalLogsRequest.add(currentLog);
        }

        if (result == null && currentBatchSize > 0) {
            currentBatchSize = 0;
            return createRequest(true);
        }

        return result;
    }

    private LogsIngestionRequest createRequest(boolean last) throws IOException {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();

        try (JsonGenerator generator = JsonFactory.builder().build().createGenerator(byteArrayOutputStream)) {
            generator.writeStartArray();
            generator.writeRaw(serializedLogs.stream().collect(Collectors.joining(",")));
            generator.writeEndArray();
        }

        byte[] zippedRequestBody = Utils.gzipRequest(byteArrayOutputStream.toByteArray());

        LogsIngestionRequest request = new LogsIngestionRequest(originalLogsRequest, zippedRequestBody);

        if (!last) {
            originalLogsRequest = new ArrayList<>();
            serializedLogs.clear();
        }

        return request;
    }

    public Stream<LogsIngestionRequest> toStream() {
        if (concurrency == 1) {
            return StreamSupport.stream(
                Spliterators.spliteratorUnknownSize(this, Spliterator.NONNULL | Spliterator.ORDERED), false);
        }

        return StreamSupport.stream(new ConcurrencyLimitingSpliterator(concurrency), true);
    }

    public Flux<LogsIngestionRequest> toFlux() {
        return Flux.create(emitter -> {
            try {
                while (hasNext()) {
                    LogsIngestionRequest next = nextInternal();
                    if (next != null)
                        emitter.next(next);
                }
            } catch (IOException ex) {
                emitter.error(ex);
            }

            emitter.complete();
        });
    }

    @Override
    public boolean hasNext() {
        return iterator.hasNext() || currentBatchSize > 0;
    }

    @Override
    public LogsIngestionRequest next() {
        if (!hasNext()) {
            return null;
        }

        try {
            return nextInternal();
        } catch (IOException ex) {
            throw LOGGER.logExceptionAsError(new UncheckedIOException(ex));
        }
    }

    private class ConcurrencyLimitingSpliterator implements Spliterator<LogsIngestionRequest> {
        private volatile int concurrency;

        public ConcurrencyLimitingSpliterator(int concurrency) {
            this.concurrency = concurrency;
        }

        private ConcurrencyLimitingSpliterator() {
            this(1);
        }

        @Override
        public boolean tryAdvance(Consumer action) {
            LogsIngestionRequest request;
            synchronized (iterator) {
                request = next();
            }
            if (request != null) {
                action.accept(request);
                return true;
            }

            return false;
        }

        @Override
        public Spliterator trySplit() {
            concurrency--;
            return concurrency > 0 ? new ConcurrencyLimitingSpliterator() : null;
        }

        @Override
        public long estimateSize() {
            return Integer.MAX_VALUE;
        }

        @Override
        public int characteristics() {
            return NONNULL | ORDERED & ~(Spliterator.SIZED | Spliterator.SUBSIZED);
        }
    }
}
