// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.monitor.ingestion.generated;

import com.azure.core.util.BinaryData;
import com.azure.core.util.Configuration;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.monitor.ingestion.implementation.LogsIngestionClient;
import com.azure.monitor.ingestion.implementation.LogsIngestionClientBuilder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class IngestDataUsingADataCollectionRule {
    public static void main(String[] args) {
        LogsIngestionClient logsIngestionClient
            = new LogsIngestionClientBuilder().credential(new DefaultAzureCredentialBuilder().build())
                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT"))
                .buildClient();
        // BEGIN:com.azure.monitor.ingestion.generated.upload.ingest-data-using-a-data-collection-rule
        logsIngestionClient.upload("c512b59c-4005-40e2-b13d-ac29cfb46af4", "Custom-TestStream", Arrays.asList(
            mapOf("Time", BinaryData.fromBytes("2021-12-08T23:51:14.1104269Z".getBytes(StandardCharsets.UTF_8)),
                "Computer", BinaryData.fromBytes("Computer1".getBytes(StandardCharsets.UTF_8)), "AdditionalContext",
                BinaryData.fromBytes(
                    "{InstanceName=user1, TimeZone=Pacific Time, Level=4, CounterName=AppMetric1, CounterValue=15.3}"
                        .getBytes(StandardCharsets.UTF_8))),
            mapOf("Time", BinaryData.fromBytes("2021-12-08T23:51:14.1104269Z".getBytes(StandardCharsets.UTF_8)),
                "Computer", BinaryData.fromBytes("Computer2".getBytes(StandardCharsets.UTF_8)), "AdditionalContext",
                BinaryData.fromBytes(
                    "{InstanceName=user2, TimeZone=Central Time, Level=3, CounterName=AppMetric1, CounterValue=23.5}"
                        .getBytes(StandardCharsets.UTF_8)))),
            "gzip");
        // END:com.azure.monitor.ingestion.generated.upload.ingest-data-using-a-data-collection-rule
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
