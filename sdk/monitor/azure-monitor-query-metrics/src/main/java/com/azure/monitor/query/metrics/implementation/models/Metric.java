// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.monitor.query.metrics.implementation.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.monitor.query.metrics.models.MetricUnit;
import java.io.IOException;
import java.util.List;

/**
 * The result data of a query.
 */
@Immutable
public final class Metric implements JsonSerializable<Metric> {

    /*
     * The metric Id.
     */
    @Generated
    private final String id;

    /*
     * The resource type of the metric resource.
     */
    @Generated
    private final String type;

    /*
     * The name and the display name of the metric, i.e. it is localizable string.
     */
    @Generated
    private final LocalizableString name;

    /*
     * Detailed description of this metric.
     */
    @Generated
    private String displayDescription;

    /*
     * 'Success' or the error details on query failures for this metric.
     */
    @Generated
    private String errorCode;

    /*
     * Error message encountered querying this specific metric.
     */
    @Generated
    private String errorMessage;

    /*
     * The unit of the metric.
     */
    @Generated
    private final MetricUnit unit;

    /*
     * The time series returned when a data query is performed.
     */
    @Generated
    private final List<TimeSeriesElement> timeSeries;

    /**
     * Creates an instance of Metric class.
     *
     * @param id the id value to set.
     * @param type the type value to set.
     * @param name the name value to set.
     * @param unit the unit value to set.
     * @param timeSeries the timeSeries value to set.
     */
    @Generated
    private Metric(String id, String type, LocalizableString name, MetricUnit unit,
        List<TimeSeriesElement> timeSeries) {
        this.id = id;
        this.type = type;
        this.name = name;
        this.unit = unit;
        this.timeSeries = timeSeries;
    }

    /**
     * Get the id property: The metric Id.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the type property: The resource type of the metric resource.
     *
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the name property: The name and the display name of the metric, i.e. it is localizable string.
     *
     * @return the name value.
     */
    @Generated
    public LocalizableString getName() {
        return this.name;
    }

    /**
     * Get the displayDescription property: Detailed description of this metric.
     *
     * @return the displayDescription value.
     */
    @Generated
    public String getDisplayDescription() {
        return this.displayDescription;
    }

    /**
     * Get the errorCode property: 'Success' or the error details on query failures for this metric.
     *
     * @return the errorCode value.
     */
    @Generated
    public String getErrorCode() {
        return this.errorCode;
    }

    /**
     * Get the errorMessage property: Error message encountered querying this specific metric.
     *
     * @return the errorMessage value.
     */
    @Generated
    public String getErrorMessage() {
        return this.errorMessage;
    }

    /**
     * Get the unit property: The unit of the metric.
     *
     * @return the unit value.
     */
    @Generated
    public MetricUnit getUnit() {
        return this.unit;
    }

    /**
     * Get the timeSeries property: The time series returned when a data query is performed.
     *
     * @return the timeSeries value.
     */
    @Generated
    public List<TimeSeriesElement> getTimeSeries() {
        return this.timeSeries;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("name", this.name);
        jsonWriter.writeStringField("unit", this.unit == null ? null : this.unit.toString());
        jsonWriter.writeArrayField("timeseries", this.timeSeries, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("displayDescription", this.displayDescription);
        jsonWriter.writeStringField("errorCode", this.errorCode);
        jsonWriter.writeStringField("errorMessage", this.errorMessage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Metric from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of Metric if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Metric.
     */
    @Generated
    public static Metric fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String type = null;
            LocalizableString name = null;
            MetricUnit unit = null;
            List<TimeSeriesElement> timeSeries = null;
            String displayDescription = null;
            String errorCode = null;
            String errorMessage = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = LocalizableString.fromJson(reader);
                } else if ("unit".equals(fieldName)) {
                    unit = MetricUnit.fromString(reader.getString());
                } else if ("timeseries".equals(fieldName)) {
                    timeSeries = reader.readArray(reader1 -> TimeSeriesElement.fromJson(reader1));
                } else if ("displayDescription".equals(fieldName)) {
                    displayDescription = reader.getString();
                } else if ("errorCode".equals(fieldName)) {
                    errorCode = reader.getString();
                } else if ("errorMessage".equals(fieldName)) {
                    errorMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            Metric deserializedMetric = new Metric(id, type, name, unit, timeSeries);
            deserializedMetric.displayDescription = displayDescription;
            deserializedMetric.errorCode = errorCode;
            deserializedMetric.errorMessage = errorMessage;
            return deserializedMetric;
        });
    }
}
