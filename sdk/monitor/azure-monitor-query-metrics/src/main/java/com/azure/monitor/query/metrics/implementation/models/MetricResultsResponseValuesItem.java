// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.monitor.query.metrics.implementation.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The metric data response for a resource.
 */
@Immutable
public final class MetricResultsResponseValuesItem implements JsonSerializable<MetricResultsResponseValuesItem> {

    /*
     * The start time, in datetime format, for which the data was retrieved.
     */
    @Generated
    private final String starttime;

    /*
     * The end time, in datetime format, for which the data was retrieved.
     */
    @Generated
    private final String endtime;

    /*
     * The interval (window size) for which the metric data was returned in ISO 8601
     * duration format with a special case for 'FULL' value that returns single
     * datapoint for entire time span requested (*Examples: PT15M, PT1H, P1D, FULL*).
     * This may be adjusted and different from what was originally requested if
     * AutoAdjustTimegrain=true is specified.
     */
    @Generated
    private String interval;

    /*
     * The namespace of the metrics been queried
     */
    @Generated
    private String namespace;

    /*
     * The region of the resource been queried for metrics.
     */
    @Generated
    private String resourceregion;

    /*
     * The resource that has been queried for metrics.
     */
    @Generated
    private String resourceid;

    /*
     * The value of the collection.
     */
    @Generated
    private final List<Metric> value;

    /**
     * Creates an instance of MetricResultsResponseValuesItem class.
     *
     * @param starttime the starttime value to set.
     * @param endtime the endtime value to set.
     * @param value the value value to set.
     */
    @Generated
    private MetricResultsResponseValuesItem(String starttime, String endtime, List<Metric> value) {
        this.starttime = starttime;
        this.endtime = endtime;
        this.value = value;
    }

    /**
     * Get the starttime property: The start time, in datetime format, for which the data was retrieved.
     *
     * @return the starttime value.
     */
    @Generated
    public String getStarttime() {
        return this.starttime;
    }

    /**
     * Get the endtime property: The end time, in datetime format, for which the data was retrieved.
     *
     * @return the endtime value.
     */
    @Generated
    public String getEndtime() {
        return this.endtime;
    }

    /**
     * Get the interval property: The interval (window size) for which the metric data was returned in ISO 8601
     * duration format with a special case for 'FULL' value that returns single
     * datapoint for entire time span requested (*Examples: PT15M, PT1H, P1D, FULL*).
     * This may be adjusted and different from what was originally requested if
     * AutoAdjustTimegrain=true is specified.
     *
     * @return the interval value.
     */
    @Generated
    public String getInterval() {
        return this.interval;
    }

    /**
     * Get the namespace property: The namespace of the metrics been queried.
     *
     * @return the namespace value.
     */
    @Generated
    public String getNamespace() {
        return this.namespace;
    }

    /**
     * Get the resourceregion property: The region of the resource been queried for metrics.
     *
     * @return the resourceregion value.
     */
    @Generated
    public String getResourceregion() {
        return this.resourceregion;
    }

    /**
     * Get the resourceid property: The resource that has been queried for metrics.
     *
     * @return the resourceid value.
     */
    @Generated
    public String getResourceid() {
        return this.resourceid;
    }

    /**
     * Get the value property: The value of the collection.
     *
     * @return the value value.
     */
    @Generated
    public List<Metric> getValue() {
        return this.value;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("starttime", this.starttime);
        jsonWriter.writeStringField("endtime", this.endtime);
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("interval", this.interval);
        jsonWriter.writeStringField("namespace", this.namespace);
        jsonWriter.writeStringField("resourceregion", this.resourceregion);
        jsonWriter.writeStringField("resourceid", this.resourceid);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricResultsResponseValuesItem from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricResultsResponseValuesItem if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MetricResultsResponseValuesItem.
     */
    @Generated
    public static MetricResultsResponseValuesItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String starttime = null;
            String endtime = null;
            List<Metric> value = null;
            String interval = null;
            String namespace = null;
            String resourceregion = null;
            String resourceid = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("starttime".equals(fieldName)) {
                    starttime = reader.getString();
                } else if ("endtime".equals(fieldName)) {
                    endtime = reader.getString();
                } else if ("value".equals(fieldName)) {
                    value = reader.readArray(reader1 -> Metric.fromJson(reader1));
                } else if ("interval".equals(fieldName)) {
                    interval = reader.getString();
                } else if ("namespace".equals(fieldName)) {
                    namespace = reader.getString();
                } else if ("resourceregion".equals(fieldName)) {
                    resourceregion = reader.getString();
                } else if ("resourceid".equals(fieldName)) {
                    resourceid = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            MetricResultsResponseValuesItem deserializedMetricResultsResponseValuesItem
                = new MetricResultsResponseValuesItem(starttime, endtime, value);
            deserializedMetricResultsResponseValuesItem.interval = interval;
            deserializedMetricResultsResponseValuesItem.namespace = namespace;
            deserializedMetricResultsResponseValuesItem.resourceregion = resourceregion;
            deserializedMetricResultsResponseValuesItem.resourceid = resourceid;
            return deserializedMetricResultsResponseValuesItem;
        });
    }
}
