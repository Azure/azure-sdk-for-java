// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.monitor.query.metrics.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.monitor.query.metrics.MetricsServiceVersion;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the MonitorQueryMetricsClient type.
 */
public final class MonitorQueryMetricsClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final MonitorQueryMetricsClientService service;

    /**
     * The regional endpoint to use, for example https://eastus.metrics.monitor.azure.com. The region should match
     * the region of the requested resources. For global resources, the region should be 'global'.
     */
    private final String endpoint;

    /**
     * Gets The regional endpoint to use, for example https://eastus.metrics.monitor.azure.com. The region should match
     * the region of the requested resources. For global resources, the region should be 'global'.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final MetricsServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public MetricsServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of MonitorQueryMetricsClient client.
     * 
     * @param endpoint The regional endpoint to use, for example https://eastus.metrics.monitor.azure.com. The region
     * should match
     * the region of the requested resources. For global resources, the region should be 'global'.
     * @param serviceVersion Service version.
     */
    MonitorQueryMetricsClientImpl(String endpoint, MetricsServiceVersion serviceVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of MonitorQueryMetricsClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint The regional endpoint to use, for example https://eastus.metrics.monitor.azure.com. The region
     * should match
     * the region of the requested resources. For global resources, the region should be 'global'.
     * @param serviceVersion Service version.
     */
    MonitorQueryMetricsClientImpl(HttpPipeline httpPipeline, String endpoint, MetricsServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of MonitorQueryMetricsClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint The regional endpoint to use, for example https://eastus.metrics.monitor.azure.com. The region
     * should match
     * the region of the requested resources. For global resources, the region should be 'global'.
     * @param serviceVersion Service version.
     */
    MonitorQueryMetricsClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint,
        MetricsServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service
            = RestProxy.create(MonitorQueryMetricsClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for MonitorQueryMetricsClient to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "MonitorQueryMetricsClient")
    public interface MonitorQueryMetricsClientService {
        @Post("/subscriptions/{subscriptionId}/metrics:getBatch")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> queryResources(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("metricnamespace") String metricNamespace, @QueryParam("metricnames") String metricNames,
            @HeaderParam("content-type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData batchRequest, RequestOptions requestOptions, Context context);

        @Post("/subscriptions/{subscriptionId}/metrics:getBatch")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> queryResourcesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("metricnamespace") String metricNamespace, @QueryParam("metricnames") String metricNames,
            @HeaderParam("content-type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData batchRequest, RequestOptions requestOptions, Context context);
    }

    /**
     * Lists the metric values for multiple resources.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>starttime</td><td>String</td><td>No</td><td>The start time of the query. It is a string in the format
     * 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have specified the endtime parameter, then
     * this parameter is required.
     * If only starttime is specified, then endtime defaults to the current time.
     * If no time interval is specified, the default is 1 hour.</td></tr>
     * <tr><td>endtime</td><td>String</td><td>No</td><td>The end time of the query. It is a string in the format
     * 'yyyy-MM-ddTHH:mm:ss.fffZ'.</td></tr>
     * <tr><td>interval</td><td>String</td><td>No</td><td>The interval (i.e. timegrain) of the query in ISO 8601
     * duration format.
     * Defaults to PT1M. Special case for 'FULL' value that returns single datapoint
     * for entire time span requested.
     * *Examples: PT15M, PT1H, P1D, FULL*</td></tr>
     * <tr><td>aggregation</td><td>String</td><td>No</td><td>The list of aggregation types (comma separated) to
     * retrieve. *Examples: average, minimum, maximum*</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The maximum number of records to retrieve per resource ID in the
     * request.
     * Valid only if filter is specified.
     * Defaults to 10.</td></tr>
     * <tr><td>orderby</td><td>String</td><td>No</td><td>The aggregation to use for sorting results and the direction of
     * the sort.
     * Only one order can be specified.
     * *Examples: sum asc*</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>The filter is used to reduce the set of metric data
     * returned.&lt;br&gt;Example:&lt;br&gt;Metric contains metadata A, B and C.&lt;br&gt;- Return all
     * time series of C where A = a1 and B = b1 or b2&lt;br&gt;**filter=A eq ‘a1’ and B eq
     * ‘b1’ or B eq ‘b2’ and C eq ‘*’**&lt;br&gt;- Invalid variant:&lt;br&gt;**filter=A eq ‘a1’
     * and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**&lt;br&gt;This is invalid because the logical
     * or operator cannot separate two different metadata names.&lt;br&gt;- Return all time
     * series where A = a1, B = b1 and C = c1:&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ and
     * C eq ‘c1’**&lt;br&gt;- Return all time series where A = a1&lt;br&gt;**filter=A eq ‘a1’ and
     * B eq ‘*’ and C eq ‘*’**.</td></tr>
     * <tr><td>rollupby</td><td>String</td><td>No</td><td>Dimension name(s) to rollup results by. For example if you
     * only want to see
     * metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't
     * want to see separate values for each city, you can specify 'RollUpBy=City' to
     * see the results for Seattle and Tacoma rolled up into one timeseries.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     resourceids (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     values (Optional): [
     *          (Optional){
     *             starttime: String (Required)
     *             endtime: String (Required)
     *             interval: String (Optional)
     *             namespace: String (Optional)
     *             resourceregion: String (Optional)
     *             resourceid: String (Optional)
     *             value (Required): [
     *                  (Required){
     *                     id: String (Required)
     *                     type: String (Required)
     *                     name (Required): {
     *                         value: String (Required)
     *                         localizedValue: String (Optional)
     *                     }
     *                     displayDescription: String (Optional)
     *                     errorCode: String (Optional)
     *                     errorMessage: String (Optional)
     *                     unit: String(Count/Bytes/Seconds/CountPerSecond/BytesPerSecond/Percent/MilliSeconds/ByteSeconds/Unspecified/Cores/MilliCores/NanoCores/BitsPerSecond) (Required)
     *                     timeseries (Required): [
     *                          (Required){
     *                             metadatavalues (Optional): [
     *                                  (Optional){
     *                                     name (Optional): (recursive schema, see name above)
     *                                     value: String (Optional)
     *                                 }
     *                             ]
     *                             data (Optional): [
     *                                  (Optional){
     *                                     timeStamp: OffsetDateTime (Required)
     *                                     average: Double (Optional)
     *                                     minimum: Double (Optional)
     *                                     maximum: Double (Optional)
     *                                     total: Double (Optional)
     *                                     count: Double (Optional)
     *                                 }
     *                             ]
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param subscriptionId The subscription identifier for the resources in this batch.
     * @param metricNamespace Metric namespace that contains the requested metric names.
     * @param metricNames The names of the metrics (comma separated) to retrieve.
     * @param batchRequest Metrics batch body including the list of resource ids.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the metrics result for a resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> queryResourcesWithResponseAsync(String subscriptionId, String metricNamespace,
        List<String> metricNames, BinaryData batchRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        String metricNamesConverted = metricNames.stream()
            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
            .collect(Collectors.joining(","));
        return FluxUtil.withContext(
            context -> service.queryResources(this.getEndpoint(), this.getServiceVersion().getVersion(), subscriptionId,
                metricNamespace, metricNamesConverted, contentType, accept, batchRequest, requestOptions, context));
    }

    /**
     * Lists the metric values for multiple resources.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>starttime</td><td>String</td><td>No</td><td>The start time of the query. It is a string in the format
     * 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have specified the endtime parameter, then
     * this parameter is required.
     * If only starttime is specified, then endtime defaults to the current time.
     * If no time interval is specified, the default is 1 hour.</td></tr>
     * <tr><td>endtime</td><td>String</td><td>No</td><td>The end time of the query. It is a string in the format
     * 'yyyy-MM-ddTHH:mm:ss.fffZ'.</td></tr>
     * <tr><td>interval</td><td>String</td><td>No</td><td>The interval (i.e. timegrain) of the query in ISO 8601
     * duration format.
     * Defaults to PT1M. Special case for 'FULL' value that returns single datapoint
     * for entire time span requested.
     * *Examples: PT15M, PT1H, P1D, FULL*</td></tr>
     * <tr><td>aggregation</td><td>String</td><td>No</td><td>The list of aggregation types (comma separated) to
     * retrieve. *Examples: average, minimum, maximum*</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The maximum number of records to retrieve per resource ID in the
     * request.
     * Valid only if filter is specified.
     * Defaults to 10.</td></tr>
     * <tr><td>orderby</td><td>String</td><td>No</td><td>The aggregation to use for sorting results and the direction of
     * the sort.
     * Only one order can be specified.
     * *Examples: sum asc*</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>The filter is used to reduce the set of metric data
     * returned.&lt;br&gt;Example:&lt;br&gt;Metric contains metadata A, B and C.&lt;br&gt;- Return all
     * time series of C where A = a1 and B = b1 or b2&lt;br&gt;**filter=A eq ‘a1’ and B eq
     * ‘b1’ or B eq ‘b2’ and C eq ‘*’**&lt;br&gt;- Invalid variant:&lt;br&gt;**filter=A eq ‘a1’
     * and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**&lt;br&gt;This is invalid because the logical
     * or operator cannot separate two different metadata names.&lt;br&gt;- Return all time
     * series where A = a1, B = b1 and C = c1:&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ and
     * C eq ‘c1’**&lt;br&gt;- Return all time series where A = a1&lt;br&gt;**filter=A eq ‘a1’ and
     * B eq ‘*’ and C eq ‘*’**.</td></tr>
     * <tr><td>rollupby</td><td>String</td><td>No</td><td>Dimension name(s) to rollup results by. For example if you
     * only want to see
     * metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't
     * want to see separate values for each city, you can specify 'RollUpBy=City' to
     * see the results for Seattle and Tacoma rolled up into one timeseries.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     resourceids (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     values (Optional): [
     *          (Optional){
     *             starttime: String (Required)
     *             endtime: String (Required)
     *             interval: String (Optional)
     *             namespace: String (Optional)
     *             resourceregion: String (Optional)
     *             resourceid: String (Optional)
     *             value (Required): [
     *                  (Required){
     *                     id: String (Required)
     *                     type: String (Required)
     *                     name (Required): {
     *                         value: String (Required)
     *                         localizedValue: String (Optional)
     *                     }
     *                     displayDescription: String (Optional)
     *                     errorCode: String (Optional)
     *                     errorMessage: String (Optional)
     *                     unit: String(Count/Bytes/Seconds/CountPerSecond/BytesPerSecond/Percent/MilliSeconds/ByteSeconds/Unspecified/Cores/MilliCores/NanoCores/BitsPerSecond) (Required)
     *                     timeseries (Required): [
     *                          (Required){
     *                             metadatavalues (Optional): [
     *                                  (Optional){
     *                                     name (Optional): (recursive schema, see name above)
     *                                     value: String (Optional)
     *                                 }
     *                             ]
     *                             data (Optional): [
     *                                  (Optional){
     *                                     timeStamp: OffsetDateTime (Required)
     *                                     average: Double (Optional)
     *                                     minimum: Double (Optional)
     *                                     maximum: Double (Optional)
     *                                     total: Double (Optional)
     *                                     count: Double (Optional)
     *                                 }
     *                             ]
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }
     * </pre>
     * 
     * @param subscriptionId The subscription identifier for the resources in this batch.
     * @param metricNamespace Metric namespace that contains the requested metric names.
     * @param metricNames The names of the metrics (comma separated) to retrieve.
     * @param batchRequest Metrics batch body including the list of resource ids.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the metrics result for a resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> queryResourcesWithResponse(String subscriptionId, String metricNamespace,
        List<String> metricNames, BinaryData batchRequest, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        String metricNamesConverted = metricNames.stream()
            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
            .collect(Collectors.joining(","));
        return service.queryResourcesSync(this.getEndpoint(), this.getServiceVersion().getVersion(), subscriptionId,
            metricNamespace, metricNamesConverted, contentType, accept, batchRequest, requestOptions, Context.NONE);
    }
}
