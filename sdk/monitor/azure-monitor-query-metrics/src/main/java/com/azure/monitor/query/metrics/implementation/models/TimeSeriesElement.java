// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.monitor.query.metrics.implementation.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.monitor.query.metrics.models.MetricValue;
import java.io.IOException;
import java.util.List;

/**
 * A time series result type. The discriminator value is always TimeSeries in this
 * case.
 */
@Immutable
public final class TimeSeriesElement implements JsonSerializable<TimeSeriesElement> {

    /*
     * The metadata values returned if $filter was specified in the call.
     */
    @Generated
    private List<MetadataValue> metadatavalues;

    /*
     * An array of data points representing the metric values. This is only returned
     * if a result type of data is specified.
     */
    @Generated
    private List<MetricValue> data;

    /**
     * Creates an instance of TimeSeriesElement class.
     */
    @Generated
    private TimeSeriesElement() {
    }

    /**
     * Get the metadatavalues property: The metadata values returned if $filter was specified in the call.
     *
     * @return the metadatavalues value.
     */
    @Generated
    public List<MetadataValue> getMetadatavalues() {
        return this.metadatavalues;
    }

    /**
     * Get the data property: An array of data points representing the metric values. This is only returned
     * if a result type of data is specified.
     *
     * @return the data value.
     */
    @Generated
    public List<MetricValue> getData() {
        return this.data;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("metadatavalues", this.metadatavalues,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("data", this.data, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TimeSeriesElement from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TimeSeriesElement if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TimeSeriesElement.
     */
    @Generated
    public static TimeSeriesElement fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TimeSeriesElement deserializedTimeSeriesElement = new TimeSeriesElement();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("metadatavalues".equals(fieldName)) {
                    List<MetadataValue> metadatavalues = reader.readArray(reader1 -> MetadataValue.fromJson(reader1));
                    deserializedTimeSeriesElement.metadatavalues = metadatavalues;
                } else if ("data".equals(fieldName)) {
                    List<MetricValue> data = reader.readArray(reader1 -> MetricValue.fromJson(reader1));
                    deserializedTimeSeriesElement.data = data;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedTimeSeriesElement;
        });
    }
}
