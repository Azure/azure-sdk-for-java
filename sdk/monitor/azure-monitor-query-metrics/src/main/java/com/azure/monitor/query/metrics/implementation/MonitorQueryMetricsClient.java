// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.monitor.query.metrics.implementation;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.monitor.query.metrics.implementation.models.MetricResultsResponse;
import com.azure.monitor.query.metrics.implementation.models.ResourceIdList;
import java.util.List;

/**
 * Initializes a new instance of the synchronous MonitorQueryMetricsClient type.
 */
@ServiceClient(builder = MonitorQueryMetricsClientBuilder.class)
public final class MonitorQueryMetricsClient {

    @Generated
    private final MonitorQueryMetricsClientImpl serviceClient;

    /**
     * Initializes an instance of MonitorQueryMetricsClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    MonitorQueryMetricsClient(MonitorQueryMetricsClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Lists the metric values for multiple resources.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>starttime</td><td>String</td><td>No</td><td>The start time of the query. It is a string in the format
     * 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have specified the endtime parameter, then
     * this parameter is required.
     * If only starttime is specified, then endtime defaults to the current time.
     * If no time interval is specified, the default is 1 hour.</td></tr>
     * <tr><td>endtime</td><td>String</td><td>No</td><td>The end time of the query. It is a string in the format
     * 'yyyy-MM-ddTHH:mm:ss.fffZ'.</td></tr>
     * <tr><td>interval</td><td>String</td><td>No</td><td>The interval (i.e. timegrain) of the query in ISO 8601
     * duration format.
     * Defaults to PT1M. Special case for 'FULL' value that returns single datapoint
     * for entire time span requested.
     * *Examples: PT15M, PT1H, P1D, FULL*</td></tr>
     * <tr><td>aggregation</td><td>String</td><td>No</td><td>The list of aggregation types (comma separated) to
     * retrieve. *Examples: average, minimum, maximum*</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The maximum number of records to retrieve per resource ID in the
     * request.
     * Valid only if filter is specified.
     * Defaults to 10.</td></tr>
     * <tr><td>orderby</td><td>String</td><td>No</td><td>The aggregation to use for sorting results and the direction of
     * the sort.
     * Only one order can be specified.
     * *Examples: sum asc*</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>The filter is used to reduce the set of metric data
     * returned.&lt;br&gt;Example:&lt;br&gt;Metric contains metadata A, B and C.&lt;br&gt;- Return all
     * time series of C where A = a1 and B = b1 or b2&lt;br&gt;**filter=A eq ‘a1’ and B eq
     * ‘b1’ or B eq ‘b2’ and C eq ‘*’**&lt;br&gt;- Invalid variant:&lt;br&gt;**filter=A eq ‘a1’
     * and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**&lt;br&gt;This is invalid because the logical
     * or operator cannot separate two different metadata names.&lt;br&gt;- Return all time
     * series where A = a1, B = b1 and C = c1:&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ and
     * C eq ‘c1’**&lt;br&gt;- Return all time series where A = a1&lt;br&gt;**filter=A eq ‘a1’ and
     * B eq ‘*’ and C eq ‘*’**.</td></tr>
     * <tr><td>rollupby</td><td>String</td><td>No</td><td>Dimension name(s) to rollup results by. For example if you
     * only want to see
     * metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't
     * want to see separate values for each city, you can specify 'RollUpBy=City' to
     * see the results for Seattle and Tacoma rolled up into one timeseries.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     resourceids (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     values (Optional): [
     *          (Optional){
     *             starttime: String (Required)
     *             endtime: String (Required)
     *             interval: String (Optional)
     *             namespace: String (Optional)
     *             resourceregion: String (Optional)
     *             resourceid: String (Optional)
     *             value (Required): [
     *                  (Required){
     *                     id: String (Required)
     *                     type: String (Required)
     *                     name (Required): {
     *                         value: String (Required)
     *                         localizedValue: String (Optional)
     *                     }
     *                     displayDescription: String (Optional)
     *                     errorCode: String (Optional)
     *                     errorMessage: String (Optional)
     *                     unit: String(Count/Bytes/Seconds/CountPerSecond/BytesPerSecond/Percent/MilliSeconds/ByteSeconds/Unspecified/Cores/MilliCores/NanoCores/BitsPerSecond) (Required)
     *                     timeseries (Required): [
     *                          (Required){
     *                             metadatavalues (Optional): [
     *                                  (Optional){
     *                                     name (Optional): (recursive schema, see name above)
     *                                     value: String (Optional)
     *                                 }
     *                             ]
     *                             data (Optional): [
     *                                  (Optional){
     *                                     timeStamp: OffsetDateTime (Required)
     *                                     average: Double (Optional)
     *                                     minimum: Double (Optional)
     *                                     maximum: Double (Optional)
     *                                     total: Double (Optional)
     *                                     count: Double (Optional)
     *                                 }
     *                             ]
     *                         }
     *                     ]
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }
     * </pre>
     *
     * @param subscriptionId The subscription identifier for the resources in this batch.
     * @param metricNamespace Metric namespace that contains the requested metric names.
     * @param metricNames The names of the metrics (comma separated) to retrieve.
     * @param batchRequest Metrics batch body including the list of resource ids.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the metrics result for a resource along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> queryResourcesWithResponse(String subscriptionId, String metricNamespace,
        List<String> metricNames, BinaryData batchRequest, RequestOptions requestOptions) {
        return this.serviceClient.queryResourcesWithResponse(subscriptionId, metricNamespace, metricNames, batchRequest,
            requestOptions);
    }

    /**
     * Lists the metric values for multiple resources.
     *
     * @param subscriptionId The subscription identifier for the resources in this batch.
     * @param metricNamespace Metric namespace that contains the requested metric names.
     * @param metricNames The names of the metrics (comma separated) to retrieve.
     * @param batchRequest Metrics batch body including the list of resource ids.
     * @param startTime The start time of the query. It is a string in the format
     * 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have specified the endtime parameter, then
     * this parameter is required.
     * If only starttime is specified, then endtime defaults to the current time.
     * If no time interval is specified, the default is 1 hour.
     * @param endTime The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'.
     * @param interval The interval (i.e. timegrain) of the query in ISO 8601 duration format.
     * Defaults to PT1M. Special case for 'FULL' value that returns single datapoint
     * for entire time span requested.
     * *Examples: PT15M, PT1H, P1D, FULL*.
     * @param aggregation The list of aggregation types (comma separated) to retrieve. *Examples: average, minimum,
     * maximum*.
     * @param top The maximum number of records to retrieve per resource ID in the request.
     * Valid only if filter is specified.
     * Defaults to 10.
     * @param orderBy The aggregation to use for sorting results and the direction of the sort.
     * Only one order can be specified.
     * *Examples: sum asc*.
     * @param filter The filter is used to reduce the set of metric data
     * returned.&lt;br&gt;Example:&lt;br&gt;Metric contains metadata A, B and C.&lt;br&gt;- Return all
     * time series of C where A = a1 and B = b1 or b2&lt;br&gt;**filter=A eq ‘a1’ and B eq
     * ‘b1’ or B eq ‘b2’ and C eq ‘*’**&lt;br&gt;- Invalid variant:&lt;br&gt;**filter=A eq ‘a1’
     * and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**&lt;br&gt;This is invalid because the logical
     * or operator cannot separate two different metadata names.&lt;br&gt;- Return all time
     * series where A = a1, B = b1 and C = c1:&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ and
     * C eq ‘c1’**&lt;br&gt;- Return all time series where A = a1&lt;br&gt;**filter=A eq ‘a1’ and
     * B eq ‘*’ and C eq ‘*’**.
     * @param rollUpBy Dimension name(s) to rollup results by. For example if you only want to see
     * metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't
     * want to see separate values for each city, you can specify 'RollUpBy=City' to
     * see the results for Seattle and Tacoma rolled up into one timeseries.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the metrics result for a resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MetricResultsResponse queryResources(String subscriptionId, String metricNamespace, List<String> metricNames,
        ResourceIdList batchRequest, String startTime, String endTime, String interval, String aggregation, Integer top,
        String orderBy, String filter, String rollUpBy) {
        // Generated convenience method for queryResourcesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (startTime != null) {
            requestOptions.addQueryParam("starttime", startTime, false);
        }
        if (endTime != null) {
            requestOptions.addQueryParam("endtime", endTime, false);
        }
        if (interval != null) {
            requestOptions.addQueryParam("interval", interval, false);
        }
        if (aggregation != null) {
            requestOptions.addQueryParam("aggregation", aggregation, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (orderBy != null) {
            requestOptions.addQueryParam("orderby", orderBy, false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        if (rollUpBy != null) {
            requestOptions.addQueryParam("rollupby", rollUpBy, false);
        }
        return queryResourcesWithResponse(subscriptionId, metricNamespace, metricNames,
            BinaryData.fromObject(batchRequest), requestOptions).getValue().toObject(MetricResultsResponse.class);
    }

    /**
     * Lists the metric values for multiple resources.
     *
     * @param subscriptionId The subscription identifier for the resources in this batch.
     * @param metricNamespace Metric namespace that contains the requested metric names.
     * @param metricNames The names of the metrics (comma separated) to retrieve.
     * @param batchRequest Metrics batch body including the list of resource ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the metrics result for a resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MetricResultsResponse queryResources(String subscriptionId, String metricNamespace, List<String> metricNames,
        ResourceIdList batchRequest) {
        // Generated convenience method for queryResourcesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return queryResourcesWithResponse(subscriptionId, metricNamespace, metricNames,
            BinaryData.fromObject(batchRequest), requestOptions).getValue().toObject(MetricResultsResponse.class);
    }
}
