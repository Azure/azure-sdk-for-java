// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.opentelemetry.exporter.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Exception details of the exception in a chain.
 */
@Fluent
public final class TelemetryExceptionDetails implements JsonSerializable<TelemetryExceptionDetails> {
    /*
     * In case exception is nested (outer exception contains inner one), the id and outerId properties are used to represent the nesting.
     */
    private Integer id;

    /*
     * The value of outerId is a reference to an element in ExceptionDetails that represents the outer exception
     */
    private Integer outerId;

    /*
     * Exception type name.
     */
    private String typeName;

    /*
     * Exception message.
     */
    private String message;

    /*
     * Indicates if full exception stack is provided in the exception. The stack may be trimmed, such as in the case of a StackOverflow exception.
     */
    private Boolean hasFullStack;

    /*
     * Text describing the stack. Either stack or parsedStack should have a value.
     */
    private String stack;

    /*
     * List of stack frames. Either stack or parsedStack should have a value.
     */
    private List<StackFrame> parsedStack;

    /**
     * Creates an instance of TelemetryExceptionDetails class.
     */
    public TelemetryExceptionDetails() {
    }

    /**
     * Get the id property: In case exception is nested (outer exception contains inner one), the id and outerId
     * properties are used to represent the nesting.
     *
     * @return the id value.
     */
    public Integer getId() {
        return this.id;
    }

    /**
     * Set the id property: In case exception is nested (outer exception contains inner one), the id and outerId
     * properties are used to represent the nesting.
     *
     * @param id the id value to set.
     * @return the TelemetryExceptionDetails object itself.
     */
    public TelemetryExceptionDetails setId(Integer id) {
        this.id = id;
        return this;
    }

    /**
     * Get the outerId property: The value of outerId is a reference to an element in ExceptionDetails that represents
     * the outer exception.
     *
     * @return the outerId value.
     */
    public Integer getOuterId() {
        return this.outerId;
    }

    /**
     * Set the outerId property: The value of outerId is a reference to an element in ExceptionDetails that represents
     * the outer exception.
     *
     * @param outerId the outerId value to set.
     * @return the TelemetryExceptionDetails object itself.
     */
    public TelemetryExceptionDetails setOuterId(Integer outerId) {
        this.outerId = outerId;
        return this;
    }

    /**
     * Get the typeName property: Exception type name.
     *
     * @return the typeName value.
     */
    public String getTypeName() {
        return this.typeName;
    }

    /**
     * Set the typeName property: Exception type name.
     *
     * @param typeName the typeName value to set.
     * @return the TelemetryExceptionDetails object itself.
     */
    public TelemetryExceptionDetails setTypeName(String typeName) {
        this.typeName = typeName;
        return this;
    }

    /**
     * Get the message property: Exception message.
     *
     * @return the message value.
     */
    public String getMessage() {
        return this.message;
    }

    /**
     * Set the message property: Exception message.
     *
     * @param message the message value to set.
     * @return the TelemetryExceptionDetails object itself.
     */
    public TelemetryExceptionDetails setMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the hasFullStack property: Indicates if full exception stack is provided in the exception. The stack may be
     * trimmed, such as in the case of a StackOverflow exception.
     *
     * @return the hasFullStack value.
     */
    public Boolean isHasFullStack() {
        return this.hasFullStack;
    }

    /**
     * Set the hasFullStack property: Indicates if full exception stack is provided in the exception. The stack may be
     * trimmed, such as in the case of a StackOverflow exception.
     *
     * @param hasFullStack the hasFullStack value to set.
     * @return the TelemetryExceptionDetails object itself.
     */
    public TelemetryExceptionDetails setHasFullStack(Boolean hasFullStack) {
        this.hasFullStack = hasFullStack;
        return this;
    }

    /**
     * Get the stack property: Text describing the stack. Either stack or parsedStack should have a value.
     *
     * @return the stack value.
     */
    public String getStack() {
        return this.stack;
    }

    /**
     * Set the stack property: Text describing the stack. Either stack or parsedStack should have a value.
     *
     * @param stack the stack value to set.
     * @return the TelemetryExceptionDetails object itself.
     */
    public TelemetryExceptionDetails setStack(String stack) {
        this.stack = stack;
        return this;
    }

    /**
     * Get the parsedStack property: List of stack frames. Either stack or parsedStack should have a value.
     *
     * @return the parsedStack value.
     */
    public List<StackFrame> getParsedStack() {
        return this.parsedStack;
    }

    /**
     * Set the parsedStack property: List of stack frames. Either stack or parsedStack should have a value.
     *
     * @param parsedStack the parsedStack value to set.
     * @return the TelemetryExceptionDetails object itself.
     */
    public TelemetryExceptionDetails setParsedStack(List<StackFrame> parsedStack) {
        this.parsedStack = parsedStack;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeNumberField("id", this.id);
        jsonWriter.writeNumberField("outerId", this.outerId);
        jsonWriter.writeStringField("typeName", this.typeName);
        jsonWriter.writeBooleanField("hasFullStack", this.hasFullStack);
        jsonWriter.writeStringField("stack", this.stack);
        jsonWriter.writeArrayField("parsedStack", this.parsedStack, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TelemetryExceptionDetails from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TelemetryExceptionDetails if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TelemetryExceptionDetails.
     */
    public static TelemetryExceptionDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TelemetryExceptionDetails deserializedTelemetryExceptionDetails = new TelemetryExceptionDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("message".equals(fieldName)) {
                    deserializedTelemetryExceptionDetails.message = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedTelemetryExceptionDetails.id = reader.getNullable(JsonReader::getInt);
                } else if ("outerId".equals(fieldName)) {
                    deserializedTelemetryExceptionDetails.outerId = reader.getNullable(JsonReader::getInt);
                } else if ("typeName".equals(fieldName)) {
                    deserializedTelemetryExceptionDetails.typeName = reader.getString();
                } else if ("hasFullStack".equals(fieldName)) {
                    deserializedTelemetryExceptionDetails.hasFullStack = reader.getNullable(JsonReader::getBoolean);
                } else if ("stack".equals(fieldName)) {
                    deserializedTelemetryExceptionDetails.stack = reader.getString();
                } else if ("parsedStack".equals(fieldName)) {
                    List<StackFrame> parsedStack = reader.readArray(reader1 -> StackFrame.fromJson(reader1));
                    deserializedTelemetryExceptionDetails.parsedStack = parsedStack;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTelemetryExceptionDetails;
        });
    }
}
