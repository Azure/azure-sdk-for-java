// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.opentelemetry.exporter.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * An instance of PageViewPerf represents: a page view with no performance data, a page view with performance data, or
 * just the performance data of an earlier page request.
 */
@Fluent
public final class PageViewPerfData extends MonitorDomain {
    /*
     * Identifier of a page view instance. Used for correlation between page view and other telemetry items.
     */
    private String id;

    /*
     * Event name. Keep it low cardinality to allow proper grouping and useful metrics.
     */
    private String name;

    /*
     * Request URL with all query string parameters
     */
    private String url;

    /*
     * Request duration in format: DD.HH:MM:SS.MMMMMM. For a page view (PageViewData), this is the duration. For a page view with performance information (PageViewPerfData), this is the page load time. Must be less than 1000 days.
     */
    private String duration;

    /*
     * Performance total in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff
     */
    private String perfTotal;

    /*
     * Network connection time in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff
     */
    private String networkConnect;

    /*
     * Sent request time in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff
     */
    private String sentRequest;

    /*
     * Received response time in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff
     */
    private String receivedResponse;

    /*
     * DOM processing time in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff
     */
    private String domProcessing;

    /*
     * Collection of custom properties.
     */
    private Map<String, String> properties;

    /*
     * Collection of custom measurements.
     */
    private Map<String, Double> measurements;

    /**
     * Creates an instance of PageViewPerfData class.
     */
    public PageViewPerfData() {
    }

    /**
     * Get the id property: Identifier of a page view instance. Used for correlation between page view and other
     * telemetry items.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: Identifier of a page view instance. Used for correlation between page view and other
     * telemetry items.
     *
     * @param id the id value to set.
     * @return the PageViewPerfData object itself.
     */
    public PageViewPerfData setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Event name. Keep it low cardinality to allow proper grouping and useful metrics.
     *
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Event name. Keep it low cardinality to allow proper grouping and useful metrics.
     *
     * @param name the name value to set.
     * @return the PageViewPerfData object itself.
     */
    public PageViewPerfData setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the url property: Request URL with all query string parameters.
     *
     * @return the url value.
     */
    public String getUrl() {
        return this.url;
    }

    /**
     * Set the url property: Request URL with all query string parameters.
     *
     * @param url the url value to set.
     * @return the PageViewPerfData object itself.
     */
    public PageViewPerfData setUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Get the duration property: Request duration in format: DD.HH:MM:SS.MMMMMM. For a page view (PageViewData), this
     * is the duration. For a page view with performance information (PageViewPerfData), this is the page load time.
     * Must be less than 1000 days.
     *
     * @return the duration value.
     */
    public String getDuration() {
        return this.duration;
    }

    /**
     * Set the duration property: Request duration in format: DD.HH:MM:SS.MMMMMM. For a page view (PageViewData), this
     * is the duration. For a page view with performance information (PageViewPerfData), this is the page load time.
     * Must be less than 1000 days.
     *
     * @param duration the duration value to set.
     * @return the PageViewPerfData object itself.
     */
    public PageViewPerfData setDuration(String duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get the perfTotal property: Performance total in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff.
     *
     * @return the perfTotal value.
     */
    public String getPerfTotal() {
        return this.perfTotal;
    }

    /**
     * Set the perfTotal property: Performance total in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff.
     *
     * @param perfTotal the perfTotal value to set.
     * @return the PageViewPerfData object itself.
     */
    public PageViewPerfData setPerfTotal(String perfTotal) {
        this.perfTotal = perfTotal;
        return this;
    }

    /**
     * Get the networkConnect property: Network connection time in TimeSpan 'G' (general long) format:
     * d:hh:mm:ss.fffffff.
     *
     * @return the networkConnect value.
     */
    public String getNetworkConnect() {
        return this.networkConnect;
    }

    /**
     * Set the networkConnect property: Network connection time in TimeSpan 'G' (general long) format:
     * d:hh:mm:ss.fffffff.
     *
     * @param networkConnect the networkConnect value to set.
     * @return the PageViewPerfData object itself.
     */
    public PageViewPerfData setNetworkConnect(String networkConnect) {
        this.networkConnect = networkConnect;
        return this;
    }

    /**
     * Get the sentRequest property: Sent request time in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff.
     *
     * @return the sentRequest value.
     */
    public String getSentRequest() {
        return this.sentRequest;
    }

    /**
     * Set the sentRequest property: Sent request time in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff.
     *
     * @param sentRequest the sentRequest value to set.
     * @return the PageViewPerfData object itself.
     */
    public PageViewPerfData setSentRequest(String sentRequest) {
        this.sentRequest = sentRequest;
        return this;
    }

    /**
     * Get the receivedResponse property: Received response time in TimeSpan 'G' (general long) format:
     * d:hh:mm:ss.fffffff.
     *
     * @return the receivedResponse value.
     */
    public String getReceivedResponse() {
        return this.receivedResponse;
    }

    /**
     * Set the receivedResponse property: Received response time in TimeSpan 'G' (general long) format:
     * d:hh:mm:ss.fffffff.
     *
     * @param receivedResponse the receivedResponse value to set.
     * @return the PageViewPerfData object itself.
     */
    public PageViewPerfData setReceivedResponse(String receivedResponse) {
        this.receivedResponse = receivedResponse;
        return this;
    }

    /**
     * Get the domProcessing property: DOM processing time in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff.
     *
     * @return the domProcessing value.
     */
    public String getDomProcessing() {
        return this.domProcessing;
    }

    /**
     * Set the domProcessing property: DOM processing time in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff.
     *
     * @param domProcessing the domProcessing value to set.
     * @return the PageViewPerfData object itself.
     */
    public PageViewPerfData setDomProcessing(String domProcessing) {
        this.domProcessing = domProcessing;
        return this;
    }

    /**
     * Get the properties property: Collection of custom properties.
     *
     * @return the properties value.
     */
    public Map<String, String> getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: Collection of custom properties.
     *
     * @param properties the properties value to set.
     * @return the PageViewPerfData object itself.
     */
    public PageViewPerfData setProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the measurements property: Collection of custom measurements.
     *
     * @return the measurements value.
     */
    public Map<String, Double> getMeasurements() {
        return this.measurements;
    }

    /**
     * Set the measurements property: Collection of custom measurements.
     *
     * @param measurements the measurements value to set.
     * @return the PageViewPerfData object itself.
     */
    public PageViewPerfData setMeasurements(Map<String, Double> measurements) {
        this.measurements = measurements;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PageViewPerfData setVersion(int version) {
        super.setVersion(version);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("ver", getVersion());
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("duration", this.duration);
        jsonWriter.writeStringField("perfTotal", this.perfTotal);
        jsonWriter.writeStringField("networkConnect", this.networkConnect);
        jsonWriter.writeStringField("sentRequest", this.sentRequest);
        jsonWriter.writeStringField("receivedResponse", this.receivedResponse);
        jsonWriter.writeStringField("domProcessing", this.domProcessing);
        jsonWriter.writeMapField("properties", this.properties, JsonWriter::writeString);
        jsonWriter.writeMapField("measurements", this.measurements, JsonWriter::writeDouble);
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PageViewPerfData from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of PageViewPerfData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PageViewPerfData.
     */
    public static PageViewPerfData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PageViewPerfData deserializedPageViewPerfData = new PageViewPerfData();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ver".equals(fieldName)) {
                    deserializedPageViewPerfData.setVersion(reader.getInt());
                } else if ("id".equals(fieldName)) {
                    deserializedPageViewPerfData.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedPageViewPerfData.name = reader.getString();
                } else if ("url".equals(fieldName)) {
                    deserializedPageViewPerfData.url = reader.getString();
                } else if ("duration".equals(fieldName)) {
                    deserializedPageViewPerfData.duration = reader.getString();
                } else if ("perfTotal".equals(fieldName)) {
                    deserializedPageViewPerfData.perfTotal = reader.getString();
                } else if ("networkConnect".equals(fieldName)) {
                    deserializedPageViewPerfData.networkConnect = reader.getString();
                } else if ("sentRequest".equals(fieldName)) {
                    deserializedPageViewPerfData.sentRequest = reader.getString();
                } else if ("receivedResponse".equals(fieldName)) {
                    deserializedPageViewPerfData.receivedResponse = reader.getString();
                } else if ("domProcessing".equals(fieldName)) {
                    deserializedPageViewPerfData.domProcessing = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedPageViewPerfData.properties = reader.readMap(JsonReader::getString);
                } else if ("measurements".equals(fieldName)) {
                    deserializedPageViewPerfData.measurements = reader.readMap(JsonReader::getDouble);
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedPageViewPerfData.setAdditionalProperties(additionalProperties);

            return deserializedPageViewPerfData;
        });
    }
}
