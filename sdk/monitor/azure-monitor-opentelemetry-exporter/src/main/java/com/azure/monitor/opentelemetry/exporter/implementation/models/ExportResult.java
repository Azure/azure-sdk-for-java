// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.opentelemetry.exporter.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Response containing the status of each telemetry item.
 */
@Fluent
public final class ExportResult implements JsonSerializable<ExportResult> {
    /*
     * The number of items received.
     */
    private Integer itemsReceived;

    /*
     * The number of items accepted.
     */
    private Integer itemsAccepted;

    /*
     * An array of error detail objects.
     */
    private List<TelemetryErrorDetails> errors;

    /**
     * Creates an instance of ExportResult class.
     */
    public ExportResult() {
    }

    /**
     * Get the itemsReceived property: The number of items received.
     *
     * @return the itemsReceived value.
     */
    public Integer getItemsReceived() {
        return this.itemsReceived;
    }

    /**
     * Set the itemsReceived property: The number of items received.
     *
     * @param itemsReceived the itemsReceived value to set.
     * @return the ExportResult object itself.
     */
    public ExportResult setItemsReceived(Integer itemsReceived) {
        this.itemsReceived = itemsReceived;
        return this;
    }

    /**
     * Get the itemsAccepted property: The number of items accepted.
     *
     * @return the itemsAccepted value.
     */
    public Integer getItemsAccepted() {
        return this.itemsAccepted;
    }

    /**
     * Set the itemsAccepted property: The number of items accepted.
     *
     * @param itemsAccepted the itemsAccepted value to set.
     * @return the ExportResult object itself.
     */
    public ExportResult setItemsAccepted(Integer itemsAccepted) {
        this.itemsAccepted = itemsAccepted;
        return this;
    }

    /**
     * Get the errors property: An array of error detail objects.
     *
     * @return the errors value.
     */
    public List<TelemetryErrorDetails> getErrors() {
        return this.errors;
    }

    /**
     * Set the errors property: An array of error detail objects.
     *
     * @param errors the errors value to set.
     * @return the ExportResult object itself.
     */
    public ExportResult setErrors(List<TelemetryErrorDetails> errors) {
        this.errors = errors;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("itemsReceived", this.itemsReceived);
        jsonWriter.writeNumberField("itemsAccepted", this.itemsAccepted);
        jsonWriter.writeArrayField("errors", this.errors, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExportResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExportResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExportResult.
     */
    public static ExportResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExportResult deserializedExportResult = new ExportResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("itemsReceived".equals(fieldName)) {
                    deserializedExportResult.itemsReceived = reader.getNullable(JsonReader::getInt);
                } else if ("itemsAccepted".equals(fieldName)) {
                    deserializedExportResult.itemsAccepted = reader.getNullable(JsonReader::getInt);
                } else if ("errors".equals(fieldName)) {
                    List<TelemetryErrorDetails> errors
                        = reader.readArray(reader1 -> TelemetryErrorDetails.fromJson(reader1));
                    deserializedExportResult.errors = errors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExportResult;
        });
    }
}
