// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.opentelemetry.exporter.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Instances of AvailabilityData represent the result of executing an availability test.
 */
@Fluent
public final class AvailabilityData extends MonitorDomain {
    /*
     * Identifier of a test run. Use it to correlate steps of test run and telemetry generated by the service.
     */
    private String id;

    /*
     * Name of the test that these availability results represent.
     */
    private String name;

    /*
     * Duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days.
     */
    private String duration;

    /*
     * Success flag.
     */
    private boolean success;

    /*
     * Name of the location where the test was run from.
     */
    private String runLocation;

    /*
     * Diagnostic message for the result.
     */
    private String message;

    /*
     * Collection of custom properties.
     */
    private Map<String, String> properties;

    /*
     * Collection of custom measurements.
     */
    private Map<String, Double> measurements;

    /**
     * Creates an instance of AvailabilityData class.
     */
    public AvailabilityData() {
    }

    /**
     * Get the id property: Identifier of a test run. Use it to correlate steps of test run and telemetry generated by
     * the service.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: Identifier of a test run. Use it to correlate steps of test run and telemetry generated by
     * the service.
     *
     * @param id the id value to set.
     * @return the AvailabilityData object itself.
     */
    public AvailabilityData setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Name of the test that these availability results represent.
     *
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Name of the test that these availability results represent.
     *
     * @param name the name value to set.
     * @return the AvailabilityData object itself.
     */
    public AvailabilityData setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the duration property: Duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days.
     *
     * @return the duration value.
     */
    public String getDuration() {
        return this.duration;
    }

    /**
     * Set the duration property: Duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days.
     *
     * @param duration the duration value to set.
     * @return the AvailabilityData object itself.
     */
    public AvailabilityData setDuration(String duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get the success property: Success flag.
     *
     * @return the success value.
     */
    public boolean isSuccess() {
        return this.success;
    }

    /**
     * Set the success property: Success flag.
     *
     * @param success the success value to set.
     * @return the AvailabilityData object itself.
     */
    public AvailabilityData setSuccess(boolean success) {
        this.success = success;
        return this;
    }

    /**
     * Get the runLocation property: Name of the location where the test was run from.
     *
     * @return the runLocation value.
     */
    public String getRunLocation() {
        return this.runLocation;
    }

    /**
     * Set the runLocation property: Name of the location where the test was run from.
     *
     * @param runLocation the runLocation value to set.
     * @return the AvailabilityData object itself.
     */
    public AvailabilityData setRunLocation(String runLocation) {
        this.runLocation = runLocation;
        return this;
    }

    /**
     * Get the message property: Diagnostic message for the result.
     *
     * @return the message value.
     */
    public String getMessage() {
        return this.message;
    }

    /**
     * Set the message property: Diagnostic message for the result.
     *
     * @param message the message value to set.
     * @return the AvailabilityData object itself.
     */
    public AvailabilityData setMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Get the properties property: Collection of custom properties.
     *
     * @return the properties value.
     */
    public Map<String, String> getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: Collection of custom properties.
     *
     * @param properties the properties value to set.
     * @return the AvailabilityData object itself.
     */
    public AvailabilityData setProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the measurements property: Collection of custom measurements.
     *
     * @return the measurements value.
     */
    public Map<String, Double> getMeasurements() {
        return this.measurements;
    }

    /**
     * Set the measurements property: Collection of custom measurements.
     *
     * @param measurements the measurements value to set.
     * @return the AvailabilityData object itself.
     */
    public AvailabilityData setMeasurements(Map<String, Double> measurements) {
        this.measurements = measurements;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AvailabilityData setVersion(int version) {
        super.setVersion(version);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("ver", getVersion());
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("duration", this.duration);
        jsonWriter.writeBooleanField("success", this.success);
        jsonWriter.writeStringField("runLocation", this.runLocation);
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeMapField("properties", this.properties, JsonWriter::writeString);
        jsonWriter.writeMapField("measurements", this.measurements, JsonWriter::writeDouble);
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvailabilityData from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvailabilityData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AvailabilityData.
     */
    public static AvailabilityData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvailabilityData deserializedAvailabilityData = new AvailabilityData();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ver".equals(fieldName)) {
                    deserializedAvailabilityData.setVersion(reader.getInt());
                } else if ("id".equals(fieldName)) {
                    deserializedAvailabilityData.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAvailabilityData.name = reader.getString();
                } else if ("duration".equals(fieldName)) {
                    deserializedAvailabilityData.duration = reader.getString();
                } else if ("success".equals(fieldName)) {
                    deserializedAvailabilityData.success = reader.getBoolean();
                } else if ("runLocation".equals(fieldName)) {
                    deserializedAvailabilityData.runLocation = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedAvailabilityData.message = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedAvailabilityData.properties = reader.readMap(JsonReader::getString);
                } else if ("measurements".equals(fieldName)) {
                    deserializedAvailabilityData.measurements = reader.readMap(JsonReader::getDouble);
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedAvailabilityData.setAdditionalProperties(additionalProperties);

            return deserializedAvailabilityData;
        });
    }
}
