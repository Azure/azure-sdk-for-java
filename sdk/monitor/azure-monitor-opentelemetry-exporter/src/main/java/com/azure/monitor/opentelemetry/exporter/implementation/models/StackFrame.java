// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.opentelemetry.exporter.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Stack frame information.
 */
@Fluent
public final class StackFrame implements JsonSerializable<StackFrame> {
    /*
     * The level property.
     */
    private int level;

    /*
     * Method name.
     */
    private String method;

    /*
     * Name of the assembly (dll, jar, etc.) containing this function.
     */
    private String assembly;

    /*
     * File name or URL of the method implementation.
     */
    private String fileName;

    /*
     * Line number of the code implementation.
     */
    private Integer line;

    /**
     * Creates an instance of StackFrame class.
     */
    public StackFrame() {
    }

    /**
     * Get the level property: The level property.
     *
     * @return the level value.
     */
    public int getLevel() {
        return this.level;
    }

    /**
     * Set the level property: The level property.
     *
     * @param level the level value to set.
     * @return the StackFrame object itself.
     */
    public StackFrame setLevel(int level) {
        this.level = level;
        return this;
    }

    /**
     * Get the method property: Method name.
     *
     * @return the method value.
     */
    public String getMethod() {
        return this.method;
    }

    /**
     * Set the method property: Method name.
     *
     * @param method the method value to set.
     * @return the StackFrame object itself.
     */
    public StackFrame setMethod(String method) {
        this.method = method;
        return this;
    }

    /**
     * Get the assembly property: Name of the assembly (dll, jar, etc.) containing this function.
     *
     * @return the assembly value.
     */
    public String getAssembly() {
        return this.assembly;
    }

    /**
     * Set the assembly property: Name of the assembly (dll, jar, etc.) containing this function.
     *
     * @param assembly the assembly value to set.
     * @return the StackFrame object itself.
     */
    public StackFrame setAssembly(String assembly) {
        this.assembly = assembly;
        return this;
    }

    /**
     * Get the fileName property: File name or URL of the method implementation.
     *
     * @return the fileName value.
     */
    public String getFileName() {
        return this.fileName;
    }

    /**
     * Set the fileName property: File name or URL of the method implementation.
     *
     * @param fileName the fileName value to set.
     * @return the StackFrame object itself.
     */
    public StackFrame setFileName(String fileName) {
        this.fileName = fileName;
        return this;
    }

    /**
     * Get the line property: Line number of the code implementation.
     *
     * @return the line value.
     */
    public Integer getLine() {
        return this.line;
    }

    /**
     * Set the line property: Line number of the code implementation.
     *
     * @param line the line value to set.
     * @return the StackFrame object itself.
     */
    public StackFrame setLine(Integer line) {
        this.line = line;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("level", this.level);
        jsonWriter.writeStringField("method", this.method);
        jsonWriter.writeStringField("assembly", this.assembly);
        jsonWriter.writeStringField("fileName", this.fileName);
        jsonWriter.writeNumberField("line", this.line);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StackFrame from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of StackFrame if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StackFrame.
     */
    public static StackFrame fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StackFrame deserializedStackFrame = new StackFrame();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("level".equals(fieldName)) {
                    deserializedStackFrame.level = reader.getInt();
                } else if ("method".equals(fieldName)) {
                    deserializedStackFrame.method = reader.getString();
                } else if ("assembly".equals(fieldName)) {
                    deserializedStackFrame.assembly = reader.getString();
                } else if ("fileName".equals(fieldName)) {
                    deserializedStackFrame.fileName = reader.getString();
                } else if ("line".equals(fieldName)) {
                    deserializedStackFrame.line = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStackFrame;
        });
    }
}
