// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.monitor.opentelemetry.exporter.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * An instance of Request represents completion of an external request to the application to do work and contains a
 * summary of that request execution and the results.
 */
@Fluent
public final class RequestData extends MonitorDomain {
    /*
     * Identifier of a request call instance. Used for correlation between request and other telemetry items.
     */
    private String id;

    /*
     * Name of the request. Represents code path taken to process request. Low cardinality value to allow better grouping of requests. For HTTP requests it represents the HTTP method and URL path template like 'GET /values/{id}'.
     */
    private String name;

    /*
     * Request duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days.
     */
    private String duration;

    /*
     * Indication of successful or unsuccessful call.
     */
    private boolean success;

    /*
     * Result of a request execution. HTTP status code for HTTP requests.
     */
    private String responseCode;

    /*
     * Source of the request. Examples are the instrumentation key of the caller or the ip address of the caller.
     */
    private String source;

    /*
     * Request URL with all query string parameters.
     */
    private String url;

    /*
     * Collection of custom properties.
     */
    private Map<String, String> properties;

    /*
     * Collection of custom measurements.
     */
    private Map<String, Double> measurements;

    /**
     * Creates an instance of RequestData class.
     */
    public RequestData() {
    }

    /**
     * Get the id property: Identifier of a request call instance. Used for correlation between request and other
     * telemetry items.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: Identifier of a request call instance. Used for correlation between request and other
     * telemetry items.
     *
     * @param id the id value to set.
     * @return the RequestData object itself.
     */
    public RequestData setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: Name of the request. Represents code path taken to process request. Low cardinality value
     * to allow better grouping of requests. For HTTP requests it represents the HTTP method and URL path template like
     * 'GET /values/{id}'.
     *
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Name of the request. Represents code path taken to process request. Low cardinality value
     * to allow better grouping of requests. For HTTP requests it represents the HTTP method and URL path template like
     * 'GET /values/{id}'.
     *
     * @param name the name value to set.
     * @return the RequestData object itself.
     */
    public RequestData setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the duration property: Request duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days.
     *
     * @return the duration value.
     */
    public String getDuration() {
        return this.duration;
    }

    /**
     * Set the duration property: Request duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days.
     *
     * @param duration the duration value to set.
     * @return the RequestData object itself.
     */
    public RequestData setDuration(String duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get the success property: Indication of successful or unsuccessful call.
     *
     * @return the success value.
     */
    public boolean isSuccess() {
        return this.success;
    }

    /**
     * Set the success property: Indication of successful or unsuccessful call.
     *
     * @param success the success value to set.
     * @return the RequestData object itself.
     */
    public RequestData setSuccess(boolean success) {
        this.success = success;
        return this;
    }

    /**
     * Get the responseCode property: Result of a request execution. HTTP status code for HTTP requests.
     *
     * @return the responseCode value.
     */
    public String getResponseCode() {
        return this.responseCode;
    }

    /**
     * Set the responseCode property: Result of a request execution. HTTP status code for HTTP requests.
     *
     * @param responseCode the responseCode value to set.
     * @return the RequestData object itself.
     */
    public RequestData setResponseCode(String responseCode) {
        this.responseCode = responseCode;
        return this;
    }

    /**
     * Get the source property: Source of the request. Examples are the instrumentation key of the caller or the ip
     * address of the caller.
     *
     * @return the source value.
     */
    public String getSource() {
        return this.source;
    }

    /**
     * Set the source property: Source of the request. Examples are the instrumentation key of the caller or the ip
     * address of the caller.
     *
     * @param source the source value to set.
     * @return the RequestData object itself.
     */
    public RequestData setSource(String source) {
        this.source = source;
        return this;
    }

    /**
     * Get the url property: Request URL with all query string parameters.
     *
     * @return the url value.
     */
    public String getUrl() {
        return this.url;
    }

    /**
     * Set the url property: Request URL with all query string parameters.
     *
     * @param url the url value to set.
     * @return the RequestData object itself.
     */
    public RequestData setUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Get the properties property: Collection of custom properties.
     *
     * @return the properties value.
     */
    public Map<String, String> getProperties() {
        return this.properties;
    }

    /**
     * Set the properties property: Collection of custom properties.
     *
     * @param properties the properties value to set.
     * @return the RequestData object itself.
     */
    public RequestData setProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the measurements property: Collection of custom measurements.
     *
     * @return the measurements value.
     */
    public Map<String, Double> getMeasurements() {
        return this.measurements;
    }

    /**
     * Set the measurements property: Collection of custom measurements.
     *
     * @param measurements the measurements value to set.
     * @return the RequestData object itself.
     */
    public RequestData setMeasurements(Map<String, Double> measurements) {
        this.measurements = measurements;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RequestData setVersion(int version) {
        super.setVersion(version);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("ver", getVersion());
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("duration", this.duration);
        jsonWriter.writeBooleanField("success", this.success);
        jsonWriter.writeStringField("responseCode", this.responseCode);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("source", this.source);
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeMapField("properties", this.properties, JsonWriter::writeString);
        jsonWriter.writeMapField("measurements", this.measurements, JsonWriter::writeDouble);
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RequestData from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RequestData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RequestData.
     */
    public static RequestData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RequestData deserializedRequestData = new RequestData();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ver".equals(fieldName)) {
                    deserializedRequestData.setVersion(reader.getInt());
                } else if ("id".equals(fieldName)) {
                    deserializedRequestData.id = reader.getString();
                } else if ("duration".equals(fieldName)) {
                    deserializedRequestData.duration = reader.getString();
                } else if ("success".equals(fieldName)) {
                    deserializedRequestData.success = reader.getBoolean();
                } else if ("responseCode".equals(fieldName)) {
                    deserializedRequestData.responseCode = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedRequestData.name = reader.getString();
                } else if ("source".equals(fieldName)) {
                    deserializedRequestData.source = reader.getString();
                } else if ("url".equals(fieldName)) {
                    deserializedRequestData.url = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedRequestData.properties = reader.readMap(JsonReader::getString);
                } else if ("measurements".equals(fieldName)) {
                    deserializedRequestData.measurements = reader.readMap(JsonReader::getDouble);
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedRequestData.setAdditionalProperties(additionalProperties);

            return deserializedRequestData;
        });
    }
}
