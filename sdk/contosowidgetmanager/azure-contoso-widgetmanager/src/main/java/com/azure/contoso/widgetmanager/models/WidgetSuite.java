// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.contoso.widgetmanager.models;

import com.azure.contoso.widgetmanager.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * A widget.
 */
@Fluent
public final class WidgetSuite implements JsonSerializable<WidgetSuite> {
    /*
     * The widget name.
     */
    @Generated
    private String name;

    /*
     * The ID of the widget's manufacturer.
     */
    @Generated
    private String manufacturerId;

    /*
     * The faked shared model.
     */
    @Generated
    private FakedSharedModel sharedModel;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setWidgetSuiteAccessor(new JsonMergePatchHelper.WidgetSuiteAccessor() {
            @Override
            public WidgetSuite prepareModelForJsonMergePatch(WidgetSuite model, boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(WidgetSuite model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of WidgetSuite class.
     */
    @Generated
    public WidgetSuite() {
    }

    /**
     * Get the name property: The widget name.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the manufacturerId property: The ID of the widget's manufacturer.
     * 
     * @return the manufacturerId value.
     */
    @Generated
    public String getManufacturerId() {
        return this.manufacturerId;
    }

    /**
     * Set the manufacturerId property: The ID of the widget's manufacturer.
     * <p>Required when create the resource.</p>
     * 
     * @param manufacturerId the manufacturerId value to set.
     * @return the WidgetSuite object itself.
     */
    @Generated
    public WidgetSuite setManufacturerId(String manufacturerId) {
        this.manufacturerId = manufacturerId;
        this.updatedProperties.add("manufacturerId");
        return this;
    }

    /**
     * Get the sharedModel property: The faked shared model.
     * 
     * @return the sharedModel value.
     */
    @Generated
    public FakedSharedModel getSharedModel() {
        return this.sharedModel;
    }

    /**
     * Set the sharedModel property: The faked shared model.
     * 
     * @param sharedModel the sharedModel value to set.
     * @return the WidgetSuite object itself.
     */
    @Generated
    public WidgetSuite setSharedModel(FakedSharedModel sharedModel) {
        this.sharedModel = sharedModel;
        this.updatedProperties.add("sharedModel");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("manufacturerId", this.manufacturerId);
            jsonWriter.writeJsonField("sharedModel", this.sharedModel);
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("manufacturerId")) {
            if (this.manufacturerId == null) {
                jsonWriter.writeNullField("manufacturerId");
            } else {
                jsonWriter.writeStringField("manufacturerId", this.manufacturerId);
            }
        }
        if (updatedProperties.contains("sharedModel")) {
            if (this.sharedModel == null) {
                jsonWriter.writeNullField("sharedModel");
            } else {
                JsonMergePatchHelper.getFakedSharedModelAccessor()
                    .prepareModelForJsonMergePatch(this.sharedModel, true);
                jsonWriter.writeJsonField("sharedModel", this.sharedModel);
                JsonMergePatchHelper.getFakedSharedModelAccessor()
                    .prepareModelForJsonMergePatch(this.sharedModel, false);
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WidgetSuite from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WidgetSuite if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WidgetSuite.
     */
    @Generated
    public static WidgetSuite fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WidgetSuite deserializedWidgetSuite = new WidgetSuite();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedWidgetSuite.name = reader.getString();
                } else if ("manufacturerId".equals(fieldName)) {
                    deserializedWidgetSuite.manufacturerId = reader.getString();
                } else if ("sharedModel".equals(fieldName)) {
                    deserializedWidgetSuite.sharedModel = FakedSharedModel.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWidgetSuite;
        });
    }
}
