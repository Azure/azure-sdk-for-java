// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.contoso.widgetmanager;

import com.azure.contoso.widgetmanager.implementation.JsonMergePatchHelper;
import com.azure.contoso.widgetmanager.implementation.WidgetsImpl;
import com.azure.contoso.widgetmanager.models.ResourceOperationStatusWidgetSuiteWidgetSuiteError;
import com.azure.contoso.widgetmanager.models.WidgetSuite;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollOperationDetails;
import com.azure.core.util.polling.PollerFlux;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous WidgetManagerClient type.
 */
@ServiceClient(builder = WidgetManagerClientBuilder.class, isAsync = true)
public final class WidgetManagerAsyncClient {
    @Generated
    private final WidgetsImpl serviceClient;

    /**
     * Initializes an instance of WidgetManagerAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    WidgetManagerAsyncClient(WidgetsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Fetch a Widget by name.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     manufacturerId: String (Optional, Required on create)
     *     sharedModel (Optional): {
     *         tag: String (Optional, Required on create)
     *         createdAt: OffsetDateTime (Optional, Required on create)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param widgetName The widget name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a widget along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWidgetWithResponse(String widgetName, RequestOptions requestOptions) {
        return this.serviceClient.getWidgetWithResponseAsync(widgetName, requestOptions);
    }

    /**
     * Gets status of a Widget operation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     *     result (Optional): {
     *         name: String (Required)
     *         manufacturerId: String (Optional, Required on create)
     *         sharedModel (Optional): {
     *             tag: String (Optional, Required on create)
     *             createdAt: OffsetDateTime (Optional, Required on create)
     *         }
     *     }
     * }
     * }
     * </pre>
     * 
     * @param widgetName The widget name.
     * @param operationId The unique ID of the operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return status of a Widget operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWidgetOperationStatusWithResponse(String widgetName, String operationId,
        RequestOptions requestOptions) {
        return this.serviceClient.getWidgetOperationStatusWithResponseAsync(widgetName, operationId, requestOptions);
    }

    /**
     * Creates or updates a Widget asynchronously.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     manufacturerId: String (Optional, Required on create)
     *     sharedModel (Optional): {
     *         tag: String (Optional, Required on create)
     *         createdAt: OffsetDateTime (Optional, Required on create)
     *     }
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     manufacturerId: String (Optional, Required on create)
     *     sharedModel (Optional): {
     *         tag: String (Optional, Required on create)
     *         createdAt: OffsetDateTime (Optional, Required on create)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param widgetName The widget name.
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of a widget.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCreateOrUpdateWidget(String widgetName, BinaryData resource,
        RequestOptions requestOptions) {
        return this.serviceClient.beginCreateOrUpdateWidgetAsync(widgetName, resource, requestOptions);
    }

    /**
     * Delete a Widget asynchronously.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     id: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *     error (Optional): {
     *         error (Required): (recursive schema, see error above)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param widgetName The widget name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of provides status details for long running operations.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, Void> beginDeleteWidget(String widgetName, RequestOptions requestOptions) {
        return this.serviceClient.beginDeleteWidgetAsync(widgetName, requestOptions);
    }

    /**
     * List Widget resources.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     manufacturerId: String (Optional, Required on create)
     *     sharedModel (Optional): {
     *         tag: String (Optional, Required on create)
     *         createdAt: OffsetDateTime (Optional, Required on create)
     *     }
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of WidgetSuite items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listWidgets(RequestOptions requestOptions) {
        return this.serviceClient.listWidgetsAsync(requestOptions);
    }

    /**
     * Fetch a Widget by name.
     * 
     * @param widgetName The widget name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a widget on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<WidgetSuite> getWidget(String widgetName) {
        // Generated convenience method for getWidgetWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWidgetWithResponse(widgetName, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(WidgetSuite.class));
    }

    /**
     * Gets status of a Widget operation.
     * 
     * @param widgetName The widget name.
     * @param operationId The unique ID of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a Widget operation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResourceOperationStatusWidgetSuiteWidgetSuiteError> getWidgetOperationStatus(String widgetName,
        String operationId) {
        // Generated convenience method for getWidgetOperationStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWidgetOperationStatusWithResponse(widgetName, operationId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData
                .toObject(ResourceOperationStatusWidgetSuiteWidgetSuiteError.class));
    }

    /**
     * Creates or updates a Widget asynchronously.
     * 
     * @param widgetName The widget name.
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a widget.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<PollOperationDetails, WidgetSuite> beginCreateOrUpdateWidget(String widgetName,
        WidgetSuite resource) {
        // Generated convenience method for beginCreateOrUpdateWidgetWithModel
        RequestOptions requestOptions = new RequestOptions();
        JsonMergePatchHelper.getWidgetSuiteAccessor().prepareModelForJsonMergePatch(resource, true);
        BinaryData resourceInBinaryData = BinaryData.fromObject(resource);
        // BinaryData.fromObject() will not fire serialization, use getLength() to fire serialization.
        resourceInBinaryData.getLength();
        JsonMergePatchHelper.getWidgetSuiteAccessor().prepareModelForJsonMergePatch(resource, false);
        return serviceClient.beginCreateOrUpdateWidgetWithModelAsync(widgetName, resourceInBinaryData, requestOptions);
    }

    /**
     * Delete a Widget asynchronously.
     * 
     * @param widgetName The widget name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of provides status details for long running operations.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<PollOperationDetails, Void> beginDeleteWidget(String widgetName) {
        // Generated convenience method for beginDeleteWidgetWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeleteWidgetWithModelAsync(widgetName, requestOptions);
    }

    /**
     * List Widget resources.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of WidgetSuite items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<WidgetSuite> listWidgets() {
        // Generated convenience method for listWidgets
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listWidgets(requestOptions);
        return PagedFlux.create(() -> (continuationTokenParam, pageSizeParam) -> {
            Flux<PagedResponse<BinaryData>> flux = (continuationTokenParam == null)
                ? pagedFluxResponse.byPage().take(1)
                : pagedFluxResponse.byPage(continuationTokenParam).take(1);
            return flux.map(pagedResponse -> new PagedResponseBase<Void, WidgetSuite>(pagedResponse.getRequest(),
                pagedResponse.getStatusCode(), pagedResponse.getHeaders(),
                pagedResponse.getValue()
                    .stream()
                    .map(protocolMethodData -> protocolMethodData.toObject(WidgetSuite.class))
                    .collect(Collectors.toList()),
                pagedResponse.getContinuationToken(), null));
        });
    }
}
