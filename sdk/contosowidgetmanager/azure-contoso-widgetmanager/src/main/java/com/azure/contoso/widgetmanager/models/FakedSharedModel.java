// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.contoso.widgetmanager.models;

import com.azure.contoso.widgetmanager.implementation.JsonMergePatchHelper;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashSet;
import java.util.Set;

/**
 * Faked shared model.
 */
@Fluent
public final class FakedSharedModel implements JsonSerializable<FakedSharedModel> {
    /*
     * The tag.
     */
    @Generated
    private String tag;

    /*
     * The created date.
     */
    @Generated
    private OffsetDateTime createdAt;

    /**
     * Stores updated model property, the value is property name, not serialized name.
     */
    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setFakedSharedModelAccessor(new JsonMergePatchHelper.FakedSharedModelAccessor() {
            @Override
            public FakedSharedModel prepareModelForJsonMergePatch(FakedSharedModel model,
                boolean jsonMergePatchEnabled) {
                model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
                return model;
            }

            @Override
            public boolean isJsonMergePatch(FakedSharedModel model) {
                return model.jsonMergePatch;
            }
        });
    }

    /**
     * Creates an instance of FakedSharedModel class.
     */
    @Generated
    public FakedSharedModel() {
    }

    /**
     * Get the tag property: The tag.
     * 
     * @return the tag value.
     */
    @Generated
    public String getTag() {
        return this.tag;
    }

    /**
     * Set the tag property: The tag.
     * <p>Required when create the resource.</p>
     * 
     * @param tag the tag value to set.
     * @return the FakedSharedModel object itself.
     */
    @Generated
    public FakedSharedModel setTag(String tag) {
        this.tag = tag;
        this.updatedProperties.add("tag");
        return this;
    }

    /**
     * Get the createdAt property: The created date.
     * 
     * @return the createdAt value.
     */
    @Generated
    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Set the createdAt property: The created date.
     * <p>Required when create the resource.</p>
     * 
     * @param createdAt the createdAt value to set.
     * @return the FakedSharedModel object itself.
     */
    @Generated
    public FakedSharedModel setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        this.updatedProperties.add("createdAt");
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeStringField("tag", this.tag);
            jsonWriter.writeStringField("createdAt",
                this.createdAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdAt));
            return jsonWriter.writeEndObject();
        }
    }

    @Generated
    private JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (updatedProperties.contains("tag")) {
            if (this.tag == null) {
                jsonWriter.writeNullField("tag");
            } else {
                jsonWriter.writeStringField("tag", this.tag);
            }
        }
        if (updatedProperties.contains("createdAt")) {
            if (this.createdAt == null) {
                jsonWriter.writeNullField("createdAt");
            } else {
                jsonWriter.writeStringField("createdAt",
                    this.createdAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdAt));
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FakedSharedModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FakedSharedModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FakedSharedModel.
     */
    @Generated
    public static FakedSharedModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FakedSharedModel deserializedFakedSharedModel = new FakedSharedModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tag".equals(fieldName)) {
                    deserializedFakedSharedModel.tag = reader.getString();
                } else if ("createdAt".equals(fieldName)) {
                    deserializedFakedSharedModel.createdAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFakedSharedModel;
        });
    }
}
