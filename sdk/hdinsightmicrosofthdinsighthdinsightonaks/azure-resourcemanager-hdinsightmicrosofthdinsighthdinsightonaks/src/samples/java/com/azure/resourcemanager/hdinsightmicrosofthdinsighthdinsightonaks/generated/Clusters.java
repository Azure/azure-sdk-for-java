// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsightmicrosofthdinsighthdinsightonaks.generated;

import com.azure.resourcemanager.hdinsightmicrosofthdinsighthdinsightonaks.models.AuthorizationProfile;
import com.azure.resourcemanager.hdinsightmicrosofthdinsighthdinsightonaks.models.AutoscaleProfile;
import com.azure.resourcemanager.hdinsightmicrosofthdinsighthdinsightonaks.models.AutoscaleType;
import com.azure.resourcemanager.hdinsightmicrosofthdinsighthdinsightonaks.models.Cluster;
import com.azure.resourcemanager.hdinsightmicrosofthdinsighthdinsightonaks.models.ClusterConfigFile;
import com.azure.resourcemanager.hdinsightmicrosofthdinsighthdinsightonaks.models.ClusterLogAnalyticsApplicationLogs;
import com.azure.resourcemanager.hdinsightmicrosofthdinsighthdinsightonaks.models.ClusterLogAnalyticsProfile;
import com.azure.resourcemanager.hdinsightmicrosofthdinsighthdinsightonaks.models.ClusterServiceConfig;
import com.azure.resourcemanager.hdinsightmicrosofthdinsighthdinsightonaks.models.ClusterServiceConfigsProfile;
import com.azure.resourcemanager.hdinsightmicrosofthdinsighthdinsightonaks.models.Schedule;
import com.azure.resourcemanager.hdinsightmicrosofthdinsighthdinsightonaks.models.ScheduleBasedConfig;
import com.azure.resourcemanager.hdinsightmicrosofthdinsighthdinsightonaks.models.ScheduleDay;
import com.azure.resourcemanager.hdinsightmicrosofthdinsighthdinsightonaks.models.SshProfile;
import com.azure.resourcemanager.hdinsightmicrosofthdinsighthdinsightonaks.models.UpdatableClusterProfile;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for Clusters Update. */
public final class Clusters {
    /*
     * x-ms-original-file: specification/hdinsight/resource-manager/Microsoft.HDInsight/HDInsightOnAks/preview/2023-06-01-preview/examples/PatchCluster.json
     */
    /**
     * Sample code: HDInsightClustersPatchTags.
     *
     * @param manager Entry point to HDInsightOnAksManager.
     */
    public static void hDInsightClustersPatchTags(
        com.azure.resourcemanager.hdinsightmicrosofthdinsighthdinsightonaks.HDInsightOnAksManager manager) {
        Cluster resource =
            manager
                .clusters()
                .getWithResponse("hiloResourcegroup", "clusterpool1", "cluster1", com.azure.core.util.Context.NONE)
                .getValue();
        resource
            .update()
            .withClusterProfile(
                new UpdatableClusterProfile()
                    .withServiceConfigsProfiles(
                        Arrays
                            .asList(
                                new ClusterServiceConfigsProfile()
                                    .withServiceName("TestService1")
                                    .withConfigs(
                                        Arrays
                                            .asList(
                                                new ClusterServiceConfig()
                                                    .withComponent("TestComp1")
                                                    .withFiles(
                                                        Arrays
                                                            .asList(
                                                                new ClusterConfigFile()
                                                                    .withFileName("TestFile1")
                                                                    .withValues(
                                                                        mapOf(
                                                                            "Test.config.1",
                                                                            "1",
                                                                            "Test.config.2",
                                                                            "2")),
                                                                new ClusterConfigFile()
                                                                    .withFileName("TestFile2")
                                                                    .withValues(
                                                                        mapOf(
                                                                            "Test.config.3",
                                                                            "3",
                                                                            "Test.config.4",
                                                                            "4")))),
                                                new ClusterServiceConfig()
                                                    .withComponent("TestComp2")
                                                    .withFiles(
                                                        Arrays
                                                            .asList(
                                                                new ClusterConfigFile()
                                                                    .withFileName("TestFile3")
                                                                    .withContent("TestContent")
                                                                    .withPath("TestPath"),
                                                                new ClusterConfigFile()
                                                                    .withFileName("TestFile4")
                                                                    .withValues(
                                                                        mapOf(
                                                                            "Test.config.7",
                                                                            "7",
                                                                            "Test.config.8",
                                                                            "8")))))),
                                new ClusterServiceConfigsProfile()
                                    .withServiceName("TestService2")
                                    .withConfigs(
                                        Arrays
                                            .asList(
                                                new ClusterServiceConfig()
                                                    .withComponent("TestComp3")
                                                    .withFiles(
                                                        Arrays
                                                            .asList(
                                                                new ClusterConfigFile()
                                                                    .withFileName("TestFile5")
                                                                    .withValues(mapOf("Test.config.9", "9"))))))))
                    .withSshProfile(new SshProfile().withCount(2))
                    .withAutoscaleProfile(
                        new AutoscaleProfile()
                            .withEnabled(true)
                            .withGracefulDecommissionTimeout(-1)
                            .withAutoscaleType(AutoscaleType.SCHEDULE_BASED)
                            .withScheduleBasedConfig(
                                new ScheduleBasedConfig()
                                    .withTimeZone("Cen. Australia Standard Time")
                                    .withDefaultCount(3)
                                    .withSchedules(
                                        Arrays
                                            .asList(
                                                new Schedule()
                                                    .withStartTime("00:00")
                                                    .withEndTime("12:00")
                                                    .withCount(3)
                                                    .withDays(
                                                        Arrays
                                                            .asList(
                                                                ScheduleDay.fromString("Monday, Tuesday, Wednesday"))),
                                                new Schedule()
                                                    .withStartTime("00:00")
                                                    .withEndTime("12:00")
                                                    .withCount(3)
                                                    .withDays(Arrays.asList(ScheduleDay.SUNDAY))))))
                    .withAuthorizationProfile(
                        new AuthorizationProfile().withUserIds(Arrays.asList("Testuser1", "Testuser2")))
                    .withLogAnalyticsProfile(
                        new ClusterLogAnalyticsProfile()
                            .withEnabled(true)
                            .withApplicationLogs(
                                new ClusterLogAnalyticsApplicationLogs()
                                    .withStdOutEnabled(true)
                                    .withStdErrorEnabled(true))
                            .withMetricsEnabled(true)))
            .apply();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
new ScheduleBasedConfig()
                                    .withTimeZone("Cen. Australia Standard Time")
                                    .withDefaultCount(10)
                                    .withSchedules(
                                        Arrays
                                            .asList(
                                                new Schedule()
                                                    .withStartTime("00:00")
                                                    .withEndTime("12:00")
                                                    .withCount(20)
                                                    .withDays(Arrays.asList(ScheduleDay.MONDAY)),
                                                new Schedule()
                                                    .withStartTime("00:00")
                                                    .withEndTime("12:00")
                                                    .withCount(25)
                                                    .withDays(Arrays.asList(ScheduleDay.SUNDAY)))))
                            .withLoadBasedConfig(
                                new LoadBasedConfig()
                                    .withMinNodes(10)
                                    .withMaxNodes(20)
                                    .withPollInterval(60)
                                    .withCooldownPeriod(300)
                                    .withScalingRules(
                                        Arrays
                                            .asList(
                                                new ScalingRule()
                                                    .withActionType(ScaleActionType.SCALEUP)
                                                    .withEvaluationCount(3)
                                                    .withScalingMetric("cpu")
                                                    .withComparisonRule(
                                                        new ComparisonRule()
                                                            .withOperator(ComparisonOperator.GREATER_THAN)
                                                            .withThreshold(90f)),
                                                new ScalingRule()
                                                    .withActionType(ScaleActionType.SCALEDOWN)
                                                    .withEvaluationCount(3)
                                                    .withScalingMetric("cpu")
                                                    .withComparisonRule(
                                                        new ComparisonRule()
                                                            .withOperator(ComparisonOperator.LESS_THAN)
                                                            .withThreshold(20f))))))
                    .withKafkaProfile(mapOf()))
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
