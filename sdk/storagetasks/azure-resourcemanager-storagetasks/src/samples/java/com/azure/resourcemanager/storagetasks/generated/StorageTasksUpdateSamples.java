// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagetasks.generated;

import com.azure.resourcemanager.storagetasks.models.ElseCondition;
import com.azure.resourcemanager.storagetasks.models.IfCondition;
import com.azure.resourcemanager.storagetasks.models.OnFailure;
import com.azure.resourcemanager.storagetasks.models.OnSuccess;
import com.azure.resourcemanager.storagetasks.models.StorageTask;
import com.azure.resourcemanager.storagetasks.models.StorageTaskAction;
import com.azure.resourcemanager.storagetasks.models.StorageTaskOperation;
import com.azure.resourcemanager.storagetasks.models.StorageTaskOperationName;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for StorageTasks Update. */
public final class StorageTasksUpdateSamples {
    /*
     * x-ms-original-file: specification/storagetasks/resource-manager/Microsoft.StorageTasks/stable/2023-01-01/examples/storageTasksCrud/PatchStorageTask.json
     */
    /**
     * Sample code: PatchStorageTask.
     *
     * @param manager Entry point to StorageTasksManager.
     */
    public static void patchStorageTask(com.azure.resourcemanager.storagetasks.StorageTasksManager manager) {
        StorageTask resource =
            manager
                .storageTasks()
                .getByResourceGroupWithResponse("res4228", "mytask1", com.azure.core.util.Context.NONE)
                .getValue();
        resource
            .update()
            .withEnabled(true)
            .withDescription("My Storage task")
            .withAction(
                new StorageTaskAction()
                    .withIfProperty(
                        new IfCondition()
                            .withCondition("[[equals(AccessTier, 'Cool')]]")
                            .withOperations(
                                Arrays
                                    .asList(
                                        new StorageTaskOperation()
                                            .withName(StorageTaskOperationName.SET_BLOB_TIER)
                                            .withParameters(mapOf("tier", "Hot"))
                                            .withOnSuccess(OnSuccess.CONTINUE)
                                            .withOnFailure(OnFailure.BREAK))))
                    .withElseProperty(
                        new ElseCondition()
                            .withOperations(
                                Arrays
                                    .asList(
                                        new StorageTaskOperation()
                                            .withName(StorageTaskOperationName.DELETE_BLOB)
                                            .withOnSuccess(OnSuccess.CONTINUE)
                                            .withOnFailure(OnFailure.BREAK)))))
            .apply();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
