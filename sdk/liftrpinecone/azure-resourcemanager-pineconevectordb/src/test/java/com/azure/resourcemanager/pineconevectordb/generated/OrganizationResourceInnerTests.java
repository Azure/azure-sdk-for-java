// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.pineconevectordb.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.pineconevectordb.fluent.models.OrganizationResourceInner;
import com.azure.resourcemanager.pineconevectordb.models.ManagedServiceIdentity;
import com.azure.resourcemanager.pineconevectordb.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.pineconevectordb.models.MarketplaceDetails;
import com.azure.resourcemanager.pineconevectordb.models.OfferDetails;
import com.azure.resourcemanager.pineconevectordb.models.OrganizationProperties;
import com.azure.resourcemanager.pineconevectordb.models.PartnerProperties;
import com.azure.resourcemanager.pineconevectordb.models.SingleSignOnPropertiesV2;
import com.azure.resourcemanager.pineconevectordb.models.SingleSignOnStates;
import com.azure.resourcemanager.pineconevectordb.models.SingleSignOnType;
import com.azure.resourcemanager.pineconevectordb.models.UserAssignedIdentity;
import com.azure.resourcemanager.pineconevectordb.models.UserDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OrganizationResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OrganizationResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"ijbpzvgnwzsymgl\",\"subscriptionStatus\":\"Unsubscribed\",\"offerDetails\":{\"publisherId\":\"cyzkohdbihanuf\",\"offerId\":\"fcbjysagithxqha\",\"planId\":\"ifpikxwczby\",\"planName\":\"npqxuh\",\"termUnit\":\"y\",\"termId\":\"iwbybrkxvdumjg\"}},\"user\":{\"firstName\":\"tfwvukxgaudc\",\"lastName\":\"snhsjcnyejhkryh\",\"emailAddress\":\"napczwlokjy\",\"upn\":\"kkvnipjox\",\"phoneNumber\":\"nchgej\"},\"provisioningState\":\"Failed\",\"partnerProperties\":{\"displayName\":\"mailzydehojw\"},\"singleSignOnProperties\":{\"type\":\"OpenId\",\"state\":\"Initial\",\"enterpriseAppId\":\"npmqnjaqwixjspro\",\"url\":\"cputegjvwmfdats\",\"aadDomains\":[\"vpjhulsuuv\",\"kjozkrwfnd\",\"odjpslwejd\",\"vwryoqpso\"]}},\"identity\":{\"principalId\":\"tazak\",\"tenantId\":\"lahbcryff\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"hlxaolthqtr\":{\"principalId\":\"ygexpaojakhmsb\",\"clientId\":\"hcrzevd\"},\"tfell\":{\"principalId\":\"jbp\",\"clientId\":\"fsinzgvfcjrwzoxx\"}}},\"location\":\"fziton\",\"tags\":{\"vhpfxxypininmay\":\"fpjkjlxofp\",\"oginuvamiheognar\":\"uybbkpodep\"},\"id\":\"zxtheotusivyevcc\",\"name\":\"qi\",\"type\":\"nhungbw\"}")
            .toObject(OrganizationResourceInner.class);
        Assertions.assertEquals("fziton", model.location());
        Assertions.assertEquals("fpjkjlxofp", model.tags().get("vhpfxxypininmay"));
        Assertions.assertEquals("ijbpzvgnwzsymgl", model.properties().marketplace().subscriptionId());
        Assertions.assertEquals("cyzkohdbihanuf", model.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("fcbjysagithxqha", model.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("ifpikxwczby", model.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("npqxuh", model.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("y", model.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("iwbybrkxvdumjg", model.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("tfwvukxgaudc", model.properties().user().firstName());
        Assertions.assertEquals("snhsjcnyejhkryh", model.properties().user().lastName());
        Assertions.assertEquals("napczwlokjy", model.properties().user().emailAddress());
        Assertions.assertEquals("kkvnipjox", model.properties().user().upn());
        Assertions.assertEquals("nchgej", model.properties().user().phoneNumber());
        Assertions.assertEquals("mailzydehojw", model.properties().partnerProperties().displayName());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID, model.properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.INITIAL, model.properties().singleSignOnProperties().state());
        Assertions.assertEquals("npmqnjaqwixjspro", model.properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("cputegjvwmfdats", model.properties().singleSignOnProperties().url());
        Assertions.assertEquals("vpjhulsuuv", model.properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OrganizationResourceInner model = new OrganizationResourceInner().withLocation("fziton")
            .withTags(mapOf("vhpfxxypininmay", "fpjkjlxofp", "oginuvamiheognar", "uybbkpodep"))
            .withProperties(new OrganizationProperties()
                .withMarketplace(new MarketplaceDetails().withSubscriptionId("ijbpzvgnwzsymgl")
                    .withOfferDetails(new OfferDetails().withPublisherId("cyzkohdbihanuf")
                        .withOfferId("fcbjysagithxqha")
                        .withPlanId("ifpikxwczby")
                        .withPlanName("npqxuh")
                        .withTermUnit("y")
                        .withTermId("iwbybrkxvdumjg")))
                .withUser(new UserDetails().withFirstName("tfwvukxgaudc")
                    .withLastName("snhsjcnyejhkryh")
                    .withEmailAddress("napczwlokjy")
                    .withUpn("kkvnipjox")
                    .withPhoneNumber("nchgej"))
                .withPartnerProperties(new PartnerProperties().withDisplayName("mailzydehojw"))
                .withSingleSignOnProperties(new SingleSignOnPropertiesV2().withType(SingleSignOnType.OPEN_ID)
                    .withState(SingleSignOnStates.INITIAL)
                    .withEnterpriseAppId("npmqnjaqwixjspro")
                    .withUrl("cputegjvwmfdats")
                    .withAadDomains(Arrays.asList("vpjhulsuuv", "kjozkrwfnd", "odjpslwejd", "vwryoqpso"))))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(
                    mapOf("hlxaolthqtr", new UserAssignedIdentity(), "tfell", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(OrganizationResourceInner.class);
        Assertions.assertEquals("fziton", model.location());
        Assertions.assertEquals("fpjkjlxofp", model.tags().get("vhpfxxypininmay"));
        Assertions.assertEquals("ijbpzvgnwzsymgl", model.properties().marketplace().subscriptionId());
        Assertions.assertEquals("cyzkohdbihanuf", model.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("fcbjysagithxqha", model.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("ifpikxwczby", model.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("npqxuh", model.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("y", model.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("iwbybrkxvdumjg", model.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("tfwvukxgaudc", model.properties().user().firstName());
        Assertions.assertEquals("snhsjcnyejhkryh", model.properties().user().lastName());
        Assertions.assertEquals("napczwlokjy", model.properties().user().emailAddress());
        Assertions.assertEquals("kkvnipjox", model.properties().user().upn());
        Assertions.assertEquals("nchgej", model.properties().user().phoneNumber());
        Assertions.assertEquals("mailzydehojw", model.properties().partnerProperties().displayName());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID, model.properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.INITIAL, model.properties().singleSignOnProperties().state());
        Assertions.assertEquals("npmqnjaqwixjspro", model.properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("cputegjvwmfdats", model.properties().singleSignOnProperties().url());
        Assertions.assertEquals("vpjhulsuuv", model.properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
