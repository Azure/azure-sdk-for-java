// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.computefleet.fluent.models.FleetInner;
import com.azure.resourcemanager.computefleet.models.Fleet;
import com.azure.resourcemanager.computefleet.models.FleetProperties;
import com.azure.resourcemanager.computefleet.models.FleetUpdate;
import com.azure.resourcemanager.computefleet.models.ManagedServiceIdentity;
import com.azure.resourcemanager.computefleet.models.ManagedServiceIdentityUpdate;
import com.azure.resourcemanager.computefleet.models.Plan;
import com.azure.resourcemanager.computefleet.models.ResourcePlanUpdate;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class FleetImpl implements Fleet, Fleet.Definition, Fleet.Update {
    private FleetInner innerObject;

    private final com.azure.resourcemanager.computefleet.ComputeFleetManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public FleetProperties properties() {
        return this.innerModel().properties();
    }

    public List<String> zones() {
        List<String> inner = this.innerModel().zones();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ManagedServiceIdentity identity() {
        return this.innerModel().identity();
    }

    public Plan plan() {
        return this.innerModel().plan();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public FleetInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.computefleet.ComputeFleetManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String fleetName;

    private FleetUpdate updateProperties;

    public FleetImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Fleet create() {
        this.innerObject = serviceManager.serviceClient()
            .getFleets()
            .createOrUpdate(resourceGroupName, fleetName, this.innerModel(), Context.NONE);
        return this;
    }

    public Fleet create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getFleets()
            .createOrUpdate(resourceGroupName, fleetName, this.innerModel(), context);
        return this;
    }

    FleetImpl(String name, com.azure.resourcemanager.computefleet.ComputeFleetManager serviceManager) {
        this.innerObject = new FleetInner();
        this.serviceManager = serviceManager;
        this.fleetName = name;
    }

    public FleetImpl update() {
        this.updateProperties = new FleetUpdate();
        return this;
    }

    public Fleet apply() {
        this.innerObject = serviceManager.serviceClient()
            .getFleets()
            .update(resourceGroupName, fleetName, updateProperties, Context.NONE);
        return this;
    }

    public Fleet apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getFleets()
            .update(resourceGroupName, fleetName, updateProperties, context);
        return this;
    }

    FleetImpl(FleetInner innerObject, com.azure.resourcemanager.computefleet.ComputeFleetManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.fleetName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "fleets");
    }

    public Fleet refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getFleets()
            .getByResourceGroupWithResponse(resourceGroupName, fleetName, Context.NONE)
            .getValue();
        return this;
    }

    public Fleet refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getFleets()
            .getByResourceGroupWithResponse(resourceGroupName, fleetName, context)
            .getValue();
        return this;
    }

    public FleetImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public FleetImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public FleetImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public FleetImpl withProperties(FleetProperties properties) {
        if (isInCreateMode()) {
            this.innerModel().withProperties(properties);
            return this;
        } else {
            this.updateProperties.withProperties(properties);
            return this;
        }
    }

    public FleetImpl withZones(List<String> zones) {
        this.innerModel().withZones(zones);
        return this;
    }

    public FleetImpl withIdentity(ManagedServiceIdentity identity) {
        this.innerModel().withIdentity(identity);
        return this;
    }

    public FleetImpl withPlan(Plan plan) {
        this.innerModel().withPlan(plan);
        return this;
    }

    public FleetImpl withIdentity(ManagedServiceIdentityUpdate identity) {
        this.updateProperties.withIdentity(identity);
        return this;
    }

    public FleetImpl withPlan(ResourcePlanUpdate plan) {
        this.updateProperties.withPlan(plan);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
