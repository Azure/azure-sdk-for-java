// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * ZoneAllocationPolicy for Compute Fleet.
 */
@Fluent
public final class ZoneAllocationPolicy implements JsonSerializable<ZoneAllocationPolicy> {
    /*
     * Distribution strategy used for zone allocation policy.
     */
    private ZoneDistributionStrategy distributionStrategy;

    /*
     * Zone preferences, required when zone distribution strategy is Prioritized.
     */
    private List<ZonePreference> zonePreferences;

    /**
     * Creates an instance of ZoneAllocationPolicy class.
     */
    public ZoneAllocationPolicy() {
    }

    /**
     * Get the distributionStrategy property: Distribution strategy used for zone allocation policy.
     * 
     * @return the distributionStrategy value.
     */
    public ZoneDistributionStrategy distributionStrategy() {
        return this.distributionStrategy;
    }

    /**
     * Set the distributionStrategy property: Distribution strategy used for zone allocation policy.
     * 
     * @param distributionStrategy the distributionStrategy value to set.
     * @return the ZoneAllocationPolicy object itself.
     */
    public ZoneAllocationPolicy withDistributionStrategy(ZoneDistributionStrategy distributionStrategy) {
        this.distributionStrategy = distributionStrategy;
        return this;
    }

    /**
     * Get the zonePreferences property: Zone preferences, required when zone distribution strategy is Prioritized.
     * 
     * @return the zonePreferences value.
     */
    public List<ZonePreference> zonePreferences() {
        return this.zonePreferences;
    }

    /**
     * Set the zonePreferences property: Zone preferences, required when zone distribution strategy is Prioritized.
     * 
     * @param zonePreferences the zonePreferences value to set.
     * @return the ZoneAllocationPolicy object itself.
     */
    public ZoneAllocationPolicy withZonePreferences(List<ZonePreference> zonePreferences) {
        this.zonePreferences = zonePreferences;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (distributionStrategy() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property distributionStrategy in model ZoneAllocationPolicy"));
        }
        if (zonePreferences() != null) {
            zonePreferences().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ZoneAllocationPolicy.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("distributionStrategy",
            this.distributionStrategy == null ? null : this.distributionStrategy.toString());
        jsonWriter.writeArrayField("zonePreferences", this.zonePreferences,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ZoneAllocationPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ZoneAllocationPolicy if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ZoneAllocationPolicy.
     */
    public static ZoneAllocationPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ZoneAllocationPolicy deserializedZoneAllocationPolicy = new ZoneAllocationPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("distributionStrategy".equals(fieldName)) {
                    deserializedZoneAllocationPolicy.distributionStrategy
                        = ZoneDistributionStrategy.fromString(reader.getString());
                } else if ("zonePreferences".equals(fieldName)) {
                    List<ZonePreference> zonePreferences
                        = reader.readArray(reader1 -> ZonePreference.fromJson(reader1));
                    deserializedZoneAllocationPolicy.zonePreferences = zonePreferences;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedZoneAllocationPolicy;
        });
    }
}
