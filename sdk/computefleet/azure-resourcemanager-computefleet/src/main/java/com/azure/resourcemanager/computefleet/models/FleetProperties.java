// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Details of the Compute Fleet.
 */
@Fluent
public final class FleetProperties implements JsonSerializable<FleetProperties> {
    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /*
     * Configuration Options for Spot instances in Compute Fleet.
     */
    private SpotPriorityProfile spotPriorityProfile;

    /*
     * Configuration Options for Regular instances in Compute Fleet.
     */
    private RegularPriorityProfile regularPriorityProfile;

    /*
     * List of VM sizes supported for Compute Fleet
     */
    private List<VmSizeProfile> vmSizesProfile;

    /*
     * Compute Profile to use for running user's workloads.
     */
    private ComputeProfile computeProfile;

    /*
     * Specifies the time at which the Compute Fleet is created.
     */
    private OffsetDateTime timeCreated;

    /*
     * Specifies the ID which uniquely identifies a Compute Fleet.
     */
    private String uniqueId;

    /**
     * Creates an instance of FleetProperties class.
     */
    public FleetProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the spotPriorityProfile property: Configuration Options for Spot instances in Compute Fleet.
     * 
     * @return the spotPriorityProfile value.
     */
    public SpotPriorityProfile spotPriorityProfile() {
        return this.spotPriorityProfile;
    }

    /**
     * Set the spotPriorityProfile property: Configuration Options for Spot instances in Compute Fleet.
     * 
     * @param spotPriorityProfile the spotPriorityProfile value to set.
     * @return the FleetProperties object itself.
     */
    public FleetProperties withSpotPriorityProfile(SpotPriorityProfile spotPriorityProfile) {
        this.spotPriorityProfile = spotPriorityProfile;
        return this;
    }

    /**
     * Get the regularPriorityProfile property: Configuration Options for Regular instances in Compute Fleet.
     * 
     * @return the regularPriorityProfile value.
     */
    public RegularPriorityProfile regularPriorityProfile() {
        return this.regularPriorityProfile;
    }

    /**
     * Set the regularPriorityProfile property: Configuration Options for Regular instances in Compute Fleet.
     * 
     * @param regularPriorityProfile the regularPriorityProfile value to set.
     * @return the FleetProperties object itself.
     */
    public FleetProperties withRegularPriorityProfile(RegularPriorityProfile regularPriorityProfile) {
        this.regularPriorityProfile = regularPriorityProfile;
        return this;
    }

    /**
     * Get the vmSizesProfile property: List of VM sizes supported for Compute Fleet.
     * 
     * @return the vmSizesProfile value.
     */
    public List<VmSizeProfile> vmSizesProfile() {
        return this.vmSizesProfile;
    }

    /**
     * Set the vmSizesProfile property: List of VM sizes supported for Compute Fleet.
     * 
     * @param vmSizesProfile the vmSizesProfile value to set.
     * @return the FleetProperties object itself.
     */
    public FleetProperties withVmSizesProfile(List<VmSizeProfile> vmSizesProfile) {
        this.vmSizesProfile = vmSizesProfile;
        return this;
    }

    /**
     * Get the computeProfile property: Compute Profile to use for running user's workloads.
     * 
     * @return the computeProfile value.
     */
    public ComputeProfile computeProfile() {
        return this.computeProfile;
    }

    /**
     * Set the computeProfile property: Compute Profile to use for running user's workloads.
     * 
     * @param computeProfile the computeProfile value to set.
     * @return the FleetProperties object itself.
     */
    public FleetProperties withComputeProfile(ComputeProfile computeProfile) {
        this.computeProfile = computeProfile;
        return this;
    }

    /**
     * Get the timeCreated property: Specifies the time at which the Compute Fleet is created.
     * 
     * @return the timeCreated value.
     */
    public OffsetDateTime timeCreated() {
        return this.timeCreated;
    }

    /**
     * Get the uniqueId property: Specifies the ID which uniquely identifies a Compute Fleet.
     * 
     * @return the uniqueId value.
     */
    public String uniqueId() {
        return this.uniqueId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (spotPriorityProfile() != null) {
            spotPriorityProfile().validate();
        }
        if (regularPriorityProfile() != null) {
            regularPriorityProfile().validate();
        }
        if (vmSizesProfile() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property vmSizesProfile in model FleetProperties"));
        } else {
            vmSizesProfile().forEach(e -> e.validate());
        }
        if (computeProfile() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property computeProfile in model FleetProperties"));
        } else {
            computeProfile().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FleetProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("vmSizesProfile", this.vmSizesProfile,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("computeProfile", this.computeProfile);
        jsonWriter.writeJsonField("spotPriorityProfile", this.spotPriorityProfile);
        jsonWriter.writeJsonField("regularPriorityProfile", this.regularPriorityProfile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FleetProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FleetProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FleetProperties.
     */
    public static FleetProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FleetProperties deserializedFleetProperties = new FleetProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vmSizesProfile".equals(fieldName)) {
                    List<VmSizeProfile> vmSizesProfile = reader.readArray(reader1 -> VmSizeProfile.fromJson(reader1));
                    deserializedFleetProperties.vmSizesProfile = vmSizesProfile;
                } else if ("computeProfile".equals(fieldName)) {
                    deserializedFleetProperties.computeProfile = ComputeProfile.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedFleetProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("spotPriorityProfile".equals(fieldName)) {
                    deserializedFleetProperties.spotPriorityProfile = SpotPriorityProfile.fromJson(reader);
                } else if ("regularPriorityProfile".equals(fieldName)) {
                    deserializedFleetProperties.regularPriorityProfile = RegularPriorityProfile.fromJson(reader);
                } else if ("timeCreated".equals(fieldName)) {
                    deserializedFleetProperties.timeCreated = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("uniqueId".equals(fieldName)) {
                    deserializedFleetProperties.uniqueId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFleetProperties;
        });
    }
}
