// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the profile for a single additional location in the Fleet. The location and the
 * virtualMachineProfileOverride (optional).
 */
@Fluent
public final class LocationProfile implements JsonSerializable<LocationProfile> {
    /*
     * The ARM location name of the additional region. If LocationProfile is specified, then location is required.
     */
    private String location;

    /*
     * An override for computeProfile.baseVirtualMachineProfile specific to this region.
     * This override is merged with the base virtual machine profile to define the final virtual machine profile for the
     * resources deployed in this location.
     */
    private BaseVirtualMachineProfile virtualMachineProfileOverride;

    /**
     * Creates an instance of LocationProfile class.
     */
    public LocationProfile() {
    }

    /**
     * Get the location property: The ARM location name of the additional region. If LocationProfile is specified, then
     * location is required.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The ARM location name of the additional region. If LocationProfile is specified, then
     * location is required.
     * 
     * @param location the location value to set.
     * @return the LocationProfile object itself.
     */
    public LocationProfile withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the virtualMachineProfileOverride property: An override for computeProfile.baseVirtualMachineProfile specific
     * to this region.
     * This override is merged with the base virtual machine profile to define the final virtual machine profile for the
     * resources deployed in this location.
     * 
     * @return the virtualMachineProfileOverride value.
     */
    public BaseVirtualMachineProfile virtualMachineProfileOverride() {
        return this.virtualMachineProfileOverride;
    }

    /**
     * Set the virtualMachineProfileOverride property: An override for computeProfile.baseVirtualMachineProfile specific
     * to this region.
     * This override is merged with the base virtual machine profile to define the final virtual machine profile for the
     * resources deployed in this location.
     * 
     * @param virtualMachineProfileOverride the virtualMachineProfileOverride value to set.
     * @return the LocationProfile object itself.
     */
    public LocationProfile withVirtualMachineProfileOverride(BaseVirtualMachineProfile virtualMachineProfileOverride) {
        this.virtualMachineProfileOverride = virtualMachineProfileOverride;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (location() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property location in model LocationProfile"));
        }
        if (virtualMachineProfileOverride() != null) {
            virtualMachineProfileOverride().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LocationProfile.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeJsonField("virtualMachineProfileOverride", this.virtualMachineProfileOverride);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LocationProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LocationProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LocationProfile.
     */
    public static LocationProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LocationProfile deserializedLocationProfile = new LocationProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("location".equals(fieldName)) {
                    deserializedLocationProfile.location = reader.getString();
                } else if ("virtualMachineProfileOverride".equals(fieldName)) {
                    deserializedLocationProfile.virtualMachineProfileOverride
                        = BaseVirtualMachineProfile.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLocationProfile;
        });
    }
}
