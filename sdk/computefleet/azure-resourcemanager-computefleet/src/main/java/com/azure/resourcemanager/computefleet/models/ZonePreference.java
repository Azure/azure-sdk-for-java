// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Zone preferences for Compute Fleet zone allocation policy.
 */
@Fluent
public final class ZonePreference implements JsonSerializable<ZonePreference> {
    /*
     * Name of the zone.
     */
    private String zone;

    /*
     * The rank of the zone. This is used with 'Prioritized' ZoneDistributionStrategy.
     * The lower the number, the higher the priority, starting with 0.
     * 0 is the highest rank. If not specified, defaults to lowest rank.
     */
    private Integer rank;

    /**
     * Creates an instance of ZonePreference class.
     */
    public ZonePreference() {
    }

    /**
     * Get the zone property: Name of the zone.
     * 
     * @return the zone value.
     */
    public String zone() {
        return this.zone;
    }

    /**
     * Set the zone property: Name of the zone.
     * 
     * @param zone the zone value to set.
     * @return the ZonePreference object itself.
     */
    public ZonePreference withZone(String zone) {
        this.zone = zone;
        return this;
    }

    /**
     * Get the rank property: The rank of the zone. This is used with 'Prioritized' ZoneDistributionStrategy.
     * The lower the number, the higher the priority, starting with 0.
     * 0 is the highest rank. If not specified, defaults to lowest rank.
     * 
     * @return the rank value.
     */
    public Integer rank() {
        return this.rank;
    }

    /**
     * Set the rank property: The rank of the zone. This is used with 'Prioritized' ZoneDistributionStrategy.
     * The lower the number, the higher the priority, starting with 0.
     * 0 is the highest rank. If not specified, defaults to lowest rank.
     * 
     * @param rank the rank value to set.
     * @return the ZonePreference object itself.
     */
    public ZonePreference withRank(Integer rank) {
        this.rank = rank;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (zone() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property zone in model ZonePreference"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ZonePreference.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("zone", this.zone);
        jsonWriter.writeNumberField("rank", this.rank);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ZonePreference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ZonePreference if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ZonePreference.
     */
    public static ZonePreference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ZonePreference deserializedZonePreference = new ZonePreference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("zone".equals(fieldName)) {
                    deserializedZonePreference.zone = reader.getString();
                } else if ("rank".equals(fieldName)) {
                    deserializedZonePreference.rank = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedZonePreference;
        });
    }
}
