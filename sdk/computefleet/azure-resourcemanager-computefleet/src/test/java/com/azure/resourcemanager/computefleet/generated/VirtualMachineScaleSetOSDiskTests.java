// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.CachingTypes;
import com.azure.resourcemanager.computefleet.models.DiffDiskOptions;
import com.azure.resourcemanager.computefleet.models.DiffDiskPlacement;
import com.azure.resourcemanager.computefleet.models.DiffDiskSettings;
import com.azure.resourcemanager.computefleet.models.DiskCreateOptionTypes;
import com.azure.resourcemanager.computefleet.models.DiskDeleteOptionTypes;
import com.azure.resourcemanager.computefleet.models.DiskEncryptionSetParameters;
import com.azure.resourcemanager.computefleet.models.OperatingSystemTypes;
import com.azure.resourcemanager.computefleet.models.SecurityEncryptionTypes;
import com.azure.resourcemanager.computefleet.models.StorageAccountTypes;
import com.azure.resourcemanager.computefleet.models.VMDiskSecurityProfile;
import com.azure.resourcemanager.computefleet.models.VirtualHardDisk;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetManagedDiskParameters;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetOSDisk;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetOSDiskTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetOSDisk model = BinaryData.fromString(
            "{\"name\":\"bowsk\",\"caching\":\"ReadWrite\",\"writeAcceleratorEnabled\":true,\"createOption\":\"Copy\",\"diffDiskSettings\":{\"option\":\"Local\",\"placement\":\"NvmeDisk\"},\"diskSizeGB\":88277768,\"osType\":\"Windows\",\"image\":{\"uri\":\"ndrvynhzg\"},\"vhdContainers\":[\"rcgyn\"],\"managedDisk\":{\"storageAccountType\":\"Premium_LRS\",\"diskEncryptionSet\":{\"id\":\"fvm\"},\"securityProfile\":{\"securityEncryptionType\":\"VMGuestStateOnly\",\"diskEncryptionSet\":{\"id\":\"xlzevgbmqjqabcy\"}}},\"deleteOption\":\"Detach\"}")
            .toObject(VirtualMachineScaleSetOSDisk.class);
        Assertions.assertEquals("bowsk", model.name());
        Assertions.assertEquals(CachingTypes.READ_WRITE, model.caching());
        Assertions.assertEquals(true, model.writeAcceleratorEnabled());
        Assertions.assertEquals(DiskCreateOptionTypes.COPY, model.createOption());
        Assertions.assertEquals(DiffDiskOptions.LOCAL, model.diffDiskSettings().option());
        Assertions.assertEquals(DiffDiskPlacement.NVME_DISK, model.diffDiskSettings().placement());
        Assertions.assertEquals(88277768, model.diskSizeGB());
        Assertions.assertEquals(OperatingSystemTypes.WINDOWS, model.osType());
        Assertions.assertEquals("ndrvynhzg", model.image().uri());
        Assertions.assertEquals("rcgyn", model.vhdContainers().get(0));
        Assertions.assertEquals(StorageAccountTypes.PREMIUM_LRS, model.managedDisk().storageAccountType());
        Assertions.assertEquals("fvm", model.managedDisk().diskEncryptionSet().id());
        Assertions.assertEquals(SecurityEncryptionTypes.VMGUEST_STATE_ONLY,
            model.managedDisk().securityProfile().securityEncryptionType());
        Assertions.assertEquals("xlzevgbmqjqabcy", model.managedDisk().securityProfile().diskEncryptionSet().id());
        Assertions.assertEquals(DiskDeleteOptionTypes.DETACH, model.deleteOption());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetOSDisk model
            = new VirtualMachineScaleSetOSDisk().withName("bowsk")
                .withCaching(CachingTypes.READ_WRITE)
                .withWriteAcceleratorEnabled(true)
                .withCreateOption(DiskCreateOptionTypes.COPY)
                .withDiffDiskSettings(
                    new DiffDiskSettings().withOption(DiffDiskOptions.LOCAL).withPlacement(DiffDiskPlacement.NVME_DISK))
                .withDiskSizeGB(88277768)
                .withOsType(OperatingSystemTypes.WINDOWS)
                .withImage(new VirtualHardDisk().withUri("ndrvynhzg"))
                .withVhdContainers(Arrays.asList("rcgyn"))
                .withManagedDisk(new VirtualMachineScaleSetManagedDiskParameters()
                    .withStorageAccountType(StorageAccountTypes.PREMIUM_LRS)
                    .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("fvm"))
                    .withSecurityProfile(new VMDiskSecurityProfile()
                        .withSecurityEncryptionType(SecurityEncryptionTypes.VMGUEST_STATE_ONLY)
                        .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("xlzevgbmqjqabcy"))))
                .withDeleteOption(DiskDeleteOptionTypes.DETACH);
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetOSDisk.class);
        Assertions.assertEquals("bowsk", model.name());
        Assertions.assertEquals(CachingTypes.READ_WRITE, model.caching());
        Assertions.assertEquals(true, model.writeAcceleratorEnabled());
        Assertions.assertEquals(DiskCreateOptionTypes.COPY, model.createOption());
        Assertions.assertEquals(DiffDiskOptions.LOCAL, model.diffDiskSettings().option());
        Assertions.assertEquals(DiffDiskPlacement.NVME_DISK, model.diffDiskSettings().placement());
        Assertions.assertEquals(88277768, model.diskSizeGB());
        Assertions.assertEquals(OperatingSystemTypes.WINDOWS, model.osType());
        Assertions.assertEquals("ndrvynhzg", model.image().uri());
        Assertions.assertEquals("rcgyn", model.vhdContainers().get(0));
        Assertions.assertEquals(StorageAccountTypes.PREMIUM_LRS, model.managedDisk().storageAccountType());
        Assertions.assertEquals("fvm", model.managedDisk().diskEncryptionSet().id());
        Assertions.assertEquals(SecurityEncryptionTypes.VMGUEST_STATE_ONLY,
            model.managedDisk().securityProfile().securityEncryptionType());
        Assertions.assertEquals("xlzevgbmqjqabcy", model.managedDisk().securityProfile().diskEncryptionSet().id());
        Assertions.assertEquals(DiskDeleteOptionTypes.DETACH, model.deleteOption());
    }
}
