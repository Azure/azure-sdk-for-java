// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.CachingTypes;
import com.azure.resourcemanager.computefleet.models.DiffDiskOptions;
import com.azure.resourcemanager.computefleet.models.DiffDiskPlacement;
import com.azure.resourcemanager.computefleet.models.DiffDiskSettings;
import com.azure.resourcemanager.computefleet.models.DiskControllerTypes;
import com.azure.resourcemanager.computefleet.models.DiskCreateOptionTypes;
import com.azure.resourcemanager.computefleet.models.DiskDeleteOptionTypes;
import com.azure.resourcemanager.computefleet.models.DiskEncryptionSetParameters;
import com.azure.resourcemanager.computefleet.models.ImageReference;
import com.azure.resourcemanager.computefleet.models.OperatingSystemTypes;
import com.azure.resourcemanager.computefleet.models.SecurityEncryptionTypes;
import com.azure.resourcemanager.computefleet.models.StorageAccountTypes;
import com.azure.resourcemanager.computefleet.models.VirtualHardDisk;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetDataDisk;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetManagedDiskParameters;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetOSDisk;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetStorageProfile;
import com.azure.resourcemanager.computefleet.models.VMDiskSecurityProfile;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetStorageProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetStorageProfile model = BinaryData.fromString(
            "{\"imageReference\":{\"id\":\"kgfg\",\"publisher\":\"madgakeqsrxyb\",\"offer\":\"qedqytbciqfoufl\",\"sku\":\"nkzsmodmglou\",\"version\":\"b\",\"exactVersion\":\"tmut\",\"sharedGalleryImageId\":\"qktapspwgcuert\",\"communityGalleryImageId\":\"kdosvqw\"},\"osDisk\":{\"name\":\"dgbb\",\"caching\":\"ReadWrite\",\"writeAcceleratorEnabled\":true,\"createOption\":\"Copy\",\"diffDiskSettings\":{\"option\":\"Local\",\"placement\":\"NvmeDisk\"},\"diskSizeGB\":1777353299,\"osType\":\"Linux\",\"image\":{\"uri\":\"qrolfpf\"},\"vhdContainers\":[\"lgbquxig\",\"yjgzjaoyfhrtxiln\",\"rkujy\",\"vlejuvfqa\"],\"managedDisk\":{\"storageAccountType\":\"StandardSSD_ZRS\",\"diskEncryptionSet\":{\"id\":\"jkcpr\"},\"securityProfile\":{\"securityEncryptionType\":\"NonPersistedTPM\",\"diskEncryptionSet\":{\"id\":\"jvtbvpyss\"}}},\"deleteOption\":\"Delete\"},\"dataDisks\":[{\"name\":\"qguhmuo\",\"lun\":84876236,\"caching\":\"ReadWrite\",\"writeAcceleratorEnabled\":true,\"createOption\":\"Copy\",\"diskSizeGB\":1207198504,\"managedDisk\":{\"storageAccountType\":\"UltraSSD_LRS\",\"diskEncryptionSet\":{\"id\":\"nwui\"},\"securityProfile\":{\"securityEncryptionType\":\"VMGuestStateOnly\",\"diskEncryptionSet\":{\"id\":\"fizuckyf\"}}},\"diskIOPSReadWrite\":1201040082291654922,\"diskMBpsReadWrite\":3342132991657632527,\"deleteOption\":\"Delete\"}],\"diskControllerType\":\"NVMe\"}")
            .toObject(VirtualMachineScaleSetStorageProfile.class);
        Assertions.assertEquals("kgfg", model.imageReference().id());
        Assertions.assertEquals("madgakeqsrxyb", model.imageReference().publisher());
        Assertions.assertEquals("qedqytbciqfoufl", model.imageReference().offer());
        Assertions.assertEquals("nkzsmodmglou", model.imageReference().sku());
        Assertions.assertEquals("b", model.imageReference().version());
        Assertions.assertEquals("qktapspwgcuert", model.imageReference().sharedGalleryImageId());
        Assertions.assertEquals("kdosvqw", model.imageReference().communityGalleryImageId());
        Assertions.assertEquals("dgbb", model.osDisk().name());
        Assertions.assertEquals(CachingTypes.READ_WRITE, model.osDisk().caching());
        Assertions.assertEquals(true, model.osDisk().writeAcceleratorEnabled());
        Assertions.assertEquals(DiskCreateOptionTypes.COPY, model.osDisk().createOption());
        Assertions.assertEquals(DiffDiskOptions.LOCAL, model.osDisk().diffDiskSettings().option());
        Assertions.assertEquals(DiffDiskPlacement.NVME_DISK, model.osDisk().diffDiskSettings().placement());
        Assertions.assertEquals(1777353299, model.osDisk().diskSizeGB());
        Assertions.assertEquals(OperatingSystemTypes.LINUX, model.osDisk().osType());
        Assertions.assertEquals("qrolfpf", model.osDisk().image().uri());
        Assertions.assertEquals("lgbquxig", model.osDisk().vhdContainers().get(0));
        Assertions.assertEquals(StorageAccountTypes.STANDARD_SSD_ZRS,
            model.osDisk().managedDisk().storageAccountType());
        Assertions.assertEquals("jkcpr", model.osDisk().managedDisk().diskEncryptionSet().id());
        Assertions.assertEquals(SecurityEncryptionTypes.NON_PERSISTED_TPM,
            model.osDisk().managedDisk().securityProfile().securityEncryptionType());
        Assertions.assertEquals("jvtbvpyss", model.osDisk().managedDisk().securityProfile().diskEncryptionSet().id());
        Assertions.assertEquals(DiskDeleteOptionTypes.DELETE, model.osDisk().deleteOption());
        Assertions.assertEquals("qguhmuo", model.dataDisks().get(0).name());
        Assertions.assertEquals(84876236, model.dataDisks().get(0).lun());
        Assertions.assertEquals(CachingTypes.READ_WRITE, model.dataDisks().get(0).caching());
        Assertions.assertEquals(true, model.dataDisks().get(0).writeAcceleratorEnabled());
        Assertions.assertEquals(DiskCreateOptionTypes.COPY, model.dataDisks().get(0).createOption());
        Assertions.assertEquals(1207198504, model.dataDisks().get(0).diskSizeGB());
        Assertions.assertEquals(StorageAccountTypes.ULTRA_SSD_LRS,
            model.dataDisks().get(0).managedDisk().storageAccountType());
        Assertions.assertEquals("nwui", model.dataDisks().get(0).managedDisk().diskEncryptionSet().id());
        Assertions.assertEquals(SecurityEncryptionTypes.VMGUEST_STATE_ONLY,
            model.dataDisks().get(0).managedDisk().securityProfile().securityEncryptionType());
        Assertions.assertEquals("fizuckyf",
            model.dataDisks().get(0).managedDisk().securityProfile().diskEncryptionSet().id());
        Assertions.assertEquals(1201040082291654922L, model.dataDisks().get(0).diskIOPSReadWrite());
        Assertions.assertEquals(3342132991657632527L, model.dataDisks().get(0).diskMBpsReadWrite());
        Assertions.assertEquals(DiskDeleteOptionTypes.DELETE, model.dataDisks().get(0).deleteOption());
        Assertions.assertEquals(DiskControllerTypes.NVME, model.diskControllerType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetStorageProfile model = new VirtualMachineScaleSetStorageProfile()
            .withImageReference(new ImageReference().withId("kgfg")
                .withPublisher("madgakeqsrxyb")
                .withOffer("qedqytbciqfoufl")
                .withSku("nkzsmodmglou")
                .withVersion("b")
                .withSharedGalleryImageId("qktapspwgcuert")
                .withCommunityGalleryImageId("kdosvqw"))
            .withOsDisk(new VirtualMachineScaleSetOSDisk().withName("dgbb")
                .withCaching(CachingTypes.READ_WRITE)
                .withWriteAcceleratorEnabled(true)
                .withCreateOption(DiskCreateOptionTypes.COPY)
                .withDiffDiskSettings(
                    new DiffDiskSettings().withOption(DiffDiskOptions.LOCAL).withPlacement(DiffDiskPlacement.NVME_DISK))
                .withDiskSizeGB(1777353299)
                .withOsType(OperatingSystemTypes.LINUX)
                .withImage(new VirtualHardDisk().withUri("qrolfpf"))
                .withVhdContainers(Arrays.asList("lgbquxig", "yjgzjaoyfhrtxiln", "rkujy", "vlejuvfqa"))
                .withManagedDisk(new VirtualMachineScaleSetManagedDiskParameters()
                    .withStorageAccountType(StorageAccountTypes.STANDARD_SSD_ZRS)
                    .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("jkcpr"))
                    .withSecurityProfile(new VMDiskSecurityProfile()
                        .withSecurityEncryptionType(SecurityEncryptionTypes.NON_PERSISTED_TPM)
                        .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("jvtbvpyss"))))
                .withDeleteOption(DiskDeleteOptionTypes.DELETE))
            .withDataDisks(Arrays.asList(new VirtualMachineScaleSetDataDisk().withName("qguhmuo")
                .withLun(84876236)
                .withCaching(CachingTypes.READ_WRITE)
                .withWriteAcceleratorEnabled(true)
                .withCreateOption(DiskCreateOptionTypes.COPY)
                .withDiskSizeGB(1207198504)
                .withManagedDisk(new VirtualMachineScaleSetManagedDiskParameters()
                    .withStorageAccountType(StorageAccountTypes.ULTRA_SSD_LRS)
                    .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("nwui"))
                    .withSecurityProfile(new VMDiskSecurityProfile()
                        .withSecurityEncryptionType(SecurityEncryptionTypes.VMGUEST_STATE_ONLY)
                        .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("fizuckyf"))))
                .withDiskIOPSReadWrite(1201040082291654922L)
                .withDiskMBpsReadWrite(3342132991657632527L)
                .withDeleteOption(DiskDeleteOptionTypes.DELETE)))
            .withDiskControllerType(DiskControllerTypes.NVME);
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetStorageProfile.class);
        Assertions.assertEquals("kgfg", model.imageReference().id());
        Assertions.assertEquals("madgakeqsrxyb", model.imageReference().publisher());
        Assertions.assertEquals("qedqytbciqfoufl", model.imageReference().offer());
        Assertions.assertEquals("nkzsmodmglou", model.imageReference().sku());
        Assertions.assertEquals("b", model.imageReference().version());
        Assertions.assertEquals("qktapspwgcuert", model.imageReference().sharedGalleryImageId());
        Assertions.assertEquals("kdosvqw", model.imageReference().communityGalleryImageId());
        Assertions.assertEquals("dgbb", model.osDisk().name());
        Assertions.assertEquals(CachingTypes.READ_WRITE, model.osDisk().caching());
        Assertions.assertEquals(true, model.osDisk().writeAcceleratorEnabled());
        Assertions.assertEquals(DiskCreateOptionTypes.COPY, model.osDisk().createOption());
        Assertions.assertEquals(DiffDiskOptions.LOCAL, model.osDisk().diffDiskSettings().option());
        Assertions.assertEquals(DiffDiskPlacement.NVME_DISK, model.osDisk().diffDiskSettings().placement());
        Assertions.assertEquals(1777353299, model.osDisk().diskSizeGB());
        Assertions.assertEquals(OperatingSystemTypes.LINUX, model.osDisk().osType());
        Assertions.assertEquals("qrolfpf", model.osDisk().image().uri());
        Assertions.assertEquals("lgbquxig", model.osDisk().vhdContainers().get(0));
        Assertions.assertEquals(StorageAccountTypes.STANDARD_SSD_ZRS,
            model.osDisk().managedDisk().storageAccountType());
        Assertions.assertEquals("jkcpr", model.osDisk().managedDisk().diskEncryptionSet().id());
        Assertions.assertEquals(SecurityEncryptionTypes.NON_PERSISTED_TPM,
            model.osDisk().managedDisk().securityProfile().securityEncryptionType());
        Assertions.assertEquals("jvtbvpyss", model.osDisk().managedDisk().securityProfile().diskEncryptionSet().id());
        Assertions.assertEquals(DiskDeleteOptionTypes.DELETE, model.osDisk().deleteOption());
        Assertions.assertEquals("qguhmuo", model.dataDisks().get(0).name());
        Assertions.assertEquals(84876236, model.dataDisks().get(0).lun());
        Assertions.assertEquals(CachingTypes.READ_WRITE, model.dataDisks().get(0).caching());
        Assertions.assertEquals(true, model.dataDisks().get(0).writeAcceleratorEnabled());
        Assertions.assertEquals(DiskCreateOptionTypes.COPY, model.dataDisks().get(0).createOption());
        Assertions.assertEquals(1207198504, model.dataDisks().get(0).diskSizeGB());
        Assertions.assertEquals(StorageAccountTypes.ULTRA_SSD_LRS,
            model.dataDisks().get(0).managedDisk().storageAccountType());
        Assertions.assertEquals("nwui", model.dataDisks().get(0).managedDisk().diskEncryptionSet().id());
        Assertions.assertEquals(SecurityEncryptionTypes.VMGUEST_STATE_ONLY,
            model.dataDisks().get(0).managedDisk().securityProfile().securityEncryptionType());
        Assertions.assertEquals("fizuckyf",
            model.dataDisks().get(0).managedDisk().securityProfile().diskEncryptionSet().id());
        Assertions.assertEquals(1201040082291654922L, model.dataDisks().get(0).diskIOPSReadWrite());
        Assertions.assertEquals(3342132991657632527L, model.dataDisks().get(0).diskMBpsReadWrite());
        Assertions.assertEquals(DiskDeleteOptionTypes.DELETE, model.dataDisks().get(0).deleteOption());
        Assertions.assertEquals(DiskControllerTypes.NVME, model.diskControllerType());
    }
}
