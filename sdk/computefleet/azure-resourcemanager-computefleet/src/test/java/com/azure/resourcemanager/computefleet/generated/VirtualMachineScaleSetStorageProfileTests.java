// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.CachingTypes;
import com.azure.resourcemanager.computefleet.models.DiffDiskOptions;
import com.azure.resourcemanager.computefleet.models.DiffDiskPlacement;
import com.azure.resourcemanager.computefleet.models.DiffDiskSettings;
import com.azure.resourcemanager.computefleet.models.DiskControllerTypes;
import com.azure.resourcemanager.computefleet.models.DiskCreateOptionTypes;
import com.azure.resourcemanager.computefleet.models.DiskDeleteOptionTypes;
import com.azure.resourcemanager.computefleet.models.DiskEncryptionSetParameters;
import com.azure.resourcemanager.computefleet.models.ImageReference;
import com.azure.resourcemanager.computefleet.models.OperatingSystemTypes;
import com.azure.resourcemanager.computefleet.models.SecurityEncryptionTypes;
import com.azure.resourcemanager.computefleet.models.StorageAccountTypes;
import com.azure.resourcemanager.computefleet.models.VMDiskSecurityProfile;
import com.azure.resourcemanager.computefleet.models.VirtualHardDisk;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetDataDisk;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetManagedDiskParameters;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetOSDisk;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetStorageProfile;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetStorageProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetStorageProfile model = BinaryData.fromString(
            "{\"imageReference\":{\"id\":\"btoqcjmkljavbqid\",\"publisher\":\"ajzyul\",\"offer\":\"u\",\"sku\":\"krlkhbzhfepg\",\"version\":\"qex\",\"exactVersion\":\"ocxscpaierhhbcs\",\"sharedGalleryImageId\":\"ummajtjaod\",\"communityGalleryImageId\":\"bnbdxkqpxokajion\"},\"osDisk\":{\"name\":\"ex\",\"caching\":\"ReadOnly\",\"writeAcceleratorEnabled\":false,\"createOption\":\"Copy\",\"diffDiskSettings\":{\"option\":\"Local\",\"placement\":\"NvmeDisk\"},\"diskSizeGB\":1860899173,\"osType\":\"Windows\",\"image\":{\"uri\":\"djwzrlov\"},\"vhdContainers\":[\"whijcoejctbza\",\"s\",\"sycbkbfk\",\"ukdkexxppofmxa\"],\"managedDisk\":{\"storageAccountType\":\"Standard_LRS\",\"diskEncryptionSet\":{\"id\":\"ddtocjjxhvp\"},\"securityProfile\":{\"securityEncryptionType\":\"NonPersistedTPM\",\"diskEncryptionSet\":{\"id\":\"dzxibqeojnxqbzvd\"}}},\"deleteOption\":\"Delete\"},\"dataDisks\":[{\"name\":\"eic\",\"lun\":1638817627,\"caching\":\"ReadWrite\",\"writeAcceleratorEnabled\":false,\"createOption\":\"Restore\",\"diskSizeGB\":2122151049,\"managedDisk\":{\"storageAccountType\":\"StandardSSD_LRS\",\"diskEncryptionSet\":{\"id\":\"cffcyddglmj\"},\"securityProfile\":{\"securityEncryptionType\":\"NonPersistedTPM\",\"diskEncryptionSet\":{\"id\":\"pyeicxm\"}}},\"diskIOPSReadWrite\":7242144596366132757,\"diskMBpsReadWrite\":6968905495959747775,\"deleteOption\":\"Delete\"}],\"diskControllerType\":\"NVMe\"}")
            .toObject(VirtualMachineScaleSetStorageProfile.class);
        Assertions.assertEquals("btoqcjmkljavbqid", model.imageReference().id());
        Assertions.assertEquals("ajzyul", model.imageReference().publisher());
        Assertions.assertEquals("u", model.imageReference().offer());
        Assertions.assertEquals("krlkhbzhfepg", model.imageReference().sku());
        Assertions.assertEquals("qex", model.imageReference().version());
        Assertions.assertEquals("ummajtjaod", model.imageReference().sharedGalleryImageId());
        Assertions.assertEquals("bnbdxkqpxokajion", model.imageReference().communityGalleryImageId());
        Assertions.assertEquals("ex", model.osDisk().name());
        Assertions.assertEquals(CachingTypes.READ_ONLY, model.osDisk().caching());
        Assertions.assertEquals(false, model.osDisk().writeAcceleratorEnabled());
        Assertions.assertEquals(DiskCreateOptionTypes.COPY, model.osDisk().createOption());
        Assertions.assertEquals(DiffDiskOptions.LOCAL, model.osDisk().diffDiskSettings().option());
        Assertions.assertEquals(DiffDiskPlacement.NVME_DISK, model.osDisk().diffDiskSettings().placement());
        Assertions.assertEquals(1860899173, model.osDisk().diskSizeGB());
        Assertions.assertEquals(OperatingSystemTypes.WINDOWS, model.osDisk().osType());
        Assertions.assertEquals("djwzrlov", model.osDisk().image().uri());
        Assertions.assertEquals("whijcoejctbza", model.osDisk().vhdContainers().get(0));
        Assertions.assertEquals(StorageAccountTypes.STANDARD_LRS, model.osDisk().managedDisk().storageAccountType());
        Assertions.assertEquals("ddtocjjxhvp", model.osDisk().managedDisk().diskEncryptionSet().id());
        Assertions.assertEquals(SecurityEncryptionTypes.NON_PERSISTED_TPM,
            model.osDisk().managedDisk().securityProfile().securityEncryptionType());
        Assertions.assertEquals("dzxibqeojnxqbzvd",
            model.osDisk().managedDisk().securityProfile().diskEncryptionSet().id());
        Assertions.assertEquals(DiskDeleteOptionTypes.DELETE, model.osDisk().deleteOption());
        Assertions.assertEquals("eic", model.dataDisks().get(0).name());
        Assertions.assertEquals(1638817627, model.dataDisks().get(0).lun());
        Assertions.assertEquals(CachingTypes.READ_WRITE, model.dataDisks().get(0).caching());
        Assertions.assertEquals(false, model.dataDisks().get(0).writeAcceleratorEnabled());
        Assertions.assertEquals(DiskCreateOptionTypes.RESTORE, model.dataDisks().get(0).createOption());
        Assertions.assertEquals(2122151049, model.dataDisks().get(0).diskSizeGB());
        Assertions.assertEquals(StorageAccountTypes.STANDARD_SSD_LRS,
            model.dataDisks().get(0).managedDisk().storageAccountType());
        Assertions.assertEquals("cffcyddglmj", model.dataDisks().get(0).managedDisk().diskEncryptionSet().id());
        Assertions.assertEquals(SecurityEncryptionTypes.NON_PERSISTED_TPM,
            model.dataDisks().get(0).managedDisk().securityProfile().securityEncryptionType());
        Assertions.assertEquals("pyeicxm",
            model.dataDisks().get(0).managedDisk().securityProfile().diskEncryptionSet().id());
        Assertions.assertEquals(7242144596366132757L, model.dataDisks().get(0).diskIOPSReadWrite());
        Assertions.assertEquals(6968905495959747775L, model.dataDisks().get(0).diskMBpsReadWrite());
        Assertions.assertEquals(DiskDeleteOptionTypes.DELETE, model.dataDisks().get(0).deleteOption());
        Assertions.assertEquals(DiskControllerTypes.NVME, model.diskControllerType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetStorageProfile model = new VirtualMachineScaleSetStorageProfile()
            .withImageReference(new ImageReference().withId("btoqcjmkljavbqid")
                .withPublisher("ajzyul")
                .withOffer("u")
                .withSku("krlkhbzhfepg")
                .withVersion("qex")
                .withSharedGalleryImageId("ummajtjaod")
                .withCommunityGalleryImageId("bnbdxkqpxokajion"))
            .withOsDisk(new VirtualMachineScaleSetOSDisk().withName("ex")
                .withCaching(CachingTypes.READ_ONLY)
                .withWriteAcceleratorEnabled(false)
                .withCreateOption(DiskCreateOptionTypes.COPY)
                .withDiffDiskSettings(
                    new DiffDiskSettings().withOption(DiffDiskOptions.LOCAL).withPlacement(DiffDiskPlacement.NVME_DISK))
                .withDiskSizeGB(1860899173)
                .withOsType(OperatingSystemTypes.WINDOWS)
                .withImage(new VirtualHardDisk().withUri("djwzrlov"))
                .withVhdContainers(Arrays.asList("whijcoejctbza", "s", "sycbkbfk", "ukdkexxppofmxa"))
                .withManagedDisk(new VirtualMachineScaleSetManagedDiskParameters()
                    .withStorageAccountType(StorageAccountTypes.STANDARD_LRS)
                    .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("ddtocjjxhvp"))
                    .withSecurityProfile(new VMDiskSecurityProfile()
                        .withSecurityEncryptionType(SecurityEncryptionTypes.NON_PERSISTED_TPM)
                        .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("dzxibqeojnxqbzvd"))))
                .withDeleteOption(DiskDeleteOptionTypes.DELETE))
            .withDataDisks(Arrays.asList(new VirtualMachineScaleSetDataDisk().withName("eic")
                .withLun(1638817627)
                .withCaching(CachingTypes.READ_WRITE)
                .withWriteAcceleratorEnabled(false)
                .withCreateOption(DiskCreateOptionTypes.RESTORE)
                .withDiskSizeGB(2122151049)
                .withManagedDisk(new VirtualMachineScaleSetManagedDiskParameters()
                    .withStorageAccountType(StorageAccountTypes.STANDARD_SSD_LRS)
                    .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("cffcyddglmj"))
                    .withSecurityProfile(new VMDiskSecurityProfile()
                        .withSecurityEncryptionType(SecurityEncryptionTypes.NON_PERSISTED_TPM)
                        .withDiskEncryptionSet(new DiskEncryptionSetParameters().withId("pyeicxm"))))
                .withDiskIOPSReadWrite(7242144596366132757L)
                .withDiskMBpsReadWrite(6968905495959747775L)
                .withDeleteOption(DiskDeleteOptionTypes.DELETE)))
            .withDiskControllerType(DiskControllerTypes.NVME);
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetStorageProfile.class);
        Assertions.assertEquals("btoqcjmkljavbqid", model.imageReference().id());
        Assertions.assertEquals("ajzyul", model.imageReference().publisher());
        Assertions.assertEquals("u", model.imageReference().offer());
        Assertions.assertEquals("krlkhbzhfepg", model.imageReference().sku());
        Assertions.assertEquals("qex", model.imageReference().version());
        Assertions.assertEquals("ummajtjaod", model.imageReference().sharedGalleryImageId());
        Assertions.assertEquals("bnbdxkqpxokajion", model.imageReference().communityGalleryImageId());
        Assertions.assertEquals("ex", model.osDisk().name());
        Assertions.assertEquals(CachingTypes.READ_ONLY, model.osDisk().caching());
        Assertions.assertEquals(false, model.osDisk().writeAcceleratorEnabled());
        Assertions.assertEquals(DiskCreateOptionTypes.COPY, model.osDisk().createOption());
        Assertions.assertEquals(DiffDiskOptions.LOCAL, model.osDisk().diffDiskSettings().option());
        Assertions.assertEquals(DiffDiskPlacement.NVME_DISK, model.osDisk().diffDiskSettings().placement());
        Assertions.assertEquals(1860899173, model.osDisk().diskSizeGB());
        Assertions.assertEquals(OperatingSystemTypes.WINDOWS, model.osDisk().osType());
        Assertions.assertEquals("djwzrlov", model.osDisk().image().uri());
        Assertions.assertEquals("whijcoejctbza", model.osDisk().vhdContainers().get(0));
        Assertions.assertEquals(StorageAccountTypes.STANDARD_LRS, model.osDisk().managedDisk().storageAccountType());
        Assertions.assertEquals("ddtocjjxhvp", model.osDisk().managedDisk().diskEncryptionSet().id());
        Assertions.assertEquals(SecurityEncryptionTypes.NON_PERSISTED_TPM,
            model.osDisk().managedDisk().securityProfile().securityEncryptionType());
        Assertions.assertEquals("dzxibqeojnxqbzvd",
            model.osDisk().managedDisk().securityProfile().diskEncryptionSet().id());
        Assertions.assertEquals(DiskDeleteOptionTypes.DELETE, model.osDisk().deleteOption());
        Assertions.assertEquals("eic", model.dataDisks().get(0).name());
        Assertions.assertEquals(1638817627, model.dataDisks().get(0).lun());
        Assertions.assertEquals(CachingTypes.READ_WRITE, model.dataDisks().get(0).caching());
        Assertions.assertEquals(false, model.dataDisks().get(0).writeAcceleratorEnabled());
        Assertions.assertEquals(DiskCreateOptionTypes.RESTORE, model.dataDisks().get(0).createOption());
        Assertions.assertEquals(2122151049, model.dataDisks().get(0).diskSizeGB());
        Assertions.assertEquals(StorageAccountTypes.STANDARD_SSD_LRS,
            model.dataDisks().get(0).managedDisk().storageAccountType());
        Assertions.assertEquals("cffcyddglmj", model.dataDisks().get(0).managedDisk().diskEncryptionSet().id());
        Assertions.assertEquals(SecurityEncryptionTypes.NON_PERSISTED_TPM,
            model.dataDisks().get(0).managedDisk().securityProfile().securityEncryptionType());
        Assertions.assertEquals("pyeicxm",
            model.dataDisks().get(0).managedDisk().securityProfile().diskEncryptionSet().id());
        Assertions.assertEquals(7242144596366132757L, model.dataDisks().get(0).diskIOPSReadWrite());
        Assertions.assertEquals(6968905495959747775L, model.dataDisks().get(0).diskMBpsReadWrite());
        Assertions.assertEquals(DiskDeleteOptionTypes.DELETE, model.dataDisks().get(0).deleteOption());
        Assertions.assertEquals(DiskControllerTypes.NVME, model.diskControllerType());
    }
}
