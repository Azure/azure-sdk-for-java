// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.EvictionPolicy;
import com.azure.resourcemanager.computefleet.models.SpotAllocationStrategy;
import com.azure.resourcemanager.computefleet.models.SpotPriorityProfile;
import org.junit.jupiter.api.Assertions;

public final class SpotPriorityProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SpotPriorityProfile model = BinaryData.fromString(
            "{\"capacity\":1320429450,\"minCapacity\":703766696,\"maxPricePerVM\":63.71141995389771,\"evictionPolicy\":\"Deallocate\",\"allocationStrategy\":\"LowestPrice\",\"maintain\":true}")
            .toObject(SpotPriorityProfile.class);
        Assertions.assertEquals(1320429450, model.capacity());
        Assertions.assertEquals(703766696, model.minCapacity());
        Assertions.assertEquals(63.71141995389771D, model.maxPricePerVM());
        Assertions.assertEquals(EvictionPolicy.DEALLOCATE, model.evictionPolicy());
        Assertions.assertEquals(SpotAllocationStrategy.LOWEST_PRICE, model.allocationStrategy());
        Assertions.assertEquals(true, model.maintain());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SpotPriorityProfile model = new SpotPriorityProfile().withCapacity(1320429450)
            .withMinCapacity(703766696)
            .withMaxPricePerVM(63.71141995389771D)
            .withEvictionPolicy(EvictionPolicy.DEALLOCATE)
            .withAllocationStrategy(SpotAllocationStrategy.LOWEST_PRICE)
            .withMaintain(true);
        model = BinaryData.fromObject(model).toObject(SpotPriorityProfile.class);
        Assertions.assertEquals(1320429450, model.capacity());
        Assertions.assertEquals(703766696, model.minCapacity());
        Assertions.assertEquals(63.71141995389771D, model.maxPricePerVM());
        Assertions.assertEquals(EvictionPolicy.DEALLOCATE, model.evictionPolicy());
        Assertions.assertEquals(SpotAllocationStrategy.LOWEST_PRICE, model.allocationStrategy());
        Assertions.assertEquals(true, model.maintain());
    }
}
