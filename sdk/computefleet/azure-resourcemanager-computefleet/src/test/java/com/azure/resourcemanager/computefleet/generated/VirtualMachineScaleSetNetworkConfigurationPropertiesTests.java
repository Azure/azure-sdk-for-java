// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.ApiEntityReference;
import com.azure.resourcemanager.computefleet.models.DeleteOptions;
import com.azure.resourcemanager.computefleet.models.IPVersion;
import com.azure.resourcemanager.computefleet.models.NetworkInterfaceAuxiliaryMode;
import com.azure.resourcemanager.computefleet.models.NetworkInterfaceAuxiliarySku;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSku;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuName;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuTier;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIpTag;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetNetworkConfigurationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetNetworkConfigurationProperties model = BinaryData.fromString(
            "{\"primary\":false,\"enableAcceleratedNetworking\":false,\"disableTcpStateTracking\":false,\"enableFpga\":false,\"networkSecurityGroup\":{\"id\":\"fbuhfmvfaxkffe\"},\"dnsSettings\":{\"dnsServers\":[\"lvmezyvshxmzsbbz\"]},\"ipConfigurations\":[{\"name\":\"gigr\",\"properties\":{\"subnet\":{\"id\":\"rvjx\"},\"primary\":true,\"publicIPAddressConfiguration\":{\"name\":\"pydptko\",\"properties\":{\"idleTimeoutInMinutes\":368872056,\"dnsSettings\":{\"domainNameLabel\":\"knvudwtiukb\"},\"ipTags\":[{},{},{}],\"publicIPPrefix\":{},\"publicIPAddressVersion\":\"IPv6\",\"deleteOption\":\"Detach\"},\"sku\":{\"name\":\"Standard\",\"tier\":\"Global\"}},\"privateIPAddressVersion\":\"IPv4\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"kgjn\"},{\"id\":\"ucgygevqz\"},{\"id\":\"yp\"},{\"id\":\"bpizcdrqjsdpydn\"}],\"applicationSecurityGroups\":[{\"id\":\"de\"},{\"id\":\"jzicwifsjt\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"bishcbkhajdeyea\"},{\"id\":\"p\"},{\"id\":\"g\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"uxwgipwho\"},{\"id\":\"wkgshwa\"},{\"id\":\"ixzbinjeputtmryw\"}]}}],\"enableIPForwarding\":true,\"deleteOption\":\"Delete\",\"auxiliaryMode\":\"AcceleratedConnections\",\"auxiliarySku\":\"A8\"}")
            .toObject(VirtualMachineScaleSetNetworkConfigurationProperties.class);
        Assertions.assertEquals(false, model.primary());
        Assertions.assertEquals(false, model.enableAcceleratedNetworking());
        Assertions.assertEquals(false, model.disableTcpStateTracking());
        Assertions.assertEquals(false, model.enableFpga());
        Assertions.assertEquals("fbuhfmvfaxkffe", model.networkSecurityGroup().id());
        Assertions.assertEquals("lvmezyvshxmzsbbz", model.dnsSettings().dnsServers().get(0));
        Assertions.assertEquals("gigr", model.ipConfigurations().get(0).name());
        Assertions.assertEquals("rvjx", model.ipConfigurations().get(0).properties().subnet().id());
        Assertions.assertEquals(true, model.ipConfigurations().get(0).properties().primary());
        Assertions.assertEquals("pydptko",
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().name());
        Assertions.assertEquals(368872056,
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .idleTimeoutInMinutes());
        Assertions.assertEquals("knvudwtiukb",
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .dnsSettings()
                .domainNameLabel());
        Assertions.assertEquals(IPVersion.IPV6,
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DETACH,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.STANDARD,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV4, model.ipConfigurations().get(0).properties().privateIPAddressVersion());
        Assertions.assertEquals("kgjn",
            model.ipConfigurations().get(0).properties().applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("de",
            model.ipConfigurations().get(0).properties().applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("bishcbkhajdeyea",
            model.ipConfigurations().get(0).properties().loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("uxwgipwho",
            model.ipConfigurations().get(0).properties().loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals(true, model.enableIPForwarding());
        Assertions.assertEquals(DeleteOptions.DELETE, model.deleteOption());
        Assertions.assertEquals(NetworkInterfaceAuxiliaryMode.ACCELERATED_CONNECTIONS, model.auxiliaryMode());
        Assertions.assertEquals(NetworkInterfaceAuxiliarySku.A8, model.auxiliarySku());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetNetworkConfigurationProperties model
            = new VirtualMachineScaleSetNetworkConfigurationProperties().withPrimary(false)
                .withEnableAcceleratedNetworking(false)
                .withDisableTcpStateTracking(false)
                .withEnableFpga(false)
                .withNetworkSecurityGroup(new SubResource().withId("fbuhfmvfaxkffe"))
                .withDnsSettings(new VirtualMachineScaleSetNetworkConfigurationDnsSettings()
                    .withDnsServers(Arrays.asList("lvmezyvshxmzsbbz")))
                .withIpConfigurations(
                    Arrays.asList(new VirtualMachineScaleSetIPConfiguration().withName("gigr")
                        .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()
                            .withSubnet(new ApiEntityReference().withId("rvjx"))
                            .withPrimary(true)
                            .withPublicIPAddressConfiguration(new VirtualMachineScaleSetPublicIPAddressConfiguration()
                                .withName("pydptko")
                                .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                                    .withIdleTimeoutInMinutes(368872056)
                                    .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                                        .withDomainNameLabel("knvudwtiukb"))
                                    .withIpTags(Arrays.asList(new VirtualMachineScaleSetIpTag(),
                                        new VirtualMachineScaleSetIpTag(), new VirtualMachineScaleSetIpTag()))
                                    .withPublicIPPrefix(new SubResource())
                                    .withPublicIPAddressVersion(IPVersion.IPV6)
                                    .withDeleteOption(DeleteOptions.DETACH))
                                .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.STANDARD)
                                    .withTier(PublicIPAddressSkuTier.GLOBAL)))
                            .withPrivateIPAddressVersion(IPVersion.IPV4)
                            .withApplicationGatewayBackendAddressPools(
                                Arrays.asList(new SubResource().withId("kgjn"), new SubResource().withId("ucgygevqz"),
                                    new SubResource().withId("yp"), new SubResource().withId("bpizcdrqjsdpydn")))
                            .withApplicationSecurityGroups(
                                Arrays.asList(new SubResource().withId("de"), new SubResource().withId("jzicwifsjt")))
                            .withLoadBalancerBackendAddressPools(
                                Arrays.asList(new SubResource().withId("bishcbkhajdeyea"),
                                    new SubResource().withId("p"), new SubResource().withId("g")))
                            .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("uxwgipwho"),
                                new SubResource().withId("wkgshwa"), new SubResource().withId("ixzbinjeputtmryw"))))))
                .withEnableIPForwarding(true)
                .withDeleteOption(DeleteOptions.DELETE)
                .withAuxiliaryMode(NetworkInterfaceAuxiliaryMode.ACCELERATED_CONNECTIONS)
                .withAuxiliarySku(NetworkInterfaceAuxiliarySku.A8);
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetNetworkConfigurationProperties.class);
        Assertions.assertEquals(false, model.primary());
        Assertions.assertEquals(false, model.enableAcceleratedNetworking());
        Assertions.assertEquals(false, model.disableTcpStateTracking());
        Assertions.assertEquals(false, model.enableFpga());
        Assertions.assertEquals("fbuhfmvfaxkffe", model.networkSecurityGroup().id());
        Assertions.assertEquals("lvmezyvshxmzsbbz", model.dnsSettings().dnsServers().get(0));
        Assertions.assertEquals("gigr", model.ipConfigurations().get(0).name());
        Assertions.assertEquals("rvjx", model.ipConfigurations().get(0).properties().subnet().id());
        Assertions.assertEquals(true, model.ipConfigurations().get(0).properties().primary());
        Assertions.assertEquals("pydptko",
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().name());
        Assertions.assertEquals(368872056,
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .idleTimeoutInMinutes());
        Assertions.assertEquals("knvudwtiukb",
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .dnsSettings()
                .domainNameLabel());
        Assertions.assertEquals(IPVersion.IPV6,
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DETACH,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.STANDARD,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV4, model.ipConfigurations().get(0).properties().privateIPAddressVersion());
        Assertions.assertEquals("kgjn",
            model.ipConfigurations().get(0).properties().applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("de",
            model.ipConfigurations().get(0).properties().applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("bishcbkhajdeyea",
            model.ipConfigurations().get(0).properties().loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("uxwgipwho",
            model.ipConfigurations().get(0).properties().loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals(true, model.enableIPForwarding());
        Assertions.assertEquals(DeleteOptions.DELETE, model.deleteOption());
        Assertions.assertEquals(NetworkInterfaceAuxiliaryMode.ACCELERATED_CONNECTIONS, model.auxiliaryMode());
        Assertions.assertEquals(NetworkInterfaceAuxiliarySku.A8, model.auxiliarySku());
    }
}
