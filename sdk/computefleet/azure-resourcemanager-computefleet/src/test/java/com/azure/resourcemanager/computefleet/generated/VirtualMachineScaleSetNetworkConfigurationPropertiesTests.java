// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.ApiEntityReference;
import com.azure.resourcemanager.computefleet.models.DeleteOptions;
import com.azure.resourcemanager.computefleet.models.IPVersion;
import com.azure.resourcemanager.computefleet.models.NetworkInterfaceAuxiliaryMode;
import com.azure.resourcemanager.computefleet.models.NetworkInterfaceAuxiliarySku;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSku;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuName;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuTier;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIpTag;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetNetworkConfigurationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetNetworkConfigurationProperties model = BinaryData.fromString(
            "{\"primary\":true,\"enableAcceleratedNetworking\":false,\"disableTcpStateTracking\":false,\"enableFpga\":false,\"networkSecurityGroup\":{\"id\":\"alhbx\"},\"dnsSettings\":{\"dnsServers\":[\"jzzvdud\"]},\"ipConfigurations\":[{\"name\":\"dslfhotwmcy\",\"properties\":{\"subnet\":{\"id\":\"bjnpg\"},\"primary\":true,\"publicIPAddressConfiguration\":{\"name\":\"adehxnltyfsopp\",\"properties\":{\"idleTimeoutInMinutes\":1667329548,\"dnsSettings\":{\"domainNameLabel\":\"nzwdejba\"},\"ipTags\":[{},{},{},{}],\"publicIPPrefix\":{},\"publicIPAddressVersion\":\"IPv4\",\"deleteOption\":\"Detach\"},\"sku\":{\"name\":\"Basic\",\"tier\":\"Global\"}},\"privateIPAddressVersion\":\"IPv6\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"dndnvow\"},{\"id\":\"jjugwdkcglhslaz\"},{\"id\":\"yggdtjixh\"},{\"id\":\"uofqwe\"}],\"applicationSecurityGroups\":[{\"id\":\"enevfyexfwhybci\"},{\"id\":\"yvdcsitynnaa\"},{\"id\":\"ectehf\"},{\"id\":\"scjeypv\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"kgqhcjrefovg\"},{\"id\":\"qsl\"},{\"id\":\"yvxyqjp\"},{\"id\":\"attpngjcrcczsq\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"mdajv\"},{\"id\":\"sounqecanoaeu\"},{\"id\":\"hy\"},{\"id\":\"trpmo\"}]}},{\"name\":\"jmcmatuokthfu\",\"properties\":{\"subnet\":{\"id\":\"dsfcpkvxodpuoz\"},\"primary\":true,\"publicIPAddressConfiguration\":{\"name\":\"dagfuaxbezyiuok\",\"properties\":{\"idleTimeoutInMinutes\":1080863753,\"dnsSettings\":{\"domainNameLabel\":\"dxwzywqsmbsurexi\"},\"ipTags\":[{},{},{},{}],\"publicIPPrefix\":{},\"publicIPAddressVersion\":\"IPv4\",\"deleteOption\":\"Delete\"},\"sku\":{\"name\":\"Basic\",\"tier\":\"Global\"}},\"privateIPAddressVersion\":\"IPv6\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"kiiuxhqyudxor\"},{\"id\":\"nbpoczvyifqrvkdv\"},{\"id\":\"llr\"}],\"applicationSecurityGroups\":[{\"id\":\"f\"},{\"id\":\"t\"},{\"id\":\"n\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"xxbczwtr\"},{\"id\":\"iqzbq\"},{\"id\":\"sovmyokacspkwl\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"bpxjmfl\"},{\"id\":\"vnchrkcci\"},{\"id\":\"zjuqkhrsaj\"},{\"id\":\"ku\"}]}},{\"name\":\"foskghsauuimj\",\"properties\":{\"subnet\":{\"id\":\"eduugi\"},\"primary\":true,\"publicIPAddressConfiguration\":{\"name\":\"rfbyaosvexcso\",\"properties\":{\"idleTimeoutInMinutes\":699840472,\"dnsSettings\":{\"domainNameLabel\":\"ocohslkevleg\"},\"ipTags\":[{},{},{},{}],\"publicIPPrefix\":{},\"publicIPAddressVersion\":\"IPv6\",\"deleteOption\":\"Detach\"},\"sku\":{\"name\":\"Basic\",\"tier\":\"Regional\"}},\"privateIPAddressVersion\":\"IPv6\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"th\"}],\"applicationSecurityGroups\":[{\"id\":\"zy\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"mzsb\"},{\"id\":\"oggigrxwburv\"},{\"id\":\"xjnspy\"},{\"id\":\"tko\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"uknvudwti\"},{\"id\":\"bldngkpoc\"},{\"id\":\"azyxoegukg\"}]}}],\"enableIPForwarding\":false,\"deleteOption\":\"Detach\",\"auxiliaryMode\":\"None\",\"auxiliarySku\":\"A1\"}")
            .toObject(VirtualMachineScaleSetNetworkConfigurationProperties.class);
        Assertions.assertEquals(true, model.primary());
        Assertions.assertEquals(false, model.enableAcceleratedNetworking());
        Assertions.assertEquals(false, model.disableTcpStateTracking());
        Assertions.assertEquals(false, model.enableFpga());
        Assertions.assertEquals("alhbx", model.networkSecurityGroup().id());
        Assertions.assertEquals("jzzvdud", model.dnsSettings().dnsServers().get(0));
        Assertions.assertEquals("dslfhotwmcy", model.ipConfigurations().get(0).name());
        Assertions.assertEquals("bjnpg", model.ipConfigurations().get(0).properties().subnet().id());
        Assertions.assertEquals(true, model.ipConfigurations().get(0).properties().primary());
        Assertions.assertEquals("adehxnltyfsopp",
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().name());
        Assertions.assertEquals(1667329548,
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .idleTimeoutInMinutes());
        Assertions.assertEquals("nzwdejba",
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .dnsSettings()
                .domainNameLabel());
        Assertions.assertEquals(IPVersion.IPV4,
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DETACH,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.BASIC,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV6, model.ipConfigurations().get(0).properties().privateIPAddressVersion());
        Assertions.assertEquals("dndnvow",
            model.ipConfigurations().get(0).properties().applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("enevfyexfwhybci",
            model.ipConfigurations().get(0).properties().applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("kgqhcjrefovg",
            model.ipConfigurations().get(0).properties().loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("mdajv",
            model.ipConfigurations().get(0).properties().loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals(false, model.enableIPForwarding());
        Assertions.assertEquals(DeleteOptions.DETACH, model.deleteOption());
        Assertions.assertEquals(NetworkInterfaceAuxiliaryMode.NONE, model.auxiliaryMode());
        Assertions.assertEquals(NetworkInterfaceAuxiliarySku.A1, model.auxiliarySku());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetNetworkConfigurationProperties model
            = new VirtualMachineScaleSetNetworkConfigurationProperties().withPrimary(true)
                .withEnableAcceleratedNetworking(false)
                .withDisableTcpStateTracking(false)
                .withEnableFpga(false)
                .withNetworkSecurityGroup(new SubResource().withId("alhbx"))
                .withDnsSettings(new VirtualMachineScaleSetNetworkConfigurationDnsSettings()
                    .withDnsServers(Arrays.asList("jzzvdud")))
                .withIpConfigurations(Arrays.asList(
                    new VirtualMachineScaleSetIPConfiguration().withName("dslfhotwmcy")
                        .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()
                            .withSubnet(new ApiEntityReference().withId("bjnpg"))
                            .withPrimary(true)
                            .withPublicIPAddressConfiguration(new VirtualMachineScaleSetPublicIPAddressConfiguration()
                                .withName("adehxnltyfsopp")
                                .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                                    .withIdleTimeoutInMinutes(1667329548)
                                    .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                                        .withDomainNameLabel("nzwdejba"))
                                    .withIpTags(Arrays.asList(new VirtualMachineScaleSetIpTag(),
                                        new VirtualMachineScaleSetIpTag(), new VirtualMachineScaleSetIpTag(),
                                        new VirtualMachineScaleSetIpTag()))
                                    .withPublicIPPrefix(new SubResource())
                                    .withPublicIPAddressVersion(IPVersion.IPV4)
                                    .withDeleteOption(DeleteOptions.DETACH))
                                .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.BASIC)
                                    .withTier(PublicIPAddressSkuTier.GLOBAL)))
                            .withPrivateIPAddressVersion(IPVersion.IPV6)
                            .withApplicationGatewayBackendAddressPools(Arrays.asList(
                                new SubResource().withId("dndnvow"), new SubResource().withId("jjugwdkcglhslaz"),
                                new SubResource().withId("yggdtjixh"), new SubResource().withId("uofqwe")))
                            .withApplicationSecurityGroups(Arrays.asList(new SubResource().withId("enevfyexfwhybci"),
                                new SubResource().withId("yvdcsitynnaa"), new SubResource().withId("ectehf"),
                                new SubResource().withId("scjeypv")))
                            .withLoadBalancerBackendAddressPools(
                                Arrays.asList(new SubResource().withId("kgqhcjrefovg"), new SubResource().withId("qsl"),
                                    new SubResource().withId("yvxyqjp"), new SubResource().withId("attpngjcrcczsq")))
                            .withLoadBalancerInboundNatPools(Arrays.asList(
                                new SubResource().withId("mdajv"), new SubResource().withId("sounqecanoaeu"),
                                new SubResource().withId("hy"), new SubResource().withId("trpmo")))),
                    new VirtualMachineScaleSetIPConfiguration().withName("jmcmatuokthfu")
                        .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()
                            .withSubnet(new ApiEntityReference().withId("dsfcpkvxodpuoz"))
                            .withPrimary(true)
                            .withPublicIPAddressConfiguration(new VirtualMachineScaleSetPublicIPAddressConfiguration()
                                .withName("dagfuaxbezyiuok")
                                .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                                    .withIdleTimeoutInMinutes(1080863753)
                                    .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                                        .withDomainNameLabel("dxwzywqsmbsurexi"))
                                    .withIpTags(Arrays.asList(new VirtualMachineScaleSetIpTag(),
                                        new VirtualMachineScaleSetIpTag(), new VirtualMachineScaleSetIpTag(),
                                        new VirtualMachineScaleSetIpTag()))
                                    .withPublicIPPrefix(new SubResource())
                                    .withPublicIPAddressVersion(IPVersion.IPV4)
                                    .withDeleteOption(DeleteOptions.DELETE))
                                .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.BASIC)
                                    .withTier(PublicIPAddressSkuTier.GLOBAL)))
                            .withPrivateIPAddressVersion(IPVersion.IPV6)
                            .withApplicationGatewayBackendAddressPools(
                                Arrays.asList(new SubResource().withId("kiiuxhqyudxor"),
                                    new SubResource().withId("nbpoczvyifqrvkdv"), new SubResource().withId("llr")))
                            .withApplicationSecurityGroups(Arrays.asList(new SubResource().withId("f"),
                                new SubResource().withId("t"), new SubResource().withId("n")))
                            .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("xxbczwtr"),
                                new SubResource().withId("iqzbq"), new SubResource().withId("sovmyokacspkwl")))
                            .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("bpxjmfl"),
                                new SubResource().withId("vnchrkcci"), new SubResource().withId("zjuqkhrsaj"),
                                new SubResource().withId("ku")))),
                    new VirtualMachineScaleSetIPConfiguration().withName("foskghsauuimj")
                        .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()
                            .withSubnet(new ApiEntityReference().withId("eduugi"))
                            .withPrimary(true)
                            .withPublicIPAddressConfiguration(new VirtualMachineScaleSetPublicIPAddressConfiguration()
                                .withName("rfbyaosvexcso")
                                .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                                    .withIdleTimeoutInMinutes(699840472)
                                    .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                                        .withDomainNameLabel("ocohslkevleg"))
                                    .withIpTags(Arrays.asList(new VirtualMachineScaleSetIpTag(),
                                        new VirtualMachineScaleSetIpTag(), new VirtualMachineScaleSetIpTag(),
                                        new VirtualMachineScaleSetIpTag()))
                                    .withPublicIPPrefix(new SubResource())
                                    .withPublicIPAddressVersion(IPVersion.IPV6)
                                    .withDeleteOption(DeleteOptions.DETACH))
                                .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.BASIC)
                                    .withTier(PublicIPAddressSkuTier.REGIONAL)))
                            .withPrivateIPAddressVersion(IPVersion.IPV6)
                            .withApplicationGatewayBackendAddressPools(Arrays.asList(new SubResource().withId("th")))
                            .withApplicationSecurityGroups(Arrays.asList(new SubResource().withId("zy")))
                            .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("mzsb"),
                                new SubResource().withId("oggigrxwburv"), new SubResource().withId("xjnspy"),
                                new SubResource().withId("tko")))
                            .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("uknvudwti"),
                                new SubResource().withId("bldngkpoc"), new SubResource().withId("azyxoegukg"))))))
                .withEnableIPForwarding(false)
                .withDeleteOption(DeleteOptions.DETACH)
                .withAuxiliaryMode(NetworkInterfaceAuxiliaryMode.NONE)
                .withAuxiliarySku(NetworkInterfaceAuxiliarySku.A1);
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetNetworkConfigurationProperties.class);
        Assertions.assertEquals(true, model.primary());
        Assertions.assertEquals(false, model.enableAcceleratedNetworking());
        Assertions.assertEquals(false, model.disableTcpStateTracking());
        Assertions.assertEquals(false, model.enableFpga());
        Assertions.assertEquals("alhbx", model.networkSecurityGroup().id());
        Assertions.assertEquals("jzzvdud", model.dnsSettings().dnsServers().get(0));
        Assertions.assertEquals("dslfhotwmcy", model.ipConfigurations().get(0).name());
        Assertions.assertEquals("bjnpg", model.ipConfigurations().get(0).properties().subnet().id());
        Assertions.assertEquals(true, model.ipConfigurations().get(0).properties().primary());
        Assertions.assertEquals("adehxnltyfsopp",
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().name());
        Assertions.assertEquals(1667329548,
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .idleTimeoutInMinutes());
        Assertions.assertEquals("nzwdejba",
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .dnsSettings()
                .domainNameLabel());
        Assertions.assertEquals(IPVersion.IPV4,
            model.ipConfigurations()
                .get(0)
                .properties()
                .publicIPAddressConfiguration()
                .properties()
                .publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DETACH,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.BASIC,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL,
            model.ipConfigurations().get(0).properties().publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV6, model.ipConfigurations().get(0).properties().privateIPAddressVersion());
        Assertions.assertEquals("dndnvow",
            model.ipConfigurations().get(0).properties().applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("enevfyexfwhybci",
            model.ipConfigurations().get(0).properties().applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("kgqhcjrefovg",
            model.ipConfigurations().get(0).properties().loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("mdajv",
            model.ipConfigurations().get(0).properties().loadBalancerInboundNatPools().get(0).id());
        Assertions.assertEquals(false, model.enableIPForwarding());
        Assertions.assertEquals(DeleteOptions.DETACH, model.deleteOption());
        Assertions.assertEquals(NetworkInterfaceAuxiliaryMode.NONE, model.auxiliaryMode());
        Assertions.assertEquals(NetworkInterfaceAuxiliarySku.A1, model.auxiliarySku());
    }
}
