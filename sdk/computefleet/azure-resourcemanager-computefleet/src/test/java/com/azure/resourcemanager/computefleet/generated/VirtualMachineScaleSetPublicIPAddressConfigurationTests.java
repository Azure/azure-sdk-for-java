// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.DeleteOptions;
import com.azure.resourcemanager.computefleet.models.DomainNameLabelScopeTypes;
import com.azure.resourcemanager.computefleet.models.IPVersion;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSku;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuName;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuTier;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIpTag;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetPublicIPAddressConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetPublicIPAddressConfiguration model = BinaryData.fromString(
            "{\"name\":\"henbtkcxywnytn\",\"properties\":{\"idleTimeoutInMinutes\":815551540,\"dnsSettings\":{\"domainNameLabel\":\"qidybyx\",\"domainNameLabelScope\":\"NoReuse\"},\"ipTags\":[{\"ipTagType\":\"aaxdbabphlwrq\",\"tag\":\"ktsthsucocmny\"},{\"ipTagType\":\"zt\",\"tag\":\"twwrqp\"},{\"ipTagType\":\"dckzywbiexz\",\"tag\":\"yueaxibxujwb\"}],\"publicIPPrefix\":{\"id\":\"almuzyoxaepdkzja\"},\"publicIPAddressVersion\":\"IPv4\",\"deleteOption\":\"Detach\"},\"sku\":{\"name\":\"Standard\",\"tier\":\"Global\"}}")
            .toObject(VirtualMachineScaleSetPublicIPAddressConfiguration.class);
        Assertions.assertEquals("henbtkcxywnytn", model.name());
        Assertions.assertEquals(815551540, model.properties().idleTimeoutInMinutes());
        Assertions.assertEquals("qidybyx", model.properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.NO_REUSE,
            model.properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("aaxdbabphlwrq", model.properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("ktsthsucocmny", model.properties().ipTags().get(0).tag());
        Assertions.assertEquals("almuzyoxaepdkzja", model.properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV4, model.properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DETACH, model.properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.STANDARD, model.sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL, model.sku().tier());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetPublicIPAddressConfiguration model
            = new VirtualMachineScaleSetPublicIPAddressConfiguration().withName("henbtkcxywnytn")
                .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                    .withIdleTimeoutInMinutes(815551540)
                    .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                        .withDomainNameLabel("qidybyx")
                        .withDomainNameLabelScope(DomainNameLabelScopeTypes.NO_REUSE))
                    .withIpTags(Arrays.asList(
                        new VirtualMachineScaleSetIpTag().withIpTagType("aaxdbabphlwrq").withTag("ktsthsucocmny"),
                        new VirtualMachineScaleSetIpTag().withIpTagType("zt").withTag("twwrqp"),
                        new VirtualMachineScaleSetIpTag().withIpTagType("dckzywbiexz").withTag("yueaxibxujwb")))
                    .withPublicIPPrefix(new SubResource().withId("almuzyoxaepdkzja"))
                    .withPublicIPAddressVersion(IPVersion.IPV4)
                    .withDeleteOption(DeleteOptions.DETACH))
                .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.STANDARD)
                    .withTier(PublicIPAddressSkuTier.GLOBAL));
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetPublicIPAddressConfiguration.class);
        Assertions.assertEquals("henbtkcxywnytn", model.name());
        Assertions.assertEquals(815551540, model.properties().idleTimeoutInMinutes());
        Assertions.assertEquals("qidybyx", model.properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.NO_REUSE,
            model.properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("aaxdbabphlwrq", model.properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("ktsthsucocmny", model.properties().ipTags().get(0).tag());
        Assertions.assertEquals("almuzyoxaepdkzja", model.properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV4, model.properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DETACH, model.properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.STANDARD, model.sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL, model.sku().tier());
    }
}
