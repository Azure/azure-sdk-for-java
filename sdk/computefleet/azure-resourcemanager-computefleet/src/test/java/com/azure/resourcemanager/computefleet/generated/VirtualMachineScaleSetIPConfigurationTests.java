// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.ApiEntityReference;
import com.azure.resourcemanager.computefleet.models.DeleteOptions;
import com.azure.resourcemanager.computefleet.models.DomainNameLabelScopeTypes;
import com.azure.resourcemanager.computefleet.models.IPVersion;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSku;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuName;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuTier;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIpTag;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetIPConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetIPConfiguration model = BinaryData.fromString(
            "{\"name\":\"hheunmmqhgyx\",\"properties\":{\"subnet\":{\"id\":\"ocukoklyax\"},\"primary\":false,\"publicIPAddressConfiguration\":{\"name\":\"uqszfk\",\"properties\":{\"idleTimeoutInMinutes\":868316225,\"dnsSettings\":{\"domainNameLabel\":\"wrmjmwvvjektc\",\"domainNameLabelScope\":\"SubscriptionReuse\"},\"ipTags\":[{\"ipTagType\":\"lrsf\",\"tag\":\"zpwv\"},{\"ipTagType\":\"dqgbiqylihkaetc\",\"tag\":\"vfcivfsnkymuc\"}],\"publicIPPrefix\":{\"id\":\"jf\"},\"publicIPAddressVersion\":\"IPv4\",\"deleteOption\":\"Detach\"},\"sku\":{\"name\":\"Standard\",\"tier\":\"Global\"}},\"privateIPAddressVersion\":\"IPv6\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"txfvjrbirph\"},{\"id\":\"pcyvahfnljkyqx\"},{\"id\":\"uujqgidokgjljyo\"}],\"applicationSecurityGroups\":[{\"id\":\"ltbgsncghkj\"},{\"id\":\"zz\"},{\"id\":\"ijhtxf\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"fsm\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"mpvecxgodebfqk\"}]}}")
            .toObject(VirtualMachineScaleSetIPConfiguration.class);
        Assertions.assertEquals("hheunmmqhgyx", model.name());
        Assertions.assertEquals("ocukoklyax", model.properties().subnet().id());
        Assertions.assertEquals(false, model.properties().primary());
        Assertions.assertEquals("uqszfk", model.properties().publicIPAddressConfiguration().name());
        Assertions.assertEquals(868316225,
            model.properties().publicIPAddressConfiguration().properties().idleTimeoutInMinutes());
        Assertions.assertEquals("wrmjmwvvjektc",
            model.properties().publicIPAddressConfiguration().properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.SUBSCRIPTION_REUSE,
            model.properties().publicIPAddressConfiguration().properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("lrsf",
            model.properties().publicIPAddressConfiguration().properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("zpwv",
            model.properties().publicIPAddressConfiguration().properties().ipTags().get(0).tag());
        Assertions.assertEquals("jf",
            model.properties().publicIPAddressConfiguration().properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV4,
            model.properties().publicIPAddressConfiguration().properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DETACH,
            model.properties().publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.STANDARD,
            model.properties().publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL,
            model.properties().publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV6, model.properties().privateIPAddressVersion());
        Assertions.assertEquals("txfvjrbirph", model.properties().applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("ltbgsncghkj", model.properties().applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("fsm", model.properties().loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("mpvecxgodebfqk", model.properties().loadBalancerInboundNatPools().get(0).id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetIPConfiguration model
            = new VirtualMachineScaleSetIPConfiguration().withName("hheunmmqhgyx")
                .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()
                    .withSubnet(new ApiEntityReference().withId("ocukoklyax"))
                    .withPrimary(false)
                    .withPublicIPAddressConfiguration(new VirtualMachineScaleSetPublicIPAddressConfiguration()
                        .withName("uqszfk")
                        .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                            .withIdleTimeoutInMinutes(868316225)
                            .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                                .withDomainNameLabel("wrmjmwvvjektc")
                                .withDomainNameLabelScope(DomainNameLabelScopeTypes.SUBSCRIPTION_REUSE))
                            .withIpTags(
                                Arrays.asList(new VirtualMachineScaleSetIpTag().withIpTagType("lrsf").withTag("zpwv"),
                                    new VirtualMachineScaleSetIpTag().withIpTagType("dqgbiqylihkaetc")
                                        .withTag("vfcivfsnkymuc")))
                            .withPublicIPPrefix(new SubResource().withId("jf"))
                            .withPublicIPAddressVersion(IPVersion.IPV4)
                            .withDeleteOption(DeleteOptions.DETACH))
                        .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.STANDARD)
                            .withTier(PublicIPAddressSkuTier.GLOBAL)))
                    .withPrivateIPAddressVersion(IPVersion.IPV6)
                    .withApplicationGatewayBackendAddressPools(Arrays.asList(new SubResource().withId("txfvjrbirph"),
                        new SubResource().withId("pcyvahfnljkyqx"), new SubResource().withId("uujqgidokgjljyo")))
                    .withApplicationSecurityGroups(Arrays.asList(new SubResource().withId("ltbgsncghkj"),
                        new SubResource().withId("zz"), new SubResource().withId("ijhtxf")))
                    .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("fsm")))
                    .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("mpvecxgodebfqk"))));
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetIPConfiguration.class);
        Assertions.assertEquals("hheunmmqhgyx", model.name());
        Assertions.assertEquals("ocukoklyax", model.properties().subnet().id());
        Assertions.assertEquals(false, model.properties().primary());
        Assertions.assertEquals("uqszfk", model.properties().publicIPAddressConfiguration().name());
        Assertions.assertEquals(868316225,
            model.properties().publicIPAddressConfiguration().properties().idleTimeoutInMinutes());
        Assertions.assertEquals("wrmjmwvvjektc",
            model.properties().publicIPAddressConfiguration().properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.SUBSCRIPTION_REUSE,
            model.properties().publicIPAddressConfiguration().properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("lrsf",
            model.properties().publicIPAddressConfiguration().properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("zpwv",
            model.properties().publicIPAddressConfiguration().properties().ipTags().get(0).tag());
        Assertions.assertEquals("jf",
            model.properties().publicIPAddressConfiguration().properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV4,
            model.properties().publicIPAddressConfiguration().properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DETACH,
            model.properties().publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.STANDARD,
            model.properties().publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL,
            model.properties().publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV6, model.properties().privateIPAddressVersion());
        Assertions.assertEquals("txfvjrbirph", model.properties().applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("ltbgsncghkj", model.properties().applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("fsm", model.properties().loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("mpvecxgodebfqk", model.properties().loadBalancerInboundNatPools().get(0).id());
    }
}
