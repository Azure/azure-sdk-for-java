// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.ApiEntityReference;
import com.azure.resourcemanager.computefleet.models.DeleteOptions;
import com.azure.resourcemanager.computefleet.models.DomainNameLabelScopeTypes;
import com.azure.resourcemanager.computefleet.models.IPVersion;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSku;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuName;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuTier;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIpTag;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetIPConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetIPConfiguration model = BinaryData.fromString(
            "{\"name\":\"bkh\",\"properties\":{\"subnet\":{\"id\":\"yeamdphagalpb\"},\"primary\":true,\"publicIPAddressConfiguration\":{\"name\":\"ipwhonowk\",\"properties\":{\"idleTimeoutInMinutes\":69341003,\"dnsSettings\":{\"domainNameLabel\":\"nkixzbinj\",\"domainNameLabelScope\":\"NoReuse\"},\"ipTags\":[{\"ipTagType\":\"rywn\",\"tag\":\"oqftiyqzrnkcq\"},{\"ipTagType\":\"xlwhzlsicoh\",\"tag\":\"qnwvlrya\"}],\"publicIPPrefix\":{\"id\":\"heun\"},\"publicIPAddressVersion\":\"IPv6\",\"deleteOption\":\"Delete\"},\"sku\":{\"name\":\"Basic\",\"tier\":\"Regional\"}},\"privateIPAddressVersion\":\"IPv6\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"oklyaxuconuq\"}],\"applicationSecurityGroups\":[{\"id\":\"beypewrmjmw\"},{\"id\":\"jektcxsenh\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"ffrzpwvlqdqgbiqy\"},{\"id\":\"hkaetcktvfc\"},{\"id\":\"fsnkymuctq\"},{\"id\":\"fbebrjcxer\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"tttxfvjrb\"},{\"id\":\"phxepcyvahf\"},{\"id\":\"jky\"}]}}")
            .toObject(VirtualMachineScaleSetIPConfiguration.class);
        Assertions.assertEquals("bkh", model.name());
        Assertions.assertEquals("yeamdphagalpb", model.properties().subnet().id());
        Assertions.assertEquals(true, model.properties().primary());
        Assertions.assertEquals("ipwhonowk", model.properties().publicIPAddressConfiguration().name());
        Assertions.assertEquals(69341003,
            model.properties().publicIPAddressConfiguration().properties().idleTimeoutInMinutes());
        Assertions.assertEquals("nkixzbinj",
            model.properties().publicIPAddressConfiguration().properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.NO_REUSE,
            model.properties().publicIPAddressConfiguration().properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("rywn",
            model.properties().publicIPAddressConfiguration().properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("oqftiyqzrnkcq",
            model.properties().publicIPAddressConfiguration().properties().ipTags().get(0).tag());
        Assertions.assertEquals("heun",
            model.properties().publicIPAddressConfiguration().properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV6,
            model.properties().publicIPAddressConfiguration().properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DELETE,
            model.properties().publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.BASIC,
            model.properties().publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.REGIONAL,
            model.properties().publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV6, model.properties().privateIPAddressVersion());
        Assertions.assertEquals("oklyaxuconuq", model.properties().applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("beypewrmjmw", model.properties().applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("ffrzpwvlqdqgbiqy", model.properties().loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("tttxfvjrb", model.properties().loadBalancerInboundNatPools().get(0).id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetIPConfiguration model
            = new VirtualMachineScaleSetIPConfiguration().withName("bkh")
                .withProperties(
                    new VirtualMachineScaleSetIPConfigurationProperties()
                        .withSubnet(new ApiEntityReference().withId("yeamdphagalpb"))
                        .withPrimary(true)
                        .withPublicIPAddressConfiguration(new VirtualMachineScaleSetPublicIPAddressConfiguration()
                            .withName("ipwhonowk")
                            .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                                .withIdleTimeoutInMinutes(69341003)
                                .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                                    .withDomainNameLabel("nkixzbinj")
                                    .withDomainNameLabelScope(DomainNameLabelScopeTypes.NO_REUSE))
                                .withIpTags(Arrays.asList(
                                    new VirtualMachineScaleSetIpTag().withIpTagType("rywn").withTag("oqftiyqzrnkcq"),
                                    new VirtualMachineScaleSetIpTag().withIpTagType("xlwhzlsicoh").withTag("qnwvlrya")))
                                .withPublicIPPrefix(new SubResource().withId("heun"))
                                .withPublicIPAddressVersion(IPVersion.IPV6)
                                .withDeleteOption(DeleteOptions.DELETE))
                            .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.BASIC)
                                .withTier(PublicIPAddressSkuTier.REGIONAL)))
                        .withPrivateIPAddressVersion(IPVersion.IPV6)
                        .withApplicationGatewayBackendAddressPools(
                            Arrays.asList(new SubResource().withId("oklyaxuconuq")))
                        .withApplicationSecurityGroups(Arrays.asList(new SubResource().withId("beypewrmjmw"),
                            new SubResource().withId("jektcxsenh")))
                        .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("ffrzpwvlqdqgbiqy"),
                            new SubResource().withId("hkaetcktvfc"), new SubResource().withId("fsnkymuctq"),
                            new SubResource().withId("fbebrjcxer")))
                        .withLoadBalancerInboundNatPools(Arrays.asList(new SubResource().withId("tttxfvjrb"),
                            new SubResource().withId("phxepcyvahf"), new SubResource().withId("jky"))));
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetIPConfiguration.class);
        Assertions.assertEquals("bkh", model.name());
        Assertions.assertEquals("yeamdphagalpb", model.properties().subnet().id());
        Assertions.assertEquals(true, model.properties().primary());
        Assertions.assertEquals("ipwhonowk", model.properties().publicIPAddressConfiguration().name());
        Assertions.assertEquals(69341003,
            model.properties().publicIPAddressConfiguration().properties().idleTimeoutInMinutes());
        Assertions.assertEquals("nkixzbinj",
            model.properties().publicIPAddressConfiguration().properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.NO_REUSE,
            model.properties().publicIPAddressConfiguration().properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("rywn",
            model.properties().publicIPAddressConfiguration().properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("oqftiyqzrnkcq",
            model.properties().publicIPAddressConfiguration().properties().ipTags().get(0).tag());
        Assertions.assertEquals("heun",
            model.properties().publicIPAddressConfiguration().properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV6,
            model.properties().publicIPAddressConfiguration().properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DELETE,
            model.properties().publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.BASIC,
            model.properties().publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.REGIONAL,
            model.properties().publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV6, model.properties().privateIPAddressVersion());
        Assertions.assertEquals("oklyaxuconuq", model.properties().applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("beypewrmjmw", model.properties().applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("ffrzpwvlqdqgbiqy", model.properties().loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("tttxfvjrb", model.properties().loadBalancerInboundNatPools().get(0).id());
    }
}
