// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.ApiEntityReference;
import com.azure.resourcemanager.computefleet.models.DeleteOptions;
import com.azure.resourcemanager.computefleet.models.DomainNameLabelScopeTypes;
import com.azure.resourcemanager.computefleet.models.IPVersion;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSku;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuName;
import com.azure.resourcemanager.computefleet.models.PublicIPAddressSkuTier;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIpTag;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetPublicIPAddressConfigurationProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetIPConfigurationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetIPConfigurationProperties model = BinaryData.fromString(
            "{\"subnet\":{\"id\":\"mpukgriw\"},\"primary\":true,\"publicIPAddressConfiguration\":{\"name\":\"fbxzpuzycisp\",\"properties\":{\"idleTimeoutInMinutes\":2071345899,\"dnsSettings\":{\"domainNameLabel\":\"mgkbrpyydhibn\",\"domainNameLabelScope\":\"NoReuse\"},\"ipTags\":[{\"ipTagType\":\"kadrgvt\",\"tag\":\"gnbuy\"},{\"ipTagType\":\"ijggmebfsiar\",\"tag\":\"trcvpnazzmh\"}],\"publicIPPrefix\":{\"id\":\"nmpxttdb\"},\"publicIPAddressVersion\":\"IPv6\",\"deleteOption\":\"Delete\"},\"sku\":{\"name\":\"Basic\",\"tier\":\"Global\"}},\"privateIPAddressVersion\":\"IPv6\",\"applicationGatewayBackendAddressPools\":[{\"id\":\"henbtkcxywnytn\"}],\"applicationSecurityGroups\":[{\"id\":\"lqidyby\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"clha\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"abphlw\"},{\"id\":\"lfktsths\"}]}")
            .toObject(VirtualMachineScaleSetIPConfigurationProperties.class);
        Assertions.assertEquals("mpukgriw", model.subnet().id());
        Assertions.assertEquals(true, model.primary());
        Assertions.assertEquals("fbxzpuzycisp", model.publicIPAddressConfiguration().name());
        Assertions.assertEquals(2071345899, model.publicIPAddressConfiguration().properties().idleTimeoutInMinutes());
        Assertions.assertEquals("mgkbrpyydhibn",
            model.publicIPAddressConfiguration().properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.NO_REUSE,
            model.publicIPAddressConfiguration().properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("kadrgvt",
            model.publicIPAddressConfiguration().properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("gnbuy", model.publicIPAddressConfiguration().properties().ipTags().get(0).tag());
        Assertions.assertEquals("nmpxttdb", model.publicIPAddressConfiguration().properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV6,
            model.publicIPAddressConfiguration().properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DELETE, model.publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.BASIC, model.publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL, model.publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV6, model.privateIPAddressVersion());
        Assertions.assertEquals("henbtkcxywnytn", model.applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("lqidyby", model.applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("clha", model.loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("abphlw", model.loadBalancerInboundNatPools().get(0).id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetIPConfigurationProperties model
            = new VirtualMachineScaleSetIPConfigurationProperties()
                .withSubnet(new ApiEntityReference().withId("mpukgriw"))
                .withPrimary(true)
                .withPublicIPAddressConfiguration(new VirtualMachineScaleSetPublicIPAddressConfiguration()
                    .withName("fbxzpuzycisp")
                    .withProperties(new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
                        .withIdleTimeoutInMinutes(2071345899)
                        .withDnsSettings(new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings()
                            .withDomainNameLabel("mgkbrpyydhibn")
                            .withDomainNameLabelScope(DomainNameLabelScopeTypes.NO_REUSE))
                        .withIpTags(
                            Arrays.asList(new VirtualMachineScaleSetIpTag().withIpTagType("kadrgvt").withTag("gnbuy"),
                                new VirtualMachineScaleSetIpTag().withIpTagType("ijggmebfsiar").withTag("trcvpnazzmh")))
                        .withPublicIPPrefix(new SubResource().withId("nmpxttdb"))
                        .withPublicIPAddressVersion(IPVersion.IPV6)
                        .withDeleteOption(DeleteOptions.DELETE))
                    .withSku(new PublicIPAddressSku().withName(PublicIPAddressSkuName.BASIC)
                        .withTier(PublicIPAddressSkuTier.GLOBAL)))
                .withPrivateIPAddressVersion(IPVersion.IPV6)
                .withApplicationGatewayBackendAddressPools(Arrays.asList(new SubResource().withId("henbtkcxywnytn")))
                .withApplicationSecurityGroups(Arrays.asList(new SubResource().withId("lqidyby")))
                .withLoadBalancerBackendAddressPools(Arrays.asList(new SubResource().withId("clha")))
                .withLoadBalancerInboundNatPools(
                    Arrays.asList(new SubResource().withId("abphlw"), new SubResource().withId("lfktsths")));
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetIPConfigurationProperties.class);
        Assertions.assertEquals("mpukgriw", model.subnet().id());
        Assertions.assertEquals(true, model.primary());
        Assertions.assertEquals("fbxzpuzycisp", model.publicIPAddressConfiguration().name());
        Assertions.assertEquals(2071345899, model.publicIPAddressConfiguration().properties().idleTimeoutInMinutes());
        Assertions.assertEquals("mgkbrpyydhibn",
            model.publicIPAddressConfiguration().properties().dnsSettings().domainNameLabel());
        Assertions.assertEquals(DomainNameLabelScopeTypes.NO_REUSE,
            model.publicIPAddressConfiguration().properties().dnsSettings().domainNameLabelScope());
        Assertions.assertEquals("kadrgvt",
            model.publicIPAddressConfiguration().properties().ipTags().get(0).ipTagType());
        Assertions.assertEquals("gnbuy", model.publicIPAddressConfiguration().properties().ipTags().get(0).tag());
        Assertions.assertEquals("nmpxttdb", model.publicIPAddressConfiguration().properties().publicIPPrefix().id());
        Assertions.assertEquals(IPVersion.IPV6,
            model.publicIPAddressConfiguration().properties().publicIPAddressVersion());
        Assertions.assertEquals(DeleteOptions.DELETE, model.publicIPAddressConfiguration().properties().deleteOption());
        Assertions.assertEquals(PublicIPAddressSkuName.BASIC, model.publicIPAddressConfiguration().sku().name());
        Assertions.assertEquals(PublicIPAddressSkuTier.GLOBAL, model.publicIPAddressConfiguration().sku().tier());
        Assertions.assertEquals(IPVersion.IPV6, model.privateIPAddressVersion());
        Assertions.assertEquals("henbtkcxywnytn", model.applicationGatewayBackendAddressPools().get(0).id());
        Assertions.assertEquals("lqidyby", model.applicationSecurityGroups().get(0).id());
        Assertions.assertEquals("clha", model.loadBalancerBackendAddressPools().get(0).id());
        Assertions.assertEquals("abphlw", model.loadBalancerInboundNatPools().get(0).id());
    }
}
