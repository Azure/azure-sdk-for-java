// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computefleet.generated;

import com.azure.core.management.SubResource;
import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computefleet.models.ApiEntityReference;
import com.azure.resourcemanager.computefleet.models.DeleteOptions;
import com.azure.resourcemanager.computefleet.models.NetworkApiVersion;
import com.azure.resourcemanager.computefleet.models.NetworkInterfaceAuxiliaryMode;
import com.azure.resourcemanager.computefleet.models.NetworkInterfaceAuxiliarySku;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetIPConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkConfiguration;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkConfigurationDnsSettings;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkConfigurationProperties;
import com.azure.resourcemanager.computefleet.models.VirtualMachineScaleSetNetworkProfile;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineScaleSetNetworkProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineScaleSetNetworkProfile model = BinaryData.fromString(
            "{\"healthProbe\":{\"id\":\"xgcp\"},\"networkInterfaceConfigurations\":[{\"name\":\"maajrmvdjwzrlo\",\"properties\":{\"primary\":true,\"enableAcceleratedNetworking\":false,\"disableTcpStateTracking\":false,\"enableFpga\":true,\"networkSecurityGroup\":{\"id\":\"ctbzaq\"},\"dnsSettings\":{\"dnsServers\":[\"cbkbfkg\"]},\"ipConfigurations\":[{\"name\":\"dkexxppofm\",\"properties\":{}},{\"name\":\"x\",\"properties\":{}}],\"enableIPForwarding\":false,\"deleteOption\":\"Detach\",\"auxiliaryMode\":\"AcceleratedConnections\",\"auxiliarySku\":\"A4\"}},{\"name\":\"jjxhvpmo\",\"properties\":{\"primary\":false,\"enableAcceleratedNetworking\":false,\"disableTcpStateTracking\":false,\"enableFpga\":true,\"networkSecurityGroup\":{\"id\":\"jnxqbzvddntwn\"},\"dnsSettings\":{\"dnsServers\":[\"btwnpzaoqvuhrhcf\",\"cyddglmjthjqk\",\"pyeicxm\",\"ciwqvhk\"]},\"ipConfigurations\":[{\"name\":\"xuigdtopbobj\",\"properties\":{}},{\"name\":\"hm\",\"properties\":{}},{\"name\":\"u\",\"properties\":{}},{\"name\":\"a\",\"properties\":{}}],\"enableIPForwarding\":false,\"deleteOption\":\"Detach\",\"auxiliaryMode\":\"AcceleratedConnections\",\"auxiliarySku\":\"None\"}}],\"networkApiVersion\":\"2020-11-01\"}")
            .toObject(VirtualMachineScaleSetNetworkProfile.class);
        Assertions.assertEquals("xgcp", model.healthProbe().id());
        Assertions.assertEquals("maajrmvdjwzrlo", model.networkInterfaceConfigurations().get(0).name());
        Assertions.assertEquals(true, model.networkInterfaceConfigurations().get(0).properties().primary());
        Assertions.assertEquals(false,
            model.networkInterfaceConfigurations().get(0).properties().enableAcceleratedNetworking());
        Assertions.assertEquals(false,
            model.networkInterfaceConfigurations().get(0).properties().disableTcpStateTracking());
        Assertions.assertEquals(true, model.networkInterfaceConfigurations().get(0).properties().enableFpga());
        Assertions.assertEquals("ctbzaq",
            model.networkInterfaceConfigurations().get(0).properties().networkSecurityGroup().id());
        Assertions.assertEquals("cbkbfkg",
            model.networkInterfaceConfigurations().get(0).properties().dnsSettings().dnsServers().get(0));
        Assertions.assertEquals("dkexxppofm",
            model.networkInterfaceConfigurations().get(0).properties().ipConfigurations().get(0).name());
        Assertions.assertEquals(false, model.networkInterfaceConfigurations().get(0).properties().enableIPForwarding());
        Assertions.assertEquals(DeleteOptions.DETACH,
            model.networkInterfaceConfigurations().get(0).properties().deleteOption());
        Assertions.assertEquals(NetworkInterfaceAuxiliaryMode.ACCELERATED_CONNECTIONS,
            model.networkInterfaceConfigurations().get(0).properties().auxiliaryMode());
        Assertions.assertEquals(NetworkInterfaceAuxiliarySku.A4,
            model.networkInterfaceConfigurations().get(0).properties().auxiliarySku());
        Assertions.assertEquals(NetworkApiVersion.TWO_ZERO_TWO_ZERO_ONE_ONE_ZERO_ONE, model.networkApiVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineScaleSetNetworkProfile model
            = new VirtualMachineScaleSetNetworkProfile().withHealthProbe(new ApiEntityReference().withId("xgcp"))
                .withNetworkInterfaceConfigurations(Arrays.asList(
                    new VirtualMachineScaleSetNetworkConfiguration().withName("maajrmvdjwzrlo")
                        .withProperties(new VirtualMachineScaleSetNetworkConfigurationProperties()
                            .withPrimary(true)
                            .withEnableAcceleratedNetworking(false)
                            .withDisableTcpStateTracking(false)
                            .withEnableFpga(true)
                            .withNetworkSecurityGroup(new SubResource().withId("ctbzaq"))
                            .withDnsSettings(new VirtualMachineScaleSetNetworkConfigurationDnsSettings()
                                .withDnsServers(Arrays.asList("cbkbfkg")))
                            .withIpConfigurations(Arrays.asList(
                                new VirtualMachineScaleSetIPConfiguration().withName("dkexxppofm")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()),
                                new VirtualMachineScaleSetIPConfiguration().withName("x")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties())))
                            .withEnableIPForwarding(false)
                            .withDeleteOption(DeleteOptions.DETACH)
                            .withAuxiliaryMode(NetworkInterfaceAuxiliaryMode.ACCELERATED_CONNECTIONS)
                            .withAuxiliarySku(NetworkInterfaceAuxiliarySku.A4)),
                    new VirtualMachineScaleSetNetworkConfiguration().withName("jjxhvpmo")
                        .withProperties(new VirtualMachineScaleSetNetworkConfigurationProperties().withPrimary(false)
                            .withEnableAcceleratedNetworking(false)
                            .withDisableTcpStateTracking(false)
                            .withEnableFpga(true)
                            .withNetworkSecurityGroup(new SubResource().withId("jnxqbzvddntwn"))
                            .withDnsSettings(new VirtualMachineScaleSetNetworkConfigurationDnsSettings().withDnsServers(
                                Arrays.asList("btwnpzaoqvuhrhcf", "cyddglmjthjqk", "pyeicxm", "ciwqvhk")))
                            .withIpConfigurations(Arrays.asList(
                                new VirtualMachineScaleSetIPConfiguration().withName("xuigdtopbobj")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()),
                                new VirtualMachineScaleSetIPConfiguration().withName("hm")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()),
                                new VirtualMachineScaleSetIPConfiguration().withName("u")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties()),
                                new VirtualMachineScaleSetIPConfiguration().withName("a")
                                    .withProperties(new VirtualMachineScaleSetIPConfigurationProperties())))
                            .withEnableIPForwarding(false)
                            .withDeleteOption(DeleteOptions.DETACH)
                            .withAuxiliaryMode(NetworkInterfaceAuxiliaryMode.ACCELERATED_CONNECTIONS)
                            .withAuxiliarySku(NetworkInterfaceAuxiliarySku.NONE))))
                .withNetworkApiVersion(NetworkApiVersion.TWO_ZERO_TWO_ZERO_ONE_ONE_ZERO_ONE);
        model = BinaryData.fromObject(model).toObject(VirtualMachineScaleSetNetworkProfile.class);
        Assertions.assertEquals("xgcp", model.healthProbe().id());
        Assertions.assertEquals("maajrmvdjwzrlo", model.networkInterfaceConfigurations().get(0).name());
        Assertions.assertEquals(true, model.networkInterfaceConfigurations().get(0).properties().primary());
        Assertions.assertEquals(false,
            model.networkInterfaceConfigurations().get(0).properties().enableAcceleratedNetworking());
        Assertions.assertEquals(false,
            model.networkInterfaceConfigurations().get(0).properties().disableTcpStateTracking());
        Assertions.assertEquals(true, model.networkInterfaceConfigurations().get(0).properties().enableFpga());
        Assertions.assertEquals("ctbzaq",
            model.networkInterfaceConfigurations().get(0).properties().networkSecurityGroup().id());
        Assertions.assertEquals("cbkbfkg",
            model.networkInterfaceConfigurations().get(0).properties().dnsSettings().dnsServers().get(0));
        Assertions.assertEquals("dkexxppofm",
            model.networkInterfaceConfigurations().get(0).properties().ipConfigurations().get(0).name());
        Assertions.assertEquals(false, model.networkInterfaceConfigurations().get(0).properties().enableIPForwarding());
        Assertions.assertEquals(DeleteOptions.DETACH,
            model.networkInterfaceConfigurations().get(0).properties().deleteOption());
        Assertions.assertEquals(NetworkInterfaceAuxiliaryMode.ACCELERATED_CONNECTIONS,
            model.networkInterfaceConfigurations().get(0).properties().auxiliaryMode());
        Assertions.assertEquals(NetworkInterfaceAuxiliarySku.A4,
            model.networkInterfaceConfigurations().get(0).properties().auxiliarySku());
        Assertions.assertEquals(NetworkApiVersion.TWO_ZERO_TWO_ZERO_ONE_ONE_ZERO_ONE, model.networkApiVersion());
    }
}
