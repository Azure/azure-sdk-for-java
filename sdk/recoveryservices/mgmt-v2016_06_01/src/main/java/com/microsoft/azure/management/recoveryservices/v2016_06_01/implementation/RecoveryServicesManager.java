/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.recoveryservices.v2016_06_01.implementation;

import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.arm.resources.AzureConfigurable;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
import com.microsoft.azure.management.recoveryservices.v2016_06_01.VaultCertificates;
import com.microsoft.azure.management.recoveryservices.v2016_06_01.RegisteredIdentities;
import com.microsoft.azure.management.recoveryservices.v2016_06_01.ReplicationUsages;
import com.microsoft.azure.management.recoveryservices.v2016_06_01.PrivateLinkResources;
import com.microsoft.azure.management.recoveryservices.v2016_06_01.RecoveryServices;
import com.microsoft.azure.management.recoveryservices.v2016_06_01.Vaults;
import com.microsoft.azure.management.recoveryservices.v2016_06_01.Operations;
import com.microsoft.azure.management.recoveryservices.v2016_06_01.VaultExtendedInfos;
import com.microsoft.azure.management.recoveryservices.v2016_06_01.Usages;
import com.microsoft.azure.arm.resources.implementation.AzureConfigurableCoreImpl;
import com.microsoft.azure.arm.resources.implementation.ManagerCore;

/**
 * Entry point to Azure RecoveryServices resource management.
 */
public final class RecoveryServicesManager extends ManagerCore<RecoveryServicesManager, RecoveryServicesClientImpl> {
    private VaultCertificates vaultCertificates;
    private RegisteredIdentities registeredIdentities;
    private ReplicationUsages replicationUsages;
    private PrivateLinkResources privateLinkResources;
    private RecoveryServices recoveryServices;
    private Vaults vaults;
    private Operations operations;
    private VaultExtendedInfos vaultExtendedInfos;
    private Usages usages;
    /**
    * Get a Configurable instance that can be used to create RecoveryServicesManager with optional configuration.
    *
    * @return the instance allowing configurations
    */
    public static Configurable configure() {
        return new RecoveryServicesManager.ConfigurableImpl();
    }
    /**
    * Creates an instance of RecoveryServicesManager that exposes RecoveryServices resource management API entry points.
    *
    * @param credentials the credentials to use
    * @param subscriptionId the subscription UUID
    * @return the RecoveryServicesManager
    */
    public static RecoveryServicesManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
        return new RecoveryServicesManager(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .build(), subscriptionId);
    }
    /**
    * Creates an instance of RecoveryServicesManager that exposes RecoveryServices resource management API entry points.
    *
    * @param restClient the RestClient to be used for API calls.
    * @param subscriptionId the subscription UUID
    * @return the RecoveryServicesManager
    */
    public static RecoveryServicesManager authenticate(RestClient restClient, String subscriptionId) {
        return new RecoveryServicesManager(restClient, subscriptionId);
    }
    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of RecoveryServicesManager that exposes RecoveryServices management API entry points.
        *
        * @param credentials the credentials to use
        * @param subscriptionId the subscription UUID
        * @return the interface exposing RecoveryServices management API entry points that work across subscriptions
        */
        RecoveryServicesManager authenticate(AzureTokenCredentials credentials, String subscriptionId);
    }

    /**
     * @return Entry point to manage VaultCertificates.
     */
    public VaultCertificates vaultCertificates() {
        if (this.vaultCertificates == null) {
            this.vaultCertificates = new VaultCertificatesImpl(this);
        }
        return this.vaultCertificates;
    }

    /**
     * @return Entry point to manage RegisteredIdentities.
     */
    public RegisteredIdentities registeredIdentities() {
        if (this.registeredIdentities == null) {
            this.registeredIdentities = new RegisteredIdentitiesImpl(this);
        }
        return this.registeredIdentities;
    }

    /**
     * @return Entry point to manage ReplicationUsages.
     */
    public ReplicationUsages replicationUsages() {
        if (this.replicationUsages == null) {
            this.replicationUsages = new ReplicationUsagesImpl(this);
        }
        return this.replicationUsages;
    }

    /**
     * @return Entry point to manage PrivateLinkResources.
     */
    public PrivateLinkResources privateLinkResources() {
        if (this.privateLinkResources == null) {
            this.privateLinkResources = new PrivateLinkResourcesImpl(this);
        }
        return this.privateLinkResources;
    }

    /**
     * @return Entry point to manage RecoveryServices.
     */
    public RecoveryServices recoveryServices() {
        if (this.recoveryServices == null) {
            this.recoveryServices = new RecoveryServicesImpl(this);
        }
        return this.recoveryServices;
    }

    /**
     * @return Entry point to manage Vaults.
     */
    public Vaults vaults() {
        if (this.vaults == null) {
            this.vaults = new VaultsImpl(this);
        }
        return this.vaults;
    }

    /**
     * @return Entry point to manage Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(this);
        }
        return this.operations;
    }

    /**
     * @return Entry point to manage VaultExtendedInfos.
     */
    public VaultExtendedInfos vaultExtendedInfos() {
        if (this.vaultExtendedInfos == null) {
            this.vaultExtendedInfos = new VaultExtendedInfosImpl(this);
        }
        return this.vaultExtendedInfos;
    }

    /**
     * @return Entry point to manage Usages.
     */
    public Usages usages() {
        if (this.usages == null) {
            this.usages = new UsagesImpl(this);
        }
        return this.usages;
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableCoreImpl<Configurable> implements Configurable {
        public RecoveryServicesManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
           return RecoveryServicesManager.authenticate(buildRestClient(credentials), subscriptionId);
        }
     }
    private RecoveryServicesManager(RestClient restClient, String subscriptionId) {
        super(
            restClient,
            subscriptionId,
            new RecoveryServicesClientImpl(restClient).withSubscriptionId(subscriptionId));
    }
}
