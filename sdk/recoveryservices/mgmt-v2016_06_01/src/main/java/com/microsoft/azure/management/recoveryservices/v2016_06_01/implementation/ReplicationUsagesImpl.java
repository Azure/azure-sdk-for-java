/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.recoveryservices.v2016_06_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.recoveryservices.v2016_06_01.ReplicationUsages;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.recoveryservices.v2016_06_01.ReplicationUsage;

class ReplicationUsagesImpl extends WrapperImpl<ReplicationUsagesInner> implements ReplicationUsages {
    private final RecoveryServicesManager manager;

    ReplicationUsagesImpl(RecoveryServicesManager manager) {
        super(manager.inner().replicationUsages());
        this.manager = manager;
    }

    public RecoveryServicesManager manager() {
        return this.manager;
    }

    private ReplicationUsageImpl wrapModel(ReplicationUsageInner inner) {
        return  new ReplicationUsageImpl(inner, manager());
    }

    @Override
    public Observable<ReplicationUsage> listAsync(String resourceGroupName, String vaultName) {
        ReplicationUsagesInner client = this.inner();
        return client.listAsync(resourceGroupName, vaultName)
        .flatMap(new Func1<List<ReplicationUsageInner>, Observable<ReplicationUsageInner>>() {
            @Override
            public Observable<ReplicationUsageInner> call(List<ReplicationUsageInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<ReplicationUsageInner, ReplicationUsage>() {
            @Override
            public ReplicationUsage call(ReplicationUsageInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
