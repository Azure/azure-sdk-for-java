// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservices.fluent.models.VaultInner;
import com.azure.resourcemanager.recoveryservices.models.IdentityData;
import com.azure.resourcemanager.recoveryservices.models.PublicNetworkAccess;
import com.azure.resourcemanager.recoveryservices.models.ResourceIdentityType;
import com.azure.resourcemanager.recoveryservices.models.Sku;
import com.azure.resourcemanager.recoveryservices.models.SkuName;
import com.azure.resourcemanager.recoveryservices.models.VaultList;
import com.azure.resourcemanager.recoveryservices.models.VaultProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class VaultListTests {
    @Test
    public void testDeserialize() {
        VaultList model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"identity\":{\"principalId\":\"fygxgispemvtzfk\",\"tenantId\":\"ubljofxqe\",\"type\":\"None\",\"userAssignedIdentities\":{}},\"properties\":{\"provisioningState\":\"qjhqjbas\",\"privateEndpointConnections\":[],\"privateEndpointStateForBackup\":\"None\",\"privateEndpointStateForSiteRecovery\":\"None\",\"moveState\":\"PrepareTimedout\",\"backupStorageVersion\":\"Unassigned\",\"publicNetworkAccess\":\"Disabled\"},\"sku\":{\"name\":\"Standard\",\"tier\":\"wrwclxxwrljd\",\"family\":\"skcqvkocrcjd\",\"size\":\"tnhxbn\",\"capacity\":\"iksqr\"},\"etag\":\"sainqpjwnzl\",\"location\":\"jfm\",\"tags\":{\"ujitcjcz\":\"ebvmgxsabkyqd\",\"dkvwrwjfe\":\"zevndhkrwpdappds\",\"je\":\"snhu\"},\"id\":\"tmrldhugjzzdatq\",\"name\":\"hocdgeab\",\"type\":\"gphuticndvka\"}],\"nextLink\":\"wyiftyhxhur\"}")
                .toObject(VaultList.class);
        Assertions.assertEquals("jfm", model.value().get(0).location());
        Assertions.assertEquals("ebvmgxsabkyqd", model.value().get(0).tags().get("ujitcjcz"));
        Assertions.assertEquals(ResourceIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.value().get(0).properties().publicNetworkAccess());
        Assertions.assertEquals(SkuName.STANDARD, model.value().get(0).sku().name());
        Assertions.assertEquals("wrwclxxwrljd", model.value().get(0).sku().tier());
        Assertions.assertEquals("skcqvkocrcjd", model.value().get(0).sku().family());
        Assertions.assertEquals("tnhxbn", model.value().get(0).sku().size());
        Assertions.assertEquals("iksqr", model.value().get(0).sku().capacity());
        Assertions.assertEquals("sainqpjwnzl", model.value().get(0).etag());
    }

    @Test
    public void testSerialize() {
        VaultList model =
            new VaultList()
                .withValue(
                    Arrays
                        .asList(
                            new VaultInner()
                                .withLocation("jfm")
                                .withTags(
                                    mapOf("ujitcjcz", "ebvmgxsabkyqd", "dkvwrwjfe", "zevndhkrwpdappds", "je", "snhu"))
                                .withIdentity(
                                    new IdentityData()
                                        .withType(ResourceIdentityType.NONE)
                                        .withUserAssignedIdentities(mapOf()))
                                .withProperties(
                                    new VaultProperties().withPublicNetworkAccess(PublicNetworkAccess.DISABLED))
                                .withSku(
                                    new Sku()
                                        .withName(SkuName.STANDARD)
                                        .withTier("wrwclxxwrljd")
                                        .withFamily("skcqvkocrcjd")
                                        .withSize("tnhxbn")
                                        .withCapacity("iksqr"))
                                .withEtag("sainqpjwnzl")));
        model = BinaryData.fromObject(model).toObject(VaultList.class);
        Assertions.assertEquals("jfm", model.value().get(0).location());
        Assertions.assertEquals("ebvmgxsabkyqd", model.value().get(0).tags().get("ujitcjcz"));
        Assertions.assertEquals(ResourceIdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.value().get(0).properties().publicNetworkAccess());
        Assertions.assertEquals(SkuName.STANDARD, model.value().get(0).sku().name());
        Assertions.assertEquals("wrwclxxwrljd", model.value().get(0).sku().tier());
        Assertions.assertEquals("skcqvkocrcjd", model.value().get(0).sku().family());
        Assertions.assertEquals("tnhxbn", model.value().get(0).sku().size());
        Assertions.assertEquals("iksqr", model.value().get(0).sku().capacity());
        Assertions.assertEquals("sainqpjwnzl", model.value().get(0).etag());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
