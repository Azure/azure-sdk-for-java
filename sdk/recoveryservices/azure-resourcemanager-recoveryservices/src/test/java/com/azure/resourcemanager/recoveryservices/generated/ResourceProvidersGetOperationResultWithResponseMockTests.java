// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.recoveryservices.RecoveryServicesManager;
import com.azure.resourcemanager.recoveryservices.models.InfrastructureEncryptionState;
import com.azure.resourcemanager.recoveryservices.models.PublicNetworkAccess;
import com.azure.resourcemanager.recoveryservices.models.ResourceIdentityType;
import com.azure.resourcemanager.recoveryservices.models.SkuName;
import com.azure.resourcemanager.recoveryservices.models.Vault;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ResourceProvidersGetOperationResultWithResponseMockTests {
    @Test
    public void testGetOperationResultWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"identity\":{\"principalId\":\"zsoibjudpfrxtr\",\"tenantId\":\"zvaytdwkqbr\",\"type\":\"None\",\"userAssignedIdentities\":{}},\"properties\":{\"provisioningState\":\"h\",\"upgradeDetails\":{\"operationId\":\"i\",\"startTimeUtc\":\"2021-11-01T17:10:34Z\",\"lastUpdatedTimeUtc\":\"2021-09-29T21:57:11Z\",\"endTimeUtc\":\"2020-12-31T16:12:57Z\",\"status\":\"Unknown\",\"message\":\"tdqoaxoruzfgsq\",\"triggerType\":\"UserTriggered\",\"upgradedResourceId\":\"rxxle\",\"previousResourceId\":\"ramxjezwlwnw\"},\"privateEndpointConnections\":[],\"privateEndpointStateForBackup\":\"Enabled\",\"privateEndpointStateForSiteRecovery\":\"None\",\"encryption\":{\"infrastructureEncryption\":\"Enabled\"},\"moveDetails\":{\"operationId\":\"oa\",\"startTimeUtc\":\"2021-07-09T00:51:43Z\",\"completionTimeUtc\":\"2021-02-12T17:14:45Z\",\"sourceResourceId\":\"dkooebwnu\",\"targetResourceId\":\"emmsbvdkc\"},\"moveState\":\"PrepareFailed\",\"backupStorageVersion\":\"Unassigned\",\"publicNetworkAccess\":\"Disabled\",\"monitoringSettings\":{},\"redundancySettings\":{\"standardTierStorageRedundancy\":\"LocallyRedundant\",\"crossRegionRestore\":\"Disabled\"},\"securitySettings\":{}},\"sku\":{\"name\":\"RS0\",\"tier\":\"f\",\"family\":\"lfoakg\",\"size\":\"fpagaowpulp\",\"capacity\":\"lyls\"},\"etag\":\"qjnsjervtia\",\"location\":\"xsdszuempsb\",\"tags\":{\"eyvpnqicvinvkj\":\"z\"},\"id\":\"xdxr\",\"name\":\"uukzclewyhmlw\",\"type\":\"aztz\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        RecoveryServicesManager manager =
            RecoveryServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Vault response =
            manager
                .resourceProviders()
                .getOperationResultWithResponse("fimrzrtuzqogse", "nevfdnw", "wmewzsyy", Context.NONE)
                .getValue();

        Assertions.assertEquals("xsdszuempsb", response.location());
        Assertions.assertEquals("z", response.tags().get("eyvpnqicvinvkj"));
        Assertions.assertEquals(ResourceIdentityType.NONE, response.identity().type());
        Assertions
            .assertEquals(
                InfrastructureEncryptionState.ENABLED, response.properties().encryption().infrastructureEncryption());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, response.properties().publicNetworkAccess());
        Assertions.assertEquals(SkuName.RS0, response.sku().name());
        Assertions.assertEquals("f", response.sku().tier());
        Assertions.assertEquals("lfoakg", response.sku().family());
        Assertions.assertEquals("fpagaowpulp", response.sku().size());
        Assertions.assertEquals("lyls", response.sku().capacity());
        Assertions.assertEquals("qjnsjervtia", response.etag());
    }
}
