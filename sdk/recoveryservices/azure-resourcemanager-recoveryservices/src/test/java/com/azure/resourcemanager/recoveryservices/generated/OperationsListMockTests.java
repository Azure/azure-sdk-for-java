// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservices.RecoveryServicesManager;
import com.azure.resourcemanager.recoveryservices.models.ClientDiscoveryValueForSingleApi;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"nwbmeh\",\"display\":{\"provider\":\"yvjusrtslhsp\",\"resource\":\"eemaofmxagkvtme\",\"operation\":\"qkrhahvljua\",\"description\":\"quhcdhmduala\"},\"origin\":\"qpv\",\"properties\":{\"serviceSpecification\":{\"logSpecifications\":[{\"name\":\"rcrgvx\",\"displayName\":\"gomz\",\"blobDuration\":\"misgwbnb\"}]}}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesManager manager = RecoveryServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<ClientDiscoveryValueForSingleApi> response
            = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("nwbmeh", response.iterator().next().name());
        Assertions.assertEquals("yvjusrtslhsp", response.iterator().next().display().provider());
        Assertions.assertEquals("eemaofmxagkvtme", response.iterator().next().display().resource());
        Assertions.assertEquals("qkrhahvljua", response.iterator().next().display().operation());
        Assertions.assertEquals("quhcdhmduala", response.iterator().next().display().description());
        Assertions.assertEquals("qpv", response.iterator().next().origin());
        Assertions.assertEquals("rcrgvx",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("gomz",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).displayName());
        Assertions.assertEquals("misgwbnb",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).blobDuration());
    }
}
