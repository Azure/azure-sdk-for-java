// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservices.models.IdentityData;
import com.azure.resourcemanager.recoveryservices.models.InfrastructureEncryptionState;
import com.azure.resourcemanager.recoveryservices.models.MonitoringSettings;
import com.azure.resourcemanager.recoveryservices.models.PatchVault;
import com.azure.resourcemanager.recoveryservices.models.PublicNetworkAccess;
import com.azure.resourcemanager.recoveryservices.models.ResourceIdentityType;
import com.azure.resourcemanager.recoveryservices.models.SecuritySettings;
import com.azure.resourcemanager.recoveryservices.models.Sku;
import com.azure.resourcemanager.recoveryservices.models.SkuName;
import com.azure.resourcemanager.recoveryservices.models.UpgradeDetails;
import com.azure.resourcemanager.recoveryservices.models.UserIdentity;
import com.azure.resourcemanager.recoveryservices.models.VaultProperties;
import com.azure.resourcemanager.recoveryservices.models.VaultPropertiesEncryption;
import com.azure.resourcemanager.recoveryservices.models.VaultPropertiesMoveDetails;
import com.azure.resourcemanager.recoveryservices.models.VaultPropertiesRedundancySettings;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class PatchVaultTests {
    @Test
    public void testDeserialize() {
        PatchVault model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"ou\",\"upgradeDetails\":{\"operationId\":\"udwtiukbl\",\"startTimeUtc\":\"2020-12-23T02:33:27Z\",\"lastUpdatedTimeUtc\":\"2021-09-30T15:05:34Z\",\"endTimeUtc\":\"2021-05-04T07:17:38Z\",\"status\":\"Upgraded\",\"message\":\"yxoegukgjnp\",\"triggerType\":\"UserTriggered\",\"upgradedResourceId\":\"ygevqzntypmrbpiz\",\"previousResourceId\":\"r\"},\"privateEndpointConnections\":[{\"id\":\"pyd\",\"name\":\"hxdeoejz\",\"type\":\"w\",\"location\":\"sjttgzfbish\"},{\"id\":\"khaj\",\"name\":\"eamdp\",\"type\":\"g\",\"location\":\"pbuxwgipwhon\"},{\"id\":\"kgshwa\",\"name\":\"xzbinjeputt\",\"type\":\"ywnuzoq\",\"location\":\"iyqzrnk\"},{\"id\":\"vyxlwhzlsicohoqq\",\"name\":\"lryav\",\"type\":\"heun\",\"location\":\"qhgyxzkonocukok\"}],\"privateEndpointStateForBackup\":\"None\",\"privateEndpointStateForSiteRecovery\":\"Enabled\",\"encryption\":{\"infrastructureEncryption\":\"Enabled\"},\"moveDetails\":{\"operationId\":\"fkbey\",\"startTimeUtc\":\"2021-03-31T17:10:24Z\",\"completionTimeUtc\":\"2021-03-15T02:17:35Z\",\"sourceResourceId\":\"mwvvjektcxsenhw\",\"targetResourceId\":\"s\"},\"moveState\":\"CommitFailed\",\"backupStorageVersion\":\"V2\",\"publicNetworkAccess\":\"Enabled\",\"monitoringSettings\":{},\"redundancySettings\":{\"standardTierStorageRedundancy\":\"GeoRedundant\",\"crossRegionRestore\":\"Disabled\"},\"securitySettings\":{}},\"sku\":{\"name\":\"RS0\",\"tier\":\"aetcktvfcivfs\",\"family\":\"ymuctqhjfbebrj\",\"size\":\"erfuwuttt\",\"capacity\":\"vjrbirphxepcyvah\"},\"identity\":{\"principalId\":\"jky\",\"tenantId\":\"j\",\"type\":\"SystemAssigned,"
                        + " UserAssigned\",\"userAssignedIdentities\":{\"bijhtxfvgxbf\":{\"principalId\":\"gidokgjljyoxgvcl\",\"clientId\":\"gsncghkjeszz\"}}},\"location\":\"xnehmpvec\",\"tags\":{\"flz\":\"debfqkkrbmpukgri\",\"qzahmgkbrp\":\"fbxzpuzycisp\",\"hibnuqqkpika\":\"y\",\"buynhijggm\":\"rgvtqag\"},\"etag\":\"fsiarbutr\",\"id\":\"vpnazzm\",\"name\":\"jrunmpxtt\",\"type\":\"bh\"}")
                .toObject(PatchVault.class);
        Assertions.assertEquals("xnehmpvec", model.location());
        Assertions.assertEquals("debfqkkrbmpukgri", model.tags().get("flz"));
        Assertions.assertEquals("fsiarbutr", model.etag());
        Assertions
            .assertEquals(
                InfrastructureEncryptionState.ENABLED, model.properties().encryption().infrastructureEncryption());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.properties().publicNetworkAccess());
        Assertions.assertEquals(SkuName.RS0, model.sku().name());
        Assertions.assertEquals("aetcktvfcivfs", model.sku().tier());
        Assertions.assertEquals("ymuctqhjfbebrj", model.sku().family());
        Assertions.assertEquals("erfuwuttt", model.sku().size());
        Assertions.assertEquals("vjrbirphxepcyvah", model.sku().capacity());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    @Test
    public void testSerialize() {
        PatchVault model =
            new PatchVault()
                .withLocation("xnehmpvec")
                .withTags(
                    mapOf(
                        "flz",
                        "debfqkkrbmpukgri",
                        "qzahmgkbrp",
                        "fbxzpuzycisp",
                        "hibnuqqkpika",
                        "y",
                        "buynhijggm",
                        "rgvtqag"))
                .withEtag("fsiarbutr")
                .withProperties(
                    new VaultProperties()
                        .withUpgradeDetails(new UpgradeDetails())
                        .withEncryption(
                            new VaultPropertiesEncryption()
                                .withInfrastructureEncryption(InfrastructureEncryptionState.ENABLED))
                        .withMoveDetails(new VaultPropertiesMoveDetails())
                        .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                        .withMonitoringSettings(new MonitoringSettings())
                        .withRedundancySettings(new VaultPropertiesRedundancySettings())
                        .withSecuritySettings(new SecuritySettings()))
                .withSku(
                    new Sku()
                        .withName(SkuName.RS0)
                        .withTier("aetcktvfcivfs")
                        .withFamily("ymuctqhjfbebrj")
                        .withSize("erfuwuttt")
                        .withCapacity("vjrbirphxepcyvah"))
                .withIdentity(
                    new IdentityData()
                        .withType(ResourceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                        .withUserAssignedIdentities(mapOf("bijhtxfvgxbf", new UserIdentity())));
        model = BinaryData.fromObject(model).toObject(PatchVault.class);
        Assertions.assertEquals("xnehmpvec", model.location());
        Assertions.assertEquals("debfqkkrbmpukgri", model.tags().get("flz"));
        Assertions.assertEquals("fsiarbutr", model.etag());
        Assertions
            .assertEquals(
                InfrastructureEncryptionState.ENABLED, model.properties().encryption().infrastructureEncryption());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.properties().publicNetworkAccess());
        Assertions.assertEquals(SkuName.RS0, model.sku().name());
        Assertions.assertEquals("aetcktvfcivfs", model.sku().tier());
        Assertions.assertEquals("ymuctqhjfbebrj", model.sku().family());
        Assertions.assertEquals("erfuwuttt", model.sku().size());
        Assertions.assertEquals("vjrbirphxepcyvah", model.sku().capacity());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
