// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservices.RecoveryServicesManager;
import com.azure.resourcemanager.recoveryservices.models.UsagesUnit;
import com.azure.resourcemanager.recoveryservices.models.VaultUsage;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class UsagesListByVaultsMockTests {
    @Test
    public void testListByVaults() throws Exception {
        String responseStr
            = "{\"value\":[{\"unit\":\"Percent\",\"quotaPeriod\":\"q\",\"nextResetTime\":\"2020-12-29T22:09:15Z\",\"currentValue\":8713386770833418913,\"limit\":843718939549204325,\"name\":{\"value\":\"hkh\",\"localizedValue\":\"xkhnzbonlwnto\"}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesManager manager = RecoveryServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<VaultUsage> response
            = manager.usages().listByVaults("zg", "zuf", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(UsagesUnit.PERCENT, response.iterator().next().unit());
        Assertions.assertEquals("q", response.iterator().next().quotaPeriod());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-29T22:09:15Z"),
            response.iterator().next().nextResetTime());
        Assertions.assertEquals(8713386770833418913L, response.iterator().next().currentValue());
        Assertions.assertEquals(843718939549204325L, response.iterator().next().limit());
        Assertions.assertEquals("hkh", response.iterator().next().name().value());
        Assertions.assertEquals("xkhnzbonlwnto", response.iterator().next().name().localizedValue());
    }
}
