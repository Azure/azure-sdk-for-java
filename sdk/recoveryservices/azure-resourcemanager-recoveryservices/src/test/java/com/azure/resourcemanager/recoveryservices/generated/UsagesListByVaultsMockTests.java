// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservices.RecoveryServicesManager;
import com.azure.resourcemanager.recoveryservices.models.UsagesUnit;
import com.azure.resourcemanager.recoveryservices.models.VaultUsage;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class UsagesListByVaultsMockTests {
    @Test
    public void testListByVaults() throws Exception {
        String responseStr
            = "{\"value\":[{\"unit\":\"Seconds\",\"quotaPeriod\":\"bahwfl\",\"nextResetTime\":\"2021-03-25T00:18:24Z\",\"currentValue\":8596690618155764706,\"limit\":2447311563304363726,\"name\":{\"value\":\"fyyvoq\",\"localizedValue\":\"piexpbtgiw\"}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesManager manager = RecoveryServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<VaultUsage> response
            = manager.usages().listByVaults("jxgciqibrh", "sxsdqrhzoymibm", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(UsagesUnit.SECONDS, response.iterator().next().unit());
        Assertions.assertEquals("bahwfl", response.iterator().next().quotaPeriod());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-25T00:18:24Z"),
            response.iterator().next().nextResetTime());
        Assertions.assertEquals(8596690618155764706L, response.iterator().next().currentValue());
        Assertions.assertEquals(2447311563304363726L, response.iterator().next().limit());
        Assertions.assertEquals("fyyvoq", response.iterator().next().name().value());
        Assertions.assertEquals("piexpbtgiw", response.iterator().next().name().localizedValue());
    }
}
