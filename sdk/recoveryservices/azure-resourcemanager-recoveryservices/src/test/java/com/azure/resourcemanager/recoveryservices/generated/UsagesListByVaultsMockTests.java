// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.recoveryservices.RecoveryServicesManager;
import com.azure.resourcemanager.recoveryservices.models.UsagesUnit;
import com.azure.resourcemanager.recoveryservices.models.VaultUsage;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class UsagesListByVaultsMockTests {
    @Test
    public void testListByVaults() throws Exception {
        String responseStr
            = "{\"value\":[{\"unit\":\"Bytes\",\"quotaPeriod\":\"uzqogsexnevf\",\"nextResetTime\":\"2021-03-10T16:20:19Z\",\"currentValue\":8870331151727110664,\"limit\":1619893162220257557,\"name\":{\"value\":\"yceuzsoib\",\"localizedValue\":\"dpfrxtrthzvaytdw\"}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RecoveryServicesManager manager = RecoveryServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<VaultUsage> response
            = manager.usages().listByVaults("aaabjyvayff", "m", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(UsagesUnit.BYTES, response.iterator().next().unit());
        Assertions.assertEquals("uzqogsexnevf", response.iterator().next().quotaPeriod());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-10T16:20:19Z"),
            response.iterator().next().nextResetTime());
        Assertions.assertEquals(8870331151727110664L, response.iterator().next().currentValue());
        Assertions.assertEquals(1619893162220257557L, response.iterator().next().limit());
        Assertions.assertEquals("yceuzsoib", response.iterator().next().name().value());
        Assertions.assertEquals("dpfrxtrthzvaytdw", response.iterator().next().name().localizedValue());
    }
}
