// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservices.models.ResourceCertificateAndAcsDetails;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class ResourceCertificateAndAcsDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ResourceCertificateAndAcsDetails model = BinaryData.fromString(
            "{\"authType\":\"AccessControlService\",\"globalAcsNamespace\":\"cswsrtjri\",\"globalAcsHostName\":\"lrbpbewtghfgbl\",\"globalAcsRPRealm\":\"gw\",\"friendlyName\":\"lvqhjkbegibtnmx\",\"issuer\":\"bwwaloa\",\"resourceId\":831563566329829657,\"subject\":\"rtzju\",\"thumbprint\":\"wyzmhtxon\",\"validFrom\":\"2021-08-29T11:45:06Z\",\"validTo\":\"2021-04-24T14:23:48Z\"}")
            .toObject(ResourceCertificateAndAcsDetails.class);
        Assertions.assertEquals("lvqhjkbegibtnmx", model.friendlyName());
        Assertions.assertEquals("bwwaloa", model.issuer());
        Assertions.assertEquals(831563566329829657L, model.resourceId());
        Assertions.assertEquals("rtzju", model.subject());
        Assertions.assertEquals("wyzmhtxon", model.thumbprint());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-29T11:45:06Z"), model.validFrom());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-24T14:23:48Z"), model.validTo());
        Assertions.assertEquals("cswsrtjri", model.globalAcsNamespace());
        Assertions.assertEquals("lrbpbewtghfgbl", model.globalAcsHostname());
        Assertions.assertEquals("gw", model.globalAcsRPRealm());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ResourceCertificateAndAcsDetails model
            = new ResourceCertificateAndAcsDetails().withFriendlyName("lvqhjkbegibtnmx")
                .withIssuer("bwwaloa")
                .withResourceId(831563566329829657L)
                .withSubject("rtzju")
                .withThumbprint("wyzmhtxon")
                .withValidFrom(OffsetDateTime.parse("2021-08-29T11:45:06Z"))
                .withValidTo(OffsetDateTime.parse("2021-04-24T14:23:48Z"))
                .withGlobalAcsNamespace("cswsrtjri")
                .withGlobalAcsHostname("lrbpbewtghfgbl")
                .withGlobalAcsRPRealm("gw");
        model = BinaryData.fromObject(model).toObject(ResourceCertificateAndAcsDetails.class);
        Assertions.assertEquals("lvqhjkbegibtnmx", model.friendlyName());
        Assertions.assertEquals("bwwaloa", model.issuer());
        Assertions.assertEquals(831563566329829657L, model.resourceId());
        Assertions.assertEquals("rtzju", model.subject());
        Assertions.assertEquals("wyzmhtxon", model.thumbprint());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-29T11:45:06Z"), model.validFrom());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-24T14:23:48Z"), model.validTo());
        Assertions.assertEquals("cswsrtjri", model.globalAcsNamespace());
        Assertions.assertEquals("lrbpbewtghfgbl", model.globalAcsHostname());
        Assertions.assertEquals("gw", model.globalAcsRPRealm());
    }
}
