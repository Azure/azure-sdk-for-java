// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.recoveryservices.models.ResourceCertificateAndAcsDetails;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class ResourceCertificateAndAcsDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ResourceCertificateAndAcsDetails model =
            BinaryData
                .fromString(
                    "{\"authType\":\"AccessControlService\",\"globalAcsNamespace\":\"x\",\"globalAcsHostName\":\"it\",\"globalAcsRPRealm\":\"nrjawgqwg\",\"friendlyName\":\"isk\",\"issuer\":\"bkpyc\",\"resourceId\":3207887590068682243,\"subject\":\"dnhjdauwhvylw\",\"thumbprint\":\"tdhxujznbmpowuwp\",\"validFrom\":\"2021-07-21T15:39:33Z\",\"validTo\":\"2021-02-09T00:37:27Z\"}")
                .toObject(ResourceCertificateAndAcsDetails.class);
        Assertions.assertEquals("isk", model.friendlyName());
        Assertions.assertEquals("bkpyc", model.issuer());
        Assertions.assertEquals(3207887590068682243L, model.resourceId());
        Assertions.assertEquals("dnhjdauwhvylw", model.subject());
        Assertions.assertEquals("tdhxujznbmpowuwp", model.thumbprint());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-21T15:39:33Z"), model.validFrom());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-09T00:37:27Z"), model.validTo());
        Assertions.assertEquals("x", model.globalAcsNamespace());
        Assertions.assertEquals("it", model.globalAcsHostname());
        Assertions.assertEquals("nrjawgqwg", model.globalAcsRPRealm());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ResourceCertificateAndAcsDetails model =
            new ResourceCertificateAndAcsDetails()
                .withFriendlyName("isk")
                .withIssuer("bkpyc")
                .withResourceId(3207887590068682243L)
                .withSubject("dnhjdauwhvylw")
                .withThumbprint("tdhxujznbmpowuwp")
                .withValidFrom(OffsetDateTime.parse("2021-07-21T15:39:33Z"))
                .withValidTo(OffsetDateTime.parse("2021-02-09T00:37:27Z"))
                .withGlobalAcsNamespace("x")
                .withGlobalAcsHostname("it")
                .withGlobalAcsRPRealm("nrjawgqwg");
        model = BinaryData.fromObject(model).toObject(ResourceCertificateAndAcsDetails.class);
        Assertions.assertEquals("isk", model.friendlyName());
        Assertions.assertEquals("bkpyc", model.issuer());
        Assertions.assertEquals(3207887590068682243L, model.resourceId());
        Assertions.assertEquals("dnhjdauwhvylw", model.subject());
        Assertions.assertEquals("tdhxujznbmpowuwp", model.thumbprint());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-21T15:39:33Z"), model.validFrom());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-09T00:37:27Z"), model.validTo());
        Assertions.assertEquals("x", model.globalAcsNamespace());
        Assertions.assertEquals("it", model.globalAcsHostname());
        Assertions.assertEquals("nrjawgqwg", model.globalAcsRPRealm());
    }
}
