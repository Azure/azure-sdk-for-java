// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Input to get capabilities information for Microsoft.RecoveryServices.
 */
@Fluent
public final class ResourceCapabilities extends ResourceCapabilitiesBase {
    /*
     * Capabilities information
     */
    private CapabilitiesProperties properties;

    /**
     * Creates an instance of ResourceCapabilities class.
     */
    public ResourceCapabilities() {
    }

    /**
     * Get the properties property: Capabilities information.
     * 
     * @return the properties value.
     */
    public CapabilitiesProperties properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Capabilities information.
     * 
     * @param properties the properties value to set.
     * @return the ResourceCapabilities object itself.
     */
    public ResourceCapabilities withProperties(CapabilitiesProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ResourceCapabilities withType(String type) {
        super.withType(type);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (properties() != null) {
            properties().validate();
        }
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model ResourceCapabilities"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResourceCapabilities.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", type());
        jsonWriter.writeJsonField("properties", this.properties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceCapabilities from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceCapabilities if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceCapabilities.
     */
    public static ResourceCapabilities fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceCapabilities deserializedResourceCapabilities = new ResourceCapabilities();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedResourceCapabilities.withType(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    deserializedResourceCapabilities.properties = CapabilitiesProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceCapabilities;
        });
    }
}
