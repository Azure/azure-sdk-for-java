// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.recoveryservices.models.NameInfo;
import com.azure.resourcemanager.recoveryservices.models.UsagesUnit;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Usages of a vault.
 */
@Fluent
public final class VaultUsageInner implements JsonSerializable<VaultUsageInner> {
    /*
     * Unit of the usage.
     */
    private UsagesUnit unit;

    /*
     * Quota period of usage.
     */
    private String quotaPeriod;

    /*
     * Next reset time of usage.
     */
    private OffsetDateTime nextResetTime;

    /*
     * Current value of usage.
     */
    private Long currentValue;

    /*
     * Limit of usage.
     */
    private Long limit;

    /*
     * Name of usage.
     */
    private NameInfo name;

    /**
     * Creates an instance of VaultUsageInner class.
     */
    public VaultUsageInner() {
    }

    /**
     * Get the unit property: Unit of the usage.
     * 
     * @return the unit value.
     */
    public UsagesUnit unit() {
        return this.unit;
    }

    /**
     * Set the unit property: Unit of the usage.
     * 
     * @param unit the unit value to set.
     * @return the VaultUsageInner object itself.
     */
    public VaultUsageInner withUnit(UsagesUnit unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Get the quotaPeriod property: Quota period of usage.
     * 
     * @return the quotaPeriod value.
     */
    public String quotaPeriod() {
        return this.quotaPeriod;
    }

    /**
     * Set the quotaPeriod property: Quota period of usage.
     * 
     * @param quotaPeriod the quotaPeriod value to set.
     * @return the VaultUsageInner object itself.
     */
    public VaultUsageInner withQuotaPeriod(String quotaPeriod) {
        this.quotaPeriod = quotaPeriod;
        return this;
    }

    /**
     * Get the nextResetTime property: Next reset time of usage.
     * 
     * @return the nextResetTime value.
     */
    public OffsetDateTime nextResetTime() {
        return this.nextResetTime;
    }

    /**
     * Set the nextResetTime property: Next reset time of usage.
     * 
     * @param nextResetTime the nextResetTime value to set.
     * @return the VaultUsageInner object itself.
     */
    public VaultUsageInner withNextResetTime(OffsetDateTime nextResetTime) {
        this.nextResetTime = nextResetTime;
        return this;
    }

    /**
     * Get the currentValue property: Current value of usage.
     * 
     * @return the currentValue value.
     */
    public Long currentValue() {
        return this.currentValue;
    }

    /**
     * Set the currentValue property: Current value of usage.
     * 
     * @param currentValue the currentValue value to set.
     * @return the VaultUsageInner object itself.
     */
    public VaultUsageInner withCurrentValue(Long currentValue) {
        this.currentValue = currentValue;
        return this;
    }

    /**
     * Get the limit property: Limit of usage.
     * 
     * @return the limit value.
     */
    public Long limit() {
        return this.limit;
    }

    /**
     * Set the limit property: Limit of usage.
     * 
     * @param limit the limit value to set.
     * @return the VaultUsageInner object itself.
     */
    public VaultUsageInner withLimit(Long limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Get the name property: Name of usage.
     * 
     * @return the name value.
     */
    public NameInfo name() {
        return this.name;
    }

    /**
     * Set the name property: Name of usage.
     * 
     * @param name the name value to set.
     * @return the VaultUsageInner object itself.
     */
    public VaultUsageInner withName(NameInfo name) {
        this.name = name;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() != null) {
            name().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("unit", this.unit == null ? null : this.unit.toString());
        jsonWriter.writeStringField("quotaPeriod", this.quotaPeriod);
        jsonWriter.writeStringField("nextResetTime",
            this.nextResetTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.nextResetTime));
        jsonWriter.writeNumberField("currentValue", this.currentValue);
        jsonWriter.writeNumberField("limit", this.limit);
        jsonWriter.writeJsonField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VaultUsageInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VaultUsageInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VaultUsageInner.
     */
    public static VaultUsageInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VaultUsageInner deserializedVaultUsageInner = new VaultUsageInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("unit".equals(fieldName)) {
                    deserializedVaultUsageInner.unit = UsagesUnit.fromString(reader.getString());
                } else if ("quotaPeriod".equals(fieldName)) {
                    deserializedVaultUsageInner.quotaPeriod = reader.getString();
                } else if ("nextResetTime".equals(fieldName)) {
                    deserializedVaultUsageInner.nextResetTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("currentValue".equals(fieldName)) {
                    deserializedVaultUsageInner.currentValue = reader.getNullable(JsonReader::getLong);
                } else if ("limit".equals(fieldName)) {
                    deserializedVaultUsageInner.limit = reader.getNullable(JsonReader::getLong);
                } else if ("name".equals(fieldName)) {
                    deserializedVaultUsageInner.name = NameInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVaultUsageInner;
        });
    }
}
