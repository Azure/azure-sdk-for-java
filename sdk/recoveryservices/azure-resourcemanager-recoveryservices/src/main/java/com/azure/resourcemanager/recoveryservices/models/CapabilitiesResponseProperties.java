// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Capabilities properties in response.
 */
@Fluent
public final class CapabilitiesResponseProperties implements JsonSerializable<CapabilitiesResponseProperties> {
    /*
     * The dnsZones property.
     */
    private List<DnsZoneResponse> dnsZones;

    /**
     * Creates an instance of CapabilitiesResponseProperties class.
     */
    public CapabilitiesResponseProperties() {
    }

    /**
     * Get the dnsZones property: The dnsZones property.
     * 
     * @return the dnsZones value.
     */
    public List<DnsZoneResponse> dnsZones() {
        return this.dnsZones;
    }

    /**
     * Set the dnsZones property: The dnsZones property.
     * 
     * @param dnsZones the dnsZones value to set.
     * @return the CapabilitiesResponseProperties object itself.
     */
    public CapabilitiesResponseProperties withDnsZones(List<DnsZoneResponse> dnsZones) {
        this.dnsZones = dnsZones;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dnsZones() != null) {
            dnsZones().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("dnsZones", this.dnsZones, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CapabilitiesResponseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CapabilitiesResponseProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CapabilitiesResponseProperties.
     */
    public static CapabilitiesResponseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CapabilitiesResponseProperties deserializedCapabilitiesResponseProperties
                = new CapabilitiesResponseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dnsZones".equals(fieldName)) {
                    List<DnsZoneResponse> dnsZones = reader.readArray(reader1 -> DnsZoneResponse.fromJson(reader1));
                    deserializedCapabilitiesResponseProperties.dnsZones = dnsZones;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCapabilitiesResponseProperties;
        });
    }
}
