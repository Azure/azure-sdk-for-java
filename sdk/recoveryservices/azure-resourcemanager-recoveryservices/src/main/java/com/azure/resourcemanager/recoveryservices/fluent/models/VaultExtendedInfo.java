// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservices.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Vault extended information.
 */
@Fluent
public final class VaultExtendedInfo implements JsonSerializable<VaultExtendedInfo> {
    /*
     * Integrity key.
     */
    private String integrityKey;

    /*
     * Encryption key.
     */
    private String encryptionKey;

    /*
     * Encryption key thumbprint.
     */
    private String encryptionKeyThumbprint;

    /*
     * Algorithm for Vault ExtendedInfo
     */
    private String algorithm;

    /**
     * Creates an instance of VaultExtendedInfo class.
     */
    public VaultExtendedInfo() {
    }

    /**
     * Get the integrityKey property: Integrity key.
     * 
     * @return the integrityKey value.
     */
    public String integrityKey() {
        return this.integrityKey;
    }

    /**
     * Set the integrityKey property: Integrity key.
     * 
     * @param integrityKey the integrityKey value to set.
     * @return the VaultExtendedInfo object itself.
     */
    public VaultExtendedInfo withIntegrityKey(String integrityKey) {
        this.integrityKey = integrityKey;
        return this;
    }

    /**
     * Get the encryptionKey property: Encryption key.
     * 
     * @return the encryptionKey value.
     */
    public String encryptionKey() {
        return this.encryptionKey;
    }

    /**
     * Set the encryptionKey property: Encryption key.
     * 
     * @param encryptionKey the encryptionKey value to set.
     * @return the VaultExtendedInfo object itself.
     */
    public VaultExtendedInfo withEncryptionKey(String encryptionKey) {
        this.encryptionKey = encryptionKey;
        return this;
    }

    /**
     * Get the encryptionKeyThumbprint property: Encryption key thumbprint.
     * 
     * @return the encryptionKeyThumbprint value.
     */
    public String encryptionKeyThumbprint() {
        return this.encryptionKeyThumbprint;
    }

    /**
     * Set the encryptionKeyThumbprint property: Encryption key thumbprint.
     * 
     * @param encryptionKeyThumbprint the encryptionKeyThumbprint value to set.
     * @return the VaultExtendedInfo object itself.
     */
    public VaultExtendedInfo withEncryptionKeyThumbprint(String encryptionKeyThumbprint) {
        this.encryptionKeyThumbprint = encryptionKeyThumbprint;
        return this;
    }

    /**
     * Get the algorithm property: Algorithm for Vault ExtendedInfo.
     * 
     * @return the algorithm value.
     */
    public String algorithm() {
        return this.algorithm;
    }

    /**
     * Set the algorithm property: Algorithm for Vault ExtendedInfo.
     * 
     * @param algorithm the algorithm value to set.
     * @return the VaultExtendedInfo object itself.
     */
    public VaultExtendedInfo withAlgorithm(String algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("integrityKey", this.integrityKey);
        jsonWriter.writeStringField("encryptionKey", this.encryptionKey);
        jsonWriter.writeStringField("encryptionKeyThumbprint", this.encryptionKeyThumbprint);
        jsonWriter.writeStringField("algorithm", this.algorithm);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VaultExtendedInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VaultExtendedInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VaultExtendedInfo.
     */
    public static VaultExtendedInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VaultExtendedInfo deserializedVaultExtendedInfo = new VaultExtendedInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("integrityKey".equals(fieldName)) {
                    deserializedVaultExtendedInfo.integrityKey = reader.getString();
                } else if ("encryptionKey".equals(fieldName)) {
                    deserializedVaultExtendedInfo.encryptionKey = reader.getString();
                } else if ("encryptionKeyThumbprint".equals(fieldName)) {
                    deserializedVaultExtendedInfo.encryptionKeyThumbprint = reader.getString();
                } else if ("algorithm".equals(fieldName)) {
                    deserializedVaultExtendedInfo.algorithm = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVaultExtendedInfo;
        });
    }
}
