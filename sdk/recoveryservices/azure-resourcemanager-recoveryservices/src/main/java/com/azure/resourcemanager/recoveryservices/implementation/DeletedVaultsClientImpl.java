// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservices.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.recoveryservices.fluent.DeletedVaultsClient;
import com.azure.resourcemanager.recoveryservices.fluent.models.DeletedVaultInner;
import com.azure.resourcemanager.recoveryservices.fluent.models.OperationResourceInner;
import com.azure.resourcemanager.recoveryservices.implementation.models.DeletedVaultList;
import com.azure.resourcemanager.recoveryservices.models.DeletedVaultUndeleteInput;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DeletedVaultsClient.
 */
public final class DeletedVaultsClientImpl implements DeletedVaultsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DeletedVaultsService service;

    /**
     * The service client containing this operation class.
     */
    private final RecoveryServicesManagementClientImpl client;

    /**
     * Initializes an instance of DeletedVaultsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DeletedVaultsClientImpl(RecoveryServicesManagementClientImpl client) {
        this.service
            = RestProxy.create(DeletedVaultsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for RecoveryServicesManagementClientDeletedVaults to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "RecoveryServicesManagementClientDeletedVaults")
    public interface DeletedVaultsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/deletedVaults")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeletedVaultList>> listBySubscriptionId(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/deletedVaults")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DeletedVaultList> listBySubscriptionIdSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/deletedVaults/{deletedVaultName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeletedVaultInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @PathParam("deletedVaultName") String deletedVaultName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/deletedVaults/{deletedVaultName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DeletedVaultInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @PathParam("deletedVaultName") String deletedVaultName,
            @HeaderParam("Accept") String accept, Context context);

        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/deletedVaults/{deletedVaultName}/undelete")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> undelete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @PathParam("deletedVaultName") String deletedVaultName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") DeletedVaultUndeleteInput body, Context context);

        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/deletedVaults/{deletedVaultName}/undelete")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> undeleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @PathParam("deletedVaultName") String deletedVaultName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") DeletedVaultUndeleteInput body, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/deletedVaults/{deletedVaultName}/operations/{operationId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OperationResourceInner>> getOperationStatus(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @PathParam("deletedVaultName") String deletedVaultName,
            @PathParam("operationId") String operationId, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/deletedVaults/{deletedVaultName}/operations/{operationId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<OperationResourceInner> getOperationStatusSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @PathParam("deletedVaultName") String deletedVaultName,
            @PathParam("operationId") String operationId, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeletedVaultList>> listBySubscriptionIdNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DeletedVaultList> listBySubscriptionIdNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List deleted vaults in a subscription.
     * 
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a list of DeletedVaults along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeletedVaultInner>> listBySubscriptionIdSinglePageAsync(String location) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBySubscriptionId(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), location, accept, context))
            .<PagedResponse<DeletedVaultInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List deleted vaults in a subscription.
     * 
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a list of DeletedVaults as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DeletedVaultInner> listBySubscriptionIdAsync(String location) {
        return new PagedFlux<>(() -> listBySubscriptionIdSinglePageAsync(location),
            nextLink -> listBySubscriptionIdNextSinglePageAsync(nextLink));
    }

    /**
     * List deleted vaults in a subscription.
     * 
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a list of DeletedVaults along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DeletedVaultInner> listBySubscriptionIdSinglePage(String location) {
        final String accept = "application/json";
        Response<DeletedVaultList> res = service.listBySubscriptionIdSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), location, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List deleted vaults in a subscription.
     * 
     * @param location The name of the Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a list of DeletedVaults along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DeletedVaultInner> listBySubscriptionIdSinglePage(String location, Context context) {
        final String accept = "application/json";
        Response<DeletedVaultList> res = service.listBySubscriptionIdSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), location, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List deleted vaults in a subscription.
     * 
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a list of DeletedVaults as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeletedVaultInner> listBySubscriptionId(String location) {
        return new PagedIterable<>(() -> listBySubscriptionIdSinglePage(location),
            nextLink -> listBySubscriptionIdNextSinglePage(nextLink));
    }

    /**
     * List deleted vaults in a subscription.
     * 
     * @param location The name of the Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a list of DeletedVaults as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeletedVaultInner> listBySubscriptionId(String location, Context context) {
        return new PagedIterable<>(() -> listBySubscriptionIdSinglePage(location, context),
            nextLink -> listBySubscriptionIdNextSinglePage(nextLink, context));
    }

    /**
     * Get a specific deleted vault.
     * 
     * @param location The location name.
     * @param deletedVaultName The name of the DeletedVault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific deleted vault along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeletedVaultInner>> getWithResponseAsync(String location, String deletedVaultName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), location, deletedVaultName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a specific deleted vault.
     * 
     * @param location The location name.
     * @param deletedVaultName The name of the DeletedVault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific deleted vault on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeletedVaultInner> getAsync(String location, String deletedVaultName) {
        return getWithResponseAsync(location, deletedVaultName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a specific deleted vault.
     * 
     * @param location The location name.
     * @param deletedVaultName The name of the DeletedVault.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific deleted vault along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeletedVaultInner> getWithResponse(String location, String deletedVaultName, Context context) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            location, deletedVaultName, accept, context);
    }

    /**
     * Get a specific deleted vault.
     * 
     * @param location The location name.
     * @param deletedVaultName The name of the DeletedVault.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific deleted vault.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeletedVaultInner get(String location, String deletedVaultName) {
        return getWithResponse(location, deletedVaultName, Context.NONE).getValue();
    }

    /**
     * Start undelete of a deleted vault.
     * 
     * @param location The location name.
     * @param deletedVaultName The name of the DeletedVault.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> undeleteWithResponseAsync(String location, String deletedVaultName,
        DeletedVaultUndeleteInput body) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.undelete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), location, deletedVaultName, contentType, accept, body, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Start undelete of a deleted vault.
     * 
     * @param location The location name.
     * @param deletedVaultName The name of the DeletedVault.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> undeleteWithResponse(String location, String deletedVaultName,
        DeletedVaultUndeleteInput body) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.undeleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), location, deletedVaultName, contentType, accept, body, Context.NONE);
    }

    /**
     * Start undelete of a deleted vault.
     * 
     * @param location The location name.
     * @param deletedVaultName The name of the DeletedVault.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> undeleteWithResponse(String location, String deletedVaultName,
        DeletedVaultUndeleteInput body, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.undeleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), location, deletedVaultName, contentType, accept, body, context);
    }

    /**
     * Start undelete of a deleted vault.
     * 
     * @param location The location name.
     * @param deletedVaultName The name of the DeletedVault.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DeletedVaultInner>, DeletedVaultInner> beginUndeleteAsync(String location,
        String deletedVaultName, DeletedVaultUndeleteInput body) {
        Mono<Response<Flux<ByteBuffer>>> mono = undeleteWithResponseAsync(location, deletedVaultName, body);
        return this.client.<DeletedVaultInner, DeletedVaultInner>getLroResult(mono, this.client.getHttpPipeline(),
            DeletedVaultInner.class, DeletedVaultInner.class, this.client.getContext());
    }

    /**
     * Start undelete of a deleted vault.
     * 
     * @param location The location name.
     * @param deletedVaultName The name of the DeletedVault.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DeletedVaultInner>, DeletedVaultInner> beginUndelete(String location,
        String deletedVaultName, DeletedVaultUndeleteInput body) {
        Response<BinaryData> response = undeleteWithResponse(location, deletedVaultName, body);
        return this.client.<DeletedVaultInner, DeletedVaultInner>getLroResult(response, DeletedVaultInner.class,
            DeletedVaultInner.class, Context.NONE);
    }

    /**
     * Start undelete of a deleted vault.
     * 
     * @param location The location name.
     * @param deletedVaultName The name of the DeletedVault.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DeletedVaultInner>, DeletedVaultInner> beginUndelete(String location,
        String deletedVaultName, DeletedVaultUndeleteInput body, Context context) {
        Response<BinaryData> response = undeleteWithResponse(location, deletedVaultName, body, context);
        return this.client.<DeletedVaultInner, DeletedVaultInner>getLroResult(response, DeletedVaultInner.class,
            DeletedVaultInner.class, context);
    }

    /**
     * Start undelete of a deleted vault.
     * 
     * @param location The location name.
     * @param deletedVaultName The name of the DeletedVault.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeletedVaultInner> undeleteAsync(String location, String deletedVaultName,
        DeletedVaultUndeleteInput body) {
        return beginUndeleteAsync(location, deletedVaultName, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Start undelete of a deleted vault.
     * 
     * @param location The location name.
     * @param deletedVaultName The name of the DeletedVault.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeletedVaultInner undelete(String location, String deletedVaultName, DeletedVaultUndeleteInput body) {
        return beginUndelete(location, deletedVaultName, body).getFinalResult();
    }

    /**
     * Start undelete of a deleted vault.
     * 
     * @param location The location name.
     * @param deletedVaultName The name of the DeletedVault.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeletedVaultInner undelete(String location, String deletedVaultName, DeletedVaultUndeleteInput body,
        Context context) {
        return beginUndelete(location, deletedVaultName, body, context).getFinalResult();
    }

    /**
     * Get the operation status of a deleted vault.
     * 
     * @param location The location name.
     * @param deletedVaultName The name of deleted vault.
     * @param operationId The operationId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation status of a deleted vault along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OperationResourceInner>> getOperationStatusWithResponseAsync(String location,
        String deletedVaultName, String operationId) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getOperationStatus(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), location, deletedVaultName, operationId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the operation status of a deleted vault.
     * 
     * @param location The location name.
     * @param deletedVaultName The name of deleted vault.
     * @param operationId The operationId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation status of a deleted vault on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OperationResourceInner> getOperationStatusAsync(String location, String deletedVaultName,
        String operationId) {
        return getOperationStatusWithResponseAsync(location, deletedVaultName, operationId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the operation status of a deleted vault.
     * 
     * @param location The location name.
     * @param deletedVaultName The name of deleted vault.
     * @param operationId The operationId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation status of a deleted vault along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OperationResourceInner> getOperationStatusWithResponse(String location, String deletedVaultName,
        String operationId, Context context) {
        final String accept = "application/json";
        return service.getOperationStatusSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), location, deletedVaultName, operationId, accept, context);
    }

    /**
     * Get the operation status of a deleted vault.
     * 
     * @param location The location name.
     * @param deletedVaultName The name of deleted vault.
     * @param operationId The operationId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the operation status of a deleted vault.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationResourceInner getOperationStatus(String location, String deletedVaultName, String operationId) {
        return getOperationStatusWithResponse(location, deletedVaultName, operationId, Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a list of DeletedVaults along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DeletedVaultInner>> listBySubscriptionIdNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionIdNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DeletedVaultInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a list of DeletedVaults along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DeletedVaultInner> listBySubscriptionIdNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<DeletedVaultList> res
            = service.listBySubscriptionIdNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response model for a list of DeletedVaults along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DeletedVaultInner> listBySubscriptionIdNextSinglePage(String nextLink, Context context) {
        final String accept = "application/json";
        Response<DeletedVaultList> res
            = service.listBySubscriptionIdNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }
}
