// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservices.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Summary of the replication job data for this vault.
 */
@Immutable
public final class JobsSummary implements JsonSerializable<JobsSummary> {
    /*
     * Count of failed jobs.
     */
    private Integer failedJobs;

    /*
     * Count of suspended jobs.
     */
    private Integer suspendedJobs;

    /*
     * Count of in-progress jobs.
     */
    private Integer inProgressJobs;

    /**
     * Creates an instance of JobsSummary class.
     */
    private JobsSummary() {
    }

    /**
     * Get the failedJobs property: Count of failed jobs.
     * 
     * @return the failedJobs value.
     */
    public Integer failedJobs() {
        return this.failedJobs;
    }

    /**
     * Get the suspendedJobs property: Count of suspended jobs.
     * 
     * @return the suspendedJobs value.
     */
    public Integer suspendedJobs() {
        return this.suspendedJobs;
    }

    /**
     * Get the inProgressJobs property: Count of in-progress jobs.
     * 
     * @return the inProgressJobs value.
     */
    public Integer inProgressJobs() {
        return this.inProgressJobs;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("failedJobs", this.failedJobs);
        jsonWriter.writeNumberField("suspendedJobs", this.suspendedJobs);
        jsonWriter.writeNumberField("inProgressJobs", this.inProgressJobs);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobsSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobsSummary if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the JobsSummary.
     */
    public static JobsSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobsSummary deserializedJobsSummary = new JobsSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("failedJobs".equals(fieldName)) {
                    deserializedJobsSummary.failedJobs = reader.getNullable(JsonReader::getInt);
                } else if ("suspendedJobs".equals(fieldName)) {
                    deserializedJobsSummary.suspendedJobs = reader.getNullable(JsonReader::getInt);
                } else if ("inProgressJobs".equals(fieldName)) {
                    deserializedJobsSummary.inProgressJobs = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobsSummary;
        });
    }
}
