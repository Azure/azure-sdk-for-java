// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Identity details to be used for an operation.
 */
@Fluent
public final class AssociatedIdentity implements JsonSerializable<AssociatedIdentity> {
    /*
     * Identity type that should be used for an operation.
     */
    private IdentityType operationIdentityType;

    /*
     * User assigned identity to be used for an operation if operationIdentityType is UserAssigned.
     */
    private String userAssignedIdentity;

    /**
     * Creates an instance of AssociatedIdentity class.
     */
    public AssociatedIdentity() {
    }

    /**
     * Get the operationIdentityType property: Identity type that should be used for an operation.
     * 
     * @return the operationIdentityType value.
     */
    public IdentityType operationIdentityType() {
        return this.operationIdentityType;
    }

    /**
     * Set the operationIdentityType property: Identity type that should be used for an operation.
     * 
     * @param operationIdentityType the operationIdentityType value to set.
     * @return the AssociatedIdentity object itself.
     */
    public AssociatedIdentity withOperationIdentityType(IdentityType operationIdentityType) {
        this.operationIdentityType = operationIdentityType;
        return this;
    }

    /**
     * Get the userAssignedIdentity property: User assigned identity to be used for an operation if
     * operationIdentityType is UserAssigned.
     * 
     * @return the userAssignedIdentity value.
     */
    public String userAssignedIdentity() {
        return this.userAssignedIdentity;
    }

    /**
     * Set the userAssignedIdentity property: User assigned identity to be used for an operation if
     * operationIdentityType is UserAssigned.
     * 
     * @param userAssignedIdentity the userAssignedIdentity value to set.
     * @return the AssociatedIdentity object itself.
     */
    public AssociatedIdentity withUserAssignedIdentity(String userAssignedIdentity) {
        this.userAssignedIdentity = userAssignedIdentity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("operationIdentityType",
            this.operationIdentityType == null ? null : this.operationIdentityType.toString());
        jsonWriter.writeStringField("userAssignedIdentity", this.userAssignedIdentity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssociatedIdentity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssociatedIdentity if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssociatedIdentity.
     */
    public static AssociatedIdentity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssociatedIdentity deserializedAssociatedIdentity = new AssociatedIdentity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operationIdentityType".equals(fieldName)) {
                    deserializedAssociatedIdentity.operationIdentityType = IdentityType.fromString(reader.getString());
                } else if ("userAssignedIdentity".equals(fieldName)) {
                    deserializedAssociatedIdentity.userAssignedIdentity = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssociatedIdentity;
        });
    }
}
