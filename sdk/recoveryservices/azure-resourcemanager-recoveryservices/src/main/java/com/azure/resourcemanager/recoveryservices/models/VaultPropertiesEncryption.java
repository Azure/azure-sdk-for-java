// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Customer Managed Key details of the resource.
 */
@Fluent
public final class VaultPropertiesEncryption implements JsonSerializable<VaultPropertiesEncryption> {
    /*
     * The properties of the Key Vault which hosts CMK
     */
    private CmkKeyVaultProperties keyVaultProperties;

    /*
     * The details of the identity used for CMK
     */
    private CmkKekIdentity kekIdentity;

    /*
     * Enabling/Disabling the Double Encryption state
     */
    private InfrastructureEncryptionState infrastructureEncryption;

    /**
     * Creates an instance of VaultPropertiesEncryption class.
     */
    public VaultPropertiesEncryption() {
    }

    /**
     * Get the keyVaultProperties property: The properties of the Key Vault which hosts CMK.
     * 
     * @return the keyVaultProperties value.
     */
    public CmkKeyVaultProperties keyVaultProperties() {
        return this.keyVaultProperties;
    }

    /**
     * Set the keyVaultProperties property: The properties of the Key Vault which hosts CMK.
     * 
     * @param keyVaultProperties the keyVaultProperties value to set.
     * @return the VaultPropertiesEncryption object itself.
     */
    public VaultPropertiesEncryption withKeyVaultProperties(CmkKeyVaultProperties keyVaultProperties) {
        this.keyVaultProperties = keyVaultProperties;
        return this;
    }

    /**
     * Get the kekIdentity property: The details of the identity used for CMK.
     * 
     * @return the kekIdentity value.
     */
    public CmkKekIdentity kekIdentity() {
        return this.kekIdentity;
    }

    /**
     * Set the kekIdentity property: The details of the identity used for CMK.
     * 
     * @param kekIdentity the kekIdentity value to set.
     * @return the VaultPropertiesEncryption object itself.
     */
    public VaultPropertiesEncryption withKekIdentity(CmkKekIdentity kekIdentity) {
        this.kekIdentity = kekIdentity;
        return this;
    }

    /**
     * Get the infrastructureEncryption property: Enabling/Disabling the Double Encryption state.
     * 
     * @return the infrastructureEncryption value.
     */
    public InfrastructureEncryptionState infrastructureEncryption() {
        return this.infrastructureEncryption;
    }

    /**
     * Set the infrastructureEncryption property: Enabling/Disabling the Double Encryption state.
     * 
     * @param infrastructureEncryption the infrastructureEncryption value to set.
     * @return the VaultPropertiesEncryption object itself.
     */
    public VaultPropertiesEncryption
        withInfrastructureEncryption(InfrastructureEncryptionState infrastructureEncryption) {
        this.infrastructureEncryption = infrastructureEncryption;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyVaultProperties() != null) {
            keyVaultProperties().validate();
        }
        if (kekIdentity() != null) {
            kekIdentity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("keyVaultProperties", this.keyVaultProperties);
        jsonWriter.writeJsonField("kekIdentity", this.kekIdentity);
        jsonWriter.writeStringField("infrastructureEncryption",
            this.infrastructureEncryption == null ? null : this.infrastructureEncryption.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VaultPropertiesEncryption from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VaultPropertiesEncryption if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VaultPropertiesEncryption.
     */
    public static VaultPropertiesEncryption fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VaultPropertiesEncryption deserializedVaultPropertiesEncryption = new VaultPropertiesEncryption();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyVaultProperties".equals(fieldName)) {
                    deserializedVaultPropertiesEncryption.keyVaultProperties = CmkKeyVaultProperties.fromJson(reader);
                } else if ("kekIdentity".equals(fieldName)) {
                    deserializedVaultPropertiesEncryption.kekIdentity = CmkKekIdentity.fromJson(reader);
                } else if ("infrastructureEncryption".equals(fieldName)) {
                    deserializedVaultPropertiesEncryption.infrastructureEncryption
                        = InfrastructureEncryptionState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVaultPropertiesEncryption;
        });
    }
}
