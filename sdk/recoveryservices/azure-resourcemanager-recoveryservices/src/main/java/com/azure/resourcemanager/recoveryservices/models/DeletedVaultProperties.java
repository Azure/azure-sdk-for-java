// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.recoveryservices.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Properties of the DeletedVault.
 */
@Immutable
public final class DeletedVaultProperties implements JsonSerializable<DeletedVaultProperties> {
    /*
     * ARM Id of the Vault which was deleted.
     */
    private String vaultId;

    /*
     * Time in UTC at which the Vault was deleted.
     */
    private OffsetDateTime vaultDeletionTime;

    /*
     * Time in UTC at which the DeletedVault will be purged.
     */
    private OffsetDateTime purgeAt;

    /**
     * Creates an instance of DeletedVaultProperties class.
     */
    private DeletedVaultProperties() {
    }

    /**
     * Get the vaultId property: ARM Id of the Vault which was deleted.
     * 
     * @return the vaultId value.
     */
    public String vaultId() {
        return this.vaultId;
    }

    /**
     * Get the vaultDeletionTime property: Time in UTC at which the Vault was deleted.
     * 
     * @return the vaultDeletionTime value.
     */
    public OffsetDateTime vaultDeletionTime() {
        return this.vaultDeletionTime;
    }

    /**
     * Get the purgeAt property: Time in UTC at which the DeletedVault will be purged.
     * 
     * @return the purgeAt value.
     */
    public OffsetDateTime purgeAt() {
        return this.purgeAt;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeletedVaultProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeletedVaultProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeletedVaultProperties.
     */
    public static DeletedVaultProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeletedVaultProperties deserializedDeletedVaultProperties = new DeletedVaultProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vaultId".equals(fieldName)) {
                    deserializedDeletedVaultProperties.vaultId = reader.getString();
                } else if ("vaultDeletionTime".equals(fieldName)) {
                    deserializedDeletedVaultProperties.vaultDeletionTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("purgeAt".equals(fieldName)) {
                    deserializedDeletedVaultProperties.purgeAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeletedVaultProperties;
        });
    }
}
