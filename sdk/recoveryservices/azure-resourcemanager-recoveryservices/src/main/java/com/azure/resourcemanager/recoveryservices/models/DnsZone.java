// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.recoveryservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DNSZone information.
 */
@Fluent
public class DnsZone implements JsonSerializable<DnsZone> {
    /*
     * Subresource type for vault AzureBackup, AzureBackup_secondary or AzureSiteRecovery
     */
    private VaultSubResourceType subResource;

    /**
     * Creates an instance of DnsZone class.
     */
    public DnsZone() {
    }

    /**
     * Get the subResource property: Subresource type for vault AzureBackup, AzureBackup_secondary or AzureSiteRecovery.
     * 
     * @return the subResource value.
     */
    public VaultSubResourceType subResource() {
        return this.subResource;
    }

    /**
     * Set the subResource property: Subresource type for vault AzureBackup, AzureBackup_secondary or AzureSiteRecovery.
     * 
     * @param subResource the subResource value to set.
     * @return the DnsZone object itself.
     */
    public DnsZone withSubResource(VaultSubResourceType subResource) {
        this.subResource = subResource;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subResource", this.subResource == null ? null : this.subResource.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DnsZone from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DnsZone if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the DnsZone.
     */
    public static DnsZone fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DnsZone deserializedDnsZone = new DnsZone();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subResource".equals(fieldName)) {
                    deserializedDnsZone.subResource = VaultSubResourceType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDnsZone;
        });
    }
}
