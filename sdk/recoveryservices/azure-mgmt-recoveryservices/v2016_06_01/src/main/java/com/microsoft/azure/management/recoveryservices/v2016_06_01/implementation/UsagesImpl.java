/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.recoveryservices.v2016_06_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.recoveryservices.v2016_06_01.Usages;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.recoveryservices.v2016_06_01.VaultUsage;

class UsagesImpl extends WrapperImpl<UsagesInner> implements Usages {
    private final RecoveryServicesManager manager;

    UsagesImpl(RecoveryServicesManager manager) {
        super(manager.inner().usages());
        this.manager = manager;
    }

    public RecoveryServicesManager manager() {
        return this.manager;
    }

    private VaultUsageImpl wrapModel(VaultUsageInner inner) {
        return  new VaultUsageImpl(inner, manager());
    }

    @Override
    public Observable<VaultUsage> listByVaultsAsync(String resourceGroupName, String vaultName) {
        UsagesInner client = this.inner();
        return client.listByVaultsAsync(resourceGroupName, vaultName)
        .flatMap(new Func1<List<VaultUsageInner>, Observable<VaultUsageInner>>() {
            @Override
            public Observable<VaultUsageInner> call(List<VaultUsageInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<VaultUsageInner, VaultUsage>() {
            @Override
            public VaultUsage call(VaultUsageInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
