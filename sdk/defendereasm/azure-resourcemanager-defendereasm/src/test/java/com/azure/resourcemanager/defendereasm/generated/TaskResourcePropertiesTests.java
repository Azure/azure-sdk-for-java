// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.defendereasm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.defendereasm.fluent.models.TaskResourceProperties;
import org.junit.jupiter.api.Assertions;

public final class TaskResourcePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TaskResourceProperties model =
            BinaryData
                .fromString(
                    "{\"startedAt\":\"q\",\"completedAt\":\"ol\",\"lastPolledAt\":\"fpsalgbqu\",\"state\":\"gjyjgzjaoyfhrtxi\",\"phase\":\"erkujys\",\"reason\":\"eju\",\"metadata\":\"dataqawrlyxwj\",\"provisioningState\":\"Creating\"}")
                .toObject(TaskResourceProperties.class);
        Assertions.assertEquals("q", model.startedAt());
        Assertions.assertEquals("ol", model.completedAt());
        Assertions.assertEquals("fpsalgbqu", model.lastPolledAt());
        Assertions.assertEquals("gjyjgzjaoyfhrtxi", model.state());
        Assertions.assertEquals("erkujys", model.phase());
        Assertions.assertEquals("eju", model.reason());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TaskResourceProperties model =
            new TaskResourceProperties()
                .withStartedAt("q")
                .withCompletedAt("ol")
                .withLastPolledAt("fpsalgbqu")
                .withState("gjyjgzjaoyfhrtxi")
                .withPhase("erkujys")
                .withReason("eju")
                .withMetadata("dataqawrlyxwj");
        model = BinaryData.fromObject(model).toObject(TaskResourceProperties.class);
        Assertions.assertEquals("q", model.startedAt());
        Assertions.assertEquals("ol", model.completedAt());
        Assertions.assertEquals("fpsalgbqu", model.lastPolledAt());
        Assertions.assertEquals("gjyjgzjaoyfhrtxi", model.state());
        Assertions.assertEquals("erkujys", model.phase());
        Assertions.assertEquals("eju", model.reason());
    }
}
