// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.defendereasm.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.defendereasm.EasmManager;
import com.azure.resourcemanager.defendereasm.models.TaskResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TasksGetByWorkspaceWithResponseMockTests {
    @Test
    public void testGetByWorkspaceWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"startedAt\":\"ied\",\"completedAt\":\"gidyjrrf\",\"lastPolledAt\":\"aos\",\"state\":\"xc\",\"phase\":\"npc\",\"reason\":\"ocohslkevleg\",\"metadata\":\"datafbuhfmvfaxkffe\",\"provisioningState\":\"ConfiguringApplication\"},\"id\":\"lvmezyvshxmzsbbz\",\"name\":\"ggi\",\"type\":\"rxwburv\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EasmManager manager = EasmManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        TaskResource response = manager.tasks()
            .getByWorkspaceWithResponse("ajiwkuo", "oskg", "sauuimj", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ied", response.startedAt());
        Assertions.assertEquals("gidyjrrf", response.completedAt());
        Assertions.assertEquals("aos", response.lastPolledAt());
        Assertions.assertEquals("xc", response.state());
        Assertions.assertEquals("npc", response.phase());
        Assertions.assertEquals("ocohslkevleg", response.reason());
    }
}
