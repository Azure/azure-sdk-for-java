// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.defendereasm.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.defendereasm.fluent.models.WorkspaceResourceInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkspaceResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkspaceResourceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"dataPlaneEndpoint\":\"putegjvwmfd\",\"provisioningState\":\"ProvisioningResources\"},\"location\":\"mdvpjhulsu\",\"tags\":{\"odjpslwejd\":\"kjozkrwfnd\",\"cctazakljlahbc\":\"vwryoqpso\",\"gexpaojakhmsbz\":\"yffdfdos\"},\"id\":\"hcrzevd\",\"name\":\"hlxaolthqtr\",\"type\":\"qjbpfzfsin\"}")
                .toObject(WorkspaceResourceInner.class);
        Assertions.assertEquals("mdvpjhulsu", model.location());
        Assertions.assertEquals("kjozkrwfnd", model.tags().get("odjpslwejd"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkspaceResourceInner model =
            new WorkspaceResourceInner()
                .withLocation("mdvpjhulsu")
                .withTags(
                    mapOf("odjpslwejd", "kjozkrwfnd", "cctazakljlahbc", "vwryoqpso", "gexpaojakhmsbz", "yffdfdos"));
        model = BinaryData.fromObject(model).toObject(WorkspaceResourceInner.class);
        Assertions.assertEquals("mdvpjhulsu", model.location());
        Assertions.assertEquals("kjozkrwfnd", model.tags().get("odjpslwejd"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
