// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.defendereasm.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Resource base properties.
 */
@Immutable
public class ResourceBaseProperties implements JsonSerializable<ResourceBaseProperties> {
    /*
     * Resource provisioning state.
     */
    private ResourceState provisioningState;

    /**
     * Creates an instance of ResourceBaseProperties class.
     */
    public ResourceBaseProperties() {
    }

    /**
     * Get the provisioningState property: Resource provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ResourceState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Resource provisioning state.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the ResourceBaseProperties object itself.
     */
    ResourceBaseProperties withProvisioningState(ResourceState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceBaseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceBaseProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceBaseProperties.
     */
    public static ResourceBaseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceBaseProperties deserializedResourceBaseProperties = new ResourceBaseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedResourceBaseProperties.provisioningState = ResourceState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceBaseProperties;
        });
    }
}
