// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.playwright.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.playwright.fluent.models.PlaywrightWorkspaceInner;
import com.azure.resourcemanager.playwright.models.EnablementStatus;
import com.azure.resourcemanager.playwright.models.PlaywrightWorkspaceProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PlaywrightWorkspaceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PlaywrightWorkspaceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"dataplaneUri\":\"pzvgnwzsymglzufc\",\"regionalAffinity\":\"Enabled\",\"localAuth\":\"Enabled\",\"workspaceId\":\"bihanuf\"},\"location\":\"cbjy\",\"tags\":{\"xwczbyscnp\":\"ithxqhabifpi\"},\"id\":\"x\",\"name\":\"hiv\",\"type\":\"qniwbybrkxvdumj\"}")
            .toObject(PlaywrightWorkspaceInner.class);
        Assertions.assertEquals("cbjy", model.location());
        Assertions.assertEquals("ithxqhabifpi", model.tags().get("xwczbyscnp"));
        Assertions.assertEquals(EnablementStatus.ENABLED, model.properties().regionalAffinity());
        Assertions.assertEquals(EnablementStatus.ENABLED, model.properties().localAuth());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PlaywrightWorkspaceInner model = new PlaywrightWorkspaceInner().withLocation("cbjy")
            .withTags(mapOf("xwczbyscnp", "ithxqhabifpi"))
            .withProperties(new PlaywrightWorkspaceProperties().withRegionalAffinity(EnablementStatus.ENABLED)
                .withLocalAuth(EnablementStatus.ENABLED));
        model = BinaryData.fromObject(model).toObject(PlaywrightWorkspaceInner.class);
        Assertions.assertEquals("cbjy", model.location());
        Assertions.assertEquals("ithxqhabifpi", model.tags().get("xwczbyscnp"));
        Assertions.assertEquals(EnablementStatus.ENABLED, model.properties().regionalAffinity());
        Assertions.assertEquals(EnablementStatus.ENABLED, model.properties().localAuth());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
