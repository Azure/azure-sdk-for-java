// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.playwright.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Playwright workspace resource properties.
 */
@Fluent
public final class PlaywrightWorkspaceProperties implements JsonSerializable<PlaywrightWorkspaceProperties> {
    /*
     * The status of the last resource operation.
     */
    private ProvisioningState provisioningState;

    /*
     * The workspace data plane service API URI.
     */
    private String dataplaneUri;

    /*
     * Controls the connection region for client workers to cloud-hosted browsers. When enabled, workers connect to
     * browsers in the closest Azure region for lower latency. When disabled, workers connect to browsers in the Azure
     * region where the workspace was created.
     */
    private EnablementStatus regionalAffinity;

    /*
     * Enables the workspace to use local authentication through service access tokens for operations.
     */
    private EnablementStatus localAuth;

    /*
     * The workspace ID in GUID format.
     */
    private String workspaceId;

    /**
     * Creates an instance of PlaywrightWorkspaceProperties class.
     */
    public PlaywrightWorkspaceProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last resource operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the dataplaneUri property: The workspace data plane service API URI.
     * 
     * @return the dataplaneUri value.
     */
    public String dataplaneUri() {
        return this.dataplaneUri;
    }

    /**
     * Get the regionalAffinity property: Controls the connection region for client workers to cloud-hosted browsers.
     * When enabled, workers connect to browsers in the closest Azure region for lower latency. When disabled, workers
     * connect to browsers in the Azure region where the workspace was created.
     * 
     * @return the regionalAffinity value.
     */
    public EnablementStatus regionalAffinity() {
        return this.regionalAffinity;
    }

    /**
     * Set the regionalAffinity property: Controls the connection region for client workers to cloud-hosted browsers.
     * When enabled, workers connect to browsers in the closest Azure region for lower latency. When disabled, workers
     * connect to browsers in the Azure region where the workspace was created.
     * 
     * @param regionalAffinity the regionalAffinity value to set.
     * @return the PlaywrightWorkspaceProperties object itself.
     */
    public PlaywrightWorkspaceProperties withRegionalAffinity(EnablementStatus regionalAffinity) {
        this.regionalAffinity = regionalAffinity;
        return this;
    }

    /**
     * Get the localAuth property: Enables the workspace to use local authentication through service access tokens for
     * operations.
     * 
     * @return the localAuth value.
     */
    public EnablementStatus localAuth() {
        return this.localAuth;
    }

    /**
     * Set the localAuth property: Enables the workspace to use local authentication through service access tokens for
     * operations.
     * 
     * @param localAuth the localAuth value to set.
     * @return the PlaywrightWorkspaceProperties object itself.
     */
    public PlaywrightWorkspaceProperties withLocalAuth(EnablementStatus localAuth) {
        this.localAuth = localAuth;
        return this;
    }

    /**
     * Get the workspaceId property: The workspace ID in GUID format.
     * 
     * @return the workspaceId value.
     */
    public String workspaceId() {
        return this.workspaceId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("regionalAffinity",
            this.regionalAffinity == null ? null : this.regionalAffinity.toString());
        jsonWriter.writeStringField("localAuth", this.localAuth == null ? null : this.localAuth.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PlaywrightWorkspaceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PlaywrightWorkspaceProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PlaywrightWorkspaceProperties.
     */
    public static PlaywrightWorkspaceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PlaywrightWorkspaceProperties deserializedPlaywrightWorkspaceProperties
                = new PlaywrightWorkspaceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedPlaywrightWorkspaceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("dataplaneUri".equals(fieldName)) {
                    deserializedPlaywrightWorkspaceProperties.dataplaneUri = reader.getString();
                } else if ("regionalAffinity".equals(fieldName)) {
                    deserializedPlaywrightWorkspaceProperties.regionalAffinity
                        = EnablementStatus.fromString(reader.getString());
                } else if ("localAuth".equals(fieldName)) {
                    deserializedPlaywrightWorkspaceProperties.localAuth
                        = EnablementStatus.fromString(reader.getString());
                } else if ("workspaceId".equals(fieldName)) {
                    deserializedPlaywrightWorkspaceProperties.workspaceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPlaywrightWorkspaceProperties;
        });
    }
}
