// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.playwright.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Playwright workspace quota free trial properties.
 */
@Immutable
public final class PlaywrightWorkspaceFreeTrialProperties
    implements JsonSerializable<PlaywrightWorkspaceFreeTrialProperties> {
    /*
     * The free trial creation timestamp in UTC.
     */
    private OffsetDateTime createdAt;

    /*
     * The free trial expiration timestamp in UTC.
     */
    private OffsetDateTime expiryAt;

    /*
     * The allocated limit value (e.g., allocated free execution minutes).
     */
    private int allocatedValue;

    /*
     * The used value (e.g., used free execution minutes).
     */
    private double usedValue;

    /*
     * The percentage of the free trial quota used.
     */
    private double percentageUsed;

    /**
     * Creates an instance of PlaywrightWorkspaceFreeTrialProperties class.
     */
    private PlaywrightWorkspaceFreeTrialProperties() {
    }

    /**
     * Get the createdAt property: The free trial creation timestamp in UTC.
     * 
     * @return the createdAt value.
     */
    public OffsetDateTime createdAt() {
        return this.createdAt;
    }

    /**
     * Get the expiryAt property: The free trial expiration timestamp in UTC.
     * 
     * @return the expiryAt value.
     */
    public OffsetDateTime expiryAt() {
        return this.expiryAt;
    }

    /**
     * Get the allocatedValue property: The allocated limit value (e.g., allocated free execution minutes).
     * 
     * @return the allocatedValue value.
     */
    public int allocatedValue() {
        return this.allocatedValue;
    }

    /**
     * Get the usedValue property: The used value (e.g., used free execution minutes).
     * 
     * @return the usedValue value.
     */
    public double usedValue() {
        return this.usedValue;
    }

    /**
     * Get the percentageUsed property: The percentage of the free trial quota used.
     * 
     * @return the percentageUsed value.
     */
    public double percentageUsed() {
        return this.percentageUsed;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PlaywrightWorkspaceFreeTrialProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PlaywrightWorkspaceFreeTrialProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PlaywrightWorkspaceFreeTrialProperties.
     */
    public static PlaywrightWorkspaceFreeTrialProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PlaywrightWorkspaceFreeTrialProperties deserializedPlaywrightWorkspaceFreeTrialProperties
                = new PlaywrightWorkspaceFreeTrialProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("createdAt".equals(fieldName)) {
                    deserializedPlaywrightWorkspaceFreeTrialProperties.createdAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("expiryAt".equals(fieldName)) {
                    deserializedPlaywrightWorkspaceFreeTrialProperties.expiryAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("allocatedValue".equals(fieldName)) {
                    deserializedPlaywrightWorkspaceFreeTrialProperties.allocatedValue = reader.getInt();
                } else if ("usedValue".equals(fieldName)) {
                    deserializedPlaywrightWorkspaceFreeTrialProperties.usedValue = reader.getDouble();
                } else if ("percentageUsed".equals(fieldName)) {
                    deserializedPlaywrightWorkspaceFreeTrialProperties.percentageUsed = reader.getDouble();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPlaywrightWorkspaceFreeTrialProperties;
        });
    }
}
