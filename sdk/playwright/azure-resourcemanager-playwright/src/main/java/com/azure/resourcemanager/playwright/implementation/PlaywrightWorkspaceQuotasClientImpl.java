// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.playwright.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.playwright.fluent.PlaywrightWorkspaceQuotasClient;
import com.azure.resourcemanager.playwright.fluent.models.PlaywrightWorkspaceQuotaInner;
import com.azure.resourcemanager.playwright.implementation.models.PlaywrightWorkspaceQuotaListResult;
import com.azure.resourcemanager.playwright.models.QuotaName;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in PlaywrightWorkspaceQuotasClient.
 */
public final class PlaywrightWorkspaceQuotasClientImpl implements PlaywrightWorkspaceQuotasClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final PlaywrightWorkspaceQuotasService service;

    /**
     * The service client containing this operation class.
     */
    private final PlaywrightManagementClientImpl client;

    /**
     * Initializes an instance of PlaywrightWorkspaceQuotasClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    PlaywrightWorkspaceQuotasClientImpl(PlaywrightManagementClientImpl client) {
        this.service = RestProxy.create(PlaywrightWorkspaceQuotasService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for PlaywrightManagementClientPlaywrightWorkspaceQuotas to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "PlaywrightManagementClientPlaywrightWorkspaceQuotas")
    public interface PlaywrightWorkspaceQuotasService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces/{playwrightWorkspaceName}/quotas/{quotaName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PlaywrightWorkspaceQuotaInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("playwrightWorkspaceName") String playwrightWorkspaceName,
            @PathParam("quotaName") QuotaName quotaName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces/{playwrightWorkspaceName}/quotas/{quotaName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<PlaywrightWorkspaceQuotaInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("playwrightWorkspaceName") String playwrightWorkspaceName,
            @PathParam("quotaName") QuotaName quotaName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces/{playwrightWorkspaceName}/quotas")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PlaywrightWorkspaceQuotaListResult>> listByPlaywrightWorkspace(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("playwrightWorkspaceName") String playwrightWorkspaceName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces/{playwrightWorkspaceName}/quotas")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<PlaywrightWorkspaceQuotaListResult> listByPlaywrightWorkspaceSync(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("playwrightWorkspaceName") String playwrightWorkspaceName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PlaywrightWorkspaceQuotaListResult>> listByPlaywrightWorkspaceNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<PlaywrightWorkspaceQuotaListResult> listByPlaywrightWorkspaceNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets a Playwright workspace quota resource by name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @param quotaName The name of the PlaywrightWorkspaceQuota.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Playwright workspace quota resource by name along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<PlaywrightWorkspaceQuotaInner>> getWithResponseAsync(String resourceGroupName,
        String playwrightWorkspaceName, QuotaName quotaName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (playwrightWorkspaceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter playwrightWorkspaceName is required and cannot be null."));
        }
        if (quotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter quotaName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, playwrightWorkspaceName, quotaName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a Playwright workspace quota resource by name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @param quotaName The name of the PlaywrightWorkspaceQuota.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Playwright workspace quota resource by name on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PlaywrightWorkspaceQuotaInner> getAsync(String resourceGroupName, String playwrightWorkspaceName,
        QuotaName quotaName) {
        return getWithResponseAsync(resourceGroupName, playwrightWorkspaceName, quotaName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a Playwright workspace quota resource by name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @param quotaName The name of the PlaywrightWorkspaceQuota.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Playwright workspace quota resource by name along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PlaywrightWorkspaceQuotaInner> getWithResponse(String resourceGroupName,
        String playwrightWorkspaceName, QuotaName quotaName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (playwrightWorkspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter playwrightWorkspaceName is required and cannot be null."));
        }
        if (quotaName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter quotaName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, playwrightWorkspaceName, quotaName, accept, context);
    }

    /**
     * Gets a Playwright workspace quota resource by name.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @param quotaName The name of the PlaywrightWorkspaceQuota.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Playwright workspace quota resource by name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PlaywrightWorkspaceQuotaInner get(String resourceGroupName, String playwrightWorkspaceName,
        QuotaName quotaName) {
        return getWithResponse(resourceGroupName, playwrightWorkspaceName, quotaName, Context.NONE).getValue();
    }

    /**
     * Lists quota resources for a given Playwright workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PlaywrightWorkspaceQuota list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PlaywrightWorkspaceQuotaInner>>
        listByPlaywrightWorkspaceSinglePageAsync(String resourceGroupName, String playwrightWorkspaceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (playwrightWorkspaceName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter playwrightWorkspaceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByPlaywrightWorkspace(this.client.getEndpoint(), this.client.getApiVersion(),
                    this.client.getSubscriptionId(), resourceGroupName, playwrightWorkspaceName, accept, context))
            .<PagedResponse<PlaywrightWorkspaceQuotaInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists quota resources for a given Playwright workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PlaywrightWorkspaceQuota list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PlaywrightWorkspaceQuotaInner> listByPlaywrightWorkspaceAsync(String resourceGroupName,
        String playwrightWorkspaceName) {
        return new PagedFlux<>(
            () -> listByPlaywrightWorkspaceSinglePageAsync(resourceGroupName, playwrightWorkspaceName),
            nextLink -> listByPlaywrightWorkspaceNextSinglePageAsync(nextLink));
    }

    /**
     * Lists quota resources for a given Playwright workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PlaywrightWorkspaceQuota list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<PlaywrightWorkspaceQuotaInner> listByPlaywrightWorkspaceSinglePage(String resourceGroupName,
        String playwrightWorkspaceName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (playwrightWorkspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter playwrightWorkspaceName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<PlaywrightWorkspaceQuotaListResult> res
            = service.listByPlaywrightWorkspaceSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, playwrightWorkspaceName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists quota resources for a given Playwright workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PlaywrightWorkspaceQuota list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<PlaywrightWorkspaceQuotaInner> listByPlaywrightWorkspaceSinglePage(String resourceGroupName,
        String playwrightWorkspaceName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (playwrightWorkspaceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter playwrightWorkspaceName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<PlaywrightWorkspaceQuotaListResult> res
            = service.listByPlaywrightWorkspaceSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, playwrightWorkspaceName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists quota resources for a given Playwright workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PlaywrightWorkspaceQuota list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PlaywrightWorkspaceQuotaInner> listByPlaywrightWorkspace(String resourceGroupName,
        String playwrightWorkspaceName) {
        return new PagedIterable<>(
            () -> listByPlaywrightWorkspaceSinglePage(resourceGroupName, playwrightWorkspaceName),
            nextLink -> listByPlaywrightWorkspaceNextSinglePage(nextLink));
    }

    /**
     * Lists quota resources for a given Playwright workspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PlaywrightWorkspaceQuota list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PlaywrightWorkspaceQuotaInner> listByPlaywrightWorkspace(String resourceGroupName,
        String playwrightWorkspaceName, Context context) {
        return new PagedIterable<>(
            () -> listByPlaywrightWorkspaceSinglePage(resourceGroupName, playwrightWorkspaceName, context),
            nextLink -> listByPlaywrightWorkspaceNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PlaywrightWorkspaceQuota list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PlaywrightWorkspaceQuotaInner>>
        listByPlaywrightWorkspaceNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByPlaywrightWorkspaceNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<PlaywrightWorkspaceQuotaInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PlaywrightWorkspaceQuota list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<PlaywrightWorkspaceQuotaInner> listByPlaywrightWorkspaceNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<PlaywrightWorkspaceQuotaListResult> res
            = service.listByPlaywrightWorkspaceNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PlaywrightWorkspaceQuota list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<PlaywrightWorkspaceQuotaInner> listByPlaywrightWorkspaceNextSinglePage(String nextLink,
        Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<PlaywrightWorkspaceQuotaListResult> res
            = service.listByPlaywrightWorkspaceNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(PlaywrightWorkspaceQuotasClientImpl.class);
}
