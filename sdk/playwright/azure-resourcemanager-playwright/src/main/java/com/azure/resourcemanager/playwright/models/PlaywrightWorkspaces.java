// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.playwright.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of PlaywrightWorkspaces.
 */
public interface PlaywrightWorkspaces {
    /**
     * Get a PlaywrightWorkspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a PlaywrightWorkspace along with {@link Response}.
     */
    Response<PlaywrightWorkspace> getByResourceGroupWithResponse(String resourceGroupName,
        String playwrightWorkspaceName, Context context);

    /**
     * Get a PlaywrightWorkspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a PlaywrightWorkspace.
     */
    PlaywrightWorkspace getByResourceGroup(String resourceGroupName, String playwrightWorkspaceName);

    /**
     * Deletes a Playwright workspace resource asynchronously.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String playwrightWorkspaceName);

    /**
     * Deletes a Playwright workspace resource asynchronously.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String playwrightWorkspaceName, Context context);

    /**
     * List PlaywrightWorkspace resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PlaywrightWorkspace list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PlaywrightWorkspace> listByResourceGroup(String resourceGroupName);

    /**
     * List PlaywrightWorkspace resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PlaywrightWorkspace list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PlaywrightWorkspace> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List PlaywrightWorkspace resources by subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PlaywrightWorkspace list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PlaywrightWorkspace> list();

    /**
     * List PlaywrightWorkspace resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PlaywrightWorkspace list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<PlaywrightWorkspace> list(Context context);

    /**
     * Checks if a Playwright workspace name is available globally.
     * 
     * @param body The CheckAvailability request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the check availability result along with {@link Response}.
     */
    Response<CheckNameAvailabilityResponse> checkNameAvailabilityWithResponse(CheckNameAvailabilityRequest body,
        Context context);

    /**
     * Checks if a Playwright workspace name is available globally.
     * 
     * @param body The CheckAvailability request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the check availability result.
     */
    CheckNameAvailabilityResponse checkNameAvailability(CheckNameAvailabilityRequest body);

    /**
     * Get a PlaywrightWorkspace.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a PlaywrightWorkspace along with {@link Response}.
     */
    PlaywrightWorkspace getById(String id);

    /**
     * Get a PlaywrightWorkspace.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a PlaywrightWorkspace along with {@link Response}.
     */
    Response<PlaywrightWorkspace> getByIdWithResponse(String id, Context context);

    /**
     * Deletes a Playwright workspace resource asynchronously.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes a Playwright workspace resource asynchronously.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new PlaywrightWorkspace resource.
     * 
     * @param name resource name.
     * @return the first stage of the new PlaywrightWorkspace definition.
     */
    PlaywrightWorkspace.DefinitionStages.Blank define(String name);
}
