// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.playwright.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.playwright.fluent.models.CheckNameAvailabilityResponseInner;
import com.azure.resourcemanager.playwright.fluent.models.PlaywrightWorkspaceInner;
import com.azure.resourcemanager.playwright.models.CheckNameAvailabilityRequest;
import com.azure.resourcemanager.playwright.models.PlaywrightWorkspaceUpdate;

/**
 * An instance of this class provides access to all the operations defined in PlaywrightWorkspacesClient.
 */
public interface PlaywrightWorkspacesClient {
    /**
     * Get a PlaywrightWorkspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a PlaywrightWorkspace along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PlaywrightWorkspaceInner> getByResourceGroupWithResponse(String resourceGroupName,
        String playwrightWorkspaceName, Context context);

    /**
     * Get a PlaywrightWorkspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a PlaywrightWorkspace.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PlaywrightWorkspaceInner getByResourceGroup(String resourceGroupName, String playwrightWorkspaceName);

    /**
     * Create a PlaywrightWorkspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of playwright workspace resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<PlaywrightWorkspaceInner>, PlaywrightWorkspaceInner> beginCreateOrUpdate(
        String resourceGroupName, String playwrightWorkspaceName, PlaywrightWorkspaceInner resource);

    /**
     * Create a PlaywrightWorkspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of playwright workspace resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<PlaywrightWorkspaceInner>, PlaywrightWorkspaceInner> beginCreateOrUpdate(
        String resourceGroupName, String playwrightWorkspaceName, PlaywrightWorkspaceInner resource, Context context);

    /**
     * Create a PlaywrightWorkspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return playwright workspace resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PlaywrightWorkspaceInner createOrUpdate(String resourceGroupName, String playwrightWorkspaceName,
        PlaywrightWorkspaceInner resource);

    /**
     * Create a PlaywrightWorkspace.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return playwright workspace resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PlaywrightWorkspaceInner createOrUpdate(String resourceGroupName, String playwrightWorkspaceName,
        PlaywrightWorkspaceInner resource, Context context);

    /**
     * Updates a Playwright workspace resource synchronously.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return playwright workspace resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PlaywrightWorkspaceInner> updateWithResponse(String resourceGroupName, String playwrightWorkspaceName,
        PlaywrightWorkspaceUpdate properties, Context context);

    /**
     * Updates a Playwright workspace resource synchronously.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return playwright workspace resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PlaywrightWorkspaceInner update(String resourceGroupName, String playwrightWorkspaceName,
        PlaywrightWorkspaceUpdate properties);

    /**
     * Deletes a Playwright workspace resource asynchronously.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String playwrightWorkspaceName);

    /**
     * Deletes a Playwright workspace resource asynchronously.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String playwrightWorkspaceName,
        Context context);

    /**
     * Deletes a Playwright workspace resource asynchronously.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String playwrightWorkspaceName);

    /**
     * Deletes a Playwright workspace resource asynchronously.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param playwrightWorkspaceName The name of the PlaywrightWorkspace.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String playwrightWorkspaceName, Context context);

    /**
     * List PlaywrightWorkspace resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PlaywrightWorkspace list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PlaywrightWorkspaceInner> listByResourceGroup(String resourceGroupName);

    /**
     * List PlaywrightWorkspace resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PlaywrightWorkspace list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PlaywrightWorkspaceInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List PlaywrightWorkspace resources by subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PlaywrightWorkspace list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PlaywrightWorkspaceInner> list();

    /**
     * List PlaywrightWorkspace resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a PlaywrightWorkspace list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PlaywrightWorkspaceInner> list(Context context);

    /**
     * Checks if a Playwright workspace name is available globally.
     * 
     * @param body The CheckAvailability request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the check availability result along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CheckNameAvailabilityResponseInner> checkNameAvailabilityWithResponse(CheckNameAvailabilityRequest body,
        Context context);

    /**
     * Checks if a Playwright workspace name is available globally.
     * 
     * @param body The CheckAvailability request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the check availability result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CheckNameAvailabilityResponseInner checkNameAvailability(CheckNameAvailabilityRequest body);
}
