// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.resourcemanager.neonpostgres.models.Attributes;
import com.azure.resourcemanager.neonpostgres.models.AutoscalingSize;
import com.azure.resourcemanager.neonpostgres.models.BranchProperties;
import com.azure.resourcemanager.neonpostgres.models.DefaultEndpointSettings;
import com.azure.resourcemanager.neonpostgres.models.EndpointProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointType;
import com.azure.resourcemanager.neonpostgres.models.NeonDatabaseProperties;
import com.azure.resourcemanager.neonpostgres.models.NeonRoleProperties;
import com.azure.resourcemanager.neonpostgres.models.ProjectProperties;
import java.util.Arrays;

/**
 * Samples for Projects CreateOrUpdate.
 */
public final class ProjectsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2025-06-23-preview/Projects_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: Projects_CreateOrUpdate_MaximumSet.
     * 
     * @param manager Entry point to NeonPostgresManager.
     */
    public static void
        projectsCreateOrUpdateMaximumSet(com.azure.resourcemanager.neonpostgres.NeonPostgresManager manager) {
        manager.projects()
            .define("myProject")
            .withExistingOrganization("rgneon", "myOrganization")
            .withProperties(new ProjectProperties().withEntityName("myProject")
                .withAttributes(Arrays.asList(new Attributes().withName("environment").withValue("development")))
                .withRegionId("westus")
                .withStorage(22L)
                .withPgVersion(14)
                .withHistoryRetention(3)
                .withDefaultEndpointSettings(
                    new DefaultEndpointSettings().withAutoscalingLimitMinCu(3.0).withAutoscalingLimitMaxCu(28.0))
                .withBranch(new BranchProperties().withEntityName("main")
                    .withAttributes(Arrays.asList(new Attributes().withName("environment").withValue("development")))
                    .withProjectId("project-123")
                    .withParentId("main-branch")
                    .withRoles(Arrays.asList(new NeonRoleProperties().withEntityName("read_only_role")
                        .withAttributes(
                            Arrays.asList(new Attributes().withName("environment").withValue("development")))
                        .withBranchId("branch-123")
                        .withPermissions(Arrays.asList("SELECT"))
                        .withIsSuperUser(true)))
                    .withDatabases(Arrays.asList(new NeonDatabaseProperties().withEntityName("appdb")
                        .withAttributes(
                            Arrays.asList(new Attributes().withName("environment").withValue("development")))
                        .withBranchId("branch-123")
                        .withOwnerName("postgres")))
                    .withEndpoints(
                        Arrays
                            .asList(new EndpointProperties().withEntityName("primary-endpoint")
                                .withAttributes(
                                    Arrays.asList(new Attributes().withName("environment").withValue("development")))
                                .withProjectId("project-123")
                                .withBranchId("branch-123")
                                .withEndpointType(EndpointType.READ_WRITE)
                                .withSize(new AutoscalingSize().withAutoscalingLimitMinCu(1.0)
                                    .withAutoscalingLimitMaxCu(4.0)))))
                .withRoles(Arrays.asList(new NeonRoleProperties().withEntityName("admin_role")
                    .withAttributes(Arrays.asList(new Attributes().withName("environment").withValue("development")))
                    .withBranchId("branch-123")
                    .withPermissions(Arrays.asList("ALL"))
                    .withIsSuperUser(true)))
                .withDatabases(Arrays.asList(new NeonDatabaseProperties().withEntityName("postgres")
                    .withAttributes(Arrays.asList(new Attributes().withName("environment").withValue("development")))
                    .withBranchId("branch-123")
                    .withOwnerName("postgres")))
                .withEndpoints(Arrays.asList(new EndpointProperties().withEntityName("readonly-endpoint")
                    .withAttributes(Arrays.asList(new Attributes().withName("environment").withValue("development")))
                    .withProjectId("project-123")
                    .withBranchId("branch-123")
                    .withEndpointType(EndpointType.READ_ONLY)
                    .withSize(new AutoscalingSize().withAutoscalingLimitMinCu(1.0).withAutoscalingLimitMaxCu(2.0)))))
            .create();
    }
}
