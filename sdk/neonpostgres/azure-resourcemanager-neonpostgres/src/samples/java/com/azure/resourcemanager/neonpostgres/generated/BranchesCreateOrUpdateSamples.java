// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.resourcemanager.neonpostgres.models.Attributes;
import com.azure.resourcemanager.neonpostgres.models.AutoscalingSize;
import com.azure.resourcemanager.neonpostgres.models.BranchProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointType;
import com.azure.resourcemanager.neonpostgres.models.NeonDatabaseProperties;
import com.azure.resourcemanager.neonpostgres.models.NeonRoleProperties;
import java.util.Arrays;

/**
 * Samples for Branches CreateOrUpdate.
 */
public final class BranchesCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2025-06-23-preview/Branches_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: Branches_CreateOrUpdate_MaximumSet.
     * 
     * @param manager Entry point to NeonPostgresManager.
     */
    public static void
        branchesCreateOrUpdateMaximumSet(com.azure.resourcemanager.neonpostgres.NeonPostgresManager manager) {
        manager.branches()
            .define("feature")
            .withExistingProject("rgneon", "myOrganization", "myProject")
            .withProperties(new BranchProperties().withEntityName("FeatureBranch")
                .withAttributes(Arrays.asList(new Attributes().withName("on").withValue("qzp")))
                .withProjectId("cxhihpayn")
                .withParentId("parent-123abc")
                .withRoleName("lwlafskrxvggwnfu")
                .withDatabaseName("zxqetv")
                .withRoles(Arrays.asList(new NeonRoleProperties().withEntityName("AdminRole")
                    .withAttributes(Arrays.asList(new Attributes().withName("on").withValue("qzp")))
                    .withBranchId("tnmwjbftrvfpepgeytoeqsyhyz")
                    .withPermissions(Arrays.asList("cgubrzxkomlxoqdua"))
                    .withIsSuperUser(true)))
                .withDatabases(Arrays.asList(new NeonDatabaseProperties().withEntityName("MainDatabase")
                    .withAttributes(Arrays.asList(new Attributes().withName("on").withValue("qzp")))
                    .withBranchId("sllrohrmwkgzre")
                    .withOwnerName("rjpysakvuicrlwvzcbmp")))
                .withEndpoints(Arrays.asList(new EndpointProperties().withEntityName("PrimaryEndpoint")
                    .withAttributes(Arrays.asList(new Attributes().withName("on").withValue("qzp")))
                    .withProjectId("vwwhykqyr")
                    .withBranchId("blclbeuzvywzagbuvdo")
                    .withEndpointType(EndpointType.READ_ONLY)
                    .withSize(new AutoscalingSize().withAutoscalingLimitMinCu(3.0).withAutoscalingLimitMaxCu(14.0)))))
            .create();
    }
}
