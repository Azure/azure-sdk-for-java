// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.resourcemanager.neonpostgres.models.CompanyDetails;
import com.azure.resourcemanager.neonpostgres.models.MarketplaceDetails;
import com.azure.resourcemanager.neonpostgres.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.neonpostgres.models.OfferDetails;
import com.azure.resourcemanager.neonpostgres.models.OrganizationProperties;
import com.azure.resourcemanager.neonpostgres.models.PartnerOrganizationProperties;
import com.azure.resourcemanager.neonpostgres.models.SingleSignOnProperties;
import com.azure.resourcemanager.neonpostgres.models.SingleSignOnStates;
import com.azure.resourcemanager.neonpostgres.models.UserDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Organizations CreateOrUpdate.
 */
public final class OrganizationsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2024-08-01-preview/Organizations_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: Organizations_CreateOrUpdate.
     * 
     * @param manager Entry point to NeonPostgresManager.
     */
    public static void organizationsCreateOrUpdate(com.azure.resourcemanager.neonpostgres.NeonPostgresManager manager) {
        manager.organizations()
            .define("XB-.:")
            .withRegion("upxxgikyqrbnv")
            .withExistingResourceGroup("rgneon")
            .withTags(mapOf("key2099", "fakeTokenPlaceholder"))
            .withProperties(new OrganizationProperties()
                .withMarketplaceDetails(new MarketplaceDetails().withSubscriptionId("yxmkfivp")
                    .withSubscriptionStatus(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START)
                    .withOfferDetails(new OfferDetails().withPublisherId("hporaxnopmolttlnkbarw")
                        .withOfferId("bunyeeupoedueofwrzej")
                        .withPlanId("nlbfiwtslenfwek")
                        .withPlanName("ljbmgpkfqklaufacbpml")
                        .withTermUnit("qbcq")
                        .withTermId("aedlchikwqckuploswthvshe")))
                .withUserDetails(new UserDetails().withFirstName("buwwe")
                    .withLastName("escynjpynkoox")
                    .withEmailAddress("3i_%@w8-y.H-p.tvj.dG")
                    .withUpn("fwedjamgwwrotcjaucuzdwycfjdqn")
                    .withPhoneNumber("dlrqoowumy"))
                .withCompanyDetails(new CompanyDetails().withCompanyName("uxn")
                    .withCountry("lpajqzptqchuko")
                    .withOfficeAddress("chpkrlpmfslmawgunjxdllzcrctykq")
                    .withBusinessPhone("hbeb")
                    .withDomain("krjldeakhwiepvs")
                    .withNumberOfEmployees(23L))
                .withPartnerOrganizationProperties(
                    new PartnerOrganizationProperties().withOrganizationId("nrhvoqzulowcunhmvwfgjcaibvwcl")
                        .withOrganizationName("2__.-")
                        .withSingleSignOnProperties(
                            new SingleSignOnProperties().withSingleSignOnState(SingleSignOnStates.INITIAL)
                                .withEnterpriseAppId("fpibacregjfncfdsojs")
                                .withSingleSignOnUrl("tmojh")
                                .withAadDomains(Arrays.asList("kndszgrwzbvvlssvkej")))))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
