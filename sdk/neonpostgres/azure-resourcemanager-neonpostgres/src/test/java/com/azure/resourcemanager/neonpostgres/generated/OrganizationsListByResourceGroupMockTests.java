// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.neonpostgres.NeonPostgresManager;
import com.azure.resourcemanager.neonpostgres.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.neonpostgres.models.OrganizationResource;
import com.azure.resourcemanager.neonpostgres.models.SingleSignOnStates;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"marketplaceDetails\":{\"subscriptionId\":\"ied\",\"subscriptionStatus\":\"Subscribed\",\"offerDetails\":{\"publisherId\":\"idyjrrfbyaosvexc\",\"offerId\":\"onpc\",\"planId\":\"hocohslkev\",\"planName\":\"ggzfbu\",\"termUnit\":\"mvfaxkffeiith\",\"termId\":\"m\"}},\"userDetails\":{\"firstName\":\"yvshxmz\",\"lastName\":\"bzoggigrx\",\"emailAddress\":\"ur\",\"upn\":\"xxjnspydptk\",\"phoneNumber\":\"nkoukn\"},\"companyDetails\":{\"companyName\":\"dwtiukbldngkp\",\"country\":\"ipazyxoegukgjnpi\",\"officeAddress\":\"gygev\",\"businessPhone\":\"ntypmrbpizcdrqj\",\"domain\":\"pyd\",\"numberOfEmployees\":5608442728780589257},\"provisioningState\":\"Canceled\",\"partnerOrganizationProperties\":{\"organizationId\":\"ejzicwifsjtt\",\"organizationName\":\"zfbishcbkhaj\",\"singleSignOnProperties\":{\"singleSignOnState\":\"Disable\",\"enterpriseAppId\":\"md\",\"singleSignOnUrl\":\"agalpbuxwgipwhon\",\"aadDomains\":[\"gshwankixz\",\"injep\"]}}},\"location\":\"tmryw\",\"tags\":{\"yx\":\"oqftiyqzrnkcq\",\"nwvlryavwhheunmm\":\"whzlsicohoq\",\"koklya\":\"hgyxzkonoc\",\"ewrmjmwvvjektc\":\"uconuqszfkbey\"},\"id\":\"senhwlrs\",\"name\":\"frzpwvlqdqgb\",\"type\":\"qylihkaetckt\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NeonPostgresManager manager = NeonPostgresManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<OrganizationResource> response
            = manager.organizations().listByResourceGroup("sauuimj", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("tmryw", response.iterator().next().location());
        Assertions.assertEquals("oqftiyqzrnkcq", response.iterator().next().tags().get("yx"));
        Assertions.assertEquals("ied", response.iterator().next().properties().marketplaceDetails().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.SUBSCRIBED,
            response.iterator().next().properties().marketplaceDetails().subscriptionStatus());
        Assertions.assertEquals("idyjrrfbyaosvexc",
            response.iterator().next().properties().marketplaceDetails().offerDetails().publisherId());
        Assertions.assertEquals("onpc",
            response.iterator().next().properties().marketplaceDetails().offerDetails().offerId());
        Assertions.assertEquals("hocohslkev",
            response.iterator().next().properties().marketplaceDetails().offerDetails().planId());
        Assertions.assertEquals("ggzfbu",
            response.iterator().next().properties().marketplaceDetails().offerDetails().planName());
        Assertions.assertEquals("mvfaxkffeiith",
            response.iterator().next().properties().marketplaceDetails().offerDetails().termUnit());
        Assertions.assertEquals("m",
            response.iterator().next().properties().marketplaceDetails().offerDetails().termId());
        Assertions.assertEquals("yvshxmz", response.iterator().next().properties().userDetails().firstName());
        Assertions.assertEquals("bzoggigrx", response.iterator().next().properties().userDetails().lastName());
        Assertions.assertEquals("ur", response.iterator().next().properties().userDetails().emailAddress());
        Assertions.assertEquals("xxjnspydptk", response.iterator().next().properties().userDetails().upn());
        Assertions.assertEquals("nkoukn", response.iterator().next().properties().userDetails().phoneNumber());
        Assertions.assertEquals("dwtiukbldngkp",
            response.iterator().next().properties().companyDetails().companyName());
        Assertions.assertEquals("ipazyxoegukgjnpi", response.iterator().next().properties().companyDetails().country());
        Assertions.assertEquals("gygev", response.iterator().next().properties().companyDetails().officeAddress());
        Assertions.assertEquals("ntypmrbpizcdrqj",
            response.iterator().next().properties().companyDetails().businessPhone());
        Assertions.assertEquals("pyd", response.iterator().next().properties().companyDetails().domain());
        Assertions.assertEquals(5608442728780589257L,
            response.iterator().next().properties().companyDetails().numberOfEmployees());
        Assertions.assertEquals("ejzicwifsjtt",
            response.iterator().next().properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("zfbishcbkhaj",
            response.iterator().next().properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals(SingleSignOnStates.DISABLE,
            response.iterator()
                .next()
                .properties()
                .partnerOrganizationProperties()
                .singleSignOnProperties()
                .singleSignOnState());
        Assertions.assertEquals("md",
            response.iterator()
                .next()
                .properties()
                .partnerOrganizationProperties()
                .singleSignOnProperties()
                .enterpriseAppId());
        Assertions.assertEquals("agalpbuxwgipwhon",
            response.iterator()
                .next()
                .properties()
                .partnerOrganizationProperties()
                .singleSignOnProperties()
                .singleSignOnUrl());
        Assertions.assertEquals("gshwankixz",
            response.iterator()
                .next()
                .properties()
                .partnerOrganizationProperties()
                .singleSignOnProperties()
                .aadDomains()
                .get(0));
    }
}
