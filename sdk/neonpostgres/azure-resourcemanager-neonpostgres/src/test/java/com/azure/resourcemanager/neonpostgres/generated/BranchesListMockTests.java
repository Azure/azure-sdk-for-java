// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.neonpostgres.NeonPostgresManager;
import com.azure.resourcemanager.neonpostgres.models.Branch;
import com.azure.resourcemanager.neonpostgres.models.EndpointType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BranchesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"entityId\":\"wxlwme\",\"entityName\":\"ohxp\",\"createdAt\":\"ceopvk\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"esobpbokhmm\",\"value\":\"cdyarnggcjfwblqh\"},{\"name\":\"kasmcolmugpyva\",\"value\":\"s\"}],\"projectId\":\"l\",\"parentId\":\"zxeygzvtye\",\"roleName\":\"hubnobgu\",\"databaseName\":\"sqsqkpdmioyjpnml\",\"roles\":[{\"entityId\":\"pszpmcvqdvr\",\"entityName\":\"vxyrxd\",\"createdAt\":\"vqojbxaotcgbz\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"lef\",\"value\":\"ioyidoxznvg\"},{\"name\":\"dtmuuvd\",\"value\":\"wsxmrszb\"}],\"branchId\":\"imxlpnerxrzuty\",\"permissions\":[\"rzaqmnbx\",\"aehtd\"],\"isSuperUser\":true},{\"entityId\":\"nvynfaooeactedc\",\"entityName\":\"sk\",\"createdAt\":\"ddida\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"qmtlpbyxroi\",\"value\":\"uyqyp\"}],\"branchId\":\"mnoiicsudy\",\"permissions\":[\"jjtalxrdsj\",\"h\",\"luqwgusxxhd\",\"dp\"],\"isSuperUser\":true}],\"databases\":[{\"entityId\":\"tbdmvsbyidae\",\"entityName\":\"pvek\",\"createdAt\":\"wjfbotloggdusx\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"v\",\"value\":\"xcjkcoqwczsy\"},{\"name\":\"qrizfwihvaan\",\"value\":\"qtnhjrfd\"},{\"name\":\"fdvbbaexxjfwtg\",\"value\":\"fkkauigvmua\"},{\"name\":\"mczfedyuepsvplt\",\"value\":\"dajjvywe\"}],\"branchId\":\"fkumcfjxoky\",\"ownerName\":\"syasvfnkwmygjjek\"},{\"entityId\":\"nfdrugjqyck\",\"entityName\":\"xkrdtul\",\"createdAt\":\"cjdk\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"ubmzoon\",\"value\":\"vo\"}],\"branchId\":\"hkxfpwhdyslbklgl\",\"ownerName\":\"nkkw\"},{\"entityId\":\"qshwyqxridt\",\"entityName\":\"saqjmkgx\",\"createdAt\":\"queu\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"pziiz\",\"value\":\"vjykofveze\"},{\"name\":\"k\",\"value\":\"kqtwqlepjjzkcasf\"},{\"name\":\"zcntogffjwajnrtw\",\"value\":\"vaqkifmxawost\"}],\"branchId\":\"knhrkmjqncf\",\"ownerName\":\"sc\"},{\"entityId\":\"emvwf\",\"entityName\":\"qwypvndrwb\",\"createdAt\":\"dtggrssg\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"injmuymve\",\"value\":\"vztscbgmusaic\"}],\"branchId\":\"scnkzzohnrd\",\"ownerName\":\"lze\"}],\"endpoints\":[{\"entityId\":\"ehlbzqixbnjrqvzy\",\"entityName\":\"xozony\",\"createdAt\":\"ameudpabcreu\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"yjxvc\",\"value\":\"asormrexzvdube\"},{\"name\":\"gzygbaduveco\",\"value\":\"sdqhzr\"}],\"projectId\":\"bakrli\",\"branchId\":\"fvppkeqsifj\",\"endpointType\":\"read_only\"},{\"entityId\":\"gygnhrkombc\",\"entityName\":\"ajdopggor\",\"createdAt\":\"oqtrotpvclpo\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"wkpts\",\"value\":\"wxjgvhxccbmkak\"}],\"projectId\":\"ookbpu\",\"branchId\":\"g\",\"endpointType\":\"read_only\"},{\"entityId\":\"akmlwktfowzkroyr\",\"entityName\":\"r\",\"createdAt\":\"lzqjimejtgzjxx\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"zuqloiwyayyzivr\",\"value\":\"itcdqlhchwhrk\"},{\"name\":\"jlei\",\"value\":\"ibfiplhxfnsm\"},{\"name\":\"cjowlyeyzmu\",\"value\":\"sqc\"},{\"name\":\"hnxlzbuwodmachb\",\"value\":\"vnrpbjrmvg\"}],\"projectId\":\"plehmumk\",\"branchId\":\"llcz\",\"endpointType\":\"read_write\"},{\"entityId\":\"nhkgq\",\"entityName\":\"oxsstc\",\"createdAt\":\"rak\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"j\",\"value\":\"wmhlymgnukx\"},{\"name\":\"kemjpequlrlz\",\"value\":\"udgjtfb\"}],\"projectId\":\"akkuc\",\"branchId\":\"wnhczbutou\",\"endpointType\":\"read_write\"}]},\"id\":\"irjwayhicqqwwvgw\",\"name\":\"slvlizedvb\",\"type\":\"abv\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NeonPostgresManager manager = NeonPostgresManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Branch> response
            = manager.branches().list("klvqzrwtrdgscn", "q", "on", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ohxp", response.iterator().next().properties().entityName());
        Assertions.assertEquals("esobpbokhmm", response.iterator().next().properties().attributes().get(0).name());
        Assertions.assertEquals("cdyarnggcjfwblqh",
            response.iterator().next().properties().attributes().get(0).value());
        Assertions.assertEquals("l", response.iterator().next().properties().projectId());
        Assertions.assertEquals("zxeygzvtye", response.iterator().next().properties().parentId());
        Assertions.assertEquals("hubnobgu", response.iterator().next().properties().roleName());
        Assertions.assertEquals("sqsqkpdmioyjpnml", response.iterator().next().properties().databaseName());
        Assertions.assertEquals("vxyrxd", response.iterator().next().properties().roles().get(0).entityName());
        Assertions.assertEquals("lef",
            response.iterator().next().properties().roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("ioyidoxznvg",
            response.iterator().next().properties().roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("imxlpnerxrzuty", response.iterator().next().properties().roles().get(0).branchId());
        Assertions.assertEquals("rzaqmnbx",
            response.iterator().next().properties().roles().get(0).permissions().get(0));
        Assertions.assertTrue(response.iterator().next().properties().roles().get(0).isSuperUser());
        Assertions.assertEquals("pvek", response.iterator().next().properties().databases().get(0).entityName());
        Assertions.assertEquals("v",
            response.iterator().next().properties().databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("xcjkcoqwczsy",
            response.iterator().next().properties().databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("fkumcfjxoky", response.iterator().next().properties().databases().get(0).branchId());
        Assertions.assertEquals("syasvfnkwmygjjek",
            response.iterator().next().properties().databases().get(0).ownerName());
        Assertions.assertEquals("xozony", response.iterator().next().properties().endpoints().get(0).entityName());
        Assertions.assertEquals("yjxvc",
            response.iterator().next().properties().endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("asormrexzvdube",
            response.iterator().next().properties().endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("bakrli", response.iterator().next().properties().endpoints().get(0).projectId());
        Assertions.assertEquals("fvppkeqsifj", response.iterator().next().properties().endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_ONLY,
            response.iterator().next().properties().endpoints().get(0).endpointType());
    }
}
