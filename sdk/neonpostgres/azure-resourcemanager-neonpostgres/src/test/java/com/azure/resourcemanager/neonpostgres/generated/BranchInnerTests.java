// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.neonpostgres.fluent.models.BranchInner;
import com.azure.resourcemanager.neonpostgres.models.Attributes;
import com.azure.resourcemanager.neonpostgres.models.BranchProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointType;
import com.azure.resourcemanager.neonpostgres.models.NeonDatabaseProperties;
import com.azure.resourcemanager.neonpostgres.models.NeonRoleProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class BranchInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BranchInner model = BinaryData.fromString(
            "{\"properties\":{\"entityId\":\"flqo\",\"entityName\":\"uvr\",\"createdAt\":\"mrnjh\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"tczytqjtwh\",\"value\":\"uunfprnjletlxsm\"},{\"name\":\"pddouifamowaziyn\",\"value\":\"nlqwzdvpiwhx\"}],\"projectId\":\"zdtmaajquhuxylrj\",\"parentId\":\"ty\",\"roleName\":\"bmzyospsps\",\"databaseName\":\"kfkyjp\",\"roles\":[{\"entityId\":\"pssdfppyogtie\",\"entityName\":\"jtvczkcnyxrxmun\",\"createdAt\":\"xvglnkvxlxp\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"vbgkcvkhpzv\",\"value\":\"qdf\"},{\"name\":\"voniypfp\",\"value\":\"bcpzgpxtivh\"}],\"branchId\":\"nidibgqjxg\",\"permissions\":[\"hgovfgp\"],\"isSuperUser\":false},{\"entityId\":\"hh\",\"entityName\":\"wjrmzvuporqzd\",\"createdAt\":\"ydzvkf\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"mx\",\"value\":\"psw\"}],\"branchId\":\"mvkhlggd\",\"permissions\":[\"mzqkz\"],\"isSuperUser\":true},{\"entityId\":\"iwtglxxhljfpg\",\"entityName\":\"crmnzhrgmqgjs\",\"createdAt\":\"pqcbfrmbodthsq\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"i\",\"value\":\"a\"},{\"name\":\"c\",\"value\":\"a\"}],\"branchId\":\"fr\",\"permissions\":[\"usx\",\"uzlwvsgmw\",\"hqf\",\"izvu\"],\"isSuperUser\":false}],\"databases\":[{\"entityId\":\"vthn\",\"entityName\":\"zt\",\"createdAt\":\"ovmribiattg\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"otangcfhnykzc\",\"value\":\"gswvxwlmzqwm\"},{\"name\":\"tx\",\"value\":\"jmxmcuqud\"}],\"branchId\":\"vclx\",\"ownerName\":\"pdkvg\"},{\"entityId\":\"buiyji\",\"entityName\":\"zphdugneiknp\",\"createdAt\":\"xgjiuqh\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"ipq\",\"value\":\"jedmurrxxgewp\"}],\"branchId\":\"vqylkmqpzoyhl\",\"ownerName\":\"cgwgcloxoebqinji\"},{\"entityId\":\"wjfuj\",\"entityName\":\"afcba\",\"createdAt\":\"pzpofoiyjw\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"mkkho\",\"value\":\"vdndviauo\"},{\"name\":\"phuartv\",\"value\":\"iukyefchnmna\"},{\"name\":\"mnxhkxjqirwrweo\",\"value\":\"xffi\"}],\"branchId\":\"xwrsnew\",\"ownerName\":\"zqvbubqm\"},{\"entityId\":\"hsycxhxzgaz\",\"entityName\":\"abo\",\"createdAt\":\"vmfqhppubo\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"fgkmtdhern\",\"value\":\"btcjuah\"},{\"name\":\"kqtob\",\"value\":\"auxofshfph\"}],\"branchId\":\"nulaiywzejywhsl\",\"ownerName\":\"ojpllndnpdwrpqaf\"}],\"endpoints\":[{\"entityId\":\"snnfhyetefyp\",\"entityName\":\"octfjgtixrjvzuyt\",\"createdAt\":\"mlmuowol\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"opionszon\",\"value\":\"pngajin\"},{\"name\":\"ixjawrtm\",\"value\":\"fjmyccxlzhco\"}],\"projectId\":\"vnekhenlusfnrdtj\",\"branchId\":\"xrdcqtj\",\"endpointType\":\"read_only\"}]},\"id\":\"tgepuslvyjtcvuwk\",\"name\":\"s\",\"type\":\"zies\"}")
            .toObject(BranchInner.class);
        Assertions.assertEquals("uvr", model.properties().entityName());
        Assertions.assertEquals("tczytqjtwh", model.properties().attributes().get(0).name());
        Assertions.assertEquals("uunfprnjletlxsm", model.properties().attributes().get(0).value());
        Assertions.assertEquals("zdtmaajquhuxylrj", model.properties().projectId());
        Assertions.assertEquals("ty", model.properties().parentId());
        Assertions.assertEquals("bmzyospsps", model.properties().roleName());
        Assertions.assertEquals("kfkyjp", model.properties().databaseName());
        Assertions.assertEquals("jtvczkcnyxrxmun", model.properties().roles().get(0).entityName());
        Assertions.assertEquals("vbgkcvkhpzv", model.properties().roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("qdf", model.properties().roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("nidibgqjxg", model.properties().roles().get(0).branchId());
        Assertions.assertEquals("hgovfgp", model.properties().roles().get(0).permissions().get(0));
        Assertions.assertEquals(false, model.properties().roles().get(0).isSuperUser());
        Assertions.assertEquals("zt", model.properties().databases().get(0).entityName());
        Assertions.assertEquals("otangcfhnykzc", model.properties().databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("gswvxwlmzqwm", model.properties().databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("vclx", model.properties().databases().get(0).branchId());
        Assertions.assertEquals("pdkvg", model.properties().databases().get(0).ownerName());
        Assertions.assertEquals("octfjgtixrjvzuyt", model.properties().endpoints().get(0).entityName());
        Assertions.assertEquals("opionszon", model.properties().endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("pngajin", model.properties().endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("vnekhenlusfnrdtj", model.properties().endpoints().get(0).projectId());
        Assertions.assertEquals("xrdcqtj", model.properties().endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_ONLY, model.properties().endpoints().get(0).endpointType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BranchInner model = new BranchInner().withProperties(new BranchProperties().withEntityName("uvr")
            .withAttributes(Arrays.asList(new Attributes().withName("tczytqjtwh").withValue("uunfprnjletlxsm"),
                new Attributes().withName("pddouifamowaziyn").withValue("nlqwzdvpiwhx")))
            .withProjectId("zdtmaajquhuxylrj")
            .withParentId("ty")
            .withRoleName("bmzyospsps")
            .withDatabaseName("kfkyjp")
            .withRoles(Arrays.asList(
                new NeonRoleProperties().withEntityName("jtvczkcnyxrxmun")
                    .withAttributes(Arrays.asList(new Attributes().withName("vbgkcvkhpzv").withValue("qdf"),
                        new Attributes().withName("voniypfp").withValue("bcpzgpxtivh")))
                    .withBranchId("nidibgqjxg")
                    .withPermissions(Arrays.asList("hgovfgp"))
                    .withIsSuperUser(false),
                new NeonRoleProperties().withEntityName("wjrmzvuporqzd")
                    .withAttributes(Arrays.asList(new Attributes().withName("mx").withValue("psw")))
                    .withBranchId("mvkhlggd")
                    .withPermissions(Arrays.asList("mzqkz"))
                    .withIsSuperUser(true),
                new NeonRoleProperties().withEntityName("crmnzhrgmqgjs")
                    .withAttributes(Arrays.asList(new Attributes().withName("i").withValue("a"),
                        new Attributes().withName("c").withValue("a")))
                    .withBranchId("fr")
                    .withPermissions(Arrays.asList("usx", "uzlwvsgmw", "hqf", "izvu"))
                    .withIsSuperUser(false)))
            .withDatabases(Arrays.asList(
                new NeonDatabaseProperties().withEntityName("zt")
                    .withAttributes(Arrays.asList(new Attributes().withName("otangcfhnykzc").withValue("gswvxwlmzqwm"),
                        new Attributes().withName("tx").withValue("jmxmcuqud")))
                    .withBranchId("vclx")
                    .withOwnerName("pdkvg"),
                new NeonDatabaseProperties().withEntityName("zphdugneiknp")
                    .withAttributes(Arrays.asList(new Attributes().withName("ipq").withValue("jedmurrxxgewp")))
                    .withBranchId("vqylkmqpzoyhl")
                    .withOwnerName("cgwgcloxoebqinji"),
                new NeonDatabaseProperties().withEntityName("afcba")
                    .withAttributes(Arrays.asList(new Attributes().withName("mkkho").withValue("vdndviauo"),
                        new Attributes().withName("phuartv").withValue("iukyefchnmna"),
                        new Attributes().withName("mnxhkxjqirwrweo").withValue("xffi")))
                    .withBranchId("xwrsnew")
                    .withOwnerName("zqvbubqm"),
                new NeonDatabaseProperties().withEntityName("abo")
                    .withAttributes(Arrays.asList(new Attributes().withName("fgkmtdhern").withValue("btcjuah"),
                        new Attributes().withName("kqtob").withValue("auxofshfph")))
                    .withBranchId("nulaiywzejywhsl")
                    .withOwnerName("ojpllndnpdwrpqaf")))
            .withEndpoints(Arrays.asList(new EndpointProperties().withEntityName("octfjgtixrjvzuyt")
                .withAttributes(Arrays.asList(new Attributes().withName("opionszon").withValue("pngajin"),
                    new Attributes().withName("ixjawrtm").withValue("fjmyccxlzhco")))
                .withProjectId("vnekhenlusfnrdtj")
                .withBranchId("xrdcqtj")
                .withEndpointType(EndpointType.READ_ONLY))));
        model = BinaryData.fromObject(model).toObject(BranchInner.class);
        Assertions.assertEquals("uvr", model.properties().entityName());
        Assertions.assertEquals("tczytqjtwh", model.properties().attributes().get(0).name());
        Assertions.assertEquals("uunfprnjletlxsm", model.properties().attributes().get(0).value());
        Assertions.assertEquals("zdtmaajquhuxylrj", model.properties().projectId());
        Assertions.assertEquals("ty", model.properties().parentId());
        Assertions.assertEquals("bmzyospsps", model.properties().roleName());
        Assertions.assertEquals("kfkyjp", model.properties().databaseName());
        Assertions.assertEquals("jtvczkcnyxrxmun", model.properties().roles().get(0).entityName());
        Assertions.assertEquals("vbgkcvkhpzv", model.properties().roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("qdf", model.properties().roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("nidibgqjxg", model.properties().roles().get(0).branchId());
        Assertions.assertEquals("hgovfgp", model.properties().roles().get(0).permissions().get(0));
        Assertions.assertEquals(false, model.properties().roles().get(0).isSuperUser());
        Assertions.assertEquals("zt", model.properties().databases().get(0).entityName());
        Assertions.assertEquals("otangcfhnykzc", model.properties().databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("gswvxwlmzqwm", model.properties().databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("vclx", model.properties().databases().get(0).branchId());
        Assertions.assertEquals("pdkvg", model.properties().databases().get(0).ownerName());
        Assertions.assertEquals("octfjgtixrjvzuyt", model.properties().endpoints().get(0).entityName());
        Assertions.assertEquals("opionszon", model.properties().endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("pngajin", model.properties().endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("vnekhenlusfnrdtj", model.properties().endpoints().get(0).projectId());
        Assertions.assertEquals("xrdcqtj", model.properties().endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_ONLY, model.properties().endpoints().get(0).endpointType());
    }
}
