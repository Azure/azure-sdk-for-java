// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.neonpostgres.NeonPostgresManager;
import com.azure.resourcemanager.neonpostgres.models.Attributes;
import com.azure.resourcemanager.neonpostgres.models.NeonDatabase;
import com.azure.resourcemanager.neonpostgres.models.NeonDatabaseProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NeonDatabasesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"entityId\":\"cypm\",\"entityName\":\"vspsaneyvae\",\"createdAt\":\"iobnhrfbrjokjwq\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"nilppqcai\",\"value\":\"azwfwlrfdjwlzse\"},{\"name\":\"dtqfdrslzy\",\"value\":\"qxse\"},{\"name\":\"wycuhyt\",\"value\":\"wgetfig\"}],\"branchId\":\"eqjxzizebjrahg\",\"ownerName\":\"tubwggxzsshxli\",\"databaseName\":\"sckwh\",\"lastUpdated\":\"doi\"},\"id\":\"obqzwjalwrso\",\"name\":\"xcacrmvjfmrsuydl\",\"type\":\"prel\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NeonPostgresManager manager = NeonPostgresManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        NeonDatabase response = manager.neonDatabases()
            .define("vkjcim")
            .withExistingBranche("bio", "gwviqehmdq", "aolid", "dfs")
            .withProperties(new NeonDatabaseProperties().withEntityName("himmydtdtftmi")
                .withAttributes(Arrays.asList(new Attributes().withName("prk").withValue("oyimxpggktteag"),
                    new Attributes().withName("gacnqp").withValue("uytv"),
                    new Attributes().withName("deylpbyb").withValue("is")))
                .withBranchId("ifm")
                .withOwnerName("lpwdjraurf")
                .withDatabaseName("znurttu"))
            .create();

        Assertions.assertEquals("vspsaneyvae", response.properties().entityName());
        Assertions.assertEquals("nilppqcai", response.properties().attributes().get(0).name());
        Assertions.assertEquals("azwfwlrfdjwlzse", response.properties().attributes().get(0).value());
        Assertions.assertEquals("eqjxzizebjrahg", response.properties().branchId());
        Assertions.assertEquals("tubwggxzsshxli", response.properties().ownerName());
        Assertions.assertEquals("sckwh", response.properties().databaseName());
    }
}
