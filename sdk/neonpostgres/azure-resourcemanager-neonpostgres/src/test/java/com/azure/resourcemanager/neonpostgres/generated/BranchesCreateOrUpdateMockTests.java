// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.neonpostgres.NeonPostgresManager;
import com.azure.resourcemanager.neonpostgres.models.Attributes;
import com.azure.resourcemanager.neonpostgres.models.Branch;
import com.azure.resourcemanager.neonpostgres.models.BranchProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointType;
import com.azure.resourcemanager.neonpostgres.models.NeonDatabaseProperties;
import com.azure.resourcemanager.neonpostgres.models.NeonRoleProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BranchesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"entityId\":\"dejkluxxrwzobuz\",\"entityName\":\"xga\",\"createdAt\":\"dtkwppth\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"mimrljdpoqfxyemh\",\"value\":\"ftb\"},{\"name\":\"ewhtec\",\"value\":\"oamfmxtllfltymqc\"},{\"name\":\"rrfijhgg\",\"value\":\"bqbgamklilirwdv\"},{\"name\":\"fhsdpzouhkt\",\"value\":\"rxqwqnjxrd\"}],\"projectId\":\"dtullygtavczcxdf\",\"parentId\":\"a\",\"roleName\":\"fmlxrljphr\",\"databaseName\":\"pifleimixl\",\"roles\":[{\"entityId\":\"icehfgsmdrjuqb\",\"entityName\":\"tokljmtznpaxw\",\"createdAt\":\"tyyqiprcltungb\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"kmii\",\"value\":\"zbkuckgkdsksw\"},{\"name\":\"iiqqcqikclsmalns\",\"value\":\"woykdnonaaxwm\"}],\"branchId\":\"ru\",\"permissions\":[\"cwnynlleiq\",\"cbgvsbt\"],\"isSuperUser\":true}],\"databases\":[{\"entityId\":\"adhx\",\"entityName\":\"jhxmnrqst\",\"createdAt\":\"metwml\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"pvv\",\"value\":\"hgjnaq\"},{\"name\":\"qipslz\",\"value\":\"vcdsvm\"},{\"name\":\"bit\",\"value\":\"kdtfo\"}],\"branchId\":\"fiybxqich\",\"ownerName\":\"bfzdqekiv\"}],\"endpoints\":[{\"entityId\":\"cv\",\"entityName\":\"zulrqt\",\"createdAt\":\"trezpzlpryfmxmdu\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"il\",\"value\":\"oudccgndjg\"}],\"projectId\":\"r\",\"branchId\":\"gqqyeqfcbuulpyuf\",\"endpointType\":\"read_write\"}]},\"id\":\"shtujcyoh\",\"name\":\"gimwdcsklkqnqv\",\"type\":\"ixnmbz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NeonPostgresManager manager = NeonPostgresManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Branch response = manager.branches()
            .define("xrk")
            .withExistingProject("srgekzyqxadyfhb", "wkhojqttbspvkhg", "aqjsgyzstujr")
            .withProperties(new BranchProperties().withEntityName("duyehiiitt")
                .withAttributes(Arrays.asList(new Attributes().withName("xdzciggbnvtxofwa").withValue("zyxwhoe"),
                    new Attributes().withName("moeobdoe").withValue("sfpnimt"),
                    new Attributes().withName("uuhaue").withValue("nkwmnfeub"),
                    new Attributes().withName("zjy").withValue("kwfugiphrrkuu")))
                .withProjectId("qdurhzzfopue")
                .withParentId("usvwluj")
                .withRoleName("wnibittoz")
                .withDatabaseName("dqumqvfm")
                .withRoles(Arrays.asList(new NeonRoleProperties().withEntityName("vgwy")
                    .withAttributes(Arrays.asList(new Attributes().withName("ryizwbxgde").withValue("xlayunomir"),
                        new Attributes().withName("p").withValue("abenqlamwmg"),
                        new Attributes().withName("way").withValue("f")))
                    .withBranchId("bcpjstbhem")
                    .withPermissions(Arrays.asList("csqsnxfbx"))
                    .withIsSuperUser(true)))
                .withDatabases(Arrays.asList(new NeonDatabaseProperties().withEntityName("axpfobkzhmhj")
                    .withAttributes(Arrays.asList(new Attributes().withName("rojadhfz").withValue("lraysrkgzky"),
                        new Attributes().withName("udbkuwpzq").withValue("lcwe"),
                        new Attributes().withName("kfecjvxf").withValue("qufqizj"),
                        new Attributes().withName("ppwooaj").withValue("yyjmjjxiz")))
                    .withBranchId("xhnzlslekcttgzkj")
                    .withOwnerName("qpdwad")))
                .withEndpoints(Arrays.asList(new EndpointProperties().withEntityName("jzucwwm")
                    .withAttributes(Arrays.asList(new Attributes().withName("kbnzxbypfq").withValue("gaixwrgrkkd"),
                        new Attributes().withName("rfrswqikwep").withValue("ogggicwnxhtfm"),
                        new Attributes().withName("qbsudzpgchzpg").withValue("qumjdjxhzghgod")))
                    .withProjectId("nrceqavfdbdfmmx")
                    .withBranchId("naj")
                    .withEndpointType(EndpointType.READ_WRITE))))
            .create();

        Assertions.assertEquals("xga", response.properties().entityName());
        Assertions.assertEquals("mimrljdpoqfxyemh", response.properties().attributes().get(0).name());
        Assertions.assertEquals("ftb", response.properties().attributes().get(0).value());
        Assertions.assertEquals("dtullygtavczcxdf", response.properties().projectId());
        Assertions.assertEquals("a", response.properties().parentId());
        Assertions.assertEquals("fmlxrljphr", response.properties().roleName());
        Assertions.assertEquals("pifleimixl", response.properties().databaseName());
        Assertions.assertEquals("tokljmtznpaxw", response.properties().roles().get(0).entityName());
        Assertions.assertEquals("kmii", response.properties().roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("zbkuckgkdsksw", response.properties().roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("ru", response.properties().roles().get(0).branchId());
        Assertions.assertEquals("cwnynlleiq", response.properties().roles().get(0).permissions().get(0));
        Assertions.assertTrue(response.properties().roles().get(0).isSuperUser());
        Assertions.assertEquals("jhxmnrqst", response.properties().databases().get(0).entityName());
        Assertions.assertEquals("pvv", response.properties().databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("hgjnaq", response.properties().databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("fiybxqich", response.properties().databases().get(0).branchId());
        Assertions.assertEquals("bfzdqekiv", response.properties().databases().get(0).ownerName());
        Assertions.assertEquals("zulrqt", response.properties().endpoints().get(0).entityName());
        Assertions.assertEquals("il", response.properties().endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("oudccgndjg", response.properties().endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("r", response.properties().endpoints().get(0).projectId());
        Assertions.assertEquals("gqqyeqfcbuulpyuf", response.properties().endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_WRITE, response.properties().endpoints().get(0).endpointType());
    }
}
