// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.neonpostgres.NeonPostgresManager;
import com.azure.resourcemanager.neonpostgres.models.Attributes;
import com.azure.resourcemanager.neonpostgres.models.Branch;
import com.azure.resourcemanager.neonpostgres.models.BranchProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointType;
import com.azure.resourcemanager.neonpostgres.models.NeonDatabaseProperties;
import com.azure.resourcemanager.neonpostgres.models.NeonRoleProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BranchesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"entityId\":\"xvzfffhtjnwos\",\"entityName\":\"fjxtvlxxzqfc\",\"createdAt\":\"riomxeezwyhj\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"egmxdbsohc\",\"value\":\"hpyvdkgdet\"}],\"projectId\":\"wcanzbjekwuyckyv\",\"parentId\":\"nsm\",\"roleName\":\"fiwjbctvbp\",\"databaseName\":\"jqjtotd\",\"roles\":[{\"entityId\":\"cslhwuusi\",\"entityName\":\"ktybh\",\"createdAt\":\"xidhhxomil\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"d\",\"value\":\"gxwjwil\"}],\"branchId\":\"rslaatep\",\"permissions\":[\"jjzgxqgqw\",\"xr\"],\"isSuperUser\":false}],\"databases\":[{\"entityId\":\"tqqykbkkteozejog\",\"entityName\":\"orvvmvmcofnqh\",\"createdAt\":\"snosnqliwkmzojf\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"htgmknazgbj\",\"value\":\"hrp\"},{\"name\":\"iqstt\",\"value\":\"ucrcmmai\"}],\"branchId\":\"qjiwifhbksldttoh\",\"ownerName\":\"lna\"},{\"entityId\":\"tgs\",\"entityName\":\"ikvllrhtpmgl\",\"createdAt\":\"oi\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"wrqkza\",\"value\":\"bun\"}],\"branchId\":\"aklwzlwee\",\"ownerName\":\"nejzltkaszfjsxs\"},{\"entityId\":\"dux\",\"entityName\":\"grcqebmvrdj\",\"createdAt\":\"lnwsbvvdlsf\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"sdfedsbgzancoin\",\"value\":\"phymc\"},{\"name\":\"i\",\"value\":\"kltvdhqnufbx\"}],\"branchId\":\"iibntojo\",\"ownerName\":\"nybydhuihaouwud\"}],\"endpoints\":[{\"entityId\":\"rhjkehw\",\"entityName\":\"mosqircamqprlob\",\"createdAt\":\"gejcvjkjyczc\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"lajdyoljeqyxq\",\"value\":\"mzsizzhravrcjk\"},{\"name\":\"ymgqbgcx\",\"value\":\"nqxgz\"}],\"projectId\":\"er\",\"branchId\":\"merghski\",\"endpointType\":\"read_write\"},{\"entityId\":\"upkcbkfukdljqnvt\",\"entityName\":\"ydsh\",\"createdAt\":\"afyalo\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"zznyufpqzstifg\",\"value\":\"fyjfd\"}],\"projectId\":\"iyvndjokgwes\",\"branchId\":\"zqhrqpfzlpejtznx\",\"endpointType\":\"read_only\"},{\"entityId\":\"ujqbbgsimwejl\",\"entityName\":\"kbpjzobdwbcpra\",\"createdAt\":\"kuhydtnaczkfwfat\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"nskivdwgt\",\"value\":\"cumecsaaqg\"},{\"name\":\"qbdiuycsbskowkr\",\"value\":\"hzhrbkhtm\"},{\"name\":\"owiuasfgq\",\"value\":\"ucyhfaimq\"},{\"name\":\"druozk\",\"value\":\"yfpeoehgfmqmsk\"}],\"projectId\":\"xvlzjxplhpevasyn\",\"branchId\":\"zjyielbqrvv\",\"endpointType\":\"read_write\"},{\"entityId\":\"nmpecqxgiqasifub\",\"entityName\":\"nstlpwqpjn\",\"createdAt\":\"khtupsvyou\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"xfwkz\",\"value\":\"smsfbevyllznf\"},{\"name\":\"kqytkztadopgfzdg\",\"value\":\"fcycrsvlo\"},{\"name\":\"yhigqkzjuqwqaj\",\"value\":\"uzxp\"}],\"projectId\":\"hyoipnfdbgso\",\"branchId\":\"ienezf\",\"endpointType\":\"read_only\"}]},\"id\":\"n\",\"name\":\"fkbpjn\",\"type\":\"tekwwnthropm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NeonPostgresManager manager = NeonPostgresManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Branch response = manager.branches()
            .define("pajtfeyvkbd")
            .withExistingProject("pryjfzih", "io", "eo")
            .withProperties(new BranchProperties().withEntityName("xbeuuqu")
                .withAttributes(Arrays.asList(new Attributes().withName("deg").withValue("dydhqkkkb"),
                    new Attributes().withName("uckcatuqbhpow").withValue("n"),
                    new Attributes().withName("tpzdlyseidto").withValue("katprytgrhzbq"),
                    new Attributes().withName("d").withValue("fa")))
                .withProjectId("ptvcs")
                .withParentId("kutzct")
                .withRoleName("qgdirda")
                .withDatabaseName("tzjgcfjfxtbwj")
                .withRoles(Arrays.asList(
                    new NeonRoleProperties().withEntityName("uoft")
                        .withAttributes(Arrays.asList(new Attributes().withName("zenlrstgfcz").withValue("j"),
                            new Attributes().withName("n").withValue("idt"),
                            new Attributes().withName("vamyyznmrgcdo").withValue("cvucgytoxu")))
                        .withBranchId("ttnzqsaq")
                        .withPermissions(Arrays.asList("gszplus", "ekpdzzmssg", "gvo"))
                        .withIsSuperUser(true),
                    new NeonRoleProperties().withEntityName("nycwz")
                        .withAttributes(Arrays.asList(new Attributes().withName("kyjtrepw").withValue("wfkcauxuvavcpf"),
                            new Attributes().withName("dofuckclb").withValue("xlu")))
                        .withBranchId("solzwilfngo")
                        .withPermissions(Arrays.asList("qebuuxjxhfxfjwp"))
                        .withIsSuperUser(false),
                    new NeonRoleProperties().withEntityName("mxbmbrwgzzxljbkh")
                        .withAttributes(Arrays.asList(new Attributes().withName("weqjfyxydgto").withValue("vq"),
                            new Attributes().withName("vwglgwzpv").withValue("akglhpsesrfga"),
                            new Attributes().withName("qiy").withValue("vxcgdhyhgoqgs"),
                            new Attributes().withName("yqyxyjrcbqpbis").withValue("glqjoxtdahneaoov")))
                        .withBranchId("jztivfwjlofzek")
                        .withPermissions(Arrays.asList("mauk", "ajvcfoczhapej"))
                        .withIsSuperUser(true),
                    new NeonRoleProperties().withEntityName("hhnoyrzaaoee")
                        .withAttributes(
                            Arrays.asList(new Attributes().withName("oxdjxldnaryy").withValue("nzkdolrndwdbvxvz"),
                                new Attributes().withName("ledoyqxlunkft").withValue("mcxqqxmyzklao"),
                                new Attributes().withName("n").withValue("ohrvmz"),
                                new Attributes().withName("qr").withValue("zadi")))
                        .withBranchId("nllaslkskh")
                        .withPermissions(Arrays.asList("pvbaih"))
                        .withIsSuperUser(false)))
                .withDatabases(
                    Arrays
                        .asList(
                            new NeonDatabaseProperties().withEntityName("qgroigbsfsgsaen")
                                .withAttributes(Arrays
                                    .asList(new Attributes().withName("tryldsxebuhsxr").withValue("nmgsdaluyckhef")))
                                .withBranchId("hs")
                                .withOwnerName("erbgpxeb"),
                            new NeonDatabaseProperties().withEntityName("pryj")
                                .withAttributes(Arrays
                                    .asList(new Attributes().withName("vvyljurkepose").withValue("qqylmpctwjwds")))
                                .withBranchId("zmk")
                                .withOwnerName("rxxxoteehkhowgom")))
                .withEndpoints(Arrays.asList(new EndpointProperties().withEntityName("spfeylqlocvvuje")
                    .withAttributes(Arrays.asList(new Attributes().withName("avxjfiuofpiei").withValue("zlvssq"),
                        new Attributes().withName("wjopackyhydvik").withValue("fngp"),
                        new Attributes().withName("illxg").withValue("scizwgsoriobijei"),
                        new Attributes().withName("dye").withValue("ynhbokayrg")))
                    .withProjectId("b")
                    .withBranchId("opdweoft")
                    .withEndpointType(EndpointType.READ_WRITE))))
            .create();

        Assertions.assertEquals("fjxtvlxxzqfc", response.properties().entityName());
        Assertions.assertEquals("egmxdbsohc", response.properties().attributes().get(0).name());
        Assertions.assertEquals("hpyvdkgdet", response.properties().attributes().get(0).value());
        Assertions.assertEquals("wcanzbjekwuyckyv", response.properties().projectId());
        Assertions.assertEquals("nsm", response.properties().parentId());
        Assertions.assertEquals("fiwjbctvbp", response.properties().roleName());
        Assertions.assertEquals("jqjtotd", response.properties().databaseName());
        Assertions.assertEquals("ktybh", response.properties().roles().get(0).entityName());
        Assertions.assertEquals("d", response.properties().roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("gxwjwil", response.properties().roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("rslaatep", response.properties().roles().get(0).branchId());
        Assertions.assertEquals("jjzgxqgqw", response.properties().roles().get(0).permissions().get(0));
        Assertions.assertFalse(response.properties().roles().get(0).isSuperUser());
        Assertions.assertEquals("orvvmvmcofnqh", response.properties().databases().get(0).entityName());
        Assertions.assertEquals("htgmknazgbj", response.properties().databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("hrp", response.properties().databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("qjiwifhbksldttoh", response.properties().databases().get(0).branchId());
        Assertions.assertEquals("lna", response.properties().databases().get(0).ownerName());
        Assertions.assertEquals("mosqircamqprlob", response.properties().endpoints().get(0).entityName());
        Assertions.assertEquals("lajdyoljeqyxq", response.properties().endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("mzsizzhravrcjk", response.properties().endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("er", response.properties().endpoints().get(0).projectId());
        Assertions.assertEquals("merghski", response.properties().endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_WRITE, response.properties().endpoints().get(0).endpointType());
    }
}
