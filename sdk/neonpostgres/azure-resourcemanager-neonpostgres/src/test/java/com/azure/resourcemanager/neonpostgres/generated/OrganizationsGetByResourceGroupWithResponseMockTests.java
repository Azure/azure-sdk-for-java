// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.neonpostgres.NeonPostgresManager;
import com.azure.resourcemanager.neonpostgres.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.neonpostgres.models.OrganizationResource;
import com.azure.resourcemanager.neonpostgres.models.SingleSignOnStates;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"marketplaceDetails\":{\"subscriptionId\":\"dwxdndnv\",\"subscriptionStatus\":\"Unsubscribed\",\"offerDetails\":{\"publisherId\":\"ujjugwdkcglh\",\"offerId\":\"lazjdyggdtjixhbk\",\"planId\":\"ofqweykhmenevfye\",\"planName\":\"whybcib\",\"termUnit\":\"vdcsitynn\",\"termId\":\"mdectehfiqscjey\"}},\"userDetails\":{\"firstName\":\"hezrkgq\",\"lastName\":\"jrefovgmkqsle\",\"emailAddress\":\"vxyqjpkcattpngjc\",\"upn\":\"czsqpjhvm\",\"phoneNumber\":\"jvnysounqe\"},\"companyDetails\":{\"companyName\":\"noae\",\"country\":\"fhyhltrpmopjmcma\",\"officeAddress\":\"okth\",\"businessPhone\":\"iuaod\",\"domain\":\"cpkvxodp\",\"numberOfEmployees\":784151733516976899},\"provisioningState\":\"Failed\",\"partnerOrganizationProperties\":{\"organizationId\":\"agfuaxbezyiu\",\"organizationName\":\"kktwhrdxw\",\"singleSignOnProperties\":{\"singleSignOnState\":\"Enable\",\"enterpriseAppId\":\"mbsureximo\",\"singleSignOnUrl\":\"ocfs\",\"aadDomains\":[\"ymddys\"]}}},\"location\":\"i\",\"tags\":{\"vyifqrvkdvjsl\":\"hqyudxorrqnbpoc\",\"vdfwatkpn\":\"rm\",\"wiqzbqjvsovmyo\":\"ulexxbczwtr\",\"zdobpxjmflbvvnch\":\"acspkwl\"},\"id\":\"kcciwwzjuqkhr\",\"name\":\"ajiwkuo\",\"type\":\"oskg\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NeonPostgresManager manager = NeonPostgresManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        OrganizationResource response = manager.organizations()
            .getByResourceGroupWithResponse("avo", "xzdmohctb", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("i", response.location());
        Assertions.assertEquals("hqyudxorrqnbpoc", response.tags().get("vyifqrvkdvjsl"));
        Assertions.assertEquals("dwxdndnv", response.properties().marketplaceDetails().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.UNSUBSCRIBED,
            response.properties().marketplaceDetails().subscriptionStatus());
        Assertions.assertEquals("ujjugwdkcglh",
            response.properties().marketplaceDetails().offerDetails().publisherId());
        Assertions.assertEquals("lazjdyggdtjixhbk",
            response.properties().marketplaceDetails().offerDetails().offerId());
        Assertions.assertEquals("ofqweykhmenevfye", response.properties().marketplaceDetails().offerDetails().planId());
        Assertions.assertEquals("whybcib", response.properties().marketplaceDetails().offerDetails().planName());
        Assertions.assertEquals("vdcsitynn", response.properties().marketplaceDetails().offerDetails().termUnit());
        Assertions.assertEquals("mdectehfiqscjey", response.properties().marketplaceDetails().offerDetails().termId());
        Assertions.assertEquals("hezrkgq", response.properties().userDetails().firstName());
        Assertions.assertEquals("jrefovgmkqsle", response.properties().userDetails().lastName());
        Assertions.assertEquals("vxyqjpkcattpngjc", response.properties().userDetails().emailAddress());
        Assertions.assertEquals("czsqpjhvm", response.properties().userDetails().upn());
        Assertions.assertEquals("jvnysounqe", response.properties().userDetails().phoneNumber());
        Assertions.assertEquals("noae", response.properties().companyDetails().companyName());
        Assertions.assertEquals("fhyhltrpmopjmcma", response.properties().companyDetails().country());
        Assertions.assertEquals("okth", response.properties().companyDetails().officeAddress());
        Assertions.assertEquals("iuaod", response.properties().companyDetails().businessPhone());
        Assertions.assertEquals("cpkvxodp", response.properties().companyDetails().domain());
        Assertions.assertEquals(784151733516976899L, response.properties().companyDetails().numberOfEmployees());
        Assertions.assertEquals("agfuaxbezyiu", response.properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("kktwhrdxw", response.properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals(SingleSignOnStates.ENABLE,
            response.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("mbsureximo",
            response.properties().partnerOrganizationProperties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("ocfs",
            response.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("ymddys",
            response.properties().partnerOrganizationProperties().singleSignOnProperties().aadDomains().get(0));
    }
}
