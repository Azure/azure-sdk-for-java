// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.neonpostgres.NeonPostgresManager;
import com.azure.resourcemanager.neonpostgres.models.Attributes;
import com.azure.resourcemanager.neonpostgres.models.AutoscalingSize;
import com.azure.resourcemanager.neonpostgres.models.BranchProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointType;
import com.azure.resourcemanager.neonpostgres.models.EntityType;
import com.azure.resourcemanager.neonpostgres.models.NeonDatabaseProperties;
import com.azure.resourcemanager.neonpostgres.models.NeonRoleProperties;
import com.azure.resourcemanager.neonpostgres.models.PreflightCheckParameters;
import com.azure.resourcemanager.neonpostgres.models.PreflightCheckResult;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BranchesPreflightWithResponseMockTests {
    @Test
    public void testPreflightWithResponse() throws Exception {
        String responseStr = "{\"isValid\":false,\"reason\":\"hinaegesbxnepq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NeonPostgresManager manager = NeonPostgresManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PreflightCheckResult response
            = manager.branches()
                .preflightWithResponse("wc", "frxgg", "zkhzpriqi", "senerr",
                    new PreflightCheckParameters().withProjectId("syzaivnp")
                        .withBranchId("jnp")
                        .withEntityType(EntityType.NEON_DATABASE)
                        .withBranchProperties(
                            new BranchProperties().withEntityName("vvm")
                                .withAttributes(Arrays.asList(new Attributes().withName("ilx").withValue("kdyqjvz"),
                                    new Attributes().withName("cgrd").withValue("pzesfkqqx"),
                                    new Attributes().withName("hvzf").withValue("brouszxac"),
                                    new Attributes().withName("wukokgoojj").withValue("uktubcmunhgbtzv")))
                                .withProjectId("vsbcuu")
                                .withParentId("rfnkcnih")
                                .withRoleName("wxmfur")
                                .withDatabaseName("wmwwpntumota")
                                .withRoles(Arrays.asList(
                                    new NeonRoleProperties().withEntityName("lhxgcqm")
                                        .withAttributes(Arrays.asList(
                                            new Attributes().withName("qyftgpqoswgfqvjm").withValue("hpak"),
                                            new Attributes().withName("qyhls").withValue("rnfbmeqagkn"),
                                            new Attributes().withName("jm").withValue("bnyevztnjawrhule"),
                                            new Attributes().withName("mqmbwpp").withValue("irxbkitzmnhit")))
                                        .withBranchId("jucltjlxsg")
                                        .withPermissions(Arrays.asList("egdzdvylju", "vfjyzufldif"))
                                        .withIsSuperUser(true)
                                        .withRoleName("utggmaacxauhvc"),
                                    new NeonRoleProperties().withEntityName("sowbeb")
                                        .withAttributes(Arrays.asList(new Attributes().withName("wm").withValue("u"),
                                            new Attributes().withName("ustihtgrafjajvky").withValue("mmjczvog")))
                                        .withBranchId("erjen")
                                        .withPermissions(
                                            Arrays.asList("vaeuwqdwxhh", "bmyphfxnrpdhewo", "yqsfkxfsywbihq", "todjf"))
                                        .withIsSuperUser(true)
                                        .withRoleName("kvwzdmvddqwc")))
                                .withDatabases(
                                    Arrays.asList(
                                        new NeonDatabaseProperties().withEntityName("qhxtozfgdkwbkur")
                                            .withAttributes(Arrays.asList(
                                                new Attributes().withName("tuipjclzjwaqdzq").withValue("dewuwxyl")))
                                            .withBranchId("zzevtzqwczochwb")
                                            .withOwnerName("muynfpkyvnh")
                                            .withDatabaseName("s"),
                                        new NeonDatabaseProperties().withEntityName("oguflteat")
                                            .withAttributes(Arrays.asList(
                                                new Attributes().withName("bgysibthnvxw").withValue("dqtcbjdbtqyhkx"),
                                                new Attributes().withName("ns").withValue("ujqgbbjvo")))
                                            .withBranchId("a")
                                            .withOwnerName("gjsmbc")
                                            .withDatabaseName("oygsabdgdheronsd")))
                                .withEndpoints(
                                    Arrays
                                        .asList(
                                            new EndpointProperties().withEntityName("qs")
                                                .withAttributes(
                                                    Arrays.asList(new Attributes().withName("wrmu").withValue("k"),
                                                        new Attributes().withName("jwbyfdwfbw")
                                                            .withValue("yldqtmggcpd")))
                                                .withProjectId("egajrzctwymzsk")
                                                .withBranchId("kkgeseiphgliupq")
                                                .withEndpointType(EndpointType.READ_ONLY)
                                                .withEndpointId("bkjlcaxsqcomji")
                                                .withComputeName("incev")
                                                .withSize(new AutoscalingSize()
                                                    .withAutoscalingLimitMinCu(97.32288416256765)
                                                    .withAutoscalingLimitMaxCu(67.87686906542947)),
                                            new EndpointProperties().withEntityName("ml")
                                                .withAttributes(
                                                    Arrays.asList(new Attributes().withName("vrj").withValue("znotd")))
                                                .withProjectId("qvpbq")
                                                .withBranchId("qkpsbqsb")
                                                .withEndpointType(EndpointType.READ_WRITE)
                                                .withEndpointId("aftazgcxsvqlcq")
                                                .withComputeName("ylamxow")
                                                .withSize(
                                                    new AutoscalingSize().withAutoscalingLimitMinCu(84.13223239292772)
                                                        .withAutoscalingLimitMaxCu(67.45737920956097))))
                                .withBranchId("uksxiknsgofun")
                                .withBranch("hpcekggvmfnnb"))
                        .withRoleProperties(
                            new NeonRoleProperties().withEntityName("mm")
                                .withAttributes(Arrays.asList(
                                    new Attributes().withName("iiwsuanzhwsyuif").withValue("zqqhbtfloilmkfb"),
                                    new Attributes().withName("oiipjpn").withValue("vyvuoikdlpsx"),
                                    new Attributes().withName("tug").withValue("wimqnryclocfm"),
                                    new Attributes().withName("swxvjelei").withValue("qhdxtwwulkryb")))
                                .withBranchId("evy")
                                .withPermissions(
                                    Arrays.asList("jec", "qkwakkchsfoulb", "rcxuibsdqbdyblp", "ctsmwpgweoqhbjq"))
                                .withIsSuperUser(true)
                                .withRoleName("lerufollcshju"))
                        .withDatabaseProperties(new NeonDatabaseProperties().withEntityName("osizk")
                            .withAttributes(Arrays.asList(new Attributes().withName("hcw").withValue("gwahcrxo"),
                                new Attributes().withName("g").withValue("u")))
                            .withBranchId("npccxzivxpmh")
                            .withOwnerName("hh")
                            .withDatabaseName("vnnjd"))
                        .withEndpointProperties(new EndpointProperties().withEntityName("mzs")
                            .withAttributes(Arrays.asList(new Attributes().withName("x").withValue("fjswequflzyyopoa"),
                                new Attributes().withName("twwgwqubot").withValue("vufrk"),
                                new Attributes().withName("jiemimdtnpo").withValue("ewjskreeedddrftf")))
                            .withProjectId("ulpclhsiige")
                            .withBranchId("wbrnqyxfedqnetdq")
                            .withEndpointType(EndpointType.READ_ONLY)
                            .withEndpointId("oqgvbzpggp")
                            .withComputeName("eyobqaj")
                            .withSize(new AutoscalingSize().withAutoscalingLimitMinCu(27.935173116438172)
                                .withAutoscalingLimitMaxCu(56.89433164481699))),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertFalse(response.isValid());
        Assertions.assertEquals("hinaegesbxnepq", response.reason());
    }
}
