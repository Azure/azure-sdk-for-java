// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.neonpostgres.fluent.models.NeonDatabaseInner;
import com.azure.resourcemanager.neonpostgres.models.Attributes;
import com.azure.resourcemanager.neonpostgres.models.NeonDatabaseProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NeonDatabaseInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NeonDatabaseInner model = BinaryData.fromString(
            "{\"properties\":{\"entityId\":\"queqihk\",\"entityName\":\"owl\",\"createdAt\":\"ouwhldxwhie\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"smfx\",\"value\":\"cvprst\"},{\"name\":\"kitbfjtd\",\"value\":\"otnplfacqocc\"}],\"branchId\":\"qxwetjtd\",\"ownerName\":\"u\",\"databaseName\":\"doad\",\"lastUpdated\":\"op\"},\"id\":\"hpadkmdzg\",\"name\":\"szxvctkbbxuhar\",\"type\":\"sirncclabvoy\"}")
            .toObject(NeonDatabaseInner.class);
        Assertions.assertEquals("owl", model.properties().entityName());
        Assertions.assertEquals("smfx", model.properties().attributes().get(0).name());
        Assertions.assertEquals("cvprst", model.properties().attributes().get(0).value());
        Assertions.assertEquals("qxwetjtd", model.properties().branchId());
        Assertions.assertEquals("u", model.properties().ownerName());
        Assertions.assertEquals("doad", model.properties().databaseName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NeonDatabaseInner model
            = new NeonDatabaseInner().withProperties(new NeonDatabaseProperties().withEntityName("owl")
                .withAttributes(Arrays.asList(new Attributes().withName("smfx").withValue("cvprst"),
                    new Attributes().withName("kitbfjtd").withValue("otnplfacqocc")))
                .withBranchId("qxwetjtd")
                .withOwnerName("u")
                .withDatabaseName("doad"));
        model = BinaryData.fromObject(model).toObject(NeonDatabaseInner.class);
        Assertions.assertEquals("owl", model.properties().entityName());
        Assertions.assertEquals("smfx", model.properties().attributes().get(0).name());
        Assertions.assertEquals("cvprst", model.properties().attributes().get(0).value());
        Assertions.assertEquals("qxwetjtd", model.properties().branchId());
        Assertions.assertEquals("u", model.properties().ownerName());
        Assertions.assertEquals("doad", model.properties().databaseName());
    }
}
