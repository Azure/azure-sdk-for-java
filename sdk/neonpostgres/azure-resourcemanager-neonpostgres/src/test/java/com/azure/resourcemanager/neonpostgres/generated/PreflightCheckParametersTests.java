// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.neonpostgres.models.Attributes;
import com.azure.resourcemanager.neonpostgres.models.AutoscalingSize;
import com.azure.resourcemanager.neonpostgres.models.BranchProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointType;
import com.azure.resourcemanager.neonpostgres.models.EntityType;
import com.azure.resourcemanager.neonpostgres.models.NeonDatabaseProperties;
import com.azure.resourcemanager.neonpostgres.models.NeonRoleProperties;
import com.azure.resourcemanager.neonpostgres.models.PreflightCheckParameters;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PreflightCheckParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PreflightCheckParameters model = BinaryData.fromString(
            "{\"projectId\":\"indedvabbx\",\"branchId\":\"hmedeilbjywfcfxz\",\"entityType\":\"neonDatabase\",\"branchProperties\":{\"entityId\":\"ihvwyp\",\"entityName\":\"u\",\"createdAt\":\"slczwciidjsllf\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"vxadqacfrgnawbab\",\"value\":\"fbktyjmfczlf\"},{\"name\":\"yq\",\"value\":\"frbzgowo\"}],\"projectId\":\"mj\",\"parentId\":\"jcx\",\"roleName\":\"qg\",\"databaseName\":\"lusrv\",\"roles\":[{\"entityId\":\"mjceagbjqvls\",\"entityName\":\"ywzash\",\"createdAt\":\"onoyjf\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"yznclkfkee\",\"value\":\"gv\"}],\"branchId\":\"e\",\"permissions\":[\"oqujlyegqavn\",\"gflqqbtnyjp\",\"lxdbfvabmvms\"],\"isSuperUser\":true,\"roleName\":\"vwjcnkottlwuh\",\"lastUpdated\":\"jmailfemjjzakzw\",\"owns\":\"qullqxbdmvrscm\"},{\"entityId\":\"rndb\",\"entityName\":\"yeofltfnnxrkad\",\"createdAt\":\"ynnfmuiii\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"hykfkxbb\",\"value\":\"brwjiutgnjizb\"},{\"name\":\"ewoi\",\"value\":\"mrvz\"},{\"name\":\"juyrsrziuctixg\",\"value\":\"d\"},{\"name\":\"uifr\",\"value\":\"vka\"}],\"branchId\":\"ezkiswqjmdghsypa\",\"permissions\":[\"jufptbjczjnciuiy\",\"vldaswv\",\"pisqqzlgcndhzx\",\"rfc\"],\"isSuperUser\":false,\"roleName\":\"khgsnxuwwkpphefs\",\"lastUpdated\":\"xlb\",\"owns\":\"omeikjcl\"},{\"entityId\":\"acnmwpfsuqtaaz\",\"entityName\":\"bxyxoy\",\"createdAt\":\"uqqiqezxlhd\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"a\",\"value\":\"wvpsoz\"},{\"name\":\"iihjriybmrzo\",\"value\":\"pnx\"},{\"name\":\"dvwnjkgvfnmxa\",\"value\":\"rsqftib\"}],\"branchId\":\"ibuyvpirf\",\"permissions\":[\"n\"],\"isSuperUser\":false,\"roleName\":\"w\",\"lastUpdated\":\"edenrexkxbhxv\",\"owns\":\"nul\"},{\"entityId\":\"nhj\",\"entityName\":\"dyznfajsvks\",\"createdAt\":\"qozzkivyhjrliizj\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"hefkwabsolronqq\",\"value\":\"mgnlqxsjxtel\"},{\"name\":\"xhvuqbozool\",\"value\":\"qocarkuzlbc\"}],\"branchId\":\"dtsnxawqytllhdyz\",\"permissions\":[\"kzexnx\"],\"isSuperUser\":true,\"roleName\":\"ywymxgaabj\",\"lastUpdated\":\"tfohf\",\"owns\":\"gzvkiwrsiwdyj\"}],\"databases\":[{\"entityId\":\"kcrr\",\"entityName\":\"eek\",\"createdAt\":\"uehogdd\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"gydlqidywm\",\"value\":\"mptyrilkfbnrqqxv\"},{\"name\":\"tpbnfnqtxjtoma\",\"value\":\"swbnfddepldwqjns\"},{\"name\":\"zygleexahvm\",\"value\":\"whsbrcary\"}],\"branchId\":\"jjzyvoaqajuve\",\"ownerName\":\"ptdmkrrbhmpful\",\"databaseName\":\"efgybpmfbfununmp\",\"lastUpdated\":\"rvfyifkdsch\"},{\"entityId\":\"vfictnkjjwgcwn\",\"entityName\":\"bkgfyrtogmhmjpjs\",\"createdAt\":\"fp\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"gevgwmse\",\"value\":\"arxifvqnrxt\"},{\"name\":\"bpjptnvwjhrsi\",\"value\":\"qpxlb\"},{\"name\":\"pakftngatwm\",\"value\":\"kyutrymdwmfjhpyc\"},{\"name\":\"jqdvdwkqpldrlefg\",\"value\":\"aavuagntetaout\"}],\"branchId\":\"dc\",\"ownerName\":\"hspfefyihd\",\"databaseName\":\"euyldphmt\",\"lastUpdated\":\"kcgsuthhl\"},{\"entityId\":\"mwynefxexlfciatx\",\"entityName\":\"rrlkmdskjhhx\",\"createdAt\":\"ajfoxc\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"lxlhuavkrm\",\"value\":\"kmyjmkxett\"},{\"name\":\"slojfkqidnqt\",\"value\":\"qxjhqxcsqhtkbtnq\"}],\"branchId\":\"ngldmbiipsn\",\"ownerName\":\"wl\",\"databaseName\":\"znxhhllxr\",\"lastUpdated\":\"ctkwmuqqoajxeiyg\"},{\"entityId\":\"srwvaexhdctrce\",\"entityName\":\"kbrup\",\"createdAt\":\"ehdmljzacvumep\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"nzpphepife\",\"value\":\"leqirccjclykcgxv\"}],\"branchId\":\"jlvczu\",\"ownerName\":\"ac\",\"databaseName\":\"nettepdjxqeskoy\",\"lastUpdated\":\"iylpck\"}],\"endpoints\":[{\"entityId\":\"edveskwxegqp\",\"entityName\":\"gfnzh\",\"createdAt\":\"mjtsgh\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"pzarpzeqacdld\",\"value\":\"zmpypefcpczshnu\"}],\"projectId\":\"daizupf\",\"branchId\":\"uytuszxhmtvtv\",\"endpointType\":\"read_only\",\"endpointId\":\"iukvzwydwt\",\"computeName\":\"aokgkskjivbsshaj\",\"status\":\"init\",\"lastActive\":\"peexpgeumilhwuit\",\"size\":{\"autoscalingLimitMinCu\":80.74880421970249,\"autoscalingLimitMaxCu\":23.61862836490438}},{\"entityId\":\"nofnin\",\"entityName\":\"bzsx\",\"createdAt\":\"qqrsmpcbbprtugav\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"ks\",\"value\":\"vm\"},{\"name\":\"ogd\",\"value\":\"tbfcm\"},{\"name\":\"rftsjcwjjxs\",\"value\":\"mb\"},{\"name\":\"wvif\",\"value\":\"xkecifhocj\"}],\"projectId\":\"kl\",\"branchId\":\"zrvtx\",\"endpointType\":\"read_only\",\"endpointId\":\"funlcpxxvi\",\"computeName\":\"eyngjg\",\"status\":\"active\",\"lastActive\":\"vpygglp\",\"size\":{\"autoscalingLimitMinCu\":69.94387935790444,\"autoscalingLimitMaxCu\":79.38092343663334}}],\"branchId\":\"ljtiahxmfqryarv\",\"branch\":\"zqbglcjkays\",\"dataSize\":\"hz\",\"lastActive\":\"ubtlmjtg\",\"computeHours\":\"ioskkfmkmfdjxyxg\",\"protected\":true,\"isDefault\":true},\"roleProperties\":{\"entityId\":\"teoedl\",\"entityName\":\"lskkzpxvj\",\"createdAt\":\"dpvocojhpcn\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"snggytexvzilmhiv\",\"value\":\"kwwwnckn\"},{\"name\":\"zdajlskzptjxu\",\"value\":\"weucyrth\"},{\"name\":\"qlehmcgcjeinu\",\"value\":\"hokamvfej\"},{\"name\":\"qnttmbq\",\"value\":\"abzfivf\"}],\"branchId\":\"pysthhz\",\"permissions\":[\"fwy\",\"rlhgenuze\",\"gvkvebaqszll\",\"zlsmmdqgmihzpim\"],\"isSuperUser\":false,\"roleName\":\"nxtminklog\",\"lastUpdated\":\"vtza\",\"owns\":\"zvqnsqktcmbjwzzo\"},\"databaseProperties\":{\"entityId\":\"kybtglwkzpgajsqj\",\"entityName\":\"mqbmfuvqarwz\",\"createdAt\":\"qreblui\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"sfgtdmbvxekra\",\"value\":\"k\"},{\"name\":\"kbudbtwaokb\",\"value\":\"vlyttaaknwfrke\"},{\"name\":\"sm\",\"value\":\"p\"},{\"name\":\"ujd\",\"value\":\"gatolekscbctnan\"}],\"branchId\":\"mwbzxpdc\",\"ownerName\":\"pkawnsnlaim\",\"databaseName\":\"xwksq\",\"lastUpdated\":\"dmfcoibicziusws\"},\"endpointProperties\":{\"entityId\":\"kbqsjhbtqqvyfscy\",\"entityName\":\"wbivqvogfuyzwvbh\",\"createdAt\":\"mb\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"ood\",\"value\":\"ikcdrdaasax\"}],\"projectId\":\"bsmfkwiyjvz\",\"branchId\":\"osrnawnvzmlnkoy\",\"endpointType\":\"read_only\",\"endpointId\":\"jabjqqa\",\"computeName\":\"yvymcnudndo\",\"status\":\"init\",\"lastActive\":\"xwxq\",\"size\":{\"autoscalingLimitMinCu\":48.43407094747189,\"autoscalingLimitMaxCu\":36.425614471532555}}}")
            .toObject(PreflightCheckParameters.class);
        Assertions.assertEquals("indedvabbx", model.projectId());
        Assertions.assertEquals("hmedeilbjywfcfxz", model.branchId());
        Assertions.assertEquals(EntityType.NEON_DATABASE, model.entityType());
        Assertions.assertEquals("u", model.branchProperties().entityName());
        Assertions.assertEquals("vxadqacfrgnawbab", model.branchProperties().attributes().get(0).name());
        Assertions.assertEquals("fbktyjmfczlf", model.branchProperties().attributes().get(0).value());
        Assertions.assertEquals("mj", model.branchProperties().projectId());
        Assertions.assertEquals("jcx", model.branchProperties().parentId());
        Assertions.assertEquals("qg", model.branchProperties().roleName());
        Assertions.assertEquals("lusrv", model.branchProperties().databaseName());
        Assertions.assertEquals("ywzash", model.branchProperties().roles().get(0).entityName());
        Assertions.assertEquals("yznclkfkee", model.branchProperties().roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("gv", model.branchProperties().roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("e", model.branchProperties().roles().get(0).branchId());
        Assertions.assertEquals("oqujlyegqavn", model.branchProperties().roles().get(0).permissions().get(0));
        Assertions.assertTrue(model.branchProperties().roles().get(0).isSuperUser());
        Assertions.assertEquals("vwjcnkottlwuh", model.branchProperties().roles().get(0).roleName());
        Assertions.assertEquals("eek", model.branchProperties().databases().get(0).entityName());
        Assertions.assertEquals("gydlqidywm", model.branchProperties().databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("mptyrilkfbnrqqxv",
            model.branchProperties().databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("jjzyvoaqajuve", model.branchProperties().databases().get(0).branchId());
        Assertions.assertEquals("ptdmkrrbhmpful", model.branchProperties().databases().get(0).ownerName());
        Assertions.assertEquals("efgybpmfbfununmp", model.branchProperties().databases().get(0).databaseName());
        Assertions.assertEquals("gfnzh", model.branchProperties().endpoints().get(0).entityName());
        Assertions.assertEquals("pzarpzeqacdld",
            model.branchProperties().endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("zmpypefcpczshnu",
            model.branchProperties().endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("daizupf", model.branchProperties().endpoints().get(0).projectId());
        Assertions.assertEquals("uytuszxhmtvtv", model.branchProperties().endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_ONLY, model.branchProperties().endpoints().get(0).endpointType());
        Assertions.assertEquals("iukvzwydwt", model.branchProperties().endpoints().get(0).endpointId());
        Assertions.assertEquals("aokgkskjivbsshaj", model.branchProperties().endpoints().get(0).computeName());
        Assertions.assertEquals(80.74880421970249,
            model.branchProperties().endpoints().get(0).size().autoscalingLimitMinCu());
        Assertions.assertEquals(23.61862836490438,
            model.branchProperties().endpoints().get(0).size().autoscalingLimitMaxCu());
        Assertions.assertEquals("ljtiahxmfqryarv", model.branchProperties().branchId());
        Assertions.assertEquals("zqbglcjkays", model.branchProperties().branch());
        Assertions.assertEquals("lskkzpxvj", model.roleProperties().entityName());
        Assertions.assertEquals("snggytexvzilmhiv", model.roleProperties().attributes().get(0).name());
        Assertions.assertEquals("kwwwnckn", model.roleProperties().attributes().get(0).value());
        Assertions.assertEquals("pysthhz", model.roleProperties().branchId());
        Assertions.assertEquals("fwy", model.roleProperties().permissions().get(0));
        Assertions.assertFalse(model.roleProperties().isSuperUser());
        Assertions.assertEquals("nxtminklog", model.roleProperties().roleName());
        Assertions.assertEquals("mqbmfuvqarwz", model.databaseProperties().entityName());
        Assertions.assertEquals("sfgtdmbvxekra", model.databaseProperties().attributes().get(0).name());
        Assertions.assertEquals("k", model.databaseProperties().attributes().get(0).value());
        Assertions.assertEquals("mwbzxpdc", model.databaseProperties().branchId());
        Assertions.assertEquals("pkawnsnlaim", model.databaseProperties().ownerName());
        Assertions.assertEquals("xwksq", model.databaseProperties().databaseName());
        Assertions.assertEquals("wbivqvogfuyzwvbh", model.endpointProperties().entityName());
        Assertions.assertEquals("ood", model.endpointProperties().attributes().get(0).name());
        Assertions.assertEquals("ikcdrdaasax", model.endpointProperties().attributes().get(0).value());
        Assertions.assertEquals("bsmfkwiyjvz", model.endpointProperties().projectId());
        Assertions.assertEquals("osrnawnvzmlnkoy", model.endpointProperties().branchId());
        Assertions.assertEquals(EndpointType.READ_ONLY, model.endpointProperties().endpointType());
        Assertions.assertEquals("jabjqqa", model.endpointProperties().endpointId());
        Assertions.assertEquals("yvymcnudndo", model.endpointProperties().computeName());
        Assertions.assertEquals(48.43407094747189, model.endpointProperties().size().autoscalingLimitMinCu());
        Assertions.assertEquals(36.425614471532555, model.endpointProperties().size().autoscalingLimitMaxCu());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PreflightCheckParameters model = new PreflightCheckParameters().withProjectId("indedvabbx")
            .withBranchId("hmedeilbjywfcfxz")
            .withEntityType(EntityType.NEON_DATABASE)
            .withBranchProperties(new BranchProperties().withEntityName("u")
                .withAttributes(Arrays.asList(new Attributes().withName("vxadqacfrgnawbab").withValue("fbktyjmfczlf"),
                    new Attributes().withName("yq").withValue("frbzgowo")))
                .withProjectId("mj")
                .withParentId("jcx")
                .withRoleName("qg")
                .withDatabaseName("lusrv")
                .withRoles(Arrays.asList(
                    new NeonRoleProperties().withEntityName("ywzash")
                        .withAttributes(Arrays.asList(new Attributes().withName("yznclkfkee").withValue("gv")))
                        .withBranchId("e")
                        .withPermissions(Arrays.asList("oqujlyegqavn", "gflqqbtnyjp", "lxdbfvabmvms"))
                        .withIsSuperUser(true)
                        .withRoleName("vwjcnkottlwuh"),
                    new NeonRoleProperties().withEntityName("yeofltfnnxrkad")
                        .withAttributes(Arrays.asList(new Attributes().withName("hykfkxbb").withValue("brwjiutgnjizb"),
                            new Attributes().withName("ewoi").withValue("mrvz"),
                            new Attributes().withName("juyrsrziuctixg").withValue("d"),
                            new Attributes().withName("uifr").withValue("vka")))
                        .withBranchId("ezkiswqjmdghsypa")
                        .withPermissions(Arrays.asList("jufptbjczjnciuiy", "vldaswv", "pisqqzlgcndhzx", "rfc"))
                        .withIsSuperUser(false)
                        .withRoleName("khgsnxuwwkpphefs"),
                    new NeonRoleProperties().withEntityName("bxyxoy")
                        .withAttributes(Arrays.asList(new Attributes().withName("a").withValue("wvpsoz"),
                            new Attributes().withName("iihjriybmrzo").withValue("pnx"),
                            new Attributes().withName("dvwnjkgvfnmxa").withValue("rsqftib")))
                        .withBranchId("ibuyvpirf")
                        .withPermissions(Arrays.asList("n"))
                        .withIsSuperUser(false)
                        .withRoleName("w"),
                    new NeonRoleProperties().withEntityName("dyznfajsvks")
                        .withAttributes(
                            Arrays.asList(new Attributes().withName("hefkwabsolronqq").withValue("mgnlqxsjxtel"),
                                new Attributes().withName("xhvuqbozool").withValue("qocarkuzlbc")))
                        .withBranchId("dtsnxawqytllhdyz")
                        .withPermissions(Arrays.asList("kzexnx"))
                        .withIsSuperUser(true)
                        .withRoleName("ywymxgaabj")))
                .withDatabases(
                    Arrays.asList(
                        new NeonDatabaseProperties().withEntityName("eek")
                            .withAttributes(Arrays.asList(
                                new Attributes().withName("gydlqidywm").withValue("mptyrilkfbnrqqxv"),
                                new Attributes().withName("tpbnfnqtxjtoma").withValue("swbnfddepldwqjns"),
                                new Attributes().withName("zygleexahvm").withValue("whsbrcary")))
                            .withBranchId("jjzyvoaqajuve")
                            .withOwnerName("ptdmkrrbhmpful")
                            .withDatabaseName("efgybpmfbfununmp"),
                        new NeonDatabaseProperties().withEntityName("bkgfyrtogmhmjpjs")
                            .withAttributes(
                                Arrays.asList(new Attributes().withName("gevgwmse").withValue("arxifvqnrxt"),
                                    new Attributes().withName("bpjptnvwjhrsi").withValue("qpxlb"),
                                    new Attributes().withName("pakftngatwm").withValue("kyutrymdwmfjhpyc"),
                                    new Attributes().withName("jqdvdwkqpldrlefg").withValue("aavuagntetaout")))
                            .withBranchId("dc")
                            .withOwnerName("hspfefyihd")
                            .withDatabaseName("euyldphmt"),
                        new NeonDatabaseProperties().withEntityName("rrlkmdskjhhx")
                            .withAttributes(
                                Arrays.asList(new Attributes().withName("lxlhuavkrm").withValue("kmyjmkxett"),
                                    new Attributes().withName("slojfkqidnqt").withValue("qxjhqxcsqhtkbtnq")))
                            .withBranchId("ngldmbiipsn")
                            .withOwnerName("wl")
                            .withDatabaseName("znxhhllxr"),
                        new NeonDatabaseProperties().withEntityName("kbrup")
                            .withAttributes(
                                Arrays.asList(new Attributes().withName("nzpphepife").withValue("leqirccjclykcgxv")))
                            .withBranchId("jlvczu")
                            .withOwnerName("ac")
                            .withDatabaseName("nettepdjxqeskoy")))
                .withEndpoints(
                    Arrays
                        .asList(
                            new EndpointProperties().withEntityName("gfnzh")
                                .withAttributes(Arrays
                                    .asList(new Attributes().withName("pzarpzeqacdld").withValue("zmpypefcpczshnu")))
                                .withProjectId("daizupf")
                                .withBranchId("uytuszxhmtvtv")
                                .withEndpointType(EndpointType.READ_ONLY)
                                .withEndpointId("iukvzwydwt")
                                .withComputeName("aokgkskjivbsshaj")
                                .withSize(new AutoscalingSize().withAutoscalingLimitMinCu(80.74880421970249)
                                    .withAutoscalingLimitMaxCu(23.61862836490438)),
                            new EndpointProperties().withEntityName("bzsx")
                                .withAttributes(Arrays.asList(new Attributes().withName("ks").withValue("vm"),
                                    new Attributes().withName("ogd").withValue("tbfcm"),
                                    new Attributes().withName("rftsjcwjjxs").withValue("mb"),
                                    new Attributes().withName("wvif").withValue("xkecifhocj")))
                                .withProjectId("kl")
                                .withBranchId("zrvtx")
                                .withEndpointType(EndpointType.READ_ONLY)
                                .withEndpointId("funlcpxxvi")
                                .withComputeName("eyngjg")
                                .withSize(new AutoscalingSize().withAutoscalingLimitMinCu(69.94387935790444)
                                    .withAutoscalingLimitMaxCu(79.38092343663334))))
                .withBranchId("ljtiahxmfqryarv")
                .withBranch("zqbglcjkays"))
            .withRoleProperties(new NeonRoleProperties().withEntityName("lskkzpxvj")
                .withAttributes(Arrays.asList(new Attributes().withName("snggytexvzilmhiv").withValue("kwwwnckn"),
                    new Attributes().withName("zdajlskzptjxu").withValue("weucyrth"),
                    new Attributes().withName("qlehmcgcjeinu").withValue("hokamvfej"),
                    new Attributes().withName("qnttmbq").withValue("abzfivf")))
                .withBranchId("pysthhz")
                .withPermissions(Arrays.asList("fwy", "rlhgenuze", "gvkvebaqszll", "zlsmmdqgmihzpim"))
                .withIsSuperUser(false)
                .withRoleName("nxtminklog"))
            .withDatabaseProperties(new NeonDatabaseProperties().withEntityName("mqbmfuvqarwz")
                .withAttributes(Arrays.asList(new Attributes().withName("sfgtdmbvxekra").withValue("k"),
                    new Attributes().withName("kbudbtwaokb").withValue("vlyttaaknwfrke"),
                    new Attributes().withName("sm").withValue("p"),
                    new Attributes().withName("ujd").withValue("gatolekscbctnan")))
                .withBranchId("mwbzxpdc")
                .withOwnerName("pkawnsnlaim")
                .withDatabaseName("xwksq"))
            .withEndpointProperties(new EndpointProperties().withEntityName("wbivqvogfuyzwvbh")
                .withAttributes(Arrays.asList(new Attributes().withName("ood").withValue("ikcdrdaasax")))
                .withProjectId("bsmfkwiyjvz")
                .withBranchId("osrnawnvzmlnkoy")
                .withEndpointType(EndpointType.READ_ONLY)
                .withEndpointId("jabjqqa")
                .withComputeName("yvymcnudndo")
                .withSize(new AutoscalingSize().withAutoscalingLimitMinCu(48.43407094747189)
                    .withAutoscalingLimitMaxCu(36.425614471532555)));
        model = BinaryData.fromObject(model).toObject(PreflightCheckParameters.class);
        Assertions.assertEquals("indedvabbx", model.projectId());
        Assertions.assertEquals("hmedeilbjywfcfxz", model.branchId());
        Assertions.assertEquals(EntityType.NEON_DATABASE, model.entityType());
        Assertions.assertEquals("u", model.branchProperties().entityName());
        Assertions.assertEquals("vxadqacfrgnawbab", model.branchProperties().attributes().get(0).name());
        Assertions.assertEquals("fbktyjmfczlf", model.branchProperties().attributes().get(0).value());
        Assertions.assertEquals("mj", model.branchProperties().projectId());
        Assertions.assertEquals("jcx", model.branchProperties().parentId());
        Assertions.assertEquals("qg", model.branchProperties().roleName());
        Assertions.assertEquals("lusrv", model.branchProperties().databaseName());
        Assertions.assertEquals("ywzash", model.branchProperties().roles().get(0).entityName());
        Assertions.assertEquals("yznclkfkee", model.branchProperties().roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("gv", model.branchProperties().roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("e", model.branchProperties().roles().get(0).branchId());
        Assertions.assertEquals("oqujlyegqavn", model.branchProperties().roles().get(0).permissions().get(0));
        Assertions.assertTrue(model.branchProperties().roles().get(0).isSuperUser());
        Assertions.assertEquals("vwjcnkottlwuh", model.branchProperties().roles().get(0).roleName());
        Assertions.assertEquals("eek", model.branchProperties().databases().get(0).entityName());
        Assertions.assertEquals("gydlqidywm", model.branchProperties().databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("mptyrilkfbnrqqxv",
            model.branchProperties().databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("jjzyvoaqajuve", model.branchProperties().databases().get(0).branchId());
        Assertions.assertEquals("ptdmkrrbhmpful", model.branchProperties().databases().get(0).ownerName());
        Assertions.assertEquals("efgybpmfbfununmp", model.branchProperties().databases().get(0).databaseName());
        Assertions.assertEquals("gfnzh", model.branchProperties().endpoints().get(0).entityName());
        Assertions.assertEquals("pzarpzeqacdld",
            model.branchProperties().endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("zmpypefcpczshnu",
            model.branchProperties().endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("daizupf", model.branchProperties().endpoints().get(0).projectId());
        Assertions.assertEquals("uytuszxhmtvtv", model.branchProperties().endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_ONLY, model.branchProperties().endpoints().get(0).endpointType());
        Assertions.assertEquals("iukvzwydwt", model.branchProperties().endpoints().get(0).endpointId());
        Assertions.assertEquals("aokgkskjivbsshaj", model.branchProperties().endpoints().get(0).computeName());
        Assertions.assertEquals(80.74880421970249,
            model.branchProperties().endpoints().get(0).size().autoscalingLimitMinCu());
        Assertions.assertEquals(23.61862836490438,
            model.branchProperties().endpoints().get(0).size().autoscalingLimitMaxCu());
        Assertions.assertEquals("ljtiahxmfqryarv", model.branchProperties().branchId());
        Assertions.assertEquals("zqbglcjkays", model.branchProperties().branch());
        Assertions.assertEquals("lskkzpxvj", model.roleProperties().entityName());
        Assertions.assertEquals("snggytexvzilmhiv", model.roleProperties().attributes().get(0).name());
        Assertions.assertEquals("kwwwnckn", model.roleProperties().attributes().get(0).value());
        Assertions.assertEquals("pysthhz", model.roleProperties().branchId());
        Assertions.assertEquals("fwy", model.roleProperties().permissions().get(0));
        Assertions.assertFalse(model.roleProperties().isSuperUser());
        Assertions.assertEquals("nxtminklog", model.roleProperties().roleName());
        Assertions.assertEquals("mqbmfuvqarwz", model.databaseProperties().entityName());
        Assertions.assertEquals("sfgtdmbvxekra", model.databaseProperties().attributes().get(0).name());
        Assertions.assertEquals("k", model.databaseProperties().attributes().get(0).value());
        Assertions.assertEquals("mwbzxpdc", model.databaseProperties().branchId());
        Assertions.assertEquals("pkawnsnlaim", model.databaseProperties().ownerName());
        Assertions.assertEquals("xwksq", model.databaseProperties().databaseName());
        Assertions.assertEquals("wbivqvogfuyzwvbh", model.endpointProperties().entityName());
        Assertions.assertEquals("ood", model.endpointProperties().attributes().get(0).name());
        Assertions.assertEquals("ikcdrdaasax", model.endpointProperties().attributes().get(0).value());
        Assertions.assertEquals("bsmfkwiyjvz", model.endpointProperties().projectId());
        Assertions.assertEquals("osrnawnvzmlnkoy", model.endpointProperties().branchId());
        Assertions.assertEquals(EndpointType.READ_ONLY, model.endpointProperties().endpointType());
        Assertions.assertEquals("jabjqqa", model.endpointProperties().endpointId());
        Assertions.assertEquals("yvymcnudndo", model.endpointProperties().computeName());
        Assertions.assertEquals(48.43407094747189, model.endpointProperties().size().autoscalingLimitMinCu());
        Assertions.assertEquals(36.425614471532555, model.endpointProperties().size().autoscalingLimitMaxCu());
    }
}
