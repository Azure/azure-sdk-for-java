// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.neonpostgres.fluent.models.ConnectionUriPropertiesInner;
import org.junit.jupiter.api.Assertions;

public final class ConnectionUriPropertiesInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConnectionUriPropertiesInner model = BinaryData.fromString(
            "{\"projectId\":\"rqofulopmjnlexwh\",\"branchId\":\"jpib\",\"databaseName\":\"phuuuerctato\",\"roleName\":\"ntqpbr\",\"endpointId\":\"yrduczkgofxyfsr\",\"isPooled\":false,\"connectionStringUri\":\"rrp\"}")
            .toObject(ConnectionUriPropertiesInner.class);
        Assertions.assertEquals("rqofulopmjnlexwh", model.projectId());
        Assertions.assertEquals("jpib", model.branchId());
        Assertions.assertEquals("phuuuerctato", model.databaseName());
        Assertions.assertEquals("ntqpbr", model.roleName());
        Assertions.assertEquals("yrduczkgofxyfsr", model.endpointId());
        Assertions.assertFalse(model.isPooled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConnectionUriPropertiesInner model = new ConnectionUriPropertiesInner().withProjectId("rqofulopmjnlexwh")
            .withBranchId("jpib")
            .withDatabaseName("phuuuerctato")
            .withRoleName("ntqpbr")
            .withEndpointId("yrduczkgofxyfsr")
            .withIsPooled(false);
        model = BinaryData.fromObject(model).toObject(ConnectionUriPropertiesInner.class);
        Assertions.assertEquals("rqofulopmjnlexwh", model.projectId());
        Assertions.assertEquals("jpib", model.branchId());
        Assertions.assertEquals("phuuuerctato", model.databaseName());
        Assertions.assertEquals("ntqpbr", model.roleName());
        Assertions.assertEquals("yrduczkgofxyfsr", model.endpointId());
        Assertions.assertFalse(model.isPooled());
    }
}
