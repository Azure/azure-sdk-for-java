// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.neonpostgres.models.MarketplaceDetails;
import com.azure.resourcemanager.neonpostgres.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.neonpostgres.models.OfferDetails;
import org.junit.jupiter.api.Assertions;

public final class MarketplaceDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MarketplaceDetails model = BinaryData.fromString(
            "{\"subscriptionId\":\"flcxoga\",\"subscriptionStatus\":\"PendingFulfillmentStart\",\"offerDetails\":{\"publisherId\":\"nzmnsikvm\",\"offerId\":\"qzeqqkdltfzxm\",\"planId\":\"hvhgureod\",\"planName\":\"obdagxtibqdxb\",\"termUnit\":\"akbogqxndlkzgxh\",\"termId\":\"iplbpodxunkbebxm\"}}")
            .toObject(MarketplaceDetails.class);
        Assertions.assertEquals("flcxoga", model.subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START, model.subscriptionStatus());
        Assertions.assertEquals("nzmnsikvm", model.offerDetails().publisherId());
        Assertions.assertEquals("qzeqqkdltfzxm", model.offerDetails().offerId());
        Assertions.assertEquals("hvhgureod", model.offerDetails().planId());
        Assertions.assertEquals("obdagxtibqdxb", model.offerDetails().planName());
        Assertions.assertEquals("akbogqxndlkzgxh", model.offerDetails().termUnit());
        Assertions.assertEquals("iplbpodxunkbebxm", model.offerDetails().termId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MarketplaceDetails model = new MarketplaceDetails().withSubscriptionId("flcxoga")
            .withSubscriptionStatus(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START)
            .withOfferDetails(new OfferDetails().withPublisherId("nzmnsikvm")
                .withOfferId("qzeqqkdltfzxm")
                .withPlanId("hvhgureod")
                .withPlanName("obdagxtibqdxb")
                .withTermUnit("akbogqxndlkzgxh")
                .withTermId("iplbpodxunkbebxm"));
        model = BinaryData.fromObject(model).toObject(MarketplaceDetails.class);
        Assertions.assertEquals("flcxoga", model.subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START, model.subscriptionStatus());
        Assertions.assertEquals("nzmnsikvm", model.offerDetails().publisherId());
        Assertions.assertEquals("qzeqqkdltfzxm", model.offerDetails().offerId());
        Assertions.assertEquals("hvhgureod", model.offerDetails().planId());
        Assertions.assertEquals("obdagxtibqdxb", model.offerDetails().planName());
        Assertions.assertEquals("akbogqxndlkzgxh", model.offerDetails().termUnit());
        Assertions.assertEquals("iplbpodxunkbebxm", model.offerDetails().termId());
    }
}
