// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.neonpostgres.models.MarketplaceDetails;
import com.azure.resourcemanager.neonpostgres.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.neonpostgres.models.OfferDetails;
import org.junit.jupiter.api.Assertions;

public final class MarketplaceDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MarketplaceDetails model = BinaryData.fromString(
            "{\"subscriptionId\":\"nuj\",\"subscriptionStatus\":\"Unsubscribed\",\"offerDetails\":{\"publisherId\":\"msbvdkcrodtjinf\",\"offerId\":\"jlfltkacjvefkdlf\",\"planId\":\"akggkfpag\",\"planName\":\"wpu\",\"termUnit\":\"qblylsyxkqj\",\"termId\":\"jervtia\"}}")
            .toObject(MarketplaceDetails.class);
        Assertions.assertEquals("nuj", model.subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.UNSUBSCRIBED, model.subscriptionStatus());
        Assertions.assertEquals("msbvdkcrodtjinf", model.offerDetails().publisherId());
        Assertions.assertEquals("jlfltkacjvefkdlf", model.offerDetails().offerId());
        Assertions.assertEquals("akggkfpag", model.offerDetails().planId());
        Assertions.assertEquals("wpu", model.offerDetails().planName());
        Assertions.assertEquals("qblylsyxkqj", model.offerDetails().termUnit());
        Assertions.assertEquals("jervtia", model.offerDetails().termId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MarketplaceDetails model = new MarketplaceDetails().withSubscriptionId("nuj")
            .withSubscriptionStatus(MarketplaceSubscriptionStatus.UNSUBSCRIBED)
            .withOfferDetails(new OfferDetails().withPublisherId("msbvdkcrodtjinf")
                .withOfferId("jlfltkacjvefkdlf")
                .withPlanId("akggkfpag")
                .withPlanName("wpu")
                .withTermUnit("qblylsyxkqj")
                .withTermId("jervtia"));
        model = BinaryData.fromObject(model).toObject(MarketplaceDetails.class);
        Assertions.assertEquals("nuj", model.subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.UNSUBSCRIBED, model.subscriptionStatus());
        Assertions.assertEquals("msbvdkcrodtjinf", model.offerDetails().publisherId());
        Assertions.assertEquals("jlfltkacjvefkdlf", model.offerDetails().offerId());
        Assertions.assertEquals("akggkfpag", model.offerDetails().planId());
        Assertions.assertEquals("wpu", model.offerDetails().planName());
        Assertions.assertEquals("qblylsyxkqj", model.offerDetails().termUnit());
        Assertions.assertEquals("jervtia", model.offerDetails().termId());
    }
}
