// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.neonpostgres.fluent.models.OrganizationResourceInner;
import com.azure.resourcemanager.neonpostgres.models.Attributes;
import com.azure.resourcemanager.neonpostgres.models.BranchProperties;
import com.azure.resourcemanager.neonpostgres.models.CompanyDetails;
import com.azure.resourcemanager.neonpostgres.models.DefaultEndpointSettings;
import com.azure.resourcemanager.neonpostgres.models.EndpointProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointType;
import com.azure.resourcemanager.neonpostgres.models.MarketplaceDetails;
import com.azure.resourcemanager.neonpostgres.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.neonpostgres.models.NeonDatabaseProperties;
import com.azure.resourcemanager.neonpostgres.models.NeonRoleProperties;
import com.azure.resourcemanager.neonpostgres.models.OfferDetails;
import com.azure.resourcemanager.neonpostgres.models.OrganizationProperties;
import com.azure.resourcemanager.neonpostgres.models.PartnerOrganizationProperties;
import com.azure.resourcemanager.neonpostgres.models.ProjectProperties;
import com.azure.resourcemanager.neonpostgres.models.SingleSignOnProperties;
import com.azure.resourcemanager.neonpostgres.models.SingleSignOnStates;
import com.azure.resourcemanager.neonpostgres.models.UserDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OrganizationResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OrganizationResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"marketplaceDetails\":{\"subscriptionId\":\"jbpzvgnwzsymg\",\"subscriptionStatus\":\"PendingFulfillmentStart\",\"offerDetails\":{\"publisherId\":\"fcyzkohdbihanufh\",\"offerId\":\"cbjy\",\"planId\":\"a\",\"planName\":\"th\",\"termUnit\":\"hab\",\"termId\":\"pikxwczbyscnpqxu\"}},\"userDetails\":{\"firstName\":\"vyq\",\"lastName\":\"wby\",\"emailAddress\":\"k\",\"upn\":\"dumjgrtfwvuk\",\"phoneNumber\":\"audccsnhs\"},\"companyDetails\":{\"companyName\":\"nyejhkryhtnap\",\"country\":\"wlokjyem\",\"officeAddress\":\"vnipjox\",\"businessPhone\":\"nchgej\",\"domain\":\"odmailzyd\",\"numberOfEmployees\":223931992450768188},\"provisioningState\":\"Failed\",\"partnerOrganizationProperties\":{\"organizationId\":\"uxinpmqnjaq\",\"organizationName\":\"ixjsprozvcputeg\",\"singleSignOnProperties\":{\"singleSignOnState\":\"Enable\",\"enterpriseAppId\":\"datscmd\",\"singleSignOnUrl\":\"jhulsuuvmkjo\",\"aadDomains\":[\"wfndiodjpsl\",\"ej\"]}},\"projectProperties\":{\"entityId\":\"wryoqpsoacc\",\"entityName\":\"zakljlahbc\",\"createdAt\":\"ffdfdosygexpa\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"msbzjhcrz\",\"value\":\"vdphlxaolthqtr\"},{\"name\":\"qjbpfzfsin\",\"value\":\"gvfcj\"},{\"name\":\"wzo\",\"value\":\"xjtfelluwfzit\"},{\"name\":\"np\",\"value\":\"qfpjk\"}],\"regionId\":\"xofpdvhpfxxypi\",\"storage\":32512661911671354,\"pgVersion\":314594569,\"historyRetention\":419560742,\"defaultEndpointSettings\":{\"autoscalingLimitMinCu\":47.617606573008075,\"autoscalingLimitMaxCu\":27.761626872699217},\"branch\":{\"entityId\":\"epoo\",\"entityName\":\"nuvamiheogna\",\"createdAt\":\"zxtheotusivyevcc\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"hungbwjzrnf\",\"value\":\"gxg\"},{\"name\":\"spemvtzfk\",\"value\":\"fublj\"}],\"projectId\":\"xqeofjaeqjhqjba\",\"parentId\":\"msmjqulngsntn\",\"roleName\":\"bkzgcwrwclx\",\"databaseName\":\"rljdouskcqv\",\"roles\":[{\"entityId\":\"cjdkwtnhxbnjbi\",\"entityName\":\"qrglssainqpjwn\",\"createdAt\":\"ljfmppee\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"sabkyqduujitcjcz\",\"value\":\"zevndhkrwpdappds\"},{\"name\":\"dkvwrwjfe\",\"value\":\"snhu\"},{\"name\":\"je\",\"value\":\"tmrldhugjzzdatq\"}],\"branchId\":\"oc\",\"permissions\":[\"ablgphuticndvk\",\"ozwyiftyhxhuro\"],\"isSuperUser\":true}],\"databases\":[{\"entityId\":\"lniwpwcukjfkgiaw\",\"entityName\":\"lryplwckbasyy\",\"createdAt\":\"ddhsgcbacphe\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"nqgoulzndli\",\"value\":\"wyqkgfgibm\"},{\"name\":\"dgak\",\"value\":\"qsrxybzqqed\"},{\"name\":\"ytb\",\"value\":\"iqfouflmmnkz\"},{\"name\":\"modmglougpb\",\"value\":\"wtmutduq\"}],\"branchId\":\"ap\",\"ownerName\":\"wgcu\"},{\"entityId\":\"tumkdosvqwhbm\",\"entityName\":\"bbjfddgmbmbexp\",\"createdAt\":\"htqqrolfp\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"gbquxigj\",\"value\":\"jgzjaoyfhrtx\"},{\"name\":\"lnerkujysvleju\",\"value\":\"fqawrlyxw\"}],\"branchId\":\"cpr\",\"ownerName\":\"wbxgjvt\"},{\"entityId\":\"p\",\"entityName\":\"szdnr\",\"createdAt\":\"qguhmuo\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"wzwbnguitn\",\"value\":\"uizga\"},{\"name\":\"x\",\"value\":\"fizuckyf\"}],\"branchId\":\"rfidfvzwdz\",\"ownerName\":\"tymw\"},{\"entityId\":\"dkfthwxmnt\",\"entityName\":\"waopvkmijcmmxd\",\"createdAt\":\"fufsrpymzi\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"cxtbzsg\",\"value\":\"yc\"},{\"name\":\"sne\",\"value\":\"mdwzjeiachboo\"},{\"name\":\"flnrosfqpteehzz\",\"value\":\"ypyqrimzinp\"},{\"name\":\"swjdkirso\",\"value\":\"dqxhcrmnohjtckwh\"}],\"branchId\":\"oifiyipjxsqwpgr\",\"ownerName\":\"znorcj\"}],\"endpoints\":[{\"entityId\":\"byxqabn\",\"entityName\":\"cpc\",\"createdAt\":\"hurzafblj\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"oq\",\"value\":\"jmkljavbqidtqajz\"},{\"name\":\"ulpkudjkrl\",\"value\":\"hbzhfepg\"},{\"name\":\"gqexzlocxs\",\"value\":\"paierh\"}],\"projectId\":\"csglum\",\"branchId\":\"jtjaodxobnbdxkq\",\"endpointType\":\"read_only\"}]},\"roles\":[{\"entityId\":\"ionpimexg\",\"entityName\":\"xgcp\",\"createdAt\":\"gmaajrm\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"rlovmclwhijcoej\",\"value\":\"tbzaqsqsycbkbfk\"},{\"name\":\"ukdkexxppofmxa\",\"value\":\"c\"},{\"name\":\"jpgd\",\"value\":\"toc\"},{\"name\":\"j\",\"value\":\"hvpmoue\"}],\"branchId\":\"dzxibqeojnxqbzvd\",\"permissions\":[\"wndeicbtwnp\"],\"isSuperUser\":false},{\"entityId\":\"vuhrhcffcyddgl\",\"entityName\":\"t\",\"createdAt\":\"qkwpyeicxmqc\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"khixuigdtopbo\",\"value\":\"joghmewuama\"}],\"branchId\":\"rzayv\",\"permissions\":[\"gvdfgiotkftutq\",\"ln\"],\"isSuperUser\":true},{\"entityId\":\"fgugnxkrxdqmid\",\"entityName\":\"hzrvqd\",\"createdAt\":\"bhj\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"h\",\"value\":\"qfbow\"},{\"name\":\"kanyktzlcuiywg\",\"value\":\"ywgndrv\"},{\"name\":\"nhzgpphrcgyn\",\"value\":\"ocpecfvmmco\"}],\"branchId\":\"sxlzevgbmqj\",\"permissions\":[\"c\",\"pmivkwlzu\"],\"isSuperUser\":false},{\"entityId\":\"wnfnbacf\",\"entityName\":\"nlebxetqgtzxd\",\"createdAt\":\"qbqqwxr\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"lnwsubisn\",\"value\":\"ampmngnz\"},{\"name\":\"c\",\"value\":\"aqw\"}],\"branchId\":\"chcbonqvpkvlrxnj\",\"permissions\":[\"eipheoflokeyy\",\"enjbdlwtgrhp\"],\"isSuperUser\":false}],\"databases\":[{\"entityId\":\"asxazjpqyegualhb\",\"entityName\":\"hejjz\",\"createdAt\":\"dudgwdslfhot\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"pwlbjnpg\",\"value\":\"cftadeh\"},{\"name\":\"nltyfsoppusuesnz\",\"value\":\"dejbavo\"},{\"name\":\"xzdmohctb\",\"value\":\"vudwx\"}],\"branchId\":\"dnvowg\",\"ownerName\":\"jugwdkcglhsl\"},{\"entityId\":\"jdyggdtji\",\"entityName\":\"b\",\"createdAt\":\"ofqweykhmenevfye\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"bcibvyvdcsitynn\",\"value\":\"amdecte\"},{\"name\":\"f\",\"value\":\"qsc\"},{\"name\":\"eypvhezrkg\",\"value\":\"hcjrefovgmk\"},{\"name\":\"sle\",\"value\":\"yvxyqjp\"}],\"branchId\":\"attpngjcrcczsq\",\"ownerName\":\"hvmdajvnysounq\"},{\"entityId\":\"a\",\"entityName\":\"ae\",\"createdAt\":\"fhyhltrpmopjmcma\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"hfuiuaodsfc\",\"value\":\"kvxod\"},{\"name\":\"uozmyzydagfua\",\"value\":\"bezy\"},{\"name\":\"uokktwhrdxwz\",\"value\":\"wqsmbsur\"},{\"name\":\"xim\",\"value\":\"ryocfsfksymdd\"}],\"branchId\":\"tki\",\"ownerName\":\"xhqyudxorrqnb\"}],\"endpoints\":[{\"entityId\":\"vyifqrvkdvjsl\",\"entityName\":\"mvvd\",\"createdAt\":\"atkpnp\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"bczw\",\"value\":\"ruwiqzbqjvsov\"},{\"name\":\"yokacspkw\",\"value\":\"hzdobpxjmflbvvnc\"},{\"name\":\"rkcciwwzjuqk\",\"value\":\"rsa\"}],\"projectId\":\"wkuofoskghsauu\",\"branchId\":\"jmvxie\",\"endpointType\":\"read_only\"},{\"entityId\":\"idyjrrfbyaosvexc\",\"entityName\":\"npc\",\"createdAt\":\"ocohslkevleg\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"hfmvfaxkffe\",\"value\":\"ithlvmezyvshxm\"}],\"projectId\":\"bbzoggig\",\"branchId\":\"wburvjxxjnspydpt\",\"endpointType\":\"read_write\"}]}},\"location\":\"kouknvudwtiu\",\"tags\":{\"pocipazyxoegu\":\"dng\",\"npiucgygevqznty\":\"g\",\"dpydn\":\"mrbpizcdrqj\"},\"id\":\"yhxdeoejzicwi\",\"name\":\"sjttgzfbish\",\"type\":\"bkh\"}")
            .toObject(OrganizationResourceInner.class);
        Assertions.assertEquals("kouknvudwtiu", model.location());
        Assertions.assertEquals("dng", model.tags().get("pocipazyxoegu"));
        Assertions.assertEquals("jbpzvgnwzsymg", model.properties().marketplaceDetails().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START,
            model.properties().marketplaceDetails().subscriptionStatus());
        Assertions.assertEquals("fcyzkohdbihanufh",
            model.properties().marketplaceDetails().offerDetails().publisherId());
        Assertions.assertEquals("cbjy", model.properties().marketplaceDetails().offerDetails().offerId());
        Assertions.assertEquals("a", model.properties().marketplaceDetails().offerDetails().planId());
        Assertions.assertEquals("th", model.properties().marketplaceDetails().offerDetails().planName());
        Assertions.assertEquals("hab", model.properties().marketplaceDetails().offerDetails().termUnit());
        Assertions.assertEquals("pikxwczbyscnpqxu", model.properties().marketplaceDetails().offerDetails().termId());
        Assertions.assertEquals("vyq", model.properties().userDetails().firstName());
        Assertions.assertEquals("wby", model.properties().userDetails().lastName());
        Assertions.assertEquals("k", model.properties().userDetails().emailAddress());
        Assertions.assertEquals("dumjgrtfwvuk", model.properties().userDetails().upn());
        Assertions.assertEquals("audccsnhs", model.properties().userDetails().phoneNumber());
        Assertions.assertEquals("nyejhkryhtnap", model.properties().companyDetails().companyName());
        Assertions.assertEquals("wlokjyem", model.properties().companyDetails().country());
        Assertions.assertEquals("vnipjox", model.properties().companyDetails().officeAddress());
        Assertions.assertEquals("nchgej", model.properties().companyDetails().businessPhone());
        Assertions.assertEquals("odmailzyd", model.properties().companyDetails().domain());
        Assertions.assertEquals(223931992450768188L, model.properties().companyDetails().numberOfEmployees());
        Assertions.assertEquals("uxinpmqnjaq", model.properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("ixjsprozvcputeg",
            model.properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals(SingleSignOnStates.ENABLE,
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("datscmd",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("jhulsuuvmkjo",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("wfndiodjpsl",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals("zakljlahbc", model.properties().projectProperties().entityName());
        Assertions.assertEquals("msbzjhcrz", model.properties().projectProperties().attributes().get(0).name());
        Assertions.assertEquals("vdphlxaolthqtr", model.properties().projectProperties().attributes().get(0).value());
        Assertions.assertEquals("xofpdvhpfxxypi", model.properties().projectProperties().regionId());
        Assertions.assertEquals(32512661911671354L, model.properties().projectProperties().storage());
        Assertions.assertEquals(314594569, model.properties().projectProperties().pgVersion());
        Assertions.assertEquals(419560742, model.properties().projectProperties().historyRetention());
        Assertions.assertEquals(47.617606573008075,
            model.properties().projectProperties().defaultEndpointSettings().autoscalingLimitMinCu());
        Assertions.assertEquals(27.761626872699217,
            model.properties().projectProperties().defaultEndpointSettings().autoscalingLimitMaxCu());
        Assertions.assertEquals("nuvamiheogna", model.properties().projectProperties().branch().entityName());
        Assertions.assertEquals("hungbwjzrnf",
            model.properties().projectProperties().branch().attributes().get(0).name());
        Assertions.assertEquals("gxg", model.properties().projectProperties().branch().attributes().get(0).value());
        Assertions.assertEquals("xqeofjaeqjhqjba", model.properties().projectProperties().branch().projectId());
        Assertions.assertEquals("msmjqulngsntn", model.properties().projectProperties().branch().parentId());
        Assertions.assertEquals("bkzgcwrwclx", model.properties().projectProperties().branch().roleName());
        Assertions.assertEquals("rljdouskcqv", model.properties().projectProperties().branch().databaseName());
        Assertions.assertEquals("qrglssainqpjwn",
            model.properties().projectProperties().branch().roles().get(0).entityName());
        Assertions.assertEquals("sabkyqduujitcjcz",
            model.properties().projectProperties().branch().roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("zevndhkrwpdappds",
            model.properties().projectProperties().branch().roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("oc", model.properties().projectProperties().branch().roles().get(0).branchId());
        Assertions.assertEquals("ablgphuticndvk",
            model.properties().projectProperties().branch().roles().get(0).permissions().get(0));
        Assertions.assertTrue(model.properties().projectProperties().branch().roles().get(0).isSuperUser());
        Assertions.assertEquals("lryplwckbasyy",
            model.properties().projectProperties().branch().databases().get(0).entityName());
        Assertions.assertEquals("nqgoulzndli",
            model.properties().projectProperties().branch().databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("wyqkgfgibm",
            model.properties().projectProperties().branch().databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("ap", model.properties().projectProperties().branch().databases().get(0).branchId());
        Assertions.assertEquals("wgcu", model.properties().projectProperties().branch().databases().get(0).ownerName());
        Assertions.assertEquals("cpc", model.properties().projectProperties().branch().endpoints().get(0).entityName());
        Assertions.assertEquals("oq",
            model.properties().projectProperties().branch().endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("jmkljavbqidtqajz",
            model.properties().projectProperties().branch().endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("csglum",
            model.properties().projectProperties().branch().endpoints().get(0).projectId());
        Assertions.assertEquals("jtjaodxobnbdxkq",
            model.properties().projectProperties().branch().endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_ONLY,
            model.properties().projectProperties().branch().endpoints().get(0).endpointType());
        Assertions.assertEquals("xgcp", model.properties().projectProperties().roles().get(0).entityName());
        Assertions.assertEquals("rlovmclwhijcoej",
            model.properties().projectProperties().roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("tbzaqsqsycbkbfk",
            model.properties().projectProperties().roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("dzxibqeojnxqbzvd", model.properties().projectProperties().roles().get(0).branchId());
        Assertions.assertEquals("wndeicbtwnp",
            model.properties().projectProperties().roles().get(0).permissions().get(0));
        Assertions.assertFalse(model.properties().projectProperties().roles().get(0).isSuperUser());
        Assertions.assertEquals("hejjz", model.properties().projectProperties().databases().get(0).entityName());
        Assertions.assertEquals("pwlbjnpg",
            model.properties().projectProperties().databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("cftadeh",
            model.properties().projectProperties().databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("dnvowg", model.properties().projectProperties().databases().get(0).branchId());
        Assertions.assertEquals("jugwdkcglhsl", model.properties().projectProperties().databases().get(0).ownerName());
        Assertions.assertEquals("mvvd", model.properties().projectProperties().endpoints().get(0).entityName());
        Assertions.assertEquals("bczw",
            model.properties().projectProperties().endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("ruwiqzbqjvsov",
            model.properties().projectProperties().endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("wkuofoskghsauu",
            model.properties().projectProperties().endpoints().get(0).projectId());
        Assertions.assertEquals("jmvxie", model.properties().projectProperties().endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_ONLY,
            model.properties().projectProperties().endpoints().get(0).endpointType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OrganizationResourceInner model
            = new OrganizationResourceInner().withLocation("kouknvudwtiu")
                .withTags(mapOf("pocipazyxoegu", "dng", "npiucgygevqznty", "g", "dpydn", "mrbpizcdrqj"))
                .withProperties(
                    new OrganizationProperties()
                        .withMarketplaceDetails(new MarketplaceDetails().withSubscriptionId("jbpzvgnwzsymg")
                            .withSubscriptionStatus(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START)
                            .withOfferDetails(new OfferDetails().withPublisherId("fcyzkohdbihanufh")
                                .withOfferId("cbjy")
                                .withPlanId("a")
                                .withPlanName("th")
                                .withTermUnit("hab")
                                .withTermId("pikxwczbyscnpqxu")))
                        .withUserDetails(new UserDetails().withFirstName("vyq")
                            .withLastName("wby")
                            .withEmailAddress("k")
                            .withUpn("dumjgrtfwvuk")
                            .withPhoneNumber("audccsnhs"))
                        .withCompanyDetails(new CompanyDetails().withCompanyName("nyejhkryhtnap")
                            .withCountry("wlokjyem")
                            .withOfficeAddress("vnipjox")
                            .withBusinessPhone("nchgej")
                            .withDomain("odmailzyd")
                            .withNumberOfEmployees(223931992450768188L))
                        .withPartnerOrganizationProperties(new PartnerOrganizationProperties()
                            .withOrganizationId("uxinpmqnjaq")
                            .withOrganizationName("ixjsprozvcputeg")
                            .withSingleSignOnProperties(new SingleSignOnProperties()
                                .withSingleSignOnState(SingleSignOnStates.ENABLE)
                                .withEnterpriseAppId("datscmd")
                                .withSingleSignOnUrl("jhulsuuvmkjo")
                                .withAadDomains(Arrays.asList("wfndiodjpsl", "ej"))))
                        .withProjectProperties(new ProjectProperties().withEntityName("zakljlahbc")
                            .withAttributes(
                                Arrays.asList(new Attributes().withName("msbzjhcrz").withValue("vdphlxaolthqtr"),
                                    new Attributes().withName("qjbpfzfsin").withValue("gvfcj"),
                                    new Attributes().withName("wzo").withValue("xjtfelluwfzit"),
                                    new Attributes().withName("np").withValue("qfpjk")))
                            .withRegionId("xofpdvhpfxxypi")
                            .withStorage(32512661911671354L)
                            .withPgVersion(314594569)
                            .withHistoryRetention(419560742)
                            .withDefaultEndpointSettings(
                                new DefaultEndpointSettings().withAutoscalingLimitMinCu(47.617606573008075)
                                    .withAutoscalingLimitMaxCu(27.761626872699217))
                            .withBranch(new BranchProperties().withEntityName("nuvamiheogna")
                                .withAttributes(Arrays.asList(new Attributes().withName("hungbwjzrnf").withValue("gxg"),
                                    new Attributes().withName("spemvtzfk").withValue("fublj")))
                                .withProjectId("xqeofjaeqjhqjba")
                                .withParentId("msmjqulngsntn")
                                .withRoleName("bkzgcwrwclx")
                                .withDatabaseName("rljdouskcqv")
                                .withRoles(Arrays.asList(new NeonRoleProperties().withEntityName("qrglssainqpjwn")
                                    .withAttributes(Arrays.asList(
                                        new Attributes().withName("sabkyqduujitcjcz").withValue("zevndhkrwpdappds"),
                                        new Attributes().withName("dkvwrwjfe").withValue("snhu"),
                                        new Attributes().withName("je").withValue("tmrldhugjzzdatq")))
                                    .withBranchId("oc")
                                    .withPermissions(Arrays.asList("ablgphuticndvk", "ozwyiftyhxhuro"))
                                    .withIsSuperUser(true)))
                                .withDatabases(Arrays.asList(
                                    new NeonDatabaseProperties().withEntityName("lryplwckbasyy")
                                        .withAttributes(Arrays.asList(
                                            new Attributes().withName("nqgoulzndli").withValue("wyqkgfgibm"),
                                            new Attributes().withName("dgak").withValue("qsrxybzqqed"),
                                            new Attributes().withName("ytb").withValue("iqfouflmmnkz"),
                                            new Attributes().withName("modmglougpb").withValue("wtmutduq")))
                                        .withBranchId("ap")
                                        .withOwnerName("wgcu"),
                                    new NeonDatabaseProperties().withEntityName("bbjfddgmbmbexp")
                                        .withAttributes(Arrays
                                            .asList(new Attributes().withName("gbquxigj").withValue("jgzjaoyfhrtx"),
                                                new Attributes().withName("lnerkujysvleju").withValue("fqawrlyxw")))
                                        .withBranchId("cpr")
                                        .withOwnerName("wbxgjvt"),
                                    new NeonDatabaseProperties().withEntityName("szdnr")
                                        .withAttributes(Arrays.asList(
                                            new Attributes().withName("wzwbnguitn").withValue("uizga"),
                                            new Attributes().withName("x").withValue("fizuckyf")))
                                        .withBranchId("rfidfvzwdz")
                                        .withOwnerName("tymw"),
                                    new NeonDatabaseProperties().withEntityName("waopvkmijcmmxd")
                                        .withAttributes(
                                            Arrays.asList(new Attributes().withName("cxtbzsg").withValue("yc"),
                                                new Attributes().withName("sne").withValue("mdwzjeiachboo"),
                                                new Attributes().withName("flnrosfqpteehzz").withValue("ypyqrimzinp"),
                                                new Attributes().withName("swjdkirso").withValue("dqxhcrmnohjtckwh")))
                                        .withBranchId("oifiyipjxsqwpgr")
                                        .withOwnerName("znorcj")))
                                .withEndpoints(
                                    Arrays
                                        .asList(new EndpointProperties().withEntityName("cpc")
                                            .withAttributes(Arrays.asList(
                                                new Attributes().withName("oq").withValue("jmkljavbqidtqajz"),
                                                new Attributes().withName("ulpkudjkrl").withValue("hbzhfepg"),
                                                new Attributes().withName("gqexzlocxs").withValue("paierh")))
                                            .withProjectId("csglum")
                                            .withBranchId("jtjaodxobnbdxkq")
                                            .withEndpointType(EndpointType.READ_ONLY))))
                            .withRoles(Arrays.asList(
                                new NeonRoleProperties().withEntityName("xgcp")
                                    .withAttributes(Arrays.asList(
                                        new Attributes().withName("rlovmclwhijcoej").withValue("tbzaqsqsycbkbfk"),
                                        new Attributes().withName("ukdkexxppofmxa").withValue("c"),
                                        new Attributes().withName("jpgd").withValue("toc"),
                                        new Attributes().withName("j").withValue("hvpmoue")))
                                    .withBranchId("dzxibqeojnxqbzvd")
                                    .withPermissions(Arrays.asList("wndeicbtwnp"))
                                    .withIsSuperUser(false),
                                new NeonRoleProperties().withEntityName("t")
                                    .withAttributes(Arrays
                                        .asList(new Attributes().withName("khixuigdtopbo").withValue("joghmewuama")))
                                    .withBranchId("rzayv")
                                    .withPermissions(Arrays.asList("gvdfgiotkftutq", "ln"))
                                    .withIsSuperUser(true),
                                new NeonRoleProperties().withEntityName("hzrvqd")
                                    .withAttributes(Arrays.asList(new Attributes().withName("h").withValue("qfbow"),
                                        new Attributes().withName("kanyktzlcuiywg").withValue("ywgndrv"),
                                        new Attributes().withName("nhzgpphrcgyn").withValue("ocpecfvmmco")))
                                    .withBranchId("sxlzevgbmqj")
                                    .withPermissions(Arrays.asList("c", "pmivkwlzu"))
                                    .withIsSuperUser(false),
                                new NeonRoleProperties().withEntityName("nlebxetqgtzxd")
                                    .withAttributes(
                                        Arrays.asList(new Attributes().withName("lnwsubisn").withValue("ampmngnz"),
                                            new Attributes().withName("c").withValue("aqw")))
                                    .withBranchId("chcbonqvpkvlrxnj")
                                    .withPermissions(Arrays.asList("eipheoflokeyy", "enjbdlwtgrhp"))
                                    .withIsSuperUser(false)))
                            .withDatabases(
                                Arrays
                                    .asList(
                                        new NeonDatabaseProperties().withEntityName("hejjz")
                                            .withAttributes(Arrays.asList(
                                                new Attributes().withName("pwlbjnpg").withValue("cftadeh"),
                                                new Attributes().withName("nltyfsoppusuesnz").withValue("dejbavo"),
                                                new Attributes().withName("xzdmohctb").withValue("vudwx")))
                                            .withBranchId("dnvowg")
                                            .withOwnerName("jugwdkcglhsl"),
                                        new NeonDatabaseProperties().withEntityName("b")
                                            .withAttributes(Arrays.asList(
                                                new Attributes().withName("bcibvyvdcsitynn").withValue("amdecte"),
                                                new Attributes().withName("f").withValue("qsc"),
                                                new Attributes().withName("eypvhezrkg").withValue("hcjrefovgmk"),
                                                new Attributes().withName("sle").withValue("yvxyqjp")))
                                            .withBranchId("attpngjcrcczsq")
                                            .withOwnerName("hvmdajvnysounq"),
                                        new NeonDatabaseProperties().withEntityName("ae")
                                            .withAttributes(Arrays.asList(
                                                new Attributes().withName("hfuiuaodsfc").withValue("kvxod"),
                                                new Attributes().withName("uozmyzydagfua").withValue("bezy"),
                                                new Attributes().withName("uokktwhrdxwz").withValue("wqsmbsur"),
                                                new Attributes().withName("xim").withValue("ryocfsfksymdd")))
                                            .withBranchId("tki")
                                            .withOwnerName("xhqyudxorrqnb")))
                            .withEndpoints(
                                Arrays
                                    .asList(
                                        new EndpointProperties().withEntityName("mvvd")
                                            .withAttributes(Arrays.asList(
                                                new Attributes().withName("bczw").withValue("ruwiqzbqjvsov"),
                                                new Attributes().withName("yokacspkw").withValue("hzdobpxjmflbvvnc"),
                                                new Attributes().withName("rkcciwwzjuqk").withValue("rsa")))
                                            .withProjectId("wkuofoskghsauu")
                                            .withBranchId("jmvxie")
                                            .withEndpointType(EndpointType.READ_ONLY),
                                        new EndpointProperties().withEntityName("npc")
                                            .withAttributes(Arrays.asList(
                                                new Attributes().withName("hfmvfaxkffe").withValue("ithlvmezyvshxm")))
                                            .withProjectId("bbzoggig")
                                            .withBranchId("wburvjxxjnspydpt")
                                            .withEndpointType(EndpointType.READ_WRITE)))));
        model = BinaryData.fromObject(model).toObject(OrganizationResourceInner.class);
        Assertions.assertEquals("kouknvudwtiu", model.location());
        Assertions.assertEquals("dng", model.tags().get("pocipazyxoegu"));
        Assertions.assertEquals("jbpzvgnwzsymg", model.properties().marketplaceDetails().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START,
            model.properties().marketplaceDetails().subscriptionStatus());
        Assertions.assertEquals("fcyzkohdbihanufh",
            model.properties().marketplaceDetails().offerDetails().publisherId());
        Assertions.assertEquals("cbjy", model.properties().marketplaceDetails().offerDetails().offerId());
        Assertions.assertEquals("a", model.properties().marketplaceDetails().offerDetails().planId());
        Assertions.assertEquals("th", model.properties().marketplaceDetails().offerDetails().planName());
        Assertions.assertEquals("hab", model.properties().marketplaceDetails().offerDetails().termUnit());
        Assertions.assertEquals("pikxwczbyscnpqxu", model.properties().marketplaceDetails().offerDetails().termId());
        Assertions.assertEquals("vyq", model.properties().userDetails().firstName());
        Assertions.assertEquals("wby", model.properties().userDetails().lastName());
        Assertions.assertEquals("k", model.properties().userDetails().emailAddress());
        Assertions.assertEquals("dumjgrtfwvuk", model.properties().userDetails().upn());
        Assertions.assertEquals("audccsnhs", model.properties().userDetails().phoneNumber());
        Assertions.assertEquals("nyejhkryhtnap", model.properties().companyDetails().companyName());
        Assertions.assertEquals("wlokjyem", model.properties().companyDetails().country());
        Assertions.assertEquals("vnipjox", model.properties().companyDetails().officeAddress());
        Assertions.assertEquals("nchgej", model.properties().companyDetails().businessPhone());
        Assertions.assertEquals("odmailzyd", model.properties().companyDetails().domain());
        Assertions.assertEquals(223931992450768188L, model.properties().companyDetails().numberOfEmployees());
        Assertions.assertEquals("uxinpmqnjaq", model.properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("ixjsprozvcputeg",
            model.properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals(SingleSignOnStates.ENABLE,
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("datscmd",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("jhulsuuvmkjo",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("wfndiodjpsl",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals("zakljlahbc", model.properties().projectProperties().entityName());
        Assertions.assertEquals("msbzjhcrz", model.properties().projectProperties().attributes().get(0).name());
        Assertions.assertEquals("vdphlxaolthqtr", model.properties().projectProperties().attributes().get(0).value());
        Assertions.assertEquals("xofpdvhpfxxypi", model.properties().projectProperties().regionId());
        Assertions.assertEquals(32512661911671354L, model.properties().projectProperties().storage());
        Assertions.assertEquals(314594569, model.properties().projectProperties().pgVersion());
        Assertions.assertEquals(419560742, model.properties().projectProperties().historyRetention());
        Assertions.assertEquals(47.617606573008075,
            model.properties().projectProperties().defaultEndpointSettings().autoscalingLimitMinCu());
        Assertions.assertEquals(27.761626872699217,
            model.properties().projectProperties().defaultEndpointSettings().autoscalingLimitMaxCu());
        Assertions.assertEquals("nuvamiheogna", model.properties().projectProperties().branch().entityName());
        Assertions.assertEquals("hungbwjzrnf",
            model.properties().projectProperties().branch().attributes().get(0).name());
        Assertions.assertEquals("gxg", model.properties().projectProperties().branch().attributes().get(0).value());
        Assertions.assertEquals("xqeofjaeqjhqjba", model.properties().projectProperties().branch().projectId());
        Assertions.assertEquals("msmjqulngsntn", model.properties().projectProperties().branch().parentId());
        Assertions.assertEquals("bkzgcwrwclx", model.properties().projectProperties().branch().roleName());
        Assertions.assertEquals("rljdouskcqv", model.properties().projectProperties().branch().databaseName());
        Assertions.assertEquals("qrglssainqpjwn",
            model.properties().projectProperties().branch().roles().get(0).entityName());
        Assertions.assertEquals("sabkyqduujitcjcz",
            model.properties().projectProperties().branch().roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("zevndhkrwpdappds",
            model.properties().projectProperties().branch().roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("oc", model.properties().projectProperties().branch().roles().get(0).branchId());
        Assertions.assertEquals("ablgphuticndvk",
            model.properties().projectProperties().branch().roles().get(0).permissions().get(0));
        Assertions.assertTrue(model.properties().projectProperties().branch().roles().get(0).isSuperUser());
        Assertions.assertEquals("lryplwckbasyy",
            model.properties().projectProperties().branch().databases().get(0).entityName());
        Assertions.assertEquals("nqgoulzndli",
            model.properties().projectProperties().branch().databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("wyqkgfgibm",
            model.properties().projectProperties().branch().databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("ap", model.properties().projectProperties().branch().databases().get(0).branchId());
        Assertions.assertEquals("wgcu", model.properties().projectProperties().branch().databases().get(0).ownerName());
        Assertions.assertEquals("cpc", model.properties().projectProperties().branch().endpoints().get(0).entityName());
        Assertions.assertEquals("oq",
            model.properties().projectProperties().branch().endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("jmkljavbqidtqajz",
            model.properties().projectProperties().branch().endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("csglum",
            model.properties().projectProperties().branch().endpoints().get(0).projectId());
        Assertions.assertEquals("jtjaodxobnbdxkq",
            model.properties().projectProperties().branch().endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_ONLY,
            model.properties().projectProperties().branch().endpoints().get(0).endpointType());
        Assertions.assertEquals("xgcp", model.properties().projectProperties().roles().get(0).entityName());
        Assertions.assertEquals("rlovmclwhijcoej",
            model.properties().projectProperties().roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("tbzaqsqsycbkbfk",
            model.properties().projectProperties().roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("dzxibqeojnxqbzvd", model.properties().projectProperties().roles().get(0).branchId());
        Assertions.assertEquals("wndeicbtwnp",
            model.properties().projectProperties().roles().get(0).permissions().get(0));
        Assertions.assertFalse(model.properties().projectProperties().roles().get(0).isSuperUser());
        Assertions.assertEquals("hejjz", model.properties().projectProperties().databases().get(0).entityName());
        Assertions.assertEquals("pwlbjnpg",
            model.properties().projectProperties().databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("cftadeh",
            model.properties().projectProperties().databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("dnvowg", model.properties().projectProperties().databases().get(0).branchId());
        Assertions.assertEquals("jugwdkcglhsl", model.properties().projectProperties().databases().get(0).ownerName());
        Assertions.assertEquals("mvvd", model.properties().projectProperties().endpoints().get(0).entityName());
        Assertions.assertEquals("bczw",
            model.properties().projectProperties().endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("ruwiqzbqjvsov",
            model.properties().projectProperties().endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("wkuofoskghsauu",
            model.properties().projectProperties().endpoints().get(0).projectId());
        Assertions.assertEquals("jmvxie", model.properties().projectProperties().endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_ONLY,
            model.properties().projectProperties().endpoints().get(0).endpointType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
