// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.neonpostgres.models.Attributes;
import com.azure.resourcemanager.neonpostgres.models.AutoscalingSize;
import com.azure.resourcemanager.neonpostgres.models.BranchProperties;
import com.azure.resourcemanager.neonpostgres.models.CompanyDetails;
import com.azure.resourcemanager.neonpostgres.models.DefaultEndpointSettings;
import com.azure.resourcemanager.neonpostgres.models.EndpointProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointType;
import com.azure.resourcemanager.neonpostgres.models.MarketplaceDetails;
import com.azure.resourcemanager.neonpostgres.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.neonpostgres.models.NeonDatabaseProperties;
import com.azure.resourcemanager.neonpostgres.models.NeonRoleProperties;
import com.azure.resourcemanager.neonpostgres.models.OfferDetails;
import com.azure.resourcemanager.neonpostgres.models.OrganizationResourceUpdate;
import com.azure.resourcemanager.neonpostgres.models.OrganizationResourceUpdateProperties;
import com.azure.resourcemanager.neonpostgres.models.PartnerOrganizationProperties;
import com.azure.resourcemanager.neonpostgres.models.ProjectProperties;
import com.azure.resourcemanager.neonpostgres.models.SingleSignOnProperties;
import com.azure.resourcemanager.neonpostgres.models.SingleSignOnStates;
import com.azure.resourcemanager.neonpostgres.models.UserDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OrganizationResourceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OrganizationResourceUpdate model = BinaryData.fromString(
            "{\"tags\":{\"lcplc\":\"qdhcu\",\"tzbsrgnowcjhf\":\"khihihlhzds\",\"ctxmwoteyowcluq\":\"mvec\",\"wifzmp\":\"vekqvgqo\"},\"properties\":{\"marketplaceDetails\":{\"subscriptionId\":\"vqikfxcvhrfsphu\",\"subscriptionStatus\":\"Suspended\",\"offerDetails\":{\"publisherId\":\"ttikteusqczkvykl\",\"offerId\":\"ubyjaffmmf\",\"planId\":\"lcqcuubgqibrt\",\"planName\":\"metttwgd\",\"termUnit\":\"qxihhrmooi\",\"termId\":\"seypxiutcxapz\"}},\"userDetails\":{\"firstName\":\"petogebjox\",\"lastName\":\"hvnh\",\"emailAddress\":\"brqnkkzjcjb\",\"upn\":\"gaehvvibrxjjst\",\"phoneNumber\":\"beitpkx\"},\"companyDetails\":{\"companyName\":\"oobklftidgfcwq\",\"country\":\"imaq\",\"officeAddress\":\"hemjy\",\"businessPhone\":\"hujswtwkozzwcul\",\"domain\":\"awpfajnjwltlwtjj\",\"numberOfEmployees\":5952236879587668656},\"partnerOrganizationProperties\":{\"organizationId\":\"hsnvkcdmxzrp\",\"organizationName\":\"aimlnwiaaom\",\"singleSignOnProperties\":{\"singleSignOnState\":\"Enable\",\"enterpriseAppId\":\"z\",\"singleSignOnUrl\":\"cse\",\"aadDomains\":[\"wnpjhlfzswpchwa\",\"fb\"]}},\"projectProperties\":{\"entityId\":\"nfepgf\",\"entityName\":\"etwlyxgncx\",\"createdAt\":\"xhdjhl\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"x\",\"value\":\"h\"},{\"name\":\"cporxvxcjz\",\"value\":\"qizxfpxtgqscjavf\"},{\"name\":\"juhdqazkmtgguwpi\",\"value\":\"r\"}],\"regionId\":\"civmmg\",\"storage\":1865128114829410561,\"pgVersion\":437881905,\"historyRetention\":1054969690,\"defaultEndpointSettings\":{\"autoscalingLimitMinCu\":64.64946218796175,\"autoscalingLimitMaxCu\":91.58585052454501},\"branch\":{\"entityId\":\"inzqodfvpgs\",\"entityName\":\"xgsg\",\"createdAt\":\"fgzdjtxvz\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"gaqvlgafcqusrd\",\"value\":\"etnwsdtutnw\"}],\"projectId\":\"uycvuzhyrmewip\",\"parentId\":\"ekdxuku\",\"roleName\":\"sjjxundxgketw\",\"databaseName\":\"hzjhf\",\"roles\":[{\"entityId\":\"vmuvgpmu\",\"entityName\":\"qsxvmhf\",\"createdAt\":\"zjyi\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"hudypohyuemsl\",\"value\":\"nsqyrpfoobrltt\"}],\"branchId\":\"sjnygqdnfwqzdzgt\",\"permissions\":[\"xhnfhqly\",\"ijouwivkxoyzunb\"],\"isSuperUser\":true,\"roleName\":\"ti\",\"lastUpdated\":\"cpwpg\",\"owns\":\"rc\"},{\"entityId\":\"tso\",\"entityName\":\"rkenx\",\"createdAt\":\"yyefrpmpdnqqs\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"qvmmbn\",\"value\":\"qfr\"}],\"branchId\":\"lkzmegnitgvkxl\",\"permissions\":[\"drf\",\"gcealzxwh\",\"ansym\",\"yqhlwigdivbkbx\"],\"isSuperUser\":false,\"roleName\":\"ajuwas\",\"lastUpdated\":\"daeyygux\",\"owns\":\"jsqzhzbezk\"},{\"entityId\":\"msidxasicddyvv\",\"entityName\":\"kgfmocwahpq\",\"createdAt\":\"tjeaahhvjhh\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"bbjjidjksyxk\",\"value\":\"xvxevblbjednljla\"},{\"name\":\"euaulxu\",\"value\":\"smjbnkppxyn\"},{\"name\":\"nlsvxeiz\",\"value\":\"gwklnsr\"}],\"branchId\":\"feycxcktp\",\"permissions\":[\"erteeammxqiekk\",\"zddrt\",\"g\",\"ojbmxv\"],\"isSuperUser\":false,\"roleName\":\"fdeesvecuijpxtx\",\"lastUpdated\":\"wprtu\",\"owns\":\"sawddjibabxvi\"}],\"databases\":[{\"entityId\":\"tzeexav\",\"entityName\":\"tfgle\",\"createdAt\":\"m\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"ypq\",\"value\":\"gsfjac\"},{\"name\":\"slhhxudbxv\",\"value\":\"d\"},{\"name\":\"tnsi\",\"value\":\"ud\"}],\"branchId\":\"m\",\"ownerName\":\"sckdlp\",\"databaseName\":\"zrcxfailcfxwmdbo\",\"lastUpdated\":\"fgsftufqob\"},{\"entityId\":\"lnacgcc\",\"entityName\":\"nhxk\",\"createdAt\":\"v\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"vuljraaeranokqg\",\"value\":\"kkjqnvbroylaxxu\"},{\"name\":\"cdisd\",\"value\":\"sfjbjsvg\"}],\"branchId\":\"whryvycytdcl\",\"ownerName\":\"ccknfnwmbtmvp\",\"databaseName\":\"jdhttzaefedxi\",\"lastUpdated\":\"hrphkmcrjdqn\"},{\"entityId\":\"fzpbgtgkyl\",\"entityName\":\"ghrjeuutl\",\"createdAt\":\"ez\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"vbwnhhtq\",\"value\":\"gehgppi\"},{\"name\":\"ifhpf\",\"value\":\"oajvgcxtxjcs\"},{\"name\":\"eafidltugsresm\",\"value\":\"ssjhoiftxfkf\"},{\"name\":\"egprhptil\",\"value\":\"ucb\"}],\"branchId\":\"tgdqohmcwsldriz\",\"ownerName\":\"pwbralllibphbqz\",\"databaseName\":\"zakakankjpdn\",\"lastUpdated\":\"ha\"},{\"entityId\":\"ylhjlm\",\"entityName\":\"y\",\"createdAt\":\"rimrs\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"cjmeislstvasy\",\"value\":\"wxdzaumweoohgu\"}],\"branchId\":\"uzboyjathw\",\"ownerName\":\"olbaemwmdx\",\"databaseName\":\"bwjscjpahlxveab\",\"lastUpdated\":\"xnmwmqtibxyijddt\"}],\"endpoints\":[{\"entityId\":\"tad\",\"entityName\":\"aeukm\",\"createdAt\":\"ieekpndzaa\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"meqwig\",\"value\":\"ibudqwy\"},{\"name\":\"eb\",\"value\":\"ybpmzznrtffyaq\"},{\"name\":\"tmhheioqa\",\"value\":\"hvseufuqyrx\"},{\"name\":\"dlcgqlsismjqfr\",\"value\":\"dgamquhiosrsj\"}],\"projectId\":\"vfcdisyirn\",\"branchId\":\"hcz\",\"endpointType\":\"read_only\",\"endpointId\":\"zbujrt\",\"computeName\":\"qvwre\",\"status\":\"idle\",\"lastActive\":\"nlnzonzlrpi\",\"size\":{\"autoscalingLimitMinCu\":81.090857593739,\"autoscalingLimitMaxCu\":68.71363175330217}},{\"entityId\":\"tszcofizehtdhgb\",\"entityName\":\"vreljea\",\"createdAt\":\"rvzmlovuana\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"pmjerbdkelvidiz\",\"value\":\"zsdbccxjmon\"},{\"name\":\"dgnwncypuuwwlt\",\"value\":\"uqj\"}],\"projectId\":\"zenkeifzzhmkd\",\"branchId\":\"vflyhbxcu\",\"endpointType\":\"read_write\",\"endpointId\":\"gsrboldforobw\",\"computeName\":\"vizbfhfo\",\"status\":\"init\",\"lastActive\":\"qpbtuodxes\",\"size\":{\"autoscalingLimitMinCu\":84.48659759541806,\"autoscalingLimitMaxCu\":38.51105429345376}}],\"branchId\":\"wumuaslzk\",\"branch\":\"rwoycqucwyh\",\"dataSize\":\"nomdrkywuhpsv\",\"lastActive\":\"urut\",\"computeHours\":\"exxwlalniexzsrz\",\"protected\":false,\"isDefault\":false},\"roles\":[{\"entityId\":\"bwwpgdakchzy\",\"entityName\":\"ixqnrkcxkjibnxm\",\"createdAt\":\"uxswqrntvl\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"ttexoqqpwcyyufmh\",\"value\":\"uncuw\"},{\"name\":\"qspkcdqzhlctd\",\"value\":\"unqndyfpchrqb\"}],\"branchId\":\"jrcg\",\"permissions\":[\"dcwboxjum\",\"qqoli\",\"r\"],\"isSuperUser\":true,\"roleName\":\"uaubrj\",\"lastUpdated\":\"oq\",\"owns\":\"uojrngiflr\"}],\"databases\":[{\"entityId\":\"ccbiuimzdlyjdfq\",\"entityName\":\"kyoqufdv\",\"createdAt\":\"zslzojhp\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"dxotng\",\"value\":\"dgug\"},{\"name\":\"yzihgrkyuizabsn\",\"value\":\"fpphoj\"},{\"name\":\"evy\",\"value\":\"yhsgz\"}],\"branchId\":\"zbgomfgbeg\",\"ownerName\":\"gleohi\",\"databaseName\":\"tnluankrr\",\"lastUpdated\":\"eeebtijvacv\"},{\"entityId\":\"qzbqqxlajrnwxa\",\"entityName\":\"veh\",\"createdAt\":\"uyxoaf\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"tfaeyl\",\"value\":\"nm\"}],\"branchId\":\"vxirpghriypo\",\"ownerName\":\"yhlqhykprlpyznu\",\"databaseName\":\"qdsmexiit\",\"lastUpdated\":\"uxtyasiibmi\"}],\"endpoints\":[{\"entityId\":\"ustgnljhnmgixhc\",\"entityName\":\"vmqfoud\",\"createdAt\":\"hcgyyprotwyp\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"xhugcm\",\"value\":\"k\"},{\"name\":\"vlgo\",\"value\":\"bmftpmdt\"},{\"name\":\"fjltfvnzcyjtotp\",\"value\":\"opv\"},{\"name\":\"bdb\",\"value\":\"qgqqihedsvqwthmk\"}],\"projectId\":\"bcysih\",\"branchId\":\"qcwdhoh\",\"endpointType\":\"read_write\",\"endpointId\":\"cdzsu\",\"computeName\":\"ohdxbzlmcmu\",\"status\":\"init\",\"lastActive\":\"hdbevwqqxeyskon\",\"size\":{\"autoscalingLimitMinCu\":51.78293369561197,\"autoscalingLimitMaxCu\":96.80823122099127}},{\"entityId\":\"bgbzbowxeqoclj\",\"entityName\":\"gvkzqkjjeokbze\",\"createdAt\":\"zrxcczurt\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"xbkwv\",\"value\":\"gnzvdfbzdixzm\"}],\"projectId\":\"noda\",\"branchId\":\"pqhe\",\"endpointType\":\"read_write\",\"endpointId\":\"mcgsbostzelnd\",\"computeName\":\"tutmzl\",\"status\":\"active\",\"lastActive\":\"lvfhrbbp\",\"size\":{\"autoscalingLimitMinCu\":30.49056364401831,\"autoscalingLimitMaxCu\":41.34820192784158}}]}}}")
            .toObject(OrganizationResourceUpdate.class);
        Assertions.assertEquals("qdhcu", model.tags().get("lcplc"));
        Assertions.assertEquals("vqikfxcvhrfsphu", model.properties().marketplaceDetails().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.SUSPENDED,
            model.properties().marketplaceDetails().subscriptionStatus());
        Assertions.assertEquals("ttikteusqczkvykl",
            model.properties().marketplaceDetails().offerDetails().publisherId());
        Assertions.assertEquals("ubyjaffmmf", model.properties().marketplaceDetails().offerDetails().offerId());
        Assertions.assertEquals("lcqcuubgqibrt", model.properties().marketplaceDetails().offerDetails().planId());
        Assertions.assertEquals("metttwgd", model.properties().marketplaceDetails().offerDetails().planName());
        Assertions.assertEquals("qxihhrmooi", model.properties().marketplaceDetails().offerDetails().termUnit());
        Assertions.assertEquals("seypxiutcxapz", model.properties().marketplaceDetails().offerDetails().termId());
        Assertions.assertEquals("petogebjox", model.properties().userDetails().firstName());
        Assertions.assertEquals("hvnh", model.properties().userDetails().lastName());
        Assertions.assertEquals("brqnkkzjcjb", model.properties().userDetails().emailAddress());
        Assertions.assertEquals("gaehvvibrxjjst", model.properties().userDetails().upn());
        Assertions.assertEquals("beitpkx", model.properties().userDetails().phoneNumber());
        Assertions.assertEquals("oobklftidgfcwq", model.properties().companyDetails().companyName());
        Assertions.assertEquals("imaq", model.properties().companyDetails().country());
        Assertions.assertEquals("hemjy", model.properties().companyDetails().officeAddress());
        Assertions.assertEquals("hujswtwkozzwcul", model.properties().companyDetails().businessPhone());
        Assertions.assertEquals("awpfajnjwltlwtjj", model.properties().companyDetails().domain());
        Assertions.assertEquals(5952236879587668656L, model.properties().companyDetails().numberOfEmployees());
        Assertions.assertEquals("hsnvkcdmxzrp", model.properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("aimlnwiaaom", model.properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals(SingleSignOnStates.ENABLE,
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("z",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("cse",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("wnpjhlfzswpchwa",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals("etwlyxgncx", model.properties().projectProperties().entityName());
        Assertions.assertEquals("x", model.properties().projectProperties().attributes().get(0).name());
        Assertions.assertEquals("h", model.properties().projectProperties().attributes().get(0).value());
        Assertions.assertEquals("civmmg", model.properties().projectProperties().regionId());
        Assertions.assertEquals(1865128114829410561L, model.properties().projectProperties().storage());
        Assertions.assertEquals(437881905, model.properties().projectProperties().pgVersion());
        Assertions.assertEquals(1054969690, model.properties().projectProperties().historyRetention());
        Assertions.assertEquals(64.64946218796175,
            model.properties().projectProperties().defaultEndpointSettings().autoscalingLimitMinCu());
        Assertions.assertEquals(91.58585052454501,
            model.properties().projectProperties().defaultEndpointSettings().autoscalingLimitMaxCu());
        Assertions.assertEquals("xgsg", model.properties().projectProperties().branch().entityName());
        Assertions.assertEquals("gaqvlgafcqusrd",
            model.properties().projectProperties().branch().attributes().get(0).name());
        Assertions.assertEquals("etnwsdtutnw",
            model.properties().projectProperties().branch().attributes().get(0).value());
        Assertions.assertEquals("uycvuzhyrmewip", model.properties().projectProperties().branch().projectId());
        Assertions.assertEquals("ekdxuku", model.properties().projectProperties().branch().parentId());
        Assertions.assertEquals("sjjxundxgketw", model.properties().projectProperties().branch().roleName());
        Assertions.assertEquals("hzjhf", model.properties().projectProperties().branch().databaseName());
        Assertions.assertEquals("qsxvmhf", model.properties().projectProperties().branch().roles().get(0).entityName());
        Assertions.assertEquals("hudypohyuemsl",
            model.properties().projectProperties().branch().roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("nsqyrpfoobrltt",
            model.properties().projectProperties().branch().roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("sjnygqdnfwqzdzgt",
            model.properties().projectProperties().branch().roles().get(0).branchId());
        Assertions.assertEquals("xhnfhqly",
            model.properties().projectProperties().branch().roles().get(0).permissions().get(0));
        Assertions.assertTrue(model.properties().projectProperties().branch().roles().get(0).isSuperUser());
        Assertions.assertEquals("ti", model.properties().projectProperties().branch().roles().get(0).roleName());
        Assertions.assertEquals("tfgle",
            model.properties().projectProperties().branch().databases().get(0).entityName());
        Assertions.assertEquals("ypq",
            model.properties().projectProperties().branch().databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("gsfjac",
            model.properties().projectProperties().branch().databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("m", model.properties().projectProperties().branch().databases().get(0).branchId());
        Assertions.assertEquals("sckdlp",
            model.properties().projectProperties().branch().databases().get(0).ownerName());
        Assertions.assertEquals("zrcxfailcfxwmdbo",
            model.properties().projectProperties().branch().databases().get(0).databaseName());
        Assertions.assertEquals("aeukm",
            model.properties().projectProperties().branch().endpoints().get(0).entityName());
        Assertions.assertEquals("meqwig",
            model.properties().projectProperties().branch().endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("ibudqwy",
            model.properties().projectProperties().branch().endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("vfcdisyirn",
            model.properties().projectProperties().branch().endpoints().get(0).projectId());
        Assertions.assertEquals("hcz", model.properties().projectProperties().branch().endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_ONLY,
            model.properties().projectProperties().branch().endpoints().get(0).endpointType());
        Assertions.assertEquals("zbujrt",
            model.properties().projectProperties().branch().endpoints().get(0).endpointId());
        Assertions.assertEquals("qvwre",
            model.properties().projectProperties().branch().endpoints().get(0).computeName());
        Assertions.assertEquals(81.090857593739,
            model.properties().projectProperties().branch().endpoints().get(0).size().autoscalingLimitMinCu());
        Assertions.assertEquals(68.71363175330217,
            model.properties().projectProperties().branch().endpoints().get(0).size().autoscalingLimitMaxCu());
        Assertions.assertEquals("wumuaslzk", model.properties().projectProperties().branch().branchId());
        Assertions.assertEquals("rwoycqucwyh", model.properties().projectProperties().branch().branch());
        Assertions.assertEquals("ixqnrkcxkjibnxm", model.properties().projectProperties().roles().get(0).entityName());
        Assertions.assertEquals("ttexoqqpwcyyufmh",
            model.properties().projectProperties().roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("uncuw",
            model.properties().projectProperties().roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("jrcg", model.properties().projectProperties().roles().get(0).branchId());
        Assertions.assertEquals("dcwboxjum",
            model.properties().projectProperties().roles().get(0).permissions().get(0));
        Assertions.assertTrue(model.properties().projectProperties().roles().get(0).isSuperUser());
        Assertions.assertEquals("uaubrj", model.properties().projectProperties().roles().get(0).roleName());
        Assertions.assertEquals("kyoqufdv", model.properties().projectProperties().databases().get(0).entityName());
        Assertions.assertEquals("dxotng",
            model.properties().projectProperties().databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("dgug",
            model.properties().projectProperties().databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("zbgomfgbeg", model.properties().projectProperties().databases().get(0).branchId());
        Assertions.assertEquals("gleohi", model.properties().projectProperties().databases().get(0).ownerName());
        Assertions.assertEquals("tnluankrr", model.properties().projectProperties().databases().get(0).databaseName());
        Assertions.assertEquals("vmqfoud", model.properties().projectProperties().endpoints().get(0).entityName());
        Assertions.assertEquals("xhugcm",
            model.properties().projectProperties().endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("k",
            model.properties().projectProperties().endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("bcysih", model.properties().projectProperties().endpoints().get(0).projectId());
        Assertions.assertEquals("qcwdhoh", model.properties().projectProperties().endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_WRITE,
            model.properties().projectProperties().endpoints().get(0).endpointType());
        Assertions.assertEquals("cdzsu", model.properties().projectProperties().endpoints().get(0).endpointId());
        Assertions.assertEquals("ohdxbzlmcmu", model.properties().projectProperties().endpoints().get(0).computeName());
        Assertions.assertEquals(51.78293369561197,
            model.properties().projectProperties().endpoints().get(0).size().autoscalingLimitMinCu());
        Assertions.assertEquals(96.80823122099127,
            model.properties().projectProperties().endpoints().get(0).size().autoscalingLimitMaxCu());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OrganizationResourceUpdate model
            = new OrganizationResourceUpdate()
                .withTags(mapOf("lcplc", "qdhcu", "tzbsrgnowcjhf", "khihihlhzds", "ctxmwoteyowcluq", "mvec", "wifzmp",
                    "vekqvgqo"))
                .withProperties(
                    new OrganizationResourceUpdateProperties()
                        .withMarketplaceDetails(new MarketplaceDetails().withSubscriptionId("vqikfxcvhrfsphu")
                            .withSubscriptionStatus(MarketplaceSubscriptionStatus.SUSPENDED)
                            .withOfferDetails(new OfferDetails().withPublisherId("ttikteusqczkvykl")
                                .withOfferId("ubyjaffmmf")
                                .withPlanId("lcqcuubgqibrt")
                                .withPlanName("metttwgd")
                                .withTermUnit("qxihhrmooi")
                                .withTermId("seypxiutcxapz")))
                        .withUserDetails(new UserDetails().withFirstName("petogebjox")
                            .withLastName("hvnh")
                            .withEmailAddress("brqnkkzjcjb")
                            .withUpn("gaehvvibrxjjst")
                            .withPhoneNumber("beitpkx"))
                        .withCompanyDetails(new CompanyDetails().withCompanyName("oobklftidgfcwq")
                            .withCountry("imaq")
                            .withOfficeAddress("hemjy")
                            .withBusinessPhone("hujswtwkozzwcul")
                            .withDomain("awpfajnjwltlwtjj")
                            .withNumberOfEmployees(5952236879587668656L))
                        .withPartnerOrganizationProperties(
                            new PartnerOrganizationProperties().withOrganizationId("hsnvkcdmxzrp")
                                .withOrganizationName("aimlnwiaaom")
                                .withSingleSignOnProperties(
                                    new SingleSignOnProperties().withSingleSignOnState(SingleSignOnStates.ENABLE)
                                        .withEnterpriseAppId("z")
                                        .withSingleSignOnUrl("cse")
                                        .withAadDomains(Arrays.asList("wnpjhlfzswpchwa", "fb"))))
                        .withProjectProperties(new ProjectProperties().withEntityName("etwlyxgncx")
                            .withAttributes(Arrays.asList(new Attributes().withName("x").withValue("h"),
                                new Attributes().withName("cporxvxcjz").withValue("qizxfpxtgqscjavf"),
                                new Attributes().withName("juhdqazkmtgguwpi").withValue("r")))
                            .withRegionId("civmmg")
                            .withStorage(1865128114829410561L)
                            .withPgVersion(437881905)
                            .withHistoryRetention(1054969690)
                            .withDefaultEndpointSettings(
                                new DefaultEndpointSettings().withAutoscalingLimitMinCu(64.64946218796175)
                                    .withAutoscalingLimitMaxCu(91.58585052454501))
                            .withBranch(new BranchProperties().withEntityName("xgsg")
                                .withAttributes(
                                    Arrays.asList(new Attributes().withName("gaqvlgafcqusrd").withValue("etnwsdtutnw")))
                                .withProjectId("uycvuzhyrmewip")
                                .withParentId("ekdxuku")
                                .withRoleName("sjjxundxgketw")
                                .withDatabaseName("hzjhf")
                                .withRoles(
                                    Arrays
                                        .asList(
                                            new NeonRoleProperties().withEntityName("qsxvmhf")
                                                .withAttributes(Arrays.asList(new Attributes().withName("hudypohyuemsl")
                                                    .withValue("nsqyrpfoobrltt")))
                                                .withBranchId("sjnygqdnfwqzdzgt")
                                                .withPermissions(Arrays.asList("xhnfhqly", "ijouwivkxoyzunb"))
                                                .withIsSuperUser(true)
                                                .withRoleName("ti"),
                                            new NeonRoleProperties().withEntityName("rkenx")
                                                .withAttributes(
                                                    Arrays.asList(new Attributes().withName("qvmmbn").withValue("qfr")))
                                                .withBranchId("lkzmegnitgvkxl")
                                                .withPermissions(
                                                    Arrays.asList("drf", "gcealzxwh", "ansym", "yqhlwigdivbkbx"))
                                                .withIsSuperUser(false)
                                                .withRoleName("ajuwas"),
                                            new NeonRoleProperties()
                                                .withEntityName("kgfmocwahpq")
                                                .withAttributes(Arrays.asList(
                                                    new Attributes().withName("bbjjidjksyxk")
                                                        .withValue("xvxevblbjednljla"),
                                                    new Attributes().withName("euaulxu").withValue("smjbnkppxyn"),
                                                    new Attributes().withName("nlsvxeiz").withValue("gwklnsr")))
                                                .withBranchId("feycxcktp")
                                                .withPermissions(
                                                    Arrays.asList("erteeammxqiekk", "zddrt", "g", "ojbmxv"))
                                                .withIsSuperUser(false)
                                                .withRoleName("fdeesvecuijpxtx")))
                                .withDatabases(Arrays
                                    .asList(
                                        new NeonDatabaseProperties().withEntityName("tfgle")
                                            .withAttributes(Arrays
                                                .asList(new Attributes().withName("ypq").withValue("gsfjac"),
                                                    new Attributes().withName("slhhxudbxv").withValue("d"),
                                                    new Attributes().withName("tnsi").withValue("ud")))
                                            .withBranchId("m")
                                            .withOwnerName("sckdlp")
                                            .withDatabaseName("zrcxfailcfxwmdbo"),
                                        new NeonDatabaseProperties().withEntityName("nhxk")
                                            .withAttributes(Arrays.asList(
                                                new Attributes().withName("vuljraaeranokqg")
                                                    .withValue("kkjqnvbroylaxxu"),
                                                new Attributes().withName("cdisd").withValue("sfjbjsvg")))
                                            .withBranchId("whryvycytdcl")
                                            .withOwnerName("ccknfnwmbtmvp")
                                            .withDatabaseName("jdhttzaefedxi"),
                                        new NeonDatabaseProperties().withEntityName("ghrjeuutl")
                                            .withAttributes(Arrays
                                                .asList(new Attributes().withName("vbwnhhtq").withValue("gehgppi"),
                                                    new Attributes().withName("ifhpf").withValue("oajvgcxtxjcs"),
                                                    new Attributes().withName("eafidltugsresm")
                                                        .withValue("ssjhoiftxfkf"),
                                                    new Attributes().withName("egprhptil").withValue("ucb")))
                                            .withBranchId("tgdqohmcwsldriz")
                                            .withOwnerName("pwbralllibphbqz")
                                            .withDatabaseName("zakakankjpdn"),
                                        new NeonDatabaseProperties().withEntityName("y")
                                            .withAttributes(Arrays.asList(
                                                new Attributes().withName("cjmeislstvasy").withValue("wxdzaumweoohgu")))
                                            .withBranchId("uzboyjathw")
                                            .withOwnerName("olbaemwmdx")
                                            .withDatabaseName("bwjscjpahlxveab")))
                                .withEndpoints(
                                    Arrays
                                        .asList(
                                            new EndpointProperties().withEntityName("aeukm")
                                                .withAttributes(Arrays.asList(
                                                    new Attributes().withName("meqwig").withValue("ibudqwy"),
                                                    new Attributes().withName("eb").withValue("ybpmzznrtffyaq"),
                                                    new Attributes().withName("tmhheioqa").withValue("hvseufuqyrx"),
                                                    new Attributes().withName("dlcgqlsismjqfr")
                                                        .withValue("dgamquhiosrsj")))
                                                .withProjectId("vfcdisyirn")
                                                .withBranchId("hcz")
                                                .withEndpointType(EndpointType.READ_ONLY)
                                                .withEndpointId("zbujrt")
                                                .withComputeName("qvwre")
                                                .withSize(new AutoscalingSize()
                                                    .withAutoscalingLimitMinCu(81.090857593739)
                                                    .withAutoscalingLimitMaxCu(68.71363175330217)),
                                            new EndpointProperties().withEntityName("vreljea")
                                                .withAttributes(Arrays.asList(
                                                    new Attributes().withName("pmjerbdkelvidiz")
                                                        .withValue("zsdbccxjmon"),
                                                    new Attributes().withName("dgnwncypuuwwlt").withValue("uqj")))
                                                .withProjectId("zenkeifzzhmkd")
                                                .withBranchId("vflyhbxcu")
                                                .withEndpointType(EndpointType.READ_WRITE)
                                                .withEndpointId("gsrboldforobw")
                                                .withComputeName("vizbfhfo")
                                                .withSize(
                                                    new AutoscalingSize()
                                                        .withAutoscalingLimitMinCu(84.48659759541806)
                                                        .withAutoscalingLimitMaxCu(38.51105429345376))))
                                .withBranchId("wumuaslzk")
                                .withBranch("rwoycqucwyh"))
                            .withRoles(
                                Arrays
                                    .asList(new NeonRoleProperties().withEntityName("ixqnrkcxkjibnxm")
                                        .withAttributes(Arrays
                                            .asList(new Attributes().withName("ttexoqqpwcyyufmh").withValue("uncuw"),
                                                new Attributes().withName("qspkcdqzhlctd").withValue("unqndyfpchrqb")))
                                        .withBranchId("jrcg")
                                        .withPermissions(Arrays.asList("dcwboxjum", "qqoli", "r"))
                                        .withIsSuperUser(true)
                                        .withRoleName("uaubrj")))
                            .withDatabases(Arrays.asList(
                                new NeonDatabaseProperties().withEntityName("kyoqufdv")
                                    .withAttributes(Arrays.asList(new Attributes().withName("dxotng").withValue("dgug"),
                                        new Attributes().withName("yzihgrkyuizabsn").withValue("fpphoj"),
                                        new Attributes().withName("evy").withValue("yhsgz")))
                                    .withBranchId("zbgomfgbeg")
                                    .withOwnerName("gleohi")
                                    .withDatabaseName("tnluankrr"),
                                new NeonDatabaseProperties().withEntityName("veh")
                                    .withAttributes(Arrays.asList(new Attributes().withName("tfaeyl").withValue("nm")))
                                    .withBranchId("vxirpghriypo")
                                    .withOwnerName("yhlqhykprlpyznu")
                                    .withDatabaseName("qdsmexiit")))
                            .withEndpoints(Arrays.asList(
                                new EndpointProperties().withEntityName("vmqfoud")
                                    .withAttributes(Arrays.asList(new Attributes().withName("xhugcm").withValue("k"),
                                        new Attributes().withName("vlgo").withValue("bmftpmdt"),
                                        new Attributes().withName("fjltfvnzcyjtotp").withValue("opv"),
                                        new Attributes().withName("bdb").withValue("qgqqihedsvqwthmk")))
                                    .withProjectId("bcysih")
                                    .withBranchId("qcwdhoh")
                                    .withEndpointType(EndpointType.READ_WRITE)
                                    .withEndpointId("cdzsu")
                                    .withComputeName("ohdxbzlmcmu")
                                    .withSize(new AutoscalingSize().withAutoscalingLimitMinCu(51.78293369561197)
                                        .withAutoscalingLimitMaxCu(96.80823122099127)),
                                new EndpointProperties().withEntityName("gvkzqkjjeokbze")
                                    .withAttributes(
                                        Arrays.asList(new Attributes().withName("xbkwv").withValue("gnzvdfbzdixzm")))
                                    .withProjectId("noda")
                                    .withBranchId("pqhe")
                                    .withEndpointType(EndpointType.READ_WRITE)
                                    .withEndpointId("mcgsbostzelnd")
                                    .withComputeName("tutmzl")
                                    .withSize(new AutoscalingSize().withAutoscalingLimitMinCu(30.49056364401831)
                                        .withAutoscalingLimitMaxCu(41.34820192784158))))));
        model = BinaryData.fromObject(model).toObject(OrganizationResourceUpdate.class);
        Assertions.assertEquals("qdhcu", model.tags().get("lcplc"));
        Assertions.assertEquals("vqikfxcvhrfsphu", model.properties().marketplaceDetails().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.SUSPENDED,
            model.properties().marketplaceDetails().subscriptionStatus());
        Assertions.assertEquals("ttikteusqczkvykl",
            model.properties().marketplaceDetails().offerDetails().publisherId());
        Assertions.assertEquals("ubyjaffmmf", model.properties().marketplaceDetails().offerDetails().offerId());
        Assertions.assertEquals("lcqcuubgqibrt", model.properties().marketplaceDetails().offerDetails().planId());
        Assertions.assertEquals("metttwgd", model.properties().marketplaceDetails().offerDetails().planName());
        Assertions.assertEquals("qxihhrmooi", model.properties().marketplaceDetails().offerDetails().termUnit());
        Assertions.assertEquals("seypxiutcxapz", model.properties().marketplaceDetails().offerDetails().termId());
        Assertions.assertEquals("petogebjox", model.properties().userDetails().firstName());
        Assertions.assertEquals("hvnh", model.properties().userDetails().lastName());
        Assertions.assertEquals("brqnkkzjcjb", model.properties().userDetails().emailAddress());
        Assertions.assertEquals("gaehvvibrxjjst", model.properties().userDetails().upn());
        Assertions.assertEquals("beitpkx", model.properties().userDetails().phoneNumber());
        Assertions.assertEquals("oobklftidgfcwq", model.properties().companyDetails().companyName());
        Assertions.assertEquals("imaq", model.properties().companyDetails().country());
        Assertions.assertEquals("hemjy", model.properties().companyDetails().officeAddress());
        Assertions.assertEquals("hujswtwkozzwcul", model.properties().companyDetails().businessPhone());
        Assertions.assertEquals("awpfajnjwltlwtjj", model.properties().companyDetails().domain());
        Assertions.assertEquals(5952236879587668656L, model.properties().companyDetails().numberOfEmployees());
        Assertions.assertEquals("hsnvkcdmxzrp", model.properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("aimlnwiaaom", model.properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals(SingleSignOnStates.ENABLE,
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("z",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("cse",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("wnpjhlfzswpchwa",
            model.properties().partnerOrganizationProperties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals("etwlyxgncx", model.properties().projectProperties().entityName());
        Assertions.assertEquals("x", model.properties().projectProperties().attributes().get(0).name());
        Assertions.assertEquals("h", model.properties().projectProperties().attributes().get(0).value());
        Assertions.assertEquals("civmmg", model.properties().projectProperties().regionId());
        Assertions.assertEquals(1865128114829410561L, model.properties().projectProperties().storage());
        Assertions.assertEquals(437881905, model.properties().projectProperties().pgVersion());
        Assertions.assertEquals(1054969690, model.properties().projectProperties().historyRetention());
        Assertions.assertEquals(64.64946218796175,
            model.properties().projectProperties().defaultEndpointSettings().autoscalingLimitMinCu());
        Assertions.assertEquals(91.58585052454501,
            model.properties().projectProperties().defaultEndpointSettings().autoscalingLimitMaxCu());
        Assertions.assertEquals("xgsg", model.properties().projectProperties().branch().entityName());
        Assertions.assertEquals("gaqvlgafcqusrd",
            model.properties().projectProperties().branch().attributes().get(0).name());
        Assertions.assertEquals("etnwsdtutnw",
            model.properties().projectProperties().branch().attributes().get(0).value());
        Assertions.assertEquals("uycvuzhyrmewip", model.properties().projectProperties().branch().projectId());
        Assertions.assertEquals("ekdxuku", model.properties().projectProperties().branch().parentId());
        Assertions.assertEquals("sjjxundxgketw", model.properties().projectProperties().branch().roleName());
        Assertions.assertEquals("hzjhf", model.properties().projectProperties().branch().databaseName());
        Assertions.assertEquals("qsxvmhf", model.properties().projectProperties().branch().roles().get(0).entityName());
        Assertions.assertEquals("hudypohyuemsl",
            model.properties().projectProperties().branch().roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("nsqyrpfoobrltt",
            model.properties().projectProperties().branch().roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("sjnygqdnfwqzdzgt",
            model.properties().projectProperties().branch().roles().get(0).branchId());
        Assertions.assertEquals("xhnfhqly",
            model.properties().projectProperties().branch().roles().get(0).permissions().get(0));
        Assertions.assertTrue(model.properties().projectProperties().branch().roles().get(0).isSuperUser());
        Assertions.assertEquals("ti", model.properties().projectProperties().branch().roles().get(0).roleName());
        Assertions.assertEquals("tfgle",
            model.properties().projectProperties().branch().databases().get(0).entityName());
        Assertions.assertEquals("ypq",
            model.properties().projectProperties().branch().databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("gsfjac",
            model.properties().projectProperties().branch().databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("m", model.properties().projectProperties().branch().databases().get(0).branchId());
        Assertions.assertEquals("sckdlp",
            model.properties().projectProperties().branch().databases().get(0).ownerName());
        Assertions.assertEquals("zrcxfailcfxwmdbo",
            model.properties().projectProperties().branch().databases().get(0).databaseName());
        Assertions.assertEquals("aeukm",
            model.properties().projectProperties().branch().endpoints().get(0).entityName());
        Assertions.assertEquals("meqwig",
            model.properties().projectProperties().branch().endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("ibudqwy",
            model.properties().projectProperties().branch().endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("vfcdisyirn",
            model.properties().projectProperties().branch().endpoints().get(0).projectId());
        Assertions.assertEquals("hcz", model.properties().projectProperties().branch().endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_ONLY,
            model.properties().projectProperties().branch().endpoints().get(0).endpointType());
        Assertions.assertEquals("zbujrt",
            model.properties().projectProperties().branch().endpoints().get(0).endpointId());
        Assertions.assertEquals("qvwre",
            model.properties().projectProperties().branch().endpoints().get(0).computeName());
        Assertions.assertEquals(81.090857593739,
            model.properties().projectProperties().branch().endpoints().get(0).size().autoscalingLimitMinCu());
        Assertions.assertEquals(68.71363175330217,
            model.properties().projectProperties().branch().endpoints().get(0).size().autoscalingLimitMaxCu());
        Assertions.assertEquals("wumuaslzk", model.properties().projectProperties().branch().branchId());
        Assertions.assertEquals("rwoycqucwyh", model.properties().projectProperties().branch().branch());
        Assertions.assertEquals("ixqnrkcxkjibnxm", model.properties().projectProperties().roles().get(0).entityName());
        Assertions.assertEquals("ttexoqqpwcyyufmh",
            model.properties().projectProperties().roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("uncuw",
            model.properties().projectProperties().roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("jrcg", model.properties().projectProperties().roles().get(0).branchId());
        Assertions.assertEquals("dcwboxjum",
            model.properties().projectProperties().roles().get(0).permissions().get(0));
        Assertions.assertTrue(model.properties().projectProperties().roles().get(0).isSuperUser());
        Assertions.assertEquals("uaubrj", model.properties().projectProperties().roles().get(0).roleName());
        Assertions.assertEquals("kyoqufdv", model.properties().projectProperties().databases().get(0).entityName());
        Assertions.assertEquals("dxotng",
            model.properties().projectProperties().databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("dgug",
            model.properties().projectProperties().databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("zbgomfgbeg", model.properties().projectProperties().databases().get(0).branchId());
        Assertions.assertEquals("gleohi", model.properties().projectProperties().databases().get(0).ownerName());
        Assertions.assertEquals("tnluankrr", model.properties().projectProperties().databases().get(0).databaseName());
        Assertions.assertEquals("vmqfoud", model.properties().projectProperties().endpoints().get(0).entityName());
        Assertions.assertEquals("xhugcm",
            model.properties().projectProperties().endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("k",
            model.properties().projectProperties().endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("bcysih", model.properties().projectProperties().endpoints().get(0).projectId());
        Assertions.assertEquals("qcwdhoh", model.properties().projectProperties().endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_WRITE,
            model.properties().projectProperties().endpoints().get(0).endpointType());
        Assertions.assertEquals("cdzsu", model.properties().projectProperties().endpoints().get(0).endpointId());
        Assertions.assertEquals("ohdxbzlmcmu", model.properties().projectProperties().endpoints().get(0).computeName());
        Assertions.assertEquals(51.78293369561197,
            model.properties().projectProperties().endpoints().get(0).size().autoscalingLimitMinCu());
        Assertions.assertEquals(96.80823122099127,
            model.properties().projectProperties().endpoints().get(0).size().autoscalingLimitMaxCu());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
