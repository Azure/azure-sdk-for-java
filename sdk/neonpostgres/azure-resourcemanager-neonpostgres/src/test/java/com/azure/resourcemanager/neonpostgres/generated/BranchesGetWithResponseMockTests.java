// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.neonpostgres.NeonPostgresManager;
import com.azure.resourcemanager.neonpostgres.models.Branch;
import com.azure.resourcemanager.neonpostgres.models.EndpointType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BranchesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"entityId\":\"qvumspbfsfeqbbe\",\"entityName\":\"cuq\",\"createdAt\":\"yyxmzrmtmvwituw\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"hcybwf\",\"value\":\"ppoxprcmv\"},{\"name\":\"uujxdii\",\"value\":\"moxrezsvavlrxi\"},{\"name\":\"jmoywlunpipcwybs\",\"value\":\"fncn\"}],\"projectId\":\"tpf\",\"parentId\":\"aebwfwhxorpwa\",\"roleName\":\"zwuge\",\"databaseName\":\"jfccylhtrht\",\"roles\":[{\"entityId\":\"jpwexcdrz\",\"entityName\":\"o\",\"createdAt\":\"zxezmnr\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"euxsphlokfpmijp\",\"value\":\"vzvfb\"},{\"name\":\"wbdq\",\"value\":\"fvcgnrglaqr\"},{\"name\":\"yambhb\",\"value\":\"febzxf\"}],\"branchId\":\"qutibhl\",\"permissions\":[\"trvrkpsab\",\"u\",\"vzm\"],\"isSuperUser\":true},{\"entityId\":\"ysvlpyeuukppd\",\"entityName\":\"qb\",\"createdAt\":\"xvhhyqq\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"grznmginmtsd\",\"value\":\"xch\"},{\"name\":\"kibmgjymn\",\"value\":\"jca\"}],\"branchId\":\"irwcqzoofjnqjsv\",\"permissions\":[\"bhtleberpy\",\"jeknfqnw\",\"j\"],\"isSuperUser\":false},{\"entityId\":\"kdnjrxgkrhwie\",\"entityName\":\"cpnowaw\",\"createdAt\":\"oehrguqlhfwafbj\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"guyfazbkocbygvt\",\"value\":\"rmxkbcjwwdxom\"},{\"name\":\"aw\",\"value\":\"pkeboozflyac\"}],\"branchId\":\"aeda\",\"permissions\":[\"clmgdtw\",\"abdxfkuzb\",\"jecooyvhtu\"],\"isSuperUser\":false},{\"entityId\":\"lniibncg\",\"entityName\":\"dvcdq\",\"createdAt\":\"tzbpyfao\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"tncwmhjobzrfpr\",\"value\":\"zdcqhyftcvb\"},{\"name\":\"wgwhgkg\",\"value\":\"o\"},{\"name\":\"uoorssatfybipufd\",\"value\":\"xuqbdqnasttuxvz\"},{\"name\":\"q\",\"value\":\"yopbtsixhgvb\"}],\"branchId\":\"mndzt\",\"permissions\":[\"jay\"],\"isSuperUser\":true}],\"databases\":[{\"entityId\":\"eibpgbrhbjdqkn\",\"entityName\":\"nmotpuwnnoh\",\"createdAt\":\"zngocfrjuypwyiul\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"ugkfhaxttpfsm\",\"value\":\"gsgh\"},{\"name\":\"ucumlddauqml\",\"value\":\"feothxu\"}],\"branchId\":\"igrjdljlkqhvkrbz\",\"ownerName\":\"astax\"}],\"endpoints\":[{\"entityId\":\"uul\",\"entityName\":\"l\",\"createdAt\":\"izwxvs\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"yyskyekgafxczv\",\"value\":\"cckwrtwle\"}],\"projectId\":\"veszrtlhpdhw\",\"branchId\":\"ctac\",\"endpointType\":\"read_write\"},{\"entityId\":\"fmbbfnv\",\"entityName\":\"itzovnkr\",\"createdAt\":\"kls\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"lcoqksyiib\",\"value\":\"yxwb\"},{\"name\":\"bu\",\"value\":\"avqdorbccqcd\"},{\"name\":\"thojvlirknucos\",\"value\":\"wrdtnagzlgpy\"},{\"name\":\"ixihzqj\",\"value\":\"tsmuydqftt\"}],\"projectId\":\"cybdueurgm\",\"branchId\":\"cp\",\"endpointType\":\"read_only\"}]},\"id\":\"ojermhzicsbfdjhy\",\"name\":\"a\",\"type\":\"nyukibx\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NeonPostgresManager manager = NeonPostgresManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Branch response = manager.branches()
            .getWithResponse("moxfablq", "pwbmwhria", "iwrycgnwplrrb", "hctsbbibti", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("cuq", response.properties().entityName());
        Assertions.assertEquals("hcybwf", response.properties().attributes().get(0).name());
        Assertions.assertEquals("ppoxprcmv", response.properties().attributes().get(0).value());
        Assertions.assertEquals("tpf", response.properties().projectId());
        Assertions.assertEquals("aebwfwhxorpwa", response.properties().parentId());
        Assertions.assertEquals("zwuge", response.properties().roleName());
        Assertions.assertEquals("jfccylhtrht", response.properties().databaseName());
        Assertions.assertEquals("o", response.properties().roles().get(0).entityName());
        Assertions.assertEquals("euxsphlokfpmijp", response.properties().roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("vzvfb", response.properties().roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("qutibhl", response.properties().roles().get(0).branchId());
        Assertions.assertEquals("trvrkpsab", response.properties().roles().get(0).permissions().get(0));
        Assertions.assertTrue(response.properties().roles().get(0).isSuperUser());
        Assertions.assertEquals("nmotpuwnnoh", response.properties().databases().get(0).entityName());
        Assertions.assertEquals("ugkfhaxttpfsm", response.properties().databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("gsgh", response.properties().databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("igrjdljlkqhvkrbz", response.properties().databases().get(0).branchId());
        Assertions.assertEquals("astax", response.properties().databases().get(0).ownerName());
        Assertions.assertEquals("l", response.properties().endpoints().get(0).entityName());
        Assertions.assertEquals("yyskyekgafxczv", response.properties().endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("cckwrtwle", response.properties().endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("veszrtlhpdhw", response.properties().endpoints().get(0).projectId());
        Assertions.assertEquals("ctac", response.properties().endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_WRITE, response.properties().endpoints().get(0).endpointType());
    }
}
