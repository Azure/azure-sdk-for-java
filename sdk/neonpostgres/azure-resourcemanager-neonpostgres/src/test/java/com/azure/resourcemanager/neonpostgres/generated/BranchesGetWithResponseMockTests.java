// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.neonpostgres.NeonPostgresManager;
import com.azure.resourcemanager.neonpostgres.models.Branch;
import com.azure.resourcemanager.neonpostgres.models.EndpointType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class BranchesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"entityId\":\"mq\",\"entityName\":\"cgaullfstyygjqpu\",\"createdAt\":\"wqgmhmqmiwxz\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"cqfgu\",\"value\":\"jnbxwbmwdukin\"},{\"name\":\"lxhgdekekzou\",\"value\":\"vewwpzrdwcgldo\"},{\"name\":\"gcandxfhhhtes\",\"value\":\"dqtdnnc\"},{\"name\":\"kpljdshvvfkdxc\",\"value\":\"yijjimhi\"}],\"projectId\":\"rqnjxmvvsduydwnw\",\"parentId\":\"uhhqldrdymnswxie\",\"roleName\":\"wqnghxnimvyuj\",\"databaseName\":\"gunnqgypuqt\",\"roles\":[{\"entityId\":\"uevqmvyumgmm\",\"entityName\":\"bsnznwgsqufm\",\"createdAt\":\"cyoseqcazisvbrqg\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"awepkwonrzpgh\",\"value\":\"rdtbgblxbuibrvj\"},{\"name\":\"taflvs\",\"value\":\"fjihvfjcqrttjfuq\"},{\"name\":\"mfjew\",\"value\":\"eqba\"}],\"branchId\":\"ostwy\",\"permissions\":[\"mw\"],\"isSuperUser\":false,\"roleName\":\"gwzz\",\"lastUpdated\":\"dtlcjgpvcqzv\",\"owns\":\"b\"}],\"databases\":[{\"entityId\":\"hlx\",\"entityName\":\"xvmdr\",\"createdAt\":\"n\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"zoymd\",\"value\":\"hhplkhww\"},{\"name\":\"katveqmgkcswzeyx\",\"value\":\"yearmhpwb\"},{\"name\":\"kl\",\"value\":\"smfasgtlv\"}],\"branchId\":\"poil\",\"ownerName\":\"ja\",\"databaseName\":\"cez\",\"lastUpdated\":\"ft\"}],\"endpoints\":[{\"entityId\":\"pokjyghztm\",\"entityName\":\"iwtp\",\"createdAt\":\"lcezswwvw\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"tvbfpfhr\",\"value\":\"ptsyqcjnqswxdo\"},{\"name\":\"umxquk\",\"value\":\"cdio\"}],\"projectId\":\"lqddnhfknebwedd\",\"branchId\":\"yzcwy\",\"endpointType\":\"read_write\",\"endpointId\":\"aqld\",\"computeName\":\"bnwvpaq\",\"status\":\"init\",\"lastActive\":\"bbigcfd\",\"size\":{\"autoscalingLimitMinCu\":34.89409784750727,\"autoscalingLimitMaxCu\":50.83754927535199}}],\"branchId\":\"mjyyr\",\"branch\":\"edwovocytjg\",\"dataSize\":\"ayokrwfmihw\",\"lastActive\":\"dhedbfobdczvoth\",\"computeHours\":\"hjaozvbwfcn\",\"protected\":true,\"isDefault\":true},\"id\":\"lhscmyh\",\"name\":\"hjvszfq\",\"type\":\"okndwpppqwojoevz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NeonPostgresManager manager = NeonPostgresManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Branch response = manager.branches()
            .getWithResponse("bzmfxlry", "fjxlpiy", "qnpfydrfb", "cnyxbyx", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("cgaullfstyygjqpu", response.properties().entityName());
        Assertions.assertEquals("cqfgu", response.properties().attributes().get(0).name());
        Assertions.assertEquals("jnbxwbmwdukin", response.properties().attributes().get(0).value());
        Assertions.assertEquals("rqnjxmvvsduydwnw", response.properties().projectId());
        Assertions.assertEquals("uhhqldrdymnswxie", response.properties().parentId());
        Assertions.assertEquals("wqnghxnimvyuj", response.properties().roleName());
        Assertions.assertEquals("gunnqgypuqt", response.properties().databaseName());
        Assertions.assertEquals("bsnznwgsqufm", response.properties().roles().get(0).entityName());
        Assertions.assertEquals("awepkwonrzpgh", response.properties().roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("rdtbgblxbuibrvj", response.properties().roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("ostwy", response.properties().roles().get(0).branchId());
        Assertions.assertEquals("mw", response.properties().roles().get(0).permissions().get(0));
        Assertions.assertFalse(response.properties().roles().get(0).isSuperUser());
        Assertions.assertEquals("gwzz", response.properties().roles().get(0).roleName());
        Assertions.assertEquals("xvmdr", response.properties().databases().get(0).entityName());
        Assertions.assertEquals("zoymd", response.properties().databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("hhplkhww", response.properties().databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("poil", response.properties().databases().get(0).branchId());
        Assertions.assertEquals("ja", response.properties().databases().get(0).ownerName());
        Assertions.assertEquals("cez", response.properties().databases().get(0).databaseName());
        Assertions.assertEquals("iwtp", response.properties().endpoints().get(0).entityName());
        Assertions.assertEquals("tvbfpfhr", response.properties().endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("ptsyqcjnqswxdo", response.properties().endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("lqddnhfknebwedd", response.properties().endpoints().get(0).projectId());
        Assertions.assertEquals("yzcwy", response.properties().endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_WRITE, response.properties().endpoints().get(0).endpointType());
        Assertions.assertEquals("aqld", response.properties().endpoints().get(0).endpointId());
        Assertions.assertEquals("bnwvpaq", response.properties().endpoints().get(0).computeName());
        Assertions.assertEquals(34.89409784750727,
            response.properties().endpoints().get(0).size().autoscalingLimitMinCu());
        Assertions.assertEquals(50.83754927535199,
            response.properties().endpoints().get(0).size().autoscalingLimitMaxCu());
        Assertions.assertEquals("mjyyr", response.properties().branchId());
        Assertions.assertEquals("edwovocytjg", response.properties().branch());
    }
}
