// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.neonpostgres.NeonPostgresManager;
import com.azure.resourcemanager.neonpostgres.models.CompanyDetails;
import com.azure.resourcemanager.neonpostgres.models.MarketplaceDetails;
import com.azure.resourcemanager.neonpostgres.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.neonpostgres.models.OfferDetails;
import com.azure.resourcemanager.neonpostgres.models.OrganizationProperties;
import com.azure.resourcemanager.neonpostgres.models.OrganizationResource;
import com.azure.resourcemanager.neonpostgres.models.PartnerOrganizationProperties;
import com.azure.resourcemanager.neonpostgres.models.SingleSignOnProperties;
import com.azure.resourcemanager.neonpostgres.models.SingleSignOnStates;
import com.azure.resourcemanager.neonpostgres.models.UserDetails;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"marketplaceDetails\":{\"subscriptionId\":\"phoxus\",\"subscriptionStatus\":\"Subscribed\",\"offerDetails\":{\"publisherId\":\"abgy\",\"offerId\":\"psbjta\",\"planId\":\"qugxywpmueefjzwf\",\"planName\":\"q\",\"termUnit\":\"ids\",\"termId\":\"onobglaocqx\"}},\"userDetails\":{\"firstName\":\"cmgyud\",\"lastName\":\"tlmoyrx\",\"emailAddress\":\"fudwpznt\",\"upn\":\"dzhlrq\",\"phoneNumber\":\"hckfrlhrx\"},\"companyDetails\":{\"companyName\":\"kyv\",\"country\":\"ca\",\"officeAddress\":\"z\",\"businessPhone\":\"zka\",\"domain\":\"uwbc\",\"numberOfEmployees\":4066142529374885485},\"provisioningState\":\"Succeeded\",\"partnerOrganizationProperties\":{\"organizationId\":\"seyvj\",\"organizationName\":\"srtslhspkdeem\",\"singleSignOnProperties\":{\"singleSignOnState\":\"Disable\",\"enterpriseAppId\":\"ag\",\"singleSignOnUrl\":\"t\",\"aadDomains\":[\"mqkrhahvljuahaqu\",\"c\",\"hmdua\"]}}},\"location\":\"exq\",\"tags\":{\"sr\":\"adm\",\"vxpvgomz\":\"r\"},\"id\":\"fmisg\",\"name\":\"bnbbeldawkz\",\"type\":\"ali\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NeonPostgresManager manager = NeonPostgresManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        OrganizationResource response = manager.organizations()
            .define("nyyazttbtwwrqpue")
            .withRegion("nmic")
            .withExistingResourceGroup("hsucoc")
            .withTags(mapOf("yfjfcnjbkcn", "ceoveilovno"))
            .withProperties(new OrganizationProperties()
                .withMarketplaceDetails(new MarketplaceDetails().withSubscriptionId("zywbiex")
                    .withSubscriptionStatus(MarketplaceSubscriptionStatus.UNSUBSCRIBED)
                    .withOfferDetails(new OfferDetails().withPublisherId("yueaxibxujwb")
                        .withOfferId("qwalmuzyoxaepd")
                        .withPlanId("zjancuxr")
                        .withPlanName("wbavxbniwdj")
                        .withTermUnit("zt")
                        .withTermId("bpg")))
                .withUserDetails(new UserDetails().withFirstName("ytxhp")
                    .withLastName("bzpfzab")
                    .withEmailAddress("cuh")
                    .withUpn("tcty")
                    .withPhoneNumber("klbb"))
                .withCompanyDetails(new CompanyDetails().withCompanyName("plwzbhvgyugu")
                    .withCountry("vmkfssxqu")
                    .withOfficeAddress("fpl")
                    .withBusinessPhone("gsxnkjzkdeslpv")
                    .withDomain("pwiyig")
                    .withNumberOfEmployees(8663930689287877123L))
                .withPartnerOrganizationProperties(
                    new PartnerOrganizationProperties().withOrganizationId("aiuebbaumnyqu")
                        .withOrganizationName("edeojnabc")
                        .withSingleSignOnProperties(
                            new SingleSignOnProperties().withSingleSignOnState(SingleSignOnStates.INITIAL)
                                .withEnterpriseAppId("xpsiebtfhvpes")
                                .withSingleSignOnUrl("skrdqmhjj")
                                .withAadDomains(Arrays.asList("ldwkyzxuutkn", "ws", "wsvlxotogtwrupqs")))))
            .create();

        Assertions.assertEquals("exq", response.location());
        Assertions.assertEquals("adm", response.tags().get("sr"));
        Assertions.assertEquals("phoxus", response.properties().marketplaceDetails().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.SUBSCRIBED,
            response.properties().marketplaceDetails().subscriptionStatus());
        Assertions.assertEquals("abgy", response.properties().marketplaceDetails().offerDetails().publisherId());
        Assertions.assertEquals("psbjta", response.properties().marketplaceDetails().offerDetails().offerId());
        Assertions.assertEquals("qugxywpmueefjzwf", response.properties().marketplaceDetails().offerDetails().planId());
        Assertions.assertEquals("q", response.properties().marketplaceDetails().offerDetails().planName());
        Assertions.assertEquals("ids", response.properties().marketplaceDetails().offerDetails().termUnit());
        Assertions.assertEquals("onobglaocqx", response.properties().marketplaceDetails().offerDetails().termId());
        Assertions.assertEquals("cmgyud", response.properties().userDetails().firstName());
        Assertions.assertEquals("tlmoyrx", response.properties().userDetails().lastName());
        Assertions.assertEquals("fudwpznt", response.properties().userDetails().emailAddress());
        Assertions.assertEquals("dzhlrq", response.properties().userDetails().upn());
        Assertions.assertEquals("hckfrlhrx", response.properties().userDetails().phoneNumber());
        Assertions.assertEquals("kyv", response.properties().companyDetails().companyName());
        Assertions.assertEquals("ca", response.properties().companyDetails().country());
        Assertions.assertEquals("z", response.properties().companyDetails().officeAddress());
        Assertions.assertEquals("zka", response.properties().companyDetails().businessPhone());
        Assertions.assertEquals("uwbc", response.properties().companyDetails().domain());
        Assertions.assertEquals(4066142529374885485L, response.properties().companyDetails().numberOfEmployees());
        Assertions.assertEquals("seyvj", response.properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("srtslhspkdeem",
            response.properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals(SingleSignOnStates.DISABLE,
            response.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("ag",
            response.properties().partnerOrganizationProperties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("t",
            response.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("mqkrhahvljuahaqu",
            response.properties().partnerOrganizationProperties().singleSignOnProperties().aadDomains().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
