// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.neonpostgres.NeonPostgresManager;
import com.azure.resourcemanager.neonpostgres.models.Attributes;
import com.azure.resourcemanager.neonpostgres.models.AutoscalingSize;
import com.azure.resourcemanager.neonpostgres.models.BranchProperties;
import com.azure.resourcemanager.neonpostgres.models.CompanyDetails;
import com.azure.resourcemanager.neonpostgres.models.DefaultEndpointSettings;
import com.azure.resourcemanager.neonpostgres.models.EndpointProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointType;
import com.azure.resourcemanager.neonpostgres.models.MarketplaceDetails;
import com.azure.resourcemanager.neonpostgres.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.neonpostgres.models.NeonDatabaseProperties;
import com.azure.resourcemanager.neonpostgres.models.NeonRoleProperties;
import com.azure.resourcemanager.neonpostgres.models.OfferDetails;
import com.azure.resourcemanager.neonpostgres.models.OrganizationProperties;
import com.azure.resourcemanager.neonpostgres.models.OrganizationResource;
import com.azure.resourcemanager.neonpostgres.models.PartnerOrganizationProperties;
import com.azure.resourcemanager.neonpostgres.models.ProjectProperties;
import com.azure.resourcemanager.neonpostgres.models.SingleSignOnProperties;
import com.azure.resourcemanager.neonpostgres.models.SingleSignOnStates;
import com.azure.resourcemanager.neonpostgres.models.UserDetails;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"marketplaceDetails\":{\"subscriptionId\":\"gejcvjkjyczc\",\"subscriptionStatus\":\"PendingFulfillmentStart\",\"offerDetails\":{\"publisherId\":\"gelajdyolje\",\"offerId\":\"yxqfmzsizzhravr\",\"planId\":\"jkjymgqbgcx\",\"planName\":\"qxgzxler\",\"termUnit\":\"merghski\",\"termId\":\"npupkcbkfuk\"}},\"userDetails\":{\"firstName\":\"jqnvtsdyd\",\"lastName\":\"kpafyaloowwziz\",\"emailAddress\":\"yuf\",\"upn\":\"zstifgufyj\",\"phoneNumber\":\"kqiyvnd\"},\"companyDetails\":{\"companyName\":\"kgwesy\",\"country\":\"qh\",\"officeAddress\":\"p\",\"businessPhone\":\"lpe\",\"domain\":\"zn\",\"numberOfEmployees\":956651065263010409},\"provisioningState\":\"Succeeded\",\"partnerOrganizationProperties\":{\"organizationId\":\"bbgsimwej\",\"organizationName\":\"wbkbpjzobdwb\",\"singleSignOnProperties\":{\"singleSignOnState\":\"Initial\",\"enterpriseAppId\":\"wkuh\",\"singleSignOnUrl\":\"tnaczkfwfatga\",\"aadDomains\":[\"nskivdwgt\",\"cumecsaaqg\",\"qbdiuycsbskowkr\",\"hzhrbkhtm\"]}},\"projectProperties\":{\"entityId\":\"iuasfgq\",\"entityName\":\"cyhfaimqvdru\",\"createdAt\":\"kgyfpeoehgfmqm\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"vlzjx\",\"value\":\"lhpevasyntvzjyie\"},{\"name\":\"bqrvvbqv\",\"value\":\"nmpecqxgiqasifub\"},{\"name\":\"snstl\",\"value\":\"wqpjnxjkhtupsvy\"},{\"name\":\"uweuiy\",\"value\":\"fwkztsms\"}],\"regionId\":\"evyllznfhkqyt\",\"storage\":2070478142933353803,\"pgVersion\":768546930,\"historyRetention\":1348790255,\"defaultEndpointSettings\":{\"autoscalingLimitMinCu\":47.06578888603388,\"autoscalingLimitMaxCu\":85.19957052903409},\"branch\":{\"entityId\":\"yc\",\"entityName\":\"vlo\",\"createdAt\":\"h\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"juqwqajq\",\"value\":\"zxpixhyo\"},{\"name\":\"pnfdbgsosciene\",\"value\":\"fvbennmfkbpjnr\"},{\"name\":\"ekwwnthropmdudsy\",\"value\":\"urz\"},{\"name\":\"vktjhffecqkoq\",\"value\":\"ouergaghp\"}],\"projectId\":\"xkpyehhfdyldh\",\"parentId\":\"edzfzqiyuqhtdere\",\"roleName\":\"oka\",\"databaseName\":\"whpjlw\",\"roles\":[{},{},{},{}],\"databases\":[{},{}],\"endpoints\":[{},{},{}],\"branchId\":\"rfo\",\"branch\":\"kewvmyifopxfj\",\"dataSize\":\"pdyzoutx\",\"lastActive\":\"tofhgnuywez\",\"computeHours\":\"vadga\",\"protected\":false,\"isDefault\":true},\"roles\":[{\"entityId\":\"yt\",\"entityName\":\"pvdnog\",\"createdAt\":\"lufbortb\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"axzs\",\"value\":\"bx\"},{\"name\":\"yjisskobq\",\"value\":\"clflioe\"},{\"name\":\"yhxess\",\"value\":\"vrkdpsqeq\"},{\"name\":\"bdxmd\",\"value\":\"esbrujbjpppktl\"}],\"branchId\":\"ib\",\"permissions\":[\"hieatnejr\"],\"isSuperUser\":true,\"roleName\":\"zqpl\",\"lastUpdated\":\"kihonik\",\"owns\":\"r\"},{\"entityId\":\"ffjilzfbpnt\",\"entityName\":\"kensckh\",\"createdAt\":\"carmoyfx\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"uqdndxlyk\",\"value\":\"kggapvdgtfpeer\"},{\"name\":\"cd\",\"value\":\"rnrnjrcufmbgacnr\"},{\"name\":\"fdtncmspsanma\",\"value\":\"eubkqiqmlf\"},{\"name\":\"hlq\",\"value\":\"skkqjmxptuei\"}],\"branchId\":\"ugkw\",\"permissions\":[\"mrpahuuonj\",\"kxukguehvvpxjoe\",\"cjo\"],\"isSuperUser\":true,\"roleName\":\"uidpmtonvhg\",\"lastUpdated\":\"tmeplhbpj\",\"owns\":\"pmummmkva\"}],\"databases\":[{\"entityId\":\"jiuaiqpmnufzh\",\"entityName\":\"hxwwuzdm\",\"createdAt\":\"wlvi\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"litqdsjipdvi\",\"value\":\"cotyx\"},{\"name\":\"riifefn\",\"value\":\"s\"}],\"branchId\":\"rqoemwsieeailwdq\",\"ownerName\":\"fydeotmfxlkd\",\"databaseName\":\"wgnamkuuy\",\"lastUpdated\":\"yuafixlxic\"}],\"endpoints\":[{\"entityId\":\"hdcfm\",\"entityName\":\"cfasfodropal\",\"createdAt\":\"gt\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"wgqrntaum\",\"value\":\"rcjlvkrkegtyczup\"},{\"name\":\"iyxlzmiydde\",\"value\":\"qzqvabmhvsex\"}],\"projectId\":\"etbapfczewxtrlqb\",\"branchId\":\"yazkjpir\",\"endpointType\":\"read_only\",\"endpointId\":\"bcz\",\"computeName\":\"yegbthms\",\"status\":\"init\",\"lastActive\":\"buiggrunozf\",\"size\":{\"autoscalingLimitMinCu\":78.63973739740634,\"autoscalingLimitMaxCu\":84.92348305396416}},{\"entityId\":\"oivsdwsngkrf\",\"entityName\":\"sc\",\"createdAt\":\"akmhz\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"fbwih\",\"value\":\"nnx\"}],\"projectId\":\"vynuqqkotauratn\",\"branchId\":\"ppfzsclef\",\"endpointType\":\"read_only\",\"endpointId\":\"tndqlmf\",\"computeName\":\"gnbbuypwovvvsfle\",\"status\":\"init\",\"lastActive\":\"qayrehjuqwva\",\"size\":{\"autoscalingLimitMinCu\":22.708710652697395,\"autoscalingLimitMaxCu\":92.90283746635578}}]}},\"location\":\"zihacen\",\"tags\":{\"wmjcwtewfhxw\":\"lxnqzubfonfdbgmk\",\"rehzlrynjpcha\":\"rk\",\"wevtjrieikmwla\":\"kaeplrajubowu\"},\"id\":\"klfnisyxgucbmt\",\"name\":\"ed\",\"type\":\"cnnstjcyy\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NeonPostgresManager manager = NeonPostgresManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        OrganizationResource response
            = manager.organizations()
                .define("n")
                .withRegion("sdfedsbgzancoin")
                .withExistingResourceGroup("qandmy")
                .withTags(mapOf("ufbxweiibnto", "ymcqidkltvdhq", "wud", "ovfnybydhuihao"))
                .withProperties(
                    new OrganizationProperties()
                        .withMarketplaceDetails(new MarketplaceDetails().withSubscriptionId("j")
                            .withSubscriptionStatus(MarketplaceSubscriptionStatus.SUBSCRIBED)
                            .withOfferDetails(new OfferDetails().withPublisherId("vsfbp")
                                .withOfferId("vzopaxmfmvsm")
                                .withPlanId("woxfaxdtnqifbsa")
                                .withPlanName("oiauesugmocpcj")
                                .withTermUnit("boel")
                                .withTermId("ttwfldsiuorini")))
                        .withUserDetails(new UserDetails().withFirstName("edpksriwmmtmqrxr")
                            .withLastName("vvyczy")
                            .withEmailAddress("ubt")
                            .withUpn("bxiqahragpxmibpl")
                            .withPhoneNumber("poyryefqmwovyzt"))
                        .withCompanyDetails(new CompanyDetails().withCompanyName("nomfpbjceegvyiez")
                            .withCountry("utnjillukkreh")
                            .withOfficeAddress("tmjoduifvu")
                            .withBusinessPhone("faryrvjlg")
                            .withDomain("zvj")
                            .withNumberOfEmployees(3362108043580051457L))
                        .withPartnerOrganizationProperties(
                            new PartnerOrganizationProperties().withOrganizationId("axqvjweiwtczkddn")
                                .withOrganizationName("ovbooqbmdqrxy")
                                .withSingleSignOnProperties(new SingleSignOnProperties()
                                    .withSingleSignOnState(SingleSignOnStates.DISABLE)
                                    .withEnterpriseAppId("scflwtjdtlri")
                                    .withSingleSignOnUrl("ooy")
                                    .withAadDomains(Arrays.asList("xdtzcqipsdudgco", "zomehxlantolam"))))
                        .withProjectProperties(new ProjectProperties().withEntityName("i")
                            .withAttributes(Arrays.asList(new Attributes().withName("wxoauwxsuy").withValue("znhrf")))
                            .withRegionId("lglh")
                            .withStorage(5234373842023742693L)
                            .withPgVersion(86093162)
                            .withHistoryRetention(2046724540)
                            .withDefaultEndpointSettings(
                                new DefaultEndpointSettings().withAutoscalingLimitMinCu(11.944832350318912)
                                    .withAutoscalingLimitMaxCu(18.29859178176295))
                            .withBranch(new BranchProperties().withEntityName("dkrhdccxbe")
                                .withAttributes(
                                    Arrays.asList(new Attributes().withName("fn").withValue("ndegjdydhqkkkbj")))
                                .withProjectId("kcat")
                                .withParentId("bhpowcnxtpzdlys")
                                .withRoleName("dtoakatpryt")
                                .withDatabaseName("hzbqfdpfawrptvcs")
                                .withRoles(Arrays.asList(new NeonRoleProperties(), new NeonRoleProperties()))
                                .withDatabases(Arrays.asList(new NeonDatabaseProperties()))
                                .withEndpoints(Arrays.asList(new EndpointProperties()))
                                .withBranchId("tbqgdirdamm")
                                .withBranch("jgcf"))
                            .withRoles(Arrays.asList(
                                new NeonRoleProperties().withEntityName("nxodwxmdajwiyg")
                                    .withAttributes(Arrays.asList(new Attributes().withName("d").withValue("cidt")))
                                    .withBranchId("amyyznmrgcdogcv")
                                    .withPermissions(Arrays.asList("ytoxuwhttnzq", "aqm", "bgszplusdek"))
                                    .withIsSuperUser(true)
                                    .withRoleName("mssgpgvokyejidbd"),
                                new NeonRoleProperties().withEntityName("vcp")
                                    .withAttributes(Arrays.asList(
                                        new Attributes().withName("vsolzwil").withValue("ngojfsqebuuxjx"),
                                        new Attributes().withName("fxfjwp").withValue("kktpmbmxbmbr"),
                                        new Attributes().withName("gzzxljbkhxsd").withValue("laumydmhweqjf")))
                                    .withBranchId("ydgtokvqbvwgl")
                                    .withPermissions(Arrays.asList("pvxakglhpsesrfga", "qiy"))
                                    .withIsSuperUser(true)
                                    .withRoleName("gdhyhgoq"),
                                new NeonRoleProperties().withEntityName("tivfwjlo")
                                    .withAttributes(
                                        Arrays.asList(new Attributes().withName("jvcfoczh").withValue("pejovt"),
                                            new Attributes().withName("wxn").withValue("whhnoyrzaa"),
                                            new Attributes().withName("ee").withValue("pmjen"),
                                            new Attributes().withName("jeatea").withValue("xc")))
                                    .withBranchId("oxdjxldnaryy")
                                    .withPermissions(
                                        Arrays.asList("kd", "lrndwdbvxvza", "edoyqxlunkft", "mcxqqxmyzklao"))
                                    .withIsSuperUser(false)
                                    .withRoleName("hrvmzrqrazadi"),
                                new NeonRoleProperties().withEntityName("b")
                                    .withAttributes(
                                        Arrays.asList(new Attributes().withName("qlxspmrj").withValue("tryldsxebuhsxr"),
                                            new Attributes().withName("nmgsdaluyckhef").withValue("b"),
                                            new Attributes().withName("s").withValue("uerbgpxebjl")))
                                    .withBranchId("caytujraxdtpryj")
                                    .withPermissions(Arrays.asList("nsewouxl", "msvvylj"))
                                    .withIsSuperUser(false)
                                    .withRoleName("pose")))
                            .withDatabases(Arrays.asList(
                                new NeonDatabaseProperties().withEntityName("raq")
                                    .withAttributes(Arrays.asList(
                                        new Attributes().withName("qlocvvujexaygl").withValue("rkgjnmzpaslavxjf"),
                                        new Attributes().withName("u").withValue("fpieidzlvs")))
                                    .withBranchId("ywjopac")
                                    .withOwnerName("hydv")
                                    .withDatabaseName("mfngpmillxgjsci"),
                                new NeonDatabaseProperties().withEntityName("bok")
                                    .withAttributes(
                                        Arrays.asList(new Attributes().withName("io").withValue("dweoftnorwaigsi")))
                                    .withBranchId("tqkmvjanxvzf")
                                    .withOwnerName("htjnwosstfjxtv")
                                    .withDatabaseName("xzqfcwr"),
                                new NeonDatabaseProperties().withEntityName("bsohcwhpyvdkgdet")
                                    .withAttributes(
                                        Arrays.asList(new Attributes().withName("uffiwjbctvbpzu").withValue("qjto"),
                                            new Attributes().withName("dxposcsl").withValue("wuusiecktybh"),
                                            new Attributes().withName("uxidhhxomilddxj")
                                                .withValue("d"),
                                            new Attributes().withName("gxwjwil").withValue("qrslaate")))
                                    .withBranchId("wuj")
                                    .withOwnerName("gxqgqwlxrhgtvhv")
                                    .withDatabaseName("qykbkkt")))
                            .withEndpoints(
                                Arrays
                                    .asList(
                                        new EndpointProperties().withEntityName("j")
                                            .withAttributes(Arrays.asList(
                                                new Attributes().withName("azg").withValue("jbhrpgiqsttcu"),
                                                new Attributes().withName("rcmmaixpqj").withValue("wifhbksldttohq"),
                                                new Attributes().withName("lna").withValue("h"),
                                                new Attributes().withName("gsiqikvllr").withValue("tpmglxkoikmtr")))
                                            .withProjectId("rqkzawbunmpak")
                                            .withBranchId("z")
                                            .withEndpointType(EndpointType.READ_WRITE)
                                            .withEndpointId("prnejzltkaszf")
                                            .withComputeName("xscbduxapgrcqe")
                                            .withSize(new AutoscalingSize().withAutoscalingLimitMinCu(67.19883682073186)
                                                .withAutoscalingLimitMaxCu(6.362462160102078))))))
                .create();

        Assertions.assertEquals("zihacen", response.location());
        Assertions.assertEquals("lxnqzubfonfdbgmk", response.tags().get("wmjcwtewfhxw"));
        Assertions.assertEquals("gejcvjkjyczc", response.properties().marketplaceDetails().subscriptionId());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START,
            response.properties().marketplaceDetails().subscriptionStatus());
        Assertions.assertEquals("gelajdyolje", response.properties().marketplaceDetails().offerDetails().publisherId());
        Assertions.assertEquals("yxqfmzsizzhravr", response.properties().marketplaceDetails().offerDetails().offerId());
        Assertions.assertEquals("jkjymgqbgcx", response.properties().marketplaceDetails().offerDetails().planId());
        Assertions.assertEquals("qxgzxler", response.properties().marketplaceDetails().offerDetails().planName());
        Assertions.assertEquals("merghski", response.properties().marketplaceDetails().offerDetails().termUnit());
        Assertions.assertEquals("npupkcbkfuk", response.properties().marketplaceDetails().offerDetails().termId());
        Assertions.assertEquals("jqnvtsdyd", response.properties().userDetails().firstName());
        Assertions.assertEquals("kpafyaloowwziz", response.properties().userDetails().lastName());
        Assertions.assertEquals("yuf", response.properties().userDetails().emailAddress());
        Assertions.assertEquals("zstifgufyj", response.properties().userDetails().upn());
        Assertions.assertEquals("kqiyvnd", response.properties().userDetails().phoneNumber());
        Assertions.assertEquals("kgwesy", response.properties().companyDetails().companyName());
        Assertions.assertEquals("qh", response.properties().companyDetails().country());
        Assertions.assertEquals("p", response.properties().companyDetails().officeAddress());
        Assertions.assertEquals("lpe", response.properties().companyDetails().businessPhone());
        Assertions.assertEquals("zn", response.properties().companyDetails().domain());
        Assertions.assertEquals(956651065263010409L, response.properties().companyDetails().numberOfEmployees());
        Assertions.assertEquals("bbgsimwej", response.properties().partnerOrganizationProperties().organizationId());
        Assertions.assertEquals("wbkbpjzobdwb",
            response.properties().partnerOrganizationProperties().organizationName());
        Assertions.assertEquals(SingleSignOnStates.INITIAL,
            response.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnState());
        Assertions.assertEquals("wkuh",
            response.properties().partnerOrganizationProperties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("tnaczkfwfatga",
            response.properties().partnerOrganizationProperties().singleSignOnProperties().singleSignOnUrl());
        Assertions.assertEquals("nskivdwgt",
            response.properties().partnerOrganizationProperties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals("cyhfaimqvdru", response.properties().projectProperties().entityName());
        Assertions.assertEquals("vlzjx", response.properties().projectProperties().attributes().get(0).name());
        Assertions.assertEquals("lhpevasyntvzjyie",
            response.properties().projectProperties().attributes().get(0).value());
        Assertions.assertEquals("evyllznfhkqyt", response.properties().projectProperties().regionId());
        Assertions.assertEquals(2070478142933353803L, response.properties().projectProperties().storage());
        Assertions.assertEquals(768546930, response.properties().projectProperties().pgVersion());
        Assertions.assertEquals(1348790255, response.properties().projectProperties().historyRetention());
        Assertions.assertEquals(47.06578888603388,
            response.properties().projectProperties().defaultEndpointSettings().autoscalingLimitMinCu());
        Assertions.assertEquals(85.19957052903409,
            response.properties().projectProperties().defaultEndpointSettings().autoscalingLimitMaxCu());
        Assertions.assertEquals("vlo", response.properties().projectProperties().branch().entityName());
        Assertions.assertEquals("juqwqajq",
            response.properties().projectProperties().branch().attributes().get(0).name());
        Assertions.assertEquals("zxpixhyo",
            response.properties().projectProperties().branch().attributes().get(0).value());
        Assertions.assertEquals("xkpyehhfdyldh", response.properties().projectProperties().branch().projectId());
        Assertions.assertEquals("edzfzqiyuqhtdere", response.properties().projectProperties().branch().parentId());
        Assertions.assertEquals("oka", response.properties().projectProperties().branch().roleName());
        Assertions.assertEquals("whpjlw", response.properties().projectProperties().branch().databaseName());
        Assertions.assertEquals("rfo", response.properties().projectProperties().branch().branchId());
        Assertions.assertEquals("kewvmyifopxfj", response.properties().projectProperties().branch().branch());
        Assertions.assertEquals("pvdnog", response.properties().projectProperties().roles().get(0).entityName());
        Assertions.assertEquals("axzs",
            response.properties().projectProperties().roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("bx",
            response.properties().projectProperties().roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("ib", response.properties().projectProperties().roles().get(0).branchId());
        Assertions.assertEquals("hieatnejr",
            response.properties().projectProperties().roles().get(0).permissions().get(0));
        Assertions.assertTrue(response.properties().projectProperties().roles().get(0).isSuperUser());
        Assertions.assertEquals("zqpl", response.properties().projectProperties().roles().get(0).roleName());
        Assertions.assertEquals("hxwwuzdm", response.properties().projectProperties().databases().get(0).entityName());
        Assertions.assertEquals("litqdsjipdvi",
            response.properties().projectProperties().databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("cotyx",
            response.properties().projectProperties().databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("rqoemwsieeailwdq",
            response.properties().projectProperties().databases().get(0).branchId());
        Assertions.assertEquals("fydeotmfxlkd",
            response.properties().projectProperties().databases().get(0).ownerName());
        Assertions.assertEquals("wgnamkuuy",
            response.properties().projectProperties().databases().get(0).databaseName());
        Assertions.assertEquals("cfasfodropal",
            response.properties().projectProperties().endpoints().get(0).entityName());
        Assertions.assertEquals("wgqrntaum",
            response.properties().projectProperties().endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("rcjlvkrkegtyczup",
            response.properties().projectProperties().endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("etbapfczewxtrlqb",
            response.properties().projectProperties().endpoints().get(0).projectId());
        Assertions.assertEquals("yazkjpir", response.properties().projectProperties().endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_ONLY,
            response.properties().projectProperties().endpoints().get(0).endpointType());
        Assertions.assertEquals("bcz", response.properties().projectProperties().endpoints().get(0).endpointId());
        Assertions.assertEquals("yegbthms", response.properties().projectProperties().endpoints().get(0).computeName());
        Assertions.assertEquals(78.63973739740634,
            response.properties().projectProperties().endpoints().get(0).size().autoscalingLimitMinCu());
        Assertions.assertEquals(84.92348305396416,
            response.properties().projectProperties().endpoints().get(0).size().autoscalingLimitMaxCu());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
