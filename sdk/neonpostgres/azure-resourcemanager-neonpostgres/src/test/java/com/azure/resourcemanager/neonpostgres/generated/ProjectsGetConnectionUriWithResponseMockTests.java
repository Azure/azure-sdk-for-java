// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.neonpostgres.NeonPostgresManager;
import com.azure.resourcemanager.neonpostgres.fluent.models.ConnectionUriPropertiesInner;
import com.azure.resourcemanager.neonpostgres.models.ConnectionUriProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ProjectsGetConnectionUriWithResponseMockTests {
    @Test
    public void testGetConnectionUriWithResponse() throws Exception {
        String responseStr
            = "{\"projectId\":\"eszyaqgomlbmfgge\",\"branchId\":\"fekcjjlwkye\",\"databaseName\":\"hhutpuln\",\"roleName\":\"cq\",\"endpointId\":\"m\",\"isPooled\":false,\"connectionStringUri\":\"inowrerjpxp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NeonPostgresManager manager = NeonPostgresManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ConnectionUriProperties response = manager.projects()
            .getConnectionUriWithResponse("eum", "jsvcdhlyw", "hookju",
                new ConnectionUriPropertiesInner().withProjectId("xezriw")
                    .withBranchId("ewapcqksaaa")
                    .withDatabaseName("j")
                    .withRoleName("itibenwsdf")
                    .withEndpointId("daah")
                    .withIsPooled(false),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("eszyaqgomlbmfgge", response.projectId());
        Assertions.assertEquals("fekcjjlwkye", response.branchId());
        Assertions.assertEquals("hhutpuln", response.databaseName());
        Assertions.assertEquals("cq", response.roleName());
        Assertions.assertEquals("m", response.endpointId());
        Assertions.assertFalse(response.isPooled());
    }
}
