// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.neonpostgres.NeonPostgresManager;
import com.azure.resourcemanager.neonpostgres.models.EndpointType;
import com.azure.resourcemanager.neonpostgres.models.Project;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ProjectsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"entityId\":\"disnuepywyjln\",\"entityName\":\"pxottd\",\"createdAt\":\"aocqibzjih\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"ph\",\"value\":\"yv\"},{\"name\":\"jw\",\"value\":\"w\"},{\"name\":\"qsratjhd\",\"value\":\"zybspijhfrzgdkk\"}],\"regionId\":\"v\",\"storage\":1532180759590076345,\"pgVersion\":1402758121,\"historyRetention\":313271072,\"defaultEndpointSettings\":{\"autoscalingLimitMinCu\":67.08368890829829,\"autoscalingLimitMaxCu\":17.210906246412183},\"branch\":{\"entityId\":\"wilzzhnijmriprlk\",\"entityName\":\"eyttlrcxiv\",\"createdAt\":\"kutpu\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"fluxynbpvz\",\"value\":\"qywauyqnjc\"}],\"projectId\":\"mocgjshg\",\"parentId\":\"a\",\"roleName\":\"wvixq\",\"databaseName\":\"gljkybsj\",\"roles\":[{\"entityId\":\"vtzqnrbctbhp\",\"entityName\":\"xpc\",\"createdAt\":\"dnyeita\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"y\",\"value\":\"zjahwriuomz\"},{\"name\":\"zfkiceevsaaxwsp\",\"value\":\"axikhfjqebglcxk\"},{\"name\":\"gzzromv\",\"value\":\"g\"}],\"branchId\":\"emtm\",\"permissions\":[\"fsvpink\"],\"isSuperUser\":true},{\"entityId\":\"qtdiswxspvckoj\",\"entityName\":\"bbg\",\"createdAt\":\"ft\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"pvpvd\",\"value\":\"lyt\"},{\"name\":\"ovqseusrfjbdx\",\"value\":\"fxnxml\"},{\"name\":\"muoswkjmdih\",\"value\":\"cy\"}],\"branchId\":\"zlwhbwzjnufzrfgm\",\"permissions\":[\"nn\",\"zrtftedzuubjt\"],\"isSuperUser\":true}],\"databases\":[{\"entityId\":\"tyjjvavdpwwobt\",\"entityName\":\"htitsffofwan\",\"createdAt\":\"k\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"azcg\",\"value\":\"dfriwgybj\"}],\"branchId\":\"zokscvg\",\"ownerName\":\"ixdgbyfgwewqkj\"},{\"entityId\":\"prwpxsoohu\",\"entityName\":\"lcsklt\",\"createdAt\":\"uugggzlfbgrd\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"rtmdylperpil\",\"value\":\"tjzgczfcm\"},{\"name\":\"pfb\",\"value\":\"detres\"},{\"name\":\"gvtshu\",\"value\":\"ft\"},{\"name\":\"ai\",\"value\":\"muqkevzgjypanhx\"}],\"branchId\":\"dxxzetwwzjwotn\",\"ownerName\":\"kf\"}],\"endpoints\":[{\"entityId\":\"rfo\",\"entityName\":\"wecr\",\"createdAt\":\"hpcselqxovp\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"kklvzrlrmlccmet\",\"value\":\"scz\"},{\"name\":\"vfqbqna\",\"value\":\"dsyenzsieuscpl\"},{\"name\":\"yvdgxlyzk\",\"value\":\"itdshezsvkolru\"}],\"projectId\":\"ovmozsayebraz\",\"branchId\":\"lpzbtzuykykipf\",\"endpointType\":\"read_only\"},{\"entityId\":\"pfnocm\",\"entityName\":\"zacfpztgazw\",\"createdAt\":\"ejgaaokct\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"kqzkcyzmff\",\"value\":\"gdyfcixrhlcqvhoe\"},{\"name\":\"goiutgw\",\"value\":\"mkahpqha\"},{\"name\":\"yntacihnco\",\"value\":\"mip\"},{\"name\":\"mliqmvlb\",\"value\":\"i\"}],\"projectId\":\"aqgrv\",\"branchId\":\"omxp\",\"endpointType\":\"read_only\"}]},\"roles\":[{\"entityId\":\"fjyi\",\"entityName\":\"ocwiqbuoutmpyzgl\",\"createdAt\":\"f\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"wwzvdaj\",\"value\":\"wnncfmaciqg\"},{\"name\":\"jrlhiqlwixvtboug\",\"value\":\"xtndopgjttbasua\"},{\"name\":\"ap\",\"value\":\"lndbeaqbkixv\"}],\"branchId\":\"wy\",\"permissions\":[\"bfqvzfjmspu\"],\"isSuperUser\":true},{\"entityId\":\"uzjljm\",\"entityName\":\"fkyezolgjzm\",\"createdAt\":\"uydoccnx\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"bui\",\"value\":\"dh\"},{\"name\":\"atecaa\",\"value\":\"sdohz\"},{\"name\":\"iucbda\",\"value\":\"mbwiinjdllwktl\"},{\"name\":\"pow\",\"value\":\"vvqxua\"}],\"branchId\":\"cqwulynkgfcfd\",\"permissions\":[\"si\",\"xxtclhuulri\",\"byokvjgbzsxe\",\"rsltt\"],\"isSuperUser\":true},{\"entityId\":\"djws\",\"entityName\":\"ardnagttpufpbpgn\",\"createdAt\":\"olhujbfwxiplkyso\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"rxslwhdmcv\",\"value\":\"tbbzj\"}],\"branchId\":\"vhuw\",\"permissions\":[\"pcqzg\"],\"isSuperUser\":true}],\"databases\":[{\"entityId\":\"cohm\",\"entityName\":\"vlrrskapbxwieexu\",\"createdAt\":\"derltfokyksyim\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"vkcxzznn\",\"value\":\"i\"}],\"branchId\":\"rsejegprkj\",\"ownerName\":\"wrjmwv\"},{\"entityId\":\"tu\",\"entityName\":\"xximwgxq\",\"createdAt\":\"ekotjgxi\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"fh\",\"value\":\"wvjaq\"},{\"name\":\"pbyynvskpajbm\",\"value\":\"eumexmjbxc\"}],\"branchId\":\"cwkqmtxape\",\"ownerName\":\"scrpilgftrqrej\"}],\"endpoints\":[{\"entityId\":\"uqimldahlfxl\",\"entityName\":\"ifmuadjnfsncsk\",\"createdAt\":\"oshjgcze\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"gztlcgc\",\"value\":\"j\"},{\"name\":\"hfjv\",\"value\":\"ywjzebecuvlbefvw\"},{\"name\":\"ljkxpylrwoxz\",\"value\":\"wpsyxjij\"}],\"projectId\":\"pdvrbkerdkdkga\",\"branchId\":\"wjxildfkcefeyg\",\"endpointType\":\"read_only\"},{\"entityId\":\"oisfmnaybdjn\",\"entityName\":\"mentqo\",\"createdAt\":\"why\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"lwivqt\",\"value\":\"wlhlsycoybajasq\"},{\"name\":\"bfajcywhjqwmchq\",\"value\":\"htfxcpupuki\"},{\"name\":\"mjzpwdlvwtiwsm\",\"value\":\"sa\"},{\"name\":\"nhqnampp\",\"value\":\"ltassaekewna\"}],\"projectId\":\"ajbk\",\"branchId\":\"lcyizyddcvxo\",\"endpointType\":\"read_write\"}]},\"id\":\"fsxxby\",\"name\":\"e\",\"type\":\"qlvge\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NeonPostgresManager manager = NeonPostgresManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Project> response
            = manager.projects().list("ipsejbsvsia", "eswhd", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("pxottd", response.iterator().next().properties().entityName());
        Assertions.assertEquals("ph", response.iterator().next().properties().attributes().get(0).name());
        Assertions.assertEquals("yv", response.iterator().next().properties().attributes().get(0).value());
        Assertions.assertEquals("v", response.iterator().next().properties().regionId());
        Assertions.assertEquals(1532180759590076345L, response.iterator().next().properties().storage());
        Assertions.assertEquals(1402758121, response.iterator().next().properties().pgVersion());
        Assertions.assertEquals(313271072, response.iterator().next().properties().historyRetention());
        Assertions.assertEquals(67.08368890829829,
            response.iterator().next().properties().defaultEndpointSettings().autoscalingLimitMinCu());
        Assertions.assertEquals(17.210906246412183,
            response.iterator().next().properties().defaultEndpointSettings().autoscalingLimitMaxCu());
        Assertions.assertEquals("eyttlrcxiv", response.iterator().next().properties().branch().entityName());
        Assertions.assertEquals("fluxynbpvz",
            response.iterator().next().properties().branch().attributes().get(0).name());
        Assertions.assertEquals("qywauyqnjc",
            response.iterator().next().properties().branch().attributes().get(0).value());
        Assertions.assertEquals("mocgjshg", response.iterator().next().properties().branch().projectId());
        Assertions.assertEquals("a", response.iterator().next().properties().branch().parentId());
        Assertions.assertEquals("wvixq", response.iterator().next().properties().branch().roleName());
        Assertions.assertEquals("gljkybsj", response.iterator().next().properties().branch().databaseName());
        Assertions.assertEquals("xpc", response.iterator().next().properties().branch().roles().get(0).entityName());
        Assertions.assertEquals("y",
            response.iterator().next().properties().branch().roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("zjahwriuomz",
            response.iterator().next().properties().branch().roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("emtm", response.iterator().next().properties().branch().roles().get(0).branchId());
        Assertions.assertEquals("fsvpink",
            response.iterator().next().properties().branch().roles().get(0).permissions().get(0));
        Assertions.assertTrue(response.iterator().next().properties().branch().roles().get(0).isSuperUser());
        Assertions.assertEquals("htitsffofwan",
            response.iterator().next().properties().branch().databases().get(0).entityName());
        Assertions.assertEquals("azcg",
            response.iterator().next().properties().branch().databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("dfriwgybj",
            response.iterator().next().properties().branch().databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("zokscvg",
            response.iterator().next().properties().branch().databases().get(0).branchId());
        Assertions.assertEquals("ixdgbyfgwewqkj",
            response.iterator().next().properties().branch().databases().get(0).ownerName());
        Assertions.assertEquals("wecr",
            response.iterator().next().properties().branch().endpoints().get(0).entityName());
        Assertions.assertEquals("kklvzrlrmlccmet",
            response.iterator().next().properties().branch().endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("scz",
            response.iterator().next().properties().branch().endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("ovmozsayebraz",
            response.iterator().next().properties().branch().endpoints().get(0).projectId());
        Assertions.assertEquals("lpzbtzuykykipf",
            response.iterator().next().properties().branch().endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_ONLY,
            response.iterator().next().properties().branch().endpoints().get(0).endpointType());
        Assertions.assertEquals("ocwiqbuoutmpyzgl",
            response.iterator().next().properties().roles().get(0).entityName());
        Assertions.assertEquals("wwzvdaj",
            response.iterator().next().properties().roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("wnncfmaciqg",
            response.iterator().next().properties().roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("wy", response.iterator().next().properties().roles().get(0).branchId());
        Assertions.assertEquals("bfqvzfjmspu",
            response.iterator().next().properties().roles().get(0).permissions().get(0));
        Assertions.assertTrue(response.iterator().next().properties().roles().get(0).isSuperUser());
        Assertions.assertEquals("vlrrskapbxwieexu",
            response.iterator().next().properties().databases().get(0).entityName());
        Assertions.assertEquals("vkcxzznn",
            response.iterator().next().properties().databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("i",
            response.iterator().next().properties().databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("rsejegprkj", response.iterator().next().properties().databases().get(0).branchId());
        Assertions.assertEquals("wrjmwv", response.iterator().next().properties().databases().get(0).ownerName());
        Assertions.assertEquals("ifmuadjnfsncsk",
            response.iterator().next().properties().endpoints().get(0).entityName());
        Assertions.assertEquals("gztlcgc",
            response.iterator().next().properties().endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("j",
            response.iterator().next().properties().endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("pdvrbkerdkdkga",
            response.iterator().next().properties().endpoints().get(0).projectId());
        Assertions.assertEquals("wjxildfkcefeyg",
            response.iterator().next().properties().endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_ONLY,
            response.iterator().next().properties().endpoints().get(0).endpointType());
    }
}
