// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.neonpostgres.models.Attributes;
import com.azure.resourcemanager.neonpostgres.models.BranchProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointType;
import com.azure.resourcemanager.neonpostgres.models.NeonDatabaseProperties;
import com.azure.resourcemanager.neonpostgres.models.NeonRoleProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class BranchPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BranchProperties model = BinaryData.fromString(
            "{\"entityId\":\"zs\",\"entityName\":\"bibsystawfsdjpvk\",\"createdAt\":\"bjxbkzbzk\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"abudurgk\",\"value\":\"kmokz\"},{\"name\":\"jjklff\",\"value\":\"mouwqlgzrfzeey\"},{\"name\":\"bizikayuhq\",\"value\":\"bjbsybb\"},{\"name\":\"wrv\",\"value\":\"ldgmfpgvmpip\"}],\"projectId\":\"ltha\",\"parentId\":\"x\",\"roleName\":\"mwutwbdsre\",\"databaseName\":\"drhneuyow\",\"roles\":[{\"entityId\":\"ytisibir\",\"entityName\":\"pikpz\",\"createdAt\":\"ejzanlfz\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"mbzonokix\",\"value\":\"jq\"},{\"name\":\"irgzp\",\"value\":\"rlazszrnw\"}],\"branchId\":\"indfpwpjyl\",\"permissions\":[\"lhflsjcdhszfjvf\",\"gofel\",\"a\",\"rqmq\"],\"isSuperUser\":true}],\"databases\":[{\"entityId\":\"iiojnal\",\"entityName\":\"fk\",\"createdAt\":\"vsexsowuelu\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"hxvrhmzkwpjg\",\"value\":\"wspughftqsxhqx\"},{\"name\":\"j\",\"value\":\"ukndxdigrjgu\"},{\"name\":\"fzdm\",\"value\":\"yqtfihwh\"}],\"branchId\":\"tzingamvpph\",\"ownerName\":\"zqzudph\"},{\"entityId\":\"mvdk\",\"entityName\":\"ynwcvtbv\",\"createdAt\":\"yhmtnvyqiat\",\"provisioningState\":\"Failed\",\"attributes\":[{\"name\":\"npwzcjaes\",\"value\":\"vvsccyajguq\"},{\"name\":\"hwyg\",\"value\":\"lvdnkfx\"},{\"name\":\"semdwzrmu\",\"value\":\"apfcqdpsq\"},{\"name\":\"qvpsvuoymg\",\"value\":\"celve\"}],\"branchId\":\"ypql\",\"ownerName\":\"eokerqwkyhkobopg\"},{\"entityId\":\"dkow\",\"entityName\":\"bqpc\",\"createdAt\":\"kbwcc\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"dw\",\"value\":\"lpqekf\"},{\"name\":\"nkhtjsyingw\",\"value\":\"qatmtdhtmdvy\"}],\"branchId\":\"ikdgszywkbir\",\"ownerName\":\"uzhlhkjoqrv\"},{\"entityId\":\"aatjinrvgoupmfi\",\"entityName\":\"fggjioolvr\",\"createdAt\":\"kvtkkg\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"ygvjayvblmh\",\"value\":\"k\"},{\"name\":\"uhbxvvy\",\"value\":\"gsopbyrqufegxu\"},{\"name\":\"wz\",\"value\":\"bnhlmc\"}],\"branchId\":\"p\",\"ownerName\":\"gitvg\"}],\"endpoints\":[{\"entityId\":\"ixkwmyijejveg\",\"entityName\":\"bpnaixexccbdre\",\"createdAt\":\"hcexdrrvqa\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"tpwijnh\",\"value\":\"jsvfycxzbfvoowv\"},{\"name\":\"vmtgjqppy\",\"value\":\"s\"}],\"projectId\":\"on\",\"branchId\":\"yhgfipnsx\",\"endpointType\":\"read_write\"},{\"entityId\":\"a\",\"entityName\":\"rrjreafxtsgu\",\"createdAt\":\"jglikkxwslolb\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"lmv\",\"value\":\"elfk\"},{\"name\":\"gplcrpwjxeznoigb\",\"value\":\"njwmwkpnbsazejj\"},{\"name\":\"qkagfhsxt\",\"value\":\"augzxnfaazpxdtn\"}],\"projectId\":\"mkqjj\",\"branchId\":\"uenvrkp\",\"endpointType\":\"read_write\"}]}")
            .toObject(BranchProperties.class);
        Assertions.assertEquals("bibsystawfsdjpvk", model.entityName());
        Assertions.assertEquals("abudurgk", model.attributes().get(0).name());
        Assertions.assertEquals("kmokz", model.attributes().get(0).value());
        Assertions.assertEquals("ltha", model.projectId());
        Assertions.assertEquals("x", model.parentId());
        Assertions.assertEquals("mwutwbdsre", model.roleName());
        Assertions.assertEquals("drhneuyow", model.databaseName());
        Assertions.assertEquals("pikpz", model.roles().get(0).entityName());
        Assertions.assertEquals("mbzonokix", model.roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("jq", model.roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("indfpwpjyl", model.roles().get(0).branchId());
        Assertions.assertEquals("lhflsjcdhszfjvf", model.roles().get(0).permissions().get(0));
        Assertions.assertTrue(model.roles().get(0).isSuperUser());
        Assertions.assertEquals("fk", model.databases().get(0).entityName());
        Assertions.assertEquals("hxvrhmzkwpjg", model.databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("wspughftqsxhqx", model.databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("tzingamvpph", model.databases().get(0).branchId());
        Assertions.assertEquals("zqzudph", model.databases().get(0).ownerName());
        Assertions.assertEquals("bpnaixexccbdre", model.endpoints().get(0).entityName());
        Assertions.assertEquals("tpwijnh", model.endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("jsvfycxzbfvoowv", model.endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("on", model.endpoints().get(0).projectId());
        Assertions.assertEquals("yhgfipnsx", model.endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_WRITE, model.endpoints().get(0).endpointType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BranchProperties model = new BranchProperties().withEntityName("bibsystawfsdjpvk")
            .withAttributes(Arrays.asList(new Attributes().withName("abudurgk").withValue("kmokz"),
                new Attributes().withName("jjklff").withValue("mouwqlgzrfzeey"),
                new Attributes().withName("bizikayuhq").withValue("bjbsybb"),
                new Attributes().withName("wrv").withValue("ldgmfpgvmpip")))
            .withProjectId("ltha")
            .withParentId("x")
            .withRoleName("mwutwbdsre")
            .withDatabaseName("drhneuyow")
            .withRoles(Arrays.asList(new NeonRoleProperties().withEntityName("pikpz")
                .withAttributes(Arrays.asList(new Attributes().withName("mbzonokix").withValue("jq"),
                    new Attributes().withName("irgzp").withValue("rlazszrnw")))
                .withBranchId("indfpwpjyl")
                .withPermissions(Arrays.asList("lhflsjcdhszfjvf", "gofel", "a", "rqmq"))
                .withIsSuperUser(true)))
            .withDatabases(Arrays.asList(
                new NeonDatabaseProperties().withEntityName("fk")
                    .withAttributes(Arrays.asList(new Attributes().withName("hxvrhmzkwpjg").withValue("wspughftqsxhqx"),
                        new Attributes().withName("j").withValue("ukndxdigrjgu"),
                        new Attributes().withName("fzdm").withValue("yqtfihwh")))
                    .withBranchId("tzingamvpph")
                    .withOwnerName("zqzudph"),
                new NeonDatabaseProperties().withEntityName("ynwcvtbv")
                    .withAttributes(Arrays.asList(new Attributes().withName("npwzcjaes").withValue("vvsccyajguq"),
                        new Attributes().withName("hwyg").withValue("lvdnkfx"),
                        new Attributes().withName("semdwzrmu").withValue("apfcqdpsq"),
                        new Attributes().withName("qvpsvuoymg").withValue("celve")))
                    .withBranchId("ypql")
                    .withOwnerName("eokerqwkyhkobopg"),
                new NeonDatabaseProperties().withEntityName("bqpc")
                    .withAttributes(Arrays.asList(new Attributes().withName("dw").withValue("lpqekf"),
                        new Attributes().withName("nkhtjsyingw").withValue("qatmtdhtmdvy")))
                    .withBranchId("ikdgszywkbir")
                    .withOwnerName("uzhlhkjoqrv"),
                new NeonDatabaseProperties().withEntityName("fggjioolvr")
                    .withAttributes(Arrays.asList(new Attributes().withName("ygvjayvblmh").withValue("k"),
                        new Attributes().withName("uhbxvvy").withValue("gsopbyrqufegxu"),
                        new Attributes().withName("wz").withValue("bnhlmc")))
                    .withBranchId("p")
                    .withOwnerName("gitvg")))
            .withEndpoints(Arrays.asList(
                new EndpointProperties().withEntityName("bpnaixexccbdre")
                    .withAttributes(Arrays.asList(new Attributes().withName("tpwijnh").withValue("jsvfycxzbfvoowv"),
                        new Attributes().withName("vmtgjqppy").withValue("s")))
                    .withProjectId("on")
                    .withBranchId("yhgfipnsx")
                    .withEndpointType(EndpointType.READ_WRITE),
                new EndpointProperties().withEntityName("rrjreafxtsgu")
                    .withAttributes(Arrays.asList(new Attributes().withName("lmv").withValue("elfk"),
                        new Attributes().withName("gplcrpwjxeznoigb").withValue("njwmwkpnbsazejj"),
                        new Attributes().withName("qkagfhsxt").withValue("augzxnfaazpxdtn")))
                    .withProjectId("mkqjj")
                    .withBranchId("uenvrkp")
                    .withEndpointType(EndpointType.READ_WRITE)));
        model = BinaryData.fromObject(model).toObject(BranchProperties.class);
        Assertions.assertEquals("bibsystawfsdjpvk", model.entityName());
        Assertions.assertEquals("abudurgk", model.attributes().get(0).name());
        Assertions.assertEquals("kmokz", model.attributes().get(0).value());
        Assertions.assertEquals("ltha", model.projectId());
        Assertions.assertEquals("x", model.parentId());
        Assertions.assertEquals("mwutwbdsre", model.roleName());
        Assertions.assertEquals("drhneuyow", model.databaseName());
        Assertions.assertEquals("pikpz", model.roles().get(0).entityName());
        Assertions.assertEquals("mbzonokix", model.roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("jq", model.roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("indfpwpjyl", model.roles().get(0).branchId());
        Assertions.assertEquals("lhflsjcdhszfjvf", model.roles().get(0).permissions().get(0));
        Assertions.assertTrue(model.roles().get(0).isSuperUser());
        Assertions.assertEquals("fk", model.databases().get(0).entityName());
        Assertions.assertEquals("hxvrhmzkwpjg", model.databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("wspughftqsxhqx", model.databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("tzingamvpph", model.databases().get(0).branchId());
        Assertions.assertEquals("zqzudph", model.databases().get(0).ownerName());
        Assertions.assertEquals("bpnaixexccbdre", model.endpoints().get(0).entityName());
        Assertions.assertEquals("tpwijnh", model.endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("jsvfycxzbfvoowv", model.endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("on", model.endpoints().get(0).projectId());
        Assertions.assertEquals("yhgfipnsx", model.endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_WRITE, model.endpoints().get(0).endpointType());
    }
}
