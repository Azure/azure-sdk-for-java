// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.neonpostgres.models.Attributes;
import com.azure.resourcemanager.neonpostgres.models.AutoscalingSize;
import com.azure.resourcemanager.neonpostgres.models.BranchProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointType;
import com.azure.resourcemanager.neonpostgres.models.NeonDatabaseProperties;
import com.azure.resourcemanager.neonpostgres.models.NeonRoleProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class BranchPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BranchProperties model = BinaryData.fromString(
            "{\"entityId\":\"okkqfqjbvleo\",\"entityName\":\"ml\",\"createdAt\":\"qtqzfavyv\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"aryeu\",\"value\":\"yjkqabqgzslesjcb\"}],\"projectId\":\"rnntiewdjcv\",\"parentId\":\"uwrbehwagoh\",\"roleName\":\"f\",\"databaseName\":\"mrqemvvhmx\",\"roles\":[{\"entityId\":\"futacoebjvewzc\",\"entityName\":\"nmwcpmgu\",\"createdAt\":\"draufactkah\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"j\",\"value\":\"iuxxpshneekulfg\"},{\"name\":\"lqubkwdlen\",\"value\":\"d\"},{\"name\":\"utujba\",\"value\":\"pjuohminyfl\"}],\"branchId\":\"rwm\",\"permissions\":[\"wpklvxw\",\"ygdxpgpqchis\",\"epn\",\"bjcrxgibbdaxco\"],\"isSuperUser\":true,\"roleName\":\"auorsukokw\",\"lastUpdated\":\"plhlvnuuepzlrp\",\"owns\":\"zsoldwey\"},{\"entityId\":\"dunvmnnrwrbiorkt\",\"entityName\":\"ywjhhgdnhx\",\"createdAt\":\"ivfomiloxgg\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"ndieuzaofj\",\"value\":\"hvcyyysfg\"}],\"branchId\":\"tcubiipuipwoqonm\",\"permissions\":[\"ekni\",\"shqvcimpev\",\"gmblrri\"],\"isSuperUser\":false,\"roleName\":\"dxsm\",\"lastUpdated\":\"cwrwfs\",\"owns\":\"fnynszqujizdvoqy\"}],\"databases\":[{\"entityId\":\"owbb\",\"entityName\":\"yavutpthjoxois\",\"createdAt\":\"ksbpimlqoljx\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"lxsffg\",\"value\":\"vizqzdwl\"}],\"branchId\":\"lyoupfgfbkju\",\"ownerName\":\"yhgk\",\"databaseName\":\"in\",\"lastUpdated\":\"owzfttsttkt\"},{\"entityId\":\"hbq\",\"entityName\":\"tx\",\"createdAt\":\"zukxitmmqtgqq\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"xrxc\",\"value\":\"juisavokqdzf\"}],\"branchId\":\"zivj\",\"ownerName\":\"rqttbajlkatnw\",\"databaseName\":\"iopid\",\"lastUpdated\":\"qfkuvscxkdmli\"},{\"entityId\":\"vibrxkpmloazuruo\",\"entityName\":\"goorbteo\",\"createdAt\":\"fhjxakvvjgs\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"lmywwtkgkxnyed\",\"value\":\"b\"}],\"branchId\":\"vudtjuewbcihx\",\"ownerName\":\"whcjyxcc\",\"databaseName\":\"vpayakkudzpx\",\"lastUpdated\":\"jplmagstcy\"},{\"entityId\":\"pfkyrkdbdgiogsj\",\"entityName\":\"nwqjnoba\",\"createdAt\":\"hdd\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"gfnmntfpmvmemfnc\",\"value\":\"dwvvba\"},{\"name\":\"xlllchp\",\"value\":\"db\"},{\"name\":\"evwrdnhfuk\",\"value\":\"vsjcswsmystuluqy\"},{\"name\":\"fcvlerch\",\"value\":\"qbmfpjbabwidf\"}],\"branchId\":\"sspuunnoxyhkx\",\"ownerName\":\"ddrihpf\",\"databaseName\":\"qcaaewdaomdjvl\",\"lastUpdated\":\"x\"}],\"endpoints\":[{\"entityId\":\"rmsgeivsiykzkd\",\"entityName\":\"jdxon\",\"createdAt\":\"oggculapz\",\"provisioningState\":\"Canceled\",\"attributes\":[{\"name\":\"ogtqxepnylbf\",\"value\":\"ajlyjtlvofqzhv\"},{\"name\":\"cib\",\"value\":\"fmo\"},{\"name\":\"uxrkjp\",\"value\":\"dwxf\"},{\"name\":\"wiivwzjbhyzsx\",\"value\":\"rkambt\"}],\"projectId\":\"egv\",\"branchId\":\"vuqeqvldspast\",\"endpointType\":\"read_only\",\"endpointId\":\"dmflv\",\"computeName\":\"tmjlx\",\"status\":\"active\",\"lastActive\":\"ozapeew\",\"size\":{\"autoscalingLimitMinCu\":86.49275680962089,\"autoscalingLimitMaxCu\":81.50799352692117}}],\"branchId\":\"wk\",\"branch\":\"iycslevuf\",\"dataSize\":\"tcktyhjtqedcgzu\",\"lastActive\":\"mmrqz\",\"computeHours\":\"rjvpglydzgkrvqee\",\"protected\":false,\"isDefault\":false}")
            .toObject(BranchProperties.class);
        Assertions.assertEquals("ml", model.entityName());
        Assertions.assertEquals("aryeu", model.attributes().get(0).name());
        Assertions.assertEquals("yjkqabqgzslesjcb", model.attributes().get(0).value());
        Assertions.assertEquals("rnntiewdjcv", model.projectId());
        Assertions.assertEquals("uwrbehwagoh", model.parentId());
        Assertions.assertEquals("f", model.roleName());
        Assertions.assertEquals("mrqemvvhmx", model.databaseName());
        Assertions.assertEquals("nmwcpmgu", model.roles().get(0).entityName());
        Assertions.assertEquals("j", model.roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("iuxxpshneekulfg", model.roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("rwm", model.roles().get(0).branchId());
        Assertions.assertEquals("wpklvxw", model.roles().get(0).permissions().get(0));
        Assertions.assertTrue(model.roles().get(0).isSuperUser());
        Assertions.assertEquals("auorsukokw", model.roles().get(0).roleName());
        Assertions.assertEquals("yavutpthjoxois", model.databases().get(0).entityName());
        Assertions.assertEquals("lxsffg", model.databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("vizqzdwl", model.databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("lyoupfgfbkju", model.databases().get(0).branchId());
        Assertions.assertEquals("yhgk", model.databases().get(0).ownerName());
        Assertions.assertEquals("in", model.databases().get(0).databaseName());
        Assertions.assertEquals("jdxon", model.endpoints().get(0).entityName());
        Assertions.assertEquals("ogtqxepnylbf", model.endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("ajlyjtlvofqzhv", model.endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("egv", model.endpoints().get(0).projectId());
        Assertions.assertEquals("vuqeqvldspast", model.endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_ONLY, model.endpoints().get(0).endpointType());
        Assertions.assertEquals("dmflv", model.endpoints().get(0).endpointId());
        Assertions.assertEquals("tmjlx", model.endpoints().get(0).computeName());
        Assertions.assertEquals(86.49275680962089, model.endpoints().get(0).size().autoscalingLimitMinCu());
        Assertions.assertEquals(81.50799352692117, model.endpoints().get(0).size().autoscalingLimitMaxCu());
        Assertions.assertEquals("wk", model.branchId());
        Assertions.assertEquals("iycslevuf", model.branch());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BranchProperties model = new BranchProperties().withEntityName("ml")
            .withAttributes(Arrays.asList(new Attributes().withName("aryeu").withValue("yjkqabqgzslesjcb")))
            .withProjectId("rnntiewdjcv")
            .withParentId("uwrbehwagoh")
            .withRoleName("f")
            .withDatabaseName("mrqemvvhmx")
            .withRoles(Arrays.asList(
                new NeonRoleProperties().withEntityName("nmwcpmgu")
                    .withAttributes(Arrays.asList(new Attributes().withName("j").withValue("iuxxpshneekulfg"),
                        new Attributes().withName("lqubkwdlen").withValue("d"),
                        new Attributes().withName("utujba").withValue("pjuohminyfl")))
                    .withBranchId("rwm")
                    .withPermissions(Arrays.asList("wpklvxw", "ygdxpgpqchis", "epn", "bjcrxgibbdaxco"))
                    .withIsSuperUser(true)
                    .withRoleName("auorsukokw"),
                new NeonRoleProperties().withEntityName("ywjhhgdnhx")
                    .withAttributes(Arrays.asList(new Attributes().withName("ndieuzaofj").withValue("hvcyyysfg")))
                    .withBranchId("tcubiipuipwoqonm")
                    .withPermissions(Arrays.asList("ekni", "shqvcimpev", "gmblrri"))
                    .withIsSuperUser(false)
                    .withRoleName("dxsm")))
            .withDatabases(Arrays.asList(
                new NeonDatabaseProperties().withEntityName("yavutpthjoxois")
                    .withAttributes(Arrays.asList(new Attributes().withName("lxsffg").withValue("vizqzdwl")))
                    .withBranchId("lyoupfgfbkju")
                    .withOwnerName("yhgk")
                    .withDatabaseName("in"),
                new NeonDatabaseProperties().withEntityName("tx")
                    .withAttributes(Arrays.asList(new Attributes().withName("xrxc").withValue("juisavokqdzf")))
                    .withBranchId("zivj")
                    .withOwnerName("rqttbajlkatnw")
                    .withDatabaseName("iopid"),
                new NeonDatabaseProperties().withEntityName("goorbteo")
                    .withAttributes(Arrays.asList(new Attributes().withName("lmywwtkgkxnyed").withValue("b")))
                    .withBranchId("vudtjuewbcihx")
                    .withOwnerName("whcjyxcc")
                    .withDatabaseName("vpayakkudzpx"),
                new NeonDatabaseProperties().withEntityName("nwqjnoba")
                    .withAttributes(Arrays.asList(new Attributes().withName("gfnmntfpmvmemfnc").withValue("dwvvba"),
                        new Attributes().withName("xlllchp").withValue("db"),
                        new Attributes().withName("evwrdnhfuk").withValue("vsjcswsmystuluqy"),
                        new Attributes().withName("fcvlerch").withValue("qbmfpjbabwidf")))
                    .withBranchId("sspuunnoxyhkx")
                    .withOwnerName("ddrihpf")
                    .withDatabaseName("qcaaewdaomdjvl")))
            .withEndpoints(Arrays.asList(new EndpointProperties().withEntityName("jdxon")
                .withAttributes(Arrays.asList(new Attributes().withName("ogtqxepnylbf").withValue("ajlyjtlvofqzhv"),
                    new Attributes().withName("cib").withValue("fmo"),
                    new Attributes().withName("uxrkjp").withValue("dwxf"),
                    new Attributes().withName("wiivwzjbhyzsx").withValue("rkambt")))
                .withProjectId("egv")
                .withBranchId("vuqeqvldspast")
                .withEndpointType(EndpointType.READ_ONLY)
                .withEndpointId("dmflv")
                .withComputeName("tmjlx")
                .withSize(new AutoscalingSize().withAutoscalingLimitMinCu(86.49275680962089)
                    .withAutoscalingLimitMaxCu(81.50799352692117))))
            .withBranchId("wk")
            .withBranch("iycslevuf");
        model = BinaryData.fromObject(model).toObject(BranchProperties.class);
        Assertions.assertEquals("ml", model.entityName());
        Assertions.assertEquals("aryeu", model.attributes().get(0).name());
        Assertions.assertEquals("yjkqabqgzslesjcb", model.attributes().get(0).value());
        Assertions.assertEquals("rnntiewdjcv", model.projectId());
        Assertions.assertEquals("uwrbehwagoh", model.parentId());
        Assertions.assertEquals("f", model.roleName());
        Assertions.assertEquals("mrqemvvhmx", model.databaseName());
        Assertions.assertEquals("nmwcpmgu", model.roles().get(0).entityName());
        Assertions.assertEquals("j", model.roles().get(0).attributes().get(0).name());
        Assertions.assertEquals("iuxxpshneekulfg", model.roles().get(0).attributes().get(0).value());
        Assertions.assertEquals("rwm", model.roles().get(0).branchId());
        Assertions.assertEquals("wpklvxw", model.roles().get(0).permissions().get(0));
        Assertions.assertTrue(model.roles().get(0).isSuperUser());
        Assertions.assertEquals("auorsukokw", model.roles().get(0).roleName());
        Assertions.assertEquals("yavutpthjoxois", model.databases().get(0).entityName());
        Assertions.assertEquals("lxsffg", model.databases().get(0).attributes().get(0).name());
        Assertions.assertEquals("vizqzdwl", model.databases().get(0).attributes().get(0).value());
        Assertions.assertEquals("lyoupfgfbkju", model.databases().get(0).branchId());
        Assertions.assertEquals("yhgk", model.databases().get(0).ownerName());
        Assertions.assertEquals("in", model.databases().get(0).databaseName());
        Assertions.assertEquals("jdxon", model.endpoints().get(0).entityName());
        Assertions.assertEquals("ogtqxepnylbf", model.endpoints().get(0).attributes().get(0).name());
        Assertions.assertEquals("ajlyjtlvofqzhv", model.endpoints().get(0).attributes().get(0).value());
        Assertions.assertEquals("egv", model.endpoints().get(0).projectId());
        Assertions.assertEquals("vuqeqvldspast", model.endpoints().get(0).branchId());
        Assertions.assertEquals(EndpointType.READ_ONLY, model.endpoints().get(0).endpointType());
        Assertions.assertEquals("dmflv", model.endpoints().get(0).endpointId());
        Assertions.assertEquals("tmjlx", model.endpoints().get(0).computeName());
        Assertions.assertEquals(86.49275680962089, model.endpoints().get(0).size().autoscalingLimitMinCu());
        Assertions.assertEquals(81.50799352692117, model.endpoints().get(0).size().autoscalingLimitMaxCu());
        Assertions.assertEquals("wk", model.branchId());
        Assertions.assertEquals("iycslevuf", model.branch());
    }
}
