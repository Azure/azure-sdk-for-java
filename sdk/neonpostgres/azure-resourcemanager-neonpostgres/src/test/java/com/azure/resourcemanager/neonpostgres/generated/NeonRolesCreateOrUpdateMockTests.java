// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.neonpostgres.NeonPostgresManager;
import com.azure.resourcemanager.neonpostgres.models.Attributes;
import com.azure.resourcemanager.neonpostgres.models.NeonRole;
import com.azure.resourcemanager.neonpostgres.models.NeonRoleProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NeonRolesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"entityId\":\"nsbqoitwhmuc\",\"entityName\":\"uhcxy\",\"createdAt\":\"hyklelyqdvpqf\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"udusdmtxqlefnohe\",\"value\":\"wvfopkyllrey\"},{\"name\":\"nj\",\"value\":\"w\"},{\"name\":\"msfwtwrsvevcneq\",\"value\":\"wxhqhgkh\"},{\"name\":\"bzvulqevvjncpmy\",\"value\":\"t\"}],\"branchId\":\"dmvghcmi\",\"permissions\":[\"wkfefbcyjr\",\"alqeebudfyim\"],\"isSuperUser\":true,\"roleName\":\"zktomsgo\",\"lastUpdated\":\"lqwbywaazba\",\"owns\":\"ekfz\"},\"id\":\"n\",\"name\":\"bfb\",\"type\":\"t\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NeonPostgresManager manager = NeonPostgresManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        NeonRole response = manager.neonRoles()
            .define("upqtzckj")
            .withExistingBranche("ekh", "dbyhqtzcvim", "wckozvlf", "mtrtsv")
            .withProperties(new NeonRoleProperties().withEntityName("cqzahgtvbgdob")
                .withAttributes(Arrays.asList(new Attributes().withName("qbmxqf").withValue("vznjqswshesgcsqo"),
                    new Attributes().withName("ecxlng").withValue("ufpiz")))
                .withBranchId("mfxzspf")
                .withPermissions(Arrays.asList("la", "ipplxgt", "um", "ty"))
                .withIsSuperUser(true)
                .withRoleName("rznlaxo"))
            .create();

        Assertions.assertEquals("uhcxy", response.properties().entityName());
        Assertions.assertEquals("udusdmtxqlefnohe", response.properties().attributes().get(0).name());
        Assertions.assertEquals("wvfopkyllrey", response.properties().attributes().get(0).value());
        Assertions.assertEquals("dmvghcmi", response.properties().branchId());
        Assertions.assertEquals("wkfefbcyjr", response.properties().permissions().get(0));
        Assertions.assertTrue(response.properties().isSuperUser());
        Assertions.assertEquals("zktomsgo", response.properties().roleName());
    }
}
