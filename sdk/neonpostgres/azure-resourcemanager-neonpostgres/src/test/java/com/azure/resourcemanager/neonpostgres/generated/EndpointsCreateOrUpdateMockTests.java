// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.neonpostgres.NeonPostgresManager;
import com.azure.resourcemanager.neonpostgres.models.Attributes;
import com.azure.resourcemanager.neonpostgres.models.AutoscalingSize;
import com.azure.resourcemanager.neonpostgres.models.Endpoint;
import com.azure.resourcemanager.neonpostgres.models.EndpointProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class EndpointsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"entityId\":\"smg\",\"entityName\":\"icttr\",\"createdAt\":\"vvjmxokxx\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"jrzvlc\",\"value\":\"vqxdemklphx\"},{\"name\":\"wwlojkbgnf\",\"value\":\"rzjv\"},{\"name\":\"sunhaevlah\",\"value\":\"czywywuahwc\"}],\"projectId\":\"ewcnnaaxqjfdajr\",\"branchId\":\"imomggewdqbxex\",\"endpointType\":\"read_only\",\"endpointId\":\"vussuqks\",\"computeName\":\"sfx\",\"status\":\"init\",\"lastActive\":\"byeywpmohnrtli\",\"size\":{\"autoscalingLimitMinCu\":62.421153310128105,\"autoscalingLimitMaxCu\":18.390865453610573}},\"id\":\"kqrfbgynzfwvzdt\",\"name\":\"qj\",\"type\":\"yqxuhgka\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NeonPostgresManager manager = NeonPostgresManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Endpoint response = manager.endpoints()
            .define("wtgntimznupb")
            .withExistingBranche("dpiov", "lhrwyakzuafapwx", "vdeatjiobnirg", "extqd")
            .withProperties(new EndpointProperties().withEntityName("sqvhe")
                .withAttributes(Arrays.asList(new Attributes().withName("dhdgdiwmlgstm").withValue("etqjisjm"),
                    new Attributes().withName("lzcaqfkakhgkrvt").withValue("ycvytv"),
                    new Attributes().withName("ejqaw").withValue("usqpfzxkczbd")))
                .withProjectId("bb")
                .withBranchId("hjbozvoo")
                .withEndpointType(EndpointType.READ_ONLY)
                .withEndpointId("nh")
                .withComputeName("cyuzlybqscibv")
                .withSize(new AutoscalingSize().withAutoscalingLimitMinCu(87.848671509364)
                    .withAutoscalingLimitMaxCu(77.62741655539035)))
            .create();

        Assertions.assertEquals("icttr", response.properties().entityName());
        Assertions.assertEquals("jrzvlc", response.properties().attributes().get(0).name());
        Assertions.assertEquals("vqxdemklphx", response.properties().attributes().get(0).value());
        Assertions.assertEquals("ewcnnaaxqjfdajr", response.properties().projectId());
        Assertions.assertEquals("imomggewdqbxex", response.properties().branchId());
        Assertions.assertEquals(EndpointType.READ_ONLY, response.properties().endpointType());
        Assertions.assertEquals("vussuqks", response.properties().endpointId());
        Assertions.assertEquals("sfx", response.properties().computeName());
        Assertions.assertEquals(62.421153310128105, response.properties().size().autoscalingLimitMinCu());
        Assertions.assertEquals(18.390865453610573, response.properties().size().autoscalingLimitMaxCu());
    }
}
