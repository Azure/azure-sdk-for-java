// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.neonpostgres.NeonPostgresManager;
import com.azure.resourcemanager.neonpostgres.models.Attributes;
import com.azure.resourcemanager.neonpostgres.models.Endpoint;
import com.azure.resourcemanager.neonpostgres.models.EndpointProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class EndpointsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"entityId\":\"yioqe\",\"entityName\":\"w\",\"createdAt\":\"szzgyk\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"anvmwdv\",\"value\":\"jqcrbk\"},{\"name\":\"mpnbnfgyweoj\",\"value\":\"epgcmahiwf\"},{\"name\":\"yawkch\",\"value\":\"apitskshfyftt\"},{\"name\":\"bjepzwhj\",\"value\":\"nfd\"}],\"projectId\":\"ggcj\",\"branchId\":\"hblivwehsudym\",\"endpointType\":\"read_write\"},\"id\":\"dosmbn\",\"name\":\"kqlgxzduv\",\"type\":\"dmxexatmdmnrsenx\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NeonPostgresManager manager = NeonPostgresManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Endpoint response = manager.endpoints()
            .define("ecwzvcmbpwdluda")
            .withExistingBranche("ccpumddhgajkr", "yddt", "fcudvafnbfbqv", "nqnxhgkordwzej")
            .withProperties(new EndpointProperties().withEntityName("zldzchubagwnl")
                .withAttributes(Arrays.asList(new Attributes().withName("rbzakpjtcqr").withValue("qpojpsucmximc"),
                    new Attributes().withName("qxynqj").withValue("satkyvscb")))
                .withProjectId("gcru")
                .withBranchId("hirc")
                .withEndpointType(EndpointType.READ_ONLY))
            .create();

        Assertions.assertEquals("w", response.properties().entityName());
        Assertions.assertEquals("anvmwdv", response.properties().attributes().get(0).name());
        Assertions.assertEquals("jqcrbk", response.properties().attributes().get(0).value());
        Assertions.assertEquals("ggcj", response.properties().projectId());
        Assertions.assertEquals("hblivwehsudym", response.properties().branchId());
        Assertions.assertEquals(EndpointType.READ_WRITE, response.properties().endpointType());
    }
}
