// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.neonpostgres.NeonPostgresManager;
import com.azure.resourcemanager.neonpostgres.models.Attributes;
import com.azure.resourcemanager.neonpostgres.models.AutoscalingSize;
import com.azure.resourcemanager.neonpostgres.models.Endpoint;
import com.azure.resourcemanager.neonpostgres.models.EndpointProperties;
import com.azure.resourcemanager.neonpostgres.models.EndpointType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class EndpointsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"entityId\":\"payxopqiwuzrgq\",\"entityName\":\"jfkgb\",\"createdAt\":\"qjobsynnen\",\"provisioningState\":\"Succeeded\",\"attributes\":[{\"name\":\"hd\",\"value\":\"e\"}],\"projectId\":\"xjwfudmpfhwyppht\",\"branchId\":\"ntc\",\"endpointType\":\"read_only\",\"endpointId\":\"bb\",\"computeName\":\"aecct\",\"status\":\"active\",\"lastActive\":\"pvjrdspkvrmpr\",\"size\":{\"autoscalingLimitMinCu\":89.40386192453474,\"autoscalingLimitMaxCu\":51.63326553487093}},\"id\":\"wiyyeohgmcmdjmv\",\"name\":\"hwfnugslvfzziox\",\"type\":\"g\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        NeonPostgresManager manager = NeonPostgresManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Endpoint response = manager.endpoints()
            .define("a")
            .withExistingBranche("bdj", "ljgxot", "dam", "i")
            .withProperties(new EndpointProperties().withEntityName("dlnoc")
                .withAttributes(Arrays.asList(new Attributes().withName("wm").withValue("ksr"),
                    new Attributes().withName("mspppoeszthjt").withValue("yjskdiylg"),
                    new Attributes().withName("zuqix").withValue("sybqowgvmxwbo")))
                .withProjectId("dhkoexbrhgn")
                .withBranchId("ajwscmneev")
                .withEndpointType(EndpointType.READ_WRITE)
                .withEndpointId("eumzyyhmgqae")
                .withComputeName("jqutx")
                .withSize(new AutoscalingSize().withAutoscalingLimitMinCu(68.29879253710416)
                    .withAutoscalingLimitMaxCu(43.329758882132616)))
            .create();

        Assertions.assertEquals("jfkgb", response.properties().entityName());
        Assertions.assertEquals("hd", response.properties().attributes().get(0).name());
        Assertions.assertEquals("e", response.properties().attributes().get(0).value());
        Assertions.assertEquals("xjwfudmpfhwyppht", response.properties().projectId());
        Assertions.assertEquals("ntc", response.properties().branchId());
        Assertions.assertEquals(EndpointType.READ_ONLY, response.properties().endpointType());
        Assertions.assertEquals("bb", response.properties().endpointId());
        Assertions.assertEquals("aecct", response.properties().computeName());
        Assertions.assertEquals(89.40386192453474, response.properties().size().autoscalingLimitMinCu());
        Assertions.assertEquals(51.63326553487093, response.properties().size().autoscalingLimitMaxCu());
    }
}
