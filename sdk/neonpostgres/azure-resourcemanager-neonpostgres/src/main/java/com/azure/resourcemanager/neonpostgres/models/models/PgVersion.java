// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.models.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * PostgreSQL Version model.
 */
@Fluent
public final class PgVersion implements JsonSerializable<PgVersion> {
    /*
     * The major PostgreSQL version number
     */
    private Integer version;

    /**
     * Creates an instance of PgVersion class.
     */
    public PgVersion() {
    }

    /**
     * Get the version property: The major PostgreSQL version number.
     * 
     * @return the version value.
     */
    public Integer version() {
        return this.version;
    }

    /**
     * Set the version property: The major PostgreSQL version number.
     * 
     * @param version the version value to set.
     * @return the PgVersion object itself.
     */
    public PgVersion withVersion(Integer version) {
        this.version = version;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("version", this.version);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PgVersion from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PgVersion if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the PgVersion.
     */
    public static PgVersion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PgVersion deserializedPgVersion = new PgVersion();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedPgVersion.version = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPgVersion;
        });
    }
}
