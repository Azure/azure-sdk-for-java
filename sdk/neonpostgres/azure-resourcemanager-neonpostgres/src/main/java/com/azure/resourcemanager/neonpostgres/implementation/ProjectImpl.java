// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.neonpostgres.fluent.models.ConnectionUriPropertiesInner;
import com.azure.resourcemanager.neonpostgres.fluent.models.ProjectInner;
import com.azure.resourcemanager.neonpostgres.models.ConnectionUriProperties;
import com.azure.resourcemanager.neonpostgres.models.Project;
import com.azure.resourcemanager.neonpostgres.models.ProjectProperties;

public final class ProjectImpl implements Project, Project.Definition, Project.Update {
    private ProjectInner innerObject;

    private final com.azure.resourcemanager.neonpostgres.NeonPostgresManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public ProjectProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ProjectInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.neonpostgres.NeonPostgresManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String organizationName;

    private String projectName;

    public ProjectImpl withExistingOrganization(String resourceGroupName, String organizationName) {
        this.resourceGroupName = resourceGroupName;
        this.organizationName = organizationName;
        return this;
    }

    public Project create() {
        this.innerObject = serviceManager.serviceClient()
            .getProjects()
            .createOrUpdate(resourceGroupName, organizationName, projectName, this.innerModel(), Context.NONE);
        return this;
    }

    public Project create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getProjects()
            .createOrUpdate(resourceGroupName, organizationName, projectName, this.innerModel(), context);
        return this;
    }

    ProjectImpl(String name, com.azure.resourcemanager.neonpostgres.NeonPostgresManager serviceManager) {
        this.innerObject = new ProjectInner();
        this.serviceManager = serviceManager;
        this.projectName = name;
    }

    public ProjectImpl update() {
        return this;
    }

    public Project apply() {
        this.innerObject = serviceManager.serviceClient()
            .getProjects()
            .createOrUpdate(resourceGroupName, organizationName, projectName, this.innerModel(), Context.NONE);
        return this;
    }

    public Project apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getProjects()
            .createOrUpdate(resourceGroupName, organizationName, projectName, this.innerModel(), context);
        return this;
    }

    ProjectImpl(ProjectInner innerObject, com.azure.resourcemanager.neonpostgres.NeonPostgresManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.organizationName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "organizations");
        this.projectName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "projects");
    }

    public Project refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getProjects()
            .getWithResponse(resourceGroupName, organizationName, projectName, Context.NONE)
            .getValue();
        return this;
    }

    public Project refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getProjects()
            .getWithResponse(resourceGroupName, organizationName, projectName, context)
            .getValue();
        return this;
    }

    public Response<ConnectionUriProperties>
        getConnectionUriWithResponse(ConnectionUriPropertiesInner connectionUriParameters, Context context) {
        return serviceManager.projects()
            .getConnectionUriWithResponse(resourceGroupName, organizationName, projectName, connectionUriParameters,
                context);
    }

    public ConnectionUriProperties getConnectionUri(ConnectionUriPropertiesInner connectionUriParameters) {
        return serviceManager.projects()
            .getConnectionUri(resourceGroupName, organizationName, projectName, connectionUriParameters);
    }

    public ProjectImpl withProperties(ProjectProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }
}
