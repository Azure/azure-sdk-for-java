// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties specific to Neon Organization resource.
 */
@Fluent
public final class OrganizationProperties implements JsonSerializable<OrganizationProperties> {
    /*
     * Marketplace details of the resource.
     */
    @Generated
    private MarketplaceDetails marketplaceDetails;

    /*
     * Details of the user.
     */
    @Generated
    private UserDetails userDetails;

    /*
     * Details of the company.
     */
    @Generated
    private CompanyDetails companyDetails;

    /*
     * Provisioning state of the resource.
     */
    @Generated
    private ResourceProvisioningState provisioningState;

    /*
     * Neon Organization properties
     */
    @Generated
    private PartnerOrganizationProperties partnerOrganizationProperties;

    /*
     * Neon Project Properties
     */
    @Generated
    private ProjectProperties projectProperties;

    /**
     * Creates an instance of OrganizationProperties class.
     */
    @Generated
    public OrganizationProperties() {
    }

    /**
     * Get the marketplaceDetails property: Marketplace details of the resource.
     * 
     * @return the marketplaceDetails value.
     */
    @Generated
    public MarketplaceDetails marketplaceDetails() {
        return this.marketplaceDetails;
    }

    /**
     * Set the marketplaceDetails property: Marketplace details of the resource.
     * 
     * @param marketplaceDetails the marketplaceDetails value to set.
     * @return the OrganizationProperties object itself.
     */
    @Generated
    public OrganizationProperties withMarketplaceDetails(MarketplaceDetails marketplaceDetails) {
        this.marketplaceDetails = marketplaceDetails;
        return this;
    }

    /**
     * Get the userDetails property: Details of the user.
     * 
     * @return the userDetails value.
     */
    @Generated
    public UserDetails userDetails() {
        return this.userDetails;
    }

    /**
     * Set the userDetails property: Details of the user.
     * 
     * @param userDetails the userDetails value to set.
     * @return the OrganizationProperties object itself.
     */
    @Generated
    public OrganizationProperties withUserDetails(UserDetails userDetails) {
        this.userDetails = userDetails;
        return this;
    }

    /**
     * Get the companyDetails property: Details of the company.
     * 
     * @return the companyDetails value.
     */
    @Generated
    public CompanyDetails companyDetails() {
        return this.companyDetails;
    }

    /**
     * Set the companyDetails property: Details of the company.
     * 
     * @param companyDetails the companyDetails value to set.
     * @return the OrganizationProperties object itself.
     */
    @Generated
    public OrganizationProperties withCompanyDetails(CompanyDetails companyDetails) {
        this.companyDetails = companyDetails;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    @Generated
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the partnerOrganizationProperties property: Neon Organization properties.
     * 
     * @return the partnerOrganizationProperties value.
     */
    @Generated
    public PartnerOrganizationProperties partnerOrganizationProperties() {
        return this.partnerOrganizationProperties;
    }

    /**
     * Set the partnerOrganizationProperties property: Neon Organization properties.
     * 
     * @param partnerOrganizationProperties the partnerOrganizationProperties value to set.
     * @return the OrganizationProperties object itself.
     */
    @Generated
    public OrganizationProperties
        withPartnerOrganizationProperties(PartnerOrganizationProperties partnerOrganizationProperties) {
        this.partnerOrganizationProperties = partnerOrganizationProperties;
        return this;
    }

    /**
     * Get the projectProperties property: Neon Project Properties.
     * 
     * @return the projectProperties value.
     */
    @Generated
    public ProjectProperties projectProperties() {
        return this.projectProperties;
    }

    /**
     * Set the projectProperties property: Neon Project Properties.
     * 
     * @param projectProperties the projectProperties value to set.
     * @return the OrganizationProperties object itself.
     */
    @Generated
    public OrganizationProperties withProjectProperties(ProjectProperties projectProperties) {
        this.projectProperties = projectProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (marketplaceDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property marketplaceDetails in model OrganizationProperties"));
        } else {
            marketplaceDetails().validate();
        }
        if (userDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property userDetails in model OrganizationProperties"));
        } else {
            userDetails().validate();
        }
        if (companyDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property companyDetails in model OrganizationProperties"));
        } else {
            companyDetails().validate();
        }
        if (partnerOrganizationProperties() != null) {
            partnerOrganizationProperties().validate();
        }
        if (projectProperties() != null) {
            projectProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OrganizationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("marketplaceDetails", this.marketplaceDetails);
        jsonWriter.writeJsonField("userDetails", this.userDetails);
        jsonWriter.writeJsonField("companyDetails", this.companyDetails);
        jsonWriter.writeJsonField("partnerOrganizationProperties", this.partnerOrganizationProperties);
        jsonWriter.writeJsonField("projectProperties", this.projectProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OrganizationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OrganizationProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OrganizationProperties.
     */
    public static OrganizationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OrganizationProperties deserializedOrganizationProperties = new OrganizationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("marketplaceDetails".equals(fieldName)) {
                    deserializedOrganizationProperties.marketplaceDetails = MarketplaceDetails.fromJson(reader);
                } else if ("userDetails".equals(fieldName)) {
                    deserializedOrganizationProperties.userDetails = UserDetails.fromJson(reader);
                } else if ("companyDetails".equals(fieldName)) {
                    deserializedOrganizationProperties.companyDetails = CompanyDetails.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedOrganizationProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("partnerOrganizationProperties".equals(fieldName)) {
                    deserializedOrganizationProperties.partnerOrganizationProperties
                        = PartnerOrganizationProperties.fromJson(reader);
                } else if ("projectProperties".equals(fieldName)) {
                    deserializedOrganizationProperties.projectProperties = ProjectProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOrganizationProperties;
        });
    }
}
