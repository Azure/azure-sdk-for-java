// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of Endpoints.
 */
public interface Endpoints {
    /**
     * Get a Endpoint.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Neon Organizations resource.
     * @param projectName The name of the Project.
     * @param branchName The name of the Branch.
     * @param endpointName The name of the Endpoint.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Endpoint along with {@link Response}.
     */
    Response<Endpoint> getWithResponse(String resourceGroupName, String organizationName, String projectName,
        String branchName, String endpointName, Context context);

    /**
     * Get a Endpoint.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Neon Organizations resource.
     * @param projectName The name of the Project.
     * @param branchName The name of the Branch.
     * @param endpointName The name of the Endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Endpoint.
     */
    Endpoint get(String resourceGroupName, String organizationName, String projectName, String branchName,
        String endpointName);

    /**
     * Delete a Endpoint.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Neon Organizations resource.
     * @param projectName The name of the Project.
     * @param branchName The name of the Branch.
     * @param endpointName The name of the Endpoint.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(String resourceGroupName, String organizationName, String projectName,
        String branchName, String endpointName, Context context);

    /**
     * Delete a Endpoint.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Neon Organizations resource.
     * @param projectName The name of the Project.
     * @param branchName The name of the Branch.
     * @param endpointName The name of the Endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String organizationName, String projectName, String branchName,
        String endpointName);

    /**
     * List Endpoint resources by Branch.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Neon Organizations resource.
     * @param projectName The name of the Project.
     * @param branchName The name of the Branch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Endpoint list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Endpoint> list(String resourceGroupName, String organizationName, String projectName,
        String branchName);

    /**
     * List Endpoint resources by Branch.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param organizationName Name of the Neon Organizations resource.
     * @param projectName The name of the Project.
     * @param branchName The name of the Branch.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Endpoint list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Endpoint> list(String resourceGroupName, String organizationName, String projectName,
        String branchName, Context context);

    /**
     * Get a Endpoint.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Endpoint along with {@link Response}.
     */
    Endpoint getById(String id);

    /**
     * Get a Endpoint.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Endpoint along with {@link Response}.
     */
    Response<Endpoint> getByIdWithResponse(String id, Context context);

    /**
     * Delete a Endpoint.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a Endpoint.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new Endpoint resource.
     * 
     * @param name resource name.
     * @return the first stage of the new Endpoint definition.
     */
    Endpoint.DefinitionStages.Blank define(String name);
}
