// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties specific to Partner's organization.
 */
@Fluent
public final class PartnerOrganizationProperties implements JsonSerializable<PartnerOrganizationProperties> {
    /*
     * Organization Id in partner's system
     */
    private String organizationId;

    /*
     * Organization name in partner's system
     */
    private String organizationName;

    /*
     * Single Sign On properties for the organization
     */
    private SingleSignOnProperties singleSignOnProperties;

    /**
     * Creates an instance of PartnerOrganizationProperties class.
     */
    public PartnerOrganizationProperties() {
    }

    /**
     * Get the organizationId property: Organization Id in partner's system.
     * 
     * @return the organizationId value.
     */
    public String organizationId() {
        return this.organizationId;
    }

    /**
     * Set the organizationId property: Organization Id in partner's system.
     * 
     * @param organizationId the organizationId value to set.
     * @return the PartnerOrganizationProperties object itself.
     */
    public PartnerOrganizationProperties withOrganizationId(String organizationId) {
        this.organizationId = organizationId;
        return this;
    }

    /**
     * Get the organizationName property: Organization name in partner's system.
     * 
     * @return the organizationName value.
     */
    public String organizationName() {
        return this.organizationName;
    }

    /**
     * Set the organizationName property: Organization name in partner's system.
     * 
     * @param organizationName the organizationName value to set.
     * @return the PartnerOrganizationProperties object itself.
     */
    public PartnerOrganizationProperties withOrganizationName(String organizationName) {
        this.organizationName = organizationName;
        return this;
    }

    /**
     * Get the singleSignOnProperties property: Single Sign On properties for the organization.
     * 
     * @return the singleSignOnProperties value.
     */
    public SingleSignOnProperties singleSignOnProperties() {
        return this.singleSignOnProperties;
    }

    /**
     * Set the singleSignOnProperties property: Single Sign On properties for the organization.
     * 
     * @param singleSignOnProperties the singleSignOnProperties value to set.
     * @return the PartnerOrganizationProperties object itself.
     */
    public PartnerOrganizationProperties withSingleSignOnProperties(SingleSignOnProperties singleSignOnProperties) {
        this.singleSignOnProperties = singleSignOnProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (organizationName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property organizationName in model PartnerOrganizationProperties"));
        }
        if (singleSignOnProperties() != null) {
            singleSignOnProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PartnerOrganizationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("organizationName", this.organizationName);
        jsonWriter.writeStringField("organizationId", this.organizationId);
        jsonWriter.writeJsonField("singleSignOnProperties", this.singleSignOnProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PartnerOrganizationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PartnerOrganizationProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PartnerOrganizationProperties.
     */
    public static PartnerOrganizationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PartnerOrganizationProperties deserializedPartnerOrganizationProperties
                = new PartnerOrganizationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("organizationName".equals(fieldName)) {
                    deserializedPartnerOrganizationProperties.organizationName = reader.getString();
                } else if ("organizationId".equals(fieldName)) {
                    deserializedPartnerOrganizationProperties.organizationId = reader.getString();
                } else if ("singleSignOnProperties".equals(fieldName)) {
                    deserializedPartnerOrganizationProperties.singleSignOnProperties
                        = SingleSignOnProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPartnerOrganizationProperties;
        });
    }
}
