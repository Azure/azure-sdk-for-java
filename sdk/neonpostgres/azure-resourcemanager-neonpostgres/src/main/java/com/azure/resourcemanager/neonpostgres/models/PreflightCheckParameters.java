// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Preflight check parameters for branch and child resources.
 * 
 * IMPORTANT: Only one of the property types (branchProperties, roleProperties, databaseProperties,
 * or endpointProperties) should be provided at a time, based on the entityType value:
 * - When entityType is "branch", provide only branchProperties
 * - When entityType is "role", provide only roleProperties
 * - When entityType is "database", provide only databaseProperties
 * - When entityType is "endpoint", provide only endpointProperties.
 */
@Fluent
public final class PreflightCheckParameters implements JsonSerializable<PreflightCheckParameters> {
    /*
     * Project Id associated with this connection
     */
    private String projectId;

    /*
     * Branch Id associated with this connection
     */
    private String branchId;

    /*
     * Entity type to be validated for deletion.
     */
    private EntityType entityType;

    /*
     * The branch properties - ONLY provided when entityType is 'branch'
     */
    private BranchProperties branchProperties;

    /*
     * The role properties - ONLY provided when entityType is 'role'
     */
    private NeonRoleProperties roleProperties;

    /*
     * The database properties - ONLY provided when entityType is 'database'
     */
    private NeonDatabaseProperties databaseProperties;

    /*
     * The endpoint properties - ONLY provided when entityType is 'endpoint'
     */
    private EndpointProperties endpointProperties;

    /**
     * Creates an instance of PreflightCheckParameters class.
     */
    public PreflightCheckParameters() {
    }

    /**
     * Get the projectId property: Project Id associated with this connection.
     * 
     * @return the projectId value.
     */
    public String projectId() {
        return this.projectId;
    }

    /**
     * Set the projectId property: Project Id associated with this connection.
     * 
     * @param projectId the projectId value to set.
     * @return the PreflightCheckParameters object itself.
     */
    public PreflightCheckParameters withProjectId(String projectId) {
        this.projectId = projectId;
        return this;
    }

    /**
     * Get the branchId property: Branch Id associated with this connection.
     * 
     * @return the branchId value.
     */
    public String branchId() {
        return this.branchId;
    }

    /**
     * Set the branchId property: Branch Id associated with this connection.
     * 
     * @param branchId the branchId value to set.
     * @return the PreflightCheckParameters object itself.
     */
    public PreflightCheckParameters withBranchId(String branchId) {
        this.branchId = branchId;
        return this;
    }

    /**
     * Get the entityType property: Entity type to be validated for deletion.
     * 
     * @return the entityType value.
     */
    public EntityType entityType() {
        return this.entityType;
    }

    /**
     * Set the entityType property: Entity type to be validated for deletion.
     * 
     * @param entityType the entityType value to set.
     * @return the PreflightCheckParameters object itself.
     */
    public PreflightCheckParameters withEntityType(EntityType entityType) {
        this.entityType = entityType;
        return this;
    }

    /**
     * Get the branchProperties property: The branch properties - ONLY provided when entityType is 'branch'.
     * 
     * @return the branchProperties value.
     */
    public BranchProperties branchProperties() {
        return this.branchProperties;
    }

    /**
     * Set the branchProperties property: The branch properties - ONLY provided when entityType is 'branch'.
     * 
     * @param branchProperties the branchProperties value to set.
     * @return the PreflightCheckParameters object itself.
     */
    public PreflightCheckParameters withBranchProperties(BranchProperties branchProperties) {
        this.branchProperties = branchProperties;
        return this;
    }

    /**
     * Get the roleProperties property: The role properties - ONLY provided when entityType is 'role'.
     * 
     * @return the roleProperties value.
     */
    public NeonRoleProperties roleProperties() {
        return this.roleProperties;
    }

    /**
     * Set the roleProperties property: The role properties - ONLY provided when entityType is 'role'.
     * 
     * @param roleProperties the roleProperties value to set.
     * @return the PreflightCheckParameters object itself.
     */
    public PreflightCheckParameters withRoleProperties(NeonRoleProperties roleProperties) {
        this.roleProperties = roleProperties;
        return this;
    }

    /**
     * Get the databaseProperties property: The database properties - ONLY provided when entityType is 'database'.
     * 
     * @return the databaseProperties value.
     */
    public NeonDatabaseProperties databaseProperties() {
        return this.databaseProperties;
    }

    /**
     * Set the databaseProperties property: The database properties - ONLY provided when entityType is 'database'.
     * 
     * @param databaseProperties the databaseProperties value to set.
     * @return the PreflightCheckParameters object itself.
     */
    public PreflightCheckParameters withDatabaseProperties(NeonDatabaseProperties databaseProperties) {
        this.databaseProperties = databaseProperties;
        return this;
    }

    /**
     * Get the endpointProperties property: The endpoint properties - ONLY provided when entityType is 'endpoint'.
     * 
     * @return the endpointProperties value.
     */
    public EndpointProperties endpointProperties() {
        return this.endpointProperties;
    }

    /**
     * Set the endpointProperties property: The endpoint properties - ONLY provided when entityType is 'endpoint'.
     * 
     * @param endpointProperties the endpointProperties value to set.
     * @return the PreflightCheckParameters object itself.
     */
    public PreflightCheckParameters withEndpointProperties(EndpointProperties endpointProperties) {
        this.endpointProperties = endpointProperties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("projectId", this.projectId);
        jsonWriter.writeStringField("branchId", this.branchId);
        jsonWriter.writeStringField("entityType", this.entityType == null ? null : this.entityType.toString());
        jsonWriter.writeJsonField("branchProperties", this.branchProperties);
        jsonWriter.writeJsonField("roleProperties", this.roleProperties);
        jsonWriter.writeJsonField("databaseProperties", this.databaseProperties);
        jsonWriter.writeJsonField("endpointProperties", this.endpointProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PreflightCheckParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PreflightCheckParameters if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PreflightCheckParameters.
     */
    public static PreflightCheckParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PreflightCheckParameters deserializedPreflightCheckParameters = new PreflightCheckParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("projectId".equals(fieldName)) {
                    deserializedPreflightCheckParameters.projectId = reader.getString();
                } else if ("branchId".equals(fieldName)) {
                    deserializedPreflightCheckParameters.branchId = reader.getString();
                } else if ("entityType".equals(fieldName)) {
                    deserializedPreflightCheckParameters.entityType = EntityType.fromString(reader.getString());
                } else if ("branchProperties".equals(fieldName)) {
                    deserializedPreflightCheckParameters.branchProperties = BranchProperties.fromJson(reader);
                } else if ("roleProperties".equals(fieldName)) {
                    deserializedPreflightCheckParameters.roleProperties = NeonRoleProperties.fromJson(reader);
                } else if ("databaseProperties".equals(fieldName)) {
                    deserializedPreflightCheckParameters.databaseProperties = NeonDatabaseProperties.fromJson(reader);
                } else if ("endpointProperties".equals(fieldName)) {
                    deserializedPreflightCheckParameters.endpointProperties = EndpointProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPreflightCheckParameters;
        });
    }
}
