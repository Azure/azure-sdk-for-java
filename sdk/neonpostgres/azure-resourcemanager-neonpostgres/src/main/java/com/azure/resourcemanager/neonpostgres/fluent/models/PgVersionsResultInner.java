// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.neonpostgres.models.PgVersion;
import java.io.IOException;
import java.util.List;

/**
 * Response model for PostgreSQL versions.
 */
@Immutable
public final class PgVersionsResultInner implements JsonSerializable<PgVersionsResultInner> {
    /*
     * List of PostgreSQL versions
     */
    private List<PgVersion> versions;

    /**
     * Creates an instance of PgVersionsResultInner class.
     */
    private PgVersionsResultInner() {
    }

    /**
     * Get the versions property: List of PostgreSQL versions.
     * 
     * @return the versions value.
     */
    public List<PgVersion> versions() {
        return this.versions;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (versions() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property versions in model PgVersionsResultInner"));
        } else {
            versions().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PgVersionsResultInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("versions", this.versions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PgVersionsResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PgVersionsResultInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PgVersionsResultInner.
     */
    public static PgVersionsResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PgVersionsResultInner deserializedPgVersionsResultInner = new PgVersionsResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("versions".equals(fieldName)) {
                    List<PgVersion> versions = reader.readArray(reader1 -> PgVersion.fromJson(reader1));
                    deserializedPgVersionsResultInner.versions = versions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPgVersionsResultInner;
        });
    }
}
