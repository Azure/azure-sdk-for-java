// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties specific to Single Sign On Resource.
 */
@Fluent
public final class SingleSignOnProperties implements JsonSerializable<SingleSignOnProperties> {
    /*
     * State of the Single Sign On for the organization
     */
    private SingleSignOnStates singleSignOnState;

    /*
     * AAD enterprise application Id used to setup SSO
     */
    private String enterpriseAppId;

    /*
     * URL for SSO to be used by the partner to redirect the user to their system
     */
    private String singleSignOnUrl;

    /*
     * List of AAD domains fetched from Microsoft Graph for user.
     */
    private List<String> aadDomains;

    /**
     * Creates an instance of SingleSignOnProperties class.
     */
    public SingleSignOnProperties() {
    }

    /**
     * Get the singleSignOnState property: State of the Single Sign On for the organization.
     * 
     * @return the singleSignOnState value.
     */
    public SingleSignOnStates singleSignOnState() {
        return this.singleSignOnState;
    }

    /**
     * Set the singleSignOnState property: State of the Single Sign On for the organization.
     * 
     * @param singleSignOnState the singleSignOnState value to set.
     * @return the SingleSignOnProperties object itself.
     */
    public SingleSignOnProperties withSingleSignOnState(SingleSignOnStates singleSignOnState) {
        this.singleSignOnState = singleSignOnState;
        return this;
    }

    /**
     * Get the enterpriseAppId property: AAD enterprise application Id used to setup SSO.
     * 
     * @return the enterpriseAppId value.
     */
    public String enterpriseAppId() {
        return this.enterpriseAppId;
    }

    /**
     * Set the enterpriseAppId property: AAD enterprise application Id used to setup SSO.
     * 
     * @param enterpriseAppId the enterpriseAppId value to set.
     * @return the SingleSignOnProperties object itself.
     */
    public SingleSignOnProperties withEnterpriseAppId(String enterpriseAppId) {
        this.enterpriseAppId = enterpriseAppId;
        return this;
    }

    /**
     * Get the singleSignOnUrl property: URL for SSO to be used by the partner to redirect the user to their system.
     * 
     * @return the singleSignOnUrl value.
     */
    public String singleSignOnUrl() {
        return this.singleSignOnUrl;
    }

    /**
     * Set the singleSignOnUrl property: URL for SSO to be used by the partner to redirect the user to their system.
     * 
     * @param singleSignOnUrl the singleSignOnUrl value to set.
     * @return the SingleSignOnProperties object itself.
     */
    public SingleSignOnProperties withSingleSignOnUrl(String singleSignOnUrl) {
        this.singleSignOnUrl = singleSignOnUrl;
        return this;
    }

    /**
     * Get the aadDomains property: List of AAD domains fetched from Microsoft Graph for user.
     * 
     * @return the aadDomains value.
     */
    public List<String> aadDomains() {
        return this.aadDomains;
    }

    /**
     * Set the aadDomains property: List of AAD domains fetched from Microsoft Graph for user.
     * 
     * @param aadDomains the aadDomains value to set.
     * @return the SingleSignOnProperties object itself.
     */
    public SingleSignOnProperties withAadDomains(List<String> aadDomains) {
        this.aadDomains = aadDomains;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("singleSignOnState",
            this.singleSignOnState == null ? null : this.singleSignOnState.toString());
        jsonWriter.writeStringField("enterpriseAppId", this.enterpriseAppId);
        jsonWriter.writeStringField("singleSignOnUrl", this.singleSignOnUrl);
        jsonWriter.writeArrayField("aadDomains", this.aadDomains, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SingleSignOnProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SingleSignOnProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SingleSignOnProperties.
     */
    public static SingleSignOnProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SingleSignOnProperties deserializedSingleSignOnProperties = new SingleSignOnProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("singleSignOnState".equals(fieldName)) {
                    deserializedSingleSignOnProperties.singleSignOnState
                        = SingleSignOnStates.fromString(reader.getString());
                } else if ("enterpriseAppId".equals(fieldName)) {
                    deserializedSingleSignOnProperties.enterpriseAppId = reader.getString();
                } else if ("singleSignOnUrl".equals(fieldName)) {
                    deserializedSingleSignOnProperties.singleSignOnUrl = reader.getString();
                } else if ("aadDomains".equals(fieldName)) {
                    List<String> aadDomains = reader.readArray(reader1 -> reader1.getString());
                    deserializedSingleSignOnProperties.aadDomains = aadDomains;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSingleSignOnProperties;
        });
    }
}
