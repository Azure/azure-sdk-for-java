// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties specific to Endpoints.
 */
@Fluent
public final class EndpointProperties implements JsonSerializable<EndpointProperties> {
    /*
     * Unique identifier for the entity
     */
    private String entityId;

    /*
     * Name of the resource
     */
    private String entityName;

    /*
     * Timestamp indicating when the entity was created
     */
    private String createdAt;

    /*
     * Provisioning state of the resource.
     */
    private ResourceProvisioningState provisioningState;

    /*
     * Additional attributes for the entity
     */
    private List<Attributes> attributes;

    /*
     * The ID of the project this endpoint belongs to
     */
    private String projectId;

    /*
     * The ID of the branch this endpoint belongs to
     */
    private String branchId;

    /*
     * The type of the endpoint
     */
    private EndpointType endpointType;

    /*
     * Unique identifier for the compute endpoint
     */
    private String endpointId;

    /*
     * Name of the compute endpoint
     */
    private String computeName;

    /*
     * The current status of the compute endpoint
     */
    private EndpointStatus status;

    /*
     * The timestamp when the compute endpoint was last active
     */
    private String lastActive;

    /*
     * The compute units size range for autoscaling (MinCU-MaxCU)
     */
    private AutoscalingSize size;

    /**
     * Creates an instance of EndpointProperties class.
     */
    public EndpointProperties() {
    }

    /**
     * Get the entityId property: Unique identifier for the entity.
     * 
     * @return the entityId value.
     */
    public String entityId() {
        return this.entityId;
    }

    /**
     * Get the entityName property: Name of the resource.
     * 
     * @return the entityName value.
     */
    public String entityName() {
        return this.entityName;
    }

    /**
     * Set the entityName property: Name of the resource.
     * 
     * @param entityName the entityName value to set.
     * @return the EndpointProperties object itself.
     */
    public EndpointProperties withEntityName(String entityName) {
        this.entityName = entityName;
        return this;
    }

    /**
     * Get the createdAt property: Timestamp indicating when the entity was created.
     * 
     * @return the createdAt value.
     */
    public String createdAt() {
        return this.createdAt;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the attributes property: Additional attributes for the entity.
     * 
     * @return the attributes value.
     */
    public List<Attributes> attributes() {
        return this.attributes;
    }

    /**
     * Set the attributes property: Additional attributes for the entity.
     * 
     * @param attributes the attributes value to set.
     * @return the EndpointProperties object itself.
     */
    public EndpointProperties withAttributes(List<Attributes> attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * Get the projectId property: The ID of the project this endpoint belongs to.
     * 
     * @return the projectId value.
     */
    public String projectId() {
        return this.projectId;
    }

    /**
     * Set the projectId property: The ID of the project this endpoint belongs to.
     * 
     * @param projectId the projectId value to set.
     * @return the EndpointProperties object itself.
     */
    public EndpointProperties withProjectId(String projectId) {
        this.projectId = projectId;
        return this;
    }

    /**
     * Get the branchId property: The ID of the branch this endpoint belongs to.
     * 
     * @return the branchId value.
     */
    public String branchId() {
        return this.branchId;
    }

    /**
     * Set the branchId property: The ID of the branch this endpoint belongs to.
     * 
     * @param branchId the branchId value to set.
     * @return the EndpointProperties object itself.
     */
    public EndpointProperties withBranchId(String branchId) {
        this.branchId = branchId;
        return this;
    }

    /**
     * Get the endpointType property: The type of the endpoint.
     * 
     * @return the endpointType value.
     */
    public EndpointType endpointType() {
        return this.endpointType;
    }

    /**
     * Set the endpointType property: The type of the endpoint.
     * 
     * @param endpointType the endpointType value to set.
     * @return the EndpointProperties object itself.
     */
    public EndpointProperties withEndpointType(EndpointType endpointType) {
        this.endpointType = endpointType;
        return this;
    }

    /**
     * Get the endpointId property: Unique identifier for the compute endpoint.
     * 
     * @return the endpointId value.
     */
    public String endpointId() {
        return this.endpointId;
    }

    /**
     * Set the endpointId property: Unique identifier for the compute endpoint.
     * 
     * @param endpointId the endpointId value to set.
     * @return the EndpointProperties object itself.
     */
    public EndpointProperties withEndpointId(String endpointId) {
        this.endpointId = endpointId;
        return this;
    }

    /**
     * Get the computeName property: Name of the compute endpoint.
     * 
     * @return the computeName value.
     */
    public String computeName() {
        return this.computeName;
    }

    /**
     * Set the computeName property: Name of the compute endpoint.
     * 
     * @param computeName the computeName value to set.
     * @return the EndpointProperties object itself.
     */
    public EndpointProperties withComputeName(String computeName) {
        this.computeName = computeName;
        return this;
    }

    /**
     * Get the status property: The current status of the compute endpoint.
     * 
     * @return the status value.
     */
    public EndpointStatus status() {
        return this.status;
    }

    /**
     * Get the lastActive property: The timestamp when the compute endpoint was last active.
     * 
     * @return the lastActive value.
     */
    public String lastActive() {
        return this.lastActive;
    }

    /**
     * Get the size property: The compute units size range for autoscaling (MinCU-MaxCU).
     * 
     * @return the size value.
     */
    public AutoscalingSize size() {
        return this.size;
    }

    /**
     * Set the size property: The compute units size range for autoscaling (MinCU-MaxCU).
     * 
     * @param size the size value to set.
     * @return the EndpointProperties object itself.
     */
    public EndpointProperties withSize(AutoscalingSize size) {
        this.size = size;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("entityName", this.entityName);
        jsonWriter.writeArrayField("attributes", this.attributes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("projectId", this.projectId);
        jsonWriter.writeStringField("branchId", this.branchId);
        jsonWriter.writeStringField("endpointType", this.endpointType == null ? null : this.endpointType.toString());
        jsonWriter.writeStringField("endpointId", this.endpointId);
        jsonWriter.writeStringField("computeName", this.computeName);
        jsonWriter.writeJsonField("size", this.size);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EndpointProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EndpointProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EndpointProperties.
     */
    public static EndpointProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EndpointProperties deserializedEndpointProperties = new EndpointProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("entityId".equals(fieldName)) {
                    deserializedEndpointProperties.entityId = reader.getString();
                } else if ("entityName".equals(fieldName)) {
                    deserializedEndpointProperties.entityName = reader.getString();
                } else if ("createdAt".equals(fieldName)) {
                    deserializedEndpointProperties.createdAt = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedEndpointProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("attributes".equals(fieldName)) {
                    List<Attributes> attributes = reader.readArray(reader1 -> Attributes.fromJson(reader1));
                    deserializedEndpointProperties.attributes = attributes;
                } else if ("projectId".equals(fieldName)) {
                    deserializedEndpointProperties.projectId = reader.getString();
                } else if ("branchId".equals(fieldName)) {
                    deserializedEndpointProperties.branchId = reader.getString();
                } else if ("endpointType".equals(fieldName)) {
                    deserializedEndpointProperties.endpointType = EndpointType.fromString(reader.getString());
                } else if ("endpointId".equals(fieldName)) {
                    deserializedEndpointProperties.endpointId = reader.getString();
                } else if ("computeName".equals(fieldName)) {
                    deserializedEndpointProperties.computeName = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedEndpointProperties.status = EndpointStatus.fromString(reader.getString());
                } else if ("lastActive".equals(fieldName)) {
                    deserializedEndpointProperties.lastActive = reader.getString();
                } else if ("size".equals(fieldName)) {
                    deserializedEndpointProperties.size = AutoscalingSize.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEndpointProperties;
        });
    }
}
