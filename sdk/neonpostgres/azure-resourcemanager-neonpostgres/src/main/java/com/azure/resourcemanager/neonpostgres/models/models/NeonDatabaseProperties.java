// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.models.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.neonpostgres.models.ResourceProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Properties specific to Databases.
 */
@Fluent
public final class NeonDatabaseProperties implements JsonSerializable<NeonDatabaseProperties> {
    /*
     * Unique identifier for the entity
     */
    private String entityId;

    /*
     * Name of the resource
     */
    private String entityName;

    /*
     * Timestamp indicating when the entity was created
     */
    private String createdAt;

    /*
     * Provisioning state of the resource.
     */
    private ResourceProvisioningState provisioningState;

    /*
     * Additional attributes for the entity
     */
    private List<Attributes> attributes;

    /*
     * The ID of the branch this database belongs to
     */
    private String branchId;

    /*
     * The name of the role that owns the database
     */
    private String ownerName;

    /**
     * Creates an instance of NeonDatabaseProperties class.
     */
    public NeonDatabaseProperties() {
    }

    /**
     * Get the entityId property: Unique identifier for the entity.
     * 
     * @return the entityId value.
     */
    public String entityId() {
        return this.entityId;
    }

    /**
     * Get the entityName property: Name of the resource.
     * 
     * @return the entityName value.
     */
    public String entityName() {
        return this.entityName;
    }

    /**
     * Set the entityName property: Name of the resource.
     * 
     * @param entityName the entityName value to set.
     * @return the NeonDatabaseProperties object itself.
     */
    public NeonDatabaseProperties withEntityName(String entityName) {
        this.entityName = entityName;
        return this;
    }

    /**
     * Get the createdAt property: Timestamp indicating when the entity was created.
     * 
     * @return the createdAt value.
     */
    public String createdAt() {
        return this.createdAt;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the attributes property: Additional attributes for the entity.
     * 
     * @return the attributes value.
     */
    public List<Attributes> attributes() {
        return this.attributes;
    }

    /**
     * Set the attributes property: Additional attributes for the entity.
     * 
     * @param attributes the attributes value to set.
     * @return the NeonDatabaseProperties object itself.
     */
    public NeonDatabaseProperties withAttributes(List<Attributes> attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * Get the branchId property: The ID of the branch this database belongs to.
     * 
     * @return the branchId value.
     */
    public String branchId() {
        return this.branchId;
    }

    /**
     * Set the branchId property: The ID of the branch this database belongs to.
     * 
     * @param branchId the branchId value to set.
     * @return the NeonDatabaseProperties object itself.
     */
    public NeonDatabaseProperties withBranchId(String branchId) {
        this.branchId = branchId;
        return this;
    }

    /**
     * Get the ownerName property: The name of the role that owns the database.
     * 
     * @return the ownerName value.
     */
    public String ownerName() {
        return this.ownerName;
    }

    /**
     * Set the ownerName property: The name of the role that owns the database.
     * 
     * @param ownerName the ownerName value to set.
     * @return the NeonDatabaseProperties object itself.
     */
    public NeonDatabaseProperties withOwnerName(String ownerName) {
        this.ownerName = ownerName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (attributes() != null) {
            attributes().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("entityName", this.entityName);
        jsonWriter.writeArrayField("attributes", this.attributes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("branchId", this.branchId);
        jsonWriter.writeStringField("ownerName", this.ownerName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NeonDatabaseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NeonDatabaseProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NeonDatabaseProperties.
     */
    public static NeonDatabaseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NeonDatabaseProperties deserializedNeonDatabaseProperties = new NeonDatabaseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("entityId".equals(fieldName)) {
                    deserializedNeonDatabaseProperties.entityId = reader.getString();
                } else if ("entityName".equals(fieldName)) {
                    deserializedNeonDatabaseProperties.entityName = reader.getString();
                } else if ("createdAt".equals(fieldName)) {
                    deserializedNeonDatabaseProperties.createdAt = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedNeonDatabaseProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("attributes".equals(fieldName)) {
                    List<Attributes> attributes = reader.readArray(reader1 -> Attributes.fromJson(reader1));
                    deserializedNeonDatabaseProperties.attributes = attributes;
                } else if ("branchId".equals(fieldName)) {
                    deserializedNeonDatabaseProperties.branchId = reader.getString();
                } else if ("ownerName".equals(fieldName)) {
                    deserializedNeonDatabaseProperties.ownerName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNeonDatabaseProperties;
        });
    }
}
