// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Connection uri parameters for the associated database.
 */
@Fluent
public final class ConnectionUriPropertiesInner implements JsonSerializable<ConnectionUriPropertiesInner> {
    /*
     * Project Id associated with this connection
     */
    @Generated
    private String projectId;

    /*
     * Branch Id associated with this connection
     */
    @Generated
    private String branchId;

    /*
     * Database name associated with this connection
     */
    @Generated
    private String databaseName;

    /*
     * The role name used for authentication
     */
    @Generated
    private String roleName;

    /*
     * the endpoint Id with this connection
     */
    @Generated
    private String endpointId;

    /*
     * Indicates if the connection is pooled
     */
    @Generated
    private Boolean isPooled;

    /*
     * connection uri returned for the database
     */
    @Generated
    private String connectionStringUri;

    /**
     * Creates an instance of ConnectionUriPropertiesInner class.
     */
    @Generated
    public ConnectionUriPropertiesInner() {
    }

    /**
     * Get the projectId property: Project Id associated with this connection.
     * 
     * @return the projectId value.
     */
    @Generated
    public String projectId() {
        return this.projectId;
    }

    /**
     * Set the projectId property: Project Id associated with this connection.
     * 
     * @param projectId the projectId value to set.
     * @return the ConnectionUriPropertiesInner object itself.
     */
    @Generated
    public ConnectionUriPropertiesInner withProjectId(String projectId) {
        this.projectId = projectId;
        return this;
    }

    /**
     * Get the branchId property: Branch Id associated with this connection.
     * 
     * @return the branchId value.
     */
    @Generated
    public String branchId() {
        return this.branchId;
    }

    /**
     * Set the branchId property: Branch Id associated with this connection.
     * 
     * @param branchId the branchId value to set.
     * @return the ConnectionUriPropertiesInner object itself.
     */
    @Generated
    public ConnectionUriPropertiesInner withBranchId(String branchId) {
        this.branchId = branchId;
        return this;
    }

    /**
     * Get the databaseName property: Database name associated with this connection.
     * 
     * @return the databaseName value.
     */
    @Generated
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: Database name associated with this connection.
     * 
     * @param databaseName the databaseName value to set.
     * @return the ConnectionUriPropertiesInner object itself.
     */
    @Generated
    public ConnectionUriPropertiesInner withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the roleName property: The role name used for authentication.
     * 
     * @return the roleName value.
     */
    @Generated
    public String roleName() {
        return this.roleName;
    }

    /**
     * Set the roleName property: The role name used for authentication.
     * 
     * @param roleName the roleName value to set.
     * @return the ConnectionUriPropertiesInner object itself.
     */
    @Generated
    public ConnectionUriPropertiesInner withRoleName(String roleName) {
        this.roleName = roleName;
        return this;
    }

    /**
     * Get the endpointId property: the endpoint Id with this connection.
     * 
     * @return the endpointId value.
     */
    @Generated
    public String endpointId() {
        return this.endpointId;
    }

    /**
     * Set the endpointId property: the endpoint Id with this connection.
     * 
     * @param endpointId the endpointId value to set.
     * @return the ConnectionUriPropertiesInner object itself.
     */
    @Generated
    public ConnectionUriPropertiesInner withEndpointId(String endpointId) {
        this.endpointId = endpointId;
        return this;
    }

    /**
     * Get the isPooled property: Indicates if the connection is pooled.
     * 
     * @return the isPooled value.
     */
    @Generated
    public Boolean isPooled() {
        return this.isPooled;
    }

    /**
     * Set the isPooled property: Indicates if the connection is pooled.
     * 
     * @param isPooled the isPooled value to set.
     * @return the ConnectionUriPropertiesInner object itself.
     */
    @Generated
    public ConnectionUriPropertiesInner withIsPooled(Boolean isPooled) {
        this.isPooled = isPooled;
        return this;
    }

    /**
     * Get the connectionStringUri property: connection uri returned for the database.
     * 
     * @return the connectionStringUri value.
     */
    @Generated
    public String connectionStringUri() {
        return this.connectionStringUri;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("projectId", this.projectId);
        jsonWriter.writeStringField("branchId", this.branchId);
        jsonWriter.writeStringField("databaseName", this.databaseName);
        jsonWriter.writeStringField("roleName", this.roleName);
        jsonWriter.writeStringField("endpointId", this.endpointId);
        jsonWriter.writeBooleanField("isPooled", this.isPooled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectionUriPropertiesInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectionUriPropertiesInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ConnectionUriPropertiesInner.
     */
    public static ConnectionUriPropertiesInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectionUriPropertiesInner deserializedConnectionUriPropertiesInner = new ConnectionUriPropertiesInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("projectId".equals(fieldName)) {
                    deserializedConnectionUriPropertiesInner.projectId = reader.getString();
                } else if ("branchId".equals(fieldName)) {
                    deserializedConnectionUriPropertiesInner.branchId = reader.getString();
                } else if ("databaseName".equals(fieldName)) {
                    deserializedConnectionUriPropertiesInner.databaseName = reader.getString();
                } else if ("roleName".equals(fieldName)) {
                    deserializedConnectionUriPropertiesInner.roleName = reader.getString();
                } else if ("endpointId".equals(fieldName)) {
                    deserializedConnectionUriPropertiesInner.endpointId = reader.getString();
                } else if ("isPooled".equals(fieldName)) {
                    deserializedConnectionUriPropertiesInner.isPooled = reader.getNullable(JsonReader::getBoolean);
                } else if ("connectionStringUri".equals(fieldName)) {
                    deserializedConnectionUriPropertiesInner.connectionStringUri = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectionUriPropertiesInner;
        });
    }
}
