// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties specific to Compute.
 */
@Immutable
public final class ComputeProperties implements JsonSerializable<ComputeProperties> {
    /*
     * Unique identifier for the entity
     */
    private String entityId;

    /*
     * Name of the resource
     */
    private String entityName;

    /*
     * Timestamp indicating when the entity was created
     */
    private String createdAt;

    /*
     * Provisioning state of the resource.
     */
    private ResourceProvisioningState provisioningState;

    /*
     * Additional attributes for the entity
     */
    private List<Attributes> attributes;

    /*
     * Region where the compute instance is located
     */
    private String region;

    /*
     * Number of allocated CPU cores
     */
    private Integer cpuCores;

    /*
     * Memory allocated in GB
     */
    private Integer memory;

    /*
     * Current status of the compute instance
     */
    private String status;

    /**
     * Creates an instance of ComputeProperties class.
     */
    private ComputeProperties() {
    }

    /**
     * Get the entityId property: Unique identifier for the entity.
     * 
     * @return the entityId value.
     */
    public String entityId() {
        return this.entityId;
    }

    /**
     * Get the entityName property: Name of the resource.
     * 
     * @return the entityName value.
     */
    public String entityName() {
        return this.entityName;
    }

    /**
     * Get the createdAt property: Timestamp indicating when the entity was created.
     * 
     * @return the createdAt value.
     */
    public String createdAt() {
        return this.createdAt;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the attributes property: Additional attributes for the entity.
     * 
     * @return the attributes value.
     */
    public List<Attributes> attributes() {
        return this.attributes;
    }

    /**
     * Get the region property: Region where the compute instance is located.
     * 
     * @return the region value.
     */
    public String region() {
        return this.region;
    }

    /**
     * Get the cpuCores property: Number of allocated CPU cores.
     * 
     * @return the cpuCores value.
     */
    public Integer cpuCores() {
        return this.cpuCores;
    }

    /**
     * Get the memory property: Memory allocated in GB.
     * 
     * @return the memory value.
     */
    public Integer memory() {
        return this.memory;
    }

    /**
     * Get the status property: Current status of the compute instance.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (attributes() != null) {
            attributes().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("entityName", this.entityName);
        jsonWriter.writeArrayField("attributes", this.attributes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("region", this.region);
        jsonWriter.writeNumberField("cpuCores", this.cpuCores);
        jsonWriter.writeNumberField("memory", this.memory);
        jsonWriter.writeStringField("status", this.status);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComputeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComputeProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ComputeProperties.
     */
    public static ComputeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComputeProperties deserializedComputeProperties = new ComputeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("entityId".equals(fieldName)) {
                    deserializedComputeProperties.entityId = reader.getString();
                } else if ("entityName".equals(fieldName)) {
                    deserializedComputeProperties.entityName = reader.getString();
                } else if ("createdAt".equals(fieldName)) {
                    deserializedComputeProperties.createdAt = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedComputeProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("attributes".equals(fieldName)) {
                    List<Attributes> attributes = reader.readArray(reader1 -> Attributes.fromJson(reader1));
                    deserializedComputeProperties.attributes = attributes;
                } else if ("region".equals(fieldName)) {
                    deserializedComputeProperties.region = reader.getString();
                } else if ("cpuCores".equals(fieldName)) {
                    deserializedComputeProperties.cpuCores = reader.getNullable(JsonReader::getInt);
                } else if ("memory".equals(fieldName)) {
                    deserializedComputeProperties.memory = reader.getNullable(JsonReader::getInt);
                } else if ("status".equals(fieldName)) {
                    deserializedComputeProperties.status = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedComputeProperties;
        });
    }
}
