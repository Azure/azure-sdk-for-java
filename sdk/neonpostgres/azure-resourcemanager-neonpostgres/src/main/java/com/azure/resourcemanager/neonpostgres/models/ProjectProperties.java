// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties specific to Project.
 */
@Fluent
public final class ProjectProperties implements JsonSerializable<ProjectProperties> {
    /*
     * Unique identifier for the entity
     */
    @Generated
    private String entityId;

    /*
     * Name of the resource
     */
    @Generated
    private String entityName;

    /*
     * Timestamp indicating when the entity was created
     */
    @Generated
    private String createdAt;

    /*
     * Provisioning state of the resource.
     */
    @Generated
    private ResourceProvisioningState provisioningState;

    /*
     * Additional attributes for the entity
     */
    @Generated
    private List<Attributes> attributes;

    /*
     * Region where the project is created
     */
    @Generated
    private String regionId;

    /*
     * Data Storage bytes per hour for the project
     */
    @Generated
    private Long storage;

    /*
     * Postgres version for the project
     */
    @Generated
    private Integer pgVersion;

    /*
     * The retention period for project history in seconds.
     */
    @Generated
    private Integer historyRetention;

    /*
     * Default endpoint settings for the project.
     */
    @Generated
    private DefaultEndpointSettings defaultEndpointSettings;

    /*
     * The Branch properties of the project. This is optional
     */
    @Generated
    private BranchProperties branch;

    /*
     * Roles associated with the project
     */
    @Generated
    private List<NeonRoleProperties> roles;

    /*
     * Neon Databases associated with the project
     */
    @Generated
    private List<NeonDatabaseProperties> databases;

    /*
     * Endpoints associated with the project
     */
    @Generated
    private List<EndpointProperties> endpoints;

    /**
     * Creates an instance of ProjectProperties class.
     */
    @Generated
    public ProjectProperties() {
    }

    /**
     * Get the entityId property: Unique identifier for the entity.
     * 
     * @return the entityId value.
     */
    @Generated
    public String entityId() {
        return this.entityId;
    }

    /**
     * Get the entityName property: Name of the resource.
     * 
     * @return the entityName value.
     */
    @Generated
    public String entityName() {
        return this.entityName;
    }

    /**
     * Set the entityName property: Name of the resource.
     * 
     * @param entityName the entityName value to set.
     * @return the ProjectProperties object itself.
     */
    @Generated
    public ProjectProperties withEntityName(String entityName) {
        this.entityName = entityName;
        return this;
    }

    /**
     * Get the createdAt property: Timestamp indicating when the entity was created.
     * 
     * @return the createdAt value.
     */
    @Generated
    public String createdAt() {
        return this.createdAt;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    @Generated
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the attributes property: Additional attributes for the entity.
     * 
     * @return the attributes value.
     */
    @Generated
    public List<Attributes> attributes() {
        return this.attributes;
    }

    /**
     * Set the attributes property: Additional attributes for the entity.
     * 
     * @param attributes the attributes value to set.
     * @return the ProjectProperties object itself.
     */
    @Generated
    public ProjectProperties withAttributes(List<Attributes> attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * Get the regionId property: Region where the project is created.
     * 
     * @return the regionId value.
     */
    @Generated
    public String regionId() {
        return this.regionId;
    }

    /**
     * Set the regionId property: Region where the project is created.
     * 
     * @param regionId the regionId value to set.
     * @return the ProjectProperties object itself.
     */
    @Generated
    public ProjectProperties withRegionId(String regionId) {
        this.regionId = regionId;
        return this;
    }

    /**
     * Get the storage property: Data Storage bytes per hour for the project.
     * 
     * @return the storage value.
     */
    @Generated
    public Long storage() {
        return this.storage;
    }

    /**
     * Set the storage property: Data Storage bytes per hour for the project.
     * 
     * @param storage the storage value to set.
     * @return the ProjectProperties object itself.
     */
    @Generated
    public ProjectProperties withStorage(Long storage) {
        this.storage = storage;
        return this;
    }

    /**
     * Get the pgVersion property: Postgres version for the project.
     * 
     * @return the pgVersion value.
     */
    @Generated
    public Integer pgVersion() {
        return this.pgVersion;
    }

    /**
     * Set the pgVersion property: Postgres version for the project.
     * 
     * @param pgVersion the pgVersion value to set.
     * @return the ProjectProperties object itself.
     */
    @Generated
    public ProjectProperties withPgVersion(Integer pgVersion) {
        this.pgVersion = pgVersion;
        return this;
    }

    /**
     * Get the historyRetention property: The retention period for project history in seconds.
     * 
     * @return the historyRetention value.
     */
    @Generated
    public Integer historyRetention() {
        return this.historyRetention;
    }

    /**
     * Set the historyRetention property: The retention period for project history in seconds.
     * 
     * @param historyRetention the historyRetention value to set.
     * @return the ProjectProperties object itself.
     */
    @Generated
    public ProjectProperties withHistoryRetention(Integer historyRetention) {
        this.historyRetention = historyRetention;
        return this;
    }

    /**
     * Get the defaultEndpointSettings property: Default endpoint settings for the project.
     * 
     * @return the defaultEndpointSettings value.
     */
    @Generated
    public DefaultEndpointSettings defaultEndpointSettings() {
        return this.defaultEndpointSettings;
    }

    /**
     * Set the defaultEndpointSettings property: Default endpoint settings for the project.
     * 
     * @param defaultEndpointSettings the defaultEndpointSettings value to set.
     * @return the ProjectProperties object itself.
     */
    @Generated
    public ProjectProperties withDefaultEndpointSettings(DefaultEndpointSettings defaultEndpointSettings) {
        this.defaultEndpointSettings = defaultEndpointSettings;
        return this;
    }

    /**
     * Get the branch property: The Branch properties of the project. This is optional.
     * 
     * @return the branch value.
     */
    @Generated
    public BranchProperties branch() {
        return this.branch;
    }

    /**
     * Set the branch property: The Branch properties of the project. This is optional.
     * 
     * @param branch the branch value to set.
     * @return the ProjectProperties object itself.
     */
    @Generated
    public ProjectProperties withBranch(BranchProperties branch) {
        this.branch = branch;
        return this;
    }

    /**
     * Get the roles property: Roles associated with the project.
     * 
     * @return the roles value.
     */
    @Generated
    public List<NeonRoleProperties> roles() {
        return this.roles;
    }

    /**
     * Set the roles property: Roles associated with the project.
     * 
     * @param roles the roles value to set.
     * @return the ProjectProperties object itself.
     */
    @Generated
    public ProjectProperties withRoles(List<NeonRoleProperties> roles) {
        this.roles = roles;
        return this;
    }

    /**
     * Get the databases property: Neon Databases associated with the project.
     * 
     * @return the databases value.
     */
    @Generated
    public List<NeonDatabaseProperties> databases() {
        return this.databases;
    }

    /**
     * Set the databases property: Neon Databases associated with the project.
     * 
     * @param databases the databases value to set.
     * @return the ProjectProperties object itself.
     */
    @Generated
    public ProjectProperties withDatabases(List<NeonDatabaseProperties> databases) {
        this.databases = databases;
        return this;
    }

    /**
     * Get the endpoints property: Endpoints associated with the project.
     * 
     * @return the endpoints value.
     */
    @Generated
    public List<EndpointProperties> endpoints() {
        return this.endpoints;
    }

    /**
     * Set the endpoints property: Endpoints associated with the project.
     * 
     * @param endpoints the endpoints value to set.
     * @return the ProjectProperties object itself.
     */
    @Generated
    public ProjectProperties withEndpoints(List<EndpointProperties> endpoints) {
        this.endpoints = endpoints;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (attributes() != null) {
            attributes().forEach(e -> e.validate());
        }
        if (defaultEndpointSettings() != null) {
            defaultEndpointSettings().validate();
        }
        if (branch() != null) {
            branch().validate();
        }
        if (roles() != null) {
            roles().forEach(e -> e.validate());
        }
        if (databases() != null) {
            databases().forEach(e -> e.validate());
        }
        if (endpoints() != null) {
            endpoints().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("entityName", this.entityName);
        jsonWriter.writeArrayField("attributes", this.attributes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("regionId", this.regionId);
        jsonWriter.writeNumberField("storage", this.storage);
        jsonWriter.writeNumberField("pgVersion", this.pgVersion);
        jsonWriter.writeNumberField("historyRetention", this.historyRetention);
        jsonWriter.writeJsonField("defaultEndpointSettings", this.defaultEndpointSettings);
        jsonWriter.writeJsonField("branch", this.branch);
        jsonWriter.writeArrayField("roles", this.roles, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("databases", this.databases, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("endpoints", this.endpoints, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProjectProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProjectProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProjectProperties.
     */
    public static ProjectProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProjectProperties deserializedProjectProperties = new ProjectProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("entityId".equals(fieldName)) {
                    deserializedProjectProperties.entityId = reader.getString();
                } else if ("entityName".equals(fieldName)) {
                    deserializedProjectProperties.entityName = reader.getString();
                } else if ("createdAt".equals(fieldName)) {
                    deserializedProjectProperties.createdAt = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedProjectProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("attributes".equals(fieldName)) {
                    List<Attributes> attributes = reader.readArray(reader1 -> Attributes.fromJson(reader1));
                    deserializedProjectProperties.attributes = attributes;
                } else if ("regionId".equals(fieldName)) {
                    deserializedProjectProperties.regionId = reader.getString();
                } else if ("storage".equals(fieldName)) {
                    deserializedProjectProperties.storage = reader.getNullable(JsonReader::getLong);
                } else if ("pgVersion".equals(fieldName)) {
                    deserializedProjectProperties.pgVersion = reader.getNullable(JsonReader::getInt);
                } else if ("historyRetention".equals(fieldName)) {
                    deserializedProjectProperties.historyRetention = reader.getNullable(JsonReader::getInt);
                } else if ("defaultEndpointSettings".equals(fieldName)) {
                    deserializedProjectProperties.defaultEndpointSettings = DefaultEndpointSettings.fromJson(reader);
                } else if ("branch".equals(fieldName)) {
                    deserializedProjectProperties.branch = BranchProperties.fromJson(reader);
                } else if ("roles".equals(fieldName)) {
                    List<NeonRoleProperties> roles = reader.readArray(reader1 -> NeonRoleProperties.fromJson(reader1));
                    deserializedProjectProperties.roles = roles;
                } else if ("databases".equals(fieldName)) {
                    List<NeonDatabaseProperties> databases
                        = reader.readArray(reader1 -> NeonDatabaseProperties.fromJson(reader1));
                    deserializedProjectProperties.databases = databases;
                } else if ("endpoints".equals(fieldName)) {
                    List<EndpointProperties> endpoints
                        = reader.readArray(reader1 -> EndpointProperties.fromJson(reader1));
                    deserializedProjectProperties.endpoints = endpoints;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProjectProperties;
        });
    }
}
