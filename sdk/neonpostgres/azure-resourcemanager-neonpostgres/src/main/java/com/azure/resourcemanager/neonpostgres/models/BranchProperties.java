// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties specific to Branch.
 */
@Fluent
public final class BranchProperties implements JsonSerializable<BranchProperties> {
    /*
     * Unique identifier for the entity
     */
    @Generated
    private String entityId;

    /*
     * Name of the resource
     */
    @Generated
    private String entityName;

    /*
     * Timestamp indicating when the entity was created
     */
    @Generated
    private String createdAt;

    /*
     * Provisioning state of the resource.
     */
    @Generated
    private ResourceProvisioningState provisioningState;

    /*
     * Additional attributes for the entity
     */
    @Generated
    private List<Attributes> attributes;

    /*
     * The ID of the project this branch belongs to
     */
    @Generated
    private String projectId;

    /*
     * The ID of the parent branch
     */
    @Generated
    private String parentId;

    /*
     * Role name associated with the branch
     */
    @Generated
    private String roleName;

    /*
     * Database name associated with the branch
     */
    @Generated
    private String databaseName;

    /*
     * Roles associated with the branch
     */
    @Generated
    private List<NeonRoleProperties> roles;

    /*
     * Neon Databases associated with the branch
     */
    @Generated
    private List<NeonDatabaseProperties> databases;

    /*
     * Endpoints associated with the branch
     */
    @Generated
    private List<EndpointProperties> endpoints;

    /**
     * Creates an instance of BranchProperties class.
     */
    @Generated
    public BranchProperties() {
    }

    /**
     * Get the entityId property: Unique identifier for the entity.
     * 
     * @return the entityId value.
     */
    @Generated
    public String entityId() {
        return this.entityId;
    }

    /**
     * Get the entityName property: Name of the resource.
     * 
     * @return the entityName value.
     */
    @Generated
    public String entityName() {
        return this.entityName;
    }

    /**
     * Set the entityName property: Name of the resource.
     * 
     * @param entityName the entityName value to set.
     * @return the BranchProperties object itself.
     */
    @Generated
    public BranchProperties withEntityName(String entityName) {
        this.entityName = entityName;
        return this;
    }

    /**
     * Get the createdAt property: Timestamp indicating when the entity was created.
     * 
     * @return the createdAt value.
     */
    @Generated
    public String createdAt() {
        return this.createdAt;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    @Generated
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the attributes property: Additional attributes for the entity.
     * 
     * @return the attributes value.
     */
    @Generated
    public List<Attributes> attributes() {
        return this.attributes;
    }

    /**
     * Set the attributes property: Additional attributes for the entity.
     * 
     * @param attributes the attributes value to set.
     * @return the BranchProperties object itself.
     */
    @Generated
    public BranchProperties withAttributes(List<Attributes> attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * Get the projectId property: The ID of the project this branch belongs to.
     * 
     * @return the projectId value.
     */
    @Generated
    public String projectId() {
        return this.projectId;
    }

    /**
     * Set the projectId property: The ID of the project this branch belongs to.
     * 
     * @param projectId the projectId value to set.
     * @return the BranchProperties object itself.
     */
    @Generated
    public BranchProperties withProjectId(String projectId) {
        this.projectId = projectId;
        return this;
    }

    /**
     * Get the parentId property: The ID of the parent branch.
     * 
     * @return the parentId value.
     */
    @Generated
    public String parentId() {
        return this.parentId;
    }

    /**
     * Set the parentId property: The ID of the parent branch.
     * 
     * @param parentId the parentId value to set.
     * @return the BranchProperties object itself.
     */
    @Generated
    public BranchProperties withParentId(String parentId) {
        this.parentId = parentId;
        return this;
    }

    /**
     * Get the roleName property: Role name associated with the branch.
     * 
     * @return the roleName value.
     */
    @Generated
    public String roleName() {
        return this.roleName;
    }

    /**
     * Set the roleName property: Role name associated with the branch.
     * 
     * @param roleName the roleName value to set.
     * @return the BranchProperties object itself.
     */
    @Generated
    public BranchProperties withRoleName(String roleName) {
        this.roleName = roleName;
        return this;
    }

    /**
     * Get the databaseName property: Database name associated with the branch.
     * 
     * @return the databaseName value.
     */
    @Generated
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: Database name associated with the branch.
     * 
     * @param databaseName the databaseName value to set.
     * @return the BranchProperties object itself.
     */
    @Generated
    public BranchProperties withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the roles property: Roles associated with the branch.
     * 
     * @return the roles value.
     */
    @Generated
    public List<NeonRoleProperties> roles() {
        return this.roles;
    }

    /**
     * Set the roles property: Roles associated with the branch.
     * 
     * @param roles the roles value to set.
     * @return the BranchProperties object itself.
     */
    @Generated
    public BranchProperties withRoles(List<NeonRoleProperties> roles) {
        this.roles = roles;
        return this;
    }

    /**
     * Get the databases property: Neon Databases associated with the branch.
     * 
     * @return the databases value.
     */
    @Generated
    public List<NeonDatabaseProperties> databases() {
        return this.databases;
    }

    /**
     * Set the databases property: Neon Databases associated with the branch.
     * 
     * @param databases the databases value to set.
     * @return the BranchProperties object itself.
     */
    @Generated
    public BranchProperties withDatabases(List<NeonDatabaseProperties> databases) {
        this.databases = databases;
        return this;
    }

    /**
     * Get the endpoints property: Endpoints associated with the branch.
     * 
     * @return the endpoints value.
     */
    @Generated
    public List<EndpointProperties> endpoints() {
        return this.endpoints;
    }

    /**
     * Set the endpoints property: Endpoints associated with the branch.
     * 
     * @param endpoints the endpoints value to set.
     * @return the BranchProperties object itself.
     */
    @Generated
    public BranchProperties withEndpoints(List<EndpointProperties> endpoints) {
        this.endpoints = endpoints;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (attributes() != null) {
            attributes().forEach(e -> e.validate());
        }
        if (roles() != null) {
            roles().forEach(e -> e.validate());
        }
        if (databases() != null) {
            databases().forEach(e -> e.validate());
        }
        if (endpoints() != null) {
            endpoints().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("entityName", this.entityName);
        jsonWriter.writeArrayField("attributes", this.attributes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("projectId", this.projectId);
        jsonWriter.writeStringField("parentId", this.parentId);
        jsonWriter.writeStringField("roleName", this.roleName);
        jsonWriter.writeStringField("databaseName", this.databaseName);
        jsonWriter.writeArrayField("roles", this.roles, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("databases", this.databases, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("endpoints", this.endpoints, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BranchProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BranchProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BranchProperties.
     */
    public static BranchProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BranchProperties deserializedBranchProperties = new BranchProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("entityId".equals(fieldName)) {
                    deserializedBranchProperties.entityId = reader.getString();
                } else if ("entityName".equals(fieldName)) {
                    deserializedBranchProperties.entityName = reader.getString();
                } else if ("createdAt".equals(fieldName)) {
                    deserializedBranchProperties.createdAt = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedBranchProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("attributes".equals(fieldName)) {
                    List<Attributes> attributes = reader.readArray(reader1 -> Attributes.fromJson(reader1));
                    deserializedBranchProperties.attributes = attributes;
                } else if ("projectId".equals(fieldName)) {
                    deserializedBranchProperties.projectId = reader.getString();
                } else if ("parentId".equals(fieldName)) {
                    deserializedBranchProperties.parentId = reader.getString();
                } else if ("roleName".equals(fieldName)) {
                    deserializedBranchProperties.roleName = reader.getString();
                } else if ("databaseName".equals(fieldName)) {
                    deserializedBranchProperties.databaseName = reader.getString();
                } else if ("roles".equals(fieldName)) {
                    List<NeonRoleProperties> roles = reader.readArray(reader1 -> NeonRoleProperties.fromJson(reader1));
                    deserializedBranchProperties.roles = roles;
                } else if ("databases".equals(fieldName)) {
                    List<NeonDatabaseProperties> databases
                        = reader.readArray(reader1 -> NeonDatabaseProperties.fromJson(reader1));
                    deserializedBranchProperties.databases = databases;
                } else if ("endpoints".equals(fieldName)) {
                    List<EndpointProperties> endpoints
                        = reader.readArray(reader1 -> EndpointProperties.fromJson(reader1));
                    deserializedBranchProperties.endpoints = endpoints;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBranchProperties;
        });
    }
}
