// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.neonpostgres.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Offer details for the marketplace that is selected by the user.
 */
@Fluent
public final class OfferDetails implements JsonSerializable<OfferDetails> {
    /*
     * Publisher Id for the marketplace offer
     */
    private String publisherId;

    /*
     * Offer Id for the marketplace offer
     */
    private String offerId;

    /*
     * Plan Id for the marketplace offer
     */
    private String planId;

    /*
     * Plan Name for the marketplace offer
     */
    private String planName;

    /*
     * Term Name for the marketplace offer
     */
    private String termUnit;

    /*
     * Term Id for the marketplace offer
     */
    private String termId;

    /**
     * Creates an instance of OfferDetails class.
     */
    public OfferDetails() {
    }

    /**
     * Get the publisherId property: Publisher Id for the marketplace offer.
     * 
     * @return the publisherId value.
     */
    public String publisherId() {
        return this.publisherId;
    }

    /**
     * Set the publisherId property: Publisher Id for the marketplace offer.
     * 
     * @param publisherId the publisherId value to set.
     * @return the OfferDetails object itself.
     */
    public OfferDetails withPublisherId(String publisherId) {
        this.publisherId = publisherId;
        return this;
    }

    /**
     * Get the offerId property: Offer Id for the marketplace offer.
     * 
     * @return the offerId value.
     */
    public String offerId() {
        return this.offerId;
    }

    /**
     * Set the offerId property: Offer Id for the marketplace offer.
     * 
     * @param offerId the offerId value to set.
     * @return the OfferDetails object itself.
     */
    public OfferDetails withOfferId(String offerId) {
        this.offerId = offerId;
        return this;
    }

    /**
     * Get the planId property: Plan Id for the marketplace offer.
     * 
     * @return the planId value.
     */
    public String planId() {
        return this.planId;
    }

    /**
     * Set the planId property: Plan Id for the marketplace offer.
     * 
     * @param planId the planId value to set.
     * @return the OfferDetails object itself.
     */
    public OfferDetails withPlanId(String planId) {
        this.planId = planId;
        return this;
    }

    /**
     * Get the planName property: Plan Name for the marketplace offer.
     * 
     * @return the planName value.
     */
    public String planName() {
        return this.planName;
    }

    /**
     * Set the planName property: Plan Name for the marketplace offer.
     * 
     * @param planName the planName value to set.
     * @return the OfferDetails object itself.
     */
    public OfferDetails withPlanName(String planName) {
        this.planName = planName;
        return this;
    }

    /**
     * Get the termUnit property: Term Name for the marketplace offer.
     * 
     * @return the termUnit value.
     */
    public String termUnit() {
        return this.termUnit;
    }

    /**
     * Set the termUnit property: Term Name for the marketplace offer.
     * 
     * @param termUnit the termUnit value to set.
     * @return the OfferDetails object itself.
     */
    public OfferDetails withTermUnit(String termUnit) {
        this.termUnit = termUnit;
        return this;
    }

    /**
     * Get the termId property: Term Id for the marketplace offer.
     * 
     * @return the termId value.
     */
    public String termId() {
        return this.termId;
    }

    /**
     * Set the termId property: Term Id for the marketplace offer.
     * 
     * @param termId the termId value to set.
     * @return the OfferDetails object itself.
     */
    public OfferDetails withTermId(String termId) {
        this.termId = termId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (publisherId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property publisherId in model OfferDetails"));
        }
        if (offerId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property offerId in model OfferDetails"));
        }
        if (planId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property planId in model OfferDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OfferDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("publisherId", this.publisherId);
        jsonWriter.writeStringField("offerId", this.offerId);
        jsonWriter.writeStringField("planId", this.planId);
        jsonWriter.writeStringField("planName", this.planName);
        jsonWriter.writeStringField("termUnit", this.termUnit);
        jsonWriter.writeStringField("termId", this.termId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OfferDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OfferDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OfferDetails.
     */
    public static OfferDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OfferDetails deserializedOfferDetails = new OfferDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("publisherId".equals(fieldName)) {
                    deserializedOfferDetails.publisherId = reader.getString();
                } else if ("offerId".equals(fieldName)) {
                    deserializedOfferDetails.offerId = reader.getString();
                } else if ("planId".equals(fieldName)) {
                    deserializedOfferDetails.planId = reader.getString();
                } else if ("planName".equals(fieldName)) {
                    deserializedOfferDetails.planName = reader.getString();
                } else if ("termUnit".equals(fieldName)) {
                    deserializedOfferDetails.termUnit = reader.getString();
                } else if ("termId".equals(fieldName)) {
                    deserializedOfferDetails.termId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOfferDetails;
        });
    }
}
