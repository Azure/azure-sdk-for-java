// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.storageactions.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storageactions.models.ElseCondition;
import com.azure.resourcemanager.storageactions.models.IfCondition;
import com.azure.resourcemanager.storageactions.models.OnFailure;
import com.azure.resourcemanager.storageactions.models.OnSuccess;
import com.azure.resourcemanager.storageactions.models.StorageTaskAction;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperation;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperationName;
import com.azure.resourcemanager.storageactions.models.StorageTaskUpdateProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StorageTaskUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageTaskUpdateProperties model = BinaryData.fromString(
            "{\"taskVersion\":6060739170812321480,\"enabled\":false,\"description\":\"vxodpu\",\"action\":{\"if\":{\"condition\":\"myzydagfuaxbez\",\"operations\":[{\"name\":\"SetBlobImmutabilityPolicy\",\"parameters\":{\"dxwzywqsmbsurexi\":\"ktwh\",\"yocf\":\"o\",\"uxh\":\"fksymddystki\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]},\"else\":{\"operations\":[{\"name\":\"SetBlobTags\",\"parameters\":{\"oczvy\":\"b\",\"watkpnpulexxb\":\"fqrvkdvjsllrmvvd\",\"yokacspkw\":\"zwtruwiqzbqjvsov\",\"rkcciwwzjuqk\":\"hzdobpxjmflbvvnc\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"SetBlobImmutabilityPolicy\",\"parameters\":{\"oskg\":\"uo\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"SetBlobTier\",\"parameters\":{\"duugidyjr\":\"mvxi\",\"y\":\"f\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"SetBlobTier\",\"parameters\":{\"hocohslkev\":\"onpc\",\"hfmvfaxkffe\":\"eggzfb\",\"sbbzo\":\"ithlvmezyvshxm\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]}},\"provisioningState\":\"Failed\",\"creationTimeInUtc\":\"2021-08-02T21:26:13Z\"}")
            .toObject(StorageTaskUpdateProperties.class);
        Assertions.assertFalse(model.enabled());
        Assertions.assertEquals("vxodpu", model.description());
        Assertions.assertEquals("myzydagfuaxbez", model.action().ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_IMMUTABILITY_POLICY,
            model.action().ifProperty().operations().get(0).name());
        Assertions.assertEquals("ktwh",
            model.action().ifProperty().operations().get(0).parameters().get("dxwzywqsmbsurexi"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.action().ifProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.action().ifProperty().operations().get(0).onFailure());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_TAGS,
            model.action().elseProperty().operations().get(0).name());
        Assertions.assertEquals("b", model.action().elseProperty().operations().get(0).parameters().get("oczvy"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.action().elseProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.action().elseProperty().operations().get(0).onFailure());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageTaskUpdateProperties model
            = new StorageTaskUpdateProperties().withEnabled(false)
                .withDescription("vxodpu")
                .withAction(
                    new StorageTaskAction()
                        .withIfProperty(new IfCondition().withCondition("myzydagfuaxbez")
                            .withOperations(Arrays.asList(new StorageTaskOperation()
                                .withName(StorageTaskOperationName.SET_BLOB_IMMUTABILITY_POLICY)
                                .withParameters(mapOf("dxwzywqsmbsurexi", "ktwh", "yocf", "o", "uxh", "fksymddystki"))
                                .withOnSuccess(OnSuccess.CONTINUE)
                                .withOnFailure(OnFailure.BREAK))))
                        .withElseProperty(new ElseCondition().withOperations(Arrays.asList(
                            new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_TAGS)
                                .withParameters(mapOf("oczvy", "b", "watkpnpulexxb", "fqrvkdvjsllrmvvd", "yokacspkw",
                                    "zwtruwiqzbqjvsov", "rkcciwwzjuqk", "hzdobpxjmflbvvnc"))
                                .withOnSuccess(OnSuccess.CONTINUE)
                                .withOnFailure(OnFailure.BREAK),
                            new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_IMMUTABILITY_POLICY)
                                .withParameters(mapOf("oskg", "uo"))
                                .withOnSuccess(OnSuccess.CONTINUE)
                                .withOnFailure(OnFailure.BREAK),
                            new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_TIER)
                                .withParameters(mapOf("duugidyjr", "mvxi", "y", "f"))
                                .withOnSuccess(OnSuccess.CONTINUE)
                                .withOnFailure(OnFailure.BREAK),
                            new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_TIER)
                                .withParameters(
                                    mapOf("hocohslkev", "onpc", "hfmvfaxkffe", "eggzfb", "sbbzo", "ithlvmezyvshxm"))
                                .withOnSuccess(OnSuccess.CONTINUE)
                                .withOnFailure(OnFailure.BREAK)))));
        model = BinaryData.fromObject(model).toObject(StorageTaskUpdateProperties.class);
        Assertions.assertFalse(model.enabled());
        Assertions.assertEquals("vxodpu", model.description());
        Assertions.assertEquals("myzydagfuaxbez", model.action().ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_IMMUTABILITY_POLICY,
            model.action().ifProperty().operations().get(0).name());
        Assertions.assertEquals("ktwh",
            model.action().ifProperty().operations().get(0).parameters().get("dxwzywqsmbsurexi"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.action().ifProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.action().ifProperty().operations().get(0).onFailure());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_TAGS,
            model.action().elseProperty().operations().get(0).name());
        Assertions.assertEquals("b", model.action().elseProperty().operations().get(0).parameters().get("oczvy"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.action().elseProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.action().elseProperty().operations().get(0).onFailure());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
