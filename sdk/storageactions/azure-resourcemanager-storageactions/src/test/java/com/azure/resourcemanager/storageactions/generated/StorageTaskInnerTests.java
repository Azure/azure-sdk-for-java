// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.storageactions.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storageactions.fluent.models.StorageTaskInner;
import com.azure.resourcemanager.storageactions.models.ElseCondition;
import com.azure.resourcemanager.storageactions.models.IfCondition;
import com.azure.resourcemanager.storageactions.models.ManagedServiceIdentity;
import com.azure.resourcemanager.storageactions.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.storageactions.models.OnFailure;
import com.azure.resourcemanager.storageactions.models.OnSuccess;
import com.azure.resourcemanager.storageactions.models.StorageTaskAction;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperation;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperationName;
import com.azure.resourcemanager.storageactions.models.StorageTaskProperties;
import com.azure.resourcemanager.storageactions.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StorageTaskInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageTaskInner model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"ijbpzvgnwzsymgl\",\"tenantId\":\"fcyzkohdbihanufh\",\"type\":\"None\",\"userAssignedIdentities\":{\"xwczbyscnp\":{\"principalId\":\"s\",\"clientId\":\"ithxqhabifpi\"},\"xvd\":{\"principalId\":\"uhivyqniw\",\"clientId\":\"br\"}}},\"properties\":{\"taskVersion\":3952469700454965475,\"enabled\":false,\"description\":\"tfwvukxgaudc\",\"action\":{\"if\":{\"condition\":\"snhsjcnyejhkryh\",\"operations\":[{\"name\":\"UndeleteBlob\",\"parameters\":{\"okjye\":\"zw\",\"jnchgej\":\"kkvnipjox\",\"huxinpmqnj\":\"podmailzydehojwy\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"SetBlobImmutabilityPolicy\",\"parameters\":{\"zvcputegjvwmfda\":\"r\",\"mkjozkrwf\":\"scmdvpjhulsuu\",\"jpslwejd\":\"dio\",\"cctazakljlahbc\":\"vwryoqpso\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"UndeleteBlob\",\"parameters\":{\"expa\":\"sy\",\"rzevdphlxaol\":\"jakhmsbzjh\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]},\"else\":{\"operations\":[{\"name\":\"SetBlobLegalHold\",\"parameters\":{\"fsinzgvfcjrwzoxx\":\"f\",\"wfzitonpeqfpjk\":\"tfell\",\"nmayhuybb\":\"lxofpdvhpfxxypin\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"SetBlobTags\",\"parameters\":{\"ognarxzxtheotus\":\"ginuvamih\",\"nhungbw\":\"vyevcciqi\",\"gxg\":\"zrnf\",\"fublj\":\"spemvtzfk\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"UndeleteBlob\",\"parameters\":{\"jqul\":\"aeqjhqjbasvms\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]}},\"provisioningState\":\"Canceled\",\"creationTimeInUtc\":\"2021-06-06T02:55:58Z\"},\"location\":\"zgcwrw\",\"tags\":{\"cjdkwtnhxbnjbi\":\"xwrljdouskcqvkoc\"},\"id\":\"sqrglssainq\",\"name\":\"jwnzlljfmp\",\"type\":\"eebvmgxsab\"}")
            .toObject(StorageTaskInner.class);
        Assertions.assertEquals("zgcwrw", model.location());
        Assertions.assertEquals("xwrljdouskcqvkoc", model.tags().get("cjdkwtnhxbnjbi"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertFalse(model.properties().enabled());
        Assertions.assertEquals("tfwvukxgaudc", model.properties().description());
        Assertions.assertEquals("snhsjcnyejhkryh", model.properties().action().ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.UNDELETE_BLOB,
            model.properties().action().ifProperty().operations().get(0).name());
        Assertions.assertEquals("zw",
            model.properties().action().ifProperty().operations().get(0).parameters().get("okjye"));
        Assertions.assertEquals(OnSuccess.CONTINUE,
            model.properties().action().ifProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK,
            model.properties().action().ifProperty().operations().get(0).onFailure());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_LEGAL_HOLD,
            model.properties().action().elseProperty().operations().get(0).name());
        Assertions.assertEquals("f",
            model.properties().action().elseProperty().operations().get(0).parameters().get("fsinzgvfcjrwzoxx"));
        Assertions.assertEquals(OnSuccess.CONTINUE,
            model.properties().action().elseProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK,
            model.properties().action().elseProperty().operations().get(0).onFailure());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageTaskInner model
            = new StorageTaskInner().withLocation("zgcwrw")
                .withTags(mapOf("cjdkwtnhxbnjbi", "xwrljdouskcqvkoc"))
                .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                    .withUserAssignedIdentities(
                        mapOf("xwczbyscnp", new UserAssignedIdentity(), "xvd", new UserAssignedIdentity())))
                .withProperties(
                    new StorageTaskProperties().withEnabled(false)
                        .withDescription("tfwvukxgaudc")
                        .withAction(new StorageTaskAction()
                            .withIfProperty(new IfCondition().withCondition("snhsjcnyejhkryh")
                                .withOperations(Arrays.asList(
                                    new StorageTaskOperation().withName(StorageTaskOperationName.UNDELETE_BLOB)
                                        .withParameters(mapOf("okjye", "zw", "jnchgej", "kkvnipjox", "huxinpmqnj",
                                            "podmailzydehojwy"))
                                        .withOnSuccess(OnSuccess.CONTINUE)
                                        .withOnFailure(OnFailure.BREAK),
                                    new StorageTaskOperation()
                                        .withName(StorageTaskOperationName.SET_BLOB_IMMUTABILITY_POLICY)
                                        .withParameters(mapOf("zvcputegjvwmfda", "r", "mkjozkrwf", "scmdvpjhulsuu",
                                            "jpslwejd", "dio", "cctazakljlahbc", "vwryoqpso"))
                                        .withOnSuccess(OnSuccess.CONTINUE)
                                        .withOnFailure(OnFailure.BREAK),
                                    new StorageTaskOperation().withName(StorageTaskOperationName.UNDELETE_BLOB)
                                        .withParameters(mapOf("expa", "sy", "rzevdphlxaol", "jakhmsbzjh"))
                                        .withOnSuccess(OnSuccess.CONTINUE)
                                        .withOnFailure(OnFailure.BREAK))))
                            .withElseProperty(new ElseCondition().withOperations(Arrays.asList(
                                new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_LEGAL_HOLD)
                                    .withParameters(mapOf("fsinzgvfcjrwzoxx", "f", "wfzitonpeqfpjk", "tfell",
                                        "nmayhuybb", "lxofpdvhpfxxypin"))
                                    .withOnSuccess(OnSuccess.CONTINUE)
                                    .withOnFailure(OnFailure.BREAK),
                                new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_TAGS)
                                    .withParameters(mapOf("ognarxzxtheotus", "ginuvamih", "nhungbw", "vyevcciqi", "gxg",
                                        "zrnf", "fublj", "spemvtzfk"))
                                    .withOnSuccess(OnSuccess.CONTINUE)
                                    .withOnFailure(OnFailure.BREAK),
                                new StorageTaskOperation().withName(StorageTaskOperationName.UNDELETE_BLOB)
                                    .withParameters(mapOf("jqul", "aeqjhqjbasvms"))
                                    .withOnSuccess(OnSuccess.CONTINUE)
                                    .withOnFailure(OnFailure.BREAK))))));
        model = BinaryData.fromObject(model).toObject(StorageTaskInner.class);
        Assertions.assertEquals("zgcwrw", model.location());
        Assertions.assertEquals("xwrljdouskcqvkoc", model.tags().get("cjdkwtnhxbnjbi"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertFalse(model.properties().enabled());
        Assertions.assertEquals("tfwvukxgaudc", model.properties().description());
        Assertions.assertEquals("snhsjcnyejhkryh", model.properties().action().ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.UNDELETE_BLOB,
            model.properties().action().ifProperty().operations().get(0).name());
        Assertions.assertEquals("zw",
            model.properties().action().ifProperty().operations().get(0).parameters().get("okjye"));
        Assertions.assertEquals(OnSuccess.CONTINUE,
            model.properties().action().ifProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK,
            model.properties().action().ifProperty().operations().get(0).onFailure());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_LEGAL_HOLD,
            model.properties().action().elseProperty().operations().get(0).name());
        Assertions.assertEquals("f",
            model.properties().action().elseProperty().operations().get(0).parameters().get("fsinzgvfcjrwzoxx"));
        Assertions.assertEquals(OnSuccess.CONTINUE,
            model.properties().action().elseProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK,
            model.properties().action().elseProperty().operations().get(0).onFailure());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
