// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storageactions.fluent.models.StorageTaskInner;
import com.azure.resourcemanager.storageactions.models.ElseCondition;
import com.azure.resourcemanager.storageactions.models.IfCondition;
import com.azure.resourcemanager.storageactions.models.ManagedServiceIdentity;
import com.azure.resourcemanager.storageactions.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.storageactions.models.OnFailure;
import com.azure.resourcemanager.storageactions.models.OnSuccess;
import com.azure.resourcemanager.storageactions.models.StorageTaskAction;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperation;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperationName;
import com.azure.resourcemanager.storageactions.models.StorageTaskProperties;
import com.azure.resourcemanager.storageactions.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StorageTaskInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageTaskInner model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"41508ce2-c4d1-4dc2-823b-d050dc7baf7e\",\"tenantId\":\"21625193-87cd-4d14-b165-a4f739f50c56\",\"type\":\"None\",\"userAssignedIdentities\":{\"qhabifpikxwcz\":{\"principalId\":\"733bc799-807e-4678-bec2-d909647fb274\",\"clientId\":\"09b627db-3a70-4045-8b0d-dd94866b0b71\"}}},\"properties\":{\"taskVersion\":3372129920897146496,\"enabled\":false,\"description\":\"pqxu\",\"action\":{\"if\":{\"condition\":\"ivyqniwbybrkxvd\",\"operations\":[{\"name\":\"SetBlobTags\",\"parameters\":{\"snhsjcnyejhkryh\":\"tfwvukxgaudc\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]},\"else\":{\"operations\":[{\"name\":\"SetBlobImmutabilityPolicy\",\"parameters\":{\"kkvnipjox\":\"jye\",\"podmailzydehojwy\":\"jnchgej\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"SetBlobImmutabilityPolicy\",\"parameters\":{\"sprozvcput\":\"qnjaqwix\",\"fdatsc\":\"gjvw\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]}},\"provisioningState\":\"Deleting\",\"creationTimeInUtc\":\"2021-02-16T21:00:55Z\"},\"location\":\"uvm\",\"tags\":{\"iodjp\":\"zkrwfn\",\"ryo\":\"lwejdpv\",\"hbcryffdfdosyge\":\"psoacctazakljl\",\"rzevdphlxaol\":\"paojakhmsbzjh\"},\"id\":\"hqtrgqjbpf\",\"name\":\"fsinzgvfcjrwzoxx\",\"type\":\"tfell\"}")
            .toObject(StorageTaskInner.class);
        Assertions.assertEquals("uvm", model.location());
        Assertions.assertEquals("zkrwfn", model.tags().get("iodjp"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals(false, model.properties().enabled());
        Assertions.assertEquals("pqxu", model.properties().description());
        Assertions.assertEquals("ivyqniwbybrkxvd", model.properties().action().ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_TAGS,
            model.properties().action().ifProperty().operations().get(0).name());
        Assertions.assertEquals("tfwvukxgaudc",
            model.properties().action().ifProperty().operations().get(0).parameters().get("snhsjcnyejhkryh"));
        Assertions.assertEquals(OnSuccess.CONTINUE,
            model.properties().action().ifProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK,
            model.properties().action().ifProperty().operations().get(0).onFailure());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_IMMUTABILITY_POLICY,
            model.properties().action().elseProperty().operations().get(0).name());
        Assertions.assertEquals("jye",
            model.properties().action().elseProperty().operations().get(0).parameters().get("kkvnipjox"));
        Assertions.assertEquals(OnSuccess.CONTINUE,
            model.properties().action().elseProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK,
            model.properties().action().elseProperty().operations().get(0).onFailure());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageTaskInner model
            = new StorageTaskInner().withLocation("uvm")
                .withTags(mapOf("iodjp", "zkrwfn", "ryo", "lwejdpv", "hbcryffdfdosyge", "psoacctazakljl",
                    "rzevdphlxaol", "paojakhmsbzjh"))
                .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                    .withUserAssignedIdentities(mapOf("qhabifpikxwcz", new UserAssignedIdentity())))
                .withProperties(
                    new StorageTaskProperties().withEnabled(false)
                        .withDescription("pqxu")
                        .withAction(new StorageTaskAction()
                            .withIfProperty(new IfCondition().withCondition("ivyqniwbybrkxvd")
                                .withOperations(Arrays.asList(
                                    new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_TAGS)
                                        .withParameters(mapOf("snhsjcnyejhkryh", "tfwvukxgaudc"))
                                        .withOnSuccess(OnSuccess.CONTINUE)
                                        .withOnFailure(OnFailure.BREAK))))
                            .withElseProperty(
                                new ElseCondition()
                                    .withOperations(
                                        Arrays.asList(
                                            new StorageTaskOperation()
                                                .withName(StorageTaskOperationName.SET_BLOB_IMMUTABILITY_POLICY)
                                                .withParameters(
                                                    mapOf("kkvnipjox", "jye", "podmailzydehojwy", "jnchgej"))
                                                .withOnSuccess(OnSuccess.CONTINUE)
                                                .withOnFailure(OnFailure.BREAK),
                                            new StorageTaskOperation()
                                                .withName(StorageTaskOperationName.SET_BLOB_IMMUTABILITY_POLICY)
                                                .withParameters(mapOf("sprozvcput", "qnjaqwix", "fdatsc", "gjvw"))
                                                .withOnSuccess(OnSuccess.CONTINUE)
                                                .withOnFailure(OnFailure.BREAK))))));
        model = BinaryData.fromObject(model).toObject(StorageTaskInner.class);
        Assertions.assertEquals("uvm", model.location());
        Assertions.assertEquals("zkrwfn", model.tags().get("iodjp"));
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals(false, model.properties().enabled());
        Assertions.assertEquals("pqxu", model.properties().description());
        Assertions.assertEquals("ivyqniwbybrkxvd", model.properties().action().ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_TAGS,
            model.properties().action().ifProperty().operations().get(0).name());
        Assertions.assertEquals("tfwvukxgaudc",
            model.properties().action().ifProperty().operations().get(0).parameters().get("snhsjcnyejhkryh"));
        Assertions.assertEquals(OnSuccess.CONTINUE,
            model.properties().action().ifProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK,
            model.properties().action().ifProperty().operations().get(0).onFailure());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_IMMUTABILITY_POLICY,
            model.properties().action().elseProperty().operations().get(0).name());
        Assertions.assertEquals("jye",
            model.properties().action().elseProperty().operations().get(0).parameters().get("kkvnipjox"));
        Assertions.assertEquals(OnSuccess.CONTINUE,
            model.properties().action().elseProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK,
            model.properties().action().elseProperty().operations().get(0).onFailure());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
