// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.storageactions.StorageActionsManager;
import com.azure.resourcemanager.storageactions.models.ElseCondition;
import com.azure.resourcemanager.storageactions.models.IfCondition;
import com.azure.resourcemanager.storageactions.models.ManagedServiceIdentity;
import com.azure.resourcemanager.storageactions.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.storageactions.models.StorageTask;
import com.azure.resourcemanager.storageactions.models.StorageTaskAction;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperation;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperationName;
import com.azure.resourcemanager.storageactions.models.StorageTaskProperties;
import com.azure.resourcemanager.storageactions.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class StorageTasksCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"identity\":{\"principalId\":\"b4fcbbf2-059a-4324-b780-80a177f80d42\",\"tenantId\":\"8fac3c53-3bc5-4c6a-8e38-39e4eee4a2fd\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"ilovnot\":{\"principalId\":\"9320d5d5-4db6-4c16-8ffb-3316ad4604af\",\"clientId\":\"124273cc-08e3-47dc-8726-5ce7d20c0ccd\"}}},\"properties\":{\"taskVersion\":4609095733155720227,\"enabled\":true,\"description\":\"njbkcnxdhbttkph\",\"action\":{\"if\":{\"condition\":\"wpn\",\"operations\":[{\"name\":\"UndeleteBlob\"},{\"name\":\"UndeleteBlob\"}]},\"else\":{\"operations\":[{\"name\":\"DeleteBlob\"},{\"name\":\"SetBlobExpiry\"}]}},\"provisioningState\":\"Succeeded\",\"creationTimeInUtc\":\"2021-09-12T23:58:43Z\"},\"location\":\"lphox\",\"tags\":{\"epsbjtazqu\":\"rpabg\",\"jidsuyonobglaoc\":\"xywpmueefjzwfqkq\"},\"id\":\"xtccmg\",\"name\":\"udxytlmoyrx\",\"type\":\"wfudwpzntxhdzhl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        StorageActionsManager manager = StorageActionsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        StorageTask response
            = manager.storageTasks()
                .define("lcuhxwtctyqiklb")
                .withRegion("uebbaumnyqup")
                .withExistingResourceGroup("fzab")
                .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("hvgyuguosvmk", new UserAssignedIdentity(), "xquk",
                        new UserAssignedIdentity(), "l", new UserAssignedIdentity())))
                .withProperties(
                    new StorageTaskProperties().withEnabled(true)
                        .withDescription("nkjzkdeslpvlop")
                        .withAction(
                            new StorageTaskAction()
                                .withIfProperty(new IfCondition().withCondition("i")
                                    .withOperations(Arrays.asList(
                                        new StorageTaskOperation()
                                            .withName(StorageTaskOperationName.SET_BLOB_LEGAL_HOLD),
                                        new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_EXPIRY))))
                                .withElseProperty(new ElseCondition().withOperations(Arrays.asList(
                                    new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_LEGAL_HOLD),
                                    new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_EXPIRY))))))
                .withTags(mapOf("tfhvpesapskrdqmh", "ojnabckhsmtxpsie", "tkncwsc", "jdhtldwkyzxu"))
                .create();

        Assertions.assertEquals("lphox", response.location());
        Assertions.assertEquals("rpabg", response.tags().get("epsbjtazqu"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals(true, response.properties().enabled());
        Assertions.assertEquals("njbkcnxdhbttkph", response.properties().description());
        Assertions.assertEquals("wpn", response.properties().action().ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.UNDELETE_BLOB,
            response.properties().action().ifProperty().operations().get(0).name());
        Assertions.assertEquals(StorageTaskOperationName.DELETE_BLOB,
            response.properties().action().elseProperty().operations().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
