// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.storageactions.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.storageactions.StorageActionsManager;
import com.azure.resourcemanager.storageactions.models.ElseCondition;
import com.azure.resourcemanager.storageactions.models.IfCondition;
import com.azure.resourcemanager.storageactions.models.ManagedServiceIdentity;
import com.azure.resourcemanager.storageactions.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.storageactions.models.StorageTask;
import com.azure.resourcemanager.storageactions.models.StorageTaskAction;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperation;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperationName;
import com.azure.resourcemanager.storageactions.models.StorageTaskProperties;
import com.azure.resourcemanager.storageactions.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class StorageTasksCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"identity\":{\"principalId\":\"jrybnwjewgdrjer\",\"tenantId\":\"aen\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"vhqlkthumaqo\":{\"principalId\":\"ndoygmifthnzdnd\",\"clientId\":\"gnayqigynduh\"}}},\"properties\":{\"taskVersion\":5649591766559477880,\"enabled\":false,\"description\":\"duiertgcc\",\"action\":{\"if\":{\"condition\":\"mvaolps\",\"operations\":[{\"name\":\"UndeleteBlob\"},{\"name\":\"UndeleteBlob\"}]},\"else\":{\"operations\":[{\"name\":\"SetBlobImmutabilityPolicy\"},{\"name\":\"SetBlobTier\"},{\"name\":\"SetBlobLegalHold\"}]}},\"provisioningState\":\"Succeeded\",\"creationTimeInUtc\":\"2021-06-14T21:23:08Z\"},\"location\":\"pswiydmcwyh\",\"tags\":{\"dbzm\":\"ss\",\"cblylpstdbhhxsr\":\"vdfznudaodvxzb\",\"erscdntne\":\"dzu\"},\"id\":\"fiwjmygtdssls\",\"name\":\"tmweriofzpyq\",\"type\":\"emwabnet\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        StorageActionsManager manager = StorageActionsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        StorageTask response
            = manager.storageTasks()
                .define("uhpigvp")
                .withRegion("vshqjohxcr")
                .withExistingResourceGroup("gdtpnapnyiro")
                .withIdentity(
                    new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                        .withUserAssignedIdentities(mapOf("fdygpfqbuaceopz", new UserAssignedIdentity(), "ahzxctobgbk",
                            new UserAssignedIdentity(), "xxjyngudivkrtsw", new UserAssignedIdentity(), "ivetvtcq",
                            new UserAssignedIdentity())))
                .withProperties(
                    new StorageTaskProperties().withEnabled(true)
                        .withDescription("qmcbxvwvxyslqbhs")
                        .withAction(new StorageTaskAction()
                            .withIfProperty(new IfCondition().withCondition("xoblytkbl")
                                .withOperations(Arrays.asList(
                                    new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_TAGS))))
                            .withElseProperty(new ElseCondition().withOperations(Arrays.asList(
                                new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_EXPIRY),
                                new StorageTaskOperation().withName(StorageTaskOperationName.DELETE_BLOB),
                                new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_EXPIRY),
                                new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_LEGAL_HOLD))))))
                .withTags(mapOf("cgjbirxbp", "ovasrruvwbhsqfsu", "dtws", "bsrfbj"))
                .create();

        Assertions.assertEquals("pswiydmcwyh", response.location());
        Assertions.assertEquals("ss", response.tags().get("dbzm"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertFalse(response.properties().enabled());
        Assertions.assertEquals("duiertgcc", response.properties().description());
        Assertions.assertEquals("mvaolps", response.properties().action().ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.UNDELETE_BLOB,
            response.properties().action().ifProperty().operations().get(0).name());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_IMMUTABILITY_POLICY,
            response.properties().action().elseProperty().operations().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
