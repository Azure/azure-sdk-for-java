// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storageactions.models.OnFailure;
import com.azure.resourcemanager.storageactions.models.OnSuccess;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperation;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperationName;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StorageTaskOperationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageTaskOperation model = BinaryData.fromString(
            "{\"name\":\"SetBlobLegalHold\",\"parameters\":{\"hzzvypyq\":\"fqpte\",\"z\":\"i\",\"dqxhcrmnohjtckwh\":\"npvswjdkirso\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}")
            .toObject(StorageTaskOperation.class);
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_LEGAL_HOLD, model.name());
        Assertions.assertEquals("fqpte", model.parameters().get("hzzvypyq"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.onFailure());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageTaskOperation model = new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_LEGAL_HOLD)
            .withParameters(mapOf("hzzvypyq", "fqpte", "z", "i", "dqxhcrmnohjtckwh", "npvswjdkirso"))
            .withOnSuccess(OnSuccess.CONTINUE)
            .withOnFailure(OnFailure.BREAK);
        model = BinaryData.fromObject(model).toObject(StorageTaskOperation.class);
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_LEGAL_HOLD, model.name());
        Assertions.assertEquals("fqpte", model.parameters().get("hzzvypyq"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.onFailure());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
