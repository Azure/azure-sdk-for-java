// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storageactions.models.ElseCondition;
import com.azure.resourcemanager.storageactions.models.IfCondition;
import com.azure.resourcemanager.storageactions.models.OnFailure;
import com.azure.resourcemanager.storageactions.models.OnSuccess;
import com.azure.resourcemanager.storageactions.models.StorageTaskAction;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperation;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperationName;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StorageTaskActionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageTaskAction model = BinaryData.fromString(
            "{\"if\":{\"condition\":\"ypnddhsgcb\",\"operations\":[{\"name\":\"SetBlobTier\",\"parameters\":{\"nqgoulzndli\":\"jkot\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]},\"else\":{\"operations\":[{\"name\":\"SetBlobLegalHold\",\"parameters\":{\"qqedqytbciqfou\":\"madgakeqsrxyb\",\"gpbkwtmut\":\"lmmnkzsmodmglo\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"SetBlobTier\",\"parameters\":{\"kdosvqw\":\"pwgcuertu\",\"bjf\":\"bmdg\",\"bexppb\":\"dgmb\",\"rolfpfp\":\"tq\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"SetBlobImmutabilityPolicy\",\"parameters\":{\"jaoyfhrtx\":\"igjyjg\",\"fqawrlyxw\":\"lnerkujysvleju\",\"xgjvtbv\":\"kcprbnw\",\"uouq\":\"ysszdnrujqguh\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]}}")
            .toObject(StorageTaskAction.class);
        Assertions.assertEquals("ypnddhsgcb", model.ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_TIER, model.ifProperty().operations().get(0).name());
        Assertions.assertEquals("jkot", model.ifProperty().operations().get(0).parameters().get("nqgoulzndli"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.ifProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.ifProperty().operations().get(0).onFailure());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_LEGAL_HOLD,
            model.elseProperty().operations().get(0).name());
        Assertions.assertEquals("madgakeqsrxyb",
            model.elseProperty().operations().get(0).parameters().get("qqedqytbciqfou"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.elseProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.elseProperty().operations().get(0).onFailure());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageTaskAction model = new StorageTaskAction().withIfProperty(new IfCondition().withCondition("ypnddhsgcb")
            .withOperations(Arrays.asList(new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_TIER)
                .withParameters(mapOf("nqgoulzndli", "jkot"))
                .withOnSuccess(OnSuccess.CONTINUE)
                .withOnFailure(OnFailure.BREAK))))
            .withElseProperty(
                new ElseCondition()
                    .withOperations(
                        Arrays
                            .asList(
                                new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_LEGAL_HOLD)
                                    .withParameters(
                                        mapOf("qqedqytbciqfou", "madgakeqsrxyb", "gpbkwtmut", "lmmnkzsmodmglo"))
                                    .withOnSuccess(OnSuccess.CONTINUE)
                                    .withOnFailure(OnFailure.BREAK),
                                new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_TIER)
                                    .withParameters(
                                        mapOf("kdosvqw", "pwgcuertu", "bjf", "bmdg", "bexppb", "dgmb", "rolfpfp", "tq"))
                                    .withOnSuccess(OnSuccess.CONTINUE)
                                    .withOnFailure(OnFailure.BREAK),
                                new StorageTaskOperation()
                                    .withName(StorageTaskOperationName.SET_BLOB_IMMUTABILITY_POLICY)
                                    .withParameters(mapOf("jaoyfhrtx", "igjyjg", "fqawrlyxw", "lnerkujysvleju",
                                        "xgjvtbv", "kcprbnw", "uouq", "ysszdnrujqguh"))
                                    .withOnSuccess(OnSuccess.CONTINUE)
                                    .withOnFailure(OnFailure.BREAK))));
        model = BinaryData.fromObject(model).toObject(StorageTaskAction.class);
        Assertions.assertEquals("ypnddhsgcb", model.ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_TIER, model.ifProperty().operations().get(0).name());
        Assertions.assertEquals("jkot", model.ifProperty().operations().get(0).parameters().get("nqgoulzndli"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.ifProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.ifProperty().operations().get(0).onFailure());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_LEGAL_HOLD,
            model.elseProperty().operations().get(0).name());
        Assertions.assertEquals("madgakeqsrxyb",
            model.elseProperty().operations().get(0).parameters().get("qqedqytbciqfou"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.elseProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.elseProperty().operations().get(0).onFailure());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
