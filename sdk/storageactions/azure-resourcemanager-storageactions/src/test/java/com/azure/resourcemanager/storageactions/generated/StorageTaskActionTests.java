// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storageactions.models.ElseCondition;
import com.azure.resourcemanager.storageactions.models.IfCondition;
import com.azure.resourcemanager.storageactions.models.OnFailure;
import com.azure.resourcemanager.storageactions.models.OnSuccess;
import com.azure.resourcemanager.storageactions.models.StorageTaskAction;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperation;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperationName;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StorageTaskActionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageTaskAction model = BinaryData.fromString(
            "{\"if\":{\"condition\":\"dmgloug\",\"operations\":[{\"name\":\"SetBlobTier\",\"parameters\":{\"wgcu\":\"mutduqktaps\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]},\"else\":{\"operations\":[{\"name\":\"UndeleteBlob\",\"parameters\":{\"bmdg\":\"qw\",\"dgmb\":\"bjf\",\"tq\":\"bexppb\",\"algbquxigjyjg\":\"rolfpfp\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"SetBlobExpiry\",\"parameters\":{\"vlejuvfqa\":\"txilnerkujy\",\"xgjvtbv\":\"rlyxwjkcprbnw\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"SetBlobTags\",\"parameters\":{\"guhmuouqfpr\":\"uj\",\"nguitnwuizgazxu\":\"zw\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"UndeleteBlob\",\"parameters\":{\"rfidfvzwdz\":\"i\",\"sdkf\":\"htymw\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]}}")
            .toObject(StorageTaskAction.class);
        Assertions.assertEquals("dmgloug", model.ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_TIER, model.ifProperty().operations().get(0).name());
        Assertions.assertEquals("mutduqktaps", model.ifProperty().operations().get(0).parameters().get("wgcu"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.ifProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.ifProperty().operations().get(0).onFailure());
        Assertions.assertEquals(StorageTaskOperationName.UNDELETE_BLOB,
            model.elseProperty().operations().get(0).name());
        Assertions.assertEquals("qw", model.elseProperty().operations().get(0).parameters().get("bmdg"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.elseProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.elseProperty().operations().get(0).onFailure());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageTaskAction model
            = new StorageTaskAction()
                .withIfProperty(new IfCondition().withCondition("dmgloug")
                    .withOperations(Arrays.asList(new StorageTaskOperation()
                        .withName(StorageTaskOperationName.SET_BLOB_TIER).withParameters(mapOf("wgcu", "mutduqktaps"))
                        .withOnSuccess(OnSuccess.CONTINUE).withOnFailure(OnFailure.BREAK))))
                .withElseProperty(
                    new ElseCondition()
                        .withOperations(
                            Arrays
                                .asList(
                                    new StorageTaskOperation().withName(StorageTaskOperationName.UNDELETE_BLOB)
                                        .withParameters(mapOf("bmdg", "qw", "dgmb", "bjf", "tq", "bexppb",
                                            "algbquxigjyjg", "rolfpfp"))
                                        .withOnSuccess(OnSuccess.CONTINUE).withOnFailure(OnFailure.BREAK),
                                    new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_EXPIRY)
                                        .withParameters(mapOf("vlejuvfqa", "txilnerkujy", "xgjvtbv", "rlyxwjkcprbnw"))
                                        .withOnSuccess(OnSuccess.CONTINUE).withOnFailure(OnFailure.BREAK),
                                    new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_TAGS)
                                        .withParameters(mapOf("guhmuouqfpr", "uj", "nguitnwuizgazxu", "zw"))
                                        .withOnSuccess(OnSuccess.CONTINUE).withOnFailure(OnFailure.BREAK),
                                    new StorageTaskOperation().withName(StorageTaskOperationName.UNDELETE_BLOB)
                                        .withParameters(mapOf("rfidfvzwdz", "i", "sdkf", "htymw"))
                                        .withOnSuccess(OnSuccess.CONTINUE).withOnFailure(OnFailure.BREAK))));
        model = BinaryData.fromObject(model).toObject(StorageTaskAction.class);
        Assertions.assertEquals("dmgloug", model.ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_TIER, model.ifProperty().operations().get(0).name());
        Assertions.assertEquals("mutduqktaps", model.ifProperty().operations().get(0).parameters().get("wgcu"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.ifProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.ifProperty().operations().get(0).onFailure());
        Assertions.assertEquals(StorageTaskOperationName.UNDELETE_BLOB,
            model.elseProperty().operations().get(0).name());
        Assertions.assertEquals("qw", model.elseProperty().operations().get(0).parameters().get("bmdg"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.elseProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.elseProperty().operations().get(0).onFailure());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
