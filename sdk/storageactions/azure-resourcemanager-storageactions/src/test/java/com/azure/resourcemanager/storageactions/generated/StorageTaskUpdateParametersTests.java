// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storageactions.models.ElseCondition;
import com.azure.resourcemanager.storageactions.models.IfCondition;
import com.azure.resourcemanager.storageactions.models.ManagedServiceIdentity;
import com.azure.resourcemanager.storageactions.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.storageactions.models.OnFailure;
import com.azure.resourcemanager.storageactions.models.OnSuccess;
import com.azure.resourcemanager.storageactions.models.StorageTaskAction;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperation;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperationName;
import com.azure.resourcemanager.storageactions.models.StorageTaskProperties;
import com.azure.resourcemanager.storageactions.models.StorageTaskUpdateParameters;
import com.azure.resourcemanager.storageactions.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StorageTaskUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageTaskUpdateParameters model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"838c709e-d905-4afd-955d-758ab957c691\",\"tenantId\":\"55a2cb0d-d988-4293-bb87-09311695d8e2\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"erhhbcsglumm\":{\"principalId\":\"45fb4590-b03c-423d-ac10-69640fedb353\",\"clientId\":\"294f6de9-60c4-4e07-a9da-b4de45485384\"},\"j\":{\"principalId\":\"b50a1a9e-01cb-4184-85d2-1ee058774378\",\"clientId\":\"bbce8433-aa26-4cb2-9468-9869e19e63eb\"}}},\"tags\":{\"jionpimexgstxgc\":\"xobnbdxkqpxok\"},\"properties\":{\"taskVersion\":8018866075965400544,\"enabled\":false,\"description\":\"ajrmvdjwzrlovmc\",\"action\":{\"if\":{\"condition\":\"whijcoejctbza\",\"operations\":[{\"name\":\"SetBlobTags\",\"parameters\":{\"kdkexxp\":\"cbkbfkg\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]},\"else\":{\"operations\":[{\"name\":\"SetBlobExpiry\",\"parameters\":{\"dtocj\":\"pg\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]}},\"provisioningState\":\"Deleting\",\"creationTimeInUtc\":\"2021-01-21T14:33:44Z\"}}")
            .toObject(StorageTaskUpdateParameters.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("xobnbdxkqpxok", model.tags().get("jionpimexgstxgc"));
        Assertions.assertEquals(false, model.properties().enabled());
        Assertions.assertEquals("ajrmvdjwzrlovmc", model.properties().description());
        Assertions.assertEquals("whijcoejctbza", model.properties().action().ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_TAGS,
            model.properties().action().ifProperty().operations().get(0).name());
        Assertions.assertEquals("cbkbfkg",
            model.properties().action().ifProperty().operations().get(0).parameters().get("kdkexxp"));
        Assertions.assertEquals(OnSuccess.CONTINUE,
            model.properties().action().ifProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK,
            model.properties().action().ifProperty().operations().get(0).onFailure());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_EXPIRY,
            model.properties().action().elseProperty().operations().get(0).name());
        Assertions.assertEquals("pg",
            model.properties().action().elseProperty().operations().get(0).parameters().get("dtocj"));
        Assertions.assertEquals(OnSuccess.CONTINUE,
            model.properties().action().elseProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK,
            model.properties().action().elseProperty().operations().get(0).onFailure());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageTaskUpdateParameters model
            = new StorageTaskUpdateParameters()
                .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                    .withUserAssignedIdentities(
                        mapOf("erhhbcsglumm", new UserAssignedIdentity(), "j", new UserAssignedIdentity())))
                .withTags(mapOf("jionpimexgstxgc", "xobnbdxkqpxok"))
                .withProperties(new StorageTaskProperties().withEnabled(false)
                    .withDescription("ajrmvdjwzrlovmc")
                    .withAction(new StorageTaskAction()
                        .withIfProperty(new IfCondition().withCondition("whijcoejctbza")
                            .withOperations(Arrays
                                .asList(new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_TAGS)
                                    .withParameters(mapOf("kdkexxp", "cbkbfkg"))
                                    .withOnSuccess(OnSuccess.CONTINUE)
                                    .withOnFailure(OnFailure.BREAK))))
                        .withElseProperty(new ElseCondition().withOperations(
                            Arrays.asList(new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_EXPIRY)
                                .withParameters(mapOf("dtocj", "pg"))
                                .withOnSuccess(OnSuccess.CONTINUE)
                                .withOnFailure(OnFailure.BREAK))))));
        model = BinaryData.fromObject(model).toObject(StorageTaskUpdateParameters.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("xobnbdxkqpxok", model.tags().get("jionpimexgstxgc"));
        Assertions.assertEquals(false, model.properties().enabled());
        Assertions.assertEquals("ajrmvdjwzrlovmc", model.properties().description());
        Assertions.assertEquals("whijcoejctbza", model.properties().action().ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_TAGS,
            model.properties().action().ifProperty().operations().get(0).name());
        Assertions.assertEquals("cbkbfkg",
            model.properties().action().ifProperty().operations().get(0).parameters().get("kdkexxp"));
        Assertions.assertEquals(OnSuccess.CONTINUE,
            model.properties().action().ifProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK,
            model.properties().action().ifProperty().operations().get(0).onFailure());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_EXPIRY,
            model.properties().action().elseProperty().operations().get(0).name());
        Assertions.assertEquals("pg",
            model.properties().action().elseProperty().operations().get(0).parameters().get("dtocj"));
        Assertions.assertEquals(OnSuccess.CONTINUE,
            model.properties().action().elseProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK,
            model.properties().action().elseProperty().operations().get(0).onFailure());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
