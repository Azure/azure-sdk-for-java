// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.storageactions.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storageactions.models.ElseCondition;
import com.azure.resourcemanager.storageactions.models.IfCondition;
import com.azure.resourcemanager.storageactions.models.ManagedServiceIdentity;
import com.azure.resourcemanager.storageactions.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.storageactions.models.OnFailure;
import com.azure.resourcemanager.storageactions.models.OnSuccess;
import com.azure.resourcemanager.storageactions.models.StorageTaskAction;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperation;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperationName;
import com.azure.resourcemanager.storageactions.models.StorageTaskUpdateParameters;
import com.azure.resourcemanager.storageactions.models.StorageTaskUpdateProperties;
import com.azure.resourcemanager.storageactions.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StorageTaskUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageTaskUpdateParameters model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"ugnxkrxdqmi\",\"tenantId\":\"thz\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"qfbow\":{\"principalId\":\"abhjybi\",\"clientId\":\"h\"},\"rcgyn\":{\"principalId\":\"anyktzlcuiywg\",\"clientId\":\"wgndrvynhzgpp\"},\"qjqabcypmivkwl\":{\"principalId\":\"cpecfvmmcoofs\",\"clientId\":\"zevgb\"}}},\"tags\":{\"ebxetqgtzxdp\":\"ccfwnfnbacfion\",\"feallnwsu\":\"qbqqwxr\"},\"properties\":{\"taskVersion\":6252291528456824174,\"enabled\":true,\"description\":\"mngnzscxaqw\",\"action\":{\"if\":{\"condition\":\"chcbonqvpkvlrxnj\",\"operations\":[{\"name\":\"UndeleteBlob\",\"parameters\":{\"enjbdlwtgrhp\":\"pheoflokeyy\",\"umasxazjpq\":\"jp\",\"ualhbxxhejj\":\"e\",\"ynpwlbj\":\"zvdudgwdslfhotwm\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]},\"else\":{\"operations\":[{\"name\":\"UndeleteBlob\",\"parameters\":{\"nltyfsoppusuesnz\":\"h\",\"xzdmohctb\":\"dejbavo\",\"ndnvo\":\"vudwx\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"DeleteBlob\",\"parameters\":{\"zj\":\"dkcglhsl\",\"kuofqweykhme\":\"yggdtjixh\",\"yvdcsitynnaa\":\"evfyexfwhybcib\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"SetBlobImmutabilityPolicy\",\"parameters\":{\"ezrkgqhcjrefo\":\"iqscjeypv\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"SetBlobExpiry\",\"parameters\":{\"jcrcczsqpjhvmda\":\"yyvxyqjpkcattpn\",\"ysou\":\"v\",\"canoaeupf\":\"q\",\"tuo\":\"yhltrpmopjmcm\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]}},\"provisioningState\":\"Succeeded\",\"creationTimeInUtc\":\"2021-09-11T13:03:08Z\"}}")
            .toObject(StorageTaskUpdateParameters.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("ccfwnfnbacfion", model.tags().get("ebxetqgtzxdp"));
        Assertions.assertTrue(model.properties().enabled());
        Assertions.assertEquals("mngnzscxaqw", model.properties().description());
        Assertions.assertEquals("chcbonqvpkvlrxnj", model.properties().action().ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.UNDELETE_BLOB,
            model.properties().action().ifProperty().operations().get(0).name());
        Assertions.assertEquals("pheoflokeyy",
            model.properties().action().ifProperty().operations().get(0).parameters().get("enjbdlwtgrhp"));
        Assertions.assertEquals(OnSuccess.CONTINUE,
            model.properties().action().ifProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK,
            model.properties().action().ifProperty().operations().get(0).onFailure());
        Assertions.assertEquals(StorageTaskOperationName.UNDELETE_BLOB,
            model.properties().action().elseProperty().operations().get(0).name());
        Assertions.assertEquals("h",
            model.properties().action().elseProperty().operations().get(0).parameters().get("nltyfsoppusuesnz"));
        Assertions.assertEquals(OnSuccess.CONTINUE,
            model.properties().action().elseProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK,
            model.properties().action().elseProperty().operations().get(0).onFailure());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageTaskUpdateParameters model
            = new StorageTaskUpdateParameters()
                .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("qfbow", new UserAssignedIdentity(), "rcgyn",
                        new UserAssignedIdentity(), "qjqabcypmivkwl", new UserAssignedIdentity())))
                .withTags(mapOf("ebxetqgtzxdp", "ccfwnfnbacfion", "feallnwsu", "qbqqwxr"))
                .withProperties(
                    new StorageTaskUpdateProperties().withEnabled(true)
                        .withDescription("mngnzscxaqw")
                        .withAction(
                            new StorageTaskAction()
                                .withIfProperty(new IfCondition().withCondition("chcbonqvpkvlrxnj")
                                    .withOperations(Arrays.asList(
                                        new StorageTaskOperation().withName(StorageTaskOperationName.UNDELETE_BLOB)
                                            .withParameters(mapOf("enjbdlwtgrhp", "pheoflokeyy", "umasxazjpq", "jp",
                                                "ualhbxxhejj", "e", "ynpwlbj", "zvdudgwdslfhotwm"))
                                            .withOnSuccess(OnSuccess.CONTINUE)
                                            .withOnFailure(OnFailure.BREAK))))
                                .withElseProperty(
                                    new ElseCondition().withOperations(Arrays.asList(
                                        new StorageTaskOperation().withName(StorageTaskOperationName.UNDELETE_BLOB)
                                            .withParameters(mapOf("nltyfsoppusuesnz", "h", "xzdmohctb", "dejbavo",
                                                "ndnvo", "vudwx"))
                                            .withOnSuccess(OnSuccess.CONTINUE)
                                            .withOnFailure(OnFailure.BREAK),
                                        new StorageTaskOperation().withName(StorageTaskOperationName.DELETE_BLOB)
                                            .withParameters(mapOf("zj", "dkcglhsl", "kuofqweykhme", "yggdtjixh",
                                                "yvdcsitynnaa", "evfyexfwhybcib"))
                                            .withOnSuccess(OnSuccess.CONTINUE)
                                            .withOnFailure(OnFailure.BREAK),
                                        new StorageTaskOperation()
                                            .withName(StorageTaskOperationName.SET_BLOB_IMMUTABILITY_POLICY)
                                            .withParameters(mapOf("ezrkgqhcjrefo", "iqscjeypv"))
                                            .withOnSuccess(OnSuccess.CONTINUE)
                                            .withOnFailure(OnFailure.BREAK),
                                        new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_EXPIRY)
                                            .withParameters(mapOf("jcrcczsqpjhvmda", "yyvxyqjpkcattpn", "ysou", "v",
                                                "canoaeupf", "q", "tuo", "yhltrpmopjmcm"))
                                            .withOnSuccess(OnSuccess.CONTINUE)
                                            .withOnFailure(OnFailure.BREAK))))));
        model = BinaryData.fromObject(model).toObject(StorageTaskUpdateParameters.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("ccfwnfnbacfion", model.tags().get("ebxetqgtzxdp"));
        Assertions.assertTrue(model.properties().enabled());
        Assertions.assertEquals("mngnzscxaqw", model.properties().description());
        Assertions.assertEquals("chcbonqvpkvlrxnj", model.properties().action().ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.UNDELETE_BLOB,
            model.properties().action().ifProperty().operations().get(0).name());
        Assertions.assertEquals("pheoflokeyy",
            model.properties().action().ifProperty().operations().get(0).parameters().get("enjbdlwtgrhp"));
        Assertions.assertEquals(OnSuccess.CONTINUE,
            model.properties().action().ifProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK,
            model.properties().action().ifProperty().operations().get(0).onFailure());
        Assertions.assertEquals(StorageTaskOperationName.UNDELETE_BLOB,
            model.properties().action().elseProperty().operations().get(0).name());
        Assertions.assertEquals("h",
            model.properties().action().elseProperty().operations().get(0).parameters().get("nltyfsoppusuesnz"));
        Assertions.assertEquals(OnSuccess.CONTINUE,
            model.properties().action().elseProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK,
            model.properties().action().elseProperty().operations().get(0).onFailure());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
