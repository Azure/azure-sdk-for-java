// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storageactions.models.ElseCondition;
import com.azure.resourcemanager.storageactions.models.IfCondition;
import com.azure.resourcemanager.storageactions.models.ManagedServiceIdentity;
import com.azure.resourcemanager.storageactions.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.storageactions.models.OnFailure;
import com.azure.resourcemanager.storageactions.models.OnSuccess;
import com.azure.resourcemanager.storageactions.models.StorageTaskAction;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperation;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperationName;
import com.azure.resourcemanager.storageactions.models.StorageTaskUpdateParameters;
import com.azure.resourcemanager.storageactions.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StorageTaskUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageTaskUpdateParameters model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"104f8ac9-6174-4730-a5ea-36f80014bfad\",\"tenantId\":\"283868ea-b47e-42fa-ab3a-d0c49eba6748\",\"type\":\"None\",\"userAssignedIdentities\":{\"bdxkqpxokaj\":{\"principalId\":\"ee11c04e-5ae1-439d-8785-8ac0b8062b97\",\"clientId\":\"6e5aaf22-016f-4f49-8a3d-9c4e4894d10a\"},\"pimexgstxgcpodg\":{\"principalId\":\"65dddc6e-aa66-4603-9b42-1c927de68356\",\"clientId\":\"d2aafdff-89fe-47a2-8093-cb84e1b7d0cf\"},\"jrmvdjwzrlo\":{\"principalId\":\"a62b72bd-0296-4e2c-8eb2-04a4140bc629\",\"clientId\":\"ee595319-567d-40d2-bcce-d81bc90e97f6\"},\"lwhijcoejctbzaq\":{\"principalId\":\"eb8867a2-fee4-429c-b164-f702406d1423\",\"clientId\":\"9fed2890-54b1-4079-a502-777ae83110a2\"}}},\"tags\":{\"bkbfkgukdkex\":\"y\",\"ocjjxhvpmouexh\":\"ppofmxaxcfjpgdd\"},\"properties\":{\"taskVersion\":986313719569038785,\"enabled\":true,\"description\":\"eojnxqbzvddn\",\"action\":{\"if\":{\"condition\":\"wndeicbtwnp\",\"operations\":[{\"name\":\"SetBlobLegalHold\",\"parameters\":{\"jthjqkwpyei\":\"uhrhcffcyddgl\",\"q\":\"xmqci\",\"xuigdtopbobj\":\"hkh\",\"uhrzayvvt\":\"ghmewuam\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"SetBlobTags\",\"parameters\":{\"efgugnxk\":\"tkftutqxlngx\",\"hjybigehoqfbo\":\"xdqmidtthzrvqdra\",\"zlcuiywgqywgndrv\":\"skanyk\",\"ocpecfvmmco\":\"nhzgpphrcgyn\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]},\"else\":{\"operations\":[{\"name\":\"SetBlobTags\",\"parameters\":{\"jqabcypmivkwlzuv\":\"m\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"DeleteBlob\",\"parameters\":{\"nlebxetqgtzxd\":\"acfi\",\"feallnwsu\":\"nqbqqwxr\",\"c\":\"isnjampmngnz\",\"ochcbonqvpkvl\":\"aqw\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]}},\"provisioningState\":\"Failed\",\"creationTimeInUtc\":\"2021-02-05T10:28:18Z\"}}")
            .toObject(StorageTaskUpdateParameters.class);
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("y", model.tags().get("bkbfkgukdkex"));
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals("eojnxqbzvddn", model.description());
        Assertions.assertEquals("wndeicbtwnp", model.action().ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_LEGAL_HOLD,
            model.action().ifProperty().operations().get(0).name());
        Assertions.assertEquals("uhrhcffcyddgl",
            model.action().ifProperty().operations().get(0).parameters().get("jthjqkwpyei"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.action().ifProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.action().ifProperty().operations().get(0).onFailure());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_TAGS,
            model.action().elseProperty().operations().get(0).name());
        Assertions.assertEquals("m",
            model.action().elseProperty().operations().get(0).parameters().get("jqabcypmivkwlzuv"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.action().elseProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.action().elseProperty().operations().get(0).onFailure());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageTaskUpdateParameters model
            = new StorageTaskUpdateParameters()
                .withIdentity(
                    new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                        .withUserAssignedIdentities(mapOf(
                            "bdxkqpxokaj", new UserAssignedIdentity(), "pimexgstxgcpodg", new UserAssignedIdentity(),
                            "jrmvdjwzrlo", new UserAssignedIdentity(), "lwhijcoejctbzaq", new UserAssignedIdentity())))
                .withTags(mapOf("bkbfkgukdkex", "y", "ocjjxhvpmouexh", "ppofmxaxcfjpgdd")).withEnabled(true)
                .withDescription("eojnxqbzvddn")
                .withAction(new StorageTaskAction()
                    .withIfProperty(new IfCondition().withCondition("wndeicbtwnp")
                        .withOperations(Arrays.asList(
                            new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_LEGAL_HOLD)
                                .withParameters(mapOf("jthjqkwpyei", "uhrhcffcyddgl", "q", "xmqci", "xuigdtopbobj",
                                    "hkh", "uhrzayvvt", "ghmewuam"))
                                .withOnSuccess(OnSuccess.CONTINUE).withOnFailure(OnFailure.BREAK),
                            new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_TAGS)
                                .withParameters(mapOf("efgugnxk", "tkftutqxlngx", "hjybigehoqfbo", "xdqmidtthzrvqdra",
                                    "zlcuiywgqywgndrv", "skanyk", "ocpecfvmmco", "nhzgpphrcgyn"))
                                .withOnSuccess(OnSuccess.CONTINUE).withOnFailure(OnFailure.BREAK))))
                    .withElseProperty(new ElseCondition().withOperations(Arrays.asList(
                        new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_TAGS)
                            .withParameters(mapOf("jqabcypmivkwlzuv", "m")).withOnSuccess(OnSuccess.CONTINUE)
                            .withOnFailure(OnFailure.BREAK),
                        new StorageTaskOperation().withName(StorageTaskOperationName.DELETE_BLOB)
                            .withParameters(mapOf("nlebxetqgtzxd", "acfi", "feallnwsu", "nqbqqwxr", "c", "isnjampmngnz",
                                "ochcbonqvpkvl", "aqw"))
                            .withOnSuccess(OnSuccess.CONTINUE).withOnFailure(OnFailure.BREAK)))));
        model = BinaryData.fromObject(model).toObject(StorageTaskUpdateParameters.class);
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("y", model.tags().get("bkbfkgukdkex"));
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals("eojnxqbzvddn", model.description());
        Assertions.assertEquals("wndeicbtwnp", model.action().ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_LEGAL_HOLD,
            model.action().ifProperty().operations().get(0).name());
        Assertions.assertEquals("uhrhcffcyddgl",
            model.action().ifProperty().operations().get(0).parameters().get("jthjqkwpyei"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.action().ifProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.action().ifProperty().operations().get(0).onFailure());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_TAGS,
            model.action().elseProperty().operations().get(0).name());
        Assertions.assertEquals("m",
            model.action().elseProperty().operations().get(0).parameters().get("jqabcypmivkwlzuv"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.action().elseProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.action().elseProperty().operations().get(0).onFailure());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
