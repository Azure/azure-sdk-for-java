// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.storageactions.StorageActionsManager;
import com.azure.resourcemanager.storageactions.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.storageactions.models.StorageTask;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperationName;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class StorageTasksListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"identity\":{\"principalId\":\"df5ce31e-d75c-4774-815e-aa9d9f6b396f\",\"tenantId\":\"b5a0bd3a-ad24-4791-a136-3733758eb653\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"knalaulppg\":{\"principalId\":\"607d3e54-8056-4a7a-be9d-9da9867a53f5\",\"clientId\":\"a910ab9c-ccbd-4e14-bd59-07b3360ef3f8\"},\"pnapnyiropuh\":{\"principalId\":\"fddc8cfd-bbca-44f9-9d8d-f6e9f047c272\",\"clientId\":\"e71ef409-917d-4e86-b4ed-d18bc6ce885a\"},\"vpgylgqgitxmed\":{\"principalId\":\"0cbf7c3c-ba68-49df-91c4-2dc63bf7165e\",\"clientId\":\"a4a99a05-7f3c-47b0-8d7e-2878a069e22c\"},\"slynqwwnc\":{\"principalId\":\"75618133-5625-4e75-a921-f85ae05110b9\",\"clientId\":\"6037004d-e408-44b4-bd91-4b899bec0d0d\"}}},\"properties\":{\"taskVersion\":2313446192917643442,\"enabled\":true,\"description\":\"ktrmgucnapkt\",\"action\":{\"if\":{\"condition\":\"oellwp\",\"operations\":[{\"name\":\"SetBlobImmutabilityPolicy\"},{\"name\":\"SetBlobLegalHold\"},{\"name\":\"SetBlobImmutabilityPolicy\"},{\"name\":\"SetBlobTags\"}]},\"else\":{\"operations\":[{\"name\":\"DeleteBlob\"},{\"name\":\"SetBlobImmutabilityPolicy\"},{\"name\":\"SetBlobTags\"}]}},\"provisioningState\":\"Canceled\",\"creationTimeInUtc\":\"2021-03-25T11:42:18Z\"},\"location\":\"fqrhhuaopppc\",\"tags\":{\"t\":\"xolzdahzx\",\"grcfb\":\"bgbkdmoizpost\",\"bpvjymjhx\":\"nrmfqjhhk\"},\"id\":\"j\",\"name\":\"n\",\"type\":\"u\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        StorageActionsManager manager = StorageActionsManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<StorageTask> response
            = manager.storageTasks().listByResourceGroup("exznelixhnr", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("fqrhhuaopppc", response.iterator().next().location());
        Assertions.assertEquals("xolzdahzx", response.iterator().next().tags().get("t"));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED,
            response.iterator().next().identity().type());
        Assertions.assertEquals(true, response.iterator().next().enabled());
        Assertions.assertEquals("ktrmgucnapkt", response.iterator().next().description());
        Assertions.assertEquals("oellwp", response.iterator().next().action().ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_IMMUTABILITY_POLICY,
            response.iterator().next().action().ifProperty().operations().get(0).name());
        Assertions.assertEquals(StorageTaskOperationName.DELETE_BLOB,
            response.iterator().next().action().elseProperty().operations().get(0).name());
    }
}
