// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storageactions.models.ElseCondition;
import com.azure.resourcemanager.storageactions.models.OnFailure;
import com.azure.resourcemanager.storageactions.models.OnSuccess;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperation;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperationName;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ElseConditionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ElseCondition model = BinaryData.fromString(
            "{\"operations\":[{\"name\":\"SetBlobTier\",\"parameters\":{\"glu\":\"xscpaierhhbc\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]}")
            .toObject(ElseCondition.class);
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_TIER, model.operations().get(0).name());
        Assertions.assertEquals("xscpaierhhbc", model.operations().get(0).parameters().get("glu"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.operations().get(0).onFailure());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ElseCondition model = new ElseCondition().withOperations(Arrays.asList(new StorageTaskOperation()
            .withName(StorageTaskOperationName.SET_BLOB_TIER).withParameters(mapOf("glu", "xscpaierhhbc"))
            .withOnSuccess(OnSuccess.CONTINUE).withOnFailure(OnFailure.BREAK)));
        model = BinaryData.fromObject(model).toObject(ElseCondition.class);
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_TIER, model.operations().get(0).name());
        Assertions.assertEquals("xscpaierhhbc", model.operations().get(0).parameters().get("glu"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.operations().get(0).onFailure());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
