// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storageactions.models.ElseCondition;
import com.azure.resourcemanager.storageactions.models.IfCondition;
import com.azure.resourcemanager.storageactions.models.OnFailure;
import com.azure.resourcemanager.storageactions.models.OnSuccess;
import com.azure.resourcemanager.storageactions.models.StorageTaskAction;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperation;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperationName;
import com.azure.resourcemanager.storageactions.models.StorageTaskProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StorageTaskPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageTaskProperties model = BinaryData.fromString(
            "{\"taskVersion\":1351173386215455176,\"enabled\":true,\"description\":\"ybb\",\"action\":{\"if\":{\"condition\":\"podepoo\",\"operations\":[{\"name\":\"SetBlobTier\",\"parameters\":{\"theotusiv\":\"amiheognarxz\",\"bwjzr\":\"evcciqihnhun\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"SetBlobTags\",\"parameters\":{\"qeof\":\"pemvtzfkufubljof\",\"jqul\":\"aeqjhqjbasvms\",\"clxxwrljdo\":\"gsntnbybkzgcwr\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"SetBlobLegalHold\",\"parameters\":{\"jdkwtnhxbnjb\":\"cr\",\"qpjwnzlljfm\":\"ksqrglssai\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]},\"else\":{\"operations\":[{\"name\":\"SetBlobLegalHold\",\"parameters\":{\"zevndhkrwpdappds\":\"abkyqduujitcjcz\",\"snhu\":\"dkvwrwjfe\",\"tmrldhugjzzdatq\":\"je\",\"gphuticndvka\":\"hocdgeab\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"SetBlobTags\",\"parameters\":{\"rokft\":\"hxh\",\"iawxklry\":\"xolniwpwcukjfk\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]}},\"provisioningState\":\"Canceled\",\"creationTimeInUtc\":\"2021-11-03T18:10:18Z\"}")
            .toObject(StorageTaskProperties.class);
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals("ybb", model.description());
        Assertions.assertEquals("podepoo", model.action().ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_TIER,
            model.action().ifProperty().operations().get(0).name());
        Assertions.assertEquals("amiheognarxz",
            model.action().ifProperty().operations().get(0).parameters().get("theotusiv"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.action().ifProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.action().ifProperty().operations().get(0).onFailure());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_LEGAL_HOLD,
            model.action().elseProperty().operations().get(0).name());
        Assertions.assertEquals("abkyqduujitcjcz",
            model.action().elseProperty().operations().get(0).parameters().get("zevndhkrwpdappds"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.action().elseProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.action().elseProperty().operations().get(0).onFailure());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageTaskProperties model
            = new StorageTaskProperties().withEnabled(true)
                .withDescription("ybb")
                .withAction(
                    new StorageTaskAction()
                        .withIfProperty(
                            new IfCondition().withCondition("podepoo")
                                .withOperations(
                                    Arrays
                                        .asList(
                                            new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_TIER)
                                                .withParameters(
                                                    mapOf("theotusiv", "amiheognarxz", "bwjzr", "evcciqihnhun"))
                                                .withOnSuccess(OnSuccess.CONTINUE)
                                                .withOnFailure(OnFailure.BREAK),
                                            new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_TAGS)
                                                .withParameters(mapOf("qeof", "pemvtzfkufubljof", "jqul",
                                                    "aeqjhqjbasvms", "clxxwrljdo", "gsntnbybkzgcwr"))
                                                .withOnSuccess(OnSuccess.CONTINUE)
                                                .withOnFailure(OnFailure.BREAK),
                                            new StorageTaskOperation()
                                                .withName(StorageTaskOperationName.SET_BLOB_LEGAL_HOLD)
                                                .withParameters(
                                                    mapOf("jdkwtnhxbnjb", "cr", "qpjwnzlljfm", "ksqrglssai"))
                                                .withOnSuccess(OnSuccess.CONTINUE)
                                                .withOnFailure(OnFailure.BREAK))))
                        .withElseProperty(new ElseCondition().withOperations(Arrays.asList(
                            new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_LEGAL_HOLD)
                                .withParameters(mapOf("zevndhkrwpdappds", "abkyqduujitcjcz", "snhu", "dkvwrwjfe",
                                    "tmrldhugjzzdatq", "je", "gphuticndvka", "hocdgeab"))
                                .withOnSuccess(OnSuccess.CONTINUE)
                                .withOnFailure(OnFailure.BREAK),
                            new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_TAGS)
                                .withParameters(mapOf("rokft", "hxh", "iawxklry", "xolniwpwcukjfk"))
                                .withOnSuccess(OnSuccess.CONTINUE)
                                .withOnFailure(OnFailure.BREAK)))));
        model = BinaryData.fromObject(model).toObject(StorageTaskProperties.class);
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals("ybb", model.description());
        Assertions.assertEquals("podepoo", model.action().ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_TIER,
            model.action().ifProperty().operations().get(0).name());
        Assertions.assertEquals("amiheognarxz",
            model.action().ifProperty().operations().get(0).parameters().get("theotusiv"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.action().ifProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.action().ifProperty().operations().get(0).onFailure());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_LEGAL_HOLD,
            model.action().elseProperty().operations().get(0).name());
        Assertions.assertEquals("abkyqduujitcjcz",
            model.action().elseProperty().operations().get(0).parameters().get("zevndhkrwpdappds"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.action().elseProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.action().elseProperty().operations().get(0).onFailure());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
