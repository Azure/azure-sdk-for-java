// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storageactions.models.ElseCondition;
import com.azure.resourcemanager.storageactions.models.IfCondition;
import com.azure.resourcemanager.storageactions.models.OnFailure;
import com.azure.resourcemanager.storageactions.models.OnSuccess;
import com.azure.resourcemanager.storageactions.models.StorageTaskAction;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperation;
import com.azure.resourcemanager.storageactions.models.StorageTaskOperationName;
import com.azure.resourcemanager.storageactions.models.StorageTaskProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StorageTaskPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageTaskProperties model = BinaryData.fromString(
            "{\"taskVersion\":8951881074960566818,\"enabled\":true,\"description\":\"sntnbybkzgcw\",\"action\":{\"if\":{\"condition\":\"wclxxwrl\",\"operations\":[{\"name\":\"UndeleteBlob\",\"parameters\":{\"dkwt\":\"kcqvkocrc\",\"ssainqpjwnzll\":\"hxbnjbiksqrg\",\"bvmgxsabkyqduuji\":\"fmppe\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"SetBlobTier\",\"parameters\":{\"sbdkvwr\":\"vndhkrwpdapp\",\"tjelt\":\"jfeusnh\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"SetBlobTier\",\"parameters\":{\"tqxhocdgeab\":\"zzd\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"},{\"name\":\"SetBlobTier\",\"parameters\":{\"aozwyiftyhxhu\":\"ndv\",\"fkgiawxk\":\"okftyxolniwpwcuk\",\"dhsgcba\":\"ryplwckbasyypn\",\"dlikwyqkgfgibma\":\"phejkotynqgoulz\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]},\"else\":{\"operations\":[{\"name\":\"SetBlobTier\",\"parameters\":{\"ouf\":\"bzqqedqytbciq\"},\"onSuccess\":\"continue\",\"onFailure\":\"break\"}]}},\"provisioningState\":\"ValidateSubscriptionQuotaEnd\",\"creationTimeInUtc\":\"2021-10-01T10:06:40Z\"}")
            .toObject(StorageTaskProperties.class);
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals("sntnbybkzgcw", model.description());
        Assertions.assertEquals("wclxxwrl", model.action().ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.UNDELETE_BLOB,
            model.action().ifProperty().operations().get(0).name());
        Assertions.assertEquals("kcqvkocrc", model.action().ifProperty().operations().get(0).parameters().get("dkwt"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.action().ifProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.action().ifProperty().operations().get(0).onFailure());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_TIER,
            model.action().elseProperty().operations().get(0).name());
        Assertions.assertEquals("bzqqedqytbciq",
            model.action().elseProperty().operations().get(0).parameters().get("ouf"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.action().elseProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.action().elseProperty().operations().get(0).onFailure());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageTaskProperties model = new StorageTaskProperties().withEnabled(true).withDescription("sntnbybkzgcw")
            .withAction(new StorageTaskAction()
                .withIfProperty(new IfCondition().withCondition("wclxxwrl")
                    .withOperations(Arrays.asList(
                        new StorageTaskOperation().withName(StorageTaskOperationName.UNDELETE_BLOB)
                            .withParameters(mapOf("dkwt", "kcqvkocrc", "ssainqpjwnzll", "hxbnjbiksqrg",
                                "bvmgxsabkyqduuji", "fmppe"))
                            .withOnSuccess(OnSuccess.CONTINUE).withOnFailure(OnFailure.BREAK),
                        new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_TIER)
                            .withParameters(mapOf("sbdkvwr", "vndhkrwpdapp", "tjelt", "jfeusnh"))
                            .withOnSuccess(OnSuccess.CONTINUE).withOnFailure(OnFailure.BREAK),
                        new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_TIER)
                            .withParameters(mapOf("tqxhocdgeab", "zzd")).withOnSuccess(OnSuccess.CONTINUE)
                            .withOnFailure(OnFailure.BREAK),
                        new StorageTaskOperation().withName(StorageTaskOperationName.SET_BLOB_TIER)
                            .withParameters(mapOf("aozwyiftyhxhu", "ndv", "fkgiawxk", "okftyxolniwpwcuk", "dhsgcba",
                                "ryplwckbasyypn", "dlikwyqkgfgibma", "phejkotynqgoulz"))
                            .withOnSuccess(OnSuccess.CONTINUE).withOnFailure(OnFailure.BREAK))))
                .withElseProperty(new ElseCondition().withOperations(Arrays.asList(new StorageTaskOperation()
                    .withName(StorageTaskOperationName.SET_BLOB_TIER).withParameters(mapOf("ouf", "bzqqedqytbciq"))
                    .withOnSuccess(OnSuccess.CONTINUE).withOnFailure(OnFailure.BREAK)))));
        model = BinaryData.fromObject(model).toObject(StorageTaskProperties.class);
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals("sntnbybkzgcw", model.description());
        Assertions.assertEquals("wclxxwrl", model.action().ifProperty().condition());
        Assertions.assertEquals(StorageTaskOperationName.UNDELETE_BLOB,
            model.action().ifProperty().operations().get(0).name());
        Assertions.assertEquals("kcqvkocrc", model.action().ifProperty().operations().get(0).parameters().get("dkwt"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.action().ifProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.action().ifProperty().operations().get(0).onFailure());
        Assertions.assertEquals(StorageTaskOperationName.SET_BLOB_TIER,
            model.action().elseProperty().operations().get(0).name());
        Assertions.assertEquals("bzqqedqytbciq",
            model.action().elseProperty().operations().get(0).parameters().get("ouf"));
        Assertions.assertEquals(OnSuccess.CONTINUE, model.action().elseProperty().operations().get(0).onSuccess());
        Assertions.assertEquals(OnFailure.BREAK, model.action().elseProperty().operations().get(0).onFailure());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
