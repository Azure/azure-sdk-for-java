// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.storageactions.models.ManagedServiceIdentity;
import com.azure.resourcemanager.storageactions.models.ProvisioningState;
import com.azure.resourcemanager.storageactions.models.StorageTaskAction;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * Represents Storage Task.
 */
@Fluent
public final class StorageTaskInner extends Resource {
    /*
     * The managed service identity of the resource.
     */
    @JsonProperty(value = "identity")
    private ManagedServiceIdentity identity;

    /*
     * Properties of the storage task.
     */
    @JsonProperty(value = "properties")
    private StorageTaskProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of StorageTaskInner class.
     */
    public StorageTaskInner() {
    }

    /**
     * Get the identity property: The managed service identity of the resource.
     * 
     * @return the identity value.
     */
    public ManagedServiceIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The managed service identity of the resource.
     * 
     * @param identity the identity value to set.
     * @return the StorageTaskInner object itself.
     */
    public StorageTaskInner withIdentity(ManagedServiceIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the innerProperties property: Properties of the storage task.
     * 
     * @return the innerProperties value.
     */
    private StorageTaskProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StorageTaskInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StorageTaskInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the taskVersion property: Storage task version.
     * 
     * @return the taskVersion value.
     */
    public Long taskVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().taskVersion();
    }

    /**
     * Get the enabled property: Storage Task is enabled when set to true and disabled when set to false.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.innerProperties() == null ? null : this.innerProperties().enabled();
    }

    /**
     * Set the enabled property: Storage Task is enabled when set to true and disabled when set to false.
     * 
     * @param enabled the enabled value to set.
     * @return the StorageTaskInner object itself.
     */
    public StorageTaskInner withEnabled(Boolean enabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTaskProperties();
        }
        this.innerProperties().withEnabled(enabled);
        return this;
    }

    /**
     * Get the description property: Text that describes the purpose of the storage task.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: Text that describes the purpose of the storage task.
     * 
     * @param description the description value to set.
     * @return the StorageTaskInner object itself.
     */
    public StorageTaskInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTaskProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the action property: The storage task action that is executed.
     * 
     * @return the action value.
     */
    public StorageTaskAction action() {
        return this.innerProperties() == null ? null : this.innerProperties().action();
    }

    /**
     * Set the action property: The storage task action that is executed.
     * 
     * @param action the action value to set.
     * @return the StorageTaskInner object itself.
     */
    public StorageTaskInner withAction(StorageTaskAction action) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTaskProperties();
        }
        this.innerProperties().withAction(action);
        return this;
    }

    /**
     * Get the provisioningState property: Represents the provisioning state of the storage task.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the creationTimeInUtc property: The creation date and time of the storage task in UTC.
     * 
     * @return the creationTimeInUtc value.
     */
    public OffsetDateTime creationTimeInUtc() {
        return this.innerProperties() == null ? null : this.innerProperties().creationTimeInUtc();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() != null) {
            identity().validate();
        }
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
