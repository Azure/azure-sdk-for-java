// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.storageactions.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.storageactions.fluent.StorageTasksReportsClient;
import com.azure.resourcemanager.storageactions.fluent.models.StorageTaskReportSummaryInner;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in StorageTasksReportsClient.
 */
public final class StorageTasksReportsClientImpl implements StorageTasksReportsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final StorageTasksReportsService service;

    /**
     * The service client containing this operation class.
     */
    private final StorageActionsManagementClientImpl client;

    /**
     * Initializes an instance of StorageTasksReportsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    StorageTasksReportsClientImpl(StorageActionsManagementClientImpl client) {
        this.service = RestProxy.create(StorageTasksReportsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for StorageActionsManagementClientStorageTasksReports to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "StorageActionsManagementClientStorageTasksReports")
    public interface StorageTasksReportsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageActions/storageTasks/{storageTaskName}/reports")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StorageTaskReportSummaryInner>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("storageTaskName") String storageTaskName, @QueryParam("$maxpagesize") Integer maxpagesize,
            @QueryParam("$filter") String filter, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageActions/storageTasks/{storageTaskName}/reports")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<StorageTaskReportSummaryInner> listSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("storageTaskName") String storageTaskName, @QueryParam("$maxpagesize") Integer maxpagesize,
            @QueryParam("$filter") String filter, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Fetch the storage tasks run report summary for each assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageTaskName The name of the storage task within the specified resource group. Storage task names must
     * be between 3 and 18 characters in length and use numbers and lower-case letters only.
     * @param maxpagesize Optional, specifies the maximum number of Storage Task Assignment Resource IDs to be included
     * in the list response.
     * @param filter Optional. When specified, it can be used to query using reporting properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fetch Storage Tasks Run Summary along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StorageTaskReportSummaryInner>> listWithResponseAsync(String resourceGroupName,
        String storageTaskName, Integer maxpagesize, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageTaskName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter storageTaskName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, storageTaskName, maxpagesize, filter, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Fetch the storage tasks run report summary for each assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageTaskName The name of the storage task within the specified resource group. Storage task names must
     * be between 3 and 18 characters in length and use numbers and lower-case letters only.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fetch Storage Tasks Run Summary on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StorageTaskReportSummaryInner> listAsync(String resourceGroupName, String storageTaskName) {
        final Integer maxpagesize = null;
        final String filter = null;
        return listWithResponseAsync(resourceGroupName, storageTaskName, maxpagesize, filter)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Fetch the storage tasks run report summary for each assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageTaskName The name of the storage task within the specified resource group. Storage task names must
     * be between 3 and 18 characters in length and use numbers and lower-case letters only.
     * @param maxpagesize Optional, specifies the maximum number of Storage Task Assignment Resource IDs to be included
     * in the list response.
     * @param filter Optional. When specified, it can be used to query using reporting properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fetch Storage Tasks Run Summary along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StorageTaskReportSummaryInner> listWithResponse(String resourceGroupName, String storageTaskName,
        Integer maxpagesize, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageTaskName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter storageTaskName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.listSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, storageTaskName, maxpagesize, filter, accept, context);
    }

    /**
     * Fetch the storage tasks run report summary for each assignment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageTaskName The name of the storage task within the specified resource group. Storage task names must
     * be between 3 and 18 characters in length and use numbers and lower-case letters only.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return fetch Storage Tasks Run Summary.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StorageTaskReportSummaryInner list(String resourceGroupName, String storageTaskName) {
        final Integer maxpagesize = null;
        final String filter = null;
        return listWithResponse(resourceGroupName, storageTaskName, maxpagesize, filter, Context.NONE).getValue();
    }

    private static final ClientLogger LOGGER = new ClientLogger(StorageTasksReportsClientImpl.class);
}
