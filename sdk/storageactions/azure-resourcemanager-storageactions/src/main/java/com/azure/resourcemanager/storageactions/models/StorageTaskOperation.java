// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Represents an operation to be performed on the object.
 */
@Fluent
public final class StorageTaskOperation implements JsonSerializable<StorageTaskOperation> {
    /*
     * The operation to be performed on the object.
     */
    private StorageTaskOperationName name;

    /*
     * Key-value parameters for the operation.
     */
    private Map<String, String> parameters;

    /*
     * Action to be taken when the operation is successful for a object.
     */
    private OnSuccess onSuccess;

    /*
     * Action to be taken when the operation fails for a object.
     */
    private OnFailure onFailure;

    /**
     * Creates an instance of StorageTaskOperation class.
     */
    public StorageTaskOperation() {
    }

    /**
     * Get the name property: The operation to be performed on the object.
     * 
     * @return the name value.
     */
    public StorageTaskOperationName name() {
        return this.name;
    }

    /**
     * Set the name property: The operation to be performed on the object.
     * 
     * @param name the name value to set.
     * @return the StorageTaskOperation object itself.
     */
    public StorageTaskOperation withName(StorageTaskOperationName name) {
        this.name = name;
        return this;
    }

    /**
     * Get the parameters property: Key-value parameters for the operation.
     * 
     * @return the parameters value.
     */
    public Map<String, String> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Key-value parameters for the operation.
     * 
     * @param parameters the parameters value to set.
     * @return the StorageTaskOperation object itself.
     */
    public StorageTaskOperation withParameters(Map<String, String> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the onSuccess property: Action to be taken when the operation is successful for a object.
     * 
     * @return the onSuccess value.
     */
    public OnSuccess onSuccess() {
        return this.onSuccess;
    }

    /**
     * Set the onSuccess property: Action to be taken when the operation is successful for a object.
     * 
     * @param onSuccess the onSuccess value to set.
     * @return the StorageTaskOperation object itself.
     */
    public StorageTaskOperation withOnSuccess(OnSuccess onSuccess) {
        this.onSuccess = onSuccess;
        return this;
    }

    /**
     * Get the onFailure property: Action to be taken when the operation fails for a object.
     * 
     * @return the onFailure value.
     */
    public OnFailure onFailure() {
        return this.onFailure;
    }

    /**
     * Set the onFailure property: Action to be taken when the operation fails for a object.
     * 
     * @param onFailure the onFailure value to set.
     * @return the StorageTaskOperation object itself.
     */
    public StorageTaskOperation withOnFailure(OnFailure onFailure) {
        this.onFailure = onFailure;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model StorageTaskOperation"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StorageTaskOperation.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name == null ? null : this.name.toString());
        jsonWriter.writeMapField("parameters", this.parameters, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("onSuccess", this.onSuccess == null ? null : this.onSuccess.toString());
        jsonWriter.writeStringField("onFailure", this.onFailure == null ? null : this.onFailure.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageTaskOperation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageTaskOperation if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StorageTaskOperation.
     */
    public static StorageTaskOperation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageTaskOperation deserializedStorageTaskOperation = new StorageTaskOperation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedStorageTaskOperation.name = StorageTaskOperationName.fromString(reader.getString());
                } else if ("parameters".equals(fieldName)) {
                    Map<String, String> parameters = reader.readMap(reader1 -> reader1.getString());
                    deserializedStorageTaskOperation.parameters = parameters;
                } else if ("onSuccess".equals(fieldName)) {
                    deserializedStorageTaskOperation.onSuccess = OnSuccess.fromString(reader.getString());
                } else if ("onFailure".equals(fieldName)) {
                    deserializedStorageTaskOperation.onFailure = OnFailure.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageTaskOperation;
        });
    }
}
