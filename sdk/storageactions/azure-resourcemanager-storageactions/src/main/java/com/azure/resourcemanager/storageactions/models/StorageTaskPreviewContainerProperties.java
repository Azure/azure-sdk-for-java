// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Storage task preview container properties.
 */
@Fluent
public final class StorageTaskPreviewContainerProperties
    implements JsonSerializable<StorageTaskPreviewContainerProperties> {
    /*
     * Name of test container
     */
    private String name;

    /*
     * metadata key value pairs to be tested for a match against the provided condition.
     */
    private List<StorageTaskPreviewKeyValueProperties> metadata;

    /**
     * Creates an instance of StorageTaskPreviewContainerProperties class.
     */
    public StorageTaskPreviewContainerProperties() {
    }

    /**
     * Get the name property: Name of test container.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of test container.
     * 
     * @param name the name value to set.
     * @return the StorageTaskPreviewContainerProperties object itself.
     */
    public StorageTaskPreviewContainerProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the metadata property: metadata key value pairs to be tested for a match against the provided condition.
     * 
     * @return the metadata value.
     */
    public List<StorageTaskPreviewKeyValueProperties> metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: metadata key value pairs to be tested for a match against the provided condition.
     * 
     * @param metadata the metadata value to set.
     * @return the StorageTaskPreviewContainerProperties object itself.
     */
    public StorageTaskPreviewContainerProperties withMetadata(List<StorageTaskPreviewKeyValueProperties> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metadata() != null) {
            metadata().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("metadata", this.metadata, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageTaskPreviewContainerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageTaskPreviewContainerProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageTaskPreviewContainerProperties.
     */
    public static StorageTaskPreviewContainerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageTaskPreviewContainerProperties deserializedStorageTaskPreviewContainerProperties
                = new StorageTaskPreviewContainerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedStorageTaskPreviewContainerProperties.name = reader.getString();
                } else if ("metadata".equals(fieldName)) {
                    List<StorageTaskPreviewKeyValueProperties> metadata
                        = reader.readArray(reader1 -> StorageTaskPreviewKeyValueProperties.fromJson(reader1));
                    deserializedStorageTaskPreviewContainerProperties.metadata = metadata;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageTaskPreviewContainerProperties;
        });
    }
}
