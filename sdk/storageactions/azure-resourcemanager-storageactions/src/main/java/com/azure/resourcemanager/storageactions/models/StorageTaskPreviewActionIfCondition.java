// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents storage task preview action condition.
 */
@Fluent
public final class StorageTaskPreviewActionIfCondition
    implements JsonSerializable<StorageTaskPreviewActionIfCondition> {
    /*
     * Storage task condition to bes tested for a match.
     */
    private String condition;

    /**
     * Creates an instance of StorageTaskPreviewActionIfCondition class.
     */
    public StorageTaskPreviewActionIfCondition() {
    }

    /**
     * Get the condition property: Storage task condition to bes tested for a match.
     * 
     * @return the condition value.
     */
    public String condition() {
        return this.condition;
    }

    /**
     * Set the condition property: Storage task condition to bes tested for a match.
     * 
     * @param condition the condition value to set.
     * @return the StorageTaskPreviewActionIfCondition object itself.
     */
    public StorageTaskPreviewActionIfCondition withCondition(String condition) {
        this.condition = condition;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("condition", this.condition);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageTaskPreviewActionIfCondition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageTaskPreviewActionIfCondition if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageTaskPreviewActionIfCondition.
     */
    public static StorageTaskPreviewActionIfCondition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageTaskPreviewActionIfCondition deserializedStorageTaskPreviewActionIfCondition
                = new StorageTaskPreviewActionIfCondition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("condition".equals(fieldName)) {
                    deserializedStorageTaskPreviewActionIfCondition.condition = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageTaskPreviewActionIfCondition;
        });
    }
}
