// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The if block of storage task operation.
 */
@Fluent
public final class IfCondition implements JsonSerializable<IfCondition> {
    /*
     * Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions for valid properties and
     * operators.
     */
    private String condition;

    /*
     * List of operations to execute when the condition predicate satisfies.
     */
    private List<StorageTaskOperation> operations;

    /**
     * Creates an instance of IfCondition class.
     */
    public IfCondition() {
    }

    /**
     * Get the condition property: Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions
     * for valid properties and operators.
     * 
     * @return the condition value.
     */
    public String condition() {
        return this.condition;
    }

    /**
     * Set the condition property: Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions
     * for valid properties and operators.
     * 
     * @param condition the condition value to set.
     * @return the IfCondition object itself.
     */
    public IfCondition withCondition(String condition) {
        this.condition = condition;
        return this;
    }

    /**
     * Get the operations property: List of operations to execute when the condition predicate satisfies.
     * 
     * @return the operations value.
     */
    public List<StorageTaskOperation> operations() {
        return this.operations;
    }

    /**
     * Set the operations property: List of operations to execute when the condition predicate satisfies.
     * 
     * @param operations the operations value to set.
     * @return the IfCondition object itself.
     */
    public IfCondition withOperations(List<StorageTaskOperation> operations) {
        this.operations = operations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (condition() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property condition in model IfCondition"));
        }
        if (operations() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property operations in model IfCondition"));
        } else {
            operations().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IfCondition.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("condition", this.condition);
        jsonWriter.writeArrayField("operations", this.operations, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IfCondition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IfCondition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IfCondition.
     */
    public static IfCondition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IfCondition deserializedIfCondition = new IfCondition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("condition".equals(fieldName)) {
                    deserializedIfCondition.condition = reader.getString();
                } else if ("operations".equals(fieldName)) {
                    List<StorageTaskOperation> operations
                        = reader.readArray(reader1 -> StorageTaskOperation.fromJson(reader1));
                    deserializedIfCondition.operations = operations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIfCondition;
        });
    }
}
