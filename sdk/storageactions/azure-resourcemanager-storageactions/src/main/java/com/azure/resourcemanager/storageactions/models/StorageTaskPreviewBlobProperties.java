// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Storage task preview container properties.
 */
@Fluent
public final class StorageTaskPreviewBlobProperties {
    /*
     * property for the container name.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * properties key value pairs to be tested for a match against the provided condition.
     */
    @JsonProperty(value = "properties")
    private List<StorageTaskPreviewKeyValueProperties> properties;

    /*
     * metadata key value pairs to be tested for a match against the provided condition.
     */
    @JsonProperty(value = "metadata")
    private List<StorageTaskPreviewKeyValueProperties> metadata;

    /*
     * tags key value pairs to be tested for a match against the provided condition.
     */
    @JsonProperty(value = "tags")
    private List<StorageTaskPreviewKeyValueProperties> tags;

    /*
     * Represents the condition block name that matched blob properties.
     */
    @JsonProperty(value = "matchedBlock", access = JsonProperty.Access.WRITE_ONLY)
    private MatchedBlockName matchedBlock;

    /**
     * Creates an instance of StorageTaskPreviewBlobProperties class.
     */
    public StorageTaskPreviewBlobProperties() {
    }

    /**
     * Get the name property: property for the container name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: property for the container name.
     * 
     * @param name the name value to set.
     * @return the StorageTaskPreviewBlobProperties object itself.
     */
    public StorageTaskPreviewBlobProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the properties property: properties key value pairs to be tested for a match against the provided condition.
     * 
     * @return the properties value.
     */
    public List<StorageTaskPreviewKeyValueProperties> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: properties key value pairs to be tested for a match against the provided condition.
     * 
     * @param properties the properties value to set.
     * @return the StorageTaskPreviewBlobProperties object itself.
     */
    public StorageTaskPreviewBlobProperties withProperties(List<StorageTaskPreviewKeyValueProperties> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the metadata property: metadata key value pairs to be tested for a match against the provided condition.
     * 
     * @return the metadata value.
     */
    public List<StorageTaskPreviewKeyValueProperties> metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: metadata key value pairs to be tested for a match against the provided condition.
     * 
     * @param metadata the metadata value to set.
     * @return the StorageTaskPreviewBlobProperties object itself.
     */
    public StorageTaskPreviewBlobProperties withMetadata(List<StorageTaskPreviewKeyValueProperties> metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the tags property: tags key value pairs to be tested for a match against the provided condition.
     * 
     * @return the tags value.
     */
    public List<StorageTaskPreviewKeyValueProperties> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: tags key value pairs to be tested for a match against the provided condition.
     * 
     * @param tags the tags value to set.
     * @return the StorageTaskPreviewBlobProperties object itself.
     */
    public StorageTaskPreviewBlobProperties withTags(List<StorageTaskPreviewKeyValueProperties> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the matchedBlock property: Represents the condition block name that matched blob properties.
     * 
     * @return the matchedBlock value.
     */
    public MatchedBlockName matchedBlock() {
        return this.matchedBlock;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (properties() != null) {
            properties().forEach(e -> e.validate());
        }
        if (metadata() != null) {
            metadata().forEach(e -> e.validate());
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
    }
}
