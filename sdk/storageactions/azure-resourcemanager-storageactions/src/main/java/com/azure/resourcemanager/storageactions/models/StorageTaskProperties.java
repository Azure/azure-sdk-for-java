// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Properties of the storage task.
 */
@Fluent
public final class StorageTaskProperties implements JsonSerializable<StorageTaskProperties> {
    /*
     * Storage task version.
     */
    private Long taskVersion;

    /*
     * Storage Task is enabled when set to true and disabled when set to false
     */
    private boolean enabled;

    /*
     * Text that describes the purpose of the storage task
     */
    private String description;

    /*
     * The storage task action that is executed
     */
    private StorageTaskAction action;

    /*
     * Represents the provisioning state of the storage task.
     */
    private ProvisioningState provisioningState;

    /*
     * The creation date and time of the storage task in UTC.
     */
    private OffsetDateTime creationTimeInUtc;

    /**
     * Creates an instance of StorageTaskProperties class.
     */
    public StorageTaskProperties() {
    }

    /**
     * Get the taskVersion property: Storage task version.
     * 
     * @return the taskVersion value.
     */
    public Long taskVersion() {
        return this.taskVersion;
    }

    /**
     * Get the enabled property: Storage Task is enabled when set to true and disabled when set to false.
     * 
     * @return the enabled value.
     */
    public boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Storage Task is enabled when set to true and disabled when set to false.
     * 
     * @param enabled the enabled value to set.
     * @return the StorageTaskProperties object itself.
     */
    public StorageTaskProperties withEnabled(boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the description property: Text that describes the purpose of the storage task.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Text that describes the purpose of the storage task.
     * 
     * @param description the description value to set.
     * @return the StorageTaskProperties object itself.
     */
    public StorageTaskProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the action property: The storage task action that is executed.
     * 
     * @return the action value.
     */
    public StorageTaskAction action() {
        return this.action;
    }

    /**
     * Set the action property: The storage task action that is executed.
     * 
     * @param action the action value to set.
     * @return the StorageTaskProperties object itself.
     */
    public StorageTaskProperties withAction(StorageTaskAction action) {
        this.action = action;
        return this;
    }

    /**
     * Get the provisioningState property: Represents the provisioning state of the storage task.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the creationTimeInUtc property: The creation date and time of the storage task in UTC.
     * 
     * @return the creationTimeInUtc value.
     */
    public OffsetDateTime creationTimeInUtc() {
        return this.creationTimeInUtc;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (description() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property description in model StorageTaskProperties"));
        }
        if (action() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property action in model StorageTaskProperties"));
        } else {
            action().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StorageTaskProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeJsonField("action", this.action);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageTaskProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageTaskProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StorageTaskProperties.
     */
    public static StorageTaskProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageTaskProperties deserializedStorageTaskProperties = new StorageTaskProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedStorageTaskProperties.enabled = reader.getBoolean();
                } else if ("description".equals(fieldName)) {
                    deserializedStorageTaskProperties.description = reader.getString();
                } else if ("action".equals(fieldName)) {
                    deserializedStorageTaskProperties.action = StorageTaskAction.fromJson(reader);
                } else if ("taskVersion".equals(fieldName)) {
                    deserializedStorageTaskProperties.taskVersion = reader.getNullable(JsonReader::getLong);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedStorageTaskProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("creationTimeInUtc".equals(fieldName)) {
                    deserializedStorageTaskProperties.creationTimeInUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageTaskProperties;
        });
    }
}
