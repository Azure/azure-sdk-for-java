// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * Properties of the storage task.
 */
@Fluent
public final class StorageTaskProperties {
    /*
     * Storage task version.
     */
    @JsonProperty(value = "taskVersion", access = JsonProperty.Access.WRITE_ONLY)
    private Long taskVersion;

    /*
     * Storage Task is enabled when set to true and disabled when set to false
     */
    @JsonProperty(value = "enabled", required = true)
    private boolean enabled;

    /*
     * Text that describes the purpose of the storage task
     */
    @JsonProperty(value = "description", required = true)
    private String description;

    /*
     * The storage task action that is executed
     */
    @JsonProperty(value = "action", required = true)
    private StorageTaskAction action;

    /*
     * Represents the provisioning state of the storage task.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The creation date and time of the storage task in UTC.
     */
    @JsonProperty(value = "creationTimeInUtc", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime creationTimeInUtc;

    /**
     * Creates an instance of StorageTaskProperties class.
     */
    public StorageTaskProperties() {
    }

    /**
     * Get the taskVersion property: Storage task version.
     * 
     * @return the taskVersion value.
     */
    public Long taskVersion() {
        return this.taskVersion;
    }

    /**
     * Get the enabled property: Storage Task is enabled when set to true and disabled when set to false.
     * 
     * @return the enabled value.
     */
    public boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Storage Task is enabled when set to true and disabled when set to false.
     * 
     * @param enabled the enabled value to set.
     * @return the StorageTaskProperties object itself.
     */
    public StorageTaskProperties withEnabled(boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the description property: Text that describes the purpose of the storage task.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Text that describes the purpose of the storage task.
     * 
     * @param description the description value to set.
     * @return the StorageTaskProperties object itself.
     */
    public StorageTaskProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the action property: The storage task action that is executed.
     * 
     * @return the action value.
     */
    public StorageTaskAction action() {
        return this.action;
    }

    /**
     * Set the action property: The storage task action that is executed.
     * 
     * @param action the action value to set.
     * @return the StorageTaskProperties object itself.
     */
    public StorageTaskProperties withAction(StorageTaskAction action) {
        this.action = action;
        return this;
    }

    /**
     * Get the provisioningState property: Represents the provisioning state of the storage task.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the creationTimeInUtc property: The creation date and time of the storage task in UTC.
     * 
     * @return the creationTimeInUtc value.
     */
    public OffsetDateTime creationTimeInUtc() {
        return this.creationTimeInUtc;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (description() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property description in model StorageTaskProperties"));
        }
        if (action() == null) {
            throw LOGGER.logExceptionAsError(
                new IllegalArgumentException("Missing required property action in model StorageTaskProperties"));
        } else {
            action().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StorageTaskProperties.class);
}
