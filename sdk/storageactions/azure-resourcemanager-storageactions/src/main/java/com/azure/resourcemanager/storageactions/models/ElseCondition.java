// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The else block of storage task operation.
 */
@Fluent
public final class ElseCondition implements JsonSerializable<ElseCondition> {
    /*
     * List of operations to execute in the else block
     */
    private List<StorageTaskOperation> operations;

    /**
     * Creates an instance of ElseCondition class.
     */
    public ElseCondition() {
    }

    /**
     * Get the operations property: List of operations to execute in the else block.
     * 
     * @return the operations value.
     */
    public List<StorageTaskOperation> operations() {
        return this.operations;
    }

    /**
     * Set the operations property: List of operations to execute in the else block.
     * 
     * @param operations the operations value to set.
     * @return the ElseCondition object itself.
     */
    public ElseCondition withOperations(List<StorageTaskOperation> operations) {
        this.operations = operations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (operations() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property operations in model ElseCondition"));
        } else {
            operations().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ElseCondition.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("operations", this.operations, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ElseCondition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ElseCondition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ElseCondition.
     */
    public static ElseCondition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ElseCondition deserializedElseCondition = new ElseCondition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operations".equals(fieldName)) {
                    List<StorageTaskOperation> operations
                        = reader.readArray(reader1 -> StorageTaskOperation.fromJson(reader1));
                    deserializedElseCondition.operations = operations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedElseCondition;
        });
    }
}
