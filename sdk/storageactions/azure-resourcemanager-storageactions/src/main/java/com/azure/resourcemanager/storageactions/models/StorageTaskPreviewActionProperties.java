// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Storage task preview action properties.
 */
@Fluent
public final class StorageTaskPreviewActionProperties implements JsonSerializable<StorageTaskPreviewActionProperties> {
    /*
     * Properties of a sample container to test for a match with the preview action.
     */
    private StorageTaskPreviewContainerProperties container;

    /*
     * Properties of some sample blobs in the container to test for matches with the preview action.
     */
    private List<StorageTaskPreviewBlobProperties> blobs;

    /*
     * Preview action to test
     */
    private StorageTaskPreviewActionCondition action;

    /**
     * Creates an instance of StorageTaskPreviewActionProperties class.
     */
    public StorageTaskPreviewActionProperties() {
    }

    /**
     * Get the container property: Properties of a sample container to test for a match with the preview action.
     * 
     * @return the container value.
     */
    public StorageTaskPreviewContainerProperties container() {
        return this.container;
    }

    /**
     * Set the container property: Properties of a sample container to test for a match with the preview action.
     * 
     * @param container the container value to set.
     * @return the StorageTaskPreviewActionProperties object itself.
     */
    public StorageTaskPreviewActionProperties withContainer(StorageTaskPreviewContainerProperties container) {
        this.container = container;
        return this;
    }

    /**
     * Get the blobs property: Properties of some sample blobs in the container to test for matches with the preview
     * action.
     * 
     * @return the blobs value.
     */
    public List<StorageTaskPreviewBlobProperties> blobs() {
        return this.blobs;
    }

    /**
     * Set the blobs property: Properties of some sample blobs in the container to test for matches with the preview
     * action.
     * 
     * @param blobs the blobs value to set.
     * @return the StorageTaskPreviewActionProperties object itself.
     */
    public StorageTaskPreviewActionProperties withBlobs(List<StorageTaskPreviewBlobProperties> blobs) {
        this.blobs = blobs;
        return this;
    }

    /**
     * Get the action property: Preview action to test.
     * 
     * @return the action value.
     */
    public StorageTaskPreviewActionCondition action() {
        return this.action;
    }

    /**
     * Set the action property: Preview action to test.
     * 
     * @param action the action value to set.
     * @return the StorageTaskPreviewActionProperties object itself.
     */
    public StorageTaskPreviewActionProperties withAction(StorageTaskPreviewActionCondition action) {
        this.action = action;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (container() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property container in model StorageTaskPreviewActionProperties"));
        } else {
            container().validate();
        }
        if (blobs() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property blobs in model StorageTaskPreviewActionProperties"));
        } else {
            blobs().forEach(e -> e.validate());
        }
        if (action() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property action in model StorageTaskPreviewActionProperties"));
        } else {
            action().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StorageTaskPreviewActionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("container", this.container);
        jsonWriter.writeArrayField("blobs", this.blobs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("action", this.action);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageTaskPreviewActionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageTaskPreviewActionProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StorageTaskPreviewActionProperties.
     */
    public static StorageTaskPreviewActionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageTaskPreviewActionProperties deserializedStorageTaskPreviewActionProperties
                = new StorageTaskPreviewActionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("container".equals(fieldName)) {
                    deserializedStorageTaskPreviewActionProperties.container
                        = StorageTaskPreviewContainerProperties.fromJson(reader);
                } else if ("blobs".equals(fieldName)) {
                    List<StorageTaskPreviewBlobProperties> blobs
                        = reader.readArray(reader1 -> StorageTaskPreviewBlobProperties.fromJson(reader1));
                    deserializedStorageTaskPreviewActionProperties.blobs = blobs;
                } else if ("action".equals(fieldName)) {
                    deserializedStorageTaskPreviewActionProperties.action
                        = StorageTaskPreviewActionCondition.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageTaskPreviewActionProperties;
        });
    }
}
