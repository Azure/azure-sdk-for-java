// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Storage task preview action properties.
 */
@Fluent
public final class StorageTaskPreviewActionProperties {
    /*
     * Preview action container properties to be tested for a match with the provided condition.
     */
    @JsonProperty(value = "container", required = true)
    private StorageTaskPreviewContainerProperties container;

    /*
     * Preview action container properties to be tested for a match with the provided condition.
     */
    @JsonProperty(value = "blobs", required = true)
    private List<StorageTaskPreviewBlobProperties> blobs;

    /*
     * Preview action container properties to be tested for a match with the provided condition.
     */
    @JsonProperty(value = "action", required = true)
    private StorageTaskPreviewActionCondition action;

    /**
     * Creates an instance of StorageTaskPreviewActionProperties class.
     */
    public StorageTaskPreviewActionProperties() {
    }

    /**
     * Get the container property: Preview action container properties to be tested for a match with the provided
     * condition.
     * 
     * @return the container value.
     */
    public StorageTaskPreviewContainerProperties container() {
        return this.container;
    }

    /**
     * Set the container property: Preview action container properties to be tested for a match with the provided
     * condition.
     * 
     * @param container the container value to set.
     * @return the StorageTaskPreviewActionProperties object itself.
     */
    public StorageTaskPreviewActionProperties withContainer(StorageTaskPreviewContainerProperties container) {
        this.container = container;
        return this;
    }

    /**
     * Get the blobs property: Preview action container properties to be tested for a match with the provided
     * condition.
     * 
     * @return the blobs value.
     */
    public List<StorageTaskPreviewBlobProperties> blobs() {
        return this.blobs;
    }

    /**
     * Set the blobs property: Preview action container properties to be tested for a match with the provided
     * condition.
     * 
     * @param blobs the blobs value to set.
     * @return the StorageTaskPreviewActionProperties object itself.
     */
    public StorageTaskPreviewActionProperties withBlobs(List<StorageTaskPreviewBlobProperties> blobs) {
        this.blobs = blobs;
        return this;
    }

    /**
     * Get the action property: Preview action container properties to be tested for a match with the provided
     * condition.
     * 
     * @return the action value.
     */
    public StorageTaskPreviewActionCondition action() {
        return this.action;
    }

    /**
     * Set the action property: Preview action container properties to be tested for a match with the provided
     * condition.
     * 
     * @param action the action value to set.
     * @return the StorageTaskPreviewActionProperties object itself.
     */
    public StorageTaskPreviewActionProperties withAction(StorageTaskPreviewActionCondition action) {
        this.action = action;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (container() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property container in model StorageTaskPreviewActionProperties"));
        } else {
            container().validate();
        }
        if (blobs() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property blobs in model StorageTaskPreviewActionProperties"));
        } else {
            blobs().forEach(e -> e.validate());
        }
        if (action() == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                "Missing required property action in model StorageTaskPreviewActionProperties"));
        } else {
            action().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StorageTaskPreviewActionProperties.class);
}
