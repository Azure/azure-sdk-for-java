// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.storageactions.fluent.models.StorageTaskInner;
import com.azure.resourcemanager.storageactions.models.ManagedServiceIdentity;
import com.azure.resourcemanager.storageactions.models.StorageTask;
import com.azure.resourcemanager.storageactions.models.StorageTaskProperties;
import com.azure.resourcemanager.storageactions.models.StorageTaskUpdateParameters;
import java.util.Collections;
import java.util.Map;

public final class StorageTaskImpl implements StorageTask, StorageTask.Definition, StorageTask.Update {
    private StorageTaskInner innerObject;

    private final com.azure.resourcemanager.storageactions.StorageActionsManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ManagedServiceIdentity identity() {
        return this.innerModel().identity();
    }

    public StorageTaskProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public StorageTaskInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.storageactions.StorageActionsManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String storageTaskName;

    private StorageTaskUpdateParameters updateParameters;

    public StorageTaskImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public StorageTask create() {
        this.innerObject = serviceManager.serviceClient().getStorageTasks().create(resourceGroupName, storageTaskName,
            this.innerModel(), Context.NONE);
        return this;
    }

    public StorageTask create(Context context) {
        this.innerObject = serviceManager.serviceClient().getStorageTasks().create(resourceGroupName, storageTaskName,
            this.innerModel(), context);
        return this;
    }

    StorageTaskImpl(String name, com.azure.resourcemanager.storageactions.StorageActionsManager serviceManager) {
        this.innerObject = new StorageTaskInner();
        this.serviceManager = serviceManager;
        this.storageTaskName = name;
    }

    public StorageTaskImpl update() {
        this.updateParameters = new StorageTaskUpdateParameters();
        return this;
    }

    public StorageTask apply() {
        this.innerObject = serviceManager.serviceClient().getStorageTasks().update(resourceGroupName, storageTaskName,
            updateParameters, Context.NONE);
        return this;
    }

    public StorageTask apply(Context context) {
        this.innerObject = serviceManager.serviceClient().getStorageTasks().update(resourceGroupName, storageTaskName,
            updateParameters, context);
        return this;
    }

    StorageTaskImpl(StorageTaskInner innerObject,
        com.azure.resourcemanager.storageactions.StorageActionsManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.storageTaskName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "storageTasks");
    }

    public StorageTask refresh() {
        this.innerObject = serviceManager.serviceClient().getStorageTasks()
            .getByResourceGroupWithResponse(resourceGroupName, storageTaskName, Context.NONE).getValue();
        return this;
    }

    public StorageTask refresh(Context context) {
        this.innerObject = serviceManager.serviceClient().getStorageTasks()
            .getByResourceGroupWithResponse(resourceGroupName, storageTaskName, context).getValue();
        return this;
    }

    public StorageTaskImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public StorageTaskImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public StorageTaskImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public StorageTaskImpl withIdentity(ManagedServiceIdentity identity) {
        if (isInCreateMode()) {
            this.innerModel().withIdentity(identity);
            return this;
        } else {
            this.updateParameters.withIdentity(identity);
            return this;
        }
    }

    public StorageTaskImpl withProperties(StorageTaskProperties properties) {
        if (isInCreateMode()) {
            this.innerModel().withProperties(properties);
            return this;
        } else {
            this.updateParameters.withProperties(properties);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
