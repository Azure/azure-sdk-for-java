// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageactions.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.storageactions.models.StorageTaskPreviewActionCondition;
import com.azure.resourcemanager.storageactions.models.StorageTaskPreviewBlobProperties;
import com.azure.resourcemanager.storageactions.models.StorageTaskPreviewContainerProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Storage Task Preview Action. */
@Fluent
public final class StorageTaskPreviewActionInner {
    /*
     * Properties of the storage task preview.
     */
    @JsonProperty(value = "properties", required = true)
    private StorageTaskPreviewActionProperties innerProperties = new StorageTaskPreviewActionProperties();

    /** Creates an instance of StorageTaskPreviewActionInner class. */
    public StorageTaskPreviewActionInner() {
    }

    /**
     * Get the innerProperties property: Properties of the storage task preview.
     *
     * @return the innerProperties value.
     */
    private StorageTaskPreviewActionProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the container property: Preview action container properties to be tested for a match with the provided
     * condition.
     *
     * @return the container value.
     */
    public StorageTaskPreviewContainerProperties container() {
        return this.innerProperties() == null ? null : this.innerProperties().container();
    }

    /**
     * Set the container property: Preview action container properties to be tested for a match with the provided
     * condition.
     *
     * @param container the container value to set.
     * @return the StorageTaskPreviewActionInner object itself.
     */
    public StorageTaskPreviewActionInner withContainer(StorageTaskPreviewContainerProperties container) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTaskPreviewActionProperties();
        }
        this.innerProperties().withContainer(container);
        return this;
    }

    /**
     * Get the blobs property: Preview action container properties to be tested for a match with the provided condition.
     *
     * @return the blobs value.
     */
    public List<StorageTaskPreviewBlobProperties> blobs() {
        return this.innerProperties() == null ? null : this.innerProperties().blobs();
    }

    /**
     * Set the blobs property: Preview action container properties to be tested for a match with the provided condition.
     *
     * @param blobs the blobs value to set.
     * @return the StorageTaskPreviewActionInner object itself.
     */
    public StorageTaskPreviewActionInner withBlobs(List<StorageTaskPreviewBlobProperties> blobs) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTaskPreviewActionProperties();
        }
        this.innerProperties().withBlobs(blobs);
        return this;
    }

    /**
     * Get the action property: Preview action container properties to be tested for a match with the provided
     * condition.
     *
     * @return the action value.
     */
    public StorageTaskPreviewActionCondition action() {
        return this.innerProperties() == null ? null : this.innerProperties().action();
    }

    /**
     * Set the action property: Preview action container properties to be tested for a match with the provided
     * condition.
     *
     * @param action the action value to set.
     * @return the StorageTaskPreviewActionInner object itself.
     */
    public StorageTaskPreviewActionInner withAction(StorageTaskPreviewActionCondition action) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageTaskPreviewActionProperties();
        }
        this.innerProperties().withAction(action);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model StorageTaskPreviewActionInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StorageTaskPreviewActionInner.class);
}
