// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureadexternalidentities.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azureadexternalidentities.fluent.B2CTenantsClient;
import com.azure.resourcemanager.azureadexternalidentities.fluent.models.B2CTenantResourceInner;
import com.azure.resourcemanager.azureadexternalidentities.fluent.models.NameAvailabilityResponseInner;
import com.azure.resourcemanager.azureadexternalidentities.models.B2CTenantResource;
import com.azure.resourcemanager.azureadexternalidentities.models.B2CTenants;
import com.azure.resourcemanager.azureadexternalidentities.models.CheckNameAvailabilityRequestBody;
import com.azure.resourcemanager.azureadexternalidentities.models.NameAvailabilityResponse;

public final class B2CTenantsImpl implements B2CTenants {
    private static final ClientLogger LOGGER = new ClientLogger(B2CTenantsImpl.class);

    private final B2CTenantsClient innerClient;

    private final com.azure.resourcemanager.azureadexternalidentities.ExternalIdentitiesConfigurationManager
        serviceManager;

    public B2CTenantsImpl(
        B2CTenantsClient innerClient,
        com.azure.resourcemanager.azureadexternalidentities.ExternalIdentitiesConfigurationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public NameAvailabilityResponse checkNameAvailability() {
        NameAvailabilityResponseInner inner = this.serviceClient().checkNameAvailability();
        if (inner != null) {
            return new NameAvailabilityResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<NameAvailabilityResponse> checkNameAvailabilityWithResponse(
        CheckNameAvailabilityRequestBody checkNameAvailabilityRequestBody, Context context) {
        Response<NameAvailabilityResponseInner> inner =
            this.serviceClient().checkNameAvailabilityWithResponse(checkNameAvailabilityRequestBody, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NameAvailabilityResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<B2CTenantResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<B2CTenantResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new B2CTenantResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<B2CTenantResource> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<B2CTenantResourceInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new B2CTenantResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<B2CTenantResource> list() {
        PagedIterable<B2CTenantResourceInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new B2CTenantResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<B2CTenantResource> list(Context context) {
        PagedIterable<B2CTenantResourceInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new B2CTenantResourceImpl(inner1, this.manager()));
    }

    public B2CTenantResource getByResourceGroup(String resourceGroupName, String resourceName) {
        B2CTenantResourceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, resourceName);
        if (inner != null) {
            return new B2CTenantResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<B2CTenantResource> getByResourceGroupWithResponse(
        String resourceGroupName, String resourceName, Context context) {
        Response<B2CTenantResourceInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, resourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new B2CTenantResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String resourceName) {
        this.serviceClient().delete(resourceGroupName, resourceName);
    }

    public void delete(String resourceGroupName, String resourceName, Context context) {
        this.serviceClient().delete(resourceGroupName, resourceName, context);
    }

    public B2CTenantResource getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "b2cDirectories");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'b2cDirectories'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, resourceName, Context.NONE).getValue();
    }

    public Response<B2CTenantResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "b2cDirectories");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'b2cDirectories'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, resourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "b2cDirectories");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'b2cDirectories'.", id)));
        }
        this.delete(resourceGroupName, resourceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String resourceName = Utils.getValueFromIdByName(id, "b2cDirectories");
        if (resourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'b2cDirectories'.", id)));
        }
        this.delete(resourceGroupName, resourceName, context);
    }

    private B2CTenantsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.azureadexternalidentities.ExternalIdentitiesConfigurationManager manager() {
        return this.serviceManager;
    }

    public B2CTenantResourceImpl define(String name) {
        return new B2CTenantResourceImpl(name, this.manager());
    }
}
