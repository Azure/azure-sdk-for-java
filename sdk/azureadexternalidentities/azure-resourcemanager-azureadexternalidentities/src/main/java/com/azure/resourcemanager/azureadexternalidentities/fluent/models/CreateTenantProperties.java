// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureadexternalidentities.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * These properties are used to create the Azure AD B2C tenant. These properties are not part of the Azure resource.
 */
@Fluent
public final class CreateTenantProperties implements JsonSerializable<CreateTenantProperties> {
    /*
     * The display name of the Azure AD B2C tenant.
     */
    private String displayName;

    /*
     * Country code of Azure tenant (e.g. 'US'). Refer to [aka.ms/B2CDataResidency](https://aka.ms/B2CDataResidency) to
     * see valid country codes and corresponding data residency locations. If you do not see a country code in an valid
     * data residency location, choose one from the list.
     */
    private String countryCode;

    /**
     * Creates an instance of CreateTenantProperties class.
     */
    public CreateTenantProperties() {
    }

    /**
     * Get the displayName property: The display name of the Azure AD B2C tenant.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the Azure AD B2C tenant.
     * 
     * @param displayName the displayName value to set.
     * @return the CreateTenantProperties object itself.
     */
    public CreateTenantProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the countryCode property: Country code of Azure tenant (e.g. 'US'). Refer to
     * [aka.ms/B2CDataResidency](https://aka.ms/B2CDataResidency) to see valid country codes and corresponding data
     * residency locations. If you do not see a country code in an valid data residency location, choose one from the
     * list.
     * 
     * @return the countryCode value.
     */
    public String countryCode() {
        return this.countryCode;
    }

    /**
     * Set the countryCode property: Country code of Azure tenant (e.g. 'US'). Refer to
     * [aka.ms/B2CDataResidency](https://aka.ms/B2CDataResidency) to see valid country codes and corresponding data
     * residency locations. If you do not see a country code in an valid data residency location, choose one from the
     * list.
     * 
     * @param countryCode the countryCode value to set.
     * @return the CreateTenantProperties object itself.
     */
    public CreateTenantProperties withCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("countryCode", this.countryCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateTenantProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateTenantProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CreateTenantProperties.
     */
    public static CreateTenantProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CreateTenantProperties deserializedCreateTenantProperties = new CreateTenantProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedCreateTenantProperties.displayName = reader.getString();
                } else if ("countryCode".equals(fieldName)) {
                    deserializedCreateTenantProperties.countryCode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCreateTenantProperties;
        });
    }
}
