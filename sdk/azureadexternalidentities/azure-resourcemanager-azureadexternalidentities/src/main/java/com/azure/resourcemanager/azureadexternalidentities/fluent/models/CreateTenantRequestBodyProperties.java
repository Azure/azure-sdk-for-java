// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureadexternalidentities.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The CreateTenantRequestBodyProperties model.
 */
@Fluent
public final class CreateTenantRequestBodyProperties implements JsonSerializable<CreateTenantRequestBodyProperties> {
    /*
     * These properties are used to create the Azure AD B2C tenant. These properties are not part of the Azure resource.
     */
    private CreateTenantProperties innerCreateTenantProperties;

    /**
     * Creates an instance of CreateTenantRequestBodyProperties class.
     */
    public CreateTenantRequestBodyProperties() {
    }

    /**
     * Get the innerCreateTenantProperties property: These properties are used to create the Azure AD B2C tenant. These
     * properties are not part of the Azure resource.
     * 
     * @return the innerCreateTenantProperties value.
     */
    private CreateTenantProperties innerCreateTenantProperties() {
        return this.innerCreateTenantProperties;
    }

    /**
     * Get the displayName property: The display name of the Azure AD B2C tenant.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerCreateTenantProperties() == null ? null : this.innerCreateTenantProperties().displayName();
    }

    /**
     * Set the displayName property: The display name of the Azure AD B2C tenant.
     * 
     * @param displayName the displayName value to set.
     * @return the CreateTenantRequestBodyProperties object itself.
     */
    public CreateTenantRequestBodyProperties withDisplayName(String displayName) {
        if (this.innerCreateTenantProperties() == null) {
            this.innerCreateTenantProperties = new CreateTenantProperties();
        }
        this.innerCreateTenantProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the countryCode property: Country code of Azure tenant (e.g. 'US'). Refer to
     * [aka.ms/B2CDataResidency](https://aka.ms/B2CDataResidency) to see valid country codes and corresponding data
     * residency locations. If you do not see a country code in an valid data residency location, choose one from the
     * list.
     * 
     * @return the countryCode value.
     */
    public String countryCode() {
        return this.innerCreateTenantProperties() == null ? null : this.innerCreateTenantProperties().countryCode();
    }

    /**
     * Set the countryCode property: Country code of Azure tenant (e.g. 'US'). Refer to
     * [aka.ms/B2CDataResidency](https://aka.ms/B2CDataResidency) to see valid country codes and corresponding data
     * residency locations. If you do not see a country code in an valid data residency location, choose one from the
     * list.
     * 
     * @param countryCode the countryCode value to set.
     * @return the CreateTenantRequestBodyProperties object itself.
     */
    public CreateTenantRequestBodyProperties withCountryCode(String countryCode) {
        if (this.innerCreateTenantProperties() == null) {
            this.innerCreateTenantProperties = new CreateTenantProperties();
        }
        this.innerCreateTenantProperties().withCountryCode(countryCode);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerCreateTenantProperties() != null) {
            innerCreateTenantProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("createTenantProperties", this.innerCreateTenantProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateTenantRequestBodyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateTenantRequestBodyProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CreateTenantRequestBodyProperties.
     */
    public static CreateTenantRequestBodyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CreateTenantRequestBodyProperties deserializedCreateTenantRequestBodyProperties
                = new CreateTenantRequestBodyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("createTenantProperties".equals(fieldName)) {
                    deserializedCreateTenantRequestBodyProperties.innerCreateTenantProperties
                        = CreateTenantProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCreateTenantRequestBodyProperties;
        });
    }
}
