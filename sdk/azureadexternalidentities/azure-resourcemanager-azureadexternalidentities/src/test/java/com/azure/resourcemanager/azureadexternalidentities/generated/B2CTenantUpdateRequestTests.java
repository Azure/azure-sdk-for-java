// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureadexternalidentities.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azureadexternalidentities.models.B2CResourceSku;
import com.azure.resourcemanager.azureadexternalidentities.models.B2CResourceSkuName;
import com.azure.resourcemanager.azureadexternalidentities.models.B2CResourceSkuTier;
import com.azure.resourcemanager.azureadexternalidentities.models.B2CTenantResourcePropertiesBillingConfig;
import com.azure.resourcemanager.azureadexternalidentities.models.B2CTenantUpdateRequest;
import com.azure.resourcemanager.azureadexternalidentities.models.BillingType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class B2CTenantUpdateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        B2CTenantUpdateRequest model = BinaryData.fromString(
            "{\"sku\":{\"name\":\"PremiumP2\",\"tier\":\"A0\"},\"properties\":{\"billingConfig\":{\"billingType\":\"Auths\",\"effectiveStartDateUtc\":\"bpf\"},\"tenantId\":\"s\"},\"tags\":{\"wzo\":\"gvfcj\",\"np\":\"xjtfelluwfzit\",\"lxofpdvhpfxxypin\":\"qfpjk\"}}")
            .toObject(B2CTenantUpdateRequest.class);
        Assertions.assertEquals(B2CResourceSkuName.PREMIUM_P2, model.sku().name());
        Assertions.assertEquals(B2CResourceSkuTier.A0, model.sku().tier());
        Assertions.assertEquals("gvfcj", model.tags().get("wzo"));
        Assertions.assertEquals(BillingType.AUTHS, model.billingConfig().billingType());
        Assertions.assertEquals("s", model.tenantId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        B2CTenantUpdateRequest model = new B2CTenantUpdateRequest()
            .withSku(new B2CResourceSku().withName(B2CResourceSkuName.PREMIUM_P2).withTier(B2CResourceSkuTier.A0))
            .withTags(mapOf("wzo", "gvfcj", "np", "xjtfelluwfzit", "lxofpdvhpfxxypin", "qfpjk"))
            .withBillingConfig(new B2CTenantResourcePropertiesBillingConfig().withBillingType(BillingType.AUTHS))
            .withTenantId("s");
        model = BinaryData.fromObject(model).toObject(B2CTenantUpdateRequest.class);
        Assertions.assertEquals(B2CResourceSkuName.PREMIUM_P2, model.sku().name());
        Assertions.assertEquals(B2CResourceSkuTier.A0, model.sku().tier());
        Assertions.assertEquals("gvfcj", model.tags().get("wzo"));
        Assertions.assertEquals(BillingType.AUTHS, model.billingConfig().billingType());
        Assertions.assertEquals("s", model.tenantId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
