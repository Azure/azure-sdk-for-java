// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureadexternalidentities.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azureadexternalidentities.fluent.models.B2CTenantResourceInner;
import com.azure.resourcemanager.azureadexternalidentities.models.B2CResourceSku;
import com.azure.resourcemanager.azureadexternalidentities.models.B2CResourceSkuName;
import com.azure.resourcemanager.azureadexternalidentities.models.B2CResourceSkuTier;
import com.azure.resourcemanager.azureadexternalidentities.models.B2CTenantResourcePropertiesBillingConfig;
import com.azure.resourcemanager.azureadexternalidentities.models.BillingType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class B2CTenantResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        B2CTenantResourceInner model = BinaryData.fromString(
            "{\"sku\":{\"name\":\"PremiumP1\",\"tier\":\"A0\"},\"properties\":{\"billingConfig\":{\"billingType\":\"MAU\",\"effectiveStartDateUtc\":\"git\"},\"tenantId\":\"qhabifpikxwcz\"},\"location\":\"scnpqxuhivy\",\"tags\":{\"rkxvdum\":\"wby\",\"xgaudccs\":\"grtfwvu\",\"jcny\":\"h\",\"kryhtnapczwlokj\":\"j\"},\"id\":\"emkkvnipjox\",\"name\":\"jnchgej\",\"type\":\"podmailzydehojwy\"}")
            .toObject(B2CTenantResourceInner.class);
        Assertions.assertEquals("scnpqxuhivy", model.location());
        Assertions.assertEquals("wby", model.tags().get("rkxvdum"));
        Assertions.assertEquals(B2CResourceSkuName.PREMIUM_P1, model.sku().name());
        Assertions.assertEquals(B2CResourceSkuTier.A0, model.sku().tier());
        Assertions.assertEquals(BillingType.MAU, model.billingConfig().billingType());
        Assertions.assertEquals("qhabifpikxwcz", model.tenantId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        B2CTenantResourceInner model = new B2CTenantResourceInner().withLocation("scnpqxuhivy")
            .withTags(mapOf("rkxvdum", "wby", "xgaudccs", "grtfwvu", "jcny", "h", "kryhtnapczwlokj", "j"))
            .withSku(new B2CResourceSku().withName(B2CResourceSkuName.PREMIUM_P1).withTier(B2CResourceSkuTier.A0))
            .withBillingConfig(new B2CTenantResourcePropertiesBillingConfig().withBillingType(BillingType.MAU))
            .withTenantId("qhabifpikxwcz");
        model = BinaryData.fromObject(model).toObject(B2CTenantResourceInner.class);
        Assertions.assertEquals("scnpqxuhivy", model.location());
        Assertions.assertEquals("wby", model.tags().get("rkxvdum"));
        Assertions.assertEquals(B2CResourceSkuName.PREMIUM_P1, model.sku().name());
        Assertions.assertEquals(B2CResourceSkuTier.A0, model.sku().tier());
        Assertions.assertEquals(BillingType.MAU, model.billingConfig().billingType());
        Assertions.assertEquals("qhabifpikxwcz", model.tenantId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
