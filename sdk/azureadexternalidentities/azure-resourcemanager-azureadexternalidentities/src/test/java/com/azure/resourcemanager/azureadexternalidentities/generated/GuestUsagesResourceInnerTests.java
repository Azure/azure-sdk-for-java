// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azureadexternalidentities.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.azureadexternalidentities.fluent.models.GuestUsagesResourceInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GuestUsagesResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GuestUsagesResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"tenantId\":\"akeqs\"},\"location\":\"yb\",\"tags\":{\"qytbciq\":\"e\",\"mmnkzsmodmgl\":\"ouf\",\"mutduqktaps\":\"ugpbkw\",\"rtumkdosvq\":\"wgcu\"},\"id\":\"hbmdgbbjfdd\",\"name\":\"mbmbexppbh\",\"type\":\"q\"}")
            .toObject(GuestUsagesResourceInner.class);
        Assertions.assertEquals("yb", model.location());
        Assertions.assertEquals("e", model.tags().get("qytbciq"));
        Assertions.assertEquals("akeqs", model.tenantId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GuestUsagesResourceInner model = new GuestUsagesResourceInner().withLocation("yb")
            .withTags(mapOf("qytbciq", "e", "mmnkzsmodmgl", "ouf", "mutduqktaps", "ugpbkw", "rtumkdosvq", "wgcu"))
            .withTenantId("akeqs");
        model = BinaryData.fromObject(model).toObject(GuestUsagesResourceInner.class);
        Assertions.assertEquals("yb", model.location());
        Assertions.assertEquals("e", model.tags().get("qytbciq"));
        Assertions.assertEquals("akeqs", model.tenantId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
