/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.databoxedge.v2020_05_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in BandwidthSchedules.
 */
public class BandwidthSchedulesInner {
    /** The Retrofit service to perform REST calls. */
    private BandwidthSchedulesService service;
    /** The service client containing this operation class. */
    private DataBoxEdgeManagementClientImpl client;

    /**
     * Initializes an instance of BandwidthSchedulesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public BandwidthSchedulesInner(Retrofit retrofit, DataBoxEdgeManagementClientImpl client) {
        this.service = retrofit.create(BandwidthSchedulesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for BandwidthSchedules to be
     * used by Retrofit to perform actually REST calls.
     */
    interface BandwidthSchedulesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.BandwidthSchedules listByDataBoxEdgeDevice" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/bandwidthSchedules")
        Observable<Response<ResponseBody>> listByDataBoxEdgeDevice(@Path("deviceName") String deviceName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.BandwidthSchedules get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/bandwidthSchedules/{name}")
        Observable<Response<ResponseBody>> get(@Path("deviceName") String deviceName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.BandwidthSchedules createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/bandwidthSchedules/{name}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("deviceName") String deviceName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Body BandwidthScheduleInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.BandwidthSchedules beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/bandwidthSchedules/{name}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("deviceName") String deviceName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Body BandwidthScheduleInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.BandwidthSchedules delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/bandwidthSchedules/{name}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("deviceName") String deviceName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.BandwidthSchedules beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/bandwidthSchedules/{name}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("deviceName") String deviceName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.BandwidthSchedules listByDataBoxEdgeDeviceNext" })
        @GET
        Observable<Response<ResponseBody>> listByDataBoxEdgeDeviceNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets all the bandwidth schedules for a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BandwidthScheduleInner&gt; object if successful.
     */
    public PagedList<BandwidthScheduleInner> listByDataBoxEdgeDevice(final String deviceName, final String resourceGroupName) {
        ServiceResponse<Page<BandwidthScheduleInner>> response = listByDataBoxEdgeDeviceSinglePageAsync(deviceName, resourceGroupName).toBlocking().single();
        return new PagedList<BandwidthScheduleInner>(response.body()) {
            @Override
            public Page<BandwidthScheduleInner> nextPage(String nextPageLink) {
                return listByDataBoxEdgeDeviceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the bandwidth schedules for a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BandwidthScheduleInner>> listByDataBoxEdgeDeviceAsync(final String deviceName, final String resourceGroupName, final ListOperationCallback<BandwidthScheduleInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByDataBoxEdgeDeviceSinglePageAsync(deviceName, resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<BandwidthScheduleInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BandwidthScheduleInner>>> call(String nextPageLink) {
                    return listByDataBoxEdgeDeviceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the bandwidth schedules for a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BandwidthScheduleInner&gt; object
     */
    public Observable<Page<BandwidthScheduleInner>> listByDataBoxEdgeDeviceAsync(final String deviceName, final String resourceGroupName) {
        return listByDataBoxEdgeDeviceWithServiceResponseAsync(deviceName, resourceGroupName)
            .map(new Func1<ServiceResponse<Page<BandwidthScheduleInner>>, Page<BandwidthScheduleInner>>() {
                @Override
                public Page<BandwidthScheduleInner> call(ServiceResponse<Page<BandwidthScheduleInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the bandwidth schedules for a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BandwidthScheduleInner&gt; object
     */
    public Observable<ServiceResponse<Page<BandwidthScheduleInner>>> listByDataBoxEdgeDeviceWithServiceResponseAsync(final String deviceName, final String resourceGroupName) {
        return listByDataBoxEdgeDeviceSinglePageAsync(deviceName, resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<BandwidthScheduleInner>>, Observable<ServiceResponse<Page<BandwidthScheduleInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BandwidthScheduleInner>>> call(ServiceResponse<Page<BandwidthScheduleInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByDataBoxEdgeDeviceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the bandwidth schedules for a Data Box Edge/Data Box Gateway device.
     *
    ServiceResponse<PageImpl<BandwidthScheduleInner>> * @param deviceName The device name.
    ServiceResponse<PageImpl<BandwidthScheduleInner>> * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BandwidthScheduleInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BandwidthScheduleInner>>> listByDataBoxEdgeDeviceSinglePageAsync(final String deviceName, final String resourceGroupName) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByDataBoxEdgeDevice(deviceName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BandwidthScheduleInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BandwidthScheduleInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BandwidthScheduleInner>> result = listByDataBoxEdgeDeviceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BandwidthScheduleInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BandwidthScheduleInner>> listByDataBoxEdgeDeviceDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BandwidthScheduleInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BandwidthScheduleInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the properties of the specified bandwidth schedule.
     *
     * @param deviceName The device name.
     * @param name The bandwidth schedule name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BandwidthScheduleInner object if successful.
     */
    public BandwidthScheduleInner get(String deviceName, String name, String resourceGroupName) {
        return getWithServiceResponseAsync(deviceName, name, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Gets the properties of the specified bandwidth schedule.
     *
     * @param deviceName The device name.
     * @param name The bandwidth schedule name.
     * @param resourceGroupName The resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BandwidthScheduleInner> getAsync(String deviceName, String name, String resourceGroupName, final ServiceCallback<BandwidthScheduleInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(deviceName, name, resourceGroupName), serviceCallback);
    }

    /**
     * Gets the properties of the specified bandwidth schedule.
     *
     * @param deviceName The device name.
     * @param name The bandwidth schedule name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BandwidthScheduleInner object
     */
    public Observable<BandwidthScheduleInner> getAsync(String deviceName, String name, String resourceGroupName) {
        return getWithServiceResponseAsync(deviceName, name, resourceGroupName).map(new Func1<ServiceResponse<BandwidthScheduleInner>, BandwidthScheduleInner>() {
            @Override
            public BandwidthScheduleInner call(ServiceResponse<BandwidthScheduleInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the properties of the specified bandwidth schedule.
     *
     * @param deviceName The device name.
     * @param name The bandwidth schedule name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BandwidthScheduleInner object
     */
    public Observable<ServiceResponse<BandwidthScheduleInner>> getWithServiceResponseAsync(String deviceName, String name, String resourceGroupName) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(deviceName, name, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BandwidthScheduleInner>>>() {
                @Override
                public Observable<ServiceResponse<BandwidthScheduleInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BandwidthScheduleInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BandwidthScheduleInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BandwidthScheduleInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BandwidthScheduleInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or updates a bandwidth schedule.
     *
     * @param deviceName The device name.
     * @param name The bandwidth schedule name which needs to be added/updated.
     * @param resourceGroupName The resource group name.
     * @param parameters The bandwidth schedule to be added or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BandwidthScheduleInner object if successful.
     */
    public BandwidthScheduleInner createOrUpdate(String deviceName, String name, String resourceGroupName, BandwidthScheduleInner parameters) {
        return createOrUpdateWithServiceResponseAsync(deviceName, name, resourceGroupName, parameters).toBlocking().last().body();
    }

    /**
     * Creates or updates a bandwidth schedule.
     *
     * @param deviceName The device name.
     * @param name The bandwidth schedule name which needs to be added/updated.
     * @param resourceGroupName The resource group name.
     * @param parameters The bandwidth schedule to be added or updated.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BandwidthScheduleInner> createOrUpdateAsync(String deviceName, String name, String resourceGroupName, BandwidthScheduleInner parameters, final ServiceCallback<BandwidthScheduleInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(deviceName, name, resourceGroupName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a bandwidth schedule.
     *
     * @param deviceName The device name.
     * @param name The bandwidth schedule name which needs to be added/updated.
     * @param resourceGroupName The resource group name.
     * @param parameters The bandwidth schedule to be added or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<BandwidthScheduleInner> createOrUpdateAsync(String deviceName, String name, String resourceGroupName, BandwidthScheduleInner parameters) {
        return createOrUpdateWithServiceResponseAsync(deviceName, name, resourceGroupName, parameters).map(new Func1<ServiceResponse<BandwidthScheduleInner>, BandwidthScheduleInner>() {
            @Override
            public BandwidthScheduleInner call(ServiceResponse<BandwidthScheduleInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a bandwidth schedule.
     *
     * @param deviceName The device name.
     * @param name The bandwidth schedule name which needs to be added/updated.
     * @param resourceGroupName The resource group name.
     * @param parameters The bandwidth schedule to be added or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<BandwidthScheduleInner>> createOrUpdateWithServiceResponseAsync(String deviceName, String name, String resourceGroupName, BandwidthScheduleInner parameters) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(deviceName, name, this.client.subscriptionId(), resourceGroupName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<BandwidthScheduleInner>() { }.getType());
    }

    /**
     * Creates or updates a bandwidth schedule.
     *
     * @param deviceName The device name.
     * @param name The bandwidth schedule name which needs to be added/updated.
     * @param resourceGroupName The resource group name.
     * @param parameters The bandwidth schedule to be added or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BandwidthScheduleInner object if successful.
     */
    public BandwidthScheduleInner beginCreateOrUpdate(String deviceName, String name, String resourceGroupName, BandwidthScheduleInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(deviceName, name, resourceGroupName, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates a bandwidth schedule.
     *
     * @param deviceName The device name.
     * @param name The bandwidth schedule name which needs to be added/updated.
     * @param resourceGroupName The resource group name.
     * @param parameters The bandwidth schedule to be added or updated.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BandwidthScheduleInner> beginCreateOrUpdateAsync(String deviceName, String name, String resourceGroupName, BandwidthScheduleInner parameters, final ServiceCallback<BandwidthScheduleInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(deviceName, name, resourceGroupName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a bandwidth schedule.
     *
     * @param deviceName The device name.
     * @param name The bandwidth schedule name which needs to be added/updated.
     * @param resourceGroupName The resource group name.
     * @param parameters The bandwidth schedule to be added or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BandwidthScheduleInner object
     */
    public Observable<BandwidthScheduleInner> beginCreateOrUpdateAsync(String deviceName, String name, String resourceGroupName, BandwidthScheduleInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(deviceName, name, resourceGroupName, parameters).map(new Func1<ServiceResponse<BandwidthScheduleInner>, BandwidthScheduleInner>() {
            @Override
            public BandwidthScheduleInner call(ServiceResponse<BandwidthScheduleInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a bandwidth schedule.
     *
     * @param deviceName The device name.
     * @param name The bandwidth schedule name which needs to be added/updated.
     * @param resourceGroupName The resource group name.
     * @param parameters The bandwidth schedule to be added or updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BandwidthScheduleInner object
     */
    public Observable<ServiceResponse<BandwidthScheduleInner>> beginCreateOrUpdateWithServiceResponseAsync(String deviceName, String name, String resourceGroupName, BandwidthScheduleInner parameters) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginCreateOrUpdate(deviceName, name, this.client.subscriptionId(), resourceGroupName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BandwidthScheduleInner>>>() {
                @Override
                public Observable<ServiceResponse<BandwidthScheduleInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BandwidthScheduleInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BandwidthScheduleInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<BandwidthScheduleInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<BandwidthScheduleInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes the specified bandwidth schedule.
     *
     * @param deviceName The device name.
     * @param name The bandwidth schedule name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String deviceName, String name, String resourceGroupName) {
        deleteWithServiceResponseAsync(deviceName, name, resourceGroupName).toBlocking().last().body();
    }

    /**
     * Deletes the specified bandwidth schedule.
     *
     * @param deviceName The device name.
     * @param name The bandwidth schedule name.
     * @param resourceGroupName The resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String deviceName, String name, String resourceGroupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(deviceName, name, resourceGroupName), serviceCallback);
    }

    /**
     * Deletes the specified bandwidth schedule.
     *
     * @param deviceName The device name.
     * @param name The bandwidth schedule name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String deviceName, String name, String resourceGroupName) {
        return deleteWithServiceResponseAsync(deviceName, name, resourceGroupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the specified bandwidth schedule.
     *
     * @param deviceName The device name.
     * @param name The bandwidth schedule name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String deviceName, String name, String resourceGroupName) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(deviceName, name, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes the specified bandwidth schedule.
     *
     * @param deviceName The device name.
     * @param name The bandwidth schedule name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String deviceName, String name, String resourceGroupName) {
        beginDeleteWithServiceResponseAsync(deviceName, name, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Deletes the specified bandwidth schedule.
     *
     * @param deviceName The device name.
     * @param name The bandwidth schedule name.
     * @param resourceGroupName The resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String deviceName, String name, String resourceGroupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(deviceName, name, resourceGroupName), serviceCallback);
    }

    /**
     * Deletes the specified bandwidth schedule.
     *
     * @param deviceName The device name.
     * @param name The bandwidth schedule name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String deviceName, String name, String resourceGroupName) {
        return beginDeleteWithServiceResponseAsync(deviceName, name, resourceGroupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the specified bandwidth schedule.
     *
     * @param deviceName The device name.
     * @param name The bandwidth schedule name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String deviceName, String name, String resourceGroupName) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(deviceName, name, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all the bandwidth schedules for a Data Box Edge/Data Box Gateway device.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;BandwidthScheduleInner&gt; object if successful.
     */
    public PagedList<BandwidthScheduleInner> listByDataBoxEdgeDeviceNext(final String nextPageLink) {
        ServiceResponse<Page<BandwidthScheduleInner>> response = listByDataBoxEdgeDeviceNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<BandwidthScheduleInner>(response.body()) {
            @Override
            public Page<BandwidthScheduleInner> nextPage(String nextPageLink) {
                return listByDataBoxEdgeDeviceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the bandwidth schedules for a Data Box Edge/Data Box Gateway device.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BandwidthScheduleInner>> listByDataBoxEdgeDeviceNextAsync(final String nextPageLink, final ServiceFuture<List<BandwidthScheduleInner>> serviceFuture, final ListOperationCallback<BandwidthScheduleInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByDataBoxEdgeDeviceNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<BandwidthScheduleInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BandwidthScheduleInner>>> call(String nextPageLink) {
                    return listByDataBoxEdgeDeviceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the bandwidth schedules for a Data Box Edge/Data Box Gateway device.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BandwidthScheduleInner&gt; object
     */
    public Observable<Page<BandwidthScheduleInner>> listByDataBoxEdgeDeviceNextAsync(final String nextPageLink) {
        return listByDataBoxEdgeDeviceNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<BandwidthScheduleInner>>, Page<BandwidthScheduleInner>>() {
                @Override
                public Page<BandwidthScheduleInner> call(ServiceResponse<Page<BandwidthScheduleInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the bandwidth schedules for a Data Box Edge/Data Box Gateway device.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;BandwidthScheduleInner&gt; object
     */
    public Observable<ServiceResponse<Page<BandwidthScheduleInner>>> listByDataBoxEdgeDeviceNextWithServiceResponseAsync(final String nextPageLink) {
        return listByDataBoxEdgeDeviceNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<BandwidthScheduleInner>>, Observable<ServiceResponse<Page<BandwidthScheduleInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BandwidthScheduleInner>>> call(ServiceResponse<Page<BandwidthScheduleInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByDataBoxEdgeDeviceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the bandwidth schedules for a Data Box Edge/Data Box Gateway device.
     *
    ServiceResponse<PageImpl<BandwidthScheduleInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;BandwidthScheduleInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<BandwidthScheduleInner>>> listByDataBoxEdgeDeviceNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByDataBoxEdgeDeviceNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<BandwidthScheduleInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<BandwidthScheduleInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<BandwidthScheduleInner>> result = listByDataBoxEdgeDeviceNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<BandwidthScheduleInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<BandwidthScheduleInner>> listByDataBoxEdgeDeviceNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<BandwidthScheduleInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<BandwidthScheduleInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
