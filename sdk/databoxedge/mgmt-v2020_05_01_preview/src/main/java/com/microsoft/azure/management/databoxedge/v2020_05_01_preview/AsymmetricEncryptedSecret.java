/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.databoxedge.v2020_05_01_preview;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represent the secrets intended for encryption with asymmetric key pair.
 */
public class AsymmetricEncryptedSecret {
    /**
     * The value of the secret.
     */
    @JsonProperty(value = "value", required = true)
    private String value;

    /**
     * Thumbprint certificate used to encrypt \"Value\". If the value is
     * unencrypted, it will be null.
     */
    @JsonProperty(value = "encryptionCertThumbprint")
    private String encryptionCertThumbprint;

    /**
     * The algorithm used to encrypt "Value". Possible values include: 'None',
     * 'AES256', 'RSAES_PKCS1_v_1_5'.
     */
    @JsonProperty(value = "encryptionAlgorithm", required = true)
    private EncryptionAlgorithm encryptionAlgorithm;

    /**
     * Get the value of the secret.
     *
     * @return the value value
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value of the secret.
     *
     * @param value the value value to set
     * @return the AsymmetricEncryptedSecret object itself.
     */
    public AsymmetricEncryptedSecret withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Get thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null.
     *
     * @return the encryptionCertThumbprint value
     */
    public String encryptionCertThumbprint() {
        return this.encryptionCertThumbprint;
    }

    /**
     * Set thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null.
     *
     * @param encryptionCertThumbprint the encryptionCertThumbprint value to set
     * @return the AsymmetricEncryptedSecret object itself.
     */
    public AsymmetricEncryptedSecret withEncryptionCertThumbprint(String encryptionCertThumbprint) {
        this.encryptionCertThumbprint = encryptionCertThumbprint;
        return this;
    }

    /**
     * Get the algorithm used to encrypt "Value". Possible values include: 'None', 'AES256', 'RSAES_PKCS1_v_1_5'.
     *
     * @return the encryptionAlgorithm value
     */
    public EncryptionAlgorithm encryptionAlgorithm() {
        return this.encryptionAlgorithm;
    }

    /**
     * Set the algorithm used to encrypt "Value". Possible values include: 'None', 'AES256', 'RSAES_PKCS1_v_1_5'.
     *
     * @param encryptionAlgorithm the encryptionAlgorithm value to set
     * @return the AsymmetricEncryptedSecret object itself.
     */
    public AsymmetricEncryptedSecret withEncryptionAlgorithm(EncryptionAlgorithm encryptionAlgorithm) {
        this.encryptionAlgorithm = encryptionAlgorithm;
        return this;
    }

}
