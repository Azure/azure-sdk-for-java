/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.databoxedge.v2020_05_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.databoxedge.v2020_05_01_preview.AvailableSkus;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.arm.utils.PagedListConverter;
import com.microsoft.azure.management.databoxedge.v2020_05_01_preview.DataBoxEdgeSku;

class AvailableSkusImpl extends WrapperImpl<AvailableSkusInner> implements AvailableSkus {
    private PagedListConverter<DataBoxEdgeSkuInner, DataBoxEdgeSku> converter;
    private final DataBoxEdgeManager manager;

    AvailableSkusImpl(DataBoxEdgeManager manager) {
        super(manager.inner().availableSkus());
        this.manager = manager;
        this.converter = new PagedListConverter<DataBoxEdgeSkuInner, DataBoxEdgeSku>() {
            @Override
            public Observable<DataBoxEdgeSku> typeConvertAsync(DataBoxEdgeSkuInner inner) {
                return Observable.just((DataBoxEdgeSku) wrapModel(inner));
            }
        };
    }

    public DataBoxEdgeManager manager() {
        return this.manager;
    }

    private DataBoxEdgeSkuImpl wrapModel(DataBoxEdgeSkuInner inner) {
        return  new DataBoxEdgeSkuImpl(inner, manager());
    }

    @Override
    public PagedList<DataBoxEdgeSku> list() {
        AvailableSkusInner client = this.inner();
        return converter.convert(client.list());
    }

    @Override
    public Observable<DataBoxEdgeSku> listAsync() {
        AvailableSkusInner client = this.inner();
        return client.listAsync()
        .flatMap(new Func1<Page<DataBoxEdgeSkuInner>, Observable<DataBoxEdgeSkuInner>>() {
            @Override
            public Observable<DataBoxEdgeSkuInner> call(Page<DataBoxEdgeSkuInner> innerPage) {
                return Observable.from(innerPage.items());
            }
        })
        .map(new Func1<DataBoxEdgeSkuInner, DataBoxEdgeSku>() {
            @Override
            public DataBoxEdgeSku call(DataBoxEdgeSkuInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
