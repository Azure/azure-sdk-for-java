/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.databoxedge.v2020_05_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Nodes;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Node;

class NodesImpl extends WrapperImpl<NodesInner> implements Nodes {
    private final DataBoxEdgeManager manager;

    NodesImpl(DataBoxEdgeManager manager) {
        super(manager.inner().nodes());
        this.manager = manager;
    }

    public DataBoxEdgeManager manager() {
        return this.manager;
    }

    private NodeImpl wrapModel(NodeInner inner) {
        return  new NodeImpl(inner, manager());
    }

    @Override
    public Observable<Node> listByDataBoxEdgeDeviceAsync(String deviceName, String resourceGroupName) {
        NodesInner client = this.inner();
        return client.listByDataBoxEdgeDeviceAsync(deviceName, resourceGroupName)
        .flatMap(new Func1<List<NodeInner>, Observable<NodeInner>>() {
            @Override
            public Observable<NodeInner> call(List<NodeInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<NodeInner, Node>() {
            @Override
            public Node call(NodeInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
