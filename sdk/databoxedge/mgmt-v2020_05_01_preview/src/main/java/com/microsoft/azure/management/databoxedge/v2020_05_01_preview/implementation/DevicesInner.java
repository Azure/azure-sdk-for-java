/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.databoxedge.v2020_05_01_preview.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.databoxedge.v2020_05_01_preview.DataBoxEdgeDevicePatch;
import com.microsoft.azure.management.databoxedge.v2020_05_01_preview.SecuritySettings;
import com.microsoft.azure.management.databoxedge.v2020_05_01_preview.UploadCertificateRequest;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Devices.
 */
public class DevicesInner implements InnerSupportsGet<DataBoxEdgeDeviceInner>, InnerSupportsDelete<Void>, InnerSupportsListing<DataBoxEdgeDeviceInner> {
    /** The Retrofit service to perform REST calls. */
    private DevicesService service;
    /** The service client containing this operation class. */
    private DataBoxEdgeManagementClientImpl client;

    /**
     * Initializes an instance of DevicesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DevicesInner(Retrofit retrofit, DataBoxEdgeManagementClientImpl client) {
        this.service = retrofit.create(DevicesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Devices to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DevicesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Query("$expand") String expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("deviceName") String deviceName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("deviceName") String deviceName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Body DataBoxEdgeDeviceInner dataBoxEdgeDevice, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("deviceName") String deviceName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Body DataBoxEdgeDeviceInner dataBoxEdgeDevice, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("deviceName") String deviceName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("deviceName") String deviceName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}")
        Observable<Response<ResponseBody>> update(@Path("deviceName") String deviceName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Body DataBoxEdgeDevicePatch parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices downloadUpdates" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/downloadUpdates")
        Observable<Response<ResponseBody>> downloadUpdates(@Path("deviceName") String deviceName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices beginDownloadUpdates" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/downloadUpdates")
        Observable<Response<ResponseBody>> beginDownloadUpdates(@Path("deviceName") String deviceName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices getExtendedInformation" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/getExtendedInformation")
        Observable<Response<ResponseBody>> getExtendedInformation(@Path("deviceName") String deviceName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices installUpdates" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/installUpdates")
        Observable<Response<ResponseBody>> installUpdates(@Path("deviceName") String deviceName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices beginInstallUpdates" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/installUpdates")
        Observable<Response<ResponseBody>> beginInstallUpdates(@Path("deviceName") String deviceName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices getNetworkSettings" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/networkSettings/default")
        Observable<Response<ResponseBody>> getNetworkSettings(@Path("deviceName") String deviceName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices scanForUpdates" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/scanForUpdates")
        Observable<Response<ResponseBody>> scanForUpdates(@Path("deviceName") String deviceName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices beginScanForUpdates" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/scanForUpdates")
        Observable<Response<ResponseBody>> beginScanForUpdates(@Path("deviceName") String deviceName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices createOrUpdateSecuritySettings" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/securitySettings/default/update")
        Observable<Response<ResponseBody>> createOrUpdateSecuritySettings(@Path("deviceName") String deviceName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Body SecuritySettings securitySettings, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices beginCreateOrUpdateSecuritySettings" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/securitySettings/default/update")
        Observable<Response<ResponseBody>> beginCreateOrUpdateSecuritySettings(@Path("deviceName") String deviceName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Body SecuritySettings securitySettings, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices getUpdateSummary" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/updateSummary/default")
        Observable<Response<ResponseBody>> getUpdateSummary(@Path("deviceName") String deviceName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices uploadCertificate" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/uploadCertificate")
        Observable<Response<ResponseBody>> uploadCertificate(@Path("deviceName") String deviceName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Body UploadCertificateRequest parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.databoxedge.v2020_05_01_preview.Devices listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DataBoxEdgeDeviceInner&gt; object if successful.
     */
    public PagedList<DataBoxEdgeDeviceInner> list() {
        ServiceResponse<Page<DataBoxEdgeDeviceInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<DataBoxEdgeDeviceInner>(response.body()) {
            @Override
            public Page<DataBoxEdgeDeviceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DataBoxEdgeDeviceInner>> listAsync(final ListOperationCallback<DataBoxEdgeDeviceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataBoxEdgeDeviceInner&gt; object
     */
    public Observable<Page<DataBoxEdgeDeviceInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<DataBoxEdgeDeviceInner>>, Page<DataBoxEdgeDeviceInner>>() {
                @Override
                public Page<DataBoxEdgeDeviceInner> call(ServiceResponse<Page<DataBoxEdgeDeviceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataBoxEdgeDeviceInner&gt; object
     */
    public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<DataBoxEdgeDeviceInner>>, Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> call(ServiceResponse<Page<DataBoxEdgeDeviceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DataBoxEdgeDeviceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DataBoxEdgeDeviceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DataBoxEdgeDeviceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a subscription.
     *
     * @param expand Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=&lt;token&gt; to populate the next page in the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DataBoxEdgeDeviceInner&gt; object if successful.
     */
    public PagedList<DataBoxEdgeDeviceInner> list(final String expand) {
        ServiceResponse<Page<DataBoxEdgeDeviceInner>> response = listSinglePageAsync(expand).toBlocking().single();
        return new PagedList<DataBoxEdgeDeviceInner>(response.body()) {
            @Override
            public Page<DataBoxEdgeDeviceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a subscription.
     *
     * @param expand Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=&lt;token&gt; to populate the next page in the list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DataBoxEdgeDeviceInner>> listAsync(final String expand, final ListOperationCallback<DataBoxEdgeDeviceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(expand),
            new Func1<String, Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a subscription.
     *
     * @param expand Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=&lt;token&gt; to populate the next page in the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataBoxEdgeDeviceInner&gt; object
     */
    public Observable<Page<DataBoxEdgeDeviceInner>> listAsync(final String expand) {
        return listWithServiceResponseAsync(expand)
            .map(new Func1<ServiceResponse<Page<DataBoxEdgeDeviceInner>>, Page<DataBoxEdgeDeviceInner>>() {
                @Override
                public Page<DataBoxEdgeDeviceInner> call(ServiceResponse<Page<DataBoxEdgeDeviceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a subscription.
     *
     * @param expand Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=&lt;token&gt; to populate the next page in the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataBoxEdgeDeviceInner&gt; object
     */
    public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> listWithServiceResponseAsync(final String expand) {
        return listSinglePageAsync(expand)
            .concatMap(new Func1<ServiceResponse<Page<DataBoxEdgeDeviceInner>>, Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> call(ServiceResponse<Page<DataBoxEdgeDeviceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a subscription.
     *
    ServiceResponse<PageImpl<DataBoxEdgeDeviceInner>> * @param expand Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=&lt;token&gt; to populate the next page in the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DataBoxEdgeDeviceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> listSinglePageAsync(final String expand) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DataBoxEdgeDeviceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DataBoxEdgeDeviceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DataBoxEdgeDeviceInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DataBoxEdgeDeviceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DataBoxEdgeDeviceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a resource group.
     *
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DataBoxEdgeDeviceInner&gt; object if successful.
     */
    public PagedList<DataBoxEdgeDeviceInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<DataBoxEdgeDeviceInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<DataBoxEdgeDeviceInner>(response.body()) {
            @Override
            public Page<DataBoxEdgeDeviceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a resource group.
     *
     * @param resourceGroupName The resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DataBoxEdgeDeviceInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<DataBoxEdgeDeviceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a resource group.
     *
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataBoxEdgeDeviceInner&gt; object
     */
    public Observable<Page<DataBoxEdgeDeviceInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<DataBoxEdgeDeviceInner>>, Page<DataBoxEdgeDeviceInner>>() {
                @Override
                public Page<DataBoxEdgeDeviceInner> call(ServiceResponse<Page<DataBoxEdgeDeviceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a resource group.
     *
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataBoxEdgeDeviceInner&gt; object
     */
    public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<DataBoxEdgeDeviceInner>>, Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> call(ServiceResponse<Page<DataBoxEdgeDeviceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a resource group.
     *
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DataBoxEdgeDeviceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DataBoxEdgeDeviceInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DataBoxEdgeDeviceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a resource group.
     *
     * @param resourceGroupName The resource group name.
     * @param expand Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=&lt;token&gt; to populate the next page in the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DataBoxEdgeDeviceInner&gt; object if successful.
     */
    public PagedList<DataBoxEdgeDeviceInner> listByResourceGroup(final String resourceGroupName, final String expand) {
        ServiceResponse<Page<DataBoxEdgeDeviceInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName, expand).toBlocking().single();
        return new PagedList<DataBoxEdgeDeviceInner>(response.body()) {
            @Override
            public Page<DataBoxEdgeDeviceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a resource group.
     *
     * @param resourceGroupName The resource group name.
     * @param expand Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=&lt;token&gt; to populate the next page in the list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DataBoxEdgeDeviceInner>> listByResourceGroupAsync(final String resourceGroupName, final String expand, final ListOperationCallback<DataBoxEdgeDeviceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName, expand),
            new Func1<String, Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a resource group.
     *
     * @param resourceGroupName The resource group name.
     * @param expand Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=&lt;token&gt; to populate the next page in the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataBoxEdgeDeviceInner&gt; object
     */
    public Observable<Page<DataBoxEdgeDeviceInner>> listByResourceGroupAsync(final String resourceGroupName, final String expand) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName, expand)
            .map(new Func1<ServiceResponse<Page<DataBoxEdgeDeviceInner>>, Page<DataBoxEdgeDeviceInner>>() {
                @Override
                public Page<DataBoxEdgeDeviceInner> call(ServiceResponse<Page<DataBoxEdgeDeviceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a resource group.
     *
     * @param resourceGroupName The resource group name.
     * @param expand Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=&lt;token&gt; to populate the next page in the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataBoxEdgeDeviceInner&gt; object
     */
    public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String expand) {
        return listByResourceGroupSinglePageAsync(resourceGroupName, expand)
            .concatMap(new Func1<ServiceResponse<Page<DataBoxEdgeDeviceInner>>, Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> call(ServiceResponse<Page<DataBoxEdgeDeviceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a resource group.
     *
    ServiceResponse<PageImpl<DataBoxEdgeDeviceInner>> * @param resourceGroupName The resource group name.
    ServiceResponse<PageImpl<DataBoxEdgeDeviceInner>> * @param expand Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=&lt;token&gt; to populate the next page in the list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DataBoxEdgeDeviceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName, final String expand) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DataBoxEdgeDeviceInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DataBoxEdgeDeviceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DataBoxEdgeDeviceInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DataBoxEdgeDeviceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DataBoxEdgeDeviceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the properties of the Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataBoxEdgeDeviceInner object if successful.
     */
    public DataBoxEdgeDeviceInner getByResourceGroup(String deviceName, String resourceGroupName) {
        return getByResourceGroupWithServiceResponseAsync(deviceName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Gets the properties of the Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataBoxEdgeDeviceInner> getByResourceGroupAsync(String deviceName, String resourceGroupName, final ServiceCallback<DataBoxEdgeDeviceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(deviceName, resourceGroupName), serviceCallback);
    }

    /**
     * Gets the properties of the Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataBoxEdgeDeviceInner object
     */
    public Observable<DataBoxEdgeDeviceInner> getByResourceGroupAsync(String deviceName, String resourceGroupName) {
        return getByResourceGroupWithServiceResponseAsync(deviceName, resourceGroupName).map(new Func1<ServiceResponse<DataBoxEdgeDeviceInner>, DataBoxEdgeDeviceInner>() {
            @Override
            public DataBoxEdgeDeviceInner call(ServiceResponse<DataBoxEdgeDeviceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the properties of the Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataBoxEdgeDeviceInner object
     */
    public Observable<ServiceResponse<DataBoxEdgeDeviceInner>> getByResourceGroupWithServiceResponseAsync(String deviceName, String resourceGroupName) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(deviceName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataBoxEdgeDeviceInner>>>() {
                @Override
                public Observable<ServiceResponse<DataBoxEdgeDeviceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataBoxEdgeDeviceInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataBoxEdgeDeviceInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DataBoxEdgeDeviceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DataBoxEdgeDeviceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or updates a Data Box Edge/Data Box Gateway resource.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param dataBoxEdgeDevice The resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataBoxEdgeDeviceInner object if successful.
     */
    public DataBoxEdgeDeviceInner createOrUpdate(String deviceName, String resourceGroupName, DataBoxEdgeDeviceInner dataBoxEdgeDevice) {
        return createOrUpdateWithServiceResponseAsync(deviceName, resourceGroupName, dataBoxEdgeDevice).toBlocking().last().body();
    }

    /**
     * Creates or updates a Data Box Edge/Data Box Gateway resource.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param dataBoxEdgeDevice The resource object.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataBoxEdgeDeviceInner> createOrUpdateAsync(String deviceName, String resourceGroupName, DataBoxEdgeDeviceInner dataBoxEdgeDevice, final ServiceCallback<DataBoxEdgeDeviceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(deviceName, resourceGroupName, dataBoxEdgeDevice), serviceCallback);
    }

    /**
     * Creates or updates a Data Box Edge/Data Box Gateway resource.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param dataBoxEdgeDevice The resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DataBoxEdgeDeviceInner> createOrUpdateAsync(String deviceName, String resourceGroupName, DataBoxEdgeDeviceInner dataBoxEdgeDevice) {
        return createOrUpdateWithServiceResponseAsync(deviceName, resourceGroupName, dataBoxEdgeDevice).map(new Func1<ServiceResponse<DataBoxEdgeDeviceInner>, DataBoxEdgeDeviceInner>() {
            @Override
            public DataBoxEdgeDeviceInner call(ServiceResponse<DataBoxEdgeDeviceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a Data Box Edge/Data Box Gateway resource.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param dataBoxEdgeDevice The resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<DataBoxEdgeDeviceInner>> createOrUpdateWithServiceResponseAsync(String deviceName, String resourceGroupName, DataBoxEdgeDeviceInner dataBoxEdgeDevice) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataBoxEdgeDevice == null) {
            throw new IllegalArgumentException("Parameter dataBoxEdgeDevice is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(dataBoxEdgeDevice);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(deviceName, this.client.subscriptionId(), resourceGroupName, dataBoxEdgeDevice, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<DataBoxEdgeDeviceInner>() { }.getType());
    }

    /**
     * Creates or updates a Data Box Edge/Data Box Gateway resource.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param dataBoxEdgeDevice The resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataBoxEdgeDeviceInner object if successful.
     */
    public DataBoxEdgeDeviceInner beginCreateOrUpdate(String deviceName, String resourceGroupName, DataBoxEdgeDeviceInner dataBoxEdgeDevice) {
        return beginCreateOrUpdateWithServiceResponseAsync(deviceName, resourceGroupName, dataBoxEdgeDevice).toBlocking().single().body();
    }

    /**
     * Creates or updates a Data Box Edge/Data Box Gateway resource.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param dataBoxEdgeDevice The resource object.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataBoxEdgeDeviceInner> beginCreateOrUpdateAsync(String deviceName, String resourceGroupName, DataBoxEdgeDeviceInner dataBoxEdgeDevice, final ServiceCallback<DataBoxEdgeDeviceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(deviceName, resourceGroupName, dataBoxEdgeDevice), serviceCallback);
    }

    /**
     * Creates or updates a Data Box Edge/Data Box Gateway resource.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param dataBoxEdgeDevice The resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataBoxEdgeDeviceInner object
     */
    public Observable<DataBoxEdgeDeviceInner> beginCreateOrUpdateAsync(String deviceName, String resourceGroupName, DataBoxEdgeDeviceInner dataBoxEdgeDevice) {
        return beginCreateOrUpdateWithServiceResponseAsync(deviceName, resourceGroupName, dataBoxEdgeDevice).map(new Func1<ServiceResponse<DataBoxEdgeDeviceInner>, DataBoxEdgeDeviceInner>() {
            @Override
            public DataBoxEdgeDeviceInner call(ServiceResponse<DataBoxEdgeDeviceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a Data Box Edge/Data Box Gateway resource.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param dataBoxEdgeDevice The resource object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataBoxEdgeDeviceInner object
     */
    public Observable<ServiceResponse<DataBoxEdgeDeviceInner>> beginCreateOrUpdateWithServiceResponseAsync(String deviceName, String resourceGroupName, DataBoxEdgeDeviceInner dataBoxEdgeDevice) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dataBoxEdgeDevice == null) {
            throw new IllegalArgumentException("Parameter dataBoxEdgeDevice is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(dataBoxEdgeDevice);
        return service.beginCreateOrUpdate(deviceName, this.client.subscriptionId(), resourceGroupName, dataBoxEdgeDevice, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataBoxEdgeDeviceInner>>>() {
                @Override
                public Observable<ServiceResponse<DataBoxEdgeDeviceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataBoxEdgeDeviceInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataBoxEdgeDeviceInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DataBoxEdgeDeviceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DataBoxEdgeDeviceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes the Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String deviceName, String resourceGroupName) {
        deleteWithServiceResponseAsync(deviceName, resourceGroupName).toBlocking().last().body();
    }

    /**
     * Deletes the Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String deviceName, String resourceGroupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(deviceName, resourceGroupName), serviceCallback);
    }

    /**
     * Deletes the Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String deviceName, String resourceGroupName) {
        return deleteWithServiceResponseAsync(deviceName, resourceGroupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String deviceName, String resourceGroupName) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(deviceName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes the Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String deviceName, String resourceGroupName) {
        beginDeleteWithServiceResponseAsync(deviceName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Deletes the Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String deviceName, String resourceGroupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(deviceName, resourceGroupName), serviceCallback);
    }

    /**
     * Deletes the Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String deviceName, String resourceGroupName) {
        return beginDeleteWithServiceResponseAsync(deviceName, resourceGroupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String deviceName, String resourceGroupName) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(deviceName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Modifies a Data Box Edge/Data Box Gateway resource.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param parameters The resource parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataBoxEdgeDeviceInner object if successful.
     */
    public DataBoxEdgeDeviceInner update(String deviceName, String resourceGroupName, DataBoxEdgeDevicePatch parameters) {
        return updateWithServiceResponseAsync(deviceName, resourceGroupName, parameters).toBlocking().single().body();
    }

    /**
     * Modifies a Data Box Edge/Data Box Gateway resource.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param parameters The resource parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataBoxEdgeDeviceInner> updateAsync(String deviceName, String resourceGroupName, DataBoxEdgeDevicePatch parameters, final ServiceCallback<DataBoxEdgeDeviceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(deviceName, resourceGroupName, parameters), serviceCallback);
    }

    /**
     * Modifies a Data Box Edge/Data Box Gateway resource.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param parameters The resource parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataBoxEdgeDeviceInner object
     */
    public Observable<DataBoxEdgeDeviceInner> updateAsync(String deviceName, String resourceGroupName, DataBoxEdgeDevicePatch parameters) {
        return updateWithServiceResponseAsync(deviceName, resourceGroupName, parameters).map(new Func1<ServiceResponse<DataBoxEdgeDeviceInner>, DataBoxEdgeDeviceInner>() {
            @Override
            public DataBoxEdgeDeviceInner call(ServiceResponse<DataBoxEdgeDeviceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Modifies a Data Box Edge/Data Box Gateway resource.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param parameters The resource parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataBoxEdgeDeviceInner object
     */
    public Observable<ServiceResponse<DataBoxEdgeDeviceInner>> updateWithServiceResponseAsync(String deviceName, String resourceGroupName, DataBoxEdgeDevicePatch parameters) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.update(deviceName, this.client.subscriptionId(), resourceGroupName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataBoxEdgeDeviceInner>>>() {
                @Override
                public Observable<ServiceResponse<DataBoxEdgeDeviceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataBoxEdgeDeviceInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataBoxEdgeDeviceInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DataBoxEdgeDeviceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DataBoxEdgeDeviceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Downloads the updates on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void downloadUpdates(String deviceName, String resourceGroupName) {
        downloadUpdatesWithServiceResponseAsync(deviceName, resourceGroupName).toBlocking().last().body();
    }

    /**
     * Downloads the updates on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> downloadUpdatesAsync(String deviceName, String resourceGroupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(downloadUpdatesWithServiceResponseAsync(deviceName, resourceGroupName), serviceCallback);
    }

    /**
     * Downloads the updates on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> downloadUpdatesAsync(String deviceName, String resourceGroupName) {
        return downloadUpdatesWithServiceResponseAsync(deviceName, resourceGroupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Downloads the updates on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> downloadUpdatesWithServiceResponseAsync(String deviceName, String resourceGroupName) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.downloadUpdates(deviceName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Downloads the updates on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDownloadUpdates(String deviceName, String resourceGroupName) {
        beginDownloadUpdatesWithServiceResponseAsync(deviceName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Downloads the updates on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDownloadUpdatesAsync(String deviceName, String resourceGroupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDownloadUpdatesWithServiceResponseAsync(deviceName, resourceGroupName), serviceCallback);
    }

    /**
     * Downloads the updates on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDownloadUpdatesAsync(String deviceName, String resourceGroupName) {
        return beginDownloadUpdatesWithServiceResponseAsync(deviceName, resourceGroupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Downloads the updates on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDownloadUpdatesWithServiceResponseAsync(String deviceName, String resourceGroupName) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDownloadUpdates(deviceName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDownloadUpdatesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDownloadUpdatesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets additional information for the specified Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataBoxEdgeDeviceExtendedInfoInner object if successful.
     */
    public DataBoxEdgeDeviceExtendedInfoInner getExtendedInformation(String deviceName, String resourceGroupName) {
        return getExtendedInformationWithServiceResponseAsync(deviceName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Gets additional information for the specified Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DataBoxEdgeDeviceExtendedInfoInner> getExtendedInformationAsync(String deviceName, String resourceGroupName, final ServiceCallback<DataBoxEdgeDeviceExtendedInfoInner> serviceCallback) {
        return ServiceFuture.fromResponse(getExtendedInformationWithServiceResponseAsync(deviceName, resourceGroupName), serviceCallback);
    }

    /**
     * Gets additional information for the specified Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataBoxEdgeDeviceExtendedInfoInner object
     */
    public Observable<DataBoxEdgeDeviceExtendedInfoInner> getExtendedInformationAsync(String deviceName, String resourceGroupName) {
        return getExtendedInformationWithServiceResponseAsync(deviceName, resourceGroupName).map(new Func1<ServiceResponse<DataBoxEdgeDeviceExtendedInfoInner>, DataBoxEdgeDeviceExtendedInfoInner>() {
            @Override
            public DataBoxEdgeDeviceExtendedInfoInner call(ServiceResponse<DataBoxEdgeDeviceExtendedInfoInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets additional information for the specified Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataBoxEdgeDeviceExtendedInfoInner object
     */
    public Observable<ServiceResponse<DataBoxEdgeDeviceExtendedInfoInner>> getExtendedInformationWithServiceResponseAsync(String deviceName, String resourceGroupName) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getExtendedInformation(deviceName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DataBoxEdgeDeviceExtendedInfoInner>>>() {
                @Override
                public Observable<ServiceResponse<DataBoxEdgeDeviceExtendedInfoInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DataBoxEdgeDeviceExtendedInfoInner> clientResponse = getExtendedInformationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DataBoxEdgeDeviceExtendedInfoInner> getExtendedInformationDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DataBoxEdgeDeviceExtendedInfoInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DataBoxEdgeDeviceExtendedInfoInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Installs the updates on the Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void installUpdates(String deviceName, String resourceGroupName) {
        installUpdatesWithServiceResponseAsync(deviceName, resourceGroupName).toBlocking().last().body();
    }

    /**
     * Installs the updates on the Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> installUpdatesAsync(String deviceName, String resourceGroupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(installUpdatesWithServiceResponseAsync(deviceName, resourceGroupName), serviceCallback);
    }

    /**
     * Installs the updates on the Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> installUpdatesAsync(String deviceName, String resourceGroupName) {
        return installUpdatesWithServiceResponseAsync(deviceName, resourceGroupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Installs the updates on the Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> installUpdatesWithServiceResponseAsync(String deviceName, String resourceGroupName) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.installUpdates(deviceName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Installs the updates on the Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginInstallUpdates(String deviceName, String resourceGroupName) {
        beginInstallUpdatesWithServiceResponseAsync(deviceName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Installs the updates on the Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginInstallUpdatesAsync(String deviceName, String resourceGroupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginInstallUpdatesWithServiceResponseAsync(deviceName, resourceGroupName), serviceCallback);
    }

    /**
     * Installs the updates on the Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginInstallUpdatesAsync(String deviceName, String resourceGroupName) {
        return beginInstallUpdatesWithServiceResponseAsync(deviceName, resourceGroupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Installs the updates on the Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginInstallUpdatesWithServiceResponseAsync(String deviceName, String resourceGroupName) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginInstallUpdates(deviceName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginInstallUpdatesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginInstallUpdatesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the network settings of the specified Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NetworkSettingsInner object if successful.
     */
    public NetworkSettingsInner getNetworkSettings(String deviceName, String resourceGroupName) {
        return getNetworkSettingsWithServiceResponseAsync(deviceName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Gets the network settings of the specified Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NetworkSettingsInner> getNetworkSettingsAsync(String deviceName, String resourceGroupName, final ServiceCallback<NetworkSettingsInner> serviceCallback) {
        return ServiceFuture.fromResponse(getNetworkSettingsWithServiceResponseAsync(deviceName, resourceGroupName), serviceCallback);
    }

    /**
     * Gets the network settings of the specified Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NetworkSettingsInner object
     */
    public Observable<NetworkSettingsInner> getNetworkSettingsAsync(String deviceName, String resourceGroupName) {
        return getNetworkSettingsWithServiceResponseAsync(deviceName, resourceGroupName).map(new Func1<ServiceResponse<NetworkSettingsInner>, NetworkSettingsInner>() {
            @Override
            public NetworkSettingsInner call(ServiceResponse<NetworkSettingsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the network settings of the specified Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NetworkSettingsInner object
     */
    public Observable<ServiceResponse<NetworkSettingsInner>> getNetworkSettingsWithServiceResponseAsync(String deviceName, String resourceGroupName) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getNetworkSettings(deviceName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<NetworkSettingsInner>>>() {
                @Override
                public Observable<ServiceResponse<NetworkSettingsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<NetworkSettingsInner> clientResponse = getNetworkSettingsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<NetworkSettingsInner> getNetworkSettingsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<NetworkSettingsInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<NetworkSettingsInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Scans for updates on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void scanForUpdates(String deviceName, String resourceGroupName) {
        scanForUpdatesWithServiceResponseAsync(deviceName, resourceGroupName).toBlocking().last().body();
    }

    /**
     * Scans for updates on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> scanForUpdatesAsync(String deviceName, String resourceGroupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(scanForUpdatesWithServiceResponseAsync(deviceName, resourceGroupName), serviceCallback);
    }

    /**
     * Scans for updates on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> scanForUpdatesAsync(String deviceName, String resourceGroupName) {
        return scanForUpdatesWithServiceResponseAsync(deviceName, resourceGroupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Scans for updates on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> scanForUpdatesWithServiceResponseAsync(String deviceName, String resourceGroupName) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.scanForUpdates(deviceName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Scans for updates on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginScanForUpdates(String deviceName, String resourceGroupName) {
        beginScanForUpdatesWithServiceResponseAsync(deviceName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Scans for updates on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginScanForUpdatesAsync(String deviceName, String resourceGroupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginScanForUpdatesWithServiceResponseAsync(deviceName, resourceGroupName), serviceCallback);
    }

    /**
     * Scans for updates on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginScanForUpdatesAsync(String deviceName, String resourceGroupName) {
        return beginScanForUpdatesWithServiceResponseAsync(deviceName, resourceGroupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Scans for updates on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginScanForUpdatesWithServiceResponseAsync(String deviceName, String resourceGroupName) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginScanForUpdates(deviceName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginScanForUpdatesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginScanForUpdatesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates the security settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param securitySettings The security settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void createOrUpdateSecuritySettings(String deviceName, String resourceGroupName, SecuritySettings securitySettings) {
        createOrUpdateSecuritySettingsWithServiceResponseAsync(deviceName, resourceGroupName, securitySettings).toBlocking().last().body();
    }

    /**
     * Updates the security settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param securitySettings The security settings.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> createOrUpdateSecuritySettingsAsync(String deviceName, String resourceGroupName, SecuritySettings securitySettings, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateSecuritySettingsWithServiceResponseAsync(deviceName, resourceGroupName, securitySettings), serviceCallback);
    }

    /**
     * Updates the security settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param securitySettings The security settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> createOrUpdateSecuritySettingsAsync(String deviceName, String resourceGroupName, SecuritySettings securitySettings) {
        return createOrUpdateSecuritySettingsWithServiceResponseAsync(deviceName, resourceGroupName, securitySettings).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the security settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param securitySettings The security settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> createOrUpdateSecuritySettingsWithServiceResponseAsync(String deviceName, String resourceGroupName, SecuritySettings securitySettings) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (securitySettings == null) {
            throw new IllegalArgumentException("Parameter securitySettings is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(securitySettings);
        Observable<Response<ResponseBody>> observable = service.createOrUpdateSecuritySettings(deviceName, this.client.subscriptionId(), resourceGroupName, securitySettings, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Updates the security settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param securitySettings The security settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginCreateOrUpdateSecuritySettings(String deviceName, String resourceGroupName, SecuritySettings securitySettings) {
        beginCreateOrUpdateSecuritySettingsWithServiceResponseAsync(deviceName, resourceGroupName, securitySettings).toBlocking().single().body();
    }

    /**
     * Updates the security settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param securitySettings The security settings.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginCreateOrUpdateSecuritySettingsAsync(String deviceName, String resourceGroupName, SecuritySettings securitySettings, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateSecuritySettingsWithServiceResponseAsync(deviceName, resourceGroupName, securitySettings), serviceCallback);
    }

    /**
     * Updates the security settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param securitySettings The security settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginCreateOrUpdateSecuritySettingsAsync(String deviceName, String resourceGroupName, SecuritySettings securitySettings) {
        return beginCreateOrUpdateSecuritySettingsWithServiceResponseAsync(deviceName, resourceGroupName, securitySettings).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the security settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param securitySettings The security settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginCreateOrUpdateSecuritySettingsWithServiceResponseAsync(String deviceName, String resourceGroupName, SecuritySettings securitySettings) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (securitySettings == null) {
            throw new IllegalArgumentException("Parameter securitySettings is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(securitySettings);
        return service.beginCreateOrUpdateSecuritySettings(deviceName, this.client.subscriptionId(), resourceGroupName, securitySettings, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginCreateOrUpdateSecuritySettingsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginCreateOrUpdateSecuritySettingsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets information about the availability of updates based on the last scan of the device. It also gets information about any ongoing download or install jobs on the device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UpdateSummaryInner object if successful.
     */
    public UpdateSummaryInner getUpdateSummary(String deviceName, String resourceGroupName) {
        return getUpdateSummaryWithServiceResponseAsync(deviceName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Gets information about the availability of updates based on the last scan of the device. It also gets information about any ongoing download or install jobs on the device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UpdateSummaryInner> getUpdateSummaryAsync(String deviceName, String resourceGroupName, final ServiceCallback<UpdateSummaryInner> serviceCallback) {
        return ServiceFuture.fromResponse(getUpdateSummaryWithServiceResponseAsync(deviceName, resourceGroupName), serviceCallback);
    }

    /**
     * Gets information about the availability of updates based on the last scan of the device. It also gets information about any ongoing download or install jobs on the device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UpdateSummaryInner object
     */
    public Observable<UpdateSummaryInner> getUpdateSummaryAsync(String deviceName, String resourceGroupName) {
        return getUpdateSummaryWithServiceResponseAsync(deviceName, resourceGroupName).map(new Func1<ServiceResponse<UpdateSummaryInner>, UpdateSummaryInner>() {
            @Override
            public UpdateSummaryInner call(ServiceResponse<UpdateSummaryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about the availability of updates based on the last scan of the device. It also gets information about any ongoing download or install jobs on the device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UpdateSummaryInner object
     */
    public Observable<ServiceResponse<UpdateSummaryInner>> getUpdateSummaryWithServiceResponseAsync(String deviceName, String resourceGroupName) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getUpdateSummary(deviceName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UpdateSummaryInner>>>() {
                @Override
                public Observable<ServiceResponse<UpdateSummaryInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UpdateSummaryInner> clientResponse = getUpdateSummaryDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UpdateSummaryInner> getUpdateSummaryDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<UpdateSummaryInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<UpdateSummaryInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Uploads registration certificate for the device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param parameters The upload certificate request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UploadCertificateResponseInner object if successful.
     */
    public UploadCertificateResponseInner uploadCertificate(String deviceName, String resourceGroupName, UploadCertificateRequest parameters) {
        return uploadCertificateWithServiceResponseAsync(deviceName, resourceGroupName, parameters).toBlocking().single().body();
    }

    /**
     * Uploads registration certificate for the device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param parameters The upload certificate request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<UploadCertificateResponseInner> uploadCertificateAsync(String deviceName, String resourceGroupName, UploadCertificateRequest parameters, final ServiceCallback<UploadCertificateResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(uploadCertificateWithServiceResponseAsync(deviceName, resourceGroupName, parameters), serviceCallback);
    }

    /**
     * Uploads registration certificate for the device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param parameters The upload certificate request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UploadCertificateResponseInner object
     */
    public Observable<UploadCertificateResponseInner> uploadCertificateAsync(String deviceName, String resourceGroupName, UploadCertificateRequest parameters) {
        return uploadCertificateWithServiceResponseAsync(deviceName, resourceGroupName, parameters).map(new Func1<ServiceResponse<UploadCertificateResponseInner>, UploadCertificateResponseInner>() {
            @Override
            public UploadCertificateResponseInner call(ServiceResponse<UploadCertificateResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Uploads registration certificate for the device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param parameters The upload certificate request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UploadCertificateResponseInner object
     */
    public Observable<ServiceResponse<UploadCertificateResponseInner>> uploadCertificateWithServiceResponseAsync(String deviceName, String resourceGroupName, UploadCertificateRequest parameters) {
        if (deviceName == null) {
            throw new IllegalArgumentException("Parameter deviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.uploadCertificate(deviceName, this.client.subscriptionId(), resourceGroupName, parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<UploadCertificateResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<UploadCertificateResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<UploadCertificateResponseInner> clientResponse = uploadCertificateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<UploadCertificateResponseInner> uploadCertificateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<UploadCertificateResponseInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<UploadCertificateResponseInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DataBoxEdgeDeviceInner&gt; object if successful.
     */
    public PagedList<DataBoxEdgeDeviceInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<DataBoxEdgeDeviceInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<DataBoxEdgeDeviceInner>(response.body()) {
            @Override
            public Page<DataBoxEdgeDeviceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DataBoxEdgeDeviceInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<DataBoxEdgeDeviceInner>> serviceFuture, final ListOperationCallback<DataBoxEdgeDeviceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataBoxEdgeDeviceInner&gt; object
     */
    public Observable<Page<DataBoxEdgeDeviceInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<DataBoxEdgeDeviceInner>>, Page<DataBoxEdgeDeviceInner>>() {
                @Override
                public Page<DataBoxEdgeDeviceInner> call(ServiceResponse<Page<DataBoxEdgeDeviceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataBoxEdgeDeviceInner&gt; object
     */
    public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<DataBoxEdgeDeviceInner>>, Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> call(ServiceResponse<Page<DataBoxEdgeDeviceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a subscription.
     *
    ServiceResponse<PageImpl<DataBoxEdgeDeviceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DataBoxEdgeDeviceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DataBoxEdgeDeviceInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DataBoxEdgeDeviceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DataBoxEdgeDeviceInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DataBoxEdgeDeviceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DataBoxEdgeDeviceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DataBoxEdgeDeviceInner&gt; object if successful.
     */
    public PagedList<DataBoxEdgeDeviceInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<DataBoxEdgeDeviceInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<DataBoxEdgeDeviceInner>(response.body()) {
            @Override
            public Page<DataBoxEdgeDeviceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DataBoxEdgeDeviceInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<DataBoxEdgeDeviceInner>> serviceFuture, final ListOperationCallback<DataBoxEdgeDeviceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataBoxEdgeDeviceInner&gt; object
     */
    public Observable<Page<DataBoxEdgeDeviceInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<DataBoxEdgeDeviceInner>>, Page<DataBoxEdgeDeviceInner>>() {
                @Override
                public Page<DataBoxEdgeDeviceInner> call(ServiceResponse<Page<DataBoxEdgeDeviceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DataBoxEdgeDeviceInner&gt; object
     */
    public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<DataBoxEdgeDeviceInner>>, Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> call(ServiceResponse<Page<DataBoxEdgeDeviceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a resource group.
     *
    ServiceResponse<PageImpl<DataBoxEdgeDeviceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DataBoxEdgeDeviceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DataBoxEdgeDeviceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DataBoxEdgeDeviceInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DataBoxEdgeDeviceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DataBoxEdgeDeviceInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DataBoxEdgeDeviceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DataBoxEdgeDeviceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
