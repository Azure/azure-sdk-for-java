/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.databoxedge.v2020_05_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.databoxedge.v2020_05_01_preview.implementation.UserInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.databoxedge.v2020_05_01_preview.implementation.DataBoxEdgeManager;
import java.util.List;

/**
 * Type representing User.
 */
public interface User extends HasInner<UserInner>, Indexable, Refreshable<User>, Updatable<User.Update>, HasManager<DataBoxEdgeManager> {
    /**
     * @return the encryptedPassword value.
     */
    AsymmetricEncryptedSecret encryptedPassword();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the shareAccessRights value.
     */
    List<ShareAccessRight> shareAccessRights();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the userType value.
     */
    UserType userType();

    /**
     * The entirety of the User definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithDataBoxEdgeDevice, DefinitionStages.WithUserType, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of User definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a User definition.
         */
        interface Blank extends WithDataBoxEdgeDevice {
        }

        /**
         * The stage of the user definition allowing to specify DataBoxEdgeDevice.
         */
        interface WithDataBoxEdgeDevice {
           /**
            * Specifies deviceName, resourceGroupName.
            * @param deviceName The device name
            * @param resourceGroupName The resource group name
            * @return the next definition stage
            */
            WithUserType withExistingDataBoxEdgeDevice(String deviceName, String resourceGroupName);
        }

        /**
         * The stage of the user definition allowing to specify UserType.
         */
        interface WithUserType {
           /**
            * Specifies userType.
            * @param userType Type of the user. Possible values include: 'Share', 'LocalManagement', 'ARM'
            * @return the next definition stage
            */
            WithCreate withUserType(UserType userType);
        }

        /**
         * The stage of the user definition allowing to specify EncryptedPassword.
         */
        interface WithEncryptedPassword {
            /**
             * Specifies encryptedPassword.
             * @param encryptedPassword The password details
             * @return the next definition stage
             */
            WithCreate withEncryptedPassword(AsymmetricEncryptedSecret encryptedPassword);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<User>, DefinitionStages.WithEncryptedPassword {
        }
    }
    /**
     * The template for a User update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<User>, UpdateStages.WithEncryptedPassword {
    }

    /**
     * Grouping of User update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the user update allowing to specify EncryptedPassword.
         */
        interface WithEncryptedPassword {
            /**
             * Specifies encryptedPassword.
             * @param encryptedPassword The password details
             * @return the next update stage
             */
            Update withEncryptedPassword(AsymmetricEncryptedSecret encryptedPassword);
        }

    }
}
