/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.databoxedge.v2019_08_01.implementation;

import org.joda.time.DateTime;
import com.microsoft.azure.management.databoxedge.v2019_08_01.InstallRebootBehavior;
import com.microsoft.azure.management.databoxedge.v2019_08_01.UpdateOperation;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.management.databoxedge.v2019_08_01.ARMBaseModel;

/**
 * Details about ongoing updates and availability of updates on the device.
 */
@JsonFlatten
public class UpdateSummaryInner extends ARMBaseModel {
    /**
     * The current version of the device in format: 1.2.17312.13.",.
     */
    @JsonProperty(value = "properties.deviceVersionNumber")
    private String deviceVersionNumber;

    /**
     * The current version of the device in text format.
     */
    @JsonProperty(value = "properties.friendlyDeviceVersionName")
    private String friendlyDeviceVersionName;

    /**
     * The last time when a scan was done on the device.
     */
    @JsonProperty(value = "properties.deviceLastScannedDateTime")
    private DateTime deviceLastScannedDateTime;

    /**
     * The time when the last scan job was completed (success/cancelled/failed)
     * on the appliance.
     */
    @JsonProperty(value = "properties.lastCompletedScanJobDateTime")
    private DateTime lastCompletedScanJobDateTime;

    /**
     * The time when the last Download job was completed
     * (success/cancelled/failed) on the appliance.
     */
    @JsonProperty(value = "properties.lastCompletedDownloadJobDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime lastCompletedDownloadJobDateTime;

    /**
     * The time when the last Install job was completed
     * (success/cancelled/failed) on the appliance.
     */
    @JsonProperty(value = "properties.lastCompletedInstallJobDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime lastCompletedInstallJobDateTime;

    /**
     * The number of updates available for the current device version as per
     * the last device scan.
     */
    @JsonProperty(value = "properties.totalNumberOfUpdatesAvailable", access = JsonProperty.Access.WRITE_ONLY)
    private Integer totalNumberOfUpdatesAvailable;

    /**
     * The total number of items pending download.
     */
    @JsonProperty(value = "properties.totalNumberOfUpdatesPendingDownload", access = JsonProperty.Access.WRITE_ONLY)
    private Integer totalNumberOfUpdatesPendingDownload;

    /**
     * The total number of items pending install.
     */
    @JsonProperty(value = "properties.totalNumberOfUpdatesPendingInstall", access = JsonProperty.Access.WRITE_ONLY)
    private Integer totalNumberOfUpdatesPendingInstall;

    /**
     * Indicates if updates are available and at least one of the updates needs
     * a reboot. Possible values include: 'NeverReboots', 'RequiresReboot',
     * 'RequestReboot'.
     */
    @JsonProperty(value = "properties.rebootBehavior", access = JsonProperty.Access.WRITE_ONLY)
    private InstallRebootBehavior rebootBehavior;

    /**
     * The current update operation. Possible values include: 'None', 'Scan',
     * 'Download', 'Install'.
     */
    @JsonProperty(value = "properties.ongoingUpdateOperation", access = JsonProperty.Access.WRITE_ONLY)
    private UpdateOperation ongoingUpdateOperation;

    /**
     * The job ID of the download job in progress.
     */
    @JsonProperty(value = "properties.inProgressDownloadJobId", access = JsonProperty.Access.WRITE_ONLY)
    private String inProgressDownloadJobId;

    /**
     * The job ID of the install job in progress.
     */
    @JsonProperty(value = "properties.inProgressInstallJobId", access = JsonProperty.Access.WRITE_ONLY)
    private String inProgressInstallJobId;

    /**
     * The time when the currently running download (if any) started.
     */
    @JsonProperty(value = "properties.inProgressDownloadJobStartedDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime inProgressDownloadJobStartedDateTime;

    /**
     * The time when the currently running install (if any) started.
     */
    @JsonProperty(value = "properties.inProgressInstallJobStartedDateTime", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime inProgressInstallJobStartedDateTime;

    /**
     * The list of updates available for install.
     */
    @JsonProperty(value = "properties.updateTitles", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> updateTitles;

    /**
     * The total size of updates available for download in bytes.
     */
    @JsonProperty(value = "properties.totalUpdateSizeInBytes", access = JsonProperty.Access.WRITE_ONLY)
    private Double totalUpdateSizeInBytes;

    /**
     * Get the current version of the device in format: 1.2.17312.13.",.
     *
     * @return the deviceVersionNumber value
     */
    public String deviceVersionNumber() {
        return this.deviceVersionNumber;
    }

    /**
     * Set the current version of the device in format: 1.2.17312.13.",.
     *
     * @param deviceVersionNumber the deviceVersionNumber value to set
     * @return the UpdateSummaryInner object itself.
     */
    public UpdateSummaryInner withDeviceVersionNumber(String deviceVersionNumber) {
        this.deviceVersionNumber = deviceVersionNumber;
        return this;
    }

    /**
     * Get the current version of the device in text format.
     *
     * @return the friendlyDeviceVersionName value
     */
    public String friendlyDeviceVersionName() {
        return this.friendlyDeviceVersionName;
    }

    /**
     * Set the current version of the device in text format.
     *
     * @param friendlyDeviceVersionName the friendlyDeviceVersionName value to set
     * @return the UpdateSummaryInner object itself.
     */
    public UpdateSummaryInner withFriendlyDeviceVersionName(String friendlyDeviceVersionName) {
        this.friendlyDeviceVersionName = friendlyDeviceVersionName;
        return this;
    }

    /**
     * Get the last time when a scan was done on the device.
     *
     * @return the deviceLastScannedDateTime value
     */
    public DateTime deviceLastScannedDateTime() {
        return this.deviceLastScannedDateTime;
    }

    /**
     * Set the last time when a scan was done on the device.
     *
     * @param deviceLastScannedDateTime the deviceLastScannedDateTime value to set
     * @return the UpdateSummaryInner object itself.
     */
    public UpdateSummaryInner withDeviceLastScannedDateTime(DateTime deviceLastScannedDateTime) {
        this.deviceLastScannedDateTime = deviceLastScannedDateTime;
        return this;
    }

    /**
     * Get the time when the last scan job was completed (success/cancelled/failed) on the appliance.
     *
     * @return the lastCompletedScanJobDateTime value
     */
    public DateTime lastCompletedScanJobDateTime() {
        return this.lastCompletedScanJobDateTime;
    }

    /**
     * Set the time when the last scan job was completed (success/cancelled/failed) on the appliance.
     *
     * @param lastCompletedScanJobDateTime the lastCompletedScanJobDateTime value to set
     * @return the UpdateSummaryInner object itself.
     */
    public UpdateSummaryInner withLastCompletedScanJobDateTime(DateTime lastCompletedScanJobDateTime) {
        this.lastCompletedScanJobDateTime = lastCompletedScanJobDateTime;
        return this;
    }

    /**
     * Get the time when the last Download job was completed (success/cancelled/failed) on the appliance.
     *
     * @return the lastCompletedDownloadJobDateTime value
     */
    public DateTime lastCompletedDownloadJobDateTime() {
        return this.lastCompletedDownloadJobDateTime;
    }

    /**
     * Get the time when the last Install job was completed (success/cancelled/failed) on the appliance.
     *
     * @return the lastCompletedInstallJobDateTime value
     */
    public DateTime lastCompletedInstallJobDateTime() {
        return this.lastCompletedInstallJobDateTime;
    }

    /**
     * Get the number of updates available for the current device version as per the last device scan.
     *
     * @return the totalNumberOfUpdatesAvailable value
     */
    public Integer totalNumberOfUpdatesAvailable() {
        return this.totalNumberOfUpdatesAvailable;
    }

    /**
     * Get the total number of items pending download.
     *
     * @return the totalNumberOfUpdatesPendingDownload value
     */
    public Integer totalNumberOfUpdatesPendingDownload() {
        return this.totalNumberOfUpdatesPendingDownload;
    }

    /**
     * Get the total number of items pending install.
     *
     * @return the totalNumberOfUpdatesPendingInstall value
     */
    public Integer totalNumberOfUpdatesPendingInstall() {
        return this.totalNumberOfUpdatesPendingInstall;
    }

    /**
     * Get indicates if updates are available and at least one of the updates needs a reboot. Possible values include: 'NeverReboots', 'RequiresReboot', 'RequestReboot'.
     *
     * @return the rebootBehavior value
     */
    public InstallRebootBehavior rebootBehavior() {
        return this.rebootBehavior;
    }

    /**
     * Get the current update operation. Possible values include: 'None', 'Scan', 'Download', 'Install'.
     *
     * @return the ongoingUpdateOperation value
     */
    public UpdateOperation ongoingUpdateOperation() {
        return this.ongoingUpdateOperation;
    }

    /**
     * Get the job ID of the download job in progress.
     *
     * @return the inProgressDownloadJobId value
     */
    public String inProgressDownloadJobId() {
        return this.inProgressDownloadJobId;
    }

    /**
     * Get the job ID of the install job in progress.
     *
     * @return the inProgressInstallJobId value
     */
    public String inProgressInstallJobId() {
        return this.inProgressInstallJobId;
    }

    /**
     * Get the time when the currently running download (if any) started.
     *
     * @return the inProgressDownloadJobStartedDateTime value
     */
    public DateTime inProgressDownloadJobStartedDateTime() {
        return this.inProgressDownloadJobStartedDateTime;
    }

    /**
     * Get the time when the currently running install (if any) started.
     *
     * @return the inProgressInstallJobStartedDateTime value
     */
    public DateTime inProgressInstallJobStartedDateTime() {
        return this.inProgressInstallJobStartedDateTime;
    }

    /**
     * Get the list of updates available for install.
     *
     * @return the updateTitles value
     */
    public List<String> updateTitles() {
        return this.updateTitles;
    }

    /**
     * Get the total size of updates available for download in bytes.
     *
     * @return the totalUpdateSizeInBytes value
     */
    public Double totalUpdateSizeInBytes() {
        return this.totalUpdateSizeInBytes;
    }

}
