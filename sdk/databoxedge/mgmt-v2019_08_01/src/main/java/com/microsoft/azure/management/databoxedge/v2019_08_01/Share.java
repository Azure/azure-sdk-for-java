/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.databoxedge.v2019_08_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.databoxedge.v2019_08_01.implementation.ShareInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.databoxedge.v2019_08_01.implementation.DataBoxEdgeManager;
import java.util.List;

/**
 * Type representing Share.
 */
public interface Share extends HasInner<ShareInner>, Indexable, Refreshable<Share>, Updatable<Share.Update>, HasManager<DataBoxEdgeManager> {
    /**
     * @return the accessProtocol value.
     */
    ShareAccessProtocol accessProtocol();

    /**
     * @return the azureContainerInfo value.
     */
    AzureContainerInfo azureContainerInfo();

    /**
     * @return the clientAccessRights value.
     */
    List<ClientAccessRight> clientAccessRights();

    /**
     * @return the dataPolicy value.
     */
    DataPolicy dataPolicy();

    /**
     * @return the description value.
     */
    String description();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the monitoringStatus value.
     */
    MonitoringStatus monitoringStatus();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the refreshDetails value.
     */
    RefreshDetails refreshDetails();

    /**
     * @return the shareMappings value.
     */
    List<MountPointMap> shareMappings();

    /**
     * @return the shareStatus value.
     */
    ShareStatus shareStatus();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the userAccessRights value.
     */
    List<UserAccessRight> userAccessRights();

    /**
     * The entirety of the Share definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithDataBoxEdgeDevice, DefinitionStages.WithAccessProtocol, DefinitionStages.WithMonitoringStatus, DefinitionStages.WithShareStatus, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of Share definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a Share definition.
         */
        interface Blank extends WithDataBoxEdgeDevice {
        }

        /**
         * The stage of the share definition allowing to specify DataBoxEdgeDevice.
         */
        interface WithDataBoxEdgeDevice {
           /**
            * Specifies deviceName, resourceGroupName.
            * @param deviceName The device name
            * @param resourceGroupName The resource group name
            * @return the next definition stage
            */
            WithAccessProtocol withExistingDataBoxEdgeDevice(String deviceName, String resourceGroupName);
        }

        /**
         * The stage of the share definition allowing to specify AccessProtocol.
         */
        interface WithAccessProtocol {
           /**
            * Specifies accessProtocol.
            * @param accessProtocol Access protocol to be used by the share. Possible values include: 'SMB', 'NFS'
            * @return the next definition stage
            */
            WithMonitoringStatus withAccessProtocol(ShareAccessProtocol accessProtocol);
        }

        /**
         * The stage of the share definition allowing to specify MonitoringStatus.
         */
        interface WithMonitoringStatus {
           /**
            * Specifies monitoringStatus.
            * @param monitoringStatus Current monitoring status of the share. Possible values include: 'Enabled', 'Disabled'
            * @return the next definition stage
            */
            WithShareStatus withMonitoringStatus(MonitoringStatus monitoringStatus);
        }

        /**
         * The stage of the share definition allowing to specify ShareStatus.
         */
        interface WithShareStatus {
           /**
            * Specifies shareStatus.
            * @param shareStatus Current status of the share. Possible values include: 'Offline', 'Unknown', 'OK', 'Updating', 'NeedsAttention'
            * @return the next definition stage
            */
            WithCreate withShareStatus(ShareStatus shareStatus);
        }

        /**
         * The stage of the share definition allowing to specify AzureContainerInfo.
         */
        interface WithAzureContainerInfo {
            /**
             * Specifies azureContainerInfo.
             * @param azureContainerInfo Azure container mapping for the share
             * @return the next definition stage
             */
            WithCreate withAzureContainerInfo(AzureContainerInfo azureContainerInfo);
        }

        /**
         * The stage of the share definition allowing to specify ClientAccessRights.
         */
        interface WithClientAccessRights {
            /**
             * Specifies clientAccessRights.
             * @param clientAccessRights List of IP addresses and corresponding access rights on the share(required for NFS protocol)
             * @return the next definition stage
             */
            WithCreate withClientAccessRights(List<ClientAccessRight> clientAccessRights);
        }

        /**
         * The stage of the share definition allowing to specify DataPolicy.
         */
        interface WithDataPolicy {
            /**
             * Specifies dataPolicy.
             * @param dataPolicy Data policy of the share. Possible values include: 'Cloud', 'Local'
             * @return the next definition stage
             */
            WithCreate withDataPolicy(DataPolicy dataPolicy);
        }

        /**
         * The stage of the share definition allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             * @param description Description for the share
             * @return the next definition stage
             */
            WithCreate withDescription(String description);
        }

        /**
         * The stage of the share definition allowing to specify RefreshDetails.
         */
        interface WithRefreshDetails {
            /**
             * Specifies refreshDetails.
             * @param refreshDetails Details of the refresh job on this share
             * @return the next definition stage
             */
            WithCreate withRefreshDetails(RefreshDetails refreshDetails);
        }

        /**
         * The stage of the share definition allowing to specify UserAccessRights.
         */
        interface WithUserAccessRights {
            /**
             * Specifies userAccessRights.
             * @param userAccessRights Mapping of users and corresponding access rights on the share (required for SMB protocol)
             * @return the next definition stage
             */
            WithCreate withUserAccessRights(List<UserAccessRight> userAccessRights);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<Share>, DefinitionStages.WithAzureContainerInfo, DefinitionStages.WithClientAccessRights, DefinitionStages.WithDataPolicy, DefinitionStages.WithDescription, DefinitionStages.WithRefreshDetails, DefinitionStages.WithUserAccessRights {
        }
    }
    /**
     * The template for a Share update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<Share>, UpdateStages.WithAzureContainerInfo, UpdateStages.WithClientAccessRights, UpdateStages.WithDataPolicy, UpdateStages.WithDescription, UpdateStages.WithRefreshDetails, UpdateStages.WithUserAccessRights {
    }

    /**
     * Grouping of Share update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the share update allowing to specify AzureContainerInfo.
         */
        interface WithAzureContainerInfo {
            /**
             * Specifies azureContainerInfo.
             * @param azureContainerInfo Azure container mapping for the share
             * @return the next update stage
             */
            Update withAzureContainerInfo(AzureContainerInfo azureContainerInfo);
        }

        /**
         * The stage of the share update allowing to specify ClientAccessRights.
         */
        interface WithClientAccessRights {
            /**
             * Specifies clientAccessRights.
             * @param clientAccessRights List of IP addresses and corresponding access rights on the share(required for NFS protocol)
             * @return the next update stage
             */
            Update withClientAccessRights(List<ClientAccessRight> clientAccessRights);
        }

        /**
         * The stage of the share update allowing to specify DataPolicy.
         */
        interface WithDataPolicy {
            /**
             * Specifies dataPolicy.
             * @param dataPolicy Data policy of the share. Possible values include: 'Cloud', 'Local'
             * @return the next update stage
             */
            Update withDataPolicy(DataPolicy dataPolicy);
        }

        /**
         * The stage of the share update allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             * @param description Description for the share
             * @return the next update stage
             */
            Update withDescription(String description);
        }

        /**
         * The stage of the share update allowing to specify RefreshDetails.
         */
        interface WithRefreshDetails {
            /**
             * Specifies refreshDetails.
             * @param refreshDetails Details of the refresh job on this share
             * @return the next update stage
             */
            Update withRefreshDetails(RefreshDetails refreshDetails);
        }

        /**
         * The stage of the share update allowing to specify UserAccessRights.
         */
        interface WithUserAccessRights {
            /**
             * Specifies userAccessRights.
             * @param userAccessRights Mapping of users and corresponding access rights on the share (required for SMB protocol)
             * @return the next update stage
             */
            Update withUserAccessRights(List<UserAccessRight> userAccessRights);
        }

    }
}
