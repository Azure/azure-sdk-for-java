/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.databoxedge.v2019_08_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.databoxedge.v2019_08_01.Triggers;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.databoxedge.v2019_08_01.Trigger;

class TriggersImpl extends WrapperImpl<TriggersInner> implements Triggers {
    private final DataBoxEdgeManager manager;

    TriggersImpl(DataBoxEdgeManager manager) {
        super(manager.inner().triggers());
        this.manager = manager;
    }

    public DataBoxEdgeManager manager() {
        return this.manager;
    }

    @Override
    public TriggerImpl define(String name) {
        return wrapModel(name);
    }

    private TriggerImpl wrapModel(TriggerInner inner) {
        return  new TriggerImpl(inner, manager());
    }

    private TriggerImpl wrapModel(String name) {
        return new TriggerImpl(name, this.manager());
    }

    @Override
    public Observable<Trigger> listByDataBoxEdgeDeviceAsync(final String deviceName, final String resourceGroupName) {
        TriggersInner client = this.inner();
        return client.listByDataBoxEdgeDeviceAsync(deviceName, resourceGroupName)
        .flatMapIterable(new Func1<Page<TriggerInner>, Iterable<TriggerInner>>() {
            @Override
            public Iterable<TriggerInner> call(Page<TriggerInner> page) {
                return page.items();
            }
        })
        .map(new Func1<TriggerInner, Trigger>() {
            @Override
            public Trigger call(TriggerInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<Trigger> getAsync(String deviceName, String name, String resourceGroupName) {
        TriggersInner client = this.inner();
        return client.getAsync(deviceName, name, resourceGroupName)
        .flatMap(new Func1<TriggerInner, Observable<Trigger>>() {
            @Override
            public Observable<Trigger> call(TriggerInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((Trigger)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String deviceName, String name, String resourceGroupName) {
        TriggersInner client = this.inner();
        return client.deleteAsync(deviceName, name, resourceGroupName).toCompletable();
    }

}
