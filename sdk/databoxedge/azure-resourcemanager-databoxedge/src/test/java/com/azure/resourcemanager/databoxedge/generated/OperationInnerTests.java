// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databoxedge.fluent.models.OperationInner;
import com.azure.resourcemanager.databoxedge.models.MetricAggregationType;
import com.azure.resourcemanager.databoxedge.models.MetricCategory;
import com.azure.resourcemanager.databoxedge.models.MetricDimensionV1;
import com.azure.resourcemanager.databoxedge.models.MetricSpecificationV1;
import com.azure.resourcemanager.databoxedge.models.MetricUnit;
import com.azure.resourcemanager.databoxedge.models.OperationDisplay;
import com.azure.resourcemanager.databoxedge.models.ServiceSpecification;
import com.azure.resourcemanager.databoxedge.models.TimeGrain;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class OperationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OperationInner model = BinaryData.fromString(
            "{\"name\":\"flusarhmof\",\"display\":{\"provider\":\"smy\",\"resource\":\"kdtmlxhekuk\",\"operation\":\"txukcdmp\",\"description\":\"cryuan\"},\"origin\":\"uxzdxtay\",\"properties\":{\"serviceSpecification\":{\"metricSpecifications\":[{\"name\":\"fp\",\"displayName\":\"qobmtukk\",\"displayDescription\":\"yrtih\",\"unit\":\"CountPerSecond\",\"aggregationType\":\"NotSpecified\",\"dimensions\":[{},{},{},{}],\"fillGapWithZero\":false,\"category\":\"Capacity\",\"resourceIdDimensionNameOverride\":\"zsymglzufcyzkohd\",\"supportedTimeGrainTypes\":[\"PT12H\",\"PT15M\",\"PT1H\",\"PT15M\"],\"supportedAggregationTypes\":[\"Count\",\"None\",\"None\",\"NotSpecified\"]},{\"name\":\"a\",\"displayName\":\"th\",\"displayDescription\":\"hab\",\"unit\":\"CountPerSecond\",\"aggregationType\":\"Minimum\",\"dimensions\":[{},{}],\"fillGapWithZero\":false,\"category\":\"Capacity\",\"resourceIdDimensionNameOverride\":\"cnpqxuhivyqniwby\",\"supportedTimeGrainTypes\":[\"PT5M\"],\"supportedAggregationTypes\":[\"NotSpecified\",\"Minimum\",\"None\"]},{\"name\":\"rtfw\",\"displayName\":\"k\",\"displayDescription\":\"audccsnhs\",\"unit\":\"BytesPerSecond\",\"aggregationType\":\"Maximum\",\"dimensions\":[{},{}],\"fillGapWithZero\":true,\"category\":\"Transaction\",\"resourceIdDimensionNameOverride\":\"napczwlokjy\",\"supportedTimeGrainTypes\":[\"PT1H\",\"PT30M\",\"PT1M\"],\"supportedAggregationTypes\":[\"Total\",\"Maximum\",\"Total\"]}]}}}")
            .toObject(OperationInner.class);
        Assertions.assertEquals("flusarhmof", model.name());
        Assertions.assertEquals("smy", model.display().provider());
        Assertions.assertEquals("kdtmlxhekuk", model.display().resource());
        Assertions.assertEquals("txukcdmp", model.display().operation());
        Assertions.assertEquals("cryuan", model.display().description());
        Assertions.assertEquals("uxzdxtay", model.origin());
        Assertions.assertEquals("fp", model.serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("qobmtukk", model.serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("yrtih",
            model.serviceSpecification().metricSpecifications().get(0).displayDescription());
        Assertions.assertEquals(MetricUnit.COUNT_PER_SECOND,
            model.serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals(MetricAggregationType.NOT_SPECIFIED,
            model.serviceSpecification().metricSpecifications().get(0).aggregationType());
        Assertions.assertEquals(false, model.serviceSpecification().metricSpecifications().get(0).fillGapWithZero());
        Assertions.assertEquals(MetricCategory.CAPACITY,
            model.serviceSpecification().metricSpecifications().get(0).category());
        Assertions.assertEquals("zsymglzufcyzkohd",
            model.serviceSpecification().metricSpecifications().get(0).resourceIdDimensionNameOverride());
        Assertions.assertEquals(TimeGrain.PT12H,
            model.serviceSpecification().metricSpecifications().get(0).supportedTimeGrainTypes().get(0));
        Assertions.assertEquals(MetricAggregationType.COUNT,
            model.serviceSpecification().metricSpecifications().get(0).supportedAggregationTypes().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OperationInner model = new OperationInner().withName("flusarhmof")
            .withDisplay(new OperationDisplay().withProvider("smy")
                .withResource("kdtmlxhekuk")
                .withOperation("txukcdmp")
                .withDescription("cryuan"))
            .withOrigin("uxzdxtay")
            .withServiceSpecification(new ServiceSpecification().withMetricSpecifications(Arrays.asList(
                new MetricSpecificationV1().withName("fp")
                    .withDisplayName("qobmtukk")
                    .withDisplayDescription("yrtih")
                    .withUnit(MetricUnit.COUNT_PER_SECOND)
                    .withAggregationType(MetricAggregationType.NOT_SPECIFIED)
                    .withDimensions(Arrays.asList(new MetricDimensionV1(), new MetricDimensionV1(),
                        new MetricDimensionV1(), new MetricDimensionV1()))
                    .withFillGapWithZero(false)
                    .withCategory(MetricCategory.CAPACITY)
                    .withResourceIdDimensionNameOverride("zsymglzufcyzkohd")
                    .withSupportedTimeGrainTypes(
                        Arrays.asList(TimeGrain.PT12H, TimeGrain.PT15M, TimeGrain.PT1H, TimeGrain.PT15M))
                    .withSupportedAggregationTypes(Arrays.asList(MetricAggregationType.COUNT,
                        MetricAggregationType.NONE, MetricAggregationType.NONE, MetricAggregationType.NOT_SPECIFIED)),
                new MetricSpecificationV1().withName("a")
                    .withDisplayName("th")
                    .withDisplayDescription("hab")
                    .withUnit(MetricUnit.COUNT_PER_SECOND)
                    .withAggregationType(MetricAggregationType.MINIMUM)
                    .withDimensions(Arrays.asList(new MetricDimensionV1(), new MetricDimensionV1()))
                    .withFillGapWithZero(false)
                    .withCategory(MetricCategory.CAPACITY)
                    .withResourceIdDimensionNameOverride("cnpqxuhivyqniwby")
                    .withSupportedTimeGrainTypes(Arrays.asList(TimeGrain.PT5M))
                    .withSupportedAggregationTypes(Arrays.asList(MetricAggregationType.NOT_SPECIFIED,
                        MetricAggregationType.MINIMUM, MetricAggregationType.NONE)),
                new MetricSpecificationV1().withName("rtfw")
                    .withDisplayName("k")
                    .withDisplayDescription("audccsnhs")
                    .withUnit(MetricUnit.BYTES_PER_SECOND)
                    .withAggregationType(MetricAggregationType.MAXIMUM)
                    .withDimensions(Arrays.asList(new MetricDimensionV1(), new MetricDimensionV1()))
                    .withFillGapWithZero(true)
                    .withCategory(MetricCategory.TRANSACTION)
                    .withResourceIdDimensionNameOverride("napczwlokjy")
                    .withSupportedTimeGrainTypes(Arrays.asList(TimeGrain.PT1H, TimeGrain.PT30M, TimeGrain.PT1M))
                    .withSupportedAggregationTypes(Arrays.asList(MetricAggregationType.TOTAL,
                        MetricAggregationType.MAXIMUM, MetricAggregationType.TOTAL)))));
        model = BinaryData.fromObject(model).toObject(OperationInner.class);
        Assertions.assertEquals("flusarhmof", model.name());
        Assertions.assertEquals("smy", model.display().provider());
        Assertions.assertEquals("kdtmlxhekuk", model.display().resource());
        Assertions.assertEquals("txukcdmp", model.display().operation());
        Assertions.assertEquals("cryuan", model.display().description());
        Assertions.assertEquals("uxzdxtay", model.origin());
        Assertions.assertEquals("fp", model.serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("qobmtukk", model.serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("yrtih",
            model.serviceSpecification().metricSpecifications().get(0).displayDescription());
        Assertions.assertEquals(MetricUnit.COUNT_PER_SECOND,
            model.serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals(MetricAggregationType.NOT_SPECIFIED,
            model.serviceSpecification().metricSpecifications().get(0).aggregationType());
        Assertions.assertEquals(false, model.serviceSpecification().metricSpecifications().get(0).fillGapWithZero());
        Assertions.assertEquals(MetricCategory.CAPACITY,
            model.serviceSpecification().metricSpecifications().get(0).category());
        Assertions.assertEquals("zsymglzufcyzkohd",
            model.serviceSpecification().metricSpecifications().get(0).resourceIdDimensionNameOverride());
        Assertions.assertEquals(TimeGrain.PT12H,
            model.serviceSpecification().metricSpecifications().get(0).supportedTimeGrainTypes().get(0));
        Assertions.assertEquals(MetricAggregationType.COUNT,
            model.serviceSpecification().metricSpecifications().get(0).supportedAggregationTypes().get(0));
    }
}
