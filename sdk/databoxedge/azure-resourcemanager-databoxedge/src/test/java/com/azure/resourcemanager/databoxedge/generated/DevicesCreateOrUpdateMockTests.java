// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.databoxedge.DataBoxEdgeManager;
import com.azure.resourcemanager.databoxedge.models.DataBoxEdgeDevice;
import com.azure.resourcemanager.databoxedge.models.DataBoxEdgeDeviceStatus;
import com.azure.resourcemanager.databoxedge.models.Sku;
import com.azure.resourcemanager.databoxedge.models.SkuName;
import com.azure.resourcemanager.databoxedge.models.SkuTier;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DevicesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"location\":\"zq\",\"tags\":{\"wesgogczh\":\"f\",\"lgnyhmo\":\"nnxk\",\"h\":\"sxkkg\"},\"sku\":{\"name\":\"TEA_4Node_Heater\",\"tier\":\"Standard\"},\"etag\":\"dhqxvcx\",\"properties\":{\"dataBoxEdgeDeviceStatus\":\"Offline\",\"serialNumber\":\"sofbshrn\",\"description\":\"buswdvzyy\",\"modelDescription\":\"cnunvjsr\",\"deviceType\":\"DataBoxEdgeDevice\",\"friendlyName\":\"wnopqgikyzirtx\",\"culture\":\"uxzejntpsew\",\"deviceModel\":\"oi\",\"deviceSoftwareVersion\":\"ukry\",\"deviceLocalCapacity\":6982114006443169318,\"timeZone\":\"ieoxorggufhyaomt\",\"deviceHcsVersion\":\"hhavgrvkffovjz\",\"configuredRoleTypes\":[\"Functions\",\"Cognitive\"],\"nodeCount\":779819591},\"id\":\"jmfxumvf\",\"name\":\"luyovwxnbkfezzx\",\"type\":\"cy\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DataBoxEdgeManager manager =
            DataBoxEdgeManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        DataBoxEdgeDevice response =
            manager
                .devices()
                .define("tmmjihyeozph")
                .withRegion("qncygupkvi")
                .withExistingResourceGroup("wau")
                .withTags(
                    mapOf(
                        "qupevzh",
                        "scw",
                        "jujbypelmcuvhixb",
                        "stotxh",
                        "ttpkiwkkbnujrywv",
                        "xyfwnylrcool",
                        "bfpncurdo",
                        "y"))
                .withSku(new Sku().withName(SkuName.TEA_4NODE_UPS_HEATER).withTier(SkuTier.STANDARD))
                .withEtag("ywub")
                .withDataBoxEdgeDeviceStatus(DataBoxEdgeDeviceStatus.READY_TO_SETUP)
                .withDescription("jchrdgoihxumw")
                .withModelDescription("ond")
                .withFriendlyName("udfdlwgg")
                .create();

        Assertions.assertEquals("zq", response.location());
        Assertions.assertEquals("f", response.tags().get("wesgogczh"));
        Assertions.assertEquals(SkuName.TEA_4NODE_HEATER, response.sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, response.sku().tier());
        Assertions.assertEquals("dhqxvcx", response.etag());
        Assertions.assertEquals(DataBoxEdgeDeviceStatus.OFFLINE, response.dataBoxEdgeDeviceStatus());
        Assertions.assertEquals("buswdvzyy", response.description());
        Assertions.assertEquals("cnunvjsr", response.modelDescription());
        Assertions.assertEquals("wnopqgikyzirtx", response.friendlyName());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
