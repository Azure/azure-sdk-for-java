// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.databoxedge.DataBoxEdgeManager;
import com.azure.resourcemanager.databoxedge.models.DataBoxEdgeDevice;
import com.azure.resourcemanager.databoxedge.models.DataBoxEdgeDeviceStatus;
import com.azure.resourcemanager.databoxedge.models.Sku;
import com.azure.resourcemanager.databoxedge.models.SkuName;
import com.azure.resourcemanager.databoxedge.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DevicesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"location\":\"pjuohminyfl\",\"tags\":{\"vwpklvxwmygdxp\":\"wmd\"},\"sku\":{\"name\":\"TEA_1Node_UPS_Heater\",\"tier\":\"Standard\"},\"etag\":\"zepn\",\"properties\":{\"dataBoxEdgeDeviceStatus\":\"Maintenance\",\"serialNumber\":\"xgibbda\",\"description\":\"onfo\",\"modelDescription\":\"uors\",\"deviceType\":\"DataBoxEdgeDevice\",\"friendlyName\":\"wbqpl\",\"culture\":\"vnuuepzl\",\"deviceModel\":\"hw\",\"deviceSoftwareVersion\":\"oldweyuqdu\",\"deviceLocalCapacity\":5989129131388506545,\"timeZone\":\"rwrbi\",\"deviceHcsVersion\":\"ktalywjhhgdnhxms\",\"configuredRoleTypes\":[\"IOT\",\"Cognitive\",\"Functions\"],\"nodeCount\":486711131},\"id\":\"xggdufi\",\"name\":\"ndieuzaofj\",\"type\":\"hvcyyysfg\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataBoxEdgeManager manager = DataBoxEdgeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DataBoxEdgeDevice response = manager.devices()
            .define("lkxt")
            .withRegion("fwsrtawcoezbrhu")
            .withExistingResourceGroup("qjfsmlmbtxhw")
            .withTags(mapOf("goo", "hud"))
            .withSku(new Sku().withName(SkuName.GATEWAY).withTier(SkuTier.STANDARD))
            .withEtag("bvleorfmluiqtqzf")
            .withDataBoxEdgeDeviceStatus(DataBoxEdgeDeviceStatus.OFFLINE)
            .withDescription("yjkqabqgzslesjcb")
            .withModelDescription("rnntiewdjcv")
            .withFriendlyName("rbe")
            .create();

        Assertions.assertEquals("pjuohminyfl", response.location());
        Assertions.assertEquals("wmd", response.tags().get("vwpklvxwmygdxp"));
        Assertions.assertEquals(SkuName.TEA_1NODE_UPS_HEATER, response.sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, response.sku().tier());
        Assertions.assertEquals("zepn", response.etag());
        Assertions.assertEquals(DataBoxEdgeDeviceStatus.MAINTENANCE, response.dataBoxEdgeDeviceStatus());
        Assertions.assertEquals("onfo", response.description());
        Assertions.assertEquals("uors", response.modelDescription());
        Assertions.assertEquals("wbqpl", response.friendlyName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
