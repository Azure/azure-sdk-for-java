// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.databoxedge.DataBoxEdgeManager;
import com.azure.resourcemanager.databoxedge.models.DataBoxEdgeDevice;
import com.azure.resourcemanager.databoxedge.models.DataBoxEdgeDeviceStatus;
import com.azure.resourcemanager.databoxedge.models.SkuName;
import com.azure.resourcemanager.databoxedge.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DevicesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"location\":\"ccyajg\",\"tags\":{\"lvdnkfx\":\"hwyg\",\"apfcqdpsq\":\"semdwzrmu\",\"celve\":\"qvpsvuoymg\",\"erqwkyhkobopg\":\"rypqlmfeo\"},\"sku\":{\"name\":\"TEA_1Node_Heater\",\"tier\":\"Standard\"},\"etag\":\"pbqpcrfkbwccsn\",\"properties\":{\"dataBoxEdgeDeviceStatus\":\"Maintenance\",\"serialNumber\":\"xlpqekftnkhtjsy\",\"description\":\"gwfqatmt\",\"modelDescription\":\"tmdvypgikdgs\",\"deviceType\":\"DataBoxEdgeDevice\",\"friendlyName\":\"birryuzhl\",\"culture\":\"joqrvqqaatj\",\"deviceModel\":\"rv\",\"deviceSoftwareVersion\":\"upmfiibfg\",\"deviceLocalCapacity\":9051786010935823048,\"timeZone\":\"lvrwxkvtkk\",\"deviceHcsVersion\":\"lqwjygvjayvblm\",\"configuredRoleTypes\":[\"Cognitive\"],\"nodeCount\":2100624724},\"id\":\"bxvvyhg\",\"name\":\"opbyrqufegxu\",\"type\":\"wz\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataBoxEdgeManager manager = DataBoxEdgeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DataBoxEdgeDevice> response = manager.devices().list("v", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ccyajg", response.iterator().next().location());
        Assertions.assertEquals("hwyg", response.iterator().next().tags().get("lvdnkfx"));
        Assertions.assertEquals(SkuName.TEA_1NODE_HEATER, response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, response.iterator().next().sku().tier());
        Assertions.assertEquals("pbqpcrfkbwccsn", response.iterator().next().etag());
        Assertions.assertEquals(DataBoxEdgeDeviceStatus.MAINTENANCE,
            response.iterator().next().dataBoxEdgeDeviceStatus());
        Assertions.assertEquals("gwfqatmt", response.iterator().next().description());
        Assertions.assertEquals("tmdvypgikdgs", response.iterator().next().modelDescription());
        Assertions.assertEquals("birryuzhl", response.iterator().next().friendlyName());
    }
}
