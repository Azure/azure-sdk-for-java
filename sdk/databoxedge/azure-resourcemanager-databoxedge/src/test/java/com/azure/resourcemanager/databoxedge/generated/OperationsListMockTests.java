// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.databoxedge.DataBoxEdgeManager;
import com.azure.resourcemanager.databoxedge.models.MetricAggregationType;
import com.azure.resourcemanager.databoxedge.models.MetricCategory;
import com.azure.resourcemanager.databoxedge.models.MetricUnit;
import com.azure.resourcemanager.databoxedge.models.Operation;
import com.azure.resourcemanager.databoxedge.models.TimeGrain;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"zrnw\",\"display\":{\"provider\":\"ndfpwpj\",\"resource\":\"wbtlhflsjcdh\",\"operation\":\"fjvfbgofeljagr\",\"description\":\"qhl\"},\"origin\":\"riiiojnalghfkv\",\"properties\":{\"serviceSpecification\":{\"metricSpecifications\":[{\"name\":\"owueluqh\",\"displayName\":\"hhxvrhmzkwpj\",\"displayDescription\":\"wspughftqsxhqx\",\"unit\":\"Milliseconds\",\"aggregationType\":\"Total\",\"dimensions\":[{},{}],\"fillGapWithZero\":true,\"category\":\"Transaction\",\"resourceIdDimensionNameOverride\":\"jguufzdm\",\"supportedTimeGrainTypes\":[\"PT5M\",\"PT1M\",\"PT1D\",\"PT12H\"],\"supportedAggregationTypes\":[\"Minimum\",\"Minimum\",\"Count\",\"Maximum\"]},{\"name\":\"ngamvpphosz\",\"displayName\":\"udphqamvdkfwyn\",\"displayDescription\":\"vtbvkayh\",\"unit\":\"Percent\",\"aggregationType\":\"Total\",\"dimensions\":[{},{},{}],\"fillGapWithZero\":true,\"category\":\"Transaction\",\"resourceIdDimensionNameOverride\":\"pcnp\",\"supportedTimeGrainTypes\":[\"PT6H\",\"PT1M\",\"PT6H\"],\"supportedAggregationTypes\":[\"Total\"]}]}}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataBoxEdgeManager manager = DataBoxEdgeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Operation> response = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("zrnw", response.iterator().next().name());
        Assertions.assertEquals("ndfpwpj", response.iterator().next().display().provider());
        Assertions.assertEquals("wbtlhflsjcdh", response.iterator().next().display().resource());
        Assertions.assertEquals("fjvfbgofeljagr", response.iterator().next().display().operation());
        Assertions.assertEquals("qhl", response.iterator().next().display().description());
        Assertions.assertEquals("riiiojnalghfkv", response.iterator().next().origin());
        Assertions.assertEquals("owueluqh",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("hhxvrhmzkwpj",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("wspughftqsxhqx",
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).displayDescription());
        Assertions.assertEquals(MetricUnit.MILLISECONDS,
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals(MetricAggregationType.TOTAL,
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).aggregationType());
        Assertions.assertEquals(true,
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).fillGapWithZero());
        Assertions.assertEquals(MetricCategory.TRANSACTION,
            response.iterator().next().serviceSpecification().metricSpecifications().get(0).category());
        Assertions.assertEquals("jguufzdm",
            response.iterator()
                .next()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .resourceIdDimensionNameOverride());
        Assertions.assertEquals(TimeGrain.PT5M,
            response.iterator()
                .next()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedTimeGrainTypes()
                .get(0));
        Assertions.assertEquals(MetricAggregationType.MINIMUM,
            response.iterator()
                .next()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedAggregationTypes()
                .get(0));
    }
}
