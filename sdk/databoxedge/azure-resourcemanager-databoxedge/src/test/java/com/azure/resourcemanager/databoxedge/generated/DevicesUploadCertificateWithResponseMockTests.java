// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.databoxedge.DataBoxEdgeManager;
import com.azure.resourcemanager.databoxedge.models.AuthenticationType;
import com.azure.resourcemanager.databoxedge.models.UploadCertificateRequest;
import com.azure.resourcemanager.databoxedge.models.UploadCertificateResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DevicesUploadCertificateWithResponseMockTests {
    @Test
    public void testUploadCertificateWithResponse() throws Exception {
        String responseStr
            = "{\"authType\":\"Invalid\",\"resourceId\":\"baxk\",\"aadAuthority\":\"ywrckp\",\"aadTenantId\":\"lyhpluodpvruud\",\"servicePrincipalClientId\":\"zibt\",\"servicePrincipalObjectId\":\"stgktst\",\"azureManagementEndpointAudience\":\"xeclzedqbcvhzlhp\",\"aadAudience\":\"dqkdlwwqfbu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataBoxEdgeManager manager = DataBoxEdgeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        UploadCertificateResponse response = manager.devices()
            .uploadCertificateWithResponse("ydbsd", "hmkxmaehvbb",
                new UploadCertificateRequest().withAuthenticationType(AuthenticationType.INVALID)
                    .withCertificate("iplt"),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(AuthenticationType.INVALID, response.authType());
    }
}
