// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.databoxedge.DataBoxEdgeManager;
import com.azure.resourcemanager.databoxedge.models.DataBoxEdgeDevice;
import com.azure.resourcemanager.databoxedge.models.DataBoxEdgeDeviceStatus;
import com.azure.resourcemanager.databoxedge.models.SkuName;
import com.azure.resourcemanager.databoxedge.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DevicesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"location\":\"ixqtn\",\"tags\":{\"fffiak\":\"ezl\",\"tmmjihyeozph\":\"jpqqmted\"},\"sku\":{\"name\":\"TEA_1Node\",\"tier\":\"Standard\"},\"etag\":\"c\",\"properties\":{\"dataBoxEdgeDeviceStatus\":\"NeedsAttention\",\"serialNumber\":\"vipmdscwxqupevzh\",\"description\":\"totxhojujb\",\"modelDescription\":\"elmcuvhixbjxyfw\",\"deviceType\":\"DataBoxEdgeDevice\",\"friendlyName\":\"coolsttpkiwkkb\",\"culture\":\"jrywvtylbfpnc\",\"deviceModel\":\"doiwi\",\"deviceSoftwareVersion\":\"htywubxcbihwq\",\"deviceLocalCapacity\":6769661922262324698,\"timeZone\":\"twjchrdg\",\"deviceHcsVersion\":\"hxumwctondzj\",\"configuredRoleTypes\":[\"Functions\",\"ASA\"],\"nodeCount\":559773870},\"id\":\"wggytsbwtovvt\",\"name\":\"seinqfiuf\",\"type\":\"qknp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataBoxEdgeManager manager = DataBoxEdgeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DataBoxEdgeDevice response = manager.devices()
            .getByResourceGroupWithResponse("rkpyouaibrebqaay", "j", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ixqtn", response.location());
        Assertions.assertEquals("ezl", response.tags().get("fffiak"));
        Assertions.assertEquals(SkuName.TEA_1NODE, response.sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, response.sku().tier());
        Assertions.assertEquals("c", response.etag());
        Assertions.assertEquals(DataBoxEdgeDeviceStatus.NEEDS_ATTENTION, response.dataBoxEdgeDeviceStatus());
        Assertions.assertEquals("totxhojujb", response.description());
        Assertions.assertEquals("elmcuvhixbjxyfw", response.modelDescription());
        Assertions.assertEquals("coolsttpkiwkkb", response.friendlyName());
    }
}
