// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databoxedge.fluent.models.PeriodicTimerProperties;
import com.azure.resourcemanager.databoxedge.models.PeriodicTimerSourceInfo;
import com.azure.resourcemanager.databoxedge.models.RoleSinkInfo;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class PeriodicTimerPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PeriodicTimerProperties model = BinaryData.fromString(
            "{\"sourceInfo\":{\"startTime\":\"2021-10-26T20:04:04Z\",\"schedule\":\"pikpz\",\"topic\":\"ejzanlfz\"},\"sinkInfo\":{\"roleId\":\"iavrm\"},\"customContextTag\":\"onok\"}")
            .toObject(PeriodicTimerProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-26T20:04:04Z"), model.sourceInfo().startTime());
        Assertions.assertEquals("pikpz", model.sourceInfo().schedule());
        Assertions.assertEquals("ejzanlfz", model.sourceInfo().topic());
        Assertions.assertEquals("iavrm", model.sinkInfo().roleId());
        Assertions.assertEquals("onok", model.customContextTag());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PeriodicTimerProperties model = new PeriodicTimerProperties()
            .withSourceInfo(new PeriodicTimerSourceInfo().withStartTime(OffsetDateTime.parse("2021-10-26T20:04:04Z"))
                .withSchedule("pikpz")
                .withTopic("ejzanlfz"))
            .withSinkInfo(new RoleSinkInfo().withRoleId("iavrm"))
            .withCustomContextTag("onok");
        model = BinaryData.fromObject(model).toObject(PeriodicTimerProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-26T20:04:04Z"), model.sourceInfo().startTime());
        Assertions.assertEquals("pikpz", model.sourceInfo().schedule());
        Assertions.assertEquals("ejzanlfz", model.sourceInfo().topic());
        Assertions.assertEquals("iavrm", model.sinkInfo().roleId());
        Assertions.assertEquals("onok", model.customContextTag());
    }
}
