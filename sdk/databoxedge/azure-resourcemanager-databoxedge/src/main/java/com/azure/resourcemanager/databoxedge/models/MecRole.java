// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.databoxedge.fluent.models.MecRoleProperties;
import com.azure.resourcemanager.databoxedge.fluent.models.RoleInner;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** MEC role. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("MEC")
@Fluent
public final class MecRole extends RoleInner {
    /*
     * Properties specific to MEC role.
     */
    @JsonProperty(value = "properties")
    private MecRoleProperties innerProperties;

    /**
     * Get the innerProperties property: Properties specific to MEC role.
     *
     * @return the innerProperties value.
     */
    private MecRoleProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the connectionString property: Activation key of the MEC.
     *
     * @return the connectionString value.
     */
    public AsymmetricEncryptedSecret connectionString() {
        return this.innerProperties() == null ? null : this.innerProperties().connectionString();
    }

    /**
     * Set the connectionString property: Activation key of the MEC.
     *
     * @param connectionString the connectionString value to set.
     * @return the MecRole object itself.
     */
    public MecRole withConnectionString(AsymmetricEncryptedSecret connectionString) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MecRoleProperties();
        }
        this.innerProperties().withConnectionString(connectionString);
        return this;
    }

    /**
     * Get the controllerEndpoint property: Controller Endpoint.
     *
     * @return the controllerEndpoint value.
     */
    public String controllerEndpoint() {
        return this.innerProperties() == null ? null : this.innerProperties().controllerEndpoint();
    }

    /**
     * Set the controllerEndpoint property: Controller Endpoint.
     *
     * @param controllerEndpoint the controllerEndpoint value to set.
     * @return the MecRole object itself.
     */
    public MecRole withControllerEndpoint(String controllerEndpoint) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MecRoleProperties();
        }
        this.innerProperties().withControllerEndpoint(controllerEndpoint);
        return this;
    }

    /**
     * Get the resourceUniqueId property: Unique Id of the Resource.
     *
     * @return the resourceUniqueId value.
     */
    public String resourceUniqueId() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceUniqueId();
    }

    /**
     * Set the resourceUniqueId property: Unique Id of the Resource.
     *
     * @param resourceUniqueId the resourceUniqueId value to set.
     * @return the MecRole object itself.
     */
    public MecRole withResourceUniqueId(String resourceUniqueId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MecRoleProperties();
        }
        this.innerProperties().withResourceUniqueId(resourceUniqueId);
        return this;
    }

    /**
     * Get the roleStatus property: Role status.
     *
     * @return the roleStatus value.
     */
    public RoleStatus roleStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().roleStatus();
    }

    /**
     * Set the roleStatus property: Role status.
     *
     * @param roleStatus the roleStatus value to set.
     * @return the MecRole object itself.
     */
    public MecRole withRoleStatus(RoleStatus roleStatus) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MecRoleProperties();
        }
        this.innerProperties().withRoleStatus(roleStatus);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
