// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.databoxedge.models.HostPlatformType;
import com.azure.resourcemanager.databoxedge.models.KubernetesClusterInfo;
import com.azure.resourcemanager.databoxedge.models.KubernetesRoleResources;
import com.azure.resourcemanager.databoxedge.models.KubernetesState;
import com.azure.resourcemanager.databoxedge.models.PlatformType;
import com.azure.resourcemanager.databoxedge.models.RoleStatus;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Kubernetes role properties. */
@Fluent
public final class KubernetesRoleProperties {
    /*
     * Host OS supported by the Kubernetes role.
     */
    @JsonProperty(value = "hostPlatform", required = true)
    private PlatformType hostPlatform;

    /*
     * State of Kubernetes deployment
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private KubernetesState provisioningState;

    /*
     * Platform where the runtime is hosted.
     */
    @JsonProperty(value = "hostPlatformType", access = JsonProperty.Access.WRITE_ONLY)
    private HostPlatformType hostPlatformType;

    /*
     * Kubernetes cluster configuration
     */
    @JsonProperty(value = "kubernetesClusterInfo", required = true)
    private KubernetesClusterInfo kubernetesClusterInfo;

    /*
     * Kubernetes role resources
     */
    @JsonProperty(value = "kubernetesRoleResources", required = true)
    private KubernetesRoleResources kubernetesRoleResources;

    /*
     * Role status.
     */
    @JsonProperty(value = "roleStatus", required = true)
    private RoleStatus roleStatus;

    /**
     * Get the hostPlatform property: Host OS supported by the Kubernetes role.
     *
     * @return the hostPlatform value.
     */
    public PlatformType hostPlatform() {
        return this.hostPlatform;
    }

    /**
     * Set the hostPlatform property: Host OS supported by the Kubernetes role.
     *
     * @param hostPlatform the hostPlatform value to set.
     * @return the KubernetesRoleProperties object itself.
     */
    public KubernetesRoleProperties withHostPlatform(PlatformType hostPlatform) {
        this.hostPlatform = hostPlatform;
        return this;
    }

    /**
     * Get the provisioningState property: State of Kubernetes deployment.
     *
     * @return the provisioningState value.
     */
    public KubernetesState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the hostPlatformType property: Platform where the runtime is hosted.
     *
     * @return the hostPlatformType value.
     */
    public HostPlatformType hostPlatformType() {
        return this.hostPlatformType;
    }

    /**
     * Get the kubernetesClusterInfo property: Kubernetes cluster configuration.
     *
     * @return the kubernetesClusterInfo value.
     */
    public KubernetesClusterInfo kubernetesClusterInfo() {
        return this.kubernetesClusterInfo;
    }

    /**
     * Set the kubernetesClusterInfo property: Kubernetes cluster configuration.
     *
     * @param kubernetesClusterInfo the kubernetesClusterInfo value to set.
     * @return the KubernetesRoleProperties object itself.
     */
    public KubernetesRoleProperties withKubernetesClusterInfo(KubernetesClusterInfo kubernetesClusterInfo) {
        this.kubernetesClusterInfo = kubernetesClusterInfo;
        return this;
    }

    /**
     * Get the kubernetesRoleResources property: Kubernetes role resources.
     *
     * @return the kubernetesRoleResources value.
     */
    public KubernetesRoleResources kubernetesRoleResources() {
        return this.kubernetesRoleResources;
    }

    /**
     * Set the kubernetesRoleResources property: Kubernetes role resources.
     *
     * @param kubernetesRoleResources the kubernetesRoleResources value to set.
     * @return the KubernetesRoleProperties object itself.
     */
    public KubernetesRoleProperties withKubernetesRoleResources(KubernetesRoleResources kubernetesRoleResources) {
        this.kubernetesRoleResources = kubernetesRoleResources;
        return this;
    }

    /**
     * Get the roleStatus property: Role status.
     *
     * @return the roleStatus value.
     */
    public RoleStatus roleStatus() {
        return this.roleStatus;
    }

    /**
     * Set the roleStatus property: Role status.
     *
     * @param roleStatus the roleStatus value to set.
     * @return the KubernetesRoleProperties object itself.
     */
    public KubernetesRoleProperties withRoleStatus(RoleStatus roleStatus) {
        this.roleStatus = roleStatus;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hostPlatform() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property hostPlatform in model KubernetesRoleProperties"));
        }
        if (kubernetesClusterInfo() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property kubernetesClusterInfo in model KubernetesRoleProperties"));
        } else {
            kubernetesClusterInfo().validate();
        }
        if (kubernetesRoleResources() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property kubernetesRoleResources in model KubernetesRoleProperties"));
        } else {
            kubernetesRoleResources().validate();
        }
        if (roleStatus() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property roleStatus in model KubernetesRoleProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(KubernetesRoleProperties.class);
}
