// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databoxedge.models.AsymmetricEncryptedSecret;
import com.azure.resourcemanager.databoxedge.models.ShareAccessRight;
import com.azure.resourcemanager.databoxedge.models.UserType;
import java.io.IOException;
import java.util.List;

/**
 * The user properties.
 */
@Fluent
public final class UserProperties implements JsonSerializable<UserProperties> {
    /*
     * The password details.
     */
    private AsymmetricEncryptedSecret encryptedPassword;

    /*
     * List of shares that the user has rights on. This field should not be specified during user creation.
     */
    private List<ShareAccessRight> shareAccessRights;

    /*
     * Type of the user.
     */
    private UserType userType;

    /**
     * Creates an instance of UserProperties class.
     */
    public UserProperties() {
    }

    /**
     * Get the encryptedPassword property: The password details.
     * 
     * @return the encryptedPassword value.
     */
    public AsymmetricEncryptedSecret encryptedPassword() {
        return this.encryptedPassword;
    }

    /**
     * Set the encryptedPassword property: The password details.
     * 
     * @param encryptedPassword the encryptedPassword value to set.
     * @return the UserProperties object itself.
     */
    public UserProperties withEncryptedPassword(AsymmetricEncryptedSecret encryptedPassword) {
        this.encryptedPassword = encryptedPassword;
        return this;
    }

    /**
     * Get the shareAccessRights property: List of shares that the user has rights on. This field should not be
     * specified during user creation.
     * 
     * @return the shareAccessRights value.
     */
    public List<ShareAccessRight> shareAccessRights() {
        return this.shareAccessRights;
    }

    /**
     * Set the shareAccessRights property: List of shares that the user has rights on. This field should not be
     * specified during user creation.
     * 
     * @param shareAccessRights the shareAccessRights value to set.
     * @return the UserProperties object itself.
     */
    public UserProperties withShareAccessRights(List<ShareAccessRight> shareAccessRights) {
        this.shareAccessRights = shareAccessRights;
        return this;
    }

    /**
     * Get the userType property: Type of the user.
     * 
     * @return the userType value.
     */
    public UserType userType() {
        return this.userType;
    }

    /**
     * Set the userType property: Type of the user.
     * 
     * @param userType the userType value to set.
     * @return the UserProperties object itself.
     */
    public UserProperties withUserType(UserType userType) {
        this.userType = userType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (encryptedPassword() != null) {
            encryptedPassword().validate();
        }
        if (shareAccessRights() != null) {
            shareAccessRights().forEach(e -> e.validate());
        }
        if (userType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property userType in model UserProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UserProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("userType", this.userType == null ? null : this.userType.toString());
        jsonWriter.writeJsonField("encryptedPassword", this.encryptedPassword);
        jsonWriter.writeArrayField("shareAccessRights", this.shareAccessRights,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UserProperties.
     */
    public static UserProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserProperties deserializedUserProperties = new UserProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userType".equals(fieldName)) {
                    deserializedUserProperties.userType = UserType.fromString(reader.getString());
                } else if ("encryptedPassword".equals(fieldName)) {
                    deserializedUserProperties.encryptedPassword = AsymmetricEncryptedSecret.fromJson(reader);
                } else if ("shareAccessRights".equals(fieldName)) {
                    List<ShareAccessRight> shareAccessRights
                        = reader.readArray(reader1 -> ShareAccessRight.fromJson(reader1));
                    deserializedUserProperties.shareAccessRights = shareAccessRights;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserProperties;
        });
    }
}
