// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The restriction info with locations and zones.
 */
@Immutable
public final class SkuRestrictionInfo implements JsonSerializable<SkuRestrictionInfo> {
    /*
     * The locations.
     */
    private List<String> locations;

    /*
     * The zones.
     */
    private List<String> zones;

    /**
     * Creates an instance of SkuRestrictionInfo class.
     */
    public SkuRestrictionInfo() {
    }

    /**
     * Get the locations property: The locations.
     * 
     * @return the locations value.
     */
    public List<String> locations() {
        return this.locations;
    }

    /**
     * Get the zones property: The zones.
     * 
     * @return the zones value.
     */
    public List<String> zones() {
        return this.zones;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SkuRestrictionInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SkuRestrictionInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SkuRestrictionInfo.
     */
    public static SkuRestrictionInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SkuRestrictionInfo deserializedSkuRestrictionInfo = new SkuRestrictionInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("locations".equals(fieldName)) {
                    List<String> locations = reader.readArray(reader1 -> reader1.getString());
                    deserializedSkuRestrictionInfo.locations = locations;
                } else if ("zones".equals(fieldName)) {
                    List<String> zones = reader.readArray(reader1 -> reader1.getString());
                    deserializedSkuRestrictionInfo.zones = zones;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSkuRestrictionInfo;
        });
    }
}
