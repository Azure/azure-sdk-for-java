// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.databoxedge.fluent.models.RoleInner;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/** Compute role. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("IOT")
@JsonFlatten
@Fluent
public class IoTRole extends RoleInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(IoTRole.class);

    /*
     * Host OS supported by the IoT role.
     */
    @JsonProperty(value = "properties.hostPlatform")
    private PlatformType hostPlatform;

    /*
     * IoT device metadata to which data box edge device needs to be connected.
     */
    @JsonProperty(value = "properties.ioTDeviceDetails")
    private IoTDeviceInfo ioTDeviceDetails;

    /*
     * IoT edge device to which the IoT role needs to be configured.
     */
    @JsonProperty(value = "properties.ioTEdgeDeviceDetails")
    private IoTDeviceInfo ioTEdgeDeviceDetails;

    /*
     * Mount points of shares in role(s).
     */
    @JsonProperty(value = "properties.shareMappings")
    private List<MountPointMap> shareMappings;

    /*
     * Role status.
     */
    @JsonProperty(value = "properties.roleStatus")
    private RoleStatus roleStatus;

    /**
     * Get the hostPlatform property: Host OS supported by the IoT role.
     *
     * @return the hostPlatform value.
     */
    public PlatformType hostPlatform() {
        return this.hostPlatform;
    }

    /**
     * Set the hostPlatform property: Host OS supported by the IoT role.
     *
     * @param hostPlatform the hostPlatform value to set.
     * @return the IoTRole object itself.
     */
    public IoTRole withHostPlatform(PlatformType hostPlatform) {
        this.hostPlatform = hostPlatform;
        return this;
    }

    /**
     * Get the ioTDeviceDetails property: IoT device metadata to which data box edge device needs to be connected.
     *
     * @return the ioTDeviceDetails value.
     */
    public IoTDeviceInfo ioTDeviceDetails() {
        return this.ioTDeviceDetails;
    }

    /**
     * Set the ioTDeviceDetails property: IoT device metadata to which data box edge device needs to be connected.
     *
     * @param ioTDeviceDetails the ioTDeviceDetails value to set.
     * @return the IoTRole object itself.
     */
    public IoTRole withIoTDeviceDetails(IoTDeviceInfo ioTDeviceDetails) {
        this.ioTDeviceDetails = ioTDeviceDetails;
        return this;
    }

    /**
     * Get the ioTEdgeDeviceDetails property: IoT edge device to which the IoT role needs to be configured.
     *
     * @return the ioTEdgeDeviceDetails value.
     */
    public IoTDeviceInfo ioTEdgeDeviceDetails() {
        return this.ioTEdgeDeviceDetails;
    }

    /**
     * Set the ioTEdgeDeviceDetails property: IoT edge device to which the IoT role needs to be configured.
     *
     * @param ioTEdgeDeviceDetails the ioTEdgeDeviceDetails value to set.
     * @return the IoTRole object itself.
     */
    public IoTRole withIoTEdgeDeviceDetails(IoTDeviceInfo ioTEdgeDeviceDetails) {
        this.ioTEdgeDeviceDetails = ioTEdgeDeviceDetails;
        return this;
    }

    /**
     * Get the shareMappings property: Mount points of shares in role(s).
     *
     * @return the shareMappings value.
     */
    public List<MountPointMap> shareMappings() {
        return this.shareMappings;
    }

    /**
     * Set the shareMappings property: Mount points of shares in role(s).
     *
     * @param shareMappings the shareMappings value to set.
     * @return the IoTRole object itself.
     */
    public IoTRole withShareMappings(List<MountPointMap> shareMappings) {
        this.shareMappings = shareMappings;
        return this;
    }

    /**
     * Get the roleStatus property: Role status.
     *
     * @return the roleStatus value.
     */
    public RoleStatus roleStatus() {
        return this.roleStatus;
    }

    /**
     * Set the roleStatus property: Role status.
     *
     * @param roleStatus the roleStatus value to set.
     * @return the IoTRole object itself.
     */
    public IoTRole withRoleStatus(RoleStatus roleStatus) {
        this.roleStatus = roleStatus;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (ioTDeviceDetails() != null) {
            ioTDeviceDetails().validate();
        }
        if (ioTEdgeDeviceDetails() != null) {
            ioTEdgeDeviceDetails().validate();
        }
        if (shareMappings() != null) {
            shareMappings().forEach(e -> e.validate());
        }
    }
}
