// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databoxedge.models.AzureContainerInfo;
import com.azure.resourcemanager.databoxedge.models.ClientAccessRight;
import com.azure.resourcemanager.databoxedge.models.DataPolicy;
import com.azure.resourcemanager.databoxedge.models.MonitoringStatus;
import com.azure.resourcemanager.databoxedge.models.MountPointMap;
import com.azure.resourcemanager.databoxedge.models.RefreshDetails;
import com.azure.resourcemanager.databoxedge.models.ShareAccessProtocol;
import com.azure.resourcemanager.databoxedge.models.ShareStatus;
import com.azure.resourcemanager.databoxedge.models.UserAccessRight;
import java.io.IOException;
import java.util.List;

/**
 * The share properties.
 */
@Fluent
public final class ShareProperties implements JsonSerializable<ShareProperties> {
    /*
     * Description for the share.
     */
    private String description;

    /*
     * Current status of the share.
     */
    private ShareStatus shareStatus;

    /*
     * Current monitoring status of the share.
     */
    private MonitoringStatus monitoringStatus;

    /*
     * Azure container mapping for the share.
     */
    private AzureContainerInfo azureContainerInfo;

    /*
     * Access protocol to be used by the share.
     */
    private ShareAccessProtocol accessProtocol;

    /*
     * Mapping of users and corresponding access rights on the share (required for SMB protocol).
     */
    private List<UserAccessRight> userAccessRights;

    /*
     * List of IP addresses and corresponding access rights on the share(required for NFS protocol).
     */
    private List<ClientAccessRight> clientAccessRights;

    /*
     * Details of the refresh job on this share.
     */
    private RefreshDetails refreshDetails;

    /*
     * Share mount point to the role.
     */
    private List<MountPointMap> shareMappings;

    /*
     * Data policy of the share.
     */
    private DataPolicy dataPolicy;

    /**
     * Creates an instance of ShareProperties class.
     */
    public ShareProperties() {
    }

    /**
     * Get the description property: Description for the share.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description for the share.
     * 
     * @param description the description value to set.
     * @return the ShareProperties object itself.
     */
    public ShareProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the shareStatus property: Current status of the share.
     * 
     * @return the shareStatus value.
     */
    public ShareStatus shareStatus() {
        return this.shareStatus;
    }

    /**
     * Set the shareStatus property: Current status of the share.
     * 
     * @param shareStatus the shareStatus value to set.
     * @return the ShareProperties object itself.
     */
    public ShareProperties withShareStatus(ShareStatus shareStatus) {
        this.shareStatus = shareStatus;
        return this;
    }

    /**
     * Get the monitoringStatus property: Current monitoring status of the share.
     * 
     * @return the monitoringStatus value.
     */
    public MonitoringStatus monitoringStatus() {
        return this.monitoringStatus;
    }

    /**
     * Set the monitoringStatus property: Current monitoring status of the share.
     * 
     * @param monitoringStatus the monitoringStatus value to set.
     * @return the ShareProperties object itself.
     */
    public ShareProperties withMonitoringStatus(MonitoringStatus monitoringStatus) {
        this.monitoringStatus = monitoringStatus;
        return this;
    }

    /**
     * Get the azureContainerInfo property: Azure container mapping for the share.
     * 
     * @return the azureContainerInfo value.
     */
    public AzureContainerInfo azureContainerInfo() {
        return this.azureContainerInfo;
    }

    /**
     * Set the azureContainerInfo property: Azure container mapping for the share.
     * 
     * @param azureContainerInfo the azureContainerInfo value to set.
     * @return the ShareProperties object itself.
     */
    public ShareProperties withAzureContainerInfo(AzureContainerInfo azureContainerInfo) {
        this.azureContainerInfo = azureContainerInfo;
        return this;
    }

    /**
     * Get the accessProtocol property: Access protocol to be used by the share.
     * 
     * @return the accessProtocol value.
     */
    public ShareAccessProtocol accessProtocol() {
        return this.accessProtocol;
    }

    /**
     * Set the accessProtocol property: Access protocol to be used by the share.
     * 
     * @param accessProtocol the accessProtocol value to set.
     * @return the ShareProperties object itself.
     */
    public ShareProperties withAccessProtocol(ShareAccessProtocol accessProtocol) {
        this.accessProtocol = accessProtocol;
        return this;
    }

    /**
     * Get the userAccessRights property: Mapping of users and corresponding access rights on the share (required for
     * SMB protocol).
     * 
     * @return the userAccessRights value.
     */
    public List<UserAccessRight> userAccessRights() {
        return this.userAccessRights;
    }

    /**
     * Set the userAccessRights property: Mapping of users and corresponding access rights on the share (required for
     * SMB protocol).
     * 
     * @param userAccessRights the userAccessRights value to set.
     * @return the ShareProperties object itself.
     */
    public ShareProperties withUserAccessRights(List<UserAccessRight> userAccessRights) {
        this.userAccessRights = userAccessRights;
        return this;
    }

    /**
     * Get the clientAccessRights property: List of IP addresses and corresponding access rights on the share(required
     * for NFS protocol).
     * 
     * @return the clientAccessRights value.
     */
    public List<ClientAccessRight> clientAccessRights() {
        return this.clientAccessRights;
    }

    /**
     * Set the clientAccessRights property: List of IP addresses and corresponding access rights on the share(required
     * for NFS protocol).
     * 
     * @param clientAccessRights the clientAccessRights value to set.
     * @return the ShareProperties object itself.
     */
    public ShareProperties withClientAccessRights(List<ClientAccessRight> clientAccessRights) {
        this.clientAccessRights = clientAccessRights;
        return this;
    }

    /**
     * Get the refreshDetails property: Details of the refresh job on this share.
     * 
     * @return the refreshDetails value.
     */
    public RefreshDetails refreshDetails() {
        return this.refreshDetails;
    }

    /**
     * Set the refreshDetails property: Details of the refresh job on this share.
     * 
     * @param refreshDetails the refreshDetails value to set.
     * @return the ShareProperties object itself.
     */
    public ShareProperties withRefreshDetails(RefreshDetails refreshDetails) {
        this.refreshDetails = refreshDetails;
        return this;
    }

    /**
     * Get the shareMappings property: Share mount point to the role.
     * 
     * @return the shareMappings value.
     */
    public List<MountPointMap> shareMappings() {
        return this.shareMappings;
    }

    /**
     * Get the dataPolicy property: Data policy of the share.
     * 
     * @return the dataPolicy value.
     */
    public DataPolicy dataPolicy() {
        return this.dataPolicy;
    }

    /**
     * Set the dataPolicy property: Data policy of the share.
     * 
     * @param dataPolicy the dataPolicy value to set.
     * @return the ShareProperties object itself.
     */
    public ShareProperties withDataPolicy(DataPolicy dataPolicy) {
        this.dataPolicy = dataPolicy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (shareStatus() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property shareStatus in model ShareProperties"));
        }
        if (monitoringStatus() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property monitoringStatus in model ShareProperties"));
        }
        if (azureContainerInfo() != null) {
            azureContainerInfo().validate();
        }
        if (accessProtocol() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property accessProtocol in model ShareProperties"));
        }
        if (userAccessRights() != null) {
            userAccessRights().forEach(e -> e.validate());
        }
        if (clientAccessRights() != null) {
            clientAccessRights().forEach(e -> e.validate());
        }
        if (refreshDetails() != null) {
            refreshDetails().validate();
        }
        if (shareMappings() != null) {
            shareMappings().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ShareProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("shareStatus", this.shareStatus == null ? null : this.shareStatus.toString());
        jsonWriter.writeStringField("monitoringStatus",
            this.monitoringStatus == null ? null : this.monitoringStatus.toString());
        jsonWriter.writeStringField("accessProtocol",
            this.accessProtocol == null ? null : this.accessProtocol.toString());
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeJsonField("azureContainerInfo", this.azureContainerInfo);
        jsonWriter.writeArrayField("userAccessRights", this.userAccessRights,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("clientAccessRights", this.clientAccessRights,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("refreshDetails", this.refreshDetails);
        jsonWriter.writeStringField("dataPolicy", this.dataPolicy == null ? null : this.dataPolicy.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ShareProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ShareProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ShareProperties.
     */
    public static ShareProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ShareProperties deserializedShareProperties = new ShareProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("shareStatus".equals(fieldName)) {
                    deserializedShareProperties.shareStatus = ShareStatus.fromString(reader.getString());
                } else if ("monitoringStatus".equals(fieldName)) {
                    deserializedShareProperties.monitoringStatus = MonitoringStatus.fromString(reader.getString());
                } else if ("accessProtocol".equals(fieldName)) {
                    deserializedShareProperties.accessProtocol = ShareAccessProtocol.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedShareProperties.description = reader.getString();
                } else if ("azureContainerInfo".equals(fieldName)) {
                    deserializedShareProperties.azureContainerInfo = AzureContainerInfo.fromJson(reader);
                } else if ("userAccessRights".equals(fieldName)) {
                    List<UserAccessRight> userAccessRights
                        = reader.readArray(reader1 -> UserAccessRight.fromJson(reader1));
                    deserializedShareProperties.userAccessRights = userAccessRights;
                } else if ("clientAccessRights".equals(fieldName)) {
                    List<ClientAccessRight> clientAccessRights
                        = reader.readArray(reader1 -> ClientAccessRight.fromJson(reader1));
                    deserializedShareProperties.clientAccessRights = clientAccessRights;
                } else if ("refreshDetails".equals(fieldName)) {
                    deserializedShareProperties.refreshDetails = RefreshDetails.fromJson(reader);
                } else if ("shareMappings".equals(fieldName)) {
                    List<MountPointMap> shareMappings = reader.readArray(reader1 -> MountPointMap.fromJson(reader1));
                    deserializedShareProperties.shareMappings = shareMappings;
                } else if ("dataPolicy".equals(fieldName)) {
                    deserializedShareProperties.dataPolicy = DataPolicy.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedShareProperties;
        });
    }
}
