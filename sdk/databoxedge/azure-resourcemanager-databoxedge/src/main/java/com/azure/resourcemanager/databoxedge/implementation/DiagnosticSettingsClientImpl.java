// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.databoxedge.fluent.DiagnosticSettingsClient;
import com.azure.resourcemanager.databoxedge.fluent.models.DiagnosticProactiveLogCollectionSettingsInner;
import com.azure.resourcemanager.databoxedge.fluent.models.DiagnosticRemoteSupportSettingsInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in DiagnosticSettingsClient. */
public final class DiagnosticSettingsClientImpl implements DiagnosticSettingsClient {
    /** The proxy service used to perform REST calls. */
    private final DiagnosticSettingsService service;

    /** The service client containing this operation class. */
    private final DataBoxEdgeManagementClientImpl client;

    /**
     * Initializes an instance of DiagnosticSettingsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    DiagnosticSettingsClientImpl(DataBoxEdgeManagementClientImpl client) {
        this.service =
            RestProxy.create(DiagnosticSettingsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DataBoxEdgeManagementClientDiagnosticSettings to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DataBoxEdgeManagemen")
    private interface DiagnosticSettingsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge"
                + "/dataBoxEdgeDevices/{deviceName}/diagnosticProactiveLogCollectionSettings/default")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DiagnosticProactiveLogCollectionSettingsInner>> getDiagnosticProactiveLogCollectionSettings(
            @HostParam("$host") String endpoint,
            @PathParam("deviceName") String deviceName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge"
                + "/dataBoxEdgeDevices/{deviceName}/diagnosticProactiveLogCollectionSettings/default")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> updateDiagnosticProactiveLogCollectionSettings(
            @HostParam("$host") String endpoint,
            @PathParam("deviceName") String deviceName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") DiagnosticProactiveLogCollectionSettingsInner proactiveLogCollectionSettings,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge"
                + "/dataBoxEdgeDevices/{deviceName}/diagnosticRemoteSupportSettings/default")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DiagnosticRemoteSupportSettingsInner>> getDiagnosticRemoteSupportSettings(
            @HostParam("$host") String endpoint,
            @PathParam("deviceName") String deviceName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge"
                + "/dataBoxEdgeDevices/{deviceName}/diagnosticRemoteSupportSettings/default")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> updateDiagnosticRemoteSupportSettings(
            @HostParam("$host") String endpoint,
            @PathParam("deviceName") String deviceName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") DiagnosticRemoteSupportSettingsInner diagnosticRemoteSupportSettings,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets the proactive log collection settings of the specified Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proactive log collection settings of the specified Data Box Edge/Data Box Gateway device along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DiagnosticProactiveLogCollectionSettingsInner>>
        getDiagnosticProactiveLogCollectionSettingsWithResponseAsync(String deviceName, String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (deviceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getDiagnosticProactiveLogCollectionSettings(
                            this.client.getEndpoint(),
                            deviceName,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the proactive log collection settings of the specified Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proactive log collection settings of the specified Data Box Edge/Data Box Gateway device along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DiagnosticProactiveLogCollectionSettingsInner>>
        getDiagnosticProactiveLogCollectionSettingsWithResponseAsync(
            String deviceName, String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (deviceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getDiagnosticProactiveLogCollectionSettings(
                this.client.getEndpoint(),
                deviceName,
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets the proactive log collection settings of the specified Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proactive log collection settings of the specified Data Box Edge/Data Box Gateway device on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DiagnosticProactiveLogCollectionSettingsInner> getDiagnosticProactiveLogCollectionSettingsAsync(
        String deviceName, String resourceGroupName) {
        return getDiagnosticProactiveLogCollectionSettingsWithResponseAsync(deviceName, resourceGroupName)
            .flatMap(
                (Response<DiagnosticProactiveLogCollectionSettingsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the proactive log collection settings of the specified Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proactive log collection settings of the specified Data Box Edge/Data Box Gateway device.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticProactiveLogCollectionSettingsInner getDiagnosticProactiveLogCollectionSettings(
        String deviceName, String resourceGroupName) {
        return getDiagnosticProactiveLogCollectionSettingsAsync(deviceName, resourceGroupName).block();
    }

    /**
     * Gets the proactive log collection settings of the specified Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the proactive log collection settings of the specified Data Box Edge/Data Box Gateway device along with
     *     {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DiagnosticProactiveLogCollectionSettingsInner>
        getDiagnosticProactiveLogCollectionSettingsWithResponse(
            String deviceName, String resourceGroupName, Context context) {
        return getDiagnosticProactiveLogCollectionSettingsWithResponseAsync(deviceName, resourceGroupName, context)
            .block();
    }

    /**
     * Updates the proactive log collection settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param proactiveLogCollectionSettings The proactive log collection settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the diagnostic proactive log collection settings of a device along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateDiagnosticProactiveLogCollectionSettingsWithResponseAsync(
        String deviceName,
        String resourceGroupName,
        DiagnosticProactiveLogCollectionSettingsInner proactiveLogCollectionSettings) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (deviceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (proactiveLogCollectionSettings == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter proactiveLogCollectionSettings is required and cannot be null."));
        } else {
            proactiveLogCollectionSettings.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateDiagnosticProactiveLogCollectionSettings(
                            this.client.getEndpoint(),
                            deviceName,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            proactiveLogCollectionSettings,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the proactive log collection settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param proactiveLogCollectionSettings The proactive log collection settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the diagnostic proactive log collection settings of a device along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateDiagnosticProactiveLogCollectionSettingsWithResponseAsync(
        String deviceName,
        String resourceGroupName,
        DiagnosticProactiveLogCollectionSettingsInner proactiveLogCollectionSettings,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (deviceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (proactiveLogCollectionSettings == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter proactiveLogCollectionSettings is required and cannot be null."));
        } else {
            proactiveLogCollectionSettings.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .updateDiagnosticProactiveLogCollectionSettings(
                this.client.getEndpoint(),
                deviceName,
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                proactiveLogCollectionSettings,
                accept,
                context);
    }

    /**
     * Updates the proactive log collection settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param proactiveLogCollectionSettings The proactive log collection settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the diagnostic proactive log collection settings of a device.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<
            PollResult<DiagnosticProactiveLogCollectionSettingsInner>, DiagnosticProactiveLogCollectionSettingsInner>
        beginUpdateDiagnosticProactiveLogCollectionSettingsAsync(
            String deviceName,
            String resourceGroupName,
            DiagnosticProactiveLogCollectionSettingsInner proactiveLogCollectionSettings) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateDiagnosticProactiveLogCollectionSettingsWithResponseAsync(
                deviceName, resourceGroupName, proactiveLogCollectionSettings);
        return this
            .client
            .<DiagnosticProactiveLogCollectionSettingsInner, DiagnosticProactiveLogCollectionSettingsInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                DiagnosticProactiveLogCollectionSettingsInner.class,
                DiagnosticProactiveLogCollectionSettingsInner.class,
                this.client.getContext());
    }

    /**
     * Updates the proactive log collection settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param proactiveLogCollectionSettings The proactive log collection settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the diagnostic proactive log collection settings of a device.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<
            PollResult<DiagnosticProactiveLogCollectionSettingsInner>, DiagnosticProactiveLogCollectionSettingsInner>
        beginUpdateDiagnosticProactiveLogCollectionSettingsAsync(
            String deviceName,
            String resourceGroupName,
            DiagnosticProactiveLogCollectionSettingsInner proactiveLogCollectionSettings,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateDiagnosticProactiveLogCollectionSettingsWithResponseAsync(
                deviceName, resourceGroupName, proactiveLogCollectionSettings, context);
        return this
            .client
            .<DiagnosticProactiveLogCollectionSettingsInner, DiagnosticProactiveLogCollectionSettingsInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                DiagnosticProactiveLogCollectionSettingsInner.class,
                DiagnosticProactiveLogCollectionSettingsInner.class,
                context);
    }

    /**
     * Updates the proactive log collection settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param proactiveLogCollectionSettings The proactive log collection settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the diagnostic proactive log collection settings of a device.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<
            PollResult<DiagnosticProactiveLogCollectionSettingsInner>, DiagnosticProactiveLogCollectionSettingsInner>
        beginUpdateDiagnosticProactiveLogCollectionSettings(
            String deviceName,
            String resourceGroupName,
            DiagnosticProactiveLogCollectionSettingsInner proactiveLogCollectionSettings) {
        return beginUpdateDiagnosticProactiveLogCollectionSettingsAsync(
                deviceName, resourceGroupName, proactiveLogCollectionSettings)
            .getSyncPoller();
    }

    /**
     * Updates the proactive log collection settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param proactiveLogCollectionSettings The proactive log collection settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the diagnostic proactive log collection settings of a device.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<
            PollResult<DiagnosticProactiveLogCollectionSettingsInner>, DiagnosticProactiveLogCollectionSettingsInner>
        beginUpdateDiagnosticProactiveLogCollectionSettings(
            String deviceName,
            String resourceGroupName,
            DiagnosticProactiveLogCollectionSettingsInner proactiveLogCollectionSettings,
            Context context) {
        return beginUpdateDiagnosticProactiveLogCollectionSettingsAsync(
                deviceName, resourceGroupName, proactiveLogCollectionSettings, context)
            .getSyncPoller();
    }

    /**
     * Updates the proactive log collection settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param proactiveLogCollectionSettings The proactive log collection settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the diagnostic proactive log collection settings of a device on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DiagnosticProactiveLogCollectionSettingsInner> updateDiagnosticProactiveLogCollectionSettingsAsync(
        String deviceName,
        String resourceGroupName,
        DiagnosticProactiveLogCollectionSettingsInner proactiveLogCollectionSettings) {
        return beginUpdateDiagnosticProactiveLogCollectionSettingsAsync(
                deviceName, resourceGroupName, proactiveLogCollectionSettings)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the proactive log collection settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param proactiveLogCollectionSettings The proactive log collection settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the diagnostic proactive log collection settings of a device on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DiagnosticProactiveLogCollectionSettingsInner> updateDiagnosticProactiveLogCollectionSettingsAsync(
        String deviceName,
        String resourceGroupName,
        DiagnosticProactiveLogCollectionSettingsInner proactiveLogCollectionSettings,
        Context context) {
        return beginUpdateDiagnosticProactiveLogCollectionSettingsAsync(
                deviceName, resourceGroupName, proactiveLogCollectionSettings, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the proactive log collection settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param proactiveLogCollectionSettings The proactive log collection settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the diagnostic proactive log collection settings of a device.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticProactiveLogCollectionSettingsInner updateDiagnosticProactiveLogCollectionSettings(
        String deviceName,
        String resourceGroupName,
        DiagnosticProactiveLogCollectionSettingsInner proactiveLogCollectionSettings) {
        return updateDiagnosticProactiveLogCollectionSettingsAsync(
                deviceName, resourceGroupName, proactiveLogCollectionSettings)
            .block();
    }

    /**
     * Updates the proactive log collection settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param proactiveLogCollectionSettings The proactive log collection settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the diagnostic proactive log collection settings of a device.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticProactiveLogCollectionSettingsInner updateDiagnosticProactiveLogCollectionSettings(
        String deviceName,
        String resourceGroupName,
        DiagnosticProactiveLogCollectionSettingsInner proactiveLogCollectionSettings,
        Context context) {
        return updateDiagnosticProactiveLogCollectionSettingsAsync(
                deviceName, resourceGroupName, proactiveLogCollectionSettings, context)
            .block();
    }

    /**
     * Gets the diagnostic remote support settings of the specified Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the diagnostic remote support settings of the specified Data Box Edge/Data Box Gateway device along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DiagnosticRemoteSupportSettingsInner>> getDiagnosticRemoteSupportSettingsWithResponseAsync(
        String deviceName, String resourceGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (deviceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getDiagnosticRemoteSupportSettings(
                            this.client.getEndpoint(),
                            deviceName,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the diagnostic remote support settings of the specified Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the diagnostic remote support settings of the specified Data Box Edge/Data Box Gateway device along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DiagnosticRemoteSupportSettingsInner>> getDiagnosticRemoteSupportSettingsWithResponseAsync(
        String deviceName, String resourceGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (deviceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getDiagnosticRemoteSupportSettings(
                this.client.getEndpoint(),
                deviceName,
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets the diagnostic remote support settings of the specified Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the diagnostic remote support settings of the specified Data Box Edge/Data Box Gateway device on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DiagnosticRemoteSupportSettingsInner> getDiagnosticRemoteSupportSettingsAsync(
        String deviceName, String resourceGroupName) {
        return getDiagnosticRemoteSupportSettingsWithResponseAsync(deviceName, resourceGroupName)
            .flatMap(
                (Response<DiagnosticRemoteSupportSettingsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the diagnostic remote support settings of the specified Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the diagnostic remote support settings of the specified Data Box Edge/Data Box Gateway device.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticRemoteSupportSettingsInner getDiagnosticRemoteSupportSettings(
        String deviceName, String resourceGroupName) {
        return getDiagnosticRemoteSupportSettingsAsync(deviceName, resourceGroupName).block();
    }

    /**
     * Gets the diagnostic remote support settings of the specified Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the diagnostic remote support settings of the specified Data Box Edge/Data Box Gateway device along with
     *     {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DiagnosticRemoteSupportSettingsInner> getDiagnosticRemoteSupportSettingsWithResponse(
        String deviceName, String resourceGroupName, Context context) {
        return getDiagnosticRemoteSupportSettingsWithResponseAsync(deviceName, resourceGroupName, context).block();
    }

    /**
     * Updates the diagnostic remote support settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param diagnosticRemoteSupportSettings The diagnostic remote support settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the remote support settings of a device along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateDiagnosticRemoteSupportSettingsWithResponseAsync(
        String deviceName,
        String resourceGroupName,
        DiagnosticRemoteSupportSettingsInner diagnosticRemoteSupportSettings) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (deviceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (diagnosticRemoteSupportSettings == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter diagnosticRemoteSupportSettings is required and cannot be null."));
        } else {
            diagnosticRemoteSupportSettings.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .updateDiagnosticRemoteSupportSettings(
                            this.client.getEndpoint(),
                            deviceName,
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            diagnosticRemoteSupportSettings,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the diagnostic remote support settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param diagnosticRemoteSupportSettings The diagnostic remote support settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the remote support settings of a device along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateDiagnosticRemoteSupportSettingsWithResponseAsync(
        String deviceName,
        String resourceGroupName,
        DiagnosticRemoteSupportSettingsInner diagnosticRemoteSupportSettings,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (deviceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter deviceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (diagnosticRemoteSupportSettings == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter diagnosticRemoteSupportSettings is required and cannot be null."));
        } else {
            diagnosticRemoteSupportSettings.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .updateDiagnosticRemoteSupportSettings(
                this.client.getEndpoint(),
                deviceName,
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                diagnosticRemoteSupportSettings,
                accept,
                context);
    }

    /**
     * Updates the diagnostic remote support settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param diagnosticRemoteSupportSettings The diagnostic remote support settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the remote support settings of a device.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DiagnosticRemoteSupportSettingsInner>, DiagnosticRemoteSupportSettingsInner>
        beginUpdateDiagnosticRemoteSupportSettingsAsync(
            String deviceName,
            String resourceGroupName,
            DiagnosticRemoteSupportSettingsInner diagnosticRemoteSupportSettings) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateDiagnosticRemoteSupportSettingsWithResponseAsync(
                deviceName, resourceGroupName, diagnosticRemoteSupportSettings);
        return this
            .client
            .<DiagnosticRemoteSupportSettingsInner, DiagnosticRemoteSupportSettingsInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                DiagnosticRemoteSupportSettingsInner.class,
                DiagnosticRemoteSupportSettingsInner.class,
                this.client.getContext());
    }

    /**
     * Updates the diagnostic remote support settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param diagnosticRemoteSupportSettings The diagnostic remote support settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the remote support settings of a device.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DiagnosticRemoteSupportSettingsInner>, DiagnosticRemoteSupportSettingsInner>
        beginUpdateDiagnosticRemoteSupportSettingsAsync(
            String deviceName,
            String resourceGroupName,
            DiagnosticRemoteSupportSettingsInner diagnosticRemoteSupportSettings,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateDiagnosticRemoteSupportSettingsWithResponseAsync(
                deviceName, resourceGroupName, diagnosticRemoteSupportSettings, context);
        return this
            .client
            .<DiagnosticRemoteSupportSettingsInner, DiagnosticRemoteSupportSettingsInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                DiagnosticRemoteSupportSettingsInner.class,
                DiagnosticRemoteSupportSettingsInner.class,
                context);
    }

    /**
     * Updates the diagnostic remote support settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param diagnosticRemoteSupportSettings The diagnostic remote support settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the remote support settings of a device.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DiagnosticRemoteSupportSettingsInner>, DiagnosticRemoteSupportSettingsInner>
        beginUpdateDiagnosticRemoteSupportSettings(
            String deviceName,
            String resourceGroupName,
            DiagnosticRemoteSupportSettingsInner diagnosticRemoteSupportSettings) {
        return beginUpdateDiagnosticRemoteSupportSettingsAsync(
                deviceName, resourceGroupName, diagnosticRemoteSupportSettings)
            .getSyncPoller();
    }

    /**
     * Updates the diagnostic remote support settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param diagnosticRemoteSupportSettings The diagnostic remote support settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the remote support settings of a device.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DiagnosticRemoteSupportSettingsInner>, DiagnosticRemoteSupportSettingsInner>
        beginUpdateDiagnosticRemoteSupportSettings(
            String deviceName,
            String resourceGroupName,
            DiagnosticRemoteSupportSettingsInner diagnosticRemoteSupportSettings,
            Context context) {
        return beginUpdateDiagnosticRemoteSupportSettingsAsync(
                deviceName, resourceGroupName, diagnosticRemoteSupportSettings, context)
            .getSyncPoller();
    }

    /**
     * Updates the diagnostic remote support settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param diagnosticRemoteSupportSettings The diagnostic remote support settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the remote support settings of a device on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DiagnosticRemoteSupportSettingsInner> updateDiagnosticRemoteSupportSettingsAsync(
        String deviceName,
        String resourceGroupName,
        DiagnosticRemoteSupportSettingsInner diagnosticRemoteSupportSettings) {
        return beginUpdateDiagnosticRemoteSupportSettingsAsync(
                deviceName, resourceGroupName, diagnosticRemoteSupportSettings)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the diagnostic remote support settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param diagnosticRemoteSupportSettings The diagnostic remote support settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the remote support settings of a device on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DiagnosticRemoteSupportSettingsInner> updateDiagnosticRemoteSupportSettingsAsync(
        String deviceName,
        String resourceGroupName,
        DiagnosticRemoteSupportSettingsInner diagnosticRemoteSupportSettings,
        Context context) {
        return beginUpdateDiagnosticRemoteSupportSettingsAsync(
                deviceName, resourceGroupName, diagnosticRemoteSupportSettings, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the diagnostic remote support settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param diagnosticRemoteSupportSettings The diagnostic remote support settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the remote support settings of a device.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticRemoteSupportSettingsInner updateDiagnosticRemoteSupportSettings(
        String deviceName,
        String resourceGroupName,
        DiagnosticRemoteSupportSettingsInner diagnosticRemoteSupportSettings) {
        return updateDiagnosticRemoteSupportSettingsAsync(
                deviceName, resourceGroupName, diagnosticRemoteSupportSettings)
            .block();
    }

    /**
     * Updates the diagnostic remote support settings on a Data Box Edge/Data Box Gateway device.
     *
     * @param deviceName The device name.
     * @param resourceGroupName The resource group name.
     * @param diagnosticRemoteSupportSettings The diagnostic remote support settings.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the remote support settings of a device.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticRemoteSupportSettingsInner updateDiagnosticRemoteSupportSettings(
        String deviceName,
        String resourceGroupName,
        DiagnosticRemoteSupportSettingsInner diagnosticRemoteSupportSettings,
        Context context) {
        return updateDiagnosticRemoteSupportSettingsAsync(
                deviceName, resourceGroupName, diagnosticRemoteSupportSettings, context)
            .block();
    }
}
