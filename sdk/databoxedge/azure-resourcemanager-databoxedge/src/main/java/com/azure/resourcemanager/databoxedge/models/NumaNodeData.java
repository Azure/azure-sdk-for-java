// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** NUMA node data. */
@Fluent
public final class NumaNodeData {
    /*
     * The NUMA node index.
     */
    @JsonProperty(value = "numaNodeIndex")
    private Integer numaNodeIndex;

    /*
     * The total memory on the NUMA node.
     */
    @JsonProperty(value = "totalMemoryInMb")
    private Long totalMemoryInMb;

    /*
     * The logical cores per core count.
     */
    @JsonProperty(value = "logicalCoreCountPerCore")
    private Integer logicalCoreCountPerCore;

    /*
     * The effective available memory on the NUMA node in MB.
     */
    @JsonProperty(value = "effectiveAvailableMemoryInMb")
    private Long effectiveAvailableMemoryInMb;

    /*
     * The free VCPU indices for the Hpn VMs.
     */
    @JsonProperty(value = "freeVCpuIndexesForHpn")
    private List<Integer> freeVCpuIndexesForHpn;

    /*
     * The VCPU indices for Hpn VMs
     */
    @JsonProperty(value = "vCpuIndexesForHpn")
    private List<Integer> vCpuIndexesForHpn;

    /*
     * The VCPU indices for the root.
     */
    @JsonProperty(value = "vCpuIndexesForRoot")
    private List<Integer> vCpuIndexesForRoot;

    /**
     * Get the numaNodeIndex property: The NUMA node index.
     *
     * @return the numaNodeIndex value.
     */
    public Integer numaNodeIndex() {
        return this.numaNodeIndex;
    }

    /**
     * Set the numaNodeIndex property: The NUMA node index.
     *
     * @param numaNodeIndex the numaNodeIndex value to set.
     * @return the NumaNodeData object itself.
     */
    public NumaNodeData withNumaNodeIndex(Integer numaNodeIndex) {
        this.numaNodeIndex = numaNodeIndex;
        return this;
    }

    /**
     * Get the totalMemoryInMb property: The total memory on the NUMA node.
     *
     * @return the totalMemoryInMb value.
     */
    public Long totalMemoryInMb() {
        return this.totalMemoryInMb;
    }

    /**
     * Set the totalMemoryInMb property: The total memory on the NUMA node.
     *
     * @param totalMemoryInMb the totalMemoryInMb value to set.
     * @return the NumaNodeData object itself.
     */
    public NumaNodeData withTotalMemoryInMb(Long totalMemoryInMb) {
        this.totalMemoryInMb = totalMemoryInMb;
        return this;
    }

    /**
     * Get the logicalCoreCountPerCore property: The logical cores per core count.
     *
     * @return the logicalCoreCountPerCore value.
     */
    public Integer logicalCoreCountPerCore() {
        return this.logicalCoreCountPerCore;
    }

    /**
     * Set the logicalCoreCountPerCore property: The logical cores per core count.
     *
     * @param logicalCoreCountPerCore the logicalCoreCountPerCore value to set.
     * @return the NumaNodeData object itself.
     */
    public NumaNodeData withLogicalCoreCountPerCore(Integer logicalCoreCountPerCore) {
        this.logicalCoreCountPerCore = logicalCoreCountPerCore;
        return this;
    }

    /**
     * Get the effectiveAvailableMemoryInMb property: The effective available memory on the NUMA node in MB.
     *
     * @return the effectiveAvailableMemoryInMb value.
     */
    public Long effectiveAvailableMemoryInMb() {
        return this.effectiveAvailableMemoryInMb;
    }

    /**
     * Set the effectiveAvailableMemoryInMb property: The effective available memory on the NUMA node in MB.
     *
     * @param effectiveAvailableMemoryInMb the effectiveAvailableMemoryInMb value to set.
     * @return the NumaNodeData object itself.
     */
    public NumaNodeData withEffectiveAvailableMemoryInMb(Long effectiveAvailableMemoryInMb) {
        this.effectiveAvailableMemoryInMb = effectiveAvailableMemoryInMb;
        return this;
    }

    /**
     * Get the freeVCpuIndexesForHpn property: The free VCPU indices for the Hpn VMs.
     *
     * @return the freeVCpuIndexesForHpn value.
     */
    public List<Integer> freeVCpuIndexesForHpn() {
        return this.freeVCpuIndexesForHpn;
    }

    /**
     * Set the freeVCpuIndexesForHpn property: The free VCPU indices for the Hpn VMs.
     *
     * @param freeVCpuIndexesForHpn the freeVCpuIndexesForHpn value to set.
     * @return the NumaNodeData object itself.
     */
    public NumaNodeData withFreeVCpuIndexesForHpn(List<Integer> freeVCpuIndexesForHpn) {
        this.freeVCpuIndexesForHpn = freeVCpuIndexesForHpn;
        return this;
    }

    /**
     * Get the vCpuIndexesForHpn property: The VCPU indices for Hpn VMs.
     *
     * @return the vCpuIndexesForHpn value.
     */
    public List<Integer> vCpuIndexesForHpn() {
        return this.vCpuIndexesForHpn;
    }

    /**
     * Set the vCpuIndexesForHpn property: The VCPU indices for Hpn VMs.
     *
     * @param vCpuIndexesForHpn the vCpuIndexesForHpn value to set.
     * @return the NumaNodeData object itself.
     */
    public NumaNodeData withVCpuIndexesForHpn(List<Integer> vCpuIndexesForHpn) {
        this.vCpuIndexesForHpn = vCpuIndexesForHpn;
        return this;
    }

    /**
     * Get the vCpuIndexesForRoot property: The VCPU indices for the root.
     *
     * @return the vCpuIndexesForRoot value.
     */
    public List<Integer> vCpuIndexesForRoot() {
        return this.vCpuIndexesForRoot;
    }

    /**
     * Set the vCpuIndexesForRoot property: The VCPU indices for the root.
     *
     * @param vCpuIndexesForRoot the vCpuIndexesForRoot value to set.
     * @return the NumaNodeData object itself.
     */
    public NumaNodeData withVCpuIndexesForRoot(List<Integer> vCpuIndexesForRoot) {
        this.vCpuIndexesForRoot = vCpuIndexesForRoot;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
