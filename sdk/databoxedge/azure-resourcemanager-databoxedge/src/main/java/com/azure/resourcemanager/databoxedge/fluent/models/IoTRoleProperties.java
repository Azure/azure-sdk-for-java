// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databoxedge.models.IoTDeviceInfo;
import com.azure.resourcemanager.databoxedge.models.MountPointMap;
import com.azure.resourcemanager.databoxedge.models.PlatformType;
import com.azure.resourcemanager.databoxedge.models.RoleStatus;
import java.io.IOException;
import java.util.List;

/**
 * IoT role properties.
 */
@Fluent
public final class IoTRoleProperties implements JsonSerializable<IoTRoleProperties> {
    /*
     * Host OS supported by the IoT role.
     */
    private PlatformType hostPlatform;

    /*
     * IoT device metadata to which data box edge device needs to be connected.
     */
    private IoTDeviceInfo ioTDeviceDetails;

    /*
     * IoT edge device to which the IoT role needs to be configured.
     */
    private IoTDeviceInfo ioTEdgeDeviceDetails;

    /*
     * Mount points of shares in role(s).
     */
    private List<MountPointMap> shareMappings;

    /*
     * Role status.
     */
    private RoleStatus roleStatus;

    /**
     * Creates an instance of IoTRoleProperties class.
     */
    public IoTRoleProperties() {
    }

    /**
     * Get the hostPlatform property: Host OS supported by the IoT role.
     * 
     * @return the hostPlatform value.
     */
    public PlatformType hostPlatform() {
        return this.hostPlatform;
    }

    /**
     * Set the hostPlatform property: Host OS supported by the IoT role.
     * 
     * @param hostPlatform the hostPlatform value to set.
     * @return the IoTRoleProperties object itself.
     */
    public IoTRoleProperties withHostPlatform(PlatformType hostPlatform) {
        this.hostPlatform = hostPlatform;
        return this;
    }

    /**
     * Get the ioTDeviceDetails property: IoT device metadata to which data box edge device needs to be connected.
     * 
     * @return the ioTDeviceDetails value.
     */
    public IoTDeviceInfo ioTDeviceDetails() {
        return this.ioTDeviceDetails;
    }

    /**
     * Set the ioTDeviceDetails property: IoT device metadata to which data box edge device needs to be connected.
     * 
     * @param ioTDeviceDetails the ioTDeviceDetails value to set.
     * @return the IoTRoleProperties object itself.
     */
    public IoTRoleProperties withIoTDeviceDetails(IoTDeviceInfo ioTDeviceDetails) {
        this.ioTDeviceDetails = ioTDeviceDetails;
        return this;
    }

    /**
     * Get the ioTEdgeDeviceDetails property: IoT edge device to which the IoT role needs to be configured.
     * 
     * @return the ioTEdgeDeviceDetails value.
     */
    public IoTDeviceInfo ioTEdgeDeviceDetails() {
        return this.ioTEdgeDeviceDetails;
    }

    /**
     * Set the ioTEdgeDeviceDetails property: IoT edge device to which the IoT role needs to be configured.
     * 
     * @param ioTEdgeDeviceDetails the ioTEdgeDeviceDetails value to set.
     * @return the IoTRoleProperties object itself.
     */
    public IoTRoleProperties withIoTEdgeDeviceDetails(IoTDeviceInfo ioTEdgeDeviceDetails) {
        this.ioTEdgeDeviceDetails = ioTEdgeDeviceDetails;
        return this;
    }

    /**
     * Get the shareMappings property: Mount points of shares in role(s).
     * 
     * @return the shareMappings value.
     */
    public List<MountPointMap> shareMappings() {
        return this.shareMappings;
    }

    /**
     * Set the shareMappings property: Mount points of shares in role(s).
     * 
     * @param shareMappings the shareMappings value to set.
     * @return the IoTRoleProperties object itself.
     */
    public IoTRoleProperties withShareMappings(List<MountPointMap> shareMappings) {
        this.shareMappings = shareMappings;
        return this;
    }

    /**
     * Get the roleStatus property: Role status.
     * 
     * @return the roleStatus value.
     */
    public RoleStatus roleStatus() {
        return this.roleStatus;
    }

    /**
     * Set the roleStatus property: Role status.
     * 
     * @param roleStatus the roleStatus value to set.
     * @return the IoTRoleProperties object itself.
     */
    public IoTRoleProperties withRoleStatus(RoleStatus roleStatus) {
        this.roleStatus = roleStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (hostPlatform() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property hostPlatform in model IoTRoleProperties"));
        }
        if (ioTDeviceDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property ioTDeviceDetails in model IoTRoleProperties"));
        } else {
            ioTDeviceDetails().validate();
        }
        if (ioTEdgeDeviceDetails() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property ioTEdgeDeviceDetails in model IoTRoleProperties"));
        } else {
            ioTEdgeDeviceDetails().validate();
        }
        if (shareMappings() != null) {
            shareMappings().forEach(e -> e.validate());
        }
        if (roleStatus() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property roleStatus in model IoTRoleProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IoTRoleProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("hostPlatform", this.hostPlatform == null ? null : this.hostPlatform.toString());
        jsonWriter.writeJsonField("ioTDeviceDetails", this.ioTDeviceDetails);
        jsonWriter.writeJsonField("ioTEdgeDeviceDetails", this.ioTEdgeDeviceDetails);
        jsonWriter.writeStringField("roleStatus", this.roleStatus == null ? null : this.roleStatus.toString());
        jsonWriter.writeArrayField("shareMappings", this.shareMappings, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IoTRoleProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IoTRoleProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IoTRoleProperties.
     */
    public static IoTRoleProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IoTRoleProperties deserializedIoTRoleProperties = new IoTRoleProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hostPlatform".equals(fieldName)) {
                    deserializedIoTRoleProperties.hostPlatform = PlatformType.fromString(reader.getString());
                } else if ("ioTDeviceDetails".equals(fieldName)) {
                    deserializedIoTRoleProperties.ioTDeviceDetails = IoTDeviceInfo.fromJson(reader);
                } else if ("ioTEdgeDeviceDetails".equals(fieldName)) {
                    deserializedIoTRoleProperties.ioTEdgeDeviceDetails = IoTDeviceInfo.fromJson(reader);
                } else if ("roleStatus".equals(fieldName)) {
                    deserializedIoTRoleProperties.roleStatus = RoleStatus.fromString(reader.getString());
                } else if ("shareMappings".equals(fieldName)) {
                    List<MountPointMap> shareMappings = reader.readArray(reader1 -> MountPointMap.fromJson(reader1));
                    deserializedIoTRoleProperties.shareMappings = shareMappings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIoTRoleProperties;
        });
    }
}
