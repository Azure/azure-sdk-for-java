// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.databoxedge.fluent.models.DeviceCapacityRequestInfoProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Object for Capturing DeviceCapacityRequestInfo. */
@Fluent
public final class DeviceCapacityRequestInfo {
    /*
     * The properties of the Device Capacity Request.
     */
    @JsonProperty(value = "properties", required = true)
    private DeviceCapacityRequestInfoProperties innerProperties = new DeviceCapacityRequestInfoProperties();

    /**
     * Get the innerProperties property: The properties of the Device Capacity Request.
     *
     * @return the innerProperties value.
     */
    private DeviceCapacityRequestInfoProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the vmPlacementQuery property: Array containing the sizes of the VMs for checking if its feasible to create
     * them on the appliance.
     *
     * @return the vmPlacementQuery value.
     */
    public List<List<String>> vmPlacementQuery() {
        return this.innerProperties() == null ? null : this.innerProperties().vmPlacementQuery();
    }

    /**
     * Set the vmPlacementQuery property: Array containing the sizes of the VMs for checking if its feasible to create
     * them on the appliance.
     *
     * @param vmPlacementQuery the vmPlacementQuery value to set.
     * @return the DeviceCapacityRequestInfo object itself.
     */
    public DeviceCapacityRequestInfo withVmPlacementQuery(List<List<String>> vmPlacementQuery) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DeviceCapacityRequestInfoProperties();
        }
        this.innerProperties().withVmPlacementQuery(vmPlacementQuery);
        return this;
    }

    /**
     * Get the vmPlacementResults property: Array of the VMs of the sizes in VmSizes can be provisioned on the
     * appliance.
     *
     * @return the vmPlacementResults value.
     */
    public List<VmPlacementRequestResult> vmPlacementResults() {
        return this.innerProperties() == null ? null : this.innerProperties().vmPlacementResults();
    }

    /**
     * Set the vmPlacementResults property: Array of the VMs of the sizes in VmSizes can be provisioned on the
     * appliance.
     *
     * @param vmPlacementResults the vmPlacementResults value to set.
     * @return the DeviceCapacityRequestInfo object itself.
     */
    public DeviceCapacityRequestInfo withVmPlacementResults(List<VmPlacementRequestResult> vmPlacementResults) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DeviceCapacityRequestInfoProperties();
        }
        this.innerProperties().withVmPlacementResults(vmPlacementResults);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model DeviceCapacityRequestInfo"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DeviceCapacityRequestInfo.class);
}
