// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.databoxedge.models.AsymmetricEncryptedSecret;
import com.azure.resourcemanager.databoxedge.models.RoleStatus;
import com.fasterxml.jackson.annotation.JsonProperty;

/** MEC role properties. */
@Fluent
public final class MecRoleProperties {
    /*
     * Activation key of the MEC.
     */
    @JsonProperty(value = "connectionString")
    private AsymmetricEncryptedSecret connectionString;

    /*
     * Controller Endpoint.
     */
    @JsonProperty(value = "controllerEndpoint")
    private String controllerEndpoint;

    /*
     * Unique Id of the Resource.
     */
    @JsonProperty(value = "resourceUniqueId")
    private String resourceUniqueId;

    /*
     * Role status.
     */
    @JsonProperty(value = "roleStatus", required = true)
    private RoleStatus roleStatus;

    /**
     * Get the connectionString property: Activation key of the MEC.
     *
     * @return the connectionString value.
     */
    public AsymmetricEncryptedSecret connectionString() {
        return this.connectionString;
    }

    /**
     * Set the connectionString property: Activation key of the MEC.
     *
     * @param connectionString the connectionString value to set.
     * @return the MecRoleProperties object itself.
     */
    public MecRoleProperties withConnectionString(AsymmetricEncryptedSecret connectionString) {
        this.connectionString = connectionString;
        return this;
    }

    /**
     * Get the controllerEndpoint property: Controller Endpoint.
     *
     * @return the controllerEndpoint value.
     */
    public String controllerEndpoint() {
        return this.controllerEndpoint;
    }

    /**
     * Set the controllerEndpoint property: Controller Endpoint.
     *
     * @param controllerEndpoint the controllerEndpoint value to set.
     * @return the MecRoleProperties object itself.
     */
    public MecRoleProperties withControllerEndpoint(String controllerEndpoint) {
        this.controllerEndpoint = controllerEndpoint;
        return this;
    }

    /**
     * Get the resourceUniqueId property: Unique Id of the Resource.
     *
     * @return the resourceUniqueId value.
     */
    public String resourceUniqueId() {
        return this.resourceUniqueId;
    }

    /**
     * Set the resourceUniqueId property: Unique Id of the Resource.
     *
     * @param resourceUniqueId the resourceUniqueId value to set.
     * @return the MecRoleProperties object itself.
     */
    public MecRoleProperties withResourceUniqueId(String resourceUniqueId) {
        this.resourceUniqueId = resourceUniqueId;
        return this;
    }

    /**
     * Get the roleStatus property: Role status.
     *
     * @return the roleStatus value.
     */
    public RoleStatus roleStatus() {
        return this.roleStatus;
    }

    /**
     * Set the roleStatus property: Role status.
     *
     * @param roleStatus the roleStatus value to set.
     * @return the MecRoleProperties object itself.
     */
    public MecRoleProperties withRoleStatus(RoleStatus roleStatus) {
        this.roleStatus = roleStatus;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (connectionString() != null) {
            connectionString().validate();
        }
        if (roleStatus() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property roleStatus in model MecRoleProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MecRoleProperties.class);
}
