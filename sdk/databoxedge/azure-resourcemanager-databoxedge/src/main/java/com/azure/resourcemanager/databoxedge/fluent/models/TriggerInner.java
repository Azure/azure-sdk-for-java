// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databoxedge.models.ArmBaseModel;
import com.azure.resourcemanager.databoxedge.models.FileEventTrigger;
import com.azure.resourcemanager.databoxedge.models.PeriodicTimerEventTrigger;
import com.azure.resourcemanager.databoxedge.models.TriggerEventType;
import java.io.IOException;

/**
 * Trigger details.
 */
@Immutable
public class TriggerInner extends ArmBaseModel {
    /*
     * Trigger Kind.
     */
    private TriggerEventType kind = TriggerEventType.fromString("Trigger");

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of TriggerInner class.
     */
    public TriggerInner() {
    }

    /**
     * Get the kind property: Trigger Kind.
     * 
     * @return the kind value.
     */
    public TriggerEventType kind() {
        return this.kind;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TriggerInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TriggerInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TriggerInner.
     */
    public static TriggerInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("FileEvent".equals(discriminatorValue)) {
                    return FileEventTrigger.fromJson(readerToUse.reset());
                } else if ("PeriodicTimerEvent".equals(discriminatorValue)) {
                    return PeriodicTimerEventTrigger.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static TriggerInner fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TriggerInner deserializedTriggerInner = new TriggerInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedTriggerInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedTriggerInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedTriggerInner.type = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    deserializedTriggerInner.kind = TriggerEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTriggerInner;
        });
    }
}
