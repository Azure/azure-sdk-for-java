// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.databoxedge.models.AddonState;
import com.azure.resourcemanager.databoxedge.models.HostPlatformType;
import com.azure.resourcemanager.databoxedge.models.IoTDeviceInfo;
import com.azure.resourcemanager.databoxedge.models.PlatformType;
import com.fasterxml.jackson.annotation.JsonProperty;

/** IoT addon properties. */
@Fluent
public final class IoTAddonProperties {
    /*
     * IoT device metadata to which appliance needs to be connected.
     */
    @JsonProperty(value = "ioTDeviceDetails", required = true)
    private IoTDeviceInfo ioTDeviceDetails;

    /*
     * IoT edge device to which the IoT Addon needs to be configured.
     */
    @JsonProperty(value = "ioTEdgeDeviceDetails", required = true)
    private IoTDeviceInfo ioTEdgeDeviceDetails;

    /*
     * Version of IoT running on the appliance.
     */
    @JsonProperty(value = "version", access = JsonProperty.Access.WRITE_ONLY)
    private String version;

    /*
     * Host OS supported by the IoT addon.
     */
    @JsonProperty(value = "hostPlatform", access = JsonProperty.Access.WRITE_ONLY)
    private PlatformType hostPlatform;

    /*
     * Platform where the runtime is hosted.
     */
    @JsonProperty(value = "hostPlatformType", access = JsonProperty.Access.WRITE_ONLY)
    private HostPlatformType hostPlatformType;

    /*
     * Addon Provisioning State
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private AddonState provisioningState;

    /**
     * Get the ioTDeviceDetails property: IoT device metadata to which appliance needs to be connected.
     *
     * @return the ioTDeviceDetails value.
     */
    public IoTDeviceInfo ioTDeviceDetails() {
        return this.ioTDeviceDetails;
    }

    /**
     * Set the ioTDeviceDetails property: IoT device metadata to which appliance needs to be connected.
     *
     * @param ioTDeviceDetails the ioTDeviceDetails value to set.
     * @return the IoTAddonProperties object itself.
     */
    public IoTAddonProperties withIoTDeviceDetails(IoTDeviceInfo ioTDeviceDetails) {
        this.ioTDeviceDetails = ioTDeviceDetails;
        return this;
    }

    /**
     * Get the ioTEdgeDeviceDetails property: IoT edge device to which the IoT Addon needs to be configured.
     *
     * @return the ioTEdgeDeviceDetails value.
     */
    public IoTDeviceInfo ioTEdgeDeviceDetails() {
        return this.ioTEdgeDeviceDetails;
    }

    /**
     * Set the ioTEdgeDeviceDetails property: IoT edge device to which the IoT Addon needs to be configured.
     *
     * @param ioTEdgeDeviceDetails the ioTEdgeDeviceDetails value to set.
     * @return the IoTAddonProperties object itself.
     */
    public IoTAddonProperties withIoTEdgeDeviceDetails(IoTDeviceInfo ioTEdgeDeviceDetails) {
        this.ioTEdgeDeviceDetails = ioTEdgeDeviceDetails;
        return this;
    }

    /**
     * Get the version property: Version of IoT running on the appliance.
     *
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the hostPlatform property: Host OS supported by the IoT addon.
     *
     * @return the hostPlatform value.
     */
    public PlatformType hostPlatform() {
        return this.hostPlatform;
    }

    /**
     * Get the hostPlatformType property: Platform where the runtime is hosted.
     *
     * @return the hostPlatformType value.
     */
    public HostPlatformType hostPlatformType() {
        return this.hostPlatformType;
    }

    /**
     * Get the provisioningState property: Addon Provisioning State.
     *
     * @return the provisioningState value.
     */
    public AddonState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ioTDeviceDetails() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property ioTDeviceDetails in model IoTAddonProperties"));
        } else {
            ioTDeviceDetails().validate();
        }
        if (ioTEdgeDeviceDetails() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property ioTEdgeDeviceDetails in model IoTAddonProperties"));
        } else {
            ioTEdgeDeviceDetails().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IoTAddonProperties.class);
}
