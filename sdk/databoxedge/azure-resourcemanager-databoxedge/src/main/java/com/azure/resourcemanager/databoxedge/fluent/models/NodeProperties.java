// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databoxedge.models.NodeStatus;
import java.io.IOException;

/**
 * This class represents the nodes in a highly available cluster.
 */
@Immutable
public final class NodeProperties implements JsonSerializable<NodeProperties> {
    /*
     * The current status of the individual node
     */
    private NodeStatus nodeStatus;

    /*
     * Serial number of the Chassis
     */
    private String nodeChassisSerialNumber;

    /*
     * Serial number of the individual node
     */
    private String nodeSerialNumber;

    /*
     * Display Name of the individual node
     */
    private String nodeDisplayName;

    /*
     * Friendly software version name that is currently installed on the node
     */
    private String nodeFriendlySoftwareVersion;

    /*
     * HCS version that is currently installed on the node
     */
    private String nodeHcsVersion;

    /*
     * Guid instance id of the node
     */
    private String nodeInstanceId;

    /**
     * Creates an instance of NodeProperties class.
     */
    public NodeProperties() {
    }

    /**
     * Get the nodeStatus property: The current status of the individual node.
     * 
     * @return the nodeStatus value.
     */
    public NodeStatus nodeStatus() {
        return this.nodeStatus;
    }

    /**
     * Get the nodeChassisSerialNumber property: Serial number of the Chassis.
     * 
     * @return the nodeChassisSerialNumber value.
     */
    public String nodeChassisSerialNumber() {
        return this.nodeChassisSerialNumber;
    }

    /**
     * Get the nodeSerialNumber property: Serial number of the individual node.
     * 
     * @return the nodeSerialNumber value.
     */
    public String nodeSerialNumber() {
        return this.nodeSerialNumber;
    }

    /**
     * Get the nodeDisplayName property: Display Name of the individual node.
     * 
     * @return the nodeDisplayName value.
     */
    public String nodeDisplayName() {
        return this.nodeDisplayName;
    }

    /**
     * Get the nodeFriendlySoftwareVersion property: Friendly software version name that is currently installed on the
     * node.
     * 
     * @return the nodeFriendlySoftwareVersion value.
     */
    public String nodeFriendlySoftwareVersion() {
        return this.nodeFriendlySoftwareVersion;
    }

    /**
     * Get the nodeHcsVersion property: HCS version that is currently installed on the node.
     * 
     * @return the nodeHcsVersion value.
     */
    public String nodeHcsVersion() {
        return this.nodeHcsVersion;
    }

    /**
     * Get the nodeInstanceId property: Guid instance id of the node.
     * 
     * @return the nodeInstanceId value.
     */
    public String nodeInstanceId() {
        return this.nodeInstanceId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NodeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NodeProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NodeProperties.
     */
    public static NodeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NodeProperties deserializedNodeProperties = new NodeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nodeStatus".equals(fieldName)) {
                    deserializedNodeProperties.nodeStatus = NodeStatus.fromString(reader.getString());
                } else if ("nodeChassisSerialNumber".equals(fieldName)) {
                    deserializedNodeProperties.nodeChassisSerialNumber = reader.getString();
                } else if ("nodeSerialNumber".equals(fieldName)) {
                    deserializedNodeProperties.nodeSerialNumber = reader.getString();
                } else if ("nodeDisplayName".equals(fieldName)) {
                    deserializedNodeProperties.nodeDisplayName = reader.getString();
                } else if ("nodeFriendlySoftwareVersion".equals(fieldName)) {
                    deserializedNodeProperties.nodeFriendlySoftwareVersion = reader.getString();
                } else if ("nodeHcsVersion".equals(fieldName)) {
                    deserializedNodeProperties.nodeHcsVersion = reader.getString();
                } else if ("nodeInstanceId".equals(fieldName)) {
                    deserializedNodeProperties.nodeInstanceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNodeProperties;
        });
    }
}
