// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.databoxedge.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.databoxedge.models.AuthenticationType;
import java.io.IOException;

/**
 * Raw Certificate Data.
 */
@Fluent
public final class RawCertificateData implements JsonSerializable<RawCertificateData> {
    /*
     * The authentication type.
     */
    private AuthenticationType authenticationType;

    /*
     * The base64 encoded certificate raw data.
     */
    private String certificate;

    /**
     * Creates an instance of RawCertificateData class.
     */
    public RawCertificateData() {
    }

    /**
     * Get the authenticationType property: The authentication type.
     * 
     * @return the authenticationType value.
     */
    public AuthenticationType authenticationType() {
        return this.authenticationType;
    }

    /**
     * Set the authenticationType property: The authentication type.
     * 
     * @param authenticationType the authenticationType value to set.
     * @return the RawCertificateData object itself.
     */
    public RawCertificateData withAuthenticationType(AuthenticationType authenticationType) {
        this.authenticationType = authenticationType;
        return this;
    }

    /**
     * Get the certificate property: The base64 encoded certificate raw data.
     * 
     * @return the certificate value.
     */
    public String certificate() {
        return this.certificate;
    }

    /**
     * Set the certificate property: The base64 encoded certificate raw data.
     * 
     * @param certificate the certificate value to set.
     * @return the RawCertificateData object itself.
     */
    public RawCertificateData withCertificate(String certificate) {
        this.certificate = certificate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (certificate() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property certificate in model RawCertificateData"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RawCertificateData.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("certificate", this.certificate);
        jsonWriter.writeStringField("authenticationType",
            this.authenticationType == null ? null : this.authenticationType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RawCertificateData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RawCertificateData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RawCertificateData.
     */
    public static RawCertificateData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RawCertificateData deserializedRawCertificateData = new RawCertificateData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("certificate".equals(fieldName)) {
                    deserializedRawCertificateData.certificate = reader.getString();
                } else if ("authenticationType".equals(fieldName)) {
                    deserializedRawCertificateData.authenticationType
                        = AuthenticationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRawCertificateData;
        });
    }
}
