// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.speech.batchtranscription.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * TranscriptionLinks.
 */
@Immutable
public final class TranscriptionLinks implements JsonSerializable<TranscriptionLinks> {
    /*
     * The location to get all files of this entity. See operation "Transcriptions_ListFiles" for more details.
     */
    @Generated
    private String files;

    /**
     * Creates an instance of TranscriptionLinks class.
     */
    @Generated
    public TranscriptionLinks() {
    }

    /**
     * Get the files property: The location to get all files of this entity. See operation "Transcriptions_ListFiles"
     * for more details.
     * 
     * @return the files value.
     */
    @Generated
    public String getFiles() {
        return this.files;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TranscriptionLinks from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TranscriptionLinks if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the TranscriptionLinks.
     */
    @Generated
    public static TranscriptionLinks fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TranscriptionLinks deserializedTranscriptionLinks = new TranscriptionLinks();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("files".equals(fieldName)) {
                    deserializedTranscriptionLinks.files = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTranscriptionLinks;
        });
    }
}
