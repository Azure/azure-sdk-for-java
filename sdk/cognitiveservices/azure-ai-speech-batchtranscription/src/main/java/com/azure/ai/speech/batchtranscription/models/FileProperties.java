// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.speech.batchtranscription.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * FileProperties.
 */
@Immutable
public final class FileProperties implements JsonSerializable<FileProperties> {
    /*
     * The total duration in milliseconds of the file in case this file is an audio file.
     */
    @Generated
    private final int durationMilliseconds;

    /*
     * The size of the data in bytes.
     */
    @Generated
    private final int size;

    /**
     * Creates an instance of FileProperties class.
     * 
     * @param durationMilliseconds the durationMilliseconds value to set.
     * @param size the size value to set.
     */
    @Generated
    private FileProperties(int durationMilliseconds, int size) {
        this.durationMilliseconds = durationMilliseconds;
        this.size = size;
    }

    /**
     * Get the durationMilliseconds property: The total duration in milliseconds of the file in case this file is an
     * audio file.
     * 
     * @return the durationMilliseconds value.
     */
    @Generated
    public int getDurationMilliseconds() {
        return this.durationMilliseconds;
    }

    /**
     * Get the size property: The size of the data in bytes.
     * 
     * @return the size value.
     */
    @Generated
    public int getSize() {
        return this.size;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("durationMilliseconds", this.durationMilliseconds);
        jsonWriter.writeIntField("size", this.size);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FileProperties.
     */
    @Generated
    public static FileProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int durationMilliseconds = 0;
            int size = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("durationMilliseconds".equals(fieldName)) {
                    durationMilliseconds = reader.getInt();
                } else if ("size".equals(fieldName)) {
                    size = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return new FileProperties(durationMilliseconds, size);
        });
    }
}
