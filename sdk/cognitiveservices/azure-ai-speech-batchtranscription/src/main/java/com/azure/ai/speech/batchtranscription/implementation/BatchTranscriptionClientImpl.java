// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.speech.batchtranscription.implementation;

import com.azure.ai.speech.batchtranscription.BatchTranscriptionServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the BatchTranscriptionClient type.
 */
public final class BatchTranscriptionClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final BatchTranscriptionClientService service;

    /**
     * Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus.api.cognitive.microsoft.com.
     */
    private final String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus.api.cognitive.microsoft.com.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final BatchTranscriptionServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public BatchTranscriptionServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of BatchTranscriptionClient client.
     * 
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus.api.cognitive.microsoft.com.
     * @param serviceVersion Service version.
     */
    public BatchTranscriptionClientImpl(String endpoint, BatchTranscriptionServiceVersion serviceVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of BatchTranscriptionClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus.api.cognitive.microsoft.com.
     * @param serviceVersion Service version.
     */
    public BatchTranscriptionClientImpl(HttpPipeline httpPipeline, String endpoint,
        BatchTranscriptionServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of BatchTranscriptionClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus.api.cognitive.microsoft.com.
     * @param serviceVersion Service version.
     */
    public BatchTranscriptionClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint,
        BatchTranscriptionServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service
            = RestProxy.create(BatchTranscriptionClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for BatchTranscriptionClient to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{endpoint}/speechtotext")
    @ServiceInterface(name = "BatchTranscriptionClient")
    public interface BatchTranscriptionClientService {
        @Post("/transcriptions:submit")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> startTranscription(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData resource,
            RequestOptions requestOptions, Context context);

        @Post("/transcriptions:submit")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> startTranscriptionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData resource,
            RequestOptions requestOptions, Context context);

        @Get("/transcriptions/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTranscription(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/transcriptions/{id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getTranscriptionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/transcriptions/{id}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteTranscription(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id, RequestOptions requestOptions,
            Context context);

        @Delete("/transcriptions/{id}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteTranscriptionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id, RequestOptions requestOptions,
            Context context);

        @Get("/transcriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listTranscriptions(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/transcriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listTranscriptionsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/transcriptions/{id}/files")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listTranscriptionFiles(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/transcriptions/{id}/files")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listTranscriptionFilesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("id") String id,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listTranscriptionsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listTranscriptionsNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listTranscriptionFilesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listTranscriptionFilesNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Starts a new transcription job.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     id: String (Required)
     *     self: String (Required)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     id: String (Required)
     *     self: String (Required)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return transcription along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> startTranscriptionWithResponseAsync(BinaryData resource,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.startTranscription(this.getEndpoint(),
            this.getServiceVersion().getVersion(), contentType, accept, resource, requestOptions, context));
    }

    /**
     * Starts a new transcription job.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     id: String (Required)
     *     self: String (Required)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     id: String (Required)
     *     self: String (Required)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return transcription along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> startTranscriptionWithResponse(BinaryData resource, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.startTranscriptionSync(this.getEndpoint(), this.getServiceVersion().getVersion(), contentType,
            accept, resource, requestOptions, Context.NONE);
    }

    /**
     * Gets the transcription identified by the given ID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     id: String (Required)
     *     self: String (Required)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param id The id of this entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the transcription identified by the given ID along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTranscriptionWithResponseAsync(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getTranscription(this.getEndpoint(),
            this.getServiceVersion().getVersion(), id, accept, requestOptions, context));
    }

    /**
     * Gets the transcription identified by the given ID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     id: String (Required)
     *     self: String (Required)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param id The id of this entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the transcription identified by the given ID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTranscriptionWithResponse(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getTranscriptionSync(this.getEndpoint(), this.getServiceVersion().getVersion(), id, accept,
            requestOptions, Context.NONE);
    }

    /**
     * Deletes the specified transcription task.
     * 
     * @param id The id of this entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTranscriptionWithResponseAsync(String id, RequestOptions requestOptions) {
        return FluxUtil.withContext(context -> service.deleteTranscription(this.getEndpoint(),
            this.getServiceVersion().getVersion(), id, requestOptions, context));
    }

    /**
     * Deletes the specified transcription task.
     * 
     * @param id The id of this entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTranscriptionWithResponse(String id, RequestOptions requestOptions) {
        return service.deleteTranscriptionSync(this.getEndpoint(), this.getServiceVersion().getVersion(), id,
            requestOptions, Context.NONE);
    }

    /**
     * Gets a list of transcriptions for the authenticated subscription.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     id: String (Required)
     *     self: String (Required)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of transcriptions for the authenticated subscription along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listTranscriptionsSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listTranscriptions(this.getEndpoint(),
                this.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "values"), getNextLink(res.getValue(), "@nextLink"), null));
    }

    /**
     * Gets a list of transcriptions for the authenticated subscription.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     id: String (Required)
     *     self: String (Required)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of transcriptions for the authenticated subscription as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listTranscriptionsAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listTranscriptionsSinglePageAsync(requestOptions),
            nextLink -> listTranscriptionsNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a list of transcriptions for the authenticated subscription.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     id: String (Required)
     *     self: String (Required)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of transcriptions for the authenticated subscription along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listTranscriptionsSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listTranscriptionsSync(this.getEndpoint(),
            this.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "values"), getNextLink(res.getValue(), "@nextLink"), null);
    }

    /**
     * Gets a list of transcriptions for the authenticated subscription.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     id: String (Required)
     *     self: String (Required)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of transcriptions for the authenticated subscription as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listTranscriptions(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listTranscriptionsSinglePage(requestOptions),
            nextLink -> listTranscriptionsNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets the files of the transcription identified by the given ID.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     createdDateTime: OffsetDateTime (Required)
     *     kind: String(AcousticDataArchive/AcousticDataTranscriptionV2/Audio/DatasetReport/EvaluationDetails/LanguageData/ModelReport/OutputFormattingData/PronunciationData/Transcription/TranscriptionReport) (Required)
     *     links (Required): {
     *         contentUrl: String (Required)
     *     }
     *     displayName: String (Required)
     *     properties (Required): {
     *         durationMilliseconds: int (Required)
     *         size: int (Required)
     *     }
     *     self: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param id The id of this entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the files of the transcription identified by the given ID along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listTranscriptionFilesSinglePageAsync(String id,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listTranscriptionFiles(this.getEndpoint(),
                this.getServiceVersion().getVersion(), id, accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "values"), getNextLink(res.getValue(), "@nextLink"), null));
    }

    /**
     * Gets the files of the transcription identified by the given ID.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     createdDateTime: OffsetDateTime (Required)
     *     kind: String(AcousticDataArchive/AcousticDataTranscriptionV2/Audio/DatasetReport/EvaluationDetails/LanguageData/ModelReport/OutputFormattingData/PronunciationData/Transcription/TranscriptionReport) (Required)
     *     links (Required): {
     *         contentUrl: String (Required)
     *     }
     *     displayName: String (Required)
     *     properties (Required): {
     *         durationMilliseconds: int (Required)
     *         size: int (Required)
     *     }
     *     self: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param id The id of this entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the files of the transcription identified by the given ID as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listTranscriptionFilesAsync(String id, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listTranscriptionFilesSinglePageAsync(id, requestOptions),
            nextLink -> listTranscriptionFilesNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets the files of the transcription identified by the given ID.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     createdDateTime: OffsetDateTime (Required)
     *     kind: String(AcousticDataArchive/AcousticDataTranscriptionV2/Audio/DatasetReport/EvaluationDetails/LanguageData/ModelReport/OutputFormattingData/PronunciationData/Transcription/TranscriptionReport) (Required)
     *     links (Required): {
     *         contentUrl: String (Required)
     *     }
     *     displayName: String (Required)
     *     properties (Required): {
     *         durationMilliseconds: int (Required)
     *         size: int (Required)
     *     }
     *     self: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param id The id of this entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the files of the transcription identified by the given ID along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listTranscriptionFilesSinglePage(String id, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listTranscriptionFilesSync(this.getEndpoint(),
            this.getServiceVersion().getVersion(), id, accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "values"), getNextLink(res.getValue(), "@nextLink"), null);
    }

    /**
     * Gets the files of the transcription identified by the given ID.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     createdDateTime: OffsetDateTime (Required)
     *     kind: String(AcousticDataArchive/AcousticDataTranscriptionV2/Audio/DatasetReport/EvaluationDetails/LanguageData/ModelReport/OutputFormattingData/PronunciationData/Transcription/TranscriptionReport) (Required)
     *     links (Required): {
     *         contentUrl: String (Required)
     *     }
     *     displayName: String (Required)
     *     properties (Required): {
     *         durationMilliseconds: int (Required)
     *         size: int (Required)
     *     }
     *     self: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param id The id of this entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the files of the transcription identified by the given ID as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listTranscriptionFiles(String id, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listTranscriptionFilesSinglePage(id, requestOptions),
            nextLink -> listTranscriptionFilesNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     id: String (Required)
     *     self: String (Required)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of transcriptions for the authenticated subscription along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listTranscriptionsNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.listTranscriptionsNext(nextLink, this.getEndpoint(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "values"), getNextLink(res.getValue(), "@nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     id: String (Required)
     *     self: String (Required)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of transcriptions for the authenticated subscription along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listTranscriptionsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.listTranscriptionsNextSync(nextLink, this.getEndpoint(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "values"), getNextLink(res.getValue(), "@nextLink"), null);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     createdDateTime: OffsetDateTime (Required)
     *     kind: String(AcousticDataArchive/AcousticDataTranscriptionV2/Audio/DatasetReport/EvaluationDetails/LanguageData/ModelReport/OutputFormattingData/PronunciationData/Transcription/TranscriptionReport) (Required)
     *     links (Required): {
     *         contentUrl: String (Required)
     *     }
     *     displayName: String (Required)
     *     properties (Required): {
     *         durationMilliseconds: int (Required)
     *         size: int (Required)
     *     }
     *     self: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the files of the transcription identified by the given ID along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listTranscriptionFilesNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listTranscriptionFilesNext(nextLink, this.getEndpoint(), accept,
                requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "values"), getNextLink(res.getValue(), "@nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     createdDateTime: OffsetDateTime (Required)
     *     kind: String(AcousticDataArchive/AcousticDataTranscriptionV2/Audio/DatasetReport/EvaluationDetails/LanguageData/ModelReport/OutputFormattingData/PronunciationData/Transcription/TranscriptionReport) (Required)
     *     links (Required): {
     *         contentUrl: String (Required)
     *     }
     *     displayName: String (Required)
     *     properties (Required): {
     *         durationMilliseconds: int (Required)
     *         size: int (Required)
     *     }
     *     self: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the files of the transcription identified by the given ID along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listTranscriptionFilesNextSinglePage(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listTranscriptionFilesNextSync(nextLink, this.getEndpoint(), accept,
            requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "values"), getNextLink(res.getValue(), "@nextLink"), null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
