// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.speech.batchtranscription;

import com.azure.ai.speech.batchtranscription.implementation.BatchTranscriptionClientImpl;
import com.azure.ai.speech.batchtranscription.models.TranscriptionFile;
import com.azure.ai.speech.batchtranscription.models.TranscriptionJob;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/**
 * Initializes a new instance of the synchronous BatchTranscriptionClient type.
 */
@ServiceClient(builder = BatchTranscriptionClientBuilder.class)
public final class BatchTranscriptionClient {
    @Generated
    private final BatchTranscriptionClientImpl serviceClient;

    /**
     * Initializes an instance of BatchTranscriptionClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    BatchTranscriptionClient(BatchTranscriptionClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Starts a new transcription job.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     id: String (Required)
     *     self: String (Required)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     id: String (Required)
     *     self: String (Required)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param resource The resource instance.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return transcription along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> startTranscriptionWithResponse(BinaryData resource, RequestOptions requestOptions) {
        return this.serviceClient.startTranscriptionWithResponse(resource, requestOptions);
    }

    /**
     * Gets the transcription identified by the given ID.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     id: String (Required)
     *     self: String (Required)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param id The id of this entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the transcription identified by the given ID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTranscriptionWithResponse(String id, RequestOptions requestOptions) {
        return this.serviceClient.getTranscriptionWithResponse(id, requestOptions);
    }

    /**
     * Deletes the specified transcription task.
     * 
     * @param id The id of this entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteTranscriptionWithResponse(String id, RequestOptions requestOptions) {
        return this.serviceClient.deleteTranscriptionWithResponse(id, requestOptions);
    }

    /**
     * Gets a list of transcriptions for the authenticated subscription.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     links (Optional): {
     *         files: String (Optional)
     *     }
     *     properties (Required): {
     *         wordLevelTimestampsEnabled: Boolean (Optional)
     *         displayFormWordLevelTimestampsEnabled: Boolean (Optional)
     *         durationMilliseconds: Integer (Optional)
     *         channels (Optional): [
     *             int (Optional)
     *         ]
     *         destinationContainerUrl: String (Optional)
     *         punctuationMode: String(None/Dictated/Automatic/DictatedAndAutomatic) (Optional)
     *         profanityFilterMode: String(None/Removed/Tags/Masked) (Optional)
     *         timeToLiveHours: int (Required)
     *         error (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *         }
     *         diarization (Optional): {
     *             enabled: boolean (Required)
     *             maxSpeakers: int (Required)
     *         }
     *         languageIdentification (Optional): {
     *             mode: String(Continuous/Single) (Optional)
     *             candidateLocales (Required): [
     *                 String (Required)
     *             ]
     *             speechModelMapping (Optional): {
     *                 String (Required): {
     *                     self: String (Required)
     *                 }
     *             }
     *         }
     *     }
     *     id: String (Required)
     *     self: String (Required)
     *     model (Optional): (recursive schema, see model above)
     *     dataset (Optional): (recursive schema, see dataset above)
     *     contentUrls (Optional): [
     *         String (Optional)
     *     ]
     *     contentContainerUrl: String (Optional)
     *     locale: String (Required)
     *     displayName: String (Required)
     *     description: String (Optional)
     *     customProperties (Optional): {
     *         String: String (Required)
     *     }
     *     lastActionDateTime: OffsetDateTime (Optional)
     *     status: String(NotStarted/Running/Succeeded/Failed) (Required)
     *     createdDateTime: OffsetDateTime (Optional)
     * }
     * }
     * </pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a list of transcriptions for the authenticated subscription as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listTranscriptions(RequestOptions requestOptions) {
        return this.serviceClient.listTranscriptions(requestOptions);
    }

    /**
     * Gets the files of the transcription identified by the given ID.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of result items to return.</td></tr>
     * <tr><td>skip</td><td>Integer</td><td>No</td><td>The number of result items to skip.</td></tr>
     * <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     createdDateTime: OffsetDateTime (Required)
     *     kind: String(AcousticDataArchive/AcousticDataTranscriptionV2/Audio/DatasetReport/EvaluationDetails/LanguageData/ModelReport/OutputFormattingData/PronunciationData/Transcription/TranscriptionReport) (Required)
     *     links (Required): {
     *         contentUrl: String (Required)
     *     }
     *     displayName: String (Required)
     *     properties (Required): {
     *         durationMilliseconds: int (Required)
     *         size: int (Required)
     *     }
     *     self: String (Required)
     * }
     * }
     * </pre>
     * 
     * @param id The id of this entity.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the files of the transcription identified by the given ID as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listTranscriptionFiles(String id, RequestOptions requestOptions) {
        return this.serviceClient.listTranscriptionFiles(id, requestOptions);
    }

    /**
     * Starts a new transcription job.
     * 
     * @param resource The resource instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return transcription.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TranscriptionJob startTranscription(TranscriptionJob resource) {
        // Generated convenience method for startTranscriptionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return startTranscriptionWithResponse(BinaryData.fromObject(resource), requestOptions).getValue()
            .toObject(TranscriptionJob.class);
    }

    /**
     * Gets the transcription identified by the given ID.
     * 
     * @param id The id of this entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the transcription identified by the given ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TranscriptionJob getTranscription(String id) {
        // Generated convenience method for getTranscriptionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTranscriptionWithResponse(id, requestOptions).getValue().toObject(TranscriptionJob.class);
    }

    /**
     * Deletes the specified transcription task.
     * 
     * @param id The id of this entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTranscription(String id) {
        // Generated convenience method for deleteTranscriptionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteTranscriptionWithResponse(id, requestOptions).getValue();
    }

    /**
     * Gets a list of transcriptions for the authenticated subscription.
     * 
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param filter Filter the result list using the given expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of transcriptions for the authenticated subscription as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TranscriptionJob> listTranscriptions(Integer top, Integer skip, String filter) {
        // Generated convenience method for listTranscriptions
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        return serviceClient.listTranscriptions(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TranscriptionJob.class));
    }

    /**
     * Gets a list of transcriptions for the authenticated subscription.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of transcriptions for the authenticated subscription as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TranscriptionJob> listTranscriptions() {
        // Generated convenience method for listTranscriptions
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listTranscriptions(requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TranscriptionJob.class));
    }

    /**
     * Gets the files of the transcription identified by the given ID.
     * 
     * @param id The id of this entity.
     * @param top The number of result items to return.
     * @param skip The number of result items to skip.
     * @param filter Filter the result list using the given expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the files of the transcription identified by the given ID as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TranscriptionFile> listTranscriptionFiles(String id, Integer top, Integer skip,
        String filter) {
        // Generated convenience method for listTranscriptionFiles
        RequestOptions requestOptions = new RequestOptions();
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip), false);
        }
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter, false);
        }
        return serviceClient.listTranscriptionFiles(id, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TranscriptionFile.class));
    }

    /**
     * Gets the files of the transcription identified by the given ID.
     * 
     * @param id The id of this entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the files of the transcription identified by the given ID as paginated response with
     * {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TranscriptionFile> listTranscriptionFiles(String id) {
        // Generated convenience method for listTranscriptionFiles
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listTranscriptionFiles(id, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(TranscriptionFile.class));
    }
}
