// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.speech.batchtranscription.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * LanguageIdentificationProperties.
 */
@Fluent
public final class LanguageIdentificationProperties implements JsonSerializable<LanguageIdentificationProperties> {
    /*
     * The mode used for language identification.
     */
    @Generated
    private LanguageIdentificationMode mode;

    /*
     * The candidate locales for language identification (example ["en-US", "de-DE", "es-ES"]). A minimum of 2 and a
     * maximum of 10 candidate locales, including the main locale for the transcription, is supported for continuous
     * mode. For single language identification, the maximum number of candidate locales is unbounded.
     */
    @Generated
    private final List<String> candidateLocales;

    /*
     * An optional mapping of locales to speech model entities. If no model is given for a locale, the default base
     * model is used.
     * Keys must be locales contained in the candidate locales, values are entities for models of the respective
     * locales.
     */
    @Generated
    private Map<String, EntityReference> speechModelMapping;

    /**
     * Creates an instance of LanguageIdentificationProperties class.
     * 
     * @param candidateLocales the candidateLocales value to set.
     */
    @Generated
    public LanguageIdentificationProperties(List<String> candidateLocales) {
        this.candidateLocales = candidateLocales;
    }

    /**
     * Get the mode property: The mode used for language identification.
     * 
     * @return the mode value.
     */
    @Generated
    public LanguageIdentificationMode getMode() {
        return this.mode;
    }

    /**
     * Set the mode property: The mode used for language identification.
     * 
     * @param mode the mode value to set.
     * @return the LanguageIdentificationProperties object itself.
     */
    @Generated
    public LanguageIdentificationProperties setMode(LanguageIdentificationMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the candidateLocales property: The candidate locales for language identification (example ["en-US", "de-DE",
     * "es-ES"]). A minimum of 2 and a maximum of 10 candidate locales, including the main locale for the transcription,
     * is supported for continuous mode. For single language identification, the maximum number of candidate locales is
     * unbounded.
     * 
     * @return the candidateLocales value.
     */
    @Generated
    public List<String> getCandidateLocales() {
        return this.candidateLocales;
    }

    /**
     * Get the speechModelMapping property: An optional mapping of locales to speech model entities. If no model is
     * given for a locale, the default base model is used.
     * Keys must be locales contained in the candidate locales, values are entities for models of the respective
     * locales.
     * 
     * @return the speechModelMapping value.
     */
    @Generated
    public Map<String, EntityReference> getSpeechModelMapping() {
        return this.speechModelMapping;
    }

    /**
     * Set the speechModelMapping property: An optional mapping of locales to speech model entities. If no model is
     * given for a locale, the default base model is used.
     * Keys must be locales contained in the candidate locales, values are entities for models of the respective
     * locales.
     * 
     * @param speechModelMapping the speechModelMapping value to set.
     * @return the LanguageIdentificationProperties object itself.
     */
    @Generated
    public LanguageIdentificationProperties setSpeechModelMapping(Map<String, EntityReference> speechModelMapping) {
        this.speechModelMapping = speechModelMapping;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("candidateLocales", this.candidateLocales,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        jsonWriter.writeMapField("speechModelMapping", this.speechModelMapping,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LanguageIdentificationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LanguageIdentificationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LanguageIdentificationProperties.
     */
    @Generated
    public static LanguageIdentificationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> candidateLocales = null;
            LanguageIdentificationMode mode = null;
            Map<String, EntityReference> speechModelMapping = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("candidateLocales".equals(fieldName)) {
                    candidateLocales = reader.readArray(reader1 -> reader1.getString());
                } else if ("mode".equals(fieldName)) {
                    mode = LanguageIdentificationMode.fromString(reader.getString());
                } else if ("speechModelMapping".equals(fieldName)) {
                    speechModelMapping = reader.readMap(reader1 -> EntityReference.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            LanguageIdentificationProperties deserializedLanguageIdentificationProperties
                = new LanguageIdentificationProperties(candidateLocales);
            deserializedLanguageIdentificationProperties.mode = mode;
            deserializedLanguageIdentificationProperties.speechModelMapping = speechModelMapping;

            return deserializedLanguageIdentificationProperties;
        });
    }
}
