// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.speech.batchtranscription.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Speaker Identification Properties.
 */
@Immutable
public final class DiarizationProperties implements JsonSerializable<DiarizationProperties> {
    /*
     * A value indicating whether speaker identification is enabled.
     */
    @Generated
    private final boolean enabled;

    /*
     * A hint for the maximum number of speakers for diarization. Must be greater than 1 and less than 36.
     */
    @Generated
    private final int maxSpeakers;

    /**
     * Creates an instance of DiarizationProperties class.
     * 
     * @param enabled the enabled value to set.
     * @param maxSpeakers the maxSpeakers value to set.
     */
    @Generated
    public DiarizationProperties(boolean enabled, int maxSpeakers) {
        this.enabled = enabled;
        this.maxSpeakers = maxSpeakers;
    }

    /**
     * Get the enabled property: A value indicating whether speaker identification is enabled.
     * 
     * @return the enabled value.
     */
    @Generated
    public boolean isEnabled() {
        return this.enabled;
    }

    /**
     * Get the maxSpeakers property: A hint for the maximum number of speakers for diarization. Must be greater than 1
     * and less than 36.
     * 
     * @return the maxSpeakers value.
     */
    @Generated
    public int getMaxSpeakers() {
        return this.maxSpeakers;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeIntField("maxSpeakers", this.maxSpeakers);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiarizationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiarizationProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DiarizationProperties.
     */
    @Generated
    public static DiarizationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean enabled = false;
            int maxSpeakers = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    enabled = reader.getBoolean();
                } else if ("maxSpeakers".equals(fieldName)) {
                    maxSpeakers = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return new DiarizationProperties(enabled, maxSpeakers);
        });
    }
}
