// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.cognitiveservices.anomalydetector;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/** Initializes a new instance of the synchronous AnomalyDetectorClient type. */
@ServiceClient(builder = AnomalyDetectorClientBuilder.class)
public final class AnomalyDetectorClient {
    @Generated private final AnomalyDetectorAsyncClient asyncClient;

    /**
     * Initializes an instance of AnomalyDetectorClient class.
     *
     * @param asyncClient the async client.
     */
    @Generated
    AnomalyDetectorClient(AnomalyDetectorAsyncClient asyncClient) {
        this.asyncClient = asyncClient;
    }

    /**
     * This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     series: [
     *         {
     *             timestamp: String
     *             value: float
     *         }
     *     ]
     *     granularity: String(yearly/monthly/weekly/daily/hourly/minutely/secondly/microsecond/none)
     *     customInterval: Integer
     *     period: Integer
     *     maxAnomalyRatio: Float
     *     sensitivity: Integer
     *     imputeMode: String(auto/previous/linear/fixed/zero/notFill)
     *     imputeFixedValue: Float
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     period: int
     *     expectedValues: [
     *         float
     *     ]
     *     upperMargins: [
     *         float
     *     ]
     *     lowerMargins: [
     *         float
     *     ]
     *     isAnomaly: [
     *         boolean
     *     ]
     *     isNegativeAnomaly: [
     *         boolean
     *     ]
     *     isPositiveAnomaly: [
     *         boolean
     *     ]
     *     severity: [
     *         float
     *     ]
     * }
     * }</pre>
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response of entire anomaly detection along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> detectEntireSeriesWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.asyncClient.detectEntireSeriesWithResponse(body, requestOptions).block();
    }

    /**
     * This operation generates a model using points before the latest one. With this method, only historical points are
     * used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     series: [
     *         {
     *             timestamp: String
     *             value: float
     *         }
     *     ]
     *     granularity: String(yearly/monthly/weekly/daily/hourly/minutely/secondly/microsecond/none)
     *     customInterval: Integer
     *     period: Integer
     *     maxAnomalyRatio: Float
     *     sensitivity: Integer
     *     imputeMode: String(auto/previous/linear/fixed/zero/notFill)
     *     imputeFixedValue: Float
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     period: int
     *     suggestedWindow: int
     *     expectedValue: float
     *     upperMargin: float
     *     lowerMargin: float
     *     isAnomaly: boolean
     *     isNegativeAnomaly: boolean
     *     isPositiveAnomaly: boolean
     *     severity: Float
     * }
     * }</pre>
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response of last anomaly detection along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> detectLastPointWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.asyncClient.detectLastPointWithResponse(body, requestOptions).block();
    }

    /**
     * Evaluate change point score of every series point.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     series: [
     *         {
     *             timestamp: String
     *             value: float
     *         }
     *     ]
     *     granularity: String(yearly/monthly/weekly/daily/hourly/minutely/secondly/microsecond/none)
     *     customInterval: Integer
     *     period: Integer
     *     stableTrendWindow: Integer
     *     threshold: Float
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     period: Integer
     *     isChangePoint: [
     *         boolean
     *     ]
     *     confidenceScores: [
     *         float
     *     ]
     * }
     * }</pre>
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response of change point detection along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> detectChangePointWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.asyncClient.detectChangePointWithResponse(body, requestOptions).block();
    }
}
