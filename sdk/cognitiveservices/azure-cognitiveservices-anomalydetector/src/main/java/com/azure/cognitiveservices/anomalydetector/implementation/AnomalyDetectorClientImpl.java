// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.cognitiveservices.anomalydetector.implementation;

import com.azure.cognitiveservices.anomalydetector.AnomalyDetectorServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the AnomalyDetectorClient type. */
public final class AnomalyDetectorClientImpl {
    /** The proxy service used to perform REST calls. */
    private final AnomalyDetectorClientService service;

    /**
     * Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus2.api.cognitive.microsoft.com).
     */
    private final String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus2.api.cognitive.microsoft.com).
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** Service version. */
    private final AnomalyDetectorServiceVersion serviceVersion;

    /**
     * Gets Service version.
     *
     * @return the serviceVersion value.
     */
    public AnomalyDetectorServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of AnomalyDetectorClient client.
     *
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     * @param serviceVersion Service version.
     */
    public AnomalyDetectorClientImpl(String endpoint, AnomalyDetectorServiceVersion serviceVersion) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                endpoint,
                serviceVersion);
    }

    /**
     * Initializes an instance of AnomalyDetectorClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     * @param serviceVersion Service version.
     */
    public AnomalyDetectorClientImpl(
            HttpPipeline httpPipeline, String endpoint, AnomalyDetectorServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of AnomalyDetectorClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     * @param serviceVersion Service version.
     */
    public AnomalyDetectorClientImpl(
            HttpPipeline httpPipeline,
            SerializerAdapter serializerAdapter,
            String endpoint,
            AnomalyDetectorServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service =
                RestProxy.create(AnomalyDetectorClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for AnomalyDetectorClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{Endpoint}/anomalydetector/{ApiVersion}")
    @ServiceInterface(name = "AnomalyDetectorClien")
    private interface AnomalyDetectorClientService {
        @Post("/timeseries/entire/detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> detectEntireSeries(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Post("/timeseries/last/detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> detectLastPoint(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Post("/timeseries/changepoint/detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> detectChangePoint(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     series: [
     *         {
     *             timestamp: String
     *             value: float
     *         }
     *     ]
     *     granularity: String(yearly/monthly/weekly/daily/hourly/minutely/secondly/microsecond/none)
     *     customInterval: Integer
     *     period: Integer
     *     maxAnomalyRatio: Float
     *     sensitivity: Integer
     *     imputeMode: String(auto/previous/linear/fixed/zero/notFill)
     *     imputeFixedValue: Float
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     period: int
     *     expectedValues: [
     *         float
     *     ]
     *     upperMargins: [
     *         float
     *     ]
     *     lowerMargins: [
     *         float
     *     ]
     *     isAnomaly: [
     *         boolean
     *     ]
     *     isNegativeAnomaly: [
     *         boolean
     *     ]
     *     isPositiveAnomaly: [
     *         boolean
     *     ]
     *     severity: [
     *         float
     *     ]
     * }
     * }</pre>
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response of entire anomaly detection along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> detectEntireSeriesWithResponseAsync(
            BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.detectEntireSeries(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                body,
                                requestOptions,
                                context));
    }

    /**
     * This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     series: [
     *         {
     *             timestamp: String
     *             value: float
     *         }
     *     ]
     *     granularity: String(yearly/monthly/weekly/daily/hourly/minutely/secondly/microsecond/none)
     *     customInterval: Integer
     *     period: Integer
     *     maxAnomalyRatio: Float
     *     sensitivity: Integer
     *     imputeMode: String(auto/previous/linear/fixed/zero/notFill)
     *     imputeFixedValue: Float
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     period: int
     *     expectedValues: [
     *         float
     *     ]
     *     upperMargins: [
     *         float
     *     ]
     *     lowerMargins: [
     *         float
     *     ]
     *     isAnomaly: [
     *         boolean
     *     ]
     *     isNegativeAnomaly: [
     *         boolean
     *     ]
     *     isPositiveAnomaly: [
     *         boolean
     *     ]
     *     severity: [
     *         float
     *     ]
     * }
     * }</pre>
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response of entire anomaly detection along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> detectEntireSeriesWithResponseAsync(
            BinaryData body, RequestOptions requestOptions, Context context) {
        return service.detectEntireSeries(
                this.getEndpoint(), this.getServiceVersion().getVersion(), body, requestOptions, context);
    }

    /**
     * This operation generates a model with an entire series, each point is detected with the same model. With this
     * method, points before and after a certain point are used to determine whether it is an anomaly. The entire
     * detection can give user an overall status of the time series.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     series: [
     *         {
     *             timestamp: String
     *             value: float
     *         }
     *     ]
     *     granularity: String(yearly/monthly/weekly/daily/hourly/minutely/secondly/microsecond/none)
     *     customInterval: Integer
     *     period: Integer
     *     maxAnomalyRatio: Float
     *     sensitivity: Integer
     *     imputeMode: String(auto/previous/linear/fixed/zero/notFill)
     *     imputeFixedValue: Float
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     period: int
     *     expectedValues: [
     *         float
     *     ]
     *     upperMargins: [
     *         float
     *     ]
     *     lowerMargins: [
     *         float
     *     ]
     *     isAnomaly: [
     *         boolean
     *     ]
     *     isNegativeAnomaly: [
     *         boolean
     *     ]
     *     isPositiveAnomaly: [
     *         boolean
     *     ]
     *     severity: [
     *         float
     *     ]
     * }
     * }</pre>
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response of entire anomaly detection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> detectEntireSeriesWithResponse(BinaryData body, RequestOptions requestOptions) {
        return detectEntireSeriesWithResponseAsync(body, requestOptions).block();
    }

    /**
     * This operation generates a model using points before the latest one. With this method, only historical points are
     * used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     series: [
     *         {
     *             timestamp: String
     *             value: float
     *         }
     *     ]
     *     granularity: String(yearly/monthly/weekly/daily/hourly/minutely/secondly/microsecond/none)
     *     customInterval: Integer
     *     period: Integer
     *     maxAnomalyRatio: Float
     *     sensitivity: Integer
     *     imputeMode: String(auto/previous/linear/fixed/zero/notFill)
     *     imputeFixedValue: Float
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     period: int
     *     suggestedWindow: int
     *     expectedValue: float
     *     upperMargin: float
     *     lowerMargin: float
     *     isAnomaly: boolean
     *     isNegativeAnomaly: boolean
     *     isPositiveAnomaly: boolean
     *     severity: Float
     * }
     * }</pre>
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response of last anomaly detection along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> detectLastPointWithResponseAsync(BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.detectLastPoint(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                body,
                                requestOptions,
                                context));
    }

    /**
     * This operation generates a model using points before the latest one. With this method, only historical points are
     * used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     series: [
     *         {
     *             timestamp: String
     *             value: float
     *         }
     *     ]
     *     granularity: String(yearly/monthly/weekly/daily/hourly/minutely/secondly/microsecond/none)
     *     customInterval: Integer
     *     period: Integer
     *     maxAnomalyRatio: Float
     *     sensitivity: Integer
     *     imputeMode: String(auto/previous/linear/fixed/zero/notFill)
     *     imputeFixedValue: Float
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     period: int
     *     suggestedWindow: int
     *     expectedValue: float
     *     upperMargin: float
     *     lowerMargin: float
     *     isAnomaly: boolean
     *     isNegativeAnomaly: boolean
     *     isPositiveAnomaly: boolean
     *     severity: Float
     * }
     * }</pre>
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response of last anomaly detection along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> detectLastPointWithResponseAsync(
            BinaryData body, RequestOptions requestOptions, Context context) {
        return service.detectLastPoint(
                this.getEndpoint(), this.getServiceVersion().getVersion(), body, requestOptions, context);
    }

    /**
     * This operation generates a model using points before the latest one. With this method, only historical points are
     * used to determine whether the target point is an anomaly. The latest point detecting operation matches the
     * scenario of real-time monitoring of business metrics.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     series: [
     *         {
     *             timestamp: String
     *             value: float
     *         }
     *     ]
     *     granularity: String(yearly/monthly/weekly/daily/hourly/minutely/secondly/microsecond/none)
     *     customInterval: Integer
     *     period: Integer
     *     maxAnomalyRatio: Float
     *     sensitivity: Integer
     *     imputeMode: String(auto/previous/linear/fixed/zero/notFill)
     *     imputeFixedValue: Float
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     period: int
     *     suggestedWindow: int
     *     expectedValue: float
     *     upperMargin: float
     *     lowerMargin: float
     *     isAnomaly: boolean
     *     isNegativeAnomaly: boolean
     *     isPositiveAnomaly: boolean
     *     severity: Float
     * }
     * }</pre>
     *
     * @param body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response of last anomaly detection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> detectLastPointWithResponse(BinaryData body, RequestOptions requestOptions) {
        return detectLastPointWithResponseAsync(body, requestOptions).block();
    }

    /**
     * Evaluate change point score of every series point.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     series: [
     *         {
     *             timestamp: String
     *             value: float
     *         }
     *     ]
     *     granularity: String(yearly/monthly/weekly/daily/hourly/minutely/secondly/microsecond/none)
     *     customInterval: Integer
     *     period: Integer
     *     stableTrendWindow: Integer
     *     threshold: Float
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     period: Integer
     *     isChangePoint: [
     *         boolean
     *     ]
     *     confidenceScores: [
     *         float
     *     ]
     * }
     * }</pre>
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response of change point detection along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> detectChangePointWithResponseAsync(
            BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.detectChangePoint(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                body,
                                requestOptions,
                                context));
    }

    /**
     * Evaluate change point score of every series point.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     series: [
     *         {
     *             timestamp: String
     *             value: float
     *         }
     *     ]
     *     granularity: String(yearly/monthly/weekly/daily/hourly/minutely/secondly/microsecond/none)
     *     customInterval: Integer
     *     period: Integer
     *     stableTrendWindow: Integer
     *     threshold: Float
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     period: Integer
     *     isChangePoint: [
     *         boolean
     *     ]
     *     confidenceScores: [
     *         float
     *     ]
     * }
     * }</pre>
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response of change point detection along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> detectChangePointWithResponseAsync(
            BinaryData body, RequestOptions requestOptions, Context context) {
        return service.detectChangePoint(
                this.getEndpoint(), this.getServiceVersion().getVersion(), body, requestOptions, context);
    }

    /**
     * Evaluate change point score of every series point.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     series: [
     *         {
     *             timestamp: String
     *             value: float
     *         }
     *     ]
     *     granularity: String(yearly/monthly/weekly/daily/hourly/minutely/secondly/microsecond/none)
     *     customInterval: Integer
     *     period: Integer
     *     stableTrendWindow: Integer
     *     threshold: Float
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     period: Integer
     *     isChangePoint: [
     *         boolean
     *     ]
     *     confidenceScores: [
     *         float
     *     ]
     * }
     * }</pre>
     *
     * @param body Time series points and granularity is needed. Advanced model parameters can also be set in the
     *     request if needed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response of change point detection along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> detectChangePointWithResponse(BinaryData body, RequestOptions requestOptions) {
        return detectChangePointWithResponseAsync(body, requestOptions).block();
    }
}
