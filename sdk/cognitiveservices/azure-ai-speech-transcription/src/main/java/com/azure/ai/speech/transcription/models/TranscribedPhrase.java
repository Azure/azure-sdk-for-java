// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.speech.transcription.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A transcribed phrase.
 */
@Immutable
public final class TranscribedPhrase implements JsonSerializable<TranscribedPhrase> {

    /*
     * The 0-based channel index. Only present if channel separation is enabled.
     */
    @Generated
    private Integer channel;

    /*
     * A unique integer number that is assigned to each speaker detected in the audio without particular order. Only
     * present if speaker diarization is enabled.
     */
    @Generated
    private Integer speaker;

    /*
     * The start offset of the phrase in milliseconds.
     */
    @Generated
    private final int offsetMilliseconds;

    /*
     * The duration of the phrase in milliseconds.
     */
    @Generated
    private final int durationMilliseconds;

    /*
     * The transcribed text of the phrase.
     */
    @Generated
    private final String text;

    /*
     * The words that make up the phrase. Only present if word-level timestamps are enabled.
     */
    @Generated
    private List<TranscribedWord> words;

    /*
     * The locale of the phrase.
     */
    @Generated
    private String locale;

    /*
     * The confidence value for the phrase.
     */
    @Generated
    private final double confidence;

    /**
     * Creates an instance of TranscribedPhrase class.
     *
     * @param offsetMilliseconds the offsetMilliseconds value to set.
     * @param durationMilliseconds the durationMilliseconds value to set.
     * @param text the text value to set.
     * @param confidence the confidence value to set.
     */
    @Generated
    private TranscribedPhrase(int offsetMilliseconds, int durationMilliseconds, String text, double confidence) {
        this.offsetMilliseconds = offsetMilliseconds;
        this.durationMilliseconds = durationMilliseconds;
        this.text = text;
        this.confidence = confidence;
    }

    /**
     * Get the channel property: The 0-based channel index. Only present if channel separation is enabled.
     *
     * @return the channel value.
     */
    @Generated
    public Integer getChannel() {
        return this.channel;
    }

    /**
     * Get the speaker property: A unique integer number that is assigned to each speaker detected in the audio without
     * particular order. Only present if speaker diarization is enabled.
     *
     * @return the speaker value.
     */
    @Generated
    public Integer getSpeaker() {
        return this.speaker;
    }

    /**
     * Get the offsetMilliseconds property: The start offset of the phrase in milliseconds.
     *
     * @return the offsetMilliseconds value.
     */
    @Generated
    public int getOffsetMilliseconds() {
        return this.offsetMilliseconds;
    }

    /**
     * Get the durationMilliseconds property: The duration of the phrase in milliseconds.
     *
     * @return the durationMilliseconds value.
     */
    @Generated
    public int getDurationMilliseconds() {
        return this.durationMilliseconds;
    }

    /**
     * Get the text property: The transcribed text of the phrase.
     *
     * @return the text value.
     */
    @Generated
    public String getText() {
        return this.text;
    }

    /**
     * Get the words property: The words that make up the phrase. Only present if word-level timestamps are enabled.
     *
     * @return the words value.
     */
    @Generated
    public List<TranscribedWord> getWords() {
        return this.words;
    }

    /**
     * Get the locale property: The locale of the phrase.
     *
     * @return the locale value.
     */
    @Generated
    public String getLocale() {
        return this.locale;
    }

    /**
     * Get the confidence property: The confidence value for the phrase.
     *
     * @return the confidence value.
     */
    @Generated
    public double getConfidence() {
        return this.confidence;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("offsetMilliseconds", this.offsetMilliseconds);
        jsonWriter.writeIntField("durationMilliseconds", this.durationMilliseconds);
        jsonWriter.writeStringField("text", this.text);
        jsonWriter.writeDoubleField("confidence", this.confidence);
        jsonWriter.writeNumberField("channel", this.channel);
        jsonWriter.writeNumberField("speaker", this.speaker);
        jsonWriter.writeArrayField("words", this.words, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("locale", this.locale);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TranscribedPhrase from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TranscribedPhrase if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TranscribedPhrase.
     */
    @Generated
    public static TranscribedPhrase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int offsetMilliseconds = 0;
            int durationMilliseconds = 0;
            String text = null;
            double confidence = 0.0;
            Integer channel = null;
            Integer speaker = null;
            List<TranscribedWord> words = null;
            String locale = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("offsetMilliseconds".equals(fieldName)) {
                    offsetMilliseconds = reader.getInt();
                } else if ("durationMilliseconds".equals(fieldName)) {
                    durationMilliseconds = reader.getInt();
                } else if ("text".equals(fieldName)) {
                    text = reader.getString();
                } else if ("confidence".equals(fieldName)) {
                    confidence = reader.getDouble();
                } else if ("channel".equals(fieldName)) {
                    channel = reader.getNullable(JsonReader::getInt);
                } else if ("speaker".equals(fieldName)) {
                    speaker = reader.getNullable(JsonReader::getInt);
                } else if ("words".equals(fieldName)) {
                    words = reader.readArray(reader1 -> TranscribedWord.fromJson(reader1));
                } else if ("locale".equals(fieldName)) {
                    locale = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            TranscribedPhrase deserializedTranscribedPhrase
                = new TranscribedPhrase(offsetMilliseconds, durationMilliseconds, text, confidence);
            deserializedTranscribedPhrase.channel = channel;
            deserializedTranscribedPhrase.speaker = speaker;
            deserializedTranscribedPhrase.words = words;
            deserializedTranscribedPhrase.locale = locale;
            return deserializedTranscribedPhrase;
        });
    }
}
