// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.speech.transcription.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The full transcript per channel.
 */
@Immutable
public final class ChannelCombinedPhrases implements JsonSerializable<ChannelCombinedPhrases> {

    /*
     * The 0-based channel index. Only present if channel separation is enabled.
     */
    @Generated
    private Integer channel;

    /*
     * The complete transcribed text for the channel.
     */
    @Generated
    private final String text;

    /**
     * Creates an instance of ChannelCombinedPhrases class.
     *
     * @param text the text value to set.
     */
    @Generated
    private ChannelCombinedPhrases(String text) {
        this.text = text;
    }

    /**
     * Get the channel property: The 0-based channel index. Only present if channel separation is enabled.
     *
     * @return the channel value.
     */
    @Generated
    public Integer getChannel() {
        return this.channel;
    }

    /**
     * Get the text property: The complete transcribed text for the channel.
     *
     * @return the text value.
     */
    @Generated
    public String getText() {
        return this.text;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("text", this.text);
        jsonWriter.writeNumberField("channel", this.channel);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChannelCombinedPhrases from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChannelCombinedPhrases if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChannelCombinedPhrases.
     */
    @Generated
    public static ChannelCombinedPhrases fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String text = null;
            Integer channel = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("text".equals(fieldName)) {
                    text = reader.getString();
                } else if ("channel".equals(fieldName)) {
                    channel = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            ChannelCombinedPhrases deserializedChannelCombinedPhrases = new ChannelCombinedPhrases(text);
            deserializedChannelCombinedPhrases.channel = channel;
            return deserializedChannelCombinedPhrases;
        });
    }
}
