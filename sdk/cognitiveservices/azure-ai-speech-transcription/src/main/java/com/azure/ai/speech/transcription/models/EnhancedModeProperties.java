// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.speech.transcription.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Enhanced mode properties for transcription.
 */
@Fluent
public final class EnhancedModeProperties implements JsonSerializable<EnhancedModeProperties> {

    /*
     * Enable enhanced mode for transcription.
     */
    @Generated
    private Boolean enabled;

    /*
     * Task type for enhanced mode.
     */
    @Generated
    private String task;

    /*
     * Target language for enhanced mode.
     */
    @Generated
    private String targetLanguage;

    /*
     * A list of user prompts.
     */
    @Generated
    private List<String> prompt;

    /**
     * Creates an instance of EnhancedModeProperties class.
     */
    @Generated
    public EnhancedModeProperties() {
    }

    /**
     * Get the enabled property: Enable enhanced mode for transcription.
     *
     * @return the enabled value.
     */
    @Generated
    public Boolean isEnabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Enable enhanced mode for transcription.
     *
     * @param enabled the enabled value to set.
     * @return the EnhancedModeProperties object itself.
     */
    @Generated
    public EnhancedModeProperties setEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the task property: Task type for enhanced mode.
     *
     * @return the task value.
     */
    @Generated
    public String getTask() {
        return this.task;
    }

    /**
     * Set the task property: Task type for enhanced mode.
     *
     * @param task the task value to set.
     * @return the EnhancedModeProperties object itself.
     */
    @Generated
    public EnhancedModeProperties setTask(String task) {
        this.task = task;
        return this;
    }

    /**
     * Get the targetLanguage property: Target language for enhanced mode.
     *
     * @return the targetLanguage value.
     */
    @Generated
    public String getTargetLanguage() {
        return this.targetLanguage;
    }

    /**
     * Set the targetLanguage property: Target language for enhanced mode.
     *
     * @param targetLanguage the targetLanguage value to set.
     * @return the EnhancedModeProperties object itself.
     */
    @Generated
    public EnhancedModeProperties setTargetLanguage(String targetLanguage) {
        this.targetLanguage = targetLanguage;
        return this;
    }

    /**
     * Get the prompt property: A list of user prompts.
     *
     * @return the prompt value.
     */
    @Generated
    public List<String> getPrompt() {
        return this.prompt;
    }

    /**
     * Set the prompt property: A list of user prompts.
     *
     * @param prompt the prompt value to set.
     * @return the EnhancedModeProperties object itself.
     */
    @Generated
    public EnhancedModeProperties setPrompt(List<String> prompt) {
        this.prompt = prompt;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("task", this.task);
        jsonWriter.writeStringField("targetLanguage", this.targetLanguage);
        jsonWriter.writeArrayField("prompt", this.prompt, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnhancedModeProperties from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnhancedModeProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EnhancedModeProperties.
     */
    @Generated
    public static EnhancedModeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnhancedModeProperties deserializedEnhancedModeProperties = new EnhancedModeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("enabled".equals(fieldName)) {
                    deserializedEnhancedModeProperties.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("task".equals(fieldName)) {
                    deserializedEnhancedModeProperties.task = reader.getString();
                } else if ("targetLanguage".equals(fieldName)) {
                    deserializedEnhancedModeProperties.targetLanguage = reader.getString();
                } else if ("prompt".equals(fieldName)) {
                    List<String> prompt = reader.readArray(reader1 -> reader1.getString());
                    deserializedEnhancedModeProperties.prompt = prompt;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedEnhancedModeProperties;
        });
    }
}
