// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.speech.transcription.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The result of the transcribe operation.
 *
 * <p><strong>Code Samples</strong></p>
 *
 * <!-- src_embed com.azure.ai.speech.transcription.transcriptionresult.detailed -->
 * <pre>
 * TranscriptionResult result = client.transcribe&#40;requestContent&#41;;
 *
 * &#47;&#47; Get overall duration
 * System.out.println&#40;&quot;Total duration: &quot; + result.getDurationMilliseconds&#40;&#41; + &quot;ms&quot;&#41;;
 *
 * &#47;&#47; Process each phrase with detailed information
 * result.getPhrases&#40;&#41;.forEach&#40;phrase -&gt; &#123;
 *     System.out.println&#40;&quot;&#92;nPhrase: &quot; + phrase.getText&#40;&#41;&#41;;
 *     System.out.println&#40;&quot;  Channel: &quot; + phrase.getChannel&#40;&#41;&#41;;
 *     System.out.println&#40;&quot;  Speaker: &quot; + phrase.getSpeaker&#40;&#41;&#41;;
 *     System.out.println&#40;&quot;  Locale: &quot; + phrase.getLocale&#40;&#41;&#41;;
 *     System.out.println&#40;&quot;  Confidence: &quot; + phrase.getConfidence&#40;&#41;&#41;;
 *     System.out.println&#40;&quot;  Timing: &quot; + phrase.getOffsetMilliseconds&#40;&#41; + &quot;ms - &quot;
 *         + &#40;phrase.getOffsetMilliseconds&#40;&#41; + phrase.getDurationMilliseconds&#40;&#41;&#41; + &quot;ms&quot;&#41;;
 *
 *     &#47;&#47; Process individual words with timestamps
 *     if &#40;phrase.getWords&#40;&#41; != null&#41; &#123;
 *         phrase.getWords&#40;&#41;.forEach&#40;word -&gt; &#123;
 *             System.out.println&#40;&quot;    Word: &quot; + word.getText&#40;&#41; + &quot; &#64; &quot;
 *                 + word.getOffsetMilliseconds&#40;&#41; + &quot;ms&quot;&#41;;
 *         &#125;&#41;;
 *     &#125;
 * &#125;&#41;;
 * </pre>
 * <!-- end com.azure.ai.speech.transcription.transcriptionresult.detailed -->
 */
@Immutable
public final class TranscriptionResult implements JsonSerializable<TranscriptionResult> {
    /*
     * The duration of the audio in milliseconds.
     */
    @Generated
    private final int durationMilliseconds;

    /*
     * The full transcript for each channel.
     */
    @Generated
    private final List<ChannelCombinedPhrases> combinedPhrases;

    /*
     * The transcription results segmented into phrases.
     */
    @Generated
    private final List<TranscribedPhrase> phrases;

    /**
     * Creates an instance of TranscriptionResult class.
     *
     * @param durationMilliseconds the durationMilliseconds value to set.
     * @param combinedPhrases the combinedPhrases value to set.
     * @param phrases the phrases value to set.
     */
    @Generated
    private TranscriptionResult(int durationMilliseconds, List<ChannelCombinedPhrases> combinedPhrases,
        List<TranscribedPhrase> phrases) {
        this.durationMilliseconds = durationMilliseconds;
        this.combinedPhrases = combinedPhrases;
        this.phrases = phrases;
    }

    /**
     * Get the durationMilliseconds property: The duration of the audio in milliseconds.
     *
     * @return the durationMilliseconds value.
     */
    @Generated
    public int getDurationMilliseconds() {
        return this.durationMilliseconds;
    }

    /**
     * Get the combinedPhrases property: The full transcript for each channel.
     *
     * @return the combinedPhrases value.
     */
    @Generated
    public List<ChannelCombinedPhrases> getCombinedPhrases() {
        return this.combinedPhrases;
    }

    /**
     * Get the phrases property: The transcription results segmented into phrases.
     *
     * @return the phrases value.
     */
    @Generated
    public List<TranscribedPhrase> getPhrases() {
        return this.phrases;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("durationMilliseconds", this.durationMilliseconds);
        jsonWriter.writeArrayField("combinedPhrases", this.combinedPhrases,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("phrases", this.phrases, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TranscriptionResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TranscriptionResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TranscriptionResult.
     */
    @Generated
    public static TranscriptionResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int durationMilliseconds = 0;
            List<ChannelCombinedPhrases> combinedPhrases = null;
            List<TranscribedPhrase> phrases = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("durationMilliseconds".equals(fieldName)) {
                    durationMilliseconds = reader.getInt();
                } else if ("combinedPhrases".equals(fieldName)) {
                    combinedPhrases = reader.readArray(reader1 -> ChannelCombinedPhrases.fromJson(reader1));
                } else if ("phrases".equals(fieldName)) {
                    phrases = reader.readArray(reader1 -> TranscribedPhrase.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new TranscriptionResult(durationMilliseconds, combinedPhrases, phrases);
        });
    }
}
