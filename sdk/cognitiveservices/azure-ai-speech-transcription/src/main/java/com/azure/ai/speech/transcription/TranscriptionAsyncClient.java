// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.speech.transcription;

import com.azure.ai.speech.transcription.implementation.MultipartFormDataHelper;
import com.azure.ai.speech.transcription.implementation.TranscriptionClientImpl;
import com.azure.ai.speech.transcription.models.TranscribeRequestContent;
import com.azure.ai.speech.transcription.models.TranscriptionResult;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous TranscriptionClient type.
 */
@ServiceClient(builder = TranscriptionClientBuilder.class, isAsync = true)
public final class TranscriptionAsyncClient {

    private static final ClientLogger LOGGER = new ClientLogger(TranscriptionAsyncClient.class);

    @Generated
    private final TranscriptionClientImpl serviceClient;

    /**
     * Initializes an instance of TranscriptionAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    TranscriptionAsyncClient(TranscriptionClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Transcribes the provided audio stream.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     durationMilliseconds: int (Required)
     *     combinedPhrases (Required): [
     *          (Required){
     *             channel: Integer (Optional)
     *             text: String (Required)
     *         }
     *     ]
     *     phrases (Required): [
     *          (Required){
     *             channel: Integer (Optional)
     *             speaker: Integer (Optional)
     *             offsetMilliseconds: int (Required)
     *             durationMilliseconds: int (Required)
     *             text: String (Required)
     *             words (Optional): [
     *                  (Optional){
     *                     text: String (Required)
     *                     offsetMilliseconds: int (Required)
     *                     durationMilliseconds: int (Required)
     *                 }
     *             ]
     *             locale: String (Optional)
     *             confidence: double (Required)
     *         }
     *     ]
     * }
     * }
     * </pre>
     *
     * @param body The body of the multipart request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the transcribe operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> transcribeWithResponse(BinaryData body, RequestOptions requestOptions) {
        // Operation 'transcribe' is of content-type 'multipart/form-data'. Protocol API is not usable and hence not
        // generated.
        return this.serviceClient.transcribeWithResponseAsync(body, requestOptions);
    }

    /**
     * Transcribes the provided audio stream.
     *
     * @param body The body of the multipart request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of the transcribe operation on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TranscriptionResult> transcribe(TranscribeRequestContent body) {
        // Generated convenience method for transcribeWithResponse
        // TODO: TEMPORARY WORKAROUND - Remove this null check when TypeSpec generator is fixed
        if (body == null) {
            return Mono.error(new NullPointerException("Parameter 'body' is required and cannot be null."));
        }
        RequestOptions requestOptions = new RequestOptions();
        return transcribeWithResponse(
            new MultipartFormDataHelper(requestOptions).serializeJsonField("definition", body.getOptions())
                .serializeFileField("audio", body.getAudio() == null ? null : body.getAudio().getContent(),
                    body.getAudio() == null ? null : body.getAudio().getContentType(),
                    body.getAudio() == null ? null : body.getAudio().getFilename())
                .end()
                .getRequestBody(),
            requestOptions).flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(TranscriptionResult.class));
    }
}
