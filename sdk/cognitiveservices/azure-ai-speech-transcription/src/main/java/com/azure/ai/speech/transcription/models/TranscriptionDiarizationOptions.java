// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.speech.transcription.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Speaker Identification settings. Diarization settings must be specified to enable speaker identification.
 */
@Fluent
public final class TranscriptionDiarizationOptions implements JsonSerializable<TranscriptionDiarizationOptions> {
    /*
     * Gets or sets a value indicating whether speaker diarization is enabled.
     */
    @Generated
    private Boolean enabled;

    /*
     * Gets or sets a hint for the maximum number of speakers for diarization. Must be greater than 1 and less than 36.
     */
    @Generated
    private Integer maxSpeakers;

    /**
     * Creates an instance of TranscriptionDiarizationOptions class.
     */
    @Generated
    public TranscriptionDiarizationOptions() {
    }

    /**
     * Get the enabled property: Gets or sets a value indicating whether speaker diarization is enabled.
     * 
     * @return the enabled value.
     */
    @Generated
    public Boolean isEnabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: Gets or sets a value indicating whether speaker diarization is enabled.
     * 
     * @param enabled the enabled value to set.
     * @return the TranscriptionDiarizationOptions object itself.
     */
    @Generated
    public TranscriptionDiarizationOptions setEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the maxSpeakers property: Gets or sets a hint for the maximum number of speakers for diarization. Must be
     * greater than 1 and less than 36.
     * 
     * @return the maxSpeakers value.
     */
    @Generated
    public Integer getMaxSpeakers() {
        return this.maxSpeakers;
    }

    /**
     * Set the maxSpeakers property: Gets or sets a hint for the maximum number of speakers for diarization. Must be
     * greater than 1 and less than 36.
     * 
     * @param maxSpeakers the maxSpeakers value to set.
     * @return the TranscriptionDiarizationOptions object itself.
     */
    @Generated
    public TranscriptionDiarizationOptions setMaxSpeakers(Integer maxSpeakers) {
        this.maxSpeakers = maxSpeakers;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeNumberField("maxSpeakers", this.maxSpeakers);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TranscriptionDiarizationOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TranscriptionDiarizationOptions if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TranscriptionDiarizationOptions.
     */
    @Generated
    public static TranscriptionDiarizationOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TranscriptionDiarizationOptions deserializedTranscriptionDiarizationOptions
                = new TranscriptionDiarizationOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enabled".equals(fieldName)) {
                    deserializedTranscriptionDiarizationOptions.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("maxSpeakers".equals(fieldName)) {
                    deserializedTranscriptionDiarizationOptions.maxSpeakers = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTranscriptionDiarizationOptions;
        });
    }
}
