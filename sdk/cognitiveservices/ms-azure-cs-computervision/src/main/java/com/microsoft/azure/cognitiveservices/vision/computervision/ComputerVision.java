/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.computervision;

import com.microsoft.azure.CloudException;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainInStreamOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageInStreamOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.ComputerVisionErrorException;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageInStreamOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailInStreamOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.ListModelsResult;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOperationResult;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextInStreamOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageInStreamOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.TextOperationResult;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.TextRecognitionMode;
import rx.Observable;

import java.io.InputStream;

/**
 * An instance of this class provides access to all the operations defined
 * in ComputerVision.
 */
public interface ComputerVision {

    /**
     * Use this interface to get the result of a Read Document operation, employing the state-of-the-art
      *  Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use
      *  the Read Document interface, the response contains a field called 'Operation-Location'. The
      *  'Operation-Location' field contains the URL that you must use for your 'Get Read Result operation'
      *  to access OCR results.â€‹
     *
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void batchReadFileInStream(byte[] image);

    /**
     * Use this interface to get the result of a Read Document operation, employing the state-of-the-art
      *  Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use
      *  the Read Document interface, the response contains a field called 'Operation-Location'. The
      *  'Operation-Location' field contains the URL that you must use for your 'Get Read Result operation'
      *  to access OCR results.
     *
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> batchReadFileInStreamAsync(byte[] image);



    /**
     * Recognize Text operation. When you use the Recognize Text interface, the response contains a field
      *  called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for
      *  your Get Recognize Text Operation Result operation.
     *
     * @param image An image stream.
     * @param mode Type of text to recognize. Possible values include: 'Handwritten', 'Printed'.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void recognizeTextInStream(byte[] image, TextRecognitionMode mode);

    /**
     * Recognize Text operation. When you use the Recognize Text interface, the response contains a field
      *  called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for
      *  your Get Recognize Text Operation Result operation.
     *
     * @param image An image stream.
     * @param mode Type of text to recognize. Possible values include: 'Handwritten', 'Printed'.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> recognizeTextInStreamAsync(byte[] image, TextRecognitionMode mode);



    /**
     * This interface is used for getting OCR results of Read operation. The URL to this interface should
      *  be retrieved from 'Operation-Location' field returned from Batch Read File interface.
     *
     * @param operationId Id of read operation returned in the response of the 'Batch Read File' interface.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReadOperationResult object if successful.
     */
    ReadOperationResult getReadOperationResult(String operationId);

    /**
     * This interface is used for getting OCR results of Read operation. The URL to this interface should
      *  be retrieved from 'Operation-Location' field returned from Batch Read File interface.
     *
     * @param operationId Id of read operation returned in the response of the 'Batch Read File' interface.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReadOperationResult object
     */
    Observable<ReadOperationResult> getReadOperationResultAsync(String operationId);



    /**
     * Use this interface to get the result of a Read operation, employing the state-of-the-art Optical
      *  Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read
      *  File interface, the response contains a field called 'Operation-Location'. The
      *  'Operation-Location' field contains the URL that you must use for your 'GetReadOperationResult'
      *  operation to access OCR results.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void batchReadFile(String url);

    /**
     * Use this interface to get the result of a Read operation, employing the state-of-the-art Optical
      *  Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read
      *  File interface, the response contains a field called 'Operation-Location'. The
      *  'Operation-Location' field contains the URL that you must use for your 'GetReadOperationResult'
      *  operation to access OCR results.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> batchReadFileAsync(String url);



    /**
     * This interface is used for getting text operation result. The URL to this interface should be
      *  retrieved from 'Operation-Location' field returned from Recognize Text interface.
     *
     * @param operationId Id of the text operation returned in the response of the 'Recognize Text'.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TextOperationResult object if successful.
     */
    TextOperationResult getTextOperationResult(String operationId);

    /**
     * This interface is used for getting text operation result. The URL to this interface should be
      *  retrieved from 'Operation-Location' field returned from Recognize Text interface.
     *
     * @param operationId Id of the text operation returned in the response of the 'Recognize Text'.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TextOperationResult object
     */
    Observable<TextOperationResult> getTextOperationResultAsync(String operationId);



    /**
     * Recognize Text operation. When you use the Recognize Text interface, the response contains a field
      *  called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for
      *  your Get Recognize Text Operation Result operation.
     *
     * @param mode Type of text to recognize. Possible values include: 'Handwritten', 'Printed'.
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void recognizeText(String url, TextRecognitionMode mode);

    /**
     * Recognize Text operation. When you use the Recognize Text interface, the response contains a field
      *  called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for
      *  your Get Recognize Text Operation Result operation.
     *
     * @param mode Type of text to recognize. Possible values include: 'Handwritten', 'Printed'.
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> recognizeTextAsync(String url, TextRecognitionMode mode);


    /**
     * This operation generates a list of words, or tags, that are relevant to the content of the supplied image.
     *   The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images.
     *   Unlike categories, tags are not organized according to a hierarchical classification system, but correspond
     *   to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag
     *   "ascomycete" may be accompanied by the hint "fungus".
     *   Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     *   A successful response will be returned in JSON. If the request failed, the response will contain an error
     *   code and a message to help understand what went wrong.
     *
     * @param image An image stream.
     * @param tagImageInStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TagResult object if successful.
     */
    @Deprecated
    TagResult tagImageInStream(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter);

    /**
     * This operation generates a list of words, or tags, that are relevant to the content of the supplied image.
     *   The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images.
     *   Unlike categories, tags are not organized according to a hierarchical classification system, but correspond
     *   to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag
     *   "ascomycete" may be accompanied by the hint "fungus".
     *   Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     *   A successful response will be returned in JSON. If the request failed, the response will contain an error
     *   code and a message to help understand what went wrong.
     *
     * @param image An image stream.
     * @param tagImageInStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagResult object
     */
    @Deprecated
    Observable<TagResult> tagImageInStreamAsync(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter);


    /**
     * Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a
     *   machine-usable character stream.
     *   Upon success, the OCR results will be returned.
     *   Upon failure, the error code together with an error message will be returned. The error code can be one of
     *   InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or
     *   InternalServerError.
     *
     * @param detectOrientation Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to
     *   detect the image orientation and correct it before further processing (e.g. if it's upside-down).
     * @param image An image stream.
     * @param recognizePrintedTextInStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OcrResult object if successful.
     */
    @Deprecated
    OcrResult recognizePrintedTextInStream(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter);

    /**
     * Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a
     *   machine-usable character stream.
     *   Upon success, the OCR results will be returned.
     *   Upon failure, the error code together with an error message will be returned. The error code can be one of
     *   InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or
     *   InternalServerError.
     *
     * @param detectOrientation Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to
     *   detect the image orientation and correct it before further processing (e.g. if it's upside-down).
     * @param image An image stream.
     * @param recognizePrintedTextInStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OcrResult object
     */
    @Deprecated
    Observable<OcrResult> recognizePrintedTextInStreamAsync(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter);


    /**
     * This operation recognizes content within an image by applying a domain-specific model. The list of
     *   domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET
     *   request. Currently, the API provides following domain-specific models: celebrities, landmarks.
     *   Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     *   A successful response will be returned in JSON.
     *   If the request failed, the response will contain an error code and a message to help understand what went
     *   wrong.
     *
     * @param model The domain-specific content to recognize.
     * @param image An image stream.
     * @param analyzeImageByDomainInStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DomainModelResults object if successful.
     */
    @Deprecated
    DomainModelResults analyzeImageByDomainInStream(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter);

    /**
     * This operation recognizes content within an image by applying a domain-specific model. The list of
     *   domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET
     *   request. Currently, the API provides following domain-specific models: celebrities, landmarks.
     *   Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     *   A successful response will be returned in JSON.
     *   If the request failed, the response will contain an error code and a message to help understand what went
     *   wrong.
     *
     * @param model The domain-specific content to recognize.
     * @param image An image stream.
     * @param analyzeImageByDomainInStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DomainModelResults object
     */
    @Deprecated
    Observable<DomainModelResults> analyzeImageByDomainInStreamAsync(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter);


    /**
     * This operation generates a thumbnail image with the user-specified width and height. By default, the service
     *   analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based
     *   on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image.
     *   A successful response contains the thumbnail image binary. If the request failed, the response contains an
     *   error code and a message to help determine what went wrong.
     *   Upon failure, the error code and an error message are returned. The error code could be one of
     *   InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage,
     *   FailedToProcess, Timeout, or InternalServerError.
     *
     * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param image An image stream.
     * @param generateThumbnailInStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InputStream object if successful.
     */
    @Deprecated
    InputStream generateThumbnailInStream(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter);

    /**
     * This operation generates a thumbnail image with the user-specified width and height. By default, the service
     *   analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based
     *   on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image.
     *   A successful response contains the thumbnail image binary. If the request failed, the response contains an
     *   error code and a message to help determine what went wrong.
     *   Upon failure, the error code and an error message are returned. The error code could be one of
     *   InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage,
     *   FailedToProcess, Timeout, or InternalServerError.
     *
     * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param image An image stream.
     * @param generateThumbnailInStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    @Deprecated
    Observable<InputStream> generateThumbnailInStreamAsync(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter);



    /**
     * Performs object detection on the specified image.
      *  Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
      *  A successful response will be returned in JSON. If the request failed, the response will contain
      *  an error code and a message to help understand what went wrong.
     *
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DetectResult object if successful.
     */
    DetectResult detectObjectsInStream(byte[] image);

    /**
     * Performs object detection on the specified image.
      *  Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
      *  A successful response will be returned in JSON. If the request failed, the response will contain
      *  an error code and a message to help understand what went wrong.
     *
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DetectResult object
     */
    Observable<DetectResult> detectObjectsInStreamAsync(byte[] image);


    /**
     * This operation generates a description of an image in human readable language with complete sentences. The
     *   description is based on a collection of content tags, which are also returned by the operation. More than
     *   one description can be generated for each image. Descriptions are ordered by their confidence score.
     *   Descriptions may include results from celebrity and landmark domain models, if applicable.
     *   Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     *   A successful response will be returned in JSON. If the request failed, the response will contain an error
     *   code and a message to help understand what went wrong.
     *
     * @param image An image stream.
     * @param describeImageInStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImageDescription object if successful.
     */
    @Deprecated
    ImageDescription describeImageInStream(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter);

    /**
     * This operation generates a description of an image in human readable language with complete sentences. The
     *   description is based on a collection of content tags, which are also returned by the operation. More than
     *   one description can be generated for each image. Descriptions are ordered by their confidence score.
     *   Descriptions may include results from celebrity and landmark domain models, if applicable.
     *   Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     *   A successful response will be returned in JSON. If the request failed, the response will contain an error
     *   code and a message to help understand what went wrong.
     *
     * @param image An image stream.
     * @param describeImageInStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageDescription object
     */
    @Deprecated
    Observable<ImageDescription> describeImageInStreamAsync(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter);



    /**
     * This operation returns a bounding box around the most important area of the image.
      *  A successful response will be returned in JSON. If the request failed, the response contains an
      *  error code and a message to help determine what went wrong.
      *  Upon failure, the error code and an error message are returned. The error code could be one of
      *  InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess,
      *  Timeout, or InternalServerError.
     *
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AreaOfInterestResult object if successful.
     */
    AreaOfInterestResult getAreaOfInterestInStream(byte[] image);

    /**
     * This operation returns a bounding box around the most important area of the image.
      *  A successful response will be returned in JSON. If the request failed, the response contains an
      *  error code and a message to help determine what went wrong.
      *  Upon failure, the error code and an error message are returned. The error code could be one of
      *  InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess,
      *  Timeout, or InternalServerError.
     *
     * @param image An image stream.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AreaOfInterestResult object
     */
    Observable<AreaOfInterestResult> getAreaOfInterestInStreamAsync(byte[] image);


    /**
     * This operation extracts a rich set of visual features based on the image content.
     *   Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your
     *   request, there is an optional parameter to allow you to choose which features to return. By default, image
     *   categories are returned in the response.
     *   A successful response will be returned in JSON. If the request failed, the response will contain an error
     *   code and a message to help understand what went wrong.
     *
     * @param image An image stream.
     * @param analyzeImageInStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImageAnalysis object if successful.
     */
    @Deprecated
    ImageAnalysis analyzeImageInStream(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter);

    /**
     * This operation extracts a rich set of visual features based on the image content.
     *   Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your
     *   request, there is an optional parameter to allow you to choose which features to return. By default, image
     *   categories are returned in the response.
     *   A successful response will be returned in JSON. If the request failed, the response will contain an error
     *   code and a message to help understand what went wrong.
     *
     * @param image An image stream.
     * @param analyzeImageInStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageAnalysis object
     */
    @Deprecated
    Observable<ImageAnalysis> analyzeImageInStreamAsync(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter);



    /**
     * This operation returns a bounding box around the most important area of the image.
      *  A successful response will be returned in JSON. If the request failed, the response contains an
      *  error code and a message to help determine what went wrong.
      *  Upon failure, the error code and an error message are returned. The error code could be one of
      *  InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess,
      *  Timeout, or InternalServerError.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AreaOfInterestResult object if successful.
     */
    AreaOfInterestResult getAreaOfInterest(String url);

    /**
     * This operation returns a bounding box around the most important area of the image.
      *  A successful response will be returned in JSON. If the request failed, the response contains an
      *  error code and a message to help determine what went wrong.
      *  Upon failure, the error code and an error message are returned. The error code could be one of
      *  InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess,
      *  Timeout, or InternalServerError.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AreaOfInterestResult object
     */
    Observable<AreaOfInterestResult> getAreaOfInterestAsync(String url);


    /**
     * This operation generates a thumbnail image with the user-specified width and height. By default, the service
     *   analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based
     *   on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image.
     *   A successful response contains the thumbnail image binary. If the request failed, the response contains an
     *   error code and a message to help determine what went wrong.
     *   Upon failure, the error code and an error message are returned. The error code could be one of
     *   InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage,
     *   FailedToProcess, Timeout, or InternalServerError.
     *
     * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param url Publicly reachable URL of an image.
     * @param generateThumbnailOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InputStream object if successful.
     */
    @Deprecated
    InputStream generateThumbnail(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter);

    /**
     * This operation generates a thumbnail image with the user-specified width and height. By default, the service
     *   analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based
     *   on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image.
     *   A successful response contains the thumbnail image binary. If the request failed, the response contains an
     *   error code and a message to help determine what went wrong.
     *   Upon failure, the error code and an error message are returned. The error code could be one of
     *   InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage,
     *   FailedToProcess, Timeout, or InternalServerError.
     *
     * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param url Publicly reachable URL of an image.
     * @param generateThumbnailOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    @Deprecated
    Observable<InputStream> generateThumbnailAsync(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter);


    /**
     * This operation generates a list of words, or tags, that are relevant to the content of the supplied image.
     *   The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images.
     *   Unlike categories, tags are not organized according to a hierarchical classification system, but correspond
     *   to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag
     *   "ascomycete" may be accompanied by the hint "fungus".
     *   Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     *   A successful response will be returned in JSON. If the request failed, the response will contain an error
     *   code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @param tagImageOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TagResult object if successful.
     */
    @Deprecated
    TagResult tagImage(String url, TagImageOptionalParameter tagImageOptionalParameter);

    /**
     * This operation generates a list of words, or tags, that are relevant to the content of the supplied image.
     *   The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images.
     *   Unlike categories, tags are not organized according to a hierarchical classification system, but correspond
     *   to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag
     *   "ascomycete" may be accompanied by the hint "fungus".
     *   Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     *   A successful response will be returned in JSON. If the request failed, the response will contain an error
     *   code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @param tagImageOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TagResult object
     */
    @Deprecated
    Observable<TagResult> tagImageAsync(String url, TagImageOptionalParameter tagImageOptionalParameter);


    /**
     * Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a
     *   machine-usable character stream.
     *   Upon success, the OCR results will be returned.
     *   Upon failure, the error code together with an error message will be returned. The error code can be one of
     *   InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or
     *   InternalServerError.
     *
     * @param detectOrientation Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to
     *   detect the image orientation and correct it before further processing (e.g. if it's upside-down).
     * @param url Publicly reachable URL of an image.
     * @param recognizePrintedTextOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OcrResult object if successful.
     */
    @Deprecated
    OcrResult recognizePrintedText(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter);

    /**
     * Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a
     *   machine-usable character stream.
     *   Upon success, the OCR results will be returned.
     *   Upon failure, the error code together with an error message will be returned. The error code can be one of
     *   InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or
     *   InternalServerError.
     *
     * @param detectOrientation Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to
     *   detect the image orientation and correct it before further processing (e.g. if it's upside-down).
     * @param url Publicly reachable URL of an image.
     * @param recognizePrintedTextOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OcrResult object
     */
    @Deprecated
    Observable<OcrResult> recognizePrintedTextAsync(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter);


    /**
     * This operation recognizes content within an image by applying a domain-specific model. The list of
     *   domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET
     *   request. Currently, the API provides following domain-specific models: celebrities, landmarks.
     *   Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     *   A successful response will be returned in JSON.
     *   If the request failed, the response will contain an error code and a message to help understand what went
     *   wrong.
     *
     * @param model The domain-specific content to recognize.
     * @param url Publicly reachable URL of an image.
     * @param analyzeImageByDomainOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DomainModelResults object if successful.
     */
    @Deprecated
    DomainModelResults analyzeImageByDomain(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter);

    /**
     * This operation recognizes content within an image by applying a domain-specific model. The list of
     *   domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET
     *   request. Currently, the API provides following domain-specific models: celebrities, landmarks.
     *   Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     *   A successful response will be returned in JSON.
     *   If the request failed, the response will contain an error code and a message to help understand what went
     *   wrong.
     *
     * @param model The domain-specific content to recognize.
     * @param url Publicly reachable URL of an image.
     * @param analyzeImageByDomainOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DomainModelResults object
     */
    @Deprecated
    Observable<DomainModelResults> analyzeImageByDomainAsync(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter);



    /**
     * This operation returns the list of domain-specific models that are supported by the Computer
      *  Vision API. Currently, the API supports following domain-specific models: celebrity recognizer,
      *  landmark recognizer.
      *  A successful response will be returned in JSON. If the request failed, the response will contain
      *  an error code and a message to help understand what went wrong.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ListModelsResult object if successful.
     */
    ListModelsResult listModels();

    /**
     * This operation returns the list of domain-specific models that are supported by the Computer
      *  Vision API. Currently, the API supports following domain-specific models: celebrity recognizer,
      *  landmark recognizer.
      *  A successful response will be returned in JSON. If the request failed, the response will contain
      *  an error code and a message to help understand what went wrong.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ListModelsResult object
     */
    Observable<ListModelsResult> listModelsAsync();



    /**
     * Performs object detection on the specified image.
      *  Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
      *  A successful response will be returned in JSON. If the request failed, the response will contain
      *  an error code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DetectResult object if successful.
     */
    DetectResult detectObjects(String url);

    /**
     * Performs object detection on the specified image.
      *  Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
      *  A successful response will be returned in JSON. If the request failed, the response will contain
      *  an error code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DetectResult object
     */
    Observable<DetectResult> detectObjectsAsync(String url);


    /**
     * This operation generates a description of an image in human readable language with complete sentences. The
     *   description is based on a collection of content tags, which are also returned by the operation. More than
     *   one description can be generated for each image. Descriptions are ordered by their confidence score.
     *   Descriptions may include results from celebrity and landmark domain models, if applicable.
     *   Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     *   A successful response will be returned in JSON. If the request failed, the response will contain an error
     *   code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @param describeImageOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImageDescription object if successful.
     */
    @Deprecated
    ImageDescription describeImage(String url, DescribeImageOptionalParameter describeImageOptionalParameter);

    /**
     * This operation generates a description of an image in human readable language with complete sentences. The
     *   description is based on a collection of content tags, which are also returned by the operation. More than
     *   one description can be generated for each image. Descriptions are ordered by their confidence score.
     *   Descriptions may include results from celebrity and landmark domain models, if applicable.
     *   Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     *   A successful response will be returned in JSON. If the request failed, the response will contain an error
     *   code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @param describeImageOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageDescription object
     */
    @Deprecated
    Observable<ImageDescription> describeImageAsync(String url, DescribeImageOptionalParameter describeImageOptionalParameter);


    /**
     * This operation extracts a rich set of visual features based on the image content.
     *   Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your
     *   request, there is an optional parameter to allow you to choose which features to return. By default, image
     *   categories are returned in the response.
     *   A successful response will be returned in JSON. If the request failed, the response will contain an error
     *   code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @param analyzeImageOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ComputerVisionErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ImageAnalysis object if successful.
     */
    @Deprecated
    ImageAnalysis analyzeImage(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter);

    /**
     * This operation extracts a rich set of visual features based on the image content.
     *   Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your
     *   request, there is an optional parameter to allow you to choose which features to return. By default, image
     *   categories are returned in the response.
     *   A successful response will be returned in JSON. If the request failed, the response will contain an error
     *   code and a message to help understand what went wrong.
     *
     * @param url Publicly reachable URL of an image.
     * @param analyzeImageOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ImageAnalysis object
     */
    @Deprecated
    Observable<ImageAnalysis> analyzeImageAsync(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter);


}
