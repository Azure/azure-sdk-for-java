/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.faceapi;

import com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreateLargePersonGroupsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.GetLargePersonGroupsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateLargePersonGroupsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListLargePersonGroupsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.LargePersonGroup;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.RecognitionModel;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.TrainingStatus;
import java.io.IOException;
import java.util.List;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in LargePersonGroups.
 */
public interface LargePersonGroups {
    /**
     * Create a new large person group with user-specified largePersonGroupId, name, an optional userData and
     *   recognitionModel.
     *   &lt;br /&gt; A large person group is the container of the uploaded person data,
     *   including face recognition feature, and up to 1,000,000
     *   people.
     *   &lt;br /&gt; After creation, use [LargePersonGroup Person -
     *   Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/create) to add
     *   person into the group, and call [LargePersonGroup -
     *   Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/train) to get this group
     *   ready for [Face - Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify).
     *   &lt;br /&gt; No image will be stored. Only the person's extracted face features and
     *   userData will be stored on server until [LargePersonGroup Person -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/delete) or
     *   [LargePersonGroup -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/delete) is called.
     *   &lt;br/&gt;'recognitionModel' should be specified to associate with this large
     *   person group. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed,
     *   please explicitly specify the model you need in this parameter. New faces that are added to an existing
     *   large person group will use the recognition model that's already associated with the collection. Existing
     *   face features in a large person group can't be updated to features extracted by another version of
     *   recognition model.
     *   * 'recognition_01': The default recognition model for [LargePersonGroup -
     *   Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/create). All those large
     *   person groups created before 2019 March are bonded with this recognition model.
     *   * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its
     *   overall accuracy is improved compared with 'recognition_01'.
     *   Large person group quota:
     *   * Free-tier subscription quota: 1,000 large person groups.
     *   * S0-tier subscription quota: 1,000,000 large person groups.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void create(String largePersonGroupId, CreateLargePersonGroupsOptionalParameter createOptionalParameter);

    /**
     * Create a new large person group with user-specified largePersonGroupId, name, an optional userData and
     *   recognitionModel.
     *   &lt;br /&gt; A large person group is the container of the uploaded person data,
     *   including face recognition feature, and up to 1,000,000
     *   people.
     *   &lt;br /&gt; After creation, use [LargePersonGroup Person -
     *   Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/create) to add
     *   person into the group, and call [LargePersonGroup -
     *   Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/train) to get this group
     *   ready for [Face - Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify).
     *   &lt;br /&gt; No image will be stored. Only the person's extracted face features and
     *   userData will be stored on server until [LargePersonGroup Person -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/delete) or
     *   [LargePersonGroup -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/delete) is called.
     *   &lt;br/&gt;'recognitionModel' should be specified to associate with this large
     *   person group. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed,
     *   please explicitly specify the model you need in this parameter. New faces that are added to an existing
     *   large person group will use the recognition model that's already associated with the collection. Existing
     *   face features in a large person group can't be updated to features extracted by another version of
     *   recognition model.
     *   * 'recognition_01': The default recognition model for [LargePersonGroup -
     *   Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/create). All those large
     *   person groups created before 2019 March are bonded with this recognition model.
     *   * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its
     *   overall accuracy is improved compared with 'recognition_01'.
     *   Large person group quota:
     *   * Free-tier subscription quota: 1,000 large person groups.
     *   * S0-tier subscription quota: 1,000,000 large person groups.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> createAsync(String largePersonGroupId, CreateLargePersonGroupsOptionalParameter createOptionalParameter);

    /**
     * Create a new large person group with user-specified largePersonGroupId, name, an optional userData and
     *   recognitionModel.
     *   &lt;br /&gt; A large person group is the container of the uploaded person data,
     *   including face recognition feature, and up to 1,000,000
     *   people.
     *   &lt;br /&gt; After creation, use [LargePersonGroup Person -
     *   Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/create) to add
     *   person into the group, and call [LargePersonGroup -
     *   Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/train) to get this group
     *   ready for [Face - Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify).
     *   &lt;br /&gt; No image will be stored. Only the person's extracted face features and
     *   userData will be stored on server until [LargePersonGroup Person -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/delete) or
     *   [LargePersonGroup -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/delete) is called.
     *   &lt;br/&gt;'recognitionModel' should be specified to associate with this large
     *   person group. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed,
     *   please explicitly specify the model you need in this parameter. New faces that are added to an existing
     *   large person group will use the recognition model that's already associated with the collection. Existing
     *   face features in a large person group can't be updated to features extracted by another version of
     *   recognition model.
     *   * 'recognition_01': The default recognition model for [LargePersonGroup -
     *   Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/create). All those large
     *   person groups created before 2019 March are bonded with this recognition model.
     *   * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its
     *   overall accuracy is improved compared with 'recognition_01'.
     *   Large person group quota:
     *   * Free-tier subscription quota: 1,000 large person groups.
     *   * S0-tier subscription quota: 1,000,000 large person groups.
     *
     * @return the first stage of the create call
     */
    LargePersonGroupsCreateDefinitionStages.WithLargePersonGroupId create();

    /**
     * Grouping of create definition stages.
     */
    interface LargePersonGroupsCreateDefinitionStages {
        /**
         * The stage of the definition to be specify largePersonGroupId.
         */
        interface WithLargePersonGroupId {
            /**
             * Id referencing a particular large person group.
             *
             * @return next definition stage
             */
            LargePersonGroupsCreateDefinitionStages.WithExecute withLargePersonGroupId(String largePersonGroupId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * User defined name, maximum length is 128.
             *
             * @return next definition stage
             */
            LargePersonGroupsCreateDefinitionStages.WithExecute withName(String name);

            /**
             * User specified data. Length should not exceed 16KB.
             *
             * @return next definition stage
             */
            LargePersonGroupsCreateDefinitionStages.WithExecute withUserData(String userData);

            /**
             * Possible values include: 'recognition_01', 'recognition_02'.
             *
             * @return next definition stage
             */
            LargePersonGroupsCreateDefinitionStages.WithExecute withRecognitionModel(RecognitionModel recognitionModel);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends LargePersonGroupsCreateDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             */
            void execute();

            /**
             * Execute the request asynchronously.
             *
             * @return a representation of the deferred computation of this call if successful.
             */
            Observable<Void> executeAsync();
        }
    }

    /**
     * The entirety of create definition.
     */
    interface LargePersonGroupsCreateDefinition extends
        LargePersonGroupsCreateDefinitionStages.WithLargePersonGroupId,
        LargePersonGroupsCreateDefinitionStages.WithExecute {
    }


    /**
     * Delete an existing large person group. Persisted face features of all people in the large person
      *  group will also be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String largePersonGroupId);

    /**
     * Delete an existing large person group. Persisted face features of all people in the large person
      *  group will also be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> deleteAsync(String largePersonGroupId);


    /**
     * Retrieve the information of a large person group, including its name, userData and recognitionModel. This
     *   API returns large person group information only, use [LargePersonGroup Person -
     *   List](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/list) instead to
     *   retrieve person information under the large person group.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param getOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LargePersonGroup object if successful.
     */
    LargePersonGroup get(String largePersonGroupId, GetLargePersonGroupsOptionalParameter getOptionalParameter);

    /**
     * Retrieve the information of a large person group, including its name, userData and recognitionModel. This
     *   API returns large person group information only, use [LargePersonGroup Person -
     *   List](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/list) instead to
     *   retrieve person information under the large person group.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param getOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LargePersonGroup object
     */
    Observable<LargePersonGroup> getAsync(String largePersonGroupId, GetLargePersonGroupsOptionalParameter getOptionalParameter);

    /**
     * Retrieve the information of a large person group, including its name, userData and recognitionModel. This
     *   API returns large person group information only, use [LargePersonGroup Person -
     *   List](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/list) instead to
     *   retrieve person information under the large person group.
     *
     * @return the first stage of the get call
     */
    LargePersonGroupsGetDefinitionStages.WithLargePersonGroupId get();

    /**
     * Grouping of get definition stages.
     */
    interface LargePersonGroupsGetDefinitionStages {
        /**
         * The stage of the definition to be specify largePersonGroupId.
         */
        interface WithLargePersonGroupId {
            /**
             * Id referencing a particular large person group.
             *
             * @return next definition stage
             */
            LargePersonGroupsGetDefinitionStages.WithExecute withLargePersonGroupId(String largePersonGroupId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * A value indicating whether the operation should return 'recognitionModel' in response.
             *
             * @return next definition stage
             */
            LargePersonGroupsGetDefinitionStages.WithExecute withReturnRecognitionModel(Boolean returnRecognitionModel);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends LargePersonGroupsGetDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the LargePersonGroup object if successful.
             */
            LargePersonGroup execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the LargePersonGroup object
             */
            Observable<LargePersonGroup> executeAsync();
        }
    }

    /**
     * The entirety of get definition.
     */
    interface LargePersonGroupsGetDefinition extends
        LargePersonGroupsGetDefinitionStages.WithLargePersonGroupId,
        LargePersonGroupsGetDefinitionStages.WithExecute {
    }

    /**
     * Update an existing large person group's display name and userData. The properties which does not appear in
     *   request body will not be updated.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void update(String largePersonGroupId, UpdateLargePersonGroupsOptionalParameter updateOptionalParameter);

    /**
     * Update an existing large person group's display name and userData. The properties which does not appear in
     *   request body will not be updated.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> updateAsync(String largePersonGroupId, UpdateLargePersonGroupsOptionalParameter updateOptionalParameter);

    /**
     * Update an existing large person group's display name and userData. The properties which does not appear in
     *   request body will not be updated.
     *
     * @return the first stage of the update call
     */
    LargePersonGroupsUpdateDefinitionStages.WithLargePersonGroupId update();

    /**
     * Grouping of update definition stages.
     */
    interface LargePersonGroupsUpdateDefinitionStages {
        /**
         * The stage of the definition to be specify largePersonGroupId.
         */
        interface WithLargePersonGroupId {
            /**
             * Id referencing a particular large person group.
             *
             * @return next definition stage
             */
            LargePersonGroupsUpdateDefinitionStages.WithExecute withLargePersonGroupId(String largePersonGroupId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * User defined name, maximum length is 128.
             *
             * @return next definition stage
             */
            LargePersonGroupsUpdateDefinitionStages.WithExecute withName(String name);

            /**
             * User specified data. Length should not exceed 16KB.
             *
             * @return next definition stage
             */
            LargePersonGroupsUpdateDefinitionStages.WithExecute withUserData(String userData);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends LargePersonGroupsUpdateDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             */
            void execute();

            /**
             * Execute the request asynchronously.
             *
             * @return a representation of the deferred computation of this call if successful.
             */
            Observable<Void> executeAsync();
        }
    }

    /**
     * The entirety of update definition.
     */
    interface LargePersonGroupsUpdateDefinition extends
        LargePersonGroupsUpdateDefinitionStages.WithLargePersonGroupId,
        LargePersonGroupsUpdateDefinitionStages.WithExecute {
    }


    /**
     * Retrieve the training status of a large person group (completed or ongoing).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrainingStatus object if successful.
     */
    TrainingStatus getTrainingStatus(String largePersonGroupId);

    /**
     * Retrieve the training status of a large person group (completed or ongoing).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrainingStatus object
     */
    Observable<TrainingStatus> getTrainingStatusAsync(String largePersonGroupId);


    /**
     * List all existing large person groups’ largePersonGroupId, name, userData and
     *   recognitionModel.&lt;br /&gt;
     *   * Large person groups are stored in alphabetical order of largePersonGroupId.
     *   * "start" parameter (string, optional) is a user-provided largePersonGroupId value that returned entries
     *   have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     *   * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can
     *   be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the
     *   current call.
     *   &lt;br /&gt;
     *   For example, total 5 large person groups: "group1", ..., "group5".
     *   &lt;br /&gt; "start=&amp;top=" will return all 5 groups.
     *   &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
     *   &lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4", "group5".
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;LargePersonGroup&gt; object if successful.
     */
    List<LargePersonGroup> list(ListLargePersonGroupsOptionalParameter listOptionalParameter);

    /**
     * List all existing large person groups’ largePersonGroupId, name, userData and
     *   recognitionModel.&lt;br /&gt;
     *   * Large person groups are stored in alphabetical order of largePersonGroupId.
     *   * "start" parameter (string, optional) is a user-provided largePersonGroupId value that returned entries
     *   have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     *   * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can
     *   be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the
     *   current call.
     *   &lt;br /&gt;
     *   For example, total 5 large person groups: "group1", ..., "group5".
     *   &lt;br /&gt; "start=&amp;top=" will return all 5 groups.
     *   &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
     *   &lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4", "group5".
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LargePersonGroup&gt; object
     */
    Observable<List<LargePersonGroup>> listAsync(ListLargePersonGroupsOptionalParameter listOptionalParameter);

    /**
     * List all existing large person groups’ largePersonGroupId, name, userData and
     *   recognitionModel.&lt;br /&gt;
     *   * Large person groups are stored in alphabetical order of largePersonGroupId.
     *   * "start" parameter (string, optional) is a user-provided largePersonGroupId value that returned entries
     *   have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     *   * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can
     *   be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the
     *   current call.
     *   &lt;br /&gt;
     *   For example, total 5 large person groups: "group1", ..., "group5".
     *   &lt;br /&gt; "start=&amp;top=" will return all 5 groups.
     *   &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
     *   &lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4", "group5".
     *
     * @return the first stage of the list call
     */
    LargePersonGroupsListDefinitionStages.WithExecute list();

    /**
     * Grouping of list definition stages.
     */
    interface LargePersonGroupsListDefinitionStages {

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * List large person groups from the least largePersonGroupId greater than the "start".
             *
             * @return next definition stage
             */
            LargePersonGroupsListDefinitionStages.WithExecute withStart(String start);

            /**
             * The number of large person groups to list.
             *
             * @return next definition stage
             */
            LargePersonGroupsListDefinitionStages.WithExecute withTop(Integer top);

            /**
             * A value indicating whether the operation should return 'recognitionModel' in response.
             *
             * @return next definition stage
             */
            LargePersonGroupsListDefinitionStages.WithExecute withReturnRecognitionModel(Boolean returnRecognitionModel);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends LargePersonGroupsListDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the List&lt;LargePersonGroup&gt; object if successful.
             */
            List<LargePersonGroup> execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the List&lt;LargePersonGroup&gt; object
             */
            Observable<List<LargePersonGroup>> executeAsync();
        }
    }

    /**
     * The entirety of list definition.
     */
    interface LargePersonGroupsListDefinition extends
        LargePersonGroupsListDefinitionStages.WithExecute {
    }


    /**
     * Queue a large person group training task, the training task may not be started immediately.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void train(String largePersonGroupId);

    /**
     * Queue a large person group training task, the training task may not be started immediately.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> trainAsync(String largePersonGroupId);


}
