/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.faceapi;

import com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreatePersonGroupPersonsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListPersonGroupPersonsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdatePersonGroupPersonsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFacePersonGroupPersonsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromUrlPersonGroupPersonsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromStreamPersonGroupPersonsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectionModel;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.Person;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PersonGroupPersons.
 */
public interface PersonGroupPersons {
    /**
     * Create a new person in a specified person group.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Person object if successful.
     */
    Person create(String personGroupId, CreatePersonGroupPersonsOptionalParameter createOptionalParameter);

    /**
     * Create a new person in a specified person group.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Person object
     */
    Observable<Person> createAsync(String personGroupId, CreatePersonGroupPersonsOptionalParameter createOptionalParameter);

    /**
     * Create a new person in a specified person group.
     *
     * @return the first stage of the create call
     */
    PersonGroupPersonsCreateDefinitionStages.WithPersonGroupId create();

    /**
     * Grouping of create definition stages.
     */
    interface PersonGroupPersonsCreateDefinitionStages {
        /**
         * The stage of the definition to be specify personGroupId.
         */
        interface WithPersonGroupId {
            /**
             * Id referencing a particular person group.
             *
             * @return next definition stage
             */
            PersonGroupPersonsCreateDefinitionStages.WithExecute withPersonGroupId(String personGroupId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * User defined name, maximum length is 128.
             *
             * @return next definition stage
             */
            PersonGroupPersonsCreateDefinitionStages.WithExecute withName(String name);

            /**
             * User specified data. Length should not exceed 16KB.
             *
             * @return next definition stage
             */
            PersonGroupPersonsCreateDefinitionStages.WithExecute withUserData(String userData);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends PersonGroupPersonsCreateDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the Person object if successful.
             */
            Person execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the Person object
             */
            Observable<Person> executeAsync();
        }
    }

    /**
     * The entirety of create definition.
     */
    interface PersonGroupPersonsCreateDefinition extends
        PersonGroupPersonsCreateDefinitionStages.WithPersonGroupId,
        PersonGroupPersonsCreateDefinitionStages.WithExecute {
    }

    /**
     * List all persons in a person group, and retrieve person information (including personId, name, userData and
     *   persistedFaceIds of registered faces of the person).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Person&gt; object if successful.
     */
    List<Person> list(String personGroupId, ListPersonGroupPersonsOptionalParameter listOptionalParameter);

    /**
     * List all persons in a person group, and retrieve person information (including personId, name, userData and
     *   persistedFaceIds of registered faces of the person).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Person&gt; object
     */
    Observable<List<Person>> listAsync(String personGroupId, ListPersonGroupPersonsOptionalParameter listOptionalParameter);

    /**
     * List all persons in a person group, and retrieve person information (including personId, name, userData and
     *   persistedFaceIds of registered faces of the person).
     *
     * @return the first stage of the list call
     */
    PersonGroupPersonsListDefinitionStages.WithPersonGroupId list();

    /**
     * Grouping of list definition stages.
     */
    interface PersonGroupPersonsListDefinitionStages {
        /**
         * The stage of the definition to be specify personGroupId.
         */
        interface WithPersonGroupId {
            /**
             * Id referencing a particular person group.
             *
             * @return next definition stage
             */
            PersonGroupPersonsListDefinitionStages.WithExecute withPersonGroupId(String personGroupId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * Starting person id to return (used to list a range of persons).
             *
             * @return next definition stage
             */
            PersonGroupPersonsListDefinitionStages.WithExecute withStart(String start);

            /**
             * Number of persons to return starting with the person id indicated by the 'start' parameter.
             *
             * @return next definition stage
             */
            PersonGroupPersonsListDefinitionStages.WithExecute withTop(Integer top);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends PersonGroupPersonsListDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the List&lt;Person&gt; object if successful.
             */
            List<Person> execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the List&lt;Person&gt; object
             */
            Observable<List<Person>> executeAsync();
        }
    }

    /**
     * The entirety of list definition.
     */
    interface PersonGroupPersonsListDefinition extends
        PersonGroupPersonsListDefinitionStages.WithPersonGroupId,
        PersonGroupPersonsListDefinitionStages.WithExecute {
    }


    /**
     * Delete an existing person from a person group. The persistedFaceId, userData, person name and face
      *  feature in the person entry will all be deleted.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String personGroupId, UUID personId);

    /**
     * Delete an existing person from a person group. The persistedFaceId, userData, person name and face
      *  feature in the person entry will all be deleted.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> deleteAsync(String personGroupId, UUID personId);



    /**
     * Retrieve a person's information, including registered persisted faces, name and userData.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Person object if successful.
     */
    Person get(String personGroupId, UUID personId);

    /**
     * Retrieve a person's information, including registered persisted faces, name and userData.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Person object
     */
    Observable<Person> getAsync(String personGroupId, UUID personId);


    /**
     * Update name or userData of a person.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void update(String personGroupId, UUID personId, UpdatePersonGroupPersonsOptionalParameter updateOptionalParameter);

    /**
     * Update name or userData of a person.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> updateAsync(String personGroupId, UUID personId, UpdatePersonGroupPersonsOptionalParameter updateOptionalParameter);

    /**
     * Update name or userData of a person.
     *
     * @return the first stage of the update call
     */
    PersonGroupPersonsUpdateDefinitionStages.WithPersonGroupId update();

    /**
     * Grouping of update definition stages.
     */
    interface PersonGroupPersonsUpdateDefinitionStages {
        /**
         * The stage of the definition to be specify personGroupId.
         */
        interface WithPersonGroupId {
            /**
             * Id referencing a particular person group.
             *
             * @return next definition stage
             */
            WithPersonId withPersonGroupId(String personGroupId);
        }
        /**
         * The stage of the definition to be specify personId.
         */
        interface WithPersonId {
            /**
             * Id referencing a particular person.
             *
             * @return next definition stage
             */
            PersonGroupPersonsUpdateDefinitionStages.WithExecute withPersonId(UUID personId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * User defined name, maximum length is 128.
             *
             * @return next definition stage
             */
            PersonGroupPersonsUpdateDefinitionStages.WithExecute withName(String name);

            /**
             * User specified data. Length should not exceed 16KB.
             *
             * @return next definition stage
             */
            PersonGroupPersonsUpdateDefinitionStages.WithExecute withUserData(String userData);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends PersonGroupPersonsUpdateDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             */
            void execute();

            /**
             * Execute the request asynchronously.
             *
             * @return a representation of the deferred computation of this call if successful.
             */
            Observable<Void> executeAsync();
        }
    }

    /**
     * The entirety of update definition.
     */
    interface PersonGroupPersonsUpdateDefinition extends
        PersonGroupPersonsUpdateDefinitionStages.WithPersonGroupId,
        PersonGroupPersonsUpdateDefinitionStages.WithPersonId,
        PersonGroupPersonsUpdateDefinitionStages.WithExecute {
    }


    /**
     * Delete a face from a person in a person group by specified personGroupId, personId and
      *  persistedFaceId.
      *  &lt;br /&gt; Adding/deleting faces to/from a same person will be processed
      *  sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteFace(String personGroupId, UUID personId, UUID persistedFaceId);

    /**
     * Delete a face from a person in a person group by specified personGroupId, personId and
      *  persistedFaceId.
      *  &lt;br /&gt; Adding/deleting faces to/from a same person will be processed
      *  sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> deleteFaceAsync(String personGroupId, UUID personId, UUID persistedFaceId);



    /**
     * Retrieve information about a persisted face (specified by persistedFaceId, personId and its
      *  belonging personGroupId).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace getFace(String personGroupId, UUID personId, UUID persistedFaceId);

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId, personId and its
      *  belonging personGroupId).
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> getFaceAsync(String personGroupId, UUID personId, UUID persistedFaceId);


    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image
     *   contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     *   persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will
     *   be stored on server until [PersonGroup PersonFace -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/deleteface),
     *   [PersonGroup Person -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/delete) or [PersonGroup
     *   - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/delete) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     *   clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * Each person entry can hold up to 248 faces.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from
     *   different persons are processed in parallel.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param updateFaceOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateFace(String personGroupId, UUID personId, UUID persistedFaceId, UpdateFacePersonGroupPersonsOptionalParameter updateFaceOptionalParameter);

    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image
     *   contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     *   persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will
     *   be stored on server until [PersonGroup PersonFace -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/deleteface),
     *   [PersonGroup Person -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/delete) or [PersonGroup
     *   - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/delete) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     *   clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * Each person entry can hold up to 248 faces.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from
     *   different persons are processed in parallel.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param updateFaceOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> updateFaceAsync(String personGroupId, UUID personId, UUID persistedFaceId, UpdateFacePersonGroupPersonsOptionalParameter updateFaceOptionalParameter);

    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image
     *   contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     *   persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will
     *   be stored on server until [PersonGroup PersonFace -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/deleteface),
     *   [PersonGroup Person -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/delete) or [PersonGroup
     *   - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/delete) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     *   clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * Each person entry can hold up to 248 faces.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from
     *   different persons are processed in parallel.
     *
     * @return the first stage of the updateFace call
     */
    PersonGroupPersonsUpdateFaceDefinitionStages.WithPersonGroupId updateFace();

    /**
     * Grouping of updateFace definition stages.
     */
    interface PersonGroupPersonsUpdateFaceDefinitionStages {
        /**
         * The stage of the definition to be specify personGroupId.
         */
        interface WithPersonGroupId {
            /**
             * Id referencing a particular person group.
             *
             * @return next definition stage
             */
            WithPersonId withPersonGroupId(String personGroupId);
        }
        /**
         * The stage of the definition to be specify personId.
         */
        interface WithPersonId {
            /**
             * Id referencing a particular person.
             *
             * @return next definition stage
             */
            WithPersistedFaceId withPersonId(UUID personId);
        }
        /**
         * The stage of the definition to be specify persistedFaceId.
         */
        interface WithPersistedFaceId {
            /**
             * Id referencing a particular persistedFaceId of an existing face.
             *
             * @return next definition stage
             */
            PersonGroupPersonsUpdateFaceDefinitionStages.WithExecute withPersistedFaceId(UUID persistedFaceId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * User-provided data attached to the face. The size limit is 1KB.
             *
             * @return next definition stage
             */
            PersonGroupPersonsUpdateFaceDefinitionStages.WithExecute withUserData(String userData);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends PersonGroupPersonsUpdateFaceDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             */
            void execute();

            /**
             * Execute the request asynchronously.
             *
             * @return a representation of the deferred computation of this call if successful.
             */
            Observable<Void> executeAsync();
        }
    }

    /**
     * The entirety of updateFace definition.
     */
    interface PersonGroupPersonsUpdateFaceDefinition extends
        PersonGroupPersonsUpdateFaceDefinitionStages.WithPersonGroupId,
        PersonGroupPersonsUpdateFaceDefinitionStages.WithPersonId,
        PersonGroupPersonsUpdateFaceDefinitionStages.WithPersistedFaceId,
        PersonGroupPersonsUpdateFaceDefinitionStages.WithExecute {
    }

    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image
     *   contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     *   persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will
     *   be stored on server until [PersonGroup PersonFace -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/deleteface),
     *   [PersonGroup Person -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/delete) or [PersonGroup
     *   - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/delete) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   *   Higher face image quality means better recognition precision. Please consider high-quality faces:
     *   frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   *   Each person entry can hold up to 248 faces.
     *   *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB
     *   to 6MB.
     *   *   "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces
     *   to/from different persons are processed in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     mod*   el](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [PersonGroup Person - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/addfacefromurl).
     *   Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces,
     *   occluded faces or wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param url Publicly reachable URL of an image.
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace addFaceFromUrl(String personGroupId, UUID personId, String url, AddFaceFromUrlPersonGroupPersonsOptionalParameter addFaceFromUrlOptionalParameter);

    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image
     *   contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     *   persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will
     *   be stored on server until [PersonGroup PersonFace -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/deleteface),
     *   [PersonGroup Person -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/delete) or [PersonGroup
     *   - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/delete) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   *   Higher face image quality means better recognition precision. Please consider high-quality faces:
     *   frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   *   Each person entry can hold up to 248 faces.
     *   *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB
     *   to 6MB.
     *   *   "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces
     *   to/from different persons are processed in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     mod*   el](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [PersonGroup Person - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/addfacefromurl).
     *   Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces,
     *   occluded faces or wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param url Publicly reachable URL of an image.
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> addFaceFromUrlAsync(String personGroupId, UUID personId, String url, AddFaceFromUrlPersonGroupPersonsOptionalParameter addFaceFromUrlOptionalParameter);

    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image
     *   contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     *   persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will
     *   be stored on server until [PersonGroup PersonFace -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/deleteface),
     *   [PersonGroup Person -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/delete) or [PersonGroup
     *   - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/delete) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   *   Higher face image quality means better recognition precision. Please consider high-quality faces:
     *   frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   *   Each person entry can hold up to 248 faces.
     *   *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB
     *   to 6MB.
     *   *   "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces
     *   to/from different persons are processed in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     mod*   el](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [PersonGroup Person - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/addfacefromurl).
     *   Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces,
     *   occluded faces or wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |.
     *
     * @return the first stage of the addFaceFromUrl call
     */
    PersonGroupPersonsAddFaceFromUrlDefinitionStages.WithPersonGroupId addFaceFromUrl();

    /**
     * Grouping of addFaceFromUrl definition stages.
     */
    interface PersonGroupPersonsAddFaceFromUrlDefinitionStages {
        /**
         * The stage of the definition to be specify personGroupId.
         */
        interface WithPersonGroupId {
            /**
             * Id referencing a particular person group.
             *
             * @return next definition stage
             */
            WithPersonId withPersonGroupId(String personGroupId);
        }
        /**
         * The stage of the definition to be specify personId.
         */
        interface WithPersonId {
            /**
             * Id referencing a particular person.
             *
             * @return next definition stage
             */
            WithUrl withPersonId(UUID personId);
        }
        /**
         * The stage of the definition to be specify url.
         */
        interface WithUrl {
            /**
             * Publicly reachable URL of an image.
             *
             * @return next definition stage
             */
            PersonGroupPersonsAddFaceFromUrlDefinitionStages.WithExecute withUrl(String url);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * User-specified data about the face for any purpose. The maximum length is 1KB.
             *
             * @return next definition stage
             */
            PersonGroupPersonsAddFaceFromUrlDefinitionStages.WithExecute withUserData(String userData);

            /**
             * A face rectangle to specify the target face to be added to a person in the format of
             *   "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the
             *   image, targetFace is required to specify which face to add. No targetFace means there is only one face
             *   detected in the entire image.
             *
             * @return next definition stage
             */
            PersonGroupPersonsAddFaceFromUrlDefinitionStages.WithExecute withTargetFace(List<Integer> targetFace);

            /**
             * Name of detection model. Detection model is used to detect faces in the submitted image. A detection model
             *   name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add
             *   Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.
             *   Possible values include: 'detection_01', 'detection_02'.
             *
             * @return next definition stage
             */
            PersonGroupPersonsAddFaceFromUrlDefinitionStages.WithExecute withDetectionModel(DetectionModel detectionModel);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends PersonGroupPersonsAddFaceFromUrlDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the PersistedFace object if successful.
             */
            PersistedFace execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the PersistedFace object
             */
            Observable<PersistedFace> executeAsync();
        }
    }

    /**
     * The entirety of addFaceFromUrl definition.
     */
    interface PersonGroupPersonsAddFaceFromUrlDefinition extends
        PersonGroupPersonsAddFaceFromUrlDefinitionStages.WithPersonGroupId,
        PersonGroupPersonsAddFaceFromUrlDefinitionStages.WithPersonId,
        PersonGroupPersonsAddFaceFromUrlDefinitionStages.WithUrl,
        PersonGroupPersonsAddFaceFromUrlDefinitionStages.WithExecute {
    }

    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image
     *   contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     *   persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will
     *   be stored on server until [PersonGroup PersonFace -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/deleteface),
     *   [PersonGroup Person -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/delete) or [PersonGroup
     *   - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/delete) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   *   Higher face image quality means better recognition precision. Please consider high-quality faces:
     *   frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   *   Each person entry can hold up to 248 faces.
     *   *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB
     *   to 6MB.
     *   *   "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces
     *   to/from different persons are processed in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     mod*   el](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [PersonGroup Person - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/addfacefromurl).
     *   Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces,
     *   occluded faces or wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace addFaceFromStream(String personGroupId, UUID personId, byte[] image, AddFaceFromStreamPersonGroupPersonsOptionalParameter addFaceFromStreamOptionalParameter);

    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image
     *   contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     *   persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will
     *   be stored on server until [PersonGroup PersonFace -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/deleteface),
     *   [PersonGroup Person -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/delete) or [PersonGroup
     *   - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/delete) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   *   Higher face image quality means better recognition precision. Please consider high-quality faces:
     *   frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   *   Each person entry can hold up to 248 faces.
     *   *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB
     *   to 6MB.
     *   *   "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces
     *   to/from different persons are processed in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     mod*   el](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [PersonGroup Person - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/addfacefromurl).
     *   Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces,
     *   occluded faces or wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> addFaceFromStreamAsync(String personGroupId, UUID personId, byte[] image, AddFaceFromStreamPersonGroupPersonsOptionalParameter addFaceFromStreamOptionalParameter);

    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image
     *   contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     *   persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will
     *   be stored on server until [PersonGroup PersonFace -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/deleteface),
     *   [PersonGroup Person -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/delete) or [PersonGroup
     *   - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup/delete) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   *   Higher face image quality means better recognition precision. Please consider high-quality faces:
     *   frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   *   Each person entry can hold up to 248 faces.
     *   *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB
     *   to 6MB.
     *   *   "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   *   Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   *   Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces
     *   to/from different persons are processed in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     mod*   el](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [PersonGroup Person - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroupperson/addfacefromurl).
     *   Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces,
     *   occluded faces or wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |.
     *
     * @return the first stage of the addFaceFromStream call
     */
    PersonGroupPersonsAddFaceFromStreamDefinitionStages.WithPersonGroupId addFaceFromStream();

    /**
     * Grouping of addFaceFromStream definition stages.
     */
    interface PersonGroupPersonsAddFaceFromStreamDefinitionStages {
        /**
         * The stage of the definition to be specify personGroupId.
         */
        interface WithPersonGroupId {
            /**
             * Id referencing a particular person group.
             *
             * @return next definition stage
             */
            WithPersonId withPersonGroupId(String personGroupId);
        }
        /**
         * The stage of the definition to be specify personId.
         */
        interface WithPersonId {
            /**
             * Id referencing a particular person.
             *
             * @return next definition stage
             */
            WithImage withPersonId(UUID personId);
        }
        /**
         * The stage of the definition to be specify image.
         */
        interface WithImage {
            /**
             * An image stream.
             *
             * @return next definition stage
             */
            PersonGroupPersonsAddFaceFromStreamDefinitionStages.WithExecute withImage(byte[] image);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * User-specified data about the face for any purpose. The maximum length is 1KB.
             *
             * @return next definition stage
             */
            PersonGroupPersonsAddFaceFromStreamDefinitionStages.WithExecute withUserData(String userData);

            /**
             * A face rectangle to specify the target face to be added to a person in the format of
             *   "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the
             *   image, targetFace is required to specify which face to add. No targetFace means there is only one face
             *   detected in the entire image.
             *
             * @return next definition stage
             */
            PersonGroupPersonsAddFaceFromStreamDefinitionStages.WithExecute withTargetFace(List<Integer> targetFace);

            /**
             * Name of detection model. Detection model is used to detect faces in the submitted image. A detection model
             *   name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add
             *   Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.
             *   Possible values include: 'detection_01', 'detection_02'.
             *
             * @return next definition stage
             */
            PersonGroupPersonsAddFaceFromStreamDefinitionStages.WithExecute withDetectionModel(DetectionModel detectionModel);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends PersonGroupPersonsAddFaceFromStreamDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the PersistedFace object if successful.
             */
            PersistedFace execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the PersistedFace object
             */
            Observable<PersistedFace> executeAsync();
        }
    }

    /**
     * The entirety of addFaceFromStream definition.
     */
    interface PersonGroupPersonsAddFaceFromStreamDefinition extends
        PersonGroupPersonsAddFaceFromStreamDefinitionStages.WithPersonGroupId,
        PersonGroupPersonsAddFaceFromStreamDefinitionStages.WithPersonId,
        PersonGroupPersonsAddFaceFromStreamDefinitionStages.WithImage,
        PersonGroupPersonsAddFaceFromStreamDefinitionStages.WithExecute {
    }

}
