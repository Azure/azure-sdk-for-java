/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.faceapi.implementation;

import com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreateLargeFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.GetLargeFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateLargeFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListLargeFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFaceLargeFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromUrlLargeFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListFacesOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromStreamLargeFaceListsOptionalParameter;
import retrofit2.Retrofit;
import com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists;
import com.google.common.base.Joiner;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectionModel;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ImageUrl;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.LargeFaceList;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.MetaDataContract;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.NameAndUserDataContract;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.RecognitionModel;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.TrainingStatus;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFaceRequest;
import com.microsoft.rest.CollectionFormat;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;

import java.io.IOException;
import java.util.List;
import java.util.UUID;
import okhttp3.MediaType;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in LargeFaceLists.
 */
public class LargeFaceListsImpl implements LargeFaceLists {
    /** The Retrofit service to perform REST calls. */
    private LargeFaceListsService service;
    /** The service client containing this operation class. */
    private FaceAPIImpl client;

    /**
     * Initializes an instance of LargeFaceListsImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public LargeFaceListsImpl(Retrofit retrofit, FaceAPIImpl client) {
        this.service = retrofit.create(LargeFaceListsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for LargeFaceLists to be
     * used by Retrofit to perform actually REST calls.
     */
    interface LargeFaceListsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists create" })
        @PUT("largefacelists/{largeFaceListId}")
        Observable<Response<ResponseBody>> create(@Path("largeFaceListId") String largeFaceListId, @Header("accept-language") String acceptLanguage, @Body MetaDataContract bodyParameter, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists get" })
        @GET("largefacelists/{largeFaceListId}")
        Observable<Response<ResponseBody>> get(@Path("largeFaceListId") String largeFaceListId, @Query("returnRecognitionModel") Boolean returnRecognitionModel, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists update" })
        @PATCH("largefacelists/{largeFaceListId}")
        Observable<Response<ResponseBody>> update(@Path("largeFaceListId") String largeFaceListId, @Header("accept-language") String acceptLanguage, @Body NameAndUserDataContract bodyParameter, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists delete" })
        @HTTP(path = "largefacelists/{largeFaceListId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("largeFaceListId") String largeFaceListId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists getTrainingStatus" })
        @GET("largefacelists/{largeFaceListId}/training")
        Observable<Response<ResponseBody>> getTrainingStatus(@Path("largeFaceListId") String largeFaceListId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists list" })
        @GET("largefacelists")
        Observable<Response<ResponseBody>> list(@Query("returnRecognitionModel") Boolean returnRecognitionModel, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists train" })
        @POST("largefacelists/{largeFaceListId}/train")
        Observable<Response<ResponseBody>> train(@Path("largeFaceListId") String largeFaceListId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists deleteFace" })
        @HTTP(path = "largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteFace(@Path("largeFaceListId") String largeFaceListId, @Path("persistedFaceId") UUID persistedFaceId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists getFace" })
        @GET("largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}")
        Observable<Response<ResponseBody>> getFace(@Path("largeFaceListId") String largeFaceListId, @Path("persistedFaceId") UUID persistedFaceId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists updateFace" })
        @PATCH("largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}")
        Observable<Response<ResponseBody>> updateFace(@Path("largeFaceListId") String largeFaceListId, @Path("persistedFaceId") UUID persistedFaceId, @Header("accept-language") String acceptLanguage, @Body UpdateFaceRequest bodyParameter, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists addFaceFromUrl" })
        @POST("largefacelists/{largeFaceListId}/persistedfaces")
        Observable<Response<ResponseBody>> addFaceFromUrl(@Path("largeFaceListId") String largeFaceListId, @Query("userData") String userData, @Query("targetFace") String targetFace, @Query("detectionModel") DetectionModel detectionModel1, @Header("accept-language") String acceptLanguage, @Body ImageUrl imageUrl, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists listFaces" })
        @GET("largefacelists/{largeFaceListId}/persistedfaces")
        Observable<Response<ResponseBody>> listFaces(@Path("largeFaceListId") String largeFaceListId, @Query("start") String start, @Query("top") Integer top, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/octet-stream", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargeFaceLists addFaceFromStream" })
        @POST("largefacelists/{largeFaceListId}/persistedfaces")
        Observable<Response<ResponseBody>> addFaceFromStream(@Path("largeFaceListId") String largeFaceListId, @Query("userData") String userData, @Query("targetFace") String targetFace, @Body RequestBody image, @Query("detectionModel") DetectionModel detectionModel1, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

    }


    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.
     &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar).
     &lt;br /&gt; After creation, user should use [LargeFaceList Face - Add](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl) to import the faces and [LargeFaceList - Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/train) to make it ready for [Face - Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar). No image will be stored. Only the extracted face features are stored on server until [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called.
     &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup) / [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup) and [Face - Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify).
     &lt;br/&gt;'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.
     * 'recognition_01': The default recognition model for [LargeFaceList- Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/create). All those large face lists created before 2019 March are bonded with this recognition model.
     * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.
     Large face list quota:
     * Free-tier subscription quota: 64 large face lists.
     * S0-tier subscription quota: 1,000,000 large face lists.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void create(String largeFaceListId, CreateLargeFaceListsOptionalParameter createOptionalParameter) {
        createWithServiceResponseAsync(largeFaceListId, createOptionalParameter).toBlocking().single().body();
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.
     &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar).
     &lt;br /&gt; After creation, user should use [LargeFaceList Face - Add](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl) to import the faces and [LargeFaceList - Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/train) to make it ready for [Face - Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar). No image will be stored. Only the extracted face features are stored on server until [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called.
     &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup) / [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup) and [Face - Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify).
     &lt;br/&gt;'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.
     * 'recognition_01': The default recognition model for [LargeFaceList- Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/create). All those large face lists created before 2019 March are bonded with this recognition model.
     * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.
     Large face list quota:
     * Free-tier subscription quota: 64 large face lists.
     * S0-tier subscription quota: 1,000,000 large face lists.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> createAsync(String largeFaceListId, CreateLargeFaceListsOptionalParameter createOptionalParameter, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(largeFaceListId, createOptionalParameter), serviceCallback);
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.
     &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar).
     &lt;br /&gt; After creation, user should use [LargeFaceList Face - Add](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl) to import the faces and [LargeFaceList - Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/train) to make it ready for [Face - Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar). No image will be stored. Only the extracted face features are stored on server until [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called.
     &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup) / [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup) and [Face - Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify).
     &lt;br/&gt;'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.
     * 'recognition_01': The default recognition model for [LargeFaceList- Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/create). All those large face lists created before 2019 March are bonded with this recognition model.
     * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.
     Large face list quota:
     * Free-tier subscription quota: 64 large face lists.
     * S0-tier subscription quota: 1,000,000 large face lists.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> createAsync(String largeFaceListId, CreateLargeFaceListsOptionalParameter createOptionalParameter) {
        return createWithServiceResponseAsync(largeFaceListId, createOptionalParameter).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.
     &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar).
     &lt;br /&gt; After creation, user should use [LargeFaceList Face - Add](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl) to import the faces and [LargeFaceList - Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/train) to make it ready for [Face - Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar). No image will be stored. Only the extracted face features are stored on server until [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called.
     &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup) / [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup) and [Face - Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify).
     &lt;br/&gt;'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.
     * 'recognition_01': The default recognition model for [LargeFaceList- Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/create). All those large face lists created before 2019 March are bonded with this recognition model.
     * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.
     Large face list quota:
     * Free-tier subscription quota: 64 large face lists.
     * S0-tier subscription quota: 1,000,000 large face lists.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> createWithServiceResponseAsync(String largeFaceListId, CreateLargeFaceListsOptionalParameter createOptionalParameter) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        final String name = createOptionalParameter != null ? createOptionalParameter.name() : null;
        final String userData = createOptionalParameter != null ? createOptionalParameter.userData() : null;
        final RecognitionModel recognitionModel = createOptionalParameter != null ? createOptionalParameter.recognitionModel() : null;

        return createWithServiceResponseAsync(largeFaceListId, name, userData, recognitionModel);
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and recognitionModel.
     &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face - Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar).
     &lt;br /&gt; After creation, user should use [LargeFaceList Face - Add](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl) to import the faces and [LargeFaceList - Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/train) to make it ready for [Face - Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar). No image will be stored. Only the extracted face features are stored on server until [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called.
     &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification. But if the actual use is to identify person, please use [PersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup) / [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup) and [Face - Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify).
     &lt;br/&gt;'recognitionModel' should be specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are added to an existing large face list will use the recognition model that's already associated with the collection. Existing face features in a large face list can't be updated to features extracted by another version of recognition model.
     * 'recognition_01': The default recognition model for [LargeFaceList- Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/create). All those large face lists created before 2019 March are bonded with this recognition model.
     * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its overall accuracy is improved compared with 'recognition_01'.
     Large face list quota:
     * Free-tier subscription quota: 64 large face lists.
     * S0-tier subscription quota: 1,000,000 large face lists.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @param recognitionModel Possible values include: 'recognition_01', 'recognition_02'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> createWithServiceResponseAsync(String largeFaceListId, String name, String userData, RecognitionModel recognitionModel) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        MetaDataContract bodyParameter = new MetaDataContract();
        bodyParameter.withName(name);
        bodyParameter.withUserData(userData);
        bodyParameter.withRecognitionModel(recognitionModel);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.create(largeFaceListId, this.client.acceptLanguage(), bodyParameter, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> createDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    @Override
    public LargeFaceListsCreateParameters create() {
        return new LargeFaceListsCreateParameters(this);
    }

    /**
     * Internal class implementing LargeFaceListsCreateDefinition.
     */
    class LargeFaceListsCreateParameters implements LargeFaceListsCreateDefinition {
        private LargeFaceListsImpl parent;
        private String largeFaceListId;
        private String name;
        private String userData;
        private RecognitionModel recognitionModel;

        /**
         * Constructor.
         * @param parent the parent object.
         */
        LargeFaceListsCreateParameters(LargeFaceListsImpl parent) {
            this.parent = parent;
        }

        @Override
        public LargeFaceListsCreateParameters withLargeFaceListId(String largeFaceListId) {
            this.largeFaceListId = largeFaceListId;
            return this;
        }

        @Override
        public LargeFaceListsCreateParameters withName(String name) {
            this.name = name;
            return this;
        }

        @Override
        public LargeFaceListsCreateParameters withUserData(String userData) {
            this.userData = userData;
            return this;
        }

        @Override
        public LargeFaceListsCreateParameters withRecognitionModel(RecognitionModel recognitionModel) {
            this.recognitionModel = recognitionModel;
            return this;
        }

        @Override
        public void execute() {
        createWithServiceResponseAsync(largeFaceListId, name, userData, recognitionModel).toBlocking().single().body();
    }

        @Override
        public Observable<Void> executeAsync() {
            return createWithServiceResponseAsync(largeFaceListId, name, userData, recognitionModel).map(new Func1<ServiceResponse<Void>, Void>() {
                @Override
                public Void call(ServiceResponse<Void> response) {
                    return response.body();
                }
            });
        }
    }


    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param getOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LargeFaceList object if successful.
     */
    public LargeFaceList get(String largeFaceListId, GetLargeFaceListsOptionalParameter getOptionalParameter) {
        return getWithServiceResponseAsync(largeFaceListId, getOptionalParameter).toBlocking().single().body();
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param getOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<LargeFaceList> getAsync(String largeFaceListId, GetLargeFaceListsOptionalParameter getOptionalParameter, final ServiceCallback<LargeFaceList> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(largeFaceListId, getOptionalParameter), serviceCallback);
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param getOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LargeFaceList object
     */
    public Observable<LargeFaceList> getAsync(String largeFaceListId, GetLargeFaceListsOptionalParameter getOptionalParameter) {
        return getWithServiceResponseAsync(largeFaceListId, getOptionalParameter).map(new Func1<ServiceResponse<LargeFaceList>, LargeFaceList>() {
            @Override
            public LargeFaceList call(ServiceResponse<LargeFaceList> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param getOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LargeFaceList object
     */
    public Observable<ServiceResponse<LargeFaceList>> getWithServiceResponseAsync(String largeFaceListId, GetLargeFaceListsOptionalParameter getOptionalParameter) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        final Boolean returnRecognitionModel = getOptionalParameter != null ? getOptionalParameter.returnRecognitionModel() : null;

        return getWithServiceResponseAsync(largeFaceListId, returnRecognitionModel);
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LargeFaceList object
     */
    public Observable<ServiceResponse<LargeFaceList>> getWithServiceResponseAsync(String largeFaceListId, Boolean returnRecognitionModel) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.get(largeFaceListId, returnRecognitionModel, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<LargeFaceList>>>() {
                @Override
                public Observable<ServiceResponse<LargeFaceList>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<LargeFaceList> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<LargeFaceList> getDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<LargeFaceList, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<LargeFaceList>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    @Override
    public LargeFaceListsGetParameters get() {
        return new LargeFaceListsGetParameters(this);
    }

    /**
     * Internal class implementing LargeFaceListsGetDefinition.
     */
    class LargeFaceListsGetParameters implements LargeFaceListsGetDefinition {
        private LargeFaceListsImpl parent;
        private String largeFaceListId;
        private Boolean returnRecognitionModel;

        /**
         * Constructor.
         * @param parent the parent object.
         */
        LargeFaceListsGetParameters(LargeFaceListsImpl parent) {
            this.parent = parent;
        }

        @Override
        public LargeFaceListsGetParameters withLargeFaceListId(String largeFaceListId) {
            this.largeFaceListId = largeFaceListId;
            return this;
        }

        @Override
        public LargeFaceListsGetParameters withReturnRecognitionModel(Boolean returnRecognitionModel) {
            this.returnRecognitionModel = returnRecognitionModel;
            return this;
        }

        @Override
        public LargeFaceList execute() {
        return getWithServiceResponseAsync(largeFaceListId, returnRecognitionModel).toBlocking().single().body();
    }

        @Override
        public Observable<LargeFaceList> executeAsync() {
            return getWithServiceResponseAsync(largeFaceListId, returnRecognitionModel).map(new Func1<ServiceResponse<LargeFaceList>, LargeFaceList>() {
                @Override
                public LargeFaceList call(ServiceResponse<LargeFaceList> response) {
                    return response.body();
                }
            });
        }
    }


    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void update(String largeFaceListId, UpdateLargeFaceListsOptionalParameter updateOptionalParameter) {
        updateWithServiceResponseAsync(largeFaceListId, updateOptionalParameter).toBlocking().single().body();
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> updateAsync(String largeFaceListId, UpdateLargeFaceListsOptionalParameter updateOptionalParameter, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(largeFaceListId, updateOptionalParameter), serviceCallback);
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> updateAsync(String largeFaceListId, UpdateLargeFaceListsOptionalParameter updateOptionalParameter) {
        return updateWithServiceResponseAsync(largeFaceListId, updateOptionalParameter).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> updateWithServiceResponseAsync(String largeFaceListId, UpdateLargeFaceListsOptionalParameter updateOptionalParameter) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        final String name = updateOptionalParameter != null ? updateOptionalParameter.name() : null;
        final String userData = updateOptionalParameter != null ? updateOptionalParameter.userData() : null;

        return updateWithServiceResponseAsync(largeFaceListId, name, userData);
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> updateWithServiceResponseAsync(String largeFaceListId, String name, String userData) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        NameAndUserDataContract bodyParameter = new NameAndUserDataContract();
        bodyParameter.withName(name);
        bodyParameter.withUserData(userData);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.update(largeFaceListId, this.client.acceptLanguage(), bodyParameter, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> updateDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    @Override
    public LargeFaceListsUpdateParameters update() {
        return new LargeFaceListsUpdateParameters(this);
    }

    /**
     * Internal class implementing LargeFaceListsUpdateDefinition.
     */
    class LargeFaceListsUpdateParameters implements LargeFaceListsUpdateDefinition {
        private LargeFaceListsImpl parent;
        private String largeFaceListId;
        private String name;
        private String userData;

        /**
         * Constructor.
         * @param parent the parent object.
         */
        LargeFaceListsUpdateParameters(LargeFaceListsImpl parent) {
            this.parent = parent;
        }

        @Override
        public LargeFaceListsUpdateParameters withLargeFaceListId(String largeFaceListId) {
            this.largeFaceListId = largeFaceListId;
            return this;
        }

        @Override
        public LargeFaceListsUpdateParameters withName(String name) {
            this.name = name;
            return this;
        }

        @Override
        public LargeFaceListsUpdateParameters withUserData(String userData) {
            this.userData = userData;
            return this;
        }

        @Override
        public void execute() {
        updateWithServiceResponseAsync(largeFaceListId, name, userData).toBlocking().single().body();
    }

        @Override
        public Observable<Void> executeAsync() {
            return updateWithServiceResponseAsync(largeFaceListId, name, userData).map(new Func1<ServiceResponse<Void>, Void>() {
                @Override
                public Void call(ServiceResponse<Void> response) {
                    return response.body();
                }
            });
        }
    }

    /**
     * Delete a specified large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String largeFaceListId) {
        deleteWithServiceResponseAsync(largeFaceListId).toBlocking().single().body();
    }

    /**
     * Delete a specified large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String largeFaceListId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(largeFaceListId), serviceCallback);
    }

    /**
     * Delete a specified large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String largeFaceListId) {
        return deleteWithServiceResponseAsync(largeFaceListId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a specified large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String largeFaceListId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.delete(largeFaceListId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrainingStatus object if successful.
     */
    public TrainingStatus getTrainingStatus(String largeFaceListId) {
        return getTrainingStatusWithServiceResponseAsync(largeFaceListId).toBlocking().single().body();
    }

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<TrainingStatus> getTrainingStatusAsync(String largeFaceListId, final ServiceCallback<TrainingStatus> serviceCallback) {
        return ServiceFuture.fromResponse(getTrainingStatusWithServiceResponseAsync(largeFaceListId), serviceCallback);
    }

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrainingStatus object
     */
    public Observable<TrainingStatus> getTrainingStatusAsync(String largeFaceListId) {
        return getTrainingStatusWithServiceResponseAsync(largeFaceListId).map(new Func1<ServiceResponse<TrainingStatus>, TrainingStatus>() {
            @Override
            public TrainingStatus call(ServiceResponse<TrainingStatus> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrainingStatus object
     */
    public Observable<ServiceResponse<TrainingStatus>> getTrainingStatusWithServiceResponseAsync(String largeFaceListId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.getTrainingStatus(largeFaceListId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<TrainingStatus>>>() {
                @Override
                public Observable<ServiceResponse<TrainingStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<TrainingStatus> clientResponse = getTrainingStatusDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<TrainingStatus> getTrainingStatusDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<TrainingStatus, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<TrainingStatus>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }


    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt;
     To get face information inside largeFaceList use [LargeFaceList Face - Get](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/getface)&lt;br /&gt;
     * Large face lists are stored in alphabetical order of largeFaceListId.
     * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.
     &lt;br /&gt;
     For example, total 5 large person lists: "list1", ..., "list5".
     &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;LargeFaceList&gt; object if successful.
     */
    public List<LargeFaceList> list(ListLargeFaceListsOptionalParameter listOptionalParameter) {
        return listWithServiceResponseAsync(listOptionalParameter).toBlocking().single().body();
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt;
     To get face information inside largeFaceList use [LargeFaceList Face - Get](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/getface)&lt;br /&gt;
     * Large face lists are stored in alphabetical order of largeFaceListId.
     * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.
     &lt;br /&gt;
     For example, total 5 large person lists: "list1", ..., "list5".
     &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LargeFaceList>> listAsync(ListLargeFaceListsOptionalParameter listOptionalParameter, final ServiceCallback<List<LargeFaceList>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(listOptionalParameter), serviceCallback);
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt;
     To get face information inside largeFaceList use [LargeFaceList Face - Get](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/getface)&lt;br /&gt;
     * Large face lists are stored in alphabetical order of largeFaceListId.
     * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.
     &lt;br /&gt;
     For example, total 5 large person lists: "list1", ..., "list5".
     &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LargeFaceList&gt; object
     */
    public Observable<List<LargeFaceList>> listAsync(ListLargeFaceListsOptionalParameter listOptionalParameter) {
        return listWithServiceResponseAsync(listOptionalParameter).map(new Func1<ServiceResponse<List<LargeFaceList>>, List<LargeFaceList>>() {
            @Override
            public List<LargeFaceList> call(ServiceResponse<List<LargeFaceList>> response) {
                return response.body();
            }
        });
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt;
     To get face information inside largeFaceList use [LargeFaceList Face - Get](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/getface)&lt;br /&gt;
     * Large face lists are stored in alphabetical order of largeFaceListId.
     * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.
     &lt;br /&gt;
     For example, total 5 large person lists: "list1", ..., "list5".
     &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LargeFaceList&gt; object
     */
    public Observable<ServiceResponse<List<LargeFaceList>>> listWithServiceResponseAsync(ListLargeFaceListsOptionalParameter listOptionalParameter) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        final Boolean returnRecognitionModel = listOptionalParameter != null ? listOptionalParameter.returnRecognitionModel() : null;

        return listWithServiceResponseAsync(returnRecognitionModel);
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt;
     To get face information inside largeFaceList use [LargeFaceList Face - Get](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/getface)&lt;br /&gt;
     * Large face lists are stored in alphabetical order of largeFaceListId.
     * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from the first item.
     * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the current call.
     &lt;br /&gt;
     For example, total 5 large person lists: "list1", ..., "list5".
     &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @param returnRecognitionModel A value indicating whether the operation should return 'recognitionModel' in response.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LargeFaceList&gt; object
     */
    public Observable<ServiceResponse<List<LargeFaceList>>> listWithServiceResponseAsync(Boolean returnRecognitionModel) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.list(returnRecognitionModel, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<LargeFaceList>>>>() {
                @Override
                public Observable<ServiceResponse<List<LargeFaceList>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<LargeFaceList>> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<LargeFaceList>> listDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<LargeFaceList>, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<LargeFaceList>>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    @Override
    public LargeFaceListsListParameters list() {
        return new LargeFaceListsListParameters(this);
    }

    /**
     * Internal class implementing LargeFaceListsListDefinition.
     */
    class LargeFaceListsListParameters implements LargeFaceListsListDefinition {
        private LargeFaceListsImpl parent;
        private Boolean returnRecognitionModel;

        /**
         * Constructor.
         * @param parent the parent object.
         */
        LargeFaceListsListParameters(LargeFaceListsImpl parent) {
            this.parent = parent;
        }

        @Override
        public LargeFaceListsListParameters withReturnRecognitionModel(Boolean returnRecognitionModel) {
            this.returnRecognitionModel = returnRecognitionModel;
            return this;
        }

        @Override
        public List<LargeFaceList> execute() {
        return listWithServiceResponseAsync(returnRecognitionModel).toBlocking().single().body();
    }

        @Override
        public Observable<List<LargeFaceList>> executeAsync() {
            return listWithServiceResponseAsync(returnRecognitionModel).map(new Func1<ServiceResponse<List<LargeFaceList>>, List<LargeFaceList>>() {
                @Override
                public List<LargeFaceList> call(ServiceResponse<List<LargeFaceList>> response) {
                    return response.body();
                }
            });
        }
    }

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void train(String largeFaceListId) {
        trainWithServiceResponseAsync(largeFaceListId).toBlocking().single().body();
    }

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> trainAsync(String largeFaceListId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(trainWithServiceResponseAsync(largeFaceListId), serviceCallback);
    }

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> trainAsync(String largeFaceListId) {
        return trainWithServiceResponseAsync(largeFaceListId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> trainWithServiceResponseAsync(String largeFaceListId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.train(largeFaceListId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = trainDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> trainDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    /**
     * Delete a face from a large face list by specified largeFaceListId and persistedFaceId.
     &lt;br /&gt; Adding/deleting faces to/from a same large face list are processed sequentially and to/from different large face lists are in parallel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteFace(String largeFaceListId, UUID persistedFaceId) {
        deleteFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId).toBlocking().single().body();
    }

    /**
     * Delete a face from a large face list by specified largeFaceListId and persistedFaceId.
     &lt;br /&gt; Adding/deleting faces to/from a same large face list are processed sequentially and to/from different large face lists are in parallel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteFaceAsync(String largeFaceListId, UUID persistedFaceId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId), serviceCallback);
    }

    /**
     * Delete a face from a large face list by specified largeFaceListId and persistedFaceId.
     &lt;br /&gt; Adding/deleting faces to/from a same large face list are processed sequentially and to/from different large face lists are in parallel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteFaceAsync(String largeFaceListId, UUID persistedFaceId) {
        return deleteFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a face from a large face list by specified largeFaceListId and persistedFaceId.
     &lt;br /&gt; Adding/deleting faces to/from a same large face list are processed sequentially and to/from different large face lists are in parallel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteFaceWithServiceResponseAsync(String largeFaceListId, UUID persistedFaceId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (persistedFaceId == null) {
            throw new IllegalArgumentException("Parameter persistedFaceId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.deleteFace(largeFaceListId, persistedFaceId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteFaceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteFaceDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    public PersistedFace getFace(String largeFaceListId, UUID persistedFaceId) {
        return getFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId).toBlocking().single().body();
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PersistedFace> getFaceAsync(String largeFaceListId, UUID persistedFaceId, final ServiceCallback<PersistedFace> serviceCallback) {
        return ServiceFuture.fromResponse(getFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId), serviceCallback);
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<PersistedFace> getFaceAsync(String largeFaceListId, UUID persistedFaceId) {
        return getFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId).map(new Func1<ServiceResponse<PersistedFace>, PersistedFace>() {
            @Override
            public PersistedFace call(ServiceResponse<PersistedFace> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<ServiceResponse<PersistedFace>> getFaceWithServiceResponseAsync(String largeFaceListId, UUID persistedFaceId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (persistedFaceId == null) {
            throw new IllegalArgumentException("Parameter persistedFaceId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.getFace(largeFaceListId, persistedFaceId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PersistedFace>>>() {
                @Override
                public Observable<ServiceResponse<PersistedFace>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PersistedFace> clientResponse = getFaceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PersistedFace> getFaceDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PersistedFace, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PersistedFace>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }


    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param updateFaceOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void updateFace(String largeFaceListId, UUID persistedFaceId, UpdateFaceLargeFaceListsOptionalParameter updateFaceOptionalParameter) {
        updateFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId, updateFaceOptionalParameter).toBlocking().single().body();
    }

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param updateFaceOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> updateFaceAsync(String largeFaceListId, UUID persistedFaceId, UpdateFaceLargeFaceListsOptionalParameter updateFaceOptionalParameter, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(updateFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId, updateFaceOptionalParameter), serviceCallback);
    }

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param updateFaceOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> updateFaceAsync(String largeFaceListId, UUID persistedFaceId, UpdateFaceLargeFaceListsOptionalParameter updateFaceOptionalParameter) {
        return updateFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId, updateFaceOptionalParameter).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param updateFaceOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> updateFaceWithServiceResponseAsync(String largeFaceListId, UUID persistedFaceId, UpdateFaceLargeFaceListsOptionalParameter updateFaceOptionalParameter) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (persistedFaceId == null) {
            throw new IllegalArgumentException("Parameter persistedFaceId is required and cannot be null.");
        }
        final String userData = updateFaceOptionalParameter != null ? updateFaceOptionalParameter.userData() : null;

        return updateFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId, userData);
    }

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> updateFaceWithServiceResponseAsync(String largeFaceListId, UUID persistedFaceId, String userData) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (persistedFaceId == null) {
            throw new IllegalArgumentException("Parameter persistedFaceId is required and cannot be null.");
        }
        UpdateFaceRequest bodyParameter = new UpdateFaceRequest();
        bodyParameter.withUserData(userData);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.updateFace(largeFaceListId, persistedFaceId, this.client.acceptLanguage(), bodyParameter, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = updateFaceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> updateFaceDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    @Override
    public LargeFaceListsUpdateFaceParameters updateFace() {
        return new LargeFaceListsUpdateFaceParameters(this);
    }

    /**
     * Internal class implementing LargeFaceListsUpdateFaceDefinition.
     */
    class LargeFaceListsUpdateFaceParameters implements LargeFaceListsUpdateFaceDefinition {
        private LargeFaceListsImpl parent;
        private String largeFaceListId;
        private UUID persistedFaceId;
        private String userData;

        /**
         * Constructor.
         * @param parent the parent object.
         */
        LargeFaceListsUpdateFaceParameters(LargeFaceListsImpl parent) {
            this.parent = parent;
        }

        @Override
        public LargeFaceListsUpdateFaceParameters withLargeFaceListId(String largeFaceListId) {
            this.largeFaceListId = largeFaceListId;
            return this;
        }

        @Override
        public LargeFaceListsUpdateFaceParameters withPersistedFaceId(UUID persistedFaceId) {
            this.persistedFaceId = persistedFaceId;
            return this;
        }

        @Override
        public LargeFaceListsUpdateFaceParameters withUserData(String userData) {
            this.userData = userData;
            return this;
        }

        @Override
        public void execute() {
        updateFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId, userData).toBlocking().single().body();
    }

        @Override
        public Observable<Void> executeAsync() {
            return updateFaceWithServiceResponseAsync(largeFaceListId, persistedFaceId, userData).map(new Func1<ServiceResponse<Void>, Void>() {
                @Override
                public Void call(ServiceResponse<Void> response) {
                    return response.body();
                }
            });
        }
    }


    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     &lt;br /&gt; To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface) or [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargeFaceList - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     Quota:
     * Free-tier subscription quota: 1,000 faces per large face list.
     * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    public PersistedFace addFaceFromUrl(String largeFaceListId, String url, AddFaceFromUrlLargeFaceListsOptionalParameter addFaceFromUrlOptionalParameter) {
        return addFaceFromUrlWithServiceResponseAsync(largeFaceListId, url, addFaceFromUrlOptionalParameter).toBlocking().single().body();
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     &lt;br /&gt; To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface) or [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargeFaceList - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     Quota:
     * Free-tier subscription quota: 1,000 faces per large face list.
     * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PersistedFace> addFaceFromUrlAsync(String largeFaceListId, String url, AddFaceFromUrlLargeFaceListsOptionalParameter addFaceFromUrlOptionalParameter, final ServiceCallback<PersistedFace> serviceCallback) {
        return ServiceFuture.fromResponse(addFaceFromUrlWithServiceResponseAsync(largeFaceListId, url, addFaceFromUrlOptionalParameter), serviceCallback);
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     &lt;br /&gt; To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface) or [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargeFaceList - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     Quota:
     * Free-tier subscription quota: 1,000 faces per large face list.
     * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<PersistedFace> addFaceFromUrlAsync(String largeFaceListId, String url, AddFaceFromUrlLargeFaceListsOptionalParameter addFaceFromUrlOptionalParameter) {
        return addFaceFromUrlWithServiceResponseAsync(largeFaceListId, url, addFaceFromUrlOptionalParameter).map(new Func1<ServiceResponse<PersistedFace>, PersistedFace>() {
            @Override
            public PersistedFace call(ServiceResponse<PersistedFace> response) {
                return response.body();
            }
        });
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     &lt;br /&gt; To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface) or [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargeFaceList - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     Quota:
     * Free-tier subscription quota: 1,000 faces per large face list.
     * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<ServiceResponse<PersistedFace>> addFaceFromUrlWithServiceResponseAsync(String largeFaceListId, String url, AddFaceFromUrlLargeFaceListsOptionalParameter addFaceFromUrlOptionalParameter) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (url == null) {
            throw new IllegalArgumentException("Parameter url is required and cannot be null.");
        }
        final String userData = addFaceFromUrlOptionalParameter != null ? addFaceFromUrlOptionalParameter.userData() : null;
        final List<Integer> targetFace = addFaceFromUrlOptionalParameter != null ? addFaceFromUrlOptionalParameter.targetFace() : null;
        final DetectionModel detectionModel = addFaceFromUrlOptionalParameter != null ? addFaceFromUrlOptionalParameter.detectionModel() : null;

        return addFaceFromUrlWithServiceResponseAsync(largeFaceListId, url, userData, targetFace, detectionModel);
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     &lt;br /&gt; To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface) or [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargeFaceList - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     Quota:
     * Free-tier subscription quota: 1,000 faces per large face list.
     * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it. Possible values include: 'detection_01', 'detection_02'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<ServiceResponse<PersistedFace>> addFaceFromUrlWithServiceResponseAsync(String largeFaceListId, String url, String userData, List<Integer> targetFace, DetectionModel detectionModel) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (url == null) {
            throw new IllegalArgumentException("Parameter url is required and cannot be null.");
        }
        Validator.validate(targetFace);
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        String targetFaceConverted = this.client.serializerAdapter().serializeList(targetFace, CollectionFormat.CSV);
        return service.addFaceFromUrl(largeFaceListId, userData, targetFaceConverted, detectionModel, this.client.acceptLanguage(), imageUrl, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PersistedFace>>>() {
                @Override
                public Observable<ServiceResponse<PersistedFace>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PersistedFace> clientResponse = addFaceFromUrlDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PersistedFace> addFaceFromUrlDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PersistedFace, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PersistedFace>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    @Override
    public LargeFaceListsAddFaceFromUrlParameters addFaceFromUrl() {
        return new LargeFaceListsAddFaceFromUrlParameters(this);
    }

    /**
     * Internal class implementing LargeFaceListsAddFaceFromUrlDefinition.
     */
    class LargeFaceListsAddFaceFromUrlParameters implements LargeFaceListsAddFaceFromUrlDefinition {
        private LargeFaceListsImpl parent;
        private String largeFaceListId;
        private String url;
        private String userData;
        private List<Integer> targetFace;
        private DetectionModel detectionModel;

        /**
         * Constructor.
         * @param parent the parent object.
         */
        LargeFaceListsAddFaceFromUrlParameters(LargeFaceListsImpl parent) {
            this.parent = parent;
        }

        @Override
        public LargeFaceListsAddFaceFromUrlParameters withLargeFaceListId(String largeFaceListId) {
            this.largeFaceListId = largeFaceListId;
            return this;
        }

        @Override
        public LargeFaceListsAddFaceFromUrlParameters withUrl(String url) {
            this.url = url;
            return this;
        }

        @Override
        public LargeFaceListsAddFaceFromUrlParameters withUserData(String userData) {
            this.userData = userData;
            return this;
        }

        @Override
        public LargeFaceListsAddFaceFromUrlParameters withTargetFace(List<Integer> targetFace) {
            this.targetFace = targetFace;
            return this;
        }

        @Override
        public LargeFaceListsAddFaceFromUrlParameters withDetectionModel(DetectionModel detectionModel) {
            this.detectionModel = detectionModel;
            return this;
        }

        @Override
        public PersistedFace execute() {
        return addFaceFromUrlWithServiceResponseAsync(largeFaceListId, url, userData, targetFace, detectionModel).toBlocking().single().body();
    }

        @Override
        public Observable<PersistedFace> executeAsync() {
            return addFaceFromUrlWithServiceResponseAsync(largeFaceListId, url, userData, targetFace, detectionModel).map(new Func1<ServiceResponse<PersistedFace>, PersistedFace>() {
                @Override
                public PersistedFace call(ServiceResponse<PersistedFace> response) {
                    return response.body();
                }
            });
        }
    }


    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param listFacesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PersistedFace&gt; object if successful.
     */
    public List<PersistedFace> listFaces(String largeFaceListId, ListFacesOptionalParameter listFacesOptionalParameter) {
        return listFacesWithServiceResponseAsync(largeFaceListId, listFacesOptionalParameter).toBlocking().single().body();
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param listFacesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PersistedFace>> listFacesAsync(String largeFaceListId, ListFacesOptionalParameter listFacesOptionalParameter, final ServiceCallback<List<PersistedFace>> serviceCallback) {
        return ServiceFuture.fromResponse(listFacesWithServiceResponseAsync(largeFaceListId, listFacesOptionalParameter), serviceCallback);
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param listFacesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PersistedFace&gt; object
     */
    public Observable<List<PersistedFace>> listFacesAsync(String largeFaceListId, ListFacesOptionalParameter listFacesOptionalParameter) {
        return listFacesWithServiceResponseAsync(largeFaceListId, listFacesOptionalParameter).map(new Func1<ServiceResponse<List<PersistedFace>>, List<PersistedFace>>() {
            @Override
            public List<PersistedFace> call(ServiceResponse<List<PersistedFace>> response) {
                return response.body();
            }
        });
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param listFacesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PersistedFace&gt; object
     */
    public Observable<ServiceResponse<List<PersistedFace>>> listFacesWithServiceResponseAsync(String largeFaceListId, ListFacesOptionalParameter listFacesOptionalParameter) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        final String start = listFacesOptionalParameter != null ? listFacesOptionalParameter.start() : null;
        final Integer top = listFacesOptionalParameter != null ? listFacesOptionalParameter.top() : null;

        return listFacesWithServiceResponseAsync(largeFaceListId, start, top);
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param start Starting face id to return (used to list a range of faces).
     * @param top Number of faces to return starting with the face id indicated by the 'start' parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PersistedFace&gt; object
     */
    public Observable<ServiceResponse<List<PersistedFace>>> listFacesWithServiceResponseAsync(String largeFaceListId, String start, Integer top) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.listFaces(largeFaceListId, start, top, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<PersistedFace>>>>() {
                @Override
                public Observable<ServiceResponse<List<PersistedFace>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<PersistedFace>> clientResponse = listFacesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<PersistedFace>> listFacesDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<PersistedFace>, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<PersistedFace>>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    @Override
    public LargeFaceListsListFacesParameters listFaces() {
        return new LargeFaceListsListFacesParameters(this);
    }

    /**
     * Internal class implementing LargeFaceListsListFacesDefinition.
     */
    class LargeFaceListsListFacesParameters implements LargeFaceListsListFacesDefinition {
        private LargeFaceListsImpl parent;
        private String largeFaceListId;
        private String start;
        private Integer top;

        /**
         * Constructor.
         * @param parent the parent object.
         */
        LargeFaceListsListFacesParameters(LargeFaceListsImpl parent) {
            this.parent = parent;
        }

        @Override
        public LargeFaceListsListFacesParameters withLargeFaceListId(String largeFaceListId) {
            this.largeFaceListId = largeFaceListId;
            return this;
        }

        @Override
        public LargeFaceListsListFacesParameters withStart(String start) {
            this.start = start;
            return this;
        }

        @Override
        public LargeFaceListsListFacesParameters withTop(Integer top) {
            this.top = top;
            return this;
        }

        @Override
        public List<PersistedFace> execute() {
        return listFacesWithServiceResponseAsync(largeFaceListId, start, top).toBlocking().single().body();
    }

        @Override
        public Observable<List<PersistedFace>> executeAsync() {
            return listFacesWithServiceResponseAsync(largeFaceListId, start, top).map(new Func1<ServiceResponse<List<PersistedFace>>, List<PersistedFace>>() {
                @Override
                public List<PersistedFace> call(ServiceResponse<List<PersistedFace>> response) {
                    return response.body();
                }
            });
        }
    }


    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     &lt;br /&gt; To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface) or [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargeFaceList - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     Quota:
     * Free-tier subscription quota: 1,000 faces per large face list.
     * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    public PersistedFace addFaceFromStream(String largeFaceListId, byte[] image, AddFaceFromStreamLargeFaceListsOptionalParameter addFaceFromStreamOptionalParameter) {
        return addFaceFromStreamWithServiceResponseAsync(largeFaceListId, image, addFaceFromStreamOptionalParameter).toBlocking().single().body();
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     &lt;br /&gt; To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface) or [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargeFaceList - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     Quota:
     * Free-tier subscription quota: 1,000 faces per large face list.
     * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PersistedFace> addFaceFromStreamAsync(String largeFaceListId, byte[] image, AddFaceFromStreamLargeFaceListsOptionalParameter addFaceFromStreamOptionalParameter, final ServiceCallback<PersistedFace> serviceCallback) {
        return ServiceFuture.fromResponse(addFaceFromStreamWithServiceResponseAsync(largeFaceListId, image, addFaceFromStreamOptionalParameter), serviceCallback);
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     &lt;br /&gt; To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface) or [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargeFaceList - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     Quota:
     * Free-tier subscription quota: 1,000 faces per large face list.
     * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<PersistedFace> addFaceFromStreamAsync(String largeFaceListId, byte[] image, AddFaceFromStreamLargeFaceListsOptionalParameter addFaceFromStreamOptionalParameter) {
        return addFaceFromStreamWithServiceResponseAsync(largeFaceListId, image, addFaceFromStreamOptionalParameter).map(new Func1<ServiceResponse<PersistedFace>, PersistedFace>() {
            @Override
            public PersistedFace call(ServiceResponse<PersistedFace> response) {
                return response.body();
            }
        });
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     &lt;br /&gt; To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface) or [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargeFaceList - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     Quota:
     * Free-tier subscription quota: 1,000 faces per large face list.
     * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<ServiceResponse<PersistedFace>> addFaceFromStreamWithServiceResponseAsync(String largeFaceListId, byte[] image, AddFaceFromStreamLargeFaceListsOptionalParameter addFaceFromStreamOptionalParameter) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (image == null) {
            throw new IllegalArgumentException("Parameter image is required and cannot be null.");
        }
        final String userData = addFaceFromStreamOptionalParameter != null ? addFaceFromStreamOptionalParameter.userData() : null;
        final List<Integer> targetFace = addFaceFromStreamOptionalParameter != null ? addFaceFromStreamOptionalParameter.targetFace() : null;
        final DetectionModel detectionModel = addFaceFromStreamOptionalParameter != null ? addFaceFromStreamOptionalParameter.detectionModel() : null;

        return addFaceFromStreamWithServiceResponseAsync(largeFaceListId, image, userData, targetFace, detectionModel);
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     &lt;br /&gt; To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface) or [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargeFaceList - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |
     Quota:
     * Free-tier subscription quota: 1,000 faces per large face list.
     * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it. Possible values include: 'detection_01', 'detection_02'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<ServiceResponse<PersistedFace>> addFaceFromStreamWithServiceResponseAsync(String largeFaceListId, byte[] image, String userData, List<Integer> targetFace, DetectionModel detectionModel) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largeFaceListId == null) {
            throw new IllegalArgumentException("Parameter largeFaceListId is required and cannot be null.");
        }
        if (image == null) {
            throw new IllegalArgumentException("Parameter image is required and cannot be null.");
        }
        Validator.validate(targetFace);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        String targetFaceConverted = this.client.serializerAdapter().serializeList(targetFace, CollectionFormat.CSV);
        RequestBody imageConverted = RequestBody.create(MediaType.parse("application/octet-stream"), image);
        return service.addFaceFromStream(largeFaceListId, userData, targetFaceConverted, imageConverted, detectionModel, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PersistedFace>>>() {
                @Override
                public Observable<ServiceResponse<PersistedFace>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PersistedFace> clientResponse = addFaceFromStreamDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PersistedFace> addFaceFromStreamDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PersistedFace, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PersistedFace>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    @Override
    public LargeFaceListsAddFaceFromStreamParameters addFaceFromStream() {
        return new LargeFaceListsAddFaceFromStreamParameters(this);
    }

    /**
     * Internal class implementing LargeFaceListsAddFaceFromStreamDefinition.
     */
    class LargeFaceListsAddFaceFromStreamParameters implements LargeFaceListsAddFaceFromStreamDefinition {
        private LargeFaceListsImpl parent;
        private String largeFaceListId;
        private byte[] image;
        private String userData;
        private List<Integer> targetFace;
        private DetectionModel detectionModel;

        /**
         * Constructor.
         * @param parent the parent object.
         */
        LargeFaceListsAddFaceFromStreamParameters(LargeFaceListsImpl parent) {
            this.parent = parent;
        }

        @Override
        public LargeFaceListsAddFaceFromStreamParameters withLargeFaceListId(String largeFaceListId) {
            this.largeFaceListId = largeFaceListId;
            return this;
        }

        @Override
        public LargeFaceListsAddFaceFromStreamParameters withImage(byte[] image) {
            this.image = image;
            return this;
        }

        @Override
        public LargeFaceListsAddFaceFromStreamParameters withUserData(String userData) {
            this.userData = userData;
            return this;
        }

        @Override
        public LargeFaceListsAddFaceFromStreamParameters withTargetFace(List<Integer> targetFace) {
            this.targetFace = targetFace;
            return this;
        }

        @Override
        public LargeFaceListsAddFaceFromStreamParameters withDetectionModel(DetectionModel detectionModel) {
            this.detectionModel = detectionModel;
            return this;
        }

        @Override
        public PersistedFace execute() {
        return addFaceFromStreamWithServiceResponseAsync(largeFaceListId, image, userData, targetFace, detectionModel).toBlocking().single().body();
    }

        @Override
        public Observable<PersistedFace> executeAsync() {
            return addFaceFromStreamWithServiceResponseAsync(largeFaceListId, image, userData, targetFace, detectionModel).map(new Func1<ServiceResponse<PersistedFace>, PersistedFace>() {
                @Override
                public PersistedFace call(ServiceResponse<PersistedFace> response) {
                    return response.body();
                }
            });
        }
    }

}
