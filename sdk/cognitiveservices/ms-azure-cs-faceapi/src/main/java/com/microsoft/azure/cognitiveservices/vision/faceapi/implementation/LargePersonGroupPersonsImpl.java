/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.faceapi.implementation;

import com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreateLargePersonGroupPersonsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListLargePersonGroupPersonsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateLargePersonGroupPersonsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFaceLargePersonGroupPersonsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromUrlLargePersonGroupPersonsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromStreamLargePersonGroupPersonsOptionalParameter;
import retrofit2.Retrofit;
import com.microsoft.azure.cognitiveservices.vision.faceapi.LargePersonGroupPersons;
import com.google.common.base.Joiner;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectionModel;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ImageUrl;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.NameAndUserDataContract;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.Person;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFaceRequest;
import com.microsoft.rest.CollectionFormat;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;

import java.io.IOException;
import java.util.List;
import java.util.UUID;
import okhttp3.MediaType;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in LargePersonGroupPersons.
 */
public class LargePersonGroupPersonsImpl implements LargePersonGroupPersons {
    /** The Retrofit service to perform REST calls. */
    private LargePersonGroupPersonsService service;
    /** The service client containing this operation class. */
    private FaceAPIImpl client;

    /**
     * Initializes an instance of LargePersonGroupPersonsImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public LargePersonGroupPersonsImpl(Retrofit retrofit, FaceAPIImpl client) {
        this.service = retrofit.create(LargePersonGroupPersonsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for LargePersonGroupPersons to be
     * used by Retrofit to perform actually REST calls.
     */
    interface LargePersonGroupPersonsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargePersonGroupPersons create" })
        @POST("largepersongroups/{largePersonGroupId}/persons")
        Observable<Response<ResponseBody>> create(@Path("largePersonGroupId") String largePersonGroupId, @Header("accept-language") String acceptLanguage, @Body NameAndUserDataContract bodyParameter, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargePersonGroupPersons list" })
        @GET("largepersongroups/{largePersonGroupId}/persons")
        Observable<Response<ResponseBody>> list(@Path("largePersonGroupId") String largePersonGroupId, @Query("start") String start, @Query("top") Integer top, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargePersonGroupPersons delete" })
        @HTTP(path = "largepersongroups/{largePersonGroupId}/persons/{personId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("largePersonGroupId") String largePersonGroupId, @Path("personId") UUID personId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargePersonGroupPersons get" })
        @GET("largepersongroups/{largePersonGroupId}/persons/{personId}")
        Observable<Response<ResponseBody>> get(@Path("largePersonGroupId") String largePersonGroupId, @Path("personId") UUID personId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargePersonGroupPersons update" })
        @PATCH("largepersongroups/{largePersonGroupId}/persons/{personId}")
        Observable<Response<ResponseBody>> update(@Path("largePersonGroupId") String largePersonGroupId, @Path("personId") UUID personId, @Header("accept-language") String acceptLanguage, @Body NameAndUserDataContract bodyParameter, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargePersonGroupPersons deleteFace" })
        @HTTP(path = "largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteFace(@Path("largePersonGroupId") String largePersonGroupId, @Path("personId") UUID personId, @Path("persistedFaceId") UUID persistedFaceId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargePersonGroupPersons getFace" })
        @GET("largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}")
        Observable<Response<ResponseBody>> getFace(@Path("largePersonGroupId") String largePersonGroupId, @Path("personId") UUID personId, @Path("persistedFaceId") UUID persistedFaceId, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargePersonGroupPersons updateFace" })
        @PATCH("largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces/{persistedFaceId}")
        Observable<Response<ResponseBody>> updateFace(@Path("largePersonGroupId") String largePersonGroupId, @Path("personId") UUID personId, @Path("persistedFaceId") UUID persistedFaceId, @Header("accept-language") String acceptLanguage, @Body UpdateFaceRequest bodyParameter, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargePersonGroupPersons addFaceFromUrl" })
        @POST("largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces")
        Observable<Response<ResponseBody>> addFaceFromUrl(@Path("largePersonGroupId") String largePersonGroupId, @Path("personId") UUID personId, @Query("userData") String userData, @Query("targetFace") String targetFace, @Query("detectionModel") DetectionModel detectionModel1, @Header("accept-language") String acceptLanguage, @Body ImageUrl imageUrl, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/octet-stream", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.vision.faceapi.LargePersonGroupPersons addFaceFromStream" })
        @POST("largepersongroups/{largePersonGroupId}/persons/{personId}/persistedfaces")
        Observable<Response<ResponseBody>> addFaceFromStream(@Path("largePersonGroupId") String largePersonGroupId, @Path("personId") UUID personId, @Query("userData") String userData, @Query("targetFace") String targetFace, @Body RequestBody image, @Query("detectionModel") DetectionModel detectionModel1, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

    }


    /**
     * Create a new person in a specified large person group.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Person object if successful.
     */
    public Person create(String largePersonGroupId, CreateLargePersonGroupPersonsOptionalParameter createOptionalParameter) {
        return createWithServiceResponseAsync(largePersonGroupId, createOptionalParameter).toBlocking().single().body();
    }

    /**
     * Create a new person in a specified large person group.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Person> createAsync(String largePersonGroupId, CreateLargePersonGroupPersonsOptionalParameter createOptionalParameter, final ServiceCallback<Person> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(largePersonGroupId, createOptionalParameter), serviceCallback);
    }

    /**
     * Create a new person in a specified large person group.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Person object
     */
    public Observable<Person> createAsync(String largePersonGroupId, CreateLargePersonGroupPersonsOptionalParameter createOptionalParameter) {
        return createWithServiceResponseAsync(largePersonGroupId, createOptionalParameter).map(new Func1<ServiceResponse<Person>, Person>() {
            @Override
            public Person call(ServiceResponse<Person> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a new person in a specified large person group.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Person object
     */
    public Observable<ServiceResponse<Person>> createWithServiceResponseAsync(String largePersonGroupId, CreateLargePersonGroupPersonsOptionalParameter createOptionalParameter) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        final String name = createOptionalParameter != null ? createOptionalParameter.name() : null;
        final String userData = createOptionalParameter != null ? createOptionalParameter.userData() : null;

        return createWithServiceResponseAsync(largePersonGroupId, name, userData);
    }

    /**
     * Create a new person in a specified large person group.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Person object
     */
    public Observable<ServiceResponse<Person>> createWithServiceResponseAsync(String largePersonGroupId, String name, String userData) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        NameAndUserDataContract bodyParameter = new NameAndUserDataContract();
        bodyParameter.withName(name);
        bodyParameter.withUserData(userData);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.create(largePersonGroupId, this.client.acceptLanguage(), bodyParameter, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Person>>>() {
                @Override
                public Observable<ServiceResponse<Person>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Person> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Person> createDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Person, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Person>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    @Override
    public LargePersonGroupPersonsCreateParameters create() {
        return new LargePersonGroupPersonsCreateParameters(this);
    }

    /**
     * Internal class implementing LargePersonGroupPersonsCreateDefinition.
     */
    class LargePersonGroupPersonsCreateParameters implements LargePersonGroupPersonsCreateDefinition {
        private LargePersonGroupPersonsImpl parent;
        private String largePersonGroupId;
        private String name;
        private String userData;

        /**
         * Constructor.
         * @param parent the parent object.
         */
        LargePersonGroupPersonsCreateParameters(LargePersonGroupPersonsImpl parent) {
            this.parent = parent;
        }

        @Override
        public LargePersonGroupPersonsCreateParameters withLargePersonGroupId(String largePersonGroupId) {
            this.largePersonGroupId = largePersonGroupId;
            return this;
        }

        @Override
        public LargePersonGroupPersonsCreateParameters withName(String name) {
            this.name = name;
            return this;
        }

        @Override
        public LargePersonGroupPersonsCreateParameters withUserData(String userData) {
            this.userData = userData;
            return this;
        }

        @Override
        public Person execute() {
        return createWithServiceResponseAsync(largePersonGroupId, name, userData).toBlocking().single().body();
    }

        @Override
        public Observable<Person> executeAsync() {
            return createWithServiceResponseAsync(largePersonGroupId, name, userData).map(new Func1<ServiceResponse<Person>, Person>() {
                @Override
                public Person call(ServiceResponse<Person> response) {
                    return response.body();
                }
            });
        }
    }


    /**
     * List all persons in a large person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Person&gt; object if successful.
     */
    public List<Person> list(String largePersonGroupId, ListLargePersonGroupPersonsOptionalParameter listOptionalParameter) {
        return listWithServiceResponseAsync(largePersonGroupId, listOptionalParameter).toBlocking().single().body();
    }

    /**
     * List all persons in a large person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Person>> listAsync(String largePersonGroupId, ListLargePersonGroupPersonsOptionalParameter listOptionalParameter, final ServiceCallback<List<Person>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(largePersonGroupId, listOptionalParameter), serviceCallback);
    }

    /**
     * List all persons in a large person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Person&gt; object
     */
    public Observable<List<Person>> listAsync(String largePersonGroupId, ListLargePersonGroupPersonsOptionalParameter listOptionalParameter) {
        return listWithServiceResponseAsync(largePersonGroupId, listOptionalParameter).map(new Func1<ServiceResponse<List<Person>>, List<Person>>() {
            @Override
            public List<Person> call(ServiceResponse<List<Person>> response) {
                return response.body();
            }
        });
    }

    /**
     * List all persons in a large person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Person&gt; object
     */
    public Observable<ServiceResponse<List<Person>>> listWithServiceResponseAsync(String largePersonGroupId, ListLargePersonGroupPersonsOptionalParameter listOptionalParameter) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        final String start = listOptionalParameter != null ? listOptionalParameter.start() : null;
        final Integer top = listOptionalParameter != null ? listOptionalParameter.top() : null;

        return listWithServiceResponseAsync(largePersonGroupId, start, top);
    }

    /**
     * List all persons in a large person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param start Starting person id to return (used to list a range of persons).
     * @param top Number of persons to return starting with the person id indicated by the 'start' parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Person&gt; object
     */
    public Observable<ServiceResponse<List<Person>>> listWithServiceResponseAsync(String largePersonGroupId, String start, Integer top) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.list(largePersonGroupId, start, top, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<Person>>>>() {
                @Override
                public Observable<ServiceResponse<List<Person>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<Person>> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<Person>> listDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<Person>, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<Person>>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    @Override
    public LargePersonGroupPersonsListParameters list() {
        return new LargePersonGroupPersonsListParameters(this);
    }

    /**
     * Internal class implementing LargePersonGroupPersonsListDefinition.
     */
    class LargePersonGroupPersonsListParameters implements LargePersonGroupPersonsListDefinition {
        private LargePersonGroupPersonsImpl parent;
        private String largePersonGroupId;
        private String start;
        private Integer top;

        /**
         * Constructor.
         * @param parent the parent object.
         */
        LargePersonGroupPersonsListParameters(LargePersonGroupPersonsImpl parent) {
            this.parent = parent;
        }

        @Override
        public LargePersonGroupPersonsListParameters withLargePersonGroupId(String largePersonGroupId) {
            this.largePersonGroupId = largePersonGroupId;
            return this;
        }

        @Override
        public LargePersonGroupPersonsListParameters withStart(String start) {
            this.start = start;
            return this;
        }

        @Override
        public LargePersonGroupPersonsListParameters withTop(Integer top) {
            this.top = top;
            return this;
        }

        @Override
        public List<Person> execute() {
        return listWithServiceResponseAsync(largePersonGroupId, start, top).toBlocking().single().body();
    }

        @Override
        public Observable<List<Person>> executeAsync() {
            return listWithServiceResponseAsync(largePersonGroupId, start, top).map(new Func1<ServiceResponse<List<Person>>, List<Person>>() {
                @Override
                public List<Person> call(ServiceResponse<List<Person>> response) {
                    return response.body();
                }
            });
        }
    }

    /**
     * Delete an existing person from a large person group. The persistedFaceId, userData, person name and face feature in the person entry will all be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String largePersonGroupId, UUID personId) {
        deleteWithServiceResponseAsync(largePersonGroupId, personId).toBlocking().single().body();
    }

    /**
     * Delete an existing person from a large person group. The persistedFaceId, userData, person name and face feature in the person entry will all be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String largePersonGroupId, UUID personId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(largePersonGroupId, personId), serviceCallback);
    }

    /**
     * Delete an existing person from a large person group. The persistedFaceId, userData, person name and face feature in the person entry will all be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String largePersonGroupId, UUID personId) {
        return deleteWithServiceResponseAsync(largePersonGroupId, personId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete an existing person from a large person group. The persistedFaceId, userData, person name and face feature in the person entry will all be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String largePersonGroupId, UUID personId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.delete(largePersonGroupId, personId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    /**
     * Retrieve a person's name and userData, and the persisted faceIds representing the registered person face feature.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Person object if successful.
     */
    public Person get(String largePersonGroupId, UUID personId) {
        return getWithServiceResponseAsync(largePersonGroupId, personId).toBlocking().single().body();
    }

    /**
     * Retrieve a person's name and userData, and the persisted faceIds representing the registered person face feature.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Person> getAsync(String largePersonGroupId, UUID personId, final ServiceCallback<Person> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(largePersonGroupId, personId), serviceCallback);
    }

    /**
     * Retrieve a person's name and userData, and the persisted faceIds representing the registered person face feature.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Person object
     */
    public Observable<Person> getAsync(String largePersonGroupId, UUID personId) {
        return getWithServiceResponseAsync(largePersonGroupId, personId).map(new Func1<ServiceResponse<Person>, Person>() {
            @Override
            public Person call(ServiceResponse<Person> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve a person's name and userData, and the persisted faceIds representing the registered person face feature.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Person object
     */
    public Observable<ServiceResponse<Person>> getWithServiceResponseAsync(String largePersonGroupId, UUID personId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.get(largePersonGroupId, personId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Person>>>() {
                @Override
                public Observable<ServiceResponse<Person>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Person> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Person> getDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Person, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Person>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }


    /**
     * Update name or userData of a person.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void update(String largePersonGroupId, UUID personId, UpdateLargePersonGroupPersonsOptionalParameter updateOptionalParameter) {
        updateWithServiceResponseAsync(largePersonGroupId, personId, updateOptionalParameter).toBlocking().single().body();
    }

    /**
     * Update name or userData of a person.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> updateAsync(String largePersonGroupId, UUID personId, UpdateLargePersonGroupPersonsOptionalParameter updateOptionalParameter, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(largePersonGroupId, personId, updateOptionalParameter), serviceCallback);
    }

    /**
     * Update name or userData of a person.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> updateAsync(String largePersonGroupId, UUID personId, UpdateLargePersonGroupPersonsOptionalParameter updateOptionalParameter) {
        return updateWithServiceResponseAsync(largePersonGroupId, personId, updateOptionalParameter).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Update name or userData of a person.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> updateWithServiceResponseAsync(String largePersonGroupId, UUID personId, UpdateLargePersonGroupPersonsOptionalParameter updateOptionalParameter) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        final String name = updateOptionalParameter != null ? updateOptionalParameter.name() : null;
        final String userData = updateOptionalParameter != null ? updateOptionalParameter.userData() : null;

        return updateWithServiceResponseAsync(largePersonGroupId, personId, name, userData);
    }

    /**
     * Update name or userData of a person.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param name User defined name, maximum length is 128.
     * @param userData User specified data. Length should not exceed 16KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> updateWithServiceResponseAsync(String largePersonGroupId, UUID personId, String name, String userData) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        NameAndUserDataContract bodyParameter = new NameAndUserDataContract();
        bodyParameter.withName(name);
        bodyParameter.withUserData(userData);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.update(largePersonGroupId, personId, this.client.acceptLanguage(), bodyParameter, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> updateDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    @Override
    public LargePersonGroupPersonsUpdateParameters update() {
        return new LargePersonGroupPersonsUpdateParameters(this);
    }

    /**
     * Internal class implementing LargePersonGroupPersonsUpdateDefinition.
     */
    class LargePersonGroupPersonsUpdateParameters implements LargePersonGroupPersonsUpdateDefinition {
        private LargePersonGroupPersonsImpl parent;
        private String largePersonGroupId;
        private UUID personId;
        private String name;
        private String userData;

        /**
         * Constructor.
         * @param parent the parent object.
         */
        LargePersonGroupPersonsUpdateParameters(LargePersonGroupPersonsImpl parent) {
            this.parent = parent;
        }

        @Override
        public LargePersonGroupPersonsUpdateParameters withLargePersonGroupId(String largePersonGroupId) {
            this.largePersonGroupId = largePersonGroupId;
            return this;
        }

        @Override
        public LargePersonGroupPersonsUpdateParameters withPersonId(UUID personId) {
            this.personId = personId;
            return this;
        }

        @Override
        public LargePersonGroupPersonsUpdateParameters withName(String name) {
            this.name = name;
            return this;
        }

        @Override
        public LargePersonGroupPersonsUpdateParameters withUserData(String userData) {
            this.userData = userData;
            return this;
        }

        @Override
        public void execute() {
        updateWithServiceResponseAsync(largePersonGroupId, personId, name, userData).toBlocking().single().body();
    }

        @Override
        public Observable<Void> executeAsync() {
            return updateWithServiceResponseAsync(largePersonGroupId, personId, name, userData).map(new Func1<ServiceResponse<Void>, Void>() {
                @Override
                public Void call(ServiceResponse<Void> response) {
                    return response.body();
                }
            });
        }
    }

    /**
     * Delete a face from a person in a large person group by specified largePersonGroupId, personId and persistedFaceId.
     &lt;br /&gt; Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteFace(String largePersonGroupId, UUID personId, UUID persistedFaceId) {
        deleteFaceWithServiceResponseAsync(largePersonGroupId, personId, persistedFaceId).toBlocking().single().body();
    }

    /**
     * Delete a face from a person in a large person group by specified largePersonGroupId, personId and persistedFaceId.
     &lt;br /&gt; Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteFaceAsync(String largePersonGroupId, UUID personId, UUID persistedFaceId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteFaceWithServiceResponseAsync(largePersonGroupId, personId, persistedFaceId), serviceCallback);
    }

    /**
     * Delete a face from a person in a large person group by specified largePersonGroupId, personId and persistedFaceId.
     &lt;br /&gt; Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteFaceAsync(String largePersonGroupId, UUID personId, UUID persistedFaceId) {
        return deleteFaceWithServiceResponseAsync(largePersonGroupId, personId, persistedFaceId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a face from a person in a large person group by specified largePersonGroupId, personId and persistedFaceId.
     &lt;br /&gt; Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteFaceWithServiceResponseAsync(String largePersonGroupId, UUID personId, UUID persistedFaceId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        if (persistedFaceId == null) {
            throw new IllegalArgumentException("Parameter persistedFaceId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.deleteFace(largePersonGroupId, personId, persistedFaceId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteFaceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteFaceDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId, personId and its belonging largePersonGroupId).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    public PersistedFace getFace(String largePersonGroupId, UUID personId, UUID persistedFaceId) {
        return getFaceWithServiceResponseAsync(largePersonGroupId, personId, persistedFaceId).toBlocking().single().body();
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId, personId and its belonging largePersonGroupId).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PersistedFace> getFaceAsync(String largePersonGroupId, UUID personId, UUID persistedFaceId, final ServiceCallback<PersistedFace> serviceCallback) {
        return ServiceFuture.fromResponse(getFaceWithServiceResponseAsync(largePersonGroupId, personId, persistedFaceId), serviceCallback);
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId, personId and its belonging largePersonGroupId).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<PersistedFace> getFaceAsync(String largePersonGroupId, UUID personId, UUID persistedFaceId) {
        return getFaceWithServiceResponseAsync(largePersonGroupId, personId, persistedFaceId).map(new Func1<ServiceResponse<PersistedFace>, PersistedFace>() {
            @Override
            public PersistedFace call(ServiceResponse<PersistedFace> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId, personId and its belonging largePersonGroupId).
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<ServiceResponse<PersistedFace>> getFaceWithServiceResponseAsync(String largePersonGroupId, UUID personId, UUID persistedFaceId) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        if (persistedFaceId == null) {
            throw new IllegalArgumentException("Parameter persistedFaceId is required and cannot be null.");
        }
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.getFace(largePersonGroupId, personId, persistedFaceId, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PersistedFace>>>() {
                @Override
                public Observable<ServiceResponse<PersistedFace>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PersistedFace> clientResponse = getFaceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PersistedFace> getFaceDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PersistedFace, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PersistedFace>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }


    /**
     * Update a person persisted face's userData field.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param updateFaceOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void updateFace(String largePersonGroupId, UUID personId, UUID persistedFaceId, UpdateFaceLargePersonGroupPersonsOptionalParameter updateFaceOptionalParameter) {
        updateFaceWithServiceResponseAsync(largePersonGroupId, personId, persistedFaceId, updateFaceOptionalParameter).toBlocking().single().body();
    }

    /**
     * Update a person persisted face's userData field.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param updateFaceOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> updateFaceAsync(String largePersonGroupId, UUID personId, UUID persistedFaceId, UpdateFaceLargePersonGroupPersonsOptionalParameter updateFaceOptionalParameter, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(updateFaceWithServiceResponseAsync(largePersonGroupId, personId, persistedFaceId, updateFaceOptionalParameter), serviceCallback);
    }

    /**
     * Update a person persisted face's userData field.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param updateFaceOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> updateFaceAsync(String largePersonGroupId, UUID personId, UUID persistedFaceId, UpdateFaceLargePersonGroupPersonsOptionalParameter updateFaceOptionalParameter) {
        return updateFaceWithServiceResponseAsync(largePersonGroupId, personId, persistedFaceId, updateFaceOptionalParameter).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a person persisted face's userData field.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param updateFaceOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> updateFaceWithServiceResponseAsync(String largePersonGroupId, UUID personId, UUID persistedFaceId, UpdateFaceLargePersonGroupPersonsOptionalParameter updateFaceOptionalParameter) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        if (persistedFaceId == null) {
            throw new IllegalArgumentException("Parameter persistedFaceId is required and cannot be null.");
        }
        final String userData = updateFaceOptionalParameter != null ? updateFaceOptionalParameter.userData() : null;

        return updateFaceWithServiceResponseAsync(largePersonGroupId, personId, persistedFaceId, userData);
    }

    /**
     * Update a person persisted face's userData field.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param userData User-provided data attached to the face. The size limit is 1KB.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> updateFaceWithServiceResponseAsync(String largePersonGroupId, UUID personId, UUID persistedFaceId, String userData) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        if (persistedFaceId == null) {
            throw new IllegalArgumentException("Parameter persistedFaceId is required and cannot be null.");
        }
        UpdateFaceRequest bodyParameter = new UpdateFaceRequest();
        bodyParameter.withUserData(userData);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        return service.updateFace(largePersonGroupId, personId, persistedFaceId, this.client.acceptLanguage(), bodyParameter, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = updateFaceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> updateFaceDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    @Override
    public LargePersonGroupPersonsUpdateFaceParameters updateFace() {
        return new LargePersonGroupPersonsUpdateFaceParameters(this);
    }

    /**
     * Internal class implementing LargePersonGroupPersonsUpdateFaceDefinition.
     */
    class LargePersonGroupPersonsUpdateFaceParameters implements LargePersonGroupPersonsUpdateFaceDefinition {
        private LargePersonGroupPersonsImpl parent;
        private String largePersonGroupId;
        private UUID personId;
        private UUID persistedFaceId;
        private String userData;

        /**
         * Constructor.
         * @param parent the parent object.
         */
        LargePersonGroupPersonsUpdateFaceParameters(LargePersonGroupPersonsImpl parent) {
            this.parent = parent;
        }

        @Override
        public LargePersonGroupPersonsUpdateFaceParameters withLargePersonGroupId(String largePersonGroupId) {
            this.largePersonGroupId = largePersonGroupId;
            return this;
        }

        @Override
        public LargePersonGroupPersonsUpdateFaceParameters withPersonId(UUID personId) {
            this.personId = personId;
            return this;
        }

        @Override
        public LargePersonGroupPersonsUpdateFaceParameters withPersistedFaceId(UUID persistedFaceId) {
            this.persistedFaceId = persistedFaceId;
            return this;
        }

        @Override
        public LargePersonGroupPersonsUpdateFaceParameters withUserData(String userData) {
            this.userData = userData;
            return this;
        }

        @Override
        public void execute() {
        updateFaceWithServiceResponseAsync(largePersonGroupId, personId, persistedFaceId, userData).toBlocking().single().body();
    }

        @Override
        public Observable<Void> executeAsync() {
            return updateFaceWithServiceResponseAsync(largePersonGroupId, personId, persistedFaceId, userData).map(new Func1<ServiceResponse<Void>, Void>() {
                @Override
                public Void call(ServiceResponse<Void> response) {
                    return response.body();
                }
            });
        }
    }


    /**
     * Add a face to a person into a large person group for face identification or verification. To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargePersonGroup PersonFace - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/deleteface), [LargePersonGroup Person - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/delete) or [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/delete) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * Each person entry can hold up to 248 faces.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargePersonGroup Person - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/addfacefromurl). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param url Publicly reachable URL of an image
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    public PersistedFace addFaceFromUrl(String largePersonGroupId, UUID personId, String url, AddFaceFromUrlLargePersonGroupPersonsOptionalParameter addFaceFromUrlOptionalParameter) {
        return addFaceFromUrlWithServiceResponseAsync(largePersonGroupId, personId, url, addFaceFromUrlOptionalParameter).toBlocking().single().body();
    }

    /**
     * Add a face to a person into a large person group for face identification or verification. To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargePersonGroup PersonFace - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/deleteface), [LargePersonGroup Person - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/delete) or [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/delete) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * Each person entry can hold up to 248 faces.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargePersonGroup Person - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/addfacefromurl). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param url Publicly reachable URL of an image
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PersistedFace> addFaceFromUrlAsync(String largePersonGroupId, UUID personId, String url, AddFaceFromUrlLargePersonGroupPersonsOptionalParameter addFaceFromUrlOptionalParameter, final ServiceCallback<PersistedFace> serviceCallback) {
        return ServiceFuture.fromResponse(addFaceFromUrlWithServiceResponseAsync(largePersonGroupId, personId, url, addFaceFromUrlOptionalParameter), serviceCallback);
    }

    /**
     * Add a face to a person into a large person group for face identification or verification. To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargePersonGroup PersonFace - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/deleteface), [LargePersonGroup Person - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/delete) or [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/delete) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * Each person entry can hold up to 248 faces.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargePersonGroup Person - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/addfacefromurl). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param url Publicly reachable URL of an image
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<PersistedFace> addFaceFromUrlAsync(String largePersonGroupId, UUID personId, String url, AddFaceFromUrlLargePersonGroupPersonsOptionalParameter addFaceFromUrlOptionalParameter) {
        return addFaceFromUrlWithServiceResponseAsync(largePersonGroupId, personId, url, addFaceFromUrlOptionalParameter).map(new Func1<ServiceResponse<PersistedFace>, PersistedFace>() {
            @Override
            public PersistedFace call(ServiceResponse<PersistedFace> response) {
                return response.body();
            }
        });
    }

    /**
     * Add a face to a person into a large person group for face identification or verification. To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargePersonGroup PersonFace - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/deleteface), [LargePersonGroup Person - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/delete) or [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/delete) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * Each person entry can hold up to 248 faces.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargePersonGroup Person - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/addfacefromurl). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param url Publicly reachable URL of an image
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<ServiceResponse<PersistedFace>> addFaceFromUrlWithServiceResponseAsync(String largePersonGroupId, UUID personId, String url, AddFaceFromUrlLargePersonGroupPersonsOptionalParameter addFaceFromUrlOptionalParameter) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        if (url == null) {
            throw new IllegalArgumentException("Parameter url is required and cannot be null.");
        }
        final String userData = addFaceFromUrlOptionalParameter != null ? addFaceFromUrlOptionalParameter.userData() : null;
        final List<Integer> targetFace = addFaceFromUrlOptionalParameter != null ? addFaceFromUrlOptionalParameter.targetFace() : null;
        final DetectionModel detectionModel = addFaceFromUrlOptionalParameter != null ? addFaceFromUrlOptionalParameter.detectionModel() : null;

        return addFaceFromUrlWithServiceResponseAsync(largePersonGroupId, personId, url, userData, targetFace, detectionModel);
    }

    /**
     * Add a face to a person into a large person group for face identification or verification. To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargePersonGroup PersonFace - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/deleteface), [LargePersonGroup Person - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/delete) or [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/delete) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * Each person entry can hold up to 248 faces.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargePersonGroup Person - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/addfacefromurl). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param url Publicly reachable URL of an image
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it. Possible values include: 'detection_01', 'detection_02'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<ServiceResponse<PersistedFace>> addFaceFromUrlWithServiceResponseAsync(String largePersonGroupId, UUID personId, String url, String userData, List<Integer> targetFace, DetectionModel detectionModel) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        if (url == null) {
            throw new IllegalArgumentException("Parameter url is required and cannot be null.");
        }
        Validator.validate(targetFace);
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.withUrl(url);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        String targetFaceConverted = this.client.serializerAdapter().serializeList(targetFace, CollectionFormat.CSV);
        return service.addFaceFromUrl(largePersonGroupId, personId, userData, targetFaceConverted, detectionModel, this.client.acceptLanguage(), imageUrl, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PersistedFace>>>() {
                @Override
                public Observable<ServiceResponse<PersistedFace>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PersistedFace> clientResponse = addFaceFromUrlDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PersistedFace> addFaceFromUrlDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PersistedFace, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PersistedFace>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    @Override
    public LargePersonGroupPersonsAddFaceFromUrlParameters addFaceFromUrl() {
        return new LargePersonGroupPersonsAddFaceFromUrlParameters(this);
    }

    /**
     * Internal class implementing LargePersonGroupPersonsAddFaceFromUrlDefinition.
     */
    class LargePersonGroupPersonsAddFaceFromUrlParameters implements LargePersonGroupPersonsAddFaceFromUrlDefinition {
        private LargePersonGroupPersonsImpl parent;
        private String largePersonGroupId;
        private UUID personId;
        private String url;
        private String userData;
        private List<Integer> targetFace;
        private DetectionModel detectionModel;

        /**
         * Constructor.
         * @param parent the parent object.
         */
        LargePersonGroupPersonsAddFaceFromUrlParameters(LargePersonGroupPersonsImpl parent) {
            this.parent = parent;
        }

        @Override
        public LargePersonGroupPersonsAddFaceFromUrlParameters withLargePersonGroupId(String largePersonGroupId) {
            this.largePersonGroupId = largePersonGroupId;
            return this;
        }

        @Override
        public LargePersonGroupPersonsAddFaceFromUrlParameters withPersonId(UUID personId) {
            this.personId = personId;
            return this;
        }

        @Override
        public LargePersonGroupPersonsAddFaceFromUrlParameters withUrl(String url) {
            this.url = url;
            return this;
        }

        @Override
        public LargePersonGroupPersonsAddFaceFromUrlParameters withUserData(String userData) {
            this.userData = userData;
            return this;
        }

        @Override
        public LargePersonGroupPersonsAddFaceFromUrlParameters withTargetFace(List<Integer> targetFace) {
            this.targetFace = targetFace;
            return this;
        }

        @Override
        public LargePersonGroupPersonsAddFaceFromUrlParameters withDetectionModel(DetectionModel detectionModel) {
            this.detectionModel = detectionModel;
            return this;
        }

        @Override
        public PersistedFace execute() {
        return addFaceFromUrlWithServiceResponseAsync(largePersonGroupId, personId, url, userData, targetFace, detectionModel).toBlocking().single().body();
    }

        @Override
        public Observable<PersistedFace> executeAsync() {
            return addFaceFromUrlWithServiceResponseAsync(largePersonGroupId, personId, url, userData, targetFace, detectionModel).map(new Func1<ServiceResponse<PersistedFace>, PersistedFace>() {
                @Override
                public PersistedFace call(ServiceResponse<PersistedFace> response) {
                    return response.body();
                }
            });
        }
    }


    /**
     * Add a face to a person into a large person group for face identification or verification. To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargePersonGroup PersonFace - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/deleteface), [LargePersonGroup Person - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/delete) or [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/delete) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * Each person entry can hold up to 248 faces.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargePersonGroup Person - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/addfacefromurl). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    public PersistedFace addFaceFromStream(String largePersonGroupId, UUID personId, byte[] image, AddFaceFromStreamLargePersonGroupPersonsOptionalParameter addFaceFromStreamOptionalParameter) {
        return addFaceFromStreamWithServiceResponseAsync(largePersonGroupId, personId, image, addFaceFromStreamOptionalParameter).toBlocking().single().body();
    }

    /**
     * Add a face to a person into a large person group for face identification or verification. To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargePersonGroup PersonFace - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/deleteface), [LargePersonGroup Person - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/delete) or [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/delete) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * Each person entry can hold up to 248 faces.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargePersonGroup Person - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/addfacefromurl). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PersistedFace> addFaceFromStreamAsync(String largePersonGroupId, UUID personId, byte[] image, AddFaceFromStreamLargePersonGroupPersonsOptionalParameter addFaceFromStreamOptionalParameter, final ServiceCallback<PersistedFace> serviceCallback) {
        return ServiceFuture.fromResponse(addFaceFromStreamWithServiceResponseAsync(largePersonGroupId, personId, image, addFaceFromStreamOptionalParameter), serviceCallback);
    }

    /**
     * Add a face to a person into a large person group for face identification or verification. To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargePersonGroup PersonFace - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/deleteface), [LargePersonGroup Person - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/delete) or [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/delete) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * Each person entry can hold up to 248 faces.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargePersonGroup Person - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/addfacefromurl). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<PersistedFace> addFaceFromStreamAsync(String largePersonGroupId, UUID personId, byte[] image, AddFaceFromStreamLargePersonGroupPersonsOptionalParameter addFaceFromStreamOptionalParameter) {
        return addFaceFromStreamWithServiceResponseAsync(largePersonGroupId, personId, image, addFaceFromStreamOptionalParameter).map(new Func1<ServiceResponse<PersistedFace>, PersistedFace>() {
            @Override
            public PersistedFace call(ServiceResponse<PersistedFace> response) {
                return response.body();
            }
        });
    }

    /**
     * Add a face to a person into a large person group for face identification or verification. To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargePersonGroup PersonFace - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/deleteface), [LargePersonGroup Person - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/delete) or [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/delete) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * Each person entry can hold up to 248 faces.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargePersonGroup Person - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/addfacefromurl). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<ServiceResponse<PersistedFace>> addFaceFromStreamWithServiceResponseAsync(String largePersonGroupId, UUID personId, byte[] image, AddFaceFromStreamLargePersonGroupPersonsOptionalParameter addFaceFromStreamOptionalParameter) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        if (image == null) {
            throw new IllegalArgumentException("Parameter image is required and cannot be null.");
        }
        final String userData = addFaceFromStreamOptionalParameter != null ? addFaceFromStreamOptionalParameter.userData() : null;
        final List<Integer> targetFace = addFaceFromStreamOptionalParameter != null ? addFaceFromStreamOptionalParameter.targetFace() : null;
        final DetectionModel detectionModel = addFaceFromStreamOptionalParameter != null ? addFaceFromStreamOptionalParameter.detectionModel() : null;

        return addFaceFromStreamWithServiceResponseAsync(largePersonGroupId, personId, image, userData, targetFace, detectionModel);
    }

    /**
     * Add a face to a person into a large person group for face identification or verification. To deal with an image contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be stored on server until [LargePersonGroup PersonFace - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/deleteface), [LargePersonGroup Person - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/delete) or [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup/delete) is called.
     &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     * Each person entry can hold up to 248 faces.
     * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to 6MB.
     * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face - Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee to detect and add the face successfully.
     * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause failures.
     * Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     * Different 'detectionModel' values can be provided. To use and compare different detection models, please refer to [How to specify a detection model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
       | Model | Recommended use-case(s) |
       | ---------- | -------- |
       | 'detection_01': | The default detection model for [LargePersonGroup Person - Add Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroupperson/addfacefromurl). Recommend for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not be detected. |
       | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side and blurry faces. |.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param image An image stream.
     * @param userData User-specified data about the face for any purpose. The maximum length is 1KB.
     * @param targetFace A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image.
     * @param detectionModel Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it. Possible values include: 'detection_01', 'detection_02'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    public Observable<ServiceResponse<PersistedFace>> addFaceFromStreamWithServiceResponseAsync(String largePersonGroupId, UUID personId, byte[] image, String userData, List<Integer> targetFace, DetectionModel detectionModel) {
        if (this.client.endpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.endpoint() is required and cannot be null.");
        }
        if (largePersonGroupId == null) {
            throw new IllegalArgumentException("Parameter largePersonGroupId is required and cannot be null.");
        }
        if (personId == null) {
            throw new IllegalArgumentException("Parameter personId is required and cannot be null.");
        }
        if (image == null) {
            throw new IllegalArgumentException("Parameter image is required and cannot be null.");
        }
        Validator.validate(targetFace);
        String parameterizedHost = Joiner.on(", ").join("{Endpoint}", this.client.endpoint());
        String targetFaceConverted = this.client.serializerAdapter().serializeList(targetFace, CollectionFormat.CSV);
        RequestBody imageConverted = RequestBody.create(MediaType.parse("application/octet-stream"), image);
        return service.addFaceFromStream(largePersonGroupId, personId, userData, targetFaceConverted, imageConverted, detectionModel, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PersistedFace>>>() {
                @Override
                public Observable<ServiceResponse<PersistedFace>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PersistedFace> clientResponse = addFaceFromStreamDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PersistedFace> addFaceFromStreamDelegate(Response<ResponseBody> response) throws APIErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PersistedFace, APIErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PersistedFace>() { }.getType())
                .registerError(APIErrorException.class)
                .build(response);
    }

    @Override
    public LargePersonGroupPersonsAddFaceFromStreamParameters addFaceFromStream() {
        return new LargePersonGroupPersonsAddFaceFromStreamParameters(this);
    }

    /**
     * Internal class implementing LargePersonGroupPersonsAddFaceFromStreamDefinition.
     */
    class LargePersonGroupPersonsAddFaceFromStreamParameters implements LargePersonGroupPersonsAddFaceFromStreamDefinition {
        private LargePersonGroupPersonsImpl parent;
        private String largePersonGroupId;
        private UUID personId;
        private byte[] image;
        private String userData;
        private List<Integer> targetFace;
        private DetectionModel detectionModel;

        /**
         * Constructor.
         * @param parent the parent object.
         */
        LargePersonGroupPersonsAddFaceFromStreamParameters(LargePersonGroupPersonsImpl parent) {
            this.parent = parent;
        }

        @Override
        public LargePersonGroupPersonsAddFaceFromStreamParameters withLargePersonGroupId(String largePersonGroupId) {
            this.largePersonGroupId = largePersonGroupId;
            return this;
        }

        @Override
        public LargePersonGroupPersonsAddFaceFromStreamParameters withPersonId(UUID personId) {
            this.personId = personId;
            return this;
        }

        @Override
        public LargePersonGroupPersonsAddFaceFromStreamParameters withImage(byte[] image) {
            this.image = image;
            return this;
        }

        @Override
        public LargePersonGroupPersonsAddFaceFromStreamParameters withUserData(String userData) {
            this.userData = userData;
            return this;
        }

        @Override
        public LargePersonGroupPersonsAddFaceFromStreamParameters withTargetFace(List<Integer> targetFace) {
            this.targetFace = targetFace;
            return this;
        }

        @Override
        public LargePersonGroupPersonsAddFaceFromStreamParameters withDetectionModel(DetectionModel detectionModel) {
            this.detectionModel = detectionModel;
            return this;
        }

        @Override
        public PersistedFace execute() {
        return addFaceFromStreamWithServiceResponseAsync(largePersonGroupId, personId, image, userData, targetFace, detectionModel).toBlocking().single().body();
    }

        @Override
        public Observable<PersistedFace> executeAsync() {
            return addFaceFromStreamWithServiceResponseAsync(largePersonGroupId, personId, image, userData, targetFace, detectionModel).map(new Func1<ServiceResponse<PersistedFace>, PersistedFace>() {
                @Override
                public PersistedFace call(ServiceResponse<PersistedFace> response) {
                    return response.body();
                }
            });
        }
    }

}
