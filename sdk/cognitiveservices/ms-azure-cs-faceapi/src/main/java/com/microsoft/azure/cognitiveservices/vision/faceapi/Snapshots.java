/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.faceapi;

import com.microsoft.azure.cognitiveservices.vision.faceapi.models.TakeOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListSnapshotsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateSnapshotsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ApplyOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.OperationStatus;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.Snapshot;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.SnapshotApplyHeaders;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.SnapshotApplyMode;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.SnapshotObjectType;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.SnapshotTakeHeaders;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Snapshots.
 */
public interface Snapshots {
    /**
     * Submit an operation to take a snapshot of face list, large face list, person group or large person group,
     *   with user-specified snapshot type, source object id, apply scope and an optional user
     *   data.&lt;br /&gt;
     *   The snapshot interfaces are for users to backup and restore their face data from one face subscription to
     *   another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot -
     *   Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste
     *   the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure
     *   instance), so that they can be applied cross accounts and regions.&lt;br /&gt;
     *   Taking snapshot is an asynchronous operation. An operation id can be obtained from the "Operation-Location"
     *   field in response header, to be used in OperationStatus - Get for tracking the progress of creating the
     *   snapshot. The snapshot id will be included in the "resourceLocation" field in OperationStatus - Get response
     *   when the operation status is "succeeded".&lt;br /&gt;
     *   Snapshot taking time depends on the number of person and face entries in the source object. It could be in
     *   seconds, or up to several hours for 1,000,000 persons with multiple
     *   faces.&lt;br /&gt;
     *   Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. User
     *   can delete the snapshot using Snapshot - Delete by themselves any time before
     *   expiration.&lt;br /&gt;
     *   Taking snapshot for a certain object will not block any other operations against the object. All read-only
     *   operations (Get/List and Identify/FindSimilar/Verify) can be conducted as usual. For all writable
     *   operations, including Add/Update/Delete the source object or its persons/faces and Train, they are not
     *   blocked but not recommended because writable updates may not be reflected on the snapshot during its taking.
     *   After snapshot taking is completed, all readable and writable operations can work as normal. Snapshot will
     *   also include the training results of the source object, which means target subscription the snapshot applied
     *   to does not need re-train the target object before calling
     *   Identify/FindSimilar.&lt;br /&gt;
     *   * Free-tier subscription quota: 100 take operations per month.
     *   * S0-tier subscription quota: 100 take operations per day.
     *
     * @param type User specified type for the source object to take snapshot from. Currently FaceList, PersonGroup,
     *   LargeFaceList and LargePersonGroup are supported. Possible values include: 'FaceList', 'LargeFaceList',
     *   'LargePersonGroup', 'PersonGroup'.
     * @param objectId User specified source object id to take snapshot from.
     * @param applyScope User specified array of target Face subscription ids for the snapshot. For each snapshot, only subscriptions
     *   included in the applyScope of Snapshot - Take can apply it.
     * @param takeOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void take(SnapshotObjectType type, String objectId, List<UUID> applyScope, TakeOptionalParameter takeOptionalParameter);

    /**
     * Submit an operation to take a snapshot of face list, large face list, person group or large person group,
     *   with user-specified snapshot type, source object id, apply scope and an optional user
     *   data.&lt;br /&gt;
     *   The snapshot interfaces are for users to backup and restore their face data from one face subscription to
     *   another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot -
     *   Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste
     *   the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure
     *   instance), so that they can be applied cross accounts and regions.&lt;br /&gt;
     *   Taking snapshot is an asynchronous operation. An operation id can be obtained from the "Operation-Location"
     *   field in response header, to be used in OperationStatus - Get for tracking the progress of creating the
     *   snapshot. The snapshot id will be included in the "resourceLocation" field in OperationStatus - Get response
     *   when the operation status is "succeeded".&lt;br /&gt;
     *   Snapshot taking time depends on the number of person and face entries in the source object. It could be in
     *   seconds, or up to several hours for 1,000,000 persons with multiple
     *   faces.&lt;br /&gt;
     *   Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. User
     *   can delete the snapshot using Snapshot - Delete by themselves any time before
     *   expiration.&lt;br /&gt;
     *   Taking snapshot for a certain object will not block any other operations against the object. All read-only
     *   operations (Get/List and Identify/FindSimilar/Verify) can be conducted as usual. For all writable
     *   operations, including Add/Update/Delete the source object or its persons/faces and Train, they are not
     *   blocked but not recommended because writable updates may not be reflected on the snapshot during its taking.
     *   After snapshot taking is completed, all readable and writable operations can work as normal. Snapshot will
     *   also include the training results of the source object, which means target subscription the snapshot applied
     *   to does not need re-train the target object before calling
     *   Identify/FindSimilar.&lt;br /&gt;
     *   * Free-tier subscription quota: 100 take operations per month.
     *   * S0-tier subscription quota: 100 take operations per day.
     *
     * @param type User specified type for the source object to take snapshot from. Currently FaceList, PersonGroup,
     *   LargeFaceList and LargePersonGroup are supported. Possible values include: 'FaceList', 'LargeFaceList',
     *   'LargePersonGroup', 'PersonGroup'.
     * @param objectId User specified source object id to take snapshot from.
     * @param applyScope User specified array of target Face subscription ids for the snapshot. For each snapshot, only subscriptions
     *   included in the applyScope of Snapshot - Take can apply it.
     * @param takeOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> takeAsync(SnapshotObjectType type, String objectId, List<UUID> applyScope, TakeOptionalParameter takeOptionalParameter);

    /**
     * Submit an operation to take a snapshot of face list, large face list, person group or large person group,
     *   with user-specified snapshot type, source object id, apply scope and an optional user
     *   data.&lt;br /&gt;
     *   The snapshot interfaces are for users to backup and restore their face data from one face subscription to
     *   another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot -
     *   Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste
     *   the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure
     *   instance), so that they can be applied cross accounts and regions.&lt;br /&gt;
     *   Taking snapshot is an asynchronous operation. An operation id can be obtained from the "Operation-Location"
     *   field in response header, to be used in OperationStatus - Get for tracking the progress of creating the
     *   snapshot. The snapshot id will be included in the "resourceLocation" field in OperationStatus - Get response
     *   when the operation status is "succeeded".&lt;br /&gt;
     *   Snapshot taking time depends on the number of person and face entries in the source object. It could be in
     *   seconds, or up to several hours for 1,000,000 persons with multiple
     *   faces.&lt;br /&gt;
     *   Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. User
     *   can delete the snapshot using Snapshot - Delete by themselves any time before
     *   expiration.&lt;br /&gt;
     *   Taking snapshot for a certain object will not block any other operations against the object. All read-only
     *   operations (Get/List and Identify/FindSimilar/Verify) can be conducted as usual. For all writable
     *   operations, including Add/Update/Delete the source object or its persons/faces and Train, they are not
     *   blocked but not recommended because writable updates may not be reflected on the snapshot during its taking.
     *   After snapshot taking is completed, all readable and writable operations can work as normal. Snapshot will
     *   also include the training results of the source object, which means target subscription the snapshot applied
     *   to does not need re-train the target object before calling
     *   Identify/FindSimilar.&lt;br /&gt;
     *   * Free-tier subscription quota: 100 take operations per month.
     *   * S0-tier subscription quota: 100 take operations per day.
     *
     * @return the first stage of the take call
     */
    SnapshotsTakeDefinitionStages.WithType take();

    /**
     * Grouping of take definition stages.
     */
    interface SnapshotsTakeDefinitionStages {
        /**
         * The stage of the definition to be specify type.
         */
        interface WithType {
            /**
             * User specified type for the source object to take snapshot from. Currently FaceList, PersonGroup,
             *   LargeFaceList and LargePersonGroup are supported. Possible values include: 'FaceList', 'LargeFaceList',
             *   'LargePersonGroup', 'PersonGroup'.
             *
             * @return next definition stage
             */
            WithObjectId withType(SnapshotObjectType type);
        }
        /**
         * The stage of the definition to be specify objectId.
         */
        interface WithObjectId {
            /**
             * User specified source object id to take snapshot from.
             *
             * @return next definition stage
             */
            WithApplyScope withObjectId(String objectId);
        }
        /**
         * The stage of the definition to be specify applyScope.
         */
        interface WithApplyScope {
            /**
             * User specified array of target Face subscription ids for the snapshot. For each snapshot, only subscriptions
             *   included in the applyScope of Snapshot - Take can apply it.
             *
             * @return next definition stage
             */
            SnapshotsTakeDefinitionStages.WithExecute withApplyScope(List<UUID> applyScope);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * User specified data about the snapshot for any purpose. Length should not exceed 16KB.
             *
             * @return next definition stage
             */
            SnapshotsTakeDefinitionStages.WithExecute withUserData(String userData);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends SnapshotsTakeDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             */
            void execute();

            /**
             * Execute the request asynchronously.
             *
             * @return a representation of the deferred computation of this call if successful.
             */
            Observable<Void> executeAsync();
        }
    }

    /**
     * The entirety of take definition.
     */
    interface SnapshotsTakeDefinition extends
        SnapshotsTakeDefinitionStages.WithType,
        SnapshotsTakeDefinitionStages.WithObjectId,
        SnapshotsTakeDefinitionStages.WithApplyScope,
        SnapshotsTakeDefinitionStages.WithExecute {
    }

    /**
     * List all accessible snapshots with related information, including snapshots that were taken by the user, or
     *   snapshots to be applied to the user (subscription id was included in the applyScope in Snapshot - Take).
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Snapshot&gt; object if successful.
     */
    List<Snapshot> list(ListSnapshotsOptionalParameter listOptionalParameter);

    /**
     * List all accessible snapshots with related information, including snapshots that were taken by the user, or
     *   snapshots to be applied to the user (subscription id was included in the applyScope in Snapshot - Take).
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Snapshot&gt; object
     */
    Observable<List<Snapshot>> listAsync(ListSnapshotsOptionalParameter listOptionalParameter);

    /**
     * List all accessible snapshots with related information, including snapshots that were taken by the user, or
     *   snapshots to be applied to the user (subscription id was included in the applyScope in Snapshot - Take).
     *
     * @return the first stage of the list call
     */
    SnapshotsListDefinitionStages.WithExecute list();

    /**
     * Grouping of list definition stages.
     */
    interface SnapshotsListDefinitionStages {

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * User specified object type as a search filter. Possible values include: 'FaceList', 'LargeFaceList',
             *   'LargePersonGroup', 'PersonGroup'.
             *
             * @return next definition stage
             */
            SnapshotsListDefinitionStages.WithExecute withType(SnapshotObjectType type);

            /**
             * User specified snapshot apply scopes as a search filter. ApplyScope is an array of the target Azure
             *   subscription ids for the snapshot, specified by the user who created the snapshot by Snapshot - Take.
             *
             * @return next definition stage
             */
            SnapshotsListDefinitionStages.WithExecute withApplyScope(List<UUID> applyScope);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends SnapshotsListDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the List&lt;Snapshot&gt; object if successful.
             */
            List<Snapshot> execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the List&lt;Snapshot&gt; object
             */
            Observable<List<Snapshot>> executeAsync();
        }
    }

    /**
     * The entirety of list definition.
     */
    interface SnapshotsListDefinition extends
        SnapshotsListDefinitionStages.WithExecute {
    }


    /**
     * Retrieve information about a snapshot. Snapshot is only accessible to the source subscription who
      *  took it, and target subscriptions included in the applyScope in Snapshot - Take.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Snapshot object if successful.
     */
    Snapshot get(UUID snapshotId);

    /**
     * Retrieve information about a snapshot. Snapshot is only accessible to the source subscription who
      *  took it, and target subscriptions included in the applyScope in Snapshot - Take.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Snapshot object
     */
    Observable<Snapshot> getAsync(UUID snapshotId);


    /**
     * Update the information of a snapshot. Only the source subscription who took the snapshot can update the
     *   snapshot.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void update(UUID snapshotId, UpdateSnapshotsOptionalParameter updateOptionalParameter);

    /**
     * Update the information of a snapshot. Only the source subscription who took the snapshot can update the
     *   snapshot.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> updateAsync(UUID snapshotId, UpdateSnapshotsOptionalParameter updateOptionalParameter);

    /**
     * Update the information of a snapshot. Only the source subscription who took the snapshot can update the
     *   snapshot.
     *
     * @return the first stage of the update call
     */
    SnapshotsUpdateDefinitionStages.WithSnapshotId update();

    /**
     * Grouping of update definition stages.
     */
    interface SnapshotsUpdateDefinitionStages {
        /**
         * The stage of the definition to be specify snapshotId.
         */
        interface WithSnapshotId {
            /**
             * Id referencing a particular snapshot.
             *
             * @return next definition stage
             */
            SnapshotsUpdateDefinitionStages.WithExecute withSnapshotId(UUID snapshotId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * Array of the target Face subscription ids for the snapshot, specified by the user who created the snapshot
             *   when calling Snapshot - Take. For each snapshot, only subscriptions included in the applyScope of Snapshot -
             *   Take can apply it.
             *
             * @return next definition stage
             */
            SnapshotsUpdateDefinitionStages.WithExecute withApplyScope(List<UUID> applyScope);

            /**
             * User specified data about the snapshot for any purpose. Length should not exceed 16KB.
             *
             * @return next definition stage
             */
            SnapshotsUpdateDefinitionStages.WithExecute withUserData(String userData);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends SnapshotsUpdateDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             */
            void execute();

            /**
             * Execute the request asynchronously.
             *
             * @return a representation of the deferred computation of this call if successful.
             */
            Observable<Void> executeAsync();
        }
    }

    /**
     * The entirety of update definition.
     */
    interface SnapshotsUpdateDefinition extends
        SnapshotsUpdateDefinitionStages.WithSnapshotId,
        SnapshotsUpdateDefinitionStages.WithExecute {
    }


    /**
     * Delete an existing snapshot according to the snapshotId. All object data and information in the
      *  snapshot will also be deleted. Only the source subscription who took the snapshot can delete the
      *  snapshot. If the user does not delete a snapshot with this API, the snapshot will still be
      *  automatically deleted in 48 hours after creation.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(UUID snapshotId);

    /**
     * Delete an existing snapshot according to the snapshotId. All object data and information in the
      *  snapshot will also be deleted. Only the source subscription who took the snapshot can delete the
      *  snapshot. If the user does not delete a snapshot with this API, the snapshot will still be
      *  automatically deleted in 48 hours after creation.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> deleteAsync(UUID snapshotId);


    /**
     * Submit an operation to apply a snapshot to current subscription. For each snapshot, only subscriptions
     *   included in the applyScope of Snapshot - Take can apply it.&lt;br /&gt;
     *   The snapshot interfaces are for users to backup and restore their face data from one face subscription to
     *   another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot -
     *   Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste
     *   the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure
     *   instance), so that they can be applied cross accounts and regions.&lt;br /&gt;
     *   Applying snapshot is an asynchronous operation. An operation id can be obtained from the
     *   "Operation-Location" field in response header, to be used in OperationStatus - Get for tracking the progress
     *   of applying the snapshot. The target object id will be included in the "resourceLocation" field in
     *   OperationStatus - Get response when the operation status is "succeeded".&lt;br /&gt;
     *   Snapshot applying time depends on the number of person and face entries in the snapshot object. It could be
     *   in seconds, or up to 1 hour for 1,000,000 persons with multiple faces.&lt;br /&gt;
     *   Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. So
     *   the target subscription is required to apply the snapshot in 48 hours since its
     *   creation.&lt;br /&gt;
     *   Applying a snapshot will not block any other operations against the target object, however it is not
     *   recommended because the correctness cannot be guaranteed during snapshot applying. After snapshot applying
     *   is completed, all operations towards the target object can work as normal. Snapshot also includes the
     *   training results of the source object, which means target subscription the snapshot applied to does not need
     *   re-train the target object before calling Identify/FindSimilar.&lt;br /&gt;
     *   One snapshot can be applied multiple times in parallel, while currently only CreateNew apply mode is
     *   supported, which means the apply operation will fail if target subscription already contains an object of
     *   same type and using the same objectId. Users can specify the "objectId" in request body to avoid such
     *   conflicts.&lt;br /&gt;
     *   * Free-tier subscription quota: 100 apply operations per month.
     *   * S0-tier subscription quota: 100 apply operations per day.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @param objectId User specified target object id to be created from the snapshot.
     * @param applyOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void apply(UUID snapshotId, String objectId, ApplyOptionalParameter applyOptionalParameter);

    /**
     * Submit an operation to apply a snapshot to current subscription. For each snapshot, only subscriptions
     *   included in the applyScope of Snapshot - Take can apply it.&lt;br /&gt;
     *   The snapshot interfaces are for users to backup and restore their face data from one face subscription to
     *   another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot -
     *   Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste
     *   the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure
     *   instance), so that they can be applied cross accounts and regions.&lt;br /&gt;
     *   Applying snapshot is an asynchronous operation. An operation id can be obtained from the
     *   "Operation-Location" field in response header, to be used in OperationStatus - Get for tracking the progress
     *   of applying the snapshot. The target object id will be included in the "resourceLocation" field in
     *   OperationStatus - Get response when the operation status is "succeeded".&lt;br /&gt;
     *   Snapshot applying time depends on the number of person and face entries in the snapshot object. It could be
     *   in seconds, or up to 1 hour for 1,000,000 persons with multiple faces.&lt;br /&gt;
     *   Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. So
     *   the target subscription is required to apply the snapshot in 48 hours since its
     *   creation.&lt;br /&gt;
     *   Applying a snapshot will not block any other operations against the target object, however it is not
     *   recommended because the correctness cannot be guaranteed during snapshot applying. After snapshot applying
     *   is completed, all operations towards the target object can work as normal. Snapshot also includes the
     *   training results of the source object, which means target subscription the snapshot applied to does not need
     *   re-train the target object before calling Identify/FindSimilar.&lt;br /&gt;
     *   One snapshot can be applied multiple times in parallel, while currently only CreateNew apply mode is
     *   supported, which means the apply operation will fail if target subscription already contains an object of
     *   same type and using the same objectId. Users can specify the "objectId" in request body to avoid such
     *   conflicts.&lt;br /&gt;
     *   * Free-tier subscription quota: 100 apply operations per month.
     *   * S0-tier subscription quota: 100 apply operations per day.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @param objectId User specified target object id to be created from the snapshot.
     * @param applyOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> applyAsync(UUID snapshotId, String objectId, ApplyOptionalParameter applyOptionalParameter);

    /**
     * Submit an operation to apply a snapshot to current subscription. For each snapshot, only subscriptions
     *   included in the applyScope of Snapshot - Take can apply it.&lt;br /&gt;
     *   The snapshot interfaces are for users to backup and restore their face data from one face subscription to
     *   another, inside same region or across regions. The workflow contains two phases, user first calls Snapshot -
     *   Take to create a copy of the source object and store it as a snapshot, then calls Snapshot - Apply to paste
     *   the snapshot to target subscription. The snapshots are stored in a centralized location (per Azure
     *   instance), so that they can be applied cross accounts and regions.&lt;br /&gt;
     *   Applying snapshot is an asynchronous operation. An operation id can be obtained from the
     *   "Operation-Location" field in response header, to be used in OperationStatus - Get for tracking the progress
     *   of applying the snapshot. The target object id will be included in the "resourceLocation" field in
     *   OperationStatus - Get response when the operation status is "succeeded".&lt;br /&gt;
     *   Snapshot applying time depends on the number of person and face entries in the snapshot object. It could be
     *   in seconds, or up to 1 hour for 1,000,000 persons with multiple faces.&lt;br /&gt;
     *   Snapshots will be automatically expired and cleaned in 48 hours after it is created by Snapshot - Take. So
     *   the target subscription is required to apply the snapshot in 48 hours since its
     *   creation.&lt;br /&gt;
     *   Applying a snapshot will not block any other operations against the target object, however it is not
     *   recommended because the correctness cannot be guaranteed during snapshot applying. After snapshot applying
     *   is completed, all operations towards the target object can work as normal. Snapshot also includes the
     *   training results of the source object, which means target subscription the snapshot applied to does not need
     *   re-train the target object before calling Identify/FindSimilar.&lt;br /&gt;
     *   One snapshot can be applied multiple times in parallel, while currently only CreateNew apply mode is
     *   supported, which means the apply operation will fail if target subscription already contains an object of
     *   same type and using the same objectId. Users can specify the "objectId" in request body to avoid such
     *   conflicts.&lt;br /&gt;
     *   * Free-tier subscription quota: 100 apply operations per month.
     *   * S0-tier subscription quota: 100 apply operations per day.
     *
     * @return the first stage of the apply call
     */
    SnapshotsApplyDefinitionStages.WithSnapshotId apply();

    /**
     * Grouping of apply definition stages.
     */
    interface SnapshotsApplyDefinitionStages {
        /**
         * The stage of the definition to be specify snapshotId.
         */
        interface WithSnapshotId {
            /**
             * Id referencing a particular snapshot.
             *
             * @return next definition stage
             */
            WithObjectId withSnapshotId(UUID snapshotId);
        }
        /**
         * The stage of the definition to be specify objectId.
         */
        interface WithObjectId {
            /**
             * User specified target object id to be created from the snapshot.
             *
             * @return next definition stage
             */
            SnapshotsApplyDefinitionStages.WithExecute withObjectId(String objectId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * Snapshot applying mode. Currently only CreateNew is supported, which means the apply operation will fail if
             *   target subscription already contains an object of same type and using the same objectId. Users can specify
             *   the "objectId" in request body to avoid such conflicts. Possible values include: 'CreateNew'.
             *
             * @return next definition stage
             */
            SnapshotsApplyDefinitionStages.WithExecute withMode(SnapshotApplyMode mode);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends SnapshotsApplyDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             */
            void execute();

            /**
             * Execute the request asynchronously.
             *
             * @return a representation of the deferred computation of this call if successful.
             */
            Observable<Void> executeAsync();
        }
    }

    /**
     * The entirety of apply definition.
     */
    interface SnapshotsApplyDefinition extends
        SnapshotsApplyDefinitionStages.WithSnapshotId,
        SnapshotsApplyDefinitionStages.WithObjectId,
        SnapshotsApplyDefinitionStages.WithExecute {
    }


    /**
     * Retrieve the status of a take/apply snapshot operation.
     *
     * @param operationId Id referencing a particular take/apply snapshot operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus getOperationStatus(UUID operationId);

    /**
     * Retrieve the status of a take/apply snapshot operation.
     *
     * @param operationId Id referencing a particular take/apply snapshot operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> getOperationStatusAsync(UUID operationId);


}
