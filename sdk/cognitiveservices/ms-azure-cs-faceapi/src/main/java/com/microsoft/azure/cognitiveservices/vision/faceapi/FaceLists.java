/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.faceapi;

import com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreateFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.GetFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromUrlFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromStreamFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectionModel;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceList;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.RecognitionModel;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in FaceLists.
 */
public interface FaceLists {
    /**
     * Create an empty face list with user-specified faceListId, name, an optional userData and recognitionModel.
     *   Up to 64 face lists are allowed in one subscription.
     *   &lt;br /&gt; Face list is a list of faces, up to 1,000 faces, and used by [Face -
     *   Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar).
     *   &lt;br /&gt; After creation, user should use [FaceList - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl) to import the
     *   faces. No image will be stored. Only the extracted face features are stored on server until [FaceList -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called.
     *   &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces,
     *   similar face filtering, or as a light way face identification. But if the actual use is to identify person,
     *   please use [PersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup) /
     *   [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup) and [Face -
     *   Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify).
     *   &lt;br /&gt; Please consider
     *   [LargeFaceList](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist) when the face
     *   number is large. It can support up to 1,000,000 faces.
     *   &lt;br /&gt;'recognitionModel' should be specified to associate with this face list.
     *   The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly
     *   specify the model you need in this parameter. New faces that are added to an existing face list will use the
     *   recognition model that's already associated with the collection. Existing face features in a face list can't
     *   be updated to features extracted by another version of recognition model.
     *   * 'recognition_01': The default recognition model for [FaceList-
     *   Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/create). All those face lists
     *   created before 2019 March are bonded with this recognition model.
     *   * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its
     *   overall accuracy is improved compared with 'recognition_01'.
     *
     * @param faceListId Id referencing a particular face list.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void create(String faceListId, CreateFaceListsOptionalParameter createOptionalParameter);

    /**
     * Create an empty face list with user-specified faceListId, name, an optional userData and recognitionModel.
     *   Up to 64 face lists are allowed in one subscription.
     *   &lt;br /&gt; Face list is a list of faces, up to 1,000 faces, and used by [Face -
     *   Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar).
     *   &lt;br /&gt; After creation, user should use [FaceList - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl) to import the
     *   faces. No image will be stored. Only the extracted face features are stored on server until [FaceList -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called.
     *   &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces,
     *   similar face filtering, or as a light way face identification. But if the actual use is to identify person,
     *   please use [PersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup) /
     *   [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup) and [Face -
     *   Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify).
     *   &lt;br /&gt; Please consider
     *   [LargeFaceList](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist) when the face
     *   number is large. It can support up to 1,000,000 faces.
     *   &lt;br /&gt;'recognitionModel' should be specified to associate with this face list.
     *   The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly
     *   specify the model you need in this parameter. New faces that are added to an existing face list will use the
     *   recognition model that's already associated with the collection. Existing face features in a face list can't
     *   be updated to features extracted by another version of recognition model.
     *   * 'recognition_01': The default recognition model for [FaceList-
     *   Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/create). All those face lists
     *   created before 2019 March are bonded with this recognition model.
     *   * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its
     *   overall accuracy is improved compared with 'recognition_01'.
     *
     * @param faceListId Id referencing a particular face list.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> createAsync(String faceListId, CreateFaceListsOptionalParameter createOptionalParameter);

    /**
     * Create an empty face list with user-specified faceListId, name, an optional userData and recognitionModel.
     *   Up to 64 face lists are allowed in one subscription.
     *   &lt;br /&gt; Face list is a list of faces, up to 1,000 faces, and used by [Face -
     *   Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar).
     *   &lt;br /&gt; After creation, user should use [FaceList - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl) to import the
     *   faces. No image will be stored. Only the extracted face features are stored on server until [FaceList -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called.
     *   &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces,
     *   similar face filtering, or as a light way face identification. But if the actual use is to identify person,
     *   please use [PersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup) /
     *   [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup) and [Face -
     *   Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify).
     *   &lt;br /&gt; Please consider
     *   [LargeFaceList](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist) when the face
     *   number is large. It can support up to 1,000,000 faces.
     *   &lt;br /&gt;'recognitionModel' should be specified to associate with this face list.
     *   The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly
     *   specify the model you need in this parameter. New faces that are added to an existing face list will use the
     *   recognition model that's already associated with the collection. Existing face features in a face list can't
     *   be updated to features extracted by another version of recognition model.
     *   * 'recognition_01': The default recognition model for [FaceList-
     *   Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/create). All those face lists
     *   created before 2019 March are bonded with this recognition model.
     *   * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its
     *   overall accuracy is improved compared with 'recognition_01'.
     *
     * @return the first stage of the create call
     */
    FaceListsCreateDefinitionStages.WithFaceListId create();

    /**
     * Grouping of create definition stages.
     */
    interface FaceListsCreateDefinitionStages {
        /**
         * The stage of the definition to be specify faceListId.
         */
        interface WithFaceListId {
            /**
             * Id referencing a particular face list.
             *
             * @return next definition stage
             */
            FaceListsCreateDefinitionStages.WithExecute withFaceListId(String faceListId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * User defined name, maximum length is 128.
             *
             * @return next definition stage
             */
            FaceListsCreateDefinitionStages.WithExecute withName(String name);

            /**
             * User specified data. Length should not exceed 16KB.
             *
             * @return next definition stage
             */
            FaceListsCreateDefinitionStages.WithExecute withUserData(String userData);

            /**
             * Possible values include: 'recognition_01', 'recognition_02'.
             *
             * @return next definition stage
             */
            FaceListsCreateDefinitionStages.WithExecute withRecognitionModel(RecognitionModel recognitionModel);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends FaceListsCreateDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             */
            void execute();

            /**
             * Execute the request asynchronously.
             *
             * @return a representation of the deferred computation of this call if successful.
             */
            Observable<Void> executeAsync();
        }
    }

    /**
     * The entirety of create definition.
     */
    interface FaceListsCreateDefinition extends
        FaceListsCreateDefinitionStages.WithFaceListId,
        FaceListsCreateDefinitionStages.WithExecute {
    }

    /**
     * Retrieve a face list’s faceListId, name, userData, recognitionModel and faces in the face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param getOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FaceList object if successful.
     */
    FaceList get(String faceListId, GetFaceListsOptionalParameter getOptionalParameter);

    /**
     * Retrieve a face list’s faceListId, name, userData, recognitionModel and faces in the face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param getOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FaceList object
     */
    Observable<FaceList> getAsync(String faceListId, GetFaceListsOptionalParameter getOptionalParameter);

    /**
     * Retrieve a face list’s faceListId, name, userData, recognitionModel and faces in the face list.
     *
     * @return the first stage of the get call
     */
    FaceListsGetDefinitionStages.WithFaceListId get();

    /**
     * Grouping of get definition stages.
     */
    interface FaceListsGetDefinitionStages {
        /**
         * The stage of the definition to be specify faceListId.
         */
        interface WithFaceListId {
            /**
             * Id referencing a particular face list.
             *
             * @return next definition stage
             */
            FaceListsGetDefinitionStages.WithExecute withFaceListId(String faceListId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * A value indicating whether the operation should return 'recognitionModel' in response.
             *
             * @return next definition stage
             */
            FaceListsGetDefinitionStages.WithExecute withReturnRecognitionModel(Boolean returnRecognitionModel);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends FaceListsGetDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the FaceList object if successful.
             */
            FaceList execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the FaceList object
             */
            Observable<FaceList> executeAsync();
        }
    }

    /**
     * The entirety of get definition.
     */
    interface FaceListsGetDefinition extends
        FaceListsGetDefinitionStages.WithFaceListId,
        FaceListsGetDefinitionStages.WithExecute {
    }

    /**
     * Update information of a face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void update(String faceListId, UpdateFaceListsOptionalParameter updateOptionalParameter);

    /**
     * Update information of a face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> updateAsync(String faceListId, UpdateFaceListsOptionalParameter updateOptionalParameter);

    /**
     * Update information of a face list.
     *
     * @return the first stage of the update call
     */
    FaceListsUpdateDefinitionStages.WithFaceListId update();

    /**
     * Grouping of update definition stages.
     */
    interface FaceListsUpdateDefinitionStages {
        /**
         * The stage of the definition to be specify faceListId.
         */
        interface WithFaceListId {
            /**
             * Id referencing a particular face list.
             *
             * @return next definition stage
             */
            FaceListsUpdateDefinitionStages.WithExecute withFaceListId(String faceListId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * User defined name, maximum length is 128.
             *
             * @return next definition stage
             */
            FaceListsUpdateDefinitionStages.WithExecute withName(String name);

            /**
             * User specified data. Length should not exceed 16KB.
             *
             * @return next definition stage
             */
            FaceListsUpdateDefinitionStages.WithExecute withUserData(String userData);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends FaceListsUpdateDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             */
            void execute();

            /**
             * Execute the request asynchronously.
             *
             * @return a representation of the deferred computation of this call if successful.
             */
            Observable<Void> executeAsync();
        }
    }

    /**
     * The entirety of update definition.
     */
    interface FaceListsUpdateDefinition extends
        FaceListsUpdateDefinitionStages.WithFaceListId,
        FaceListsUpdateDefinitionStages.WithExecute {
    }


    /**
     * Delete a specified face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String faceListId);

    /**
     * Delete a specified face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> deleteAsync(String faceListId);


    /**
     * List face lists’ faceListId, name, userData and recognitionModel. &lt;br /&gt;
     *   To get face information inside faceList use [FaceList -
     *   Get](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/get).
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;FaceList&gt; object if successful.
     */
    List<FaceList> list(ListFaceListsOptionalParameter listOptionalParameter);

    /**
     * List face lists’ faceListId, name, userData and recognitionModel. &lt;br /&gt;
     *   To get face information inside faceList use [FaceList -
     *   Get](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/get).
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;FaceList&gt; object
     */
    Observable<List<FaceList>> listAsync(ListFaceListsOptionalParameter listOptionalParameter);

    /**
     * List face lists’ faceListId, name, userData and recognitionModel. &lt;br /&gt;
     *   To get face information inside faceList use [FaceList -
     *   Get](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/get).
     *
     * @return the first stage of the list call
     */
    FaceListsListDefinitionStages.WithExecute list();

    /**
     * Grouping of list definition stages.
     */
    interface FaceListsListDefinitionStages {

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * A value indicating whether the operation should return 'recognitionModel' in response.
             *
             * @return next definition stage
             */
            FaceListsListDefinitionStages.WithExecute withReturnRecognitionModel(Boolean returnRecognitionModel);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends FaceListsListDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the List&lt;FaceList&gt; object if successful.
             */
            List<FaceList> execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the List&lt;FaceList&gt; object
             */
            Observable<List<FaceList>> executeAsync();
        }
    }

    /**
     * The entirety of list definition.
     */
    interface FaceListsListDefinition extends
        FaceListsListDefinitionStages.WithExecute {
    }


    /**
     * Delete a face from a face list by specified faceListId and persistedFaceId.
      *  &lt;br /&gt; Adding/deleting faces to/from a same face list are processed
      *  sequentially and to/from different face lists are in parallel.
     *
     * @param faceListId Id referencing a particular face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteFace(String faceListId, UUID persistedFaceId);

    /**
     * Delete a face from a face list by specified faceListId and persistedFaceId.
      *  &lt;br /&gt; Adding/deleting faces to/from a same face list are processed
      *  sequentially and to/from different face lists are in parallel.
     *
     * @param faceListId Id referencing a particular face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> deleteFaceAsync(String faceListId, UUID persistedFaceId);


    /**
     * Add a face to a specified face list, up to 1,000 faces.
     *   &lt;br /&gt; To deal with an image contains multiple faces, input face can be
     *   specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face.
     *   No image will be stored. Only the extracted face feature will be stored on server until [FaceList - Delete
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/deleteface) or [FaceList -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   * Higher face image quality means better detection and recognition precision. Please consider high-quality
     *   faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists
     *   are in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     mod*   el](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [FaceList - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl). Recommend for
     *   near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces
     *   or wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |.
     *
     * @param faceListId Id referencing a particular face list.
     * @param url Publicly reachable URL of an image.
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace addFaceFromUrl(String faceListId, String url, AddFaceFromUrlFaceListsOptionalParameter addFaceFromUrlOptionalParameter);

    /**
     * Add a face to a specified face list, up to 1,000 faces.
     *   &lt;br /&gt; To deal with an image contains multiple faces, input face can be
     *   specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face.
     *   No image will be stored. Only the extracted face feature will be stored on server until [FaceList - Delete
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/deleteface) or [FaceList -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   * Higher face image quality means better detection and recognition precision. Please consider high-quality
     *   faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists
     *   are in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     mod*   el](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [FaceList - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl). Recommend for
     *   near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces
     *   or wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |.
     *
     * @param faceListId Id referencing a particular face list.
     * @param url Publicly reachable URL of an image.
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> addFaceFromUrlAsync(String faceListId, String url, AddFaceFromUrlFaceListsOptionalParameter addFaceFromUrlOptionalParameter);

    /**
     * Add a face to a specified face list, up to 1,000 faces.
     *   &lt;br /&gt; To deal with an image contains multiple faces, input face can be
     *   specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face.
     *   No image will be stored. Only the extracted face feature will be stored on server until [FaceList - Delete
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/deleteface) or [FaceList -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   * Higher face image quality means better detection and recognition precision. Please consider high-quality
     *   faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists
     *   are in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     mod*   el](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [FaceList - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl). Recommend for
     *   near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces
     *   or wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |.
     *
     * @return the first stage of the addFaceFromUrl call
     */
    FaceListsAddFaceFromUrlDefinitionStages.WithFaceListId addFaceFromUrl();

    /**
     * Grouping of addFaceFromUrl definition stages.
     */
    interface FaceListsAddFaceFromUrlDefinitionStages {
        /**
         * The stage of the definition to be specify faceListId.
         */
        interface WithFaceListId {
            /**
             * Id referencing a particular face list.
             *
             * @return next definition stage
             */
            WithUrl withFaceListId(String faceListId);
        }
        /**
         * The stage of the definition to be specify url.
         */
        interface WithUrl {
            /**
             * Publicly reachable URL of an image.
             *
             * @return next definition stage
             */
            FaceListsAddFaceFromUrlDefinitionStages.WithExecute withUrl(String url);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * User-specified data about the face for any purpose. The maximum length is 1KB.
             *
             * @return next definition stage
             */
            FaceListsAddFaceFromUrlDefinitionStages.WithExecute withUserData(String userData);

            /**
             * A face rectangle to specify the target face to be added to a person in the format of
             *   "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the
             *   image, targetFace is required to specify which face to add. No targetFace means there is only one face
             *   detected in the entire image.
             *
             * @return next definition stage
             */
            FaceListsAddFaceFromUrlDefinitionStages.WithExecute withTargetFace(List<Integer> targetFace);

            /**
             * Name of detection model. Detection model is used to detect faces in the submitted image. A detection model
             *   name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add
             *   Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.
             *   Possible values include: 'detection_01', 'detection_02'.
             *
             * @return next definition stage
             */
            FaceListsAddFaceFromUrlDefinitionStages.WithExecute withDetectionModel(DetectionModel detectionModel);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends FaceListsAddFaceFromUrlDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the PersistedFace object if successful.
             */
            PersistedFace execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the PersistedFace object
             */
            Observable<PersistedFace> executeAsync();
        }
    }

    /**
     * The entirety of addFaceFromUrl definition.
     */
    interface FaceListsAddFaceFromUrlDefinition extends
        FaceListsAddFaceFromUrlDefinitionStages.WithFaceListId,
        FaceListsAddFaceFromUrlDefinitionStages.WithUrl,
        FaceListsAddFaceFromUrlDefinitionStages.WithExecute {
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces.
     *   &lt;br /&gt; To deal with an image contains multiple faces, input face can be
     *   specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face.
     *   No image will be stored. Only the extracted face feature will be stored on server until [FaceList - Delete
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/deleteface) or [FaceList -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   * Higher face image quality means better detection and recognition precision. Please consider high-quality
     *   faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists
     *   are in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     mod*   el](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [FaceList - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl). Recommend for
     *   near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces
     *   or wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |.
     *
     * @param faceListId Id referencing a particular face list.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace addFaceFromStream(String faceListId, byte[] image, AddFaceFromStreamFaceListsOptionalParameter addFaceFromStreamOptionalParameter);

    /**
     * Add a face to a specified face list, up to 1,000 faces.
     *   &lt;br /&gt; To deal with an image contains multiple faces, input face can be
     *   specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face.
     *   No image will be stored. Only the extracted face feature will be stored on server until [FaceList - Delete
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/deleteface) or [FaceList -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   * Higher face image quality means better detection and recognition precision. Please consider high-quality
     *   faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists
     *   are in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     mod*   el](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [FaceList - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl). Recommend for
     *   near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces
     *   or wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |.
     *
     * @param faceListId Id referencing a particular face list.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> addFaceFromStreamAsync(String faceListId, byte[] image, AddFaceFromStreamFaceListsOptionalParameter addFaceFromStreamOptionalParameter);

    /**
     * Add a face to a specified face list, up to 1,000 faces.
     *   &lt;br /&gt; To deal with an image contains multiple faces, input face can be
     *   specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face.
     *   No image will be stored. Only the extracted face feature will be stored on server until [FaceList - Delete
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/deleteface) or [FaceList -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/delete) is called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   * Higher face image quality means better detection and recognition precision. Please consider high-quality
     *   faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists
     *   are in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     mod*   el](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [FaceList - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/facelist/addfacefromurl). Recommend for
     *   near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded faces
     *   or wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |.
     *
     * @return the first stage of the addFaceFromStream call
     */
    FaceListsAddFaceFromStreamDefinitionStages.WithFaceListId addFaceFromStream();

    /**
     * Grouping of addFaceFromStream definition stages.
     */
    interface FaceListsAddFaceFromStreamDefinitionStages {
        /**
         * The stage of the definition to be specify faceListId.
         */
        interface WithFaceListId {
            /**
             * Id referencing a particular face list.
             *
             * @return next definition stage
             */
            WithImage withFaceListId(String faceListId);
        }
        /**
         * The stage of the definition to be specify image.
         */
        interface WithImage {
            /**
             * An image stream.
             *
             * @return next definition stage
             */
            FaceListsAddFaceFromStreamDefinitionStages.WithExecute withImage(byte[] image);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * User-specified data about the face for any purpose. The maximum length is 1KB.
             *
             * @return next definition stage
             */
            FaceListsAddFaceFromStreamDefinitionStages.WithExecute withUserData(String userData);

            /**
             * A face rectangle to specify the target face to be added to a person in the format of
             *   "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the
             *   image, targetFace is required to specify which face to add. No targetFace means there is only one face
             *   detected in the entire image.
             *
             * @return next definition stage
             */
            FaceListsAddFaceFromStreamDefinitionStages.WithExecute withTargetFace(List<Integer> targetFace);

            /**
             * Name of detection model. Detection model is used to detect faces in the submitted image. A detection model
             *   name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add
             *   Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.
             *   Possible values include: 'detection_01', 'detection_02'.
             *
             * @return next definition stage
             */
            FaceListsAddFaceFromStreamDefinitionStages.WithExecute withDetectionModel(DetectionModel detectionModel);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends FaceListsAddFaceFromStreamDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the PersistedFace object if successful.
             */
            PersistedFace execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the PersistedFace object
             */
            Observable<PersistedFace> executeAsync();
        }
    }

    /**
     * The entirety of addFaceFromStream definition.
     */
    interface FaceListsAddFaceFromStreamDefinition extends
        FaceListsAddFaceFromStreamDefinitionStages.WithFaceListId,
        FaceListsAddFaceFromStreamDefinitionStages.WithImage,
        FaceListsAddFaceFromStreamDefinitionStages.WithExecute {
    }

}
