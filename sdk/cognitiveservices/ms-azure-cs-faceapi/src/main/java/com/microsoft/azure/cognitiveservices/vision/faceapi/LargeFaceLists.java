/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.vision.faceapi;

import com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreateLargeFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.GetLargeFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateLargeFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListLargeFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFaceLargeFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromUrlLargeFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListFacesOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromStreamLargeFaceListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.APIErrorException;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectionModel;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.LargeFaceList;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.RecognitionModel;
import com.microsoft.azure.cognitiveservices.vision.faceapi.models.TrainingStatus;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in LargeFaceLists.
 */
public interface LargeFaceLists {
    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and
     *   recognitionModel.
     *   &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by
     *   [Face - Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar).
     *   &lt;br /&gt; After creation, user should use [LargeFaceList Face -
     *   Add](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl) to import the
     *   faces and [LargeFaceList -
     *   Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/train) to make it ready for
     *   [Face - Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar). No image
     *   will be stored. Only the extracted face features are stored on server until [LargeFaceList -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called.
     *   &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces,
     *   similar face filtering, or as a light way face identification. But if the actual use is to identify person,
     *   please use [PersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup) /
     *   [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup) and [Face -
     *   Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify).
     *   &lt;br/&gt;'recognitionModel' should be specified to associate with this large face
     *   list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please
     *   explicitly specify the model you need in this parameter. New faces that are added to an existing large face
     *   list will use the recognition model that's already associated with the collection. Existing face features in
     *   a large face list can't be updated to features extracted by another version of recognition model.
     *   * 'recognition_01': The default recognition model for [LargeFaceList-
     *   Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/create). All those large
     *   face lists created before 2019 March are bonded with this recognition model.
     *   * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its
     *   overall accuracy is improved compared with 'recognition_01'.
     *   Large face list quota:
     *   * Free-tier subscription quota: 64 large face lists.
     *   * S0-tier subscription quota: 1,000,000 large face lists.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void create(String largeFaceListId, CreateLargeFaceListsOptionalParameter createOptionalParameter);

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and
     *   recognitionModel.
     *   &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by
     *   [Face - Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar).
     *   &lt;br /&gt; After creation, user should use [LargeFaceList Face -
     *   Add](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl) to import the
     *   faces and [LargeFaceList -
     *   Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/train) to make it ready for
     *   [Face - Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar). No image
     *   will be stored. Only the extracted face features are stored on server until [LargeFaceList -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called.
     *   &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces,
     *   similar face filtering, or as a light way face identification. But if the actual use is to identify person,
     *   please use [PersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup) /
     *   [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup) and [Face -
     *   Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify).
     *   &lt;br/&gt;'recognitionModel' should be specified to associate with this large face
     *   list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please
     *   explicitly specify the model you need in this parameter. New faces that are added to an existing large face
     *   list will use the recognition model that's already associated with the collection. Existing face features in
     *   a large face list can't be updated to features extracted by another version of recognition model.
     *   * 'recognition_01': The default recognition model for [LargeFaceList-
     *   Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/create). All those large
     *   face lists created before 2019 March are bonded with this recognition model.
     *   * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its
     *   overall accuracy is improved compared with 'recognition_01'.
     *   Large face list quota:
     *   * Free-tier subscription quota: 64 large face lists.
     *   * S0-tier subscription quota: 1,000,000 large face lists.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param createOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> createAsync(String largeFaceListId, CreateLargeFaceListsOptionalParameter createOptionalParameter);

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and
     *   recognitionModel.
     *   &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by
     *   [Face - Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar).
     *   &lt;br /&gt; After creation, user should use [LargeFaceList Face -
     *   Add](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl) to import the
     *   faces and [LargeFaceList -
     *   Train](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/train) to make it ready for
     *   [Face - Find Similar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar). No image
     *   will be stored. Only the extracted face features are stored on server until [LargeFaceList -
     *   Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is called.
     *   &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like faces,
     *   similar face filtering, or as a light way face identification. But if the actual use is to identify person,
     *   please use [PersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup) /
     *   [LargePersonGroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup) and [Face -
     *   Identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify).
     *   &lt;br/&gt;'recognitionModel' should be specified to associate with this large face
     *   list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please
     *   explicitly specify the model you need in this parameter. New faces that are added to an existing large face
     *   list will use the recognition model that's already associated with the collection. Existing face features in
     *   a large face list can't be updated to features extracted by another version of recognition model.
     *   * 'recognition_01': The default recognition model for [LargeFaceList-
     *   Create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/create). All those large
     *   face lists created before 2019 March are bonded with this recognition model.
     *   * 'recognition_02': Recognition model released in 2019 March. 'recognition_02' is recommended since its
     *   overall accuracy is improved compared with 'recognition_01'.
     *   Large face list quota:
     *   * Free-tier subscription quota: 64 large face lists.
     *   * S0-tier subscription quota: 1,000,000 large face lists.
     *
     * @return the first stage of the create call
     */
    LargeFaceListsCreateDefinitionStages.WithLargeFaceListId create();

    /**
     * Grouping of create definition stages.
     */
    interface LargeFaceListsCreateDefinitionStages {
        /**
         * The stage of the definition to be specify largeFaceListId.
         */
        interface WithLargeFaceListId {
            /**
             * Id referencing a particular large face list.
             *
             * @return next definition stage
             */
            LargeFaceListsCreateDefinitionStages.WithExecute withLargeFaceListId(String largeFaceListId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * User defined name, maximum length is 128.
             *
             * @return next definition stage
             */
            LargeFaceListsCreateDefinitionStages.WithExecute withName(String name);

            /**
             * User specified data. Length should not exceed 16KB.
             *
             * @return next definition stage
             */
            LargeFaceListsCreateDefinitionStages.WithExecute withUserData(String userData);

            /**
             * Possible values include: 'recognition_01', 'recognition_02'.
             *
             * @return next definition stage
             */
            LargeFaceListsCreateDefinitionStages.WithExecute withRecognitionModel(RecognitionModel recognitionModel);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends LargeFaceListsCreateDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             */
            void execute();

            /**
             * Execute the request asynchronously.
             *
             * @return a representation of the deferred computation of this call if successful.
             */
            Observable<Void> executeAsync();
        }
    }

    /**
     * The entirety of create definition.
     */
    interface LargeFaceListsCreateDefinition extends
        LargeFaceListsCreateDefinitionStages.WithLargeFaceListId,
        LargeFaceListsCreateDefinitionStages.WithExecute {
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param getOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the LargeFaceList object if successful.
     */
    LargeFaceList get(String largeFaceListId, GetLargeFaceListsOptionalParameter getOptionalParameter);

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param getOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the LargeFaceList object
     */
    Observable<LargeFaceList> getAsync(String largeFaceListId, GetLargeFaceListsOptionalParameter getOptionalParameter);

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * @return the first stage of the get call
     */
    LargeFaceListsGetDefinitionStages.WithLargeFaceListId get();

    /**
     * Grouping of get definition stages.
     */
    interface LargeFaceListsGetDefinitionStages {
        /**
         * The stage of the definition to be specify largeFaceListId.
         */
        interface WithLargeFaceListId {
            /**
             * Id referencing a particular large face list.
             *
             * @return next definition stage
             */
            LargeFaceListsGetDefinitionStages.WithExecute withLargeFaceListId(String largeFaceListId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * A value indicating whether the operation should return 'recognitionModel' in response.
             *
             * @return next definition stage
             */
            LargeFaceListsGetDefinitionStages.WithExecute withReturnRecognitionModel(Boolean returnRecognitionModel);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends LargeFaceListsGetDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the LargeFaceList object if successful.
             */
            LargeFaceList execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the LargeFaceList object
             */
            Observable<LargeFaceList> executeAsync();
        }
    }

    /**
     * The entirety of get definition.
     */
    interface LargeFaceListsGetDefinition extends
        LargeFaceListsGetDefinitionStages.WithLargeFaceListId,
        LargeFaceListsGetDefinitionStages.WithExecute {
    }

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void update(String largeFaceListId, UpdateLargeFaceListsOptionalParameter updateOptionalParameter);

    /**
     * Update information of a large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param updateOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> updateAsync(String largeFaceListId, UpdateLargeFaceListsOptionalParameter updateOptionalParameter);

    /**
     * Update information of a large face list.
     *
     * @return the first stage of the update call
     */
    LargeFaceListsUpdateDefinitionStages.WithLargeFaceListId update();

    /**
     * Grouping of update definition stages.
     */
    interface LargeFaceListsUpdateDefinitionStages {
        /**
         * The stage of the definition to be specify largeFaceListId.
         */
        interface WithLargeFaceListId {
            /**
             * Id referencing a particular large face list.
             *
             * @return next definition stage
             */
            LargeFaceListsUpdateDefinitionStages.WithExecute withLargeFaceListId(String largeFaceListId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * User defined name, maximum length is 128.
             *
             * @return next definition stage
             */
            LargeFaceListsUpdateDefinitionStages.WithExecute withName(String name);

            /**
             * User specified data. Length should not exceed 16KB.
             *
             * @return next definition stage
             */
            LargeFaceListsUpdateDefinitionStages.WithExecute withUserData(String userData);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends LargeFaceListsUpdateDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             */
            void execute();

            /**
             * Execute the request asynchronously.
             *
             * @return a representation of the deferred computation of this call if successful.
             */
            Observable<Void> executeAsync();
        }
    }

    /**
     * The entirety of update definition.
     */
    interface LargeFaceListsUpdateDefinition extends
        LargeFaceListsUpdateDefinitionStages.WithLargeFaceListId,
        LargeFaceListsUpdateDefinitionStages.WithExecute {
    }


    /**
     * Delete a specified large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String largeFaceListId);

    /**
     * Delete a specified large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> deleteAsync(String largeFaceListId);



    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrainingStatus object if successful.
     */
    TrainingStatus getTrainingStatus(String largeFaceListId);

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrainingStatus object
     */
    Observable<TrainingStatus> getTrainingStatusAsync(String largeFaceListId);


    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel.
     *   &lt;br /&gt;
     *   To get face information inside largeFaceList use [LargeFaceList Face -
     Get](https://d*   ocs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/getface)&lt;br /&gt;
     *   * Large face lists are stored in alphabetical order of largeFaceListId.
     *   * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have
     *   larger ids by string comparison. "start" set to empty to indicate return from the first item.
     *   * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can
     *   be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the
     *   current call.
     *   &lt;br /&gt;
     *   For example, total 5 large person lists: "list1", ..., "list5".
     *   &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     *   &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     *   &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;LargeFaceList&gt; object if successful.
     */
    List<LargeFaceList> list(ListLargeFaceListsOptionalParameter listOptionalParameter);

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel.
     *   &lt;br /&gt;
     *   To get face information inside largeFaceList use [LargeFaceList Face -
     Get](https://d*   ocs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/getface)&lt;br /&gt;
     *   * Large face lists are stored in alphabetical order of largeFaceListId.
     *   * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have
     *   larger ids by string comparison. "start" set to empty to indicate return from the first item.
     *   * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can
     *   be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the
     *   current call.
     *   &lt;br /&gt;
     *   For example, total 5 large person lists: "list1", ..., "list5".
     *   &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     *   &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     *   &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @param listOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LargeFaceList&gt; object
     */
    Observable<List<LargeFaceList>> listAsync(ListLargeFaceListsOptionalParameter listOptionalParameter);

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel.
     *   &lt;br /&gt;
     *   To get face information inside largeFaceList use [LargeFaceList Face -
     Get](https://d*   ocs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/getface)&lt;br /&gt;
     *   * Large face lists are stored in alphabetical order of largeFaceListId.
     *   * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned entries have
     *   larger ids by string comparison. "start" set to empty to indicate return from the first item.
     *   * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000 entries can
     *   be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of the
     *   current call.
     *   &lt;br /&gt;
     *   For example, total 5 large person lists: "list1", ..., "list5".
     *   &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
     *   &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
     *   &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * @return the first stage of the list call
     */
    LargeFaceListsListDefinitionStages.WithExecute list();

    /**
     * Grouping of list definition stages.
     */
    interface LargeFaceListsListDefinitionStages {

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * A value indicating whether the operation should return 'recognitionModel' in response.
             *
             * @return next definition stage
             */
            LargeFaceListsListDefinitionStages.WithExecute withReturnRecognitionModel(Boolean returnRecognitionModel);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends LargeFaceListsListDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the List&lt;LargeFaceList&gt; object if successful.
             */
            List<LargeFaceList> execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the List&lt;LargeFaceList&gt; object
             */
            Observable<List<LargeFaceList>> executeAsync();
        }
    }

    /**
     * The entirety of list definition.
     */
    interface LargeFaceListsListDefinition extends
        LargeFaceListsListDefinitionStages.WithExecute {
    }


    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void train(String largeFaceListId);

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> trainAsync(String largeFaceListId);



    /**
     * Delete a face from a large face list by specified largeFaceListId and persistedFaceId.
      *  &lt;br /&gt; Adding/deleting faces to/from a same large face list are
      *  processed sequentially and to/from different large face lists are in parallel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteFace(String largeFaceListId, UUID persistedFaceId);

    /**
     * Delete a face from a large face list by specified largeFaceListId and persistedFaceId.
      *  &lt;br /&gt; Adding/deleting faces to/from a same large face list are
      *  processed sequentially and to/from different large face lists are in parallel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> deleteFaceAsync(String largeFaceListId, UUID persistedFaceId);



    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging
      *  largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace getFace(String largeFaceListId, UUID persistedFaceId);

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging
      *  largeFaceListId).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> getFaceAsync(String largeFaceListId, UUID persistedFaceId);


    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param updateFaceOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateFace(String largeFaceListId, UUID persistedFaceId, UpdateFaceLargeFaceListsOptionalParameter updateFaceOptionalParameter);

    /**
     * Update a persisted face's userData field.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param updateFaceOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a representation of the deferred computation of this call if successful.
     */
    Observable<Void> updateFaceAsync(String largeFaceListId, UUID persistedFaceId, UpdateFaceLargeFaceListsOptionalParameter updateFaceOptionalParameter);

    /**
     * Update a persisted face's userData field.
     *
     * @return the first stage of the updateFace call
     */
    LargeFaceListsUpdateFaceDefinitionStages.WithLargeFaceListId updateFace();

    /**
     * Grouping of updateFace definition stages.
     */
    interface LargeFaceListsUpdateFaceDefinitionStages {
        /**
         * The stage of the definition to be specify largeFaceListId.
         */
        interface WithLargeFaceListId {
            /**
             * Id referencing a particular large face list.
             *
             * @return next definition stage
             */
            WithPersistedFaceId withLargeFaceListId(String largeFaceListId);
        }
        /**
         * The stage of the definition to be specify persistedFaceId.
         */
        interface WithPersistedFaceId {
            /**
             * Id referencing a particular persistedFaceId of an existing face.
             *
             * @return next definition stage
             */
            LargeFaceListsUpdateFaceDefinitionStages.WithExecute withPersistedFaceId(UUID persistedFaceId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * User-provided data attached to the face. The size limit is 1KB.
             *
             * @return next definition stage
             */
            LargeFaceListsUpdateFaceDefinitionStages.WithExecute withUserData(String userData);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends LargeFaceListsUpdateFaceDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             */
            void execute();

            /**
             * Execute the request asynchronously.
             *
             * @return a representation of the deferred computation of this call if successful.
             */
            Observable<Void> executeAsync();
        }
    }

    /**
     * The entirety of updateFace definition.
     */
    interface LargeFaceListsUpdateFaceDefinition extends
        LargeFaceListsUpdateFaceDefinitionStages.WithLargeFaceListId,
        LargeFaceListsUpdateFaceDefinitionStages.WithPersistedFaceId,
        LargeFaceListsUpdateFaceDefinitionStages.WithExecute {
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     *   &lt;br /&gt; To deal with an image contains multiple faces, input face can be
     *   specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face.
     *   No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face
     *   - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface) or
     *   [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is
     *   called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     *   clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists
     *   are in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     mod*   el](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [LargeFaceList - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl). Recommend
     *   for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded
     *   faces or wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |
     *   Quota:
     *   * Free-tier subscription quota: 1,000 faces per large face list.
     *   * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image.
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace addFaceFromUrl(String largeFaceListId, String url, AddFaceFromUrlLargeFaceListsOptionalParameter addFaceFromUrlOptionalParameter);

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     *   &lt;br /&gt; To deal with an image contains multiple faces, input face can be
     *   specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face.
     *   No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face
     *   - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface) or
     *   [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is
     *   called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     *   clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists
     *   are in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     mod*   el](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [LargeFaceList - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl). Recommend
     *   for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded
     *   faces or wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |
     *   Quota:
     *   * Free-tier subscription quota: 1,000 faces per large face list.
     *   * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param url Publicly reachable URL of an image.
     * @param addFaceFromUrlOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> addFaceFromUrlAsync(String largeFaceListId, String url, AddFaceFromUrlLargeFaceListsOptionalParameter addFaceFromUrlOptionalParameter);

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     *   &lt;br /&gt; To deal with an image contains multiple faces, input face can be
     *   specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face.
     *   No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face
     *   - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface) or
     *   [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is
     *   called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     *   clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists
     *   are in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     mod*   el](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [LargeFaceList - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl). Recommend
     *   for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded
     *   faces or wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |
     *   Quota:
     *   * Free-tier subscription quota: 1,000 faces per large face list.
     *   * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @return the first stage of the addFaceFromUrl call
     */
    LargeFaceListsAddFaceFromUrlDefinitionStages.WithLargeFaceListId addFaceFromUrl();

    /**
     * Grouping of addFaceFromUrl definition stages.
     */
    interface LargeFaceListsAddFaceFromUrlDefinitionStages {
        /**
         * The stage of the definition to be specify largeFaceListId.
         */
        interface WithLargeFaceListId {
            /**
             * Id referencing a particular large face list.
             *
             * @return next definition stage
             */
            WithUrl withLargeFaceListId(String largeFaceListId);
        }
        /**
         * The stage of the definition to be specify url.
         */
        interface WithUrl {
            /**
             * Publicly reachable URL of an image.
             *
             * @return next definition stage
             */
            LargeFaceListsAddFaceFromUrlDefinitionStages.WithExecute withUrl(String url);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * User-specified data about the face for any purpose. The maximum length is 1KB.
             *
             * @return next definition stage
             */
            LargeFaceListsAddFaceFromUrlDefinitionStages.WithExecute withUserData(String userData);

            /**
             * A face rectangle to specify the target face to be added to a person in the format of
             *   "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the
             *   image, targetFace is required to specify which face to add. No targetFace means there is only one face
             *   detected in the entire image.
             *
             * @return next definition stage
             */
            LargeFaceListsAddFaceFromUrlDefinitionStages.WithExecute withTargetFace(List<Integer> targetFace);

            /**
             * Name of detection model. Detection model is used to detect faces in the submitted image. A detection model
             *   name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add
             *   Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.
             *   Possible values include: 'detection_01', 'detection_02'.
             *
             * @return next definition stage
             */
            LargeFaceListsAddFaceFromUrlDefinitionStages.WithExecute withDetectionModel(DetectionModel detectionModel);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends LargeFaceListsAddFaceFromUrlDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the PersistedFace object if successful.
             */
            PersistedFace execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the PersistedFace object
             */
            Observable<PersistedFace> executeAsync();
        }
    }

    /**
     * The entirety of addFaceFromUrl definition.
     */
    interface LargeFaceListsAddFaceFromUrlDefinition extends
        LargeFaceListsAddFaceFromUrlDefinitionStages.WithLargeFaceListId,
        LargeFaceListsAddFaceFromUrlDefinitionStages.WithUrl,
        LargeFaceListsAddFaceFromUrlDefinitionStages.WithExecute {
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds
     *   of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param listFacesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PersistedFace&gt; object if successful.
     */
    List<PersistedFace> listFaces(String largeFaceListId, ListFacesOptionalParameter listFacesOptionalParameter);

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds
     *   of registered faces of the face).
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param listFacesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PersistedFace&gt; object
     */
    Observable<List<PersistedFace>> listFacesAsync(String largeFaceListId, ListFacesOptionalParameter listFacesOptionalParameter);

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds
     *   of registered faces of the face).
     *
     * @return the first stage of the listFaces call
     */
    LargeFaceListsListFacesDefinitionStages.WithLargeFaceListId listFaces();

    /**
     * Grouping of listFaces definition stages.
     */
    interface LargeFaceListsListFacesDefinitionStages {
        /**
         * The stage of the definition to be specify largeFaceListId.
         */
        interface WithLargeFaceListId {
            /**
             * Id referencing a particular large face list.
             *
             * @return next definition stage
             */
            LargeFaceListsListFacesDefinitionStages.WithExecute withLargeFaceListId(String largeFaceListId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * Starting face id to return (used to list a range of faces).
             *
             * @return next definition stage
             */
            LargeFaceListsListFacesDefinitionStages.WithExecute withStart(String start);

            /**
             * Number of faces to return starting with the face id indicated by the 'start' parameter.
             *
             * @return next definition stage
             */
            LargeFaceListsListFacesDefinitionStages.WithExecute withTop(Integer top);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends LargeFaceListsListFacesDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the List&lt;PersistedFace&gt; object if successful.
             */
            List<PersistedFace> execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the List&lt;PersistedFace&gt; object
             */
            Observable<List<PersistedFace>> executeAsync();
        }
    }

    /**
     * The entirety of listFaces definition.
     */
    interface LargeFaceListsListFacesDefinition extends
        LargeFaceListsListFacesDefinitionStages.WithLargeFaceListId,
        LargeFaceListsListFacesDefinitionStages.WithExecute {
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     *   &lt;br /&gt; To deal with an image contains multiple faces, input face can be
     *   specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face.
     *   No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face
     *   - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface) or
     *   [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is
     *   called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     *   clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists
     *   are in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     mod*   el](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [LargeFaceList - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl). Recommend
     *   for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded
     *   faces or wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |
     *   Quota:
     *   * Free-tier subscription quota: 1,000 faces per large face list.
     *   * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws APIErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PersistedFace object if successful.
     */
    PersistedFace addFaceFromStream(String largeFaceListId, byte[] image, AddFaceFromStreamLargeFaceListsOptionalParameter addFaceFromStreamOptionalParameter);

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     *   &lt;br /&gt; To deal with an image contains multiple faces, input face can be
     *   specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face.
     *   No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face
     *   - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface) or
     *   [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is
     *   called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     *   clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists
     *   are in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     mod*   el](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [LargeFaceList - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl). Recommend
     *   for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded
     *   faces or wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |
     *   Quota:
     *   * Free-tier subscription quota: 1,000 faces per large face list.
     *   * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param addFaceFromStreamOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PersistedFace object
     */
    Observable<PersistedFace> addFaceFromStreamAsync(String largeFaceListId, byte[] image, AddFaceFromStreamLargeFaceListsOptionalParameter addFaceFromStreamOptionalParameter);

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces.
     *   &lt;br /&gt; To deal with an image contains multiple faces, input face can be
     *   specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face.
     *   No image will be stored. Only the extracted face feature will be stored on server until [LargeFaceList Face
     *   - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface) or
     *   [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete) is
     *   called.
     *   &lt;br /&gt; Note persistedFaceId is different from faceId generated by [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl).
     *   * Higher face image quality means better recognition precision. Please consider high-quality faces: frontal,
     *   clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
     *   * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size is from 1KB to
     *   6MB.
     *   * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an error. If
     *   the provided "targetFace" rectangle is not returned from [Face -
     *   Detect](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl), there’s no guarantee
     *   to detect and add the face successfully.
     *   * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions will cause
     *   failures.
     *   * Adding/deleting faces to/from a same face list are processed sequentially and to/from different face lists
     *   are in parallel.
     *   * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with
     *   dimensions higher than 1920x1080 pixels will need a proportionally larger minimum face size.
     *   * Different 'detectionModel' values can be provided. To use and compare different detection models, please
     *   refer to [How to specify a detection
     mod*   el](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *   | Model | Recommended use-case(s) |
     *   | ---------- | -------- |
     *   | 'detection_01': | The default detection model for [LargeFaceList - Add
     *   Face](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl). Recommend
     *   for near frontal face detection. For scenarios with exceptionally large angle (head-pose) faces, occluded
     *   faces or wrong image orientation, the faces in such cases may not be detected. |
     *   | 'detection_02': | Detection model released in 2019 May with improved accuracy especially on small, side
     *   and blurry faces. |
     *   Quota:
     *   * Free-tier subscription quota: 1,000 faces per large face list.
     *   * S0-tier subscription quota: 1,000,000 faces per large face list.
     *
     * @return the first stage of the addFaceFromStream call
     */
    LargeFaceListsAddFaceFromStreamDefinitionStages.WithLargeFaceListId addFaceFromStream();

    /**
     * Grouping of addFaceFromStream definition stages.
     */
    interface LargeFaceListsAddFaceFromStreamDefinitionStages {
        /**
         * The stage of the definition to be specify largeFaceListId.
         */
        interface WithLargeFaceListId {
            /**
             * Id referencing a particular large face list.
             *
             * @return next definition stage
             */
            WithImage withLargeFaceListId(String largeFaceListId);
        }
        /**
         * The stage of the definition to be specify image.
         */
        interface WithImage {
            /**
             * An image stream.
             *
             * @return next definition stage
             */
            LargeFaceListsAddFaceFromStreamDefinitionStages.WithExecute withImage(byte[] image);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * User-specified data about the face for any purpose. The maximum length is 1KB.
             *
             * @return next definition stage
             */
            LargeFaceListsAddFaceFromStreamDefinitionStages.WithExecute withUserData(String userData);

            /**
             * A face rectangle to specify the target face to be added to a person in the format of
             *   "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the
             *   image, targetFace is required to specify which face to add. No targetFace means there is only one face
             *   detected in the entire image.
             *
             * @return next definition stage
             */
            LargeFaceListsAddFaceFromStreamDefinitionStages.WithExecute withTargetFace(List<Integer> targetFace);

            /**
             * Name of detection model. Detection model is used to detect faces in the submitted image. A detection model
             *   name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add
             *   Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.
             *   Possible values include: 'detection_01', 'detection_02'.
             *
             * @return next definition stage
             */
            LargeFaceListsAddFaceFromStreamDefinitionStages.WithExecute withDetectionModel(DetectionModel detectionModel);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends LargeFaceListsAddFaceFromStreamDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the PersistedFace object if successful.
             */
            PersistedFace execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the PersistedFace object
             */
            Observable<PersistedFace> executeAsync();
        }
    }

    /**
     * The entirety of addFaceFromStream definition.
     */
    interface LargeFaceListsAddFaceFromStreamDefinition extends
        LargeFaceListsAddFaceFromStreamDefinitionStages.WithLargeFaceListId,
        LargeFaceListsAddFaceFromStreamDefinitionStages.WithImage,
        LargeFaceListsAddFaceFromStreamDefinitionStages.WithExecute {
    }

}
