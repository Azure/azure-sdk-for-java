// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.cognitiveservices.multivariateanomalydetector.implementation;

import com.azure.cognitiveservices.multivariateanomalydetector.AnomalyDetectorServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the AnomalyDetectorClient type. */
public final class AnomalyDetectorClientImpl {
    /** The proxy service used to perform REST calls. */
    private final AnomalyDetectorClientService service;

    /**
     * Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus2.api.cognitive.microsoft.com).
     */
    private final String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus2.api.cognitive.microsoft.com).
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** Service version. */
    private final AnomalyDetectorServiceVersion serviceVersion;

    /**
     * Gets Service version.
     *
     * @return the serviceVersion value.
     */
    public AnomalyDetectorServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of AnomalyDetectorClient client.
     *
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     * @param serviceVersion Service version.
     */
    public AnomalyDetectorClientImpl(String endpoint, AnomalyDetectorServiceVersion serviceVersion) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                endpoint,
                serviceVersion);
    }

    /**
     * Initializes an instance of AnomalyDetectorClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     * @param serviceVersion Service version.
     */
    public AnomalyDetectorClientImpl(
            HttpPipeline httpPipeline, String endpoint, AnomalyDetectorServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of AnomalyDetectorClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     * @param serviceVersion Service version.
     */
    public AnomalyDetectorClientImpl(
            HttpPipeline httpPipeline,
            SerializerAdapter serializerAdapter,
            String endpoint,
            AnomalyDetectorServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service =
                RestProxy.create(AnomalyDetectorClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for AnomalyDetectorClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{Endpoint}/anomalydetector/{ApiVersion}")
    @ServiceInterface(name = "AnomalyDetectorClien")
    private interface AnomalyDetectorClientService {
        @Post("/multivariate/models")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> trainMultivariateModel(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Get("/multivariate/models")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listMultivariateModel(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/multivariate/models/{modelId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getMultivariateModel(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("modelId") String modelId,
                RequestOptions requestOptions,
                Context context);

        @Delete("/multivariate/models/{modelId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteMultivariateModel(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("modelId") String modelId,
                RequestOptions requestOptions,
                Context context);

        @Post("/multivariate/models/{modelId}/detect")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> detectAnomaly(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("modelId") String modelId,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Get("/multivariate/results/{resultId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDetectionResult(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("resultId") String resultId,
                RequestOptions requestOptions,
                Context context);

        @Get("/multivariate/models/{modelId}/export")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> exportModel(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("modelId") String modelId,
                RequestOptions requestOptions,
                Context context);

        @Post("/multivariate/models/{modelId}/last/detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> lastDetectAnomaly(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("modelId") String modelId,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listMultivariateModelNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Create and train a multivariate anomaly detection model. The request must include a source parameter to indicate
     * an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series used in
     * generate the model must be zipped into one single file. Each time-series will be in a single CSV file in which
     * the first column is timestamp and the second column is value.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     slidingWindow: Integer
     *     alignPolicy: {
     *         alignMode: String(Inner/Outer)
     *         fillNAMethod: String(Previous/Subsequent/Linear/Zero/Fixed/NotFill)
     *         paddingValue: Float
     *     }
     *     source: String
     *     startTime: String
     *     endTime: String
     *     displayName: String
     *     status: String(CREATED/RUNNING/READY/FAILED)
     *     errors: [
     *         {
     *             code: String
     *             message: String
     *         }
     *     ]
     *     diagnosticsInfo: {
     *         modelState: {
     *             epochIds: [
     *                 int
     *             ]
     *             trainLosses: [
     *                 float
     *             ]
     *             validationLosses: [
     *                 float
     *             ]
     *             latenciesInSeconds: [
     *                 float
     *             ]
     *         }
     *         variableStates: [
     *             {
     *                 variable: String
     *                 filledNARatio: Float
     *                 effectiveCount: Integer
     *                 startTime: String
     *                 endTime: String
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param body Training request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> trainMultivariateModelWithResponseAsync(
            BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.trainMultivariateModel(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                body,
                                requestOptions,
                                context));
    }

    /**
     * Create and train a multivariate anomaly detection model. The request must include a source parameter to indicate
     * an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series used in
     * generate the model must be zipped into one single file. Each time-series will be in a single CSV file in which
     * the first column is timestamp and the second column is value.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     slidingWindow: Integer
     *     alignPolicy: {
     *         alignMode: String(Inner/Outer)
     *         fillNAMethod: String(Previous/Subsequent/Linear/Zero/Fixed/NotFill)
     *         paddingValue: Float
     *     }
     *     source: String
     *     startTime: String
     *     endTime: String
     *     displayName: String
     *     status: String(CREATED/RUNNING/READY/FAILED)
     *     errors: [
     *         {
     *             code: String
     *             message: String
     *         }
     *     ]
     *     diagnosticsInfo: {
     *         modelState: {
     *             epochIds: [
     *                 int
     *             ]
     *             trainLosses: [
     *                 float
     *             ]
     *             validationLosses: [
     *                 float
     *             ]
     *             latenciesInSeconds: [
     *                 float
     *             ]
     *         }
     *         variableStates: [
     *             {
     *                 variable: String
     *                 filledNARatio: Float
     *                 effectiveCount: Integer
     *                 startTime: String
     *                 endTime: String
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param body Training request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> trainMultivariateModelWithResponseAsync(
            BinaryData body, RequestOptions requestOptions, Context context) {
        return service.trainMultivariateModel(
                this.getEndpoint(), this.getServiceVersion().getVersion(), body, requestOptions, context);
    }

    /**
     * Create and train a multivariate anomaly detection model. The request must include a source parameter to indicate
     * an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series used in
     * generate the model must be zipped into one single file. Each time-series will be in a single CSV file in which
     * the first column is timestamp and the second column is value.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     slidingWindow: Integer
     *     alignPolicy: {
     *         alignMode: String(Inner/Outer)
     *         fillNAMethod: String(Previous/Subsequent/Linear/Zero/Fixed/NotFill)
     *         paddingValue: Float
     *     }
     *     source: String
     *     startTime: String
     *     endTime: String
     *     displayName: String
     *     status: String(CREATED/RUNNING/READY/FAILED)
     *     errors: [
     *         {
     *             code: String
     *             message: String
     *         }
     *     ]
     *     diagnosticsInfo: {
     *         modelState: {
     *             epochIds: [
     *                 int
     *             ]
     *             trainLosses: [
     *                 float
     *             ]
     *             validationLosses: [
     *                 float
     *             ]
     *             latenciesInSeconds: [
     *                 float
     *             ]
     *         }
     *         variableStates: [
     *             {
     *                 variable: String
     *                 filledNARatio: Float
     *                 effectiveCount: Integer
     *                 startTime: String
     *                 endTime: String
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param body Training request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> trainMultivariateModelWithResponse(BinaryData body, RequestOptions requestOptions) {
        return trainMultivariateModelWithResponseAsync(body, requestOptions).block();
    }

    /**
     * List models of a subscription.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>$skip</td><td>String</td><td>No</td><td>$skip indicates how many models will be skipped.</td></tr>
     *     <tr><td>$top</td><td>String</td><td>No</td><td>$top indicates how many models will be fetched.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     models: [
     *         {
     *             modelId: String
     *             createdTime: String
     *             lastUpdatedTime: String
     *             status: String(CREATED/RUNNING/READY/FAILED)
     *             displayName: String
     *             variablesCount: int
     *         }
     *     ]
     *     currentCount: int
     *     maxCount: int
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of listing models along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listMultivariateModelSinglePageAsync(RequestOptions requestOptions) {
        return FluxUtil.withContext(
                        context ->
                                service.listMultivariateModel(
                                        this.getEndpoint(),
                                        this.getServiceVersion().getVersion(),
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "models"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * List models of a subscription.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>$skip</td><td>String</td><td>No</td><td>$skip indicates how many models will be skipped.</td></tr>
     *     <tr><td>$top</td><td>String</td><td>No</td><td>$top indicates how many models will be fetched.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     models: [
     *         {
     *             modelId: String
     *             createdTime: String
     *             lastUpdatedTime: String
     *             status: String(CREATED/RUNNING/READY/FAILED)
     *             displayName: String
     *             variablesCount: int
     *         }
     *     ]
     *     currentCount: int
     *     maxCount: int
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of listing models along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listMultivariateModelSinglePageAsync(
            RequestOptions requestOptions, Context context) {
        return service.listMultivariateModel(
                        this.getEndpoint(), this.getServiceVersion().getVersion(), requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "models"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * List models of a subscription.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>$skip</td><td>String</td><td>No</td><td>$skip indicates how many models will be skipped.</td></tr>
     *     <tr><td>$top</td><td>String</td><td>No</td><td>$top indicates how many models will be fetched.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     models: [
     *         {
     *             modelId: String
     *             createdTime: String
     *             lastUpdatedTime: String
     *             status: String(CREATED/RUNNING/READY/FAILED)
     *             displayName: String
     *             variablesCount: int
     *         }
     *     ]
     *     currentCount: int
     *     maxCount: int
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of listing models as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listMultivariateModelAsync(RequestOptions requestOptions) {
        return new PagedFlux<>(
                () -> listMultivariateModelSinglePageAsync(requestOptions),
                nextLink -> listMultivariateModelNextSinglePageAsync(nextLink, null));
    }

    /**
     * List models of a subscription.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>$skip</td><td>String</td><td>No</td><td>$skip indicates how many models will be skipped.</td></tr>
     *     <tr><td>$top</td><td>String</td><td>No</td><td>$top indicates how many models will be fetched.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     models: [
     *         {
     *             modelId: String
     *             createdTime: String
     *             lastUpdatedTime: String
     *             status: String(CREATED/RUNNING/READY/FAILED)
     *             displayName: String
     *             variablesCount: int
     *         }
     *     ]
     *     currentCount: int
     *     maxCount: int
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of listing models as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listMultivariateModelAsync(RequestOptions requestOptions, Context context) {
        return new PagedFlux<>(
                () -> listMultivariateModelSinglePageAsync(requestOptions, context),
                nextLink -> listMultivariateModelNextSinglePageAsync(nextLink, null, context));
    }

    /**
     * List models of a subscription.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>$skip</td><td>String</td><td>No</td><td>$skip indicates how many models will be skipped.</td></tr>
     *     <tr><td>$top</td><td>String</td><td>No</td><td>$top indicates how many models will be fetched.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     models: [
     *         {
     *             modelId: String
     *             createdTime: String
     *             lastUpdatedTime: String
     *             status: String(CREATED/RUNNING/READY/FAILED)
     *             displayName: String
     *             variablesCount: int
     *         }
     *     ]
     *     currentCount: int
     *     maxCount: int
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of listing models as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listMultivariateModel(RequestOptions requestOptions) {
        return new PagedIterable<>(listMultivariateModelAsync(requestOptions));
    }

    /**
     * Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     modelId: String
     *     createdTime: String
     *     lastUpdatedTime: String
     *     modelInfo: {
     *         slidingWindow: Integer
     *         alignPolicy: {
     *             alignMode: String(Inner/Outer)
     *             fillNAMethod: String(Previous/Subsequent/Linear/Zero/Fixed/NotFill)
     *             paddingValue: Float
     *         }
     *         source: String
     *         startTime: String
     *         endTime: String
     *         displayName: String
     *         status: String(CREATED/RUNNING/READY/FAILED)
     *         errors: [
     *             {
     *                 code: String
     *                 message: String
     *             }
     *         ]
     *         diagnosticsInfo: {
     *             modelState: {
     *                 epochIds: [
     *                     int
     *                 ]
     *                 trainLosses: [
     *                     float
     *                 ]
     *                 validationLosses: [
     *                     float
     *                 ]
     *                 latenciesInSeconds: [
     *                     float
     *                 ]
     *             }
     *             variableStates: [
     *                 {
     *                     variable: String
     *                     filledNARatio: Float
     *                     effectiveCount: Integer
     *                     startTime: String
     *                     endTime: String
     *                 }
     *             ]
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param modelId Model identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return detailed information of multivariate model, including the training status and variables used in the model
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getMultivariateModelWithResponseAsync(
            String modelId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.getMultivariateModel(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                modelId,
                                requestOptions,
                                context));
    }

    /**
     * Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     modelId: String
     *     createdTime: String
     *     lastUpdatedTime: String
     *     modelInfo: {
     *         slidingWindow: Integer
     *         alignPolicy: {
     *             alignMode: String(Inner/Outer)
     *             fillNAMethod: String(Previous/Subsequent/Linear/Zero/Fixed/NotFill)
     *             paddingValue: Float
     *         }
     *         source: String
     *         startTime: String
     *         endTime: String
     *         displayName: String
     *         status: String(CREATED/RUNNING/READY/FAILED)
     *         errors: [
     *             {
     *                 code: String
     *                 message: String
     *             }
     *         ]
     *         diagnosticsInfo: {
     *             modelState: {
     *                 epochIds: [
     *                     int
     *                 ]
     *                 trainLosses: [
     *                     float
     *                 ]
     *                 validationLosses: [
     *                     float
     *                 ]
     *                 latenciesInSeconds: [
     *                     float
     *                 ]
     *             }
     *             variableStates: [
     *                 {
     *                     variable: String
     *                     filledNARatio: Float
     *                     effectiveCount: Integer
     *                     startTime: String
     *                     endTime: String
     *                 }
     *             ]
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param modelId Model identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return detailed information of multivariate model, including the training status and variables used in the model
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getMultivariateModelWithResponseAsync(
            String modelId, RequestOptions requestOptions, Context context) {
        return service.getMultivariateModel(
                this.getEndpoint(), this.getServiceVersion().getVersion(), modelId, requestOptions, context);
    }

    /**
     * Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     modelId: String
     *     createdTime: String
     *     lastUpdatedTime: String
     *     modelInfo: {
     *         slidingWindow: Integer
     *         alignPolicy: {
     *             alignMode: String(Inner/Outer)
     *             fillNAMethod: String(Previous/Subsequent/Linear/Zero/Fixed/NotFill)
     *             paddingValue: Float
     *         }
     *         source: String
     *         startTime: String
     *         endTime: String
     *         displayName: String
     *         status: String(CREATED/RUNNING/READY/FAILED)
     *         errors: [
     *             {
     *                 code: String
     *                 message: String
     *             }
     *         ]
     *         diagnosticsInfo: {
     *             modelState: {
     *                 epochIds: [
     *                     int
     *                 ]
     *                 trainLosses: [
     *                     float
     *                 ]
     *                 validationLosses: [
     *                     float
     *                 ]
     *                 latenciesInSeconds: [
     *                     float
     *                 ]
     *             }
     *             variableStates: [
     *                 {
     *                     variable: String
     *                     filledNARatio: Float
     *                     effectiveCount: Integer
     *                     startTime: String
     *                     endTime: String
     *                 }
     *             ]
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param modelId Model identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return detailed information of multivariate model, including the training status and variables used in the model
     *     along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getMultivariateModelWithResponse(String modelId, RequestOptions requestOptions) {
        return getMultivariateModelWithResponseAsync(modelId, requestOptions).block();
    }

    /**
     * Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteMultivariateModelWithResponseAsync(
            String modelId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.deleteMultivariateModel(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                modelId,
                                requestOptions,
                                context));
    }

    /**
     * Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteMultivariateModelWithResponseAsync(
            String modelId, RequestOptions requestOptions, Context context) {
        return service.deleteMultivariateModel(
                this.getEndpoint(), this.getServiceVersion().getVersion(), modelId, requestOptions, context);
    }

    /**
     * Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteMultivariateModelWithResponse(String modelId, RequestOptions requestOptions) {
        return deleteMultivariateModelWithResponseAsync(modelId, requestOptions).block();
    }

    /**
     * Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the same
     * with the training request. Thus request will be complete asynchronously and will return a resultId for querying
     * the detection result.The request should be a source link to indicate an externally accessible Azure storage Uri
     * (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped into one
     * single file. Each time-series will be as follows: the first column is timestamp and the second column is value.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     source: String
     *     startTime: String
     *     endTime: String
     * }
     * }</pre>
     *
     * @param modelId Model identifier.
     * @param body Detect anomaly request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> detectAnomalyWithResponseAsync(
            String modelId, BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.detectAnomaly(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                modelId,
                                body,
                                requestOptions,
                                context));
    }

    /**
     * Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the same
     * with the training request. Thus request will be complete asynchronously and will return a resultId for querying
     * the detection result.The request should be a source link to indicate an externally accessible Azure storage Uri
     * (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped into one
     * single file. Each time-series will be as follows: the first column is timestamp and the second column is value.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     source: String
     *     startTime: String
     *     endTime: String
     * }
     * }</pre>
     *
     * @param modelId Model identifier.
     * @param body Detect anomaly request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> detectAnomalyWithResponseAsync(
            String modelId, BinaryData body, RequestOptions requestOptions, Context context) {
        return service.detectAnomaly(
                this.getEndpoint(), this.getServiceVersion().getVersion(), modelId, body, requestOptions, context);
    }

    /**
     * Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the same
     * with the training request. Thus request will be complete asynchronously and will return a resultId for querying
     * the detection result.The request should be a source link to indicate an externally accessible Azure storage Uri
     * (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped into one
     * single file. Each time-series will be as follows: the first column is timestamp and the second column is value.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     source: String
     *     startTime: String
     *     endTime: String
     * }
     * }</pre>
     *
     * @param modelId Model identifier.
     * @param body Detect anomaly request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> detectAnomalyWithResponse(String modelId, BinaryData body, RequestOptions requestOptions) {
        return detectAnomalyWithResponseAsync(modelId, body, requestOptions).block();
    }

    /**
     * Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     resultId: String
     *     summary: {
     *         status: String(CREATED/RUNNING/READY/FAILED)
     *         errors: [
     *             {
     *                 code: String
     *                 message: String
     *             }
     *         ]
     *         variableStates: [
     *             {
     *                 variable: String
     *                 filledNARatio: Float
     *                 effectiveCount: Integer
     *                 startTime: String
     *                 endTime: String
     *             }
     *         ]
     *         setupInfo: {
     *             source: String
     *             startTime: String
     *             endTime: String
     *         }
     *     }
     *     results: [
     *         {
     *             timestamp: String
     *             value: {
     *                 isAnomaly: boolean
     *                 severity: float
     *                 score: float
     *                 interpretation: [
     *                     {
     *                         variable: String
     *                         contributionScore: Float
     *                         correlationChanges: {
     *                             changedVariables: [
     *                                 String
     *                             ]
     *                             changedValues: [
     *                                 float
     *                             ]
     *                         }
     *                     }
     *                 ]
     *             }
     *             errors: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param resultId Result identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDetectionResultWithResponseAsync(
            String resultId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.getDetectionResult(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                resultId,
                                requestOptions,
                                context));
    }

    /**
     * Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     resultId: String
     *     summary: {
     *         status: String(CREATED/RUNNING/READY/FAILED)
     *         errors: [
     *             {
     *                 code: String
     *                 message: String
     *             }
     *         ]
     *         variableStates: [
     *             {
     *                 variable: String
     *                 filledNARatio: Float
     *                 effectiveCount: Integer
     *                 startTime: String
     *                 endTime: String
     *             }
     *         ]
     *         setupInfo: {
     *             source: String
     *             startTime: String
     *             endTime: String
     *         }
     *     }
     *     results: [
     *         {
     *             timestamp: String
     *             value: {
     *                 isAnomaly: boolean
     *                 severity: float
     *                 score: float
     *                 interpretation: [
     *                     {
     *                         variable: String
     *                         contributionScore: Float
     *                         correlationChanges: {
     *                             changedVariables: [
     *                                 String
     *                             ]
     *                             changedValues: [
     *                                 float
     *                             ]
     *                         }
     *                     }
     *                 ]
     *             }
     *             errors: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param resultId Result identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDetectionResultWithResponseAsync(
            String resultId, RequestOptions requestOptions, Context context) {
        return service.getDetectionResult(
                this.getEndpoint(), this.getServiceVersion().getVersion(), resultId, requestOptions, context);
    }

    /**
     * Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     resultId: String
     *     summary: {
     *         status: String(CREATED/RUNNING/READY/FAILED)
     *         errors: [
     *             {
     *                 code: String
     *                 message: String
     *             }
     *         ]
     *         variableStates: [
     *             {
     *                 variable: String
     *                 filledNARatio: Float
     *                 effectiveCount: Integer
     *                 startTime: String
     *                 endTime: String
     *             }
     *         ]
     *         setupInfo: {
     *             source: String
     *             startTime: String
     *             endTime: String
     *         }
     *     }
     *     results: [
     *         {
     *             timestamp: String
     *             value: {
     *                 isAnomaly: boolean
     *                 severity: float
     *                 score: float
     *                 interpretation: [
     *                     {
     *                         variable: String
     *                         contributionScore: Float
     *                         correlationChanges: {
     *                             changedVariables: [
     *                                 String
     *                             ]
     *                             changedValues: [
     *                                 float
     *                             ]
     *                         }
     *                     }
     *                 ]
     *             }
     *             errors: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param resultId Result identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api along with
     *     {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDetectionResultWithResponse(String resultId, RequestOptions requestOptions) {
        return getDetectionResultWithResponseAsync(resultId, requestOptions).block();
    }

    /**
     * Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> exportModelWithResponseAsync(String modelId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.exportModel(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                modelId,
                                requestOptions,
                                context));
    }

    /**
     * Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> exportModelWithResponseAsync(
            String modelId, RequestOptions requestOptions, Context context) {
        return service.exportModel(
                this.getEndpoint(), this.getServiceVersion().getVersion(), modelId, requestOptions, context);
    }

    /**
     * Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> exportModelWithResponse(String modelId, RequestOptions requestOptions) {
        return exportModelWithResponseAsync(modelId, requestOptions).block();
    }

    /**
     * Synchronized API for anomaly detection.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     variables: [
     *         {
     *             name: String
     *             timestamps: [
     *                 String
     *             ]
     *             values: [
     *                 float
     *             ]
     *         }
     *     ]
     *     detectingPoints: int
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     variableStates: [
     *         {
     *             variable: String
     *             filledNARatio: Float
     *             effectiveCount: Integer
     *             startTime: String
     *             endTime: String
     *         }
     *     ]
     *     results: [
     *         {
     *             timestamp: String
     *             value: {
     *                 isAnomaly: boolean
     *                 severity: float
     *                 score: float
     *                 interpretation: [
     *                     {
     *                         variable: String
     *                         contributionScore: Float
     *                         correlationChanges: {
     *                             changedVariables: [
     *                                 String
     *                             ]
     *                             changedValues: [
     *                                 float
     *                             ]
     *                         }
     *                     }
     *                 ]
     *             }
     *             errors: [
     *                 {
     *                     code: String
     *                     message: String
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param modelId Model identifier.
     * @param body Request for last detection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> lastDetectAnomalyWithResponseAsync(
            String modelId, BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.lastDetectAnomaly(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                modelId,
                                body,
                                requestOptions,
                                context));
    }

    /**
     * Synchronized API for anomaly detection.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     variables: [
     *         {
     *             name: String
     *             timestamps: [
     *                 String
     *             ]
     *             values: [
     *                 float
     *             ]
     *         }
     *     ]
     *     detectingPoints: int
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     variableStates: [
     *         {
     *             variable: String
     *             filledNARatio: Float
     *             effectiveCount: Integer
     *             startTime: String
     *             endTime: String
     *         }
     *     ]
     *     results: [
     *         {
     *             timestamp: String
     *             value: {
     *                 isAnomaly: boolean
     *                 severity: float
     *                 score: float
     *                 interpretation: [
     *                     {
     *                         variable: String
     *                         contributionScore: Float
     *                         correlationChanges: {
     *                             changedVariables: [
     *                                 String
     *                             ]
     *                             changedValues: [
     *                                 float
     *                             ]
     *                         }
     *                     }
     *                 ]
     *             }
     *             errors: [
     *                 {
     *                     code: String
     *                     message: String
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param modelId Model identifier.
     * @param body Request for last detection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> lastDetectAnomalyWithResponseAsync(
            String modelId, BinaryData body, RequestOptions requestOptions, Context context) {
        return service.lastDetectAnomaly(
                this.getEndpoint(), this.getServiceVersion().getVersion(), modelId, body, requestOptions, context);
    }

    /**
     * Synchronized API for anomaly detection.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     variables: [
     *         {
     *             name: String
     *             timestamps: [
     *                 String
     *             ]
     *             values: [
     *                 float
     *             ]
     *         }
     *     ]
     *     detectingPoints: int
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     variableStates: [
     *         {
     *             variable: String
     *             filledNARatio: Float
     *             effectiveCount: Integer
     *             startTime: String
     *             endTime: String
     *         }
     *     ]
     *     results: [
     *         {
     *             timestamp: String
     *             value: {
     *                 isAnomaly: boolean
     *                 severity: float
     *                 score: float
     *                 interpretation: [
     *                     {
     *                         variable: String
     *                         contributionScore: Float
     *                         correlationChanges: {
     *                             changedVariables: [
     *                                 String
     *                             ]
     *                             changedValues: [
     *                                 float
     *                             ]
     *                         }
     *                     }
     *                 ]
     *             }
     *             errors: [
     *                 {
     *                     code: String
     *                     message: String
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param modelId Model identifier.
     * @param body Request for last detection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> lastDetectAnomalyWithResponse(
            String modelId, BinaryData body, RequestOptions requestOptions) {
        return lastDetectAnomalyWithResponseAsync(modelId, body, requestOptions).block();
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     models: [
     *         {
     *             modelId: String
     *             createdTime: String
     *             lastUpdatedTime: String
     *             status: String(CREATED/RUNNING/READY/FAILED)
     *             displayName: String
     *             variablesCount: int
     *         }
     *     ]
     *     currentCount: int
     *     maxCount: int
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of listing models along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listMultivariateModelNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                        context ->
                                service.listMultivariateModelNext(
                                        nextLink,
                                        this.getEndpoint(),
                                        this.getServiceVersion().getVersion(),
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "models"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     models: [
     *         {
     *             modelId: String
     *             createdTime: String
     *             lastUpdatedTime: String
     *             status: String(CREATED/RUNNING/READY/FAILED)
     *             displayName: String
     *             variablesCount: int
     *         }
     *     ]
     *     currentCount: int
     *     maxCount: int
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of listing models along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listMultivariateModelNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        return service.listMultivariateModelNext(
                        nextLink, this.getEndpoint(), this.getServiceVersion().getVersion(), requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "models"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
