// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.cognitiveservices.multivariateanomalydetector;

import com.azure.cognitiveservices.multivariateanomalydetector.implementation.AnomalyDetectorClientImpl;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous AnomalyDetectorClient type. */
@ServiceClient(builder = AnomalyDetectorClientBuilder.class, isAsync = true)
public final class AnomalyDetectorAsyncClient {
    @Generated private final AnomalyDetectorClientImpl serviceClient;

    /**
     * Initializes an instance of AnomalyDetectorAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    AnomalyDetectorAsyncClient(AnomalyDetectorClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create and train a multivariate anomaly detection model. The request must include a source parameter to indicate
     * an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series used in
     * generate the model must be zipped into one single file. Each time-series will be in a single CSV file in which
     * the first column is timestamp and the second column is value.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     slidingWindow: Integer
     *     alignPolicy: {
     *         alignMode: String(Inner/Outer)
     *         fillNAMethod: String(Previous/Subsequent/Linear/Zero/Fixed/NotFill)
     *         paddingValue: Float
     *     }
     *     source: String
     *     startTime: String
     *     endTime: String
     *     displayName: String
     *     status: String(CREATED/RUNNING/READY/FAILED)
     *     errors: [
     *         {
     *             code: String
     *             message: String
     *         }
     *     ]
     *     diagnosticsInfo: {
     *         modelState: {
     *             epochIds: [
     *                 int
     *             ]
     *             trainLosses: [
     *                 float
     *             ]
     *             validationLosses: [
     *                 float
     *             ]
     *             latenciesInSeconds: [
     *                 float
     *             ]
     *         }
     *         variableStates: [
     *             {
     *                 variable: String
     *                 filledNARatio: Float
     *                 effectiveCount: Integer
     *                 startTime: String
     *                 endTime: String
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param body Training request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> trainMultivariateModelWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.trainMultivariateModelWithResponseAsync(body, requestOptions);
    }

    /**
     * List models of a subscription.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>$skip</td><td>String</td><td>No</td><td>$skip indicates how many models will be skipped.</td></tr>
     *     <tr><td>$top</td><td>String</td><td>No</td><td>$top indicates how many models will be fetched.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     models: [
     *         {
     *             modelId: String
     *             createdTime: String
     *             lastUpdatedTime: String
     *             status: String(CREATED/RUNNING/READY/FAILED)
     *             displayName: String
     *             variablesCount: int
     *         }
     *     ]
     *     currentCount: int
     *     maxCount: int
     *     nextLink: String
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of listing models as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listMultivariateModel(RequestOptions requestOptions) {
        return this.serviceClient.listMultivariateModelAsync(requestOptions);
    }

    /**
     * Get detailed information of multivariate model, including the training status and variables used in the model.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     modelId: String
     *     createdTime: String
     *     lastUpdatedTime: String
     *     modelInfo: {
     *         slidingWindow: Integer
     *         alignPolicy: {
     *             alignMode: String(Inner/Outer)
     *             fillNAMethod: String(Previous/Subsequent/Linear/Zero/Fixed/NotFill)
     *             paddingValue: Float
     *         }
     *         source: String
     *         startTime: String
     *         endTime: String
     *         displayName: String
     *         status: String(CREATED/RUNNING/READY/FAILED)
     *         errors: [
     *             {
     *                 code: String
     *                 message: String
     *             }
     *         ]
     *         diagnosticsInfo: {
     *             modelState: {
     *                 epochIds: [
     *                     int
     *                 ]
     *                 trainLosses: [
     *                     float
     *                 ]
     *                 validationLosses: [
     *                     float
     *                 ]
     *                 latenciesInSeconds: [
     *                     float
     *                 ]
     *             }
     *             variableStates: [
     *                 {
     *                     variable: String
     *                     filledNARatio: Float
     *                     effectiveCount: Integer
     *                     startTime: String
     *                     endTime: String
     *                 }
     *             ]
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param modelId Model identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return detailed information of multivariate model, including the training status and variables used in the model
     *     along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getMultivariateModelWithResponse(String modelId, RequestOptions requestOptions) {
        return this.serviceClient.getMultivariateModelWithResponseAsync(modelId, requestOptions);
    }

    /**
     * Delete an existing multivariate model according to the modelId.
     *
     * @param modelId Model identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteMultivariateModelWithResponse(String modelId, RequestOptions requestOptions) {
        return this.serviceClient.deleteMultivariateModelWithResponseAsync(modelId, requestOptions);
    }

    /**
     * Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the same
     * with the training request. Thus request will be complete asynchronously and will return a resultId for querying
     * the detection result.The request should be a source link to indicate an externally accessible Azure storage Uri
     * (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped into one
     * single file. Each time-series will be as follows: the first column is timestamp and the second column is value.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     source: String
     *     startTime: String
     *     endTime: String
     * }
     * }</pre>
     *
     * @param modelId Model identifier.
     * @param body Detect anomaly request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> detectAnomalyWithResponse(
            String modelId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.detectAnomalyWithResponseAsync(modelId, body, requestOptions);
    }

    /**
     * Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     resultId: String
     *     summary: {
     *         status: String(CREATED/RUNNING/READY/FAILED)
     *         errors: [
     *             {
     *                 code: String
     *                 message: String
     *             }
     *         ]
     *         variableStates: [
     *             {
     *                 variable: String
     *                 filledNARatio: Float
     *                 effectiveCount: Integer
     *                 startTime: String
     *                 endTime: String
     *             }
     *         ]
     *         setupInfo: {
     *             source: String
     *             startTime: String
     *             endTime: String
     *         }
     *     }
     *     results: [
     *         {
     *             timestamp: String
     *             value: {
     *                 isAnomaly: boolean
     *                 severity: float
     *                 score: float
     *                 interpretation: [
     *                     {
     *                         variable: String
     *                         contributionScore: Float
     *                         correlationChanges: {
     *                             changedVariables: [
     *                                 String
     *                             ]
     *                             changedValues: [
     *                                 float
     *                             ]
     *                         }
     *                     }
     *                 ]
     *             }
     *             errors: [
     *                 (recursive schema, see above)
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param resultId Result identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api along with
     *     {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDetectionResultWithResponse(String resultId, RequestOptions requestOptions) {
        return this.serviceClient.getDetectionResultWithResponseAsync(resultId, requestOptions);
    }

    /**
     * Export multivariate anomaly detection model based on modelId.
     *
     * @param modelId Model identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> exportModelWithResponse(String modelId, RequestOptions requestOptions) {
        return this.serviceClient.exportModelWithResponseAsync(modelId, requestOptions);
    }

    /**
     * Synchronized API for anomaly detection.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     variables: [
     *         {
     *             name: String
     *             timestamps: [
     *                 String
     *             ]
     *             values: [
     *                 float
     *             ]
     *         }
     *     ]
     *     detectingPoints: int
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     variableStates: [
     *         {
     *             variable: String
     *             filledNARatio: Float
     *             effectiveCount: Integer
     *             startTime: String
     *             endTime: String
     *         }
     *     ]
     *     results: [
     *         {
     *             timestamp: String
     *             value: {
     *                 isAnomaly: boolean
     *                 severity: float
     *                 score: float
     *                 interpretation: [
     *                     {
     *                         variable: String
     *                         contributionScore: Float
     *                         correlationChanges: {
     *                             changedVariables: [
     *                                 String
     *                             ]
     *                             changedValues: [
     *                                 float
     *                             ]
     *                         }
     *                     }
     *                 ]
     *             }
     *             errors: [
     *                 {
     *                     code: String
     *                     message: String
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param modelId Model identifier.
     * @param body Request for last detection.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> lastDetectAnomalyWithResponse(
            String modelId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.lastDetectAnomalyWithResponseAsync(modelId, body, requestOptions);
    }
}
