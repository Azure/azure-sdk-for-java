// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.cognitiveservices.face.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in PersonDirectories. */
public final class PersonDirectoriesImpl {
    /** The proxy service used to perform REST calls. */
    private final PersonDirectoriesService service;

    /** The service client containing this operation class. */
    private final FaceClientImpl client;

    /**
     * Initializes an instance of PersonDirectoriesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    PersonDirectoriesImpl(FaceClientImpl client) {
        this.service =
                RestProxy.create(
                        PersonDirectoriesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for FaceClientPersonDirectories to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{Endpoint}/face/v1.0-preview")
    @ServiceInterface(name = "FaceClientPersonDire")
    private interface PersonDirectoriesService {
        @Get("/persons")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPersons(
                @HostParam("Endpoint") String endpoint, RequestOptions requestOptions, Context context);

        @Post("/persons")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createPerson(
                @HostParam("Endpoint") String endpoint,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Patch("/persons/{personId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updatePerson(
                @HostParam("Endpoint") String endpoint,
                @PathParam("personId") String personId,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Delete("/persons/{personId}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deletePerson(
                @HostParam("Endpoint") String endpoint,
                @PathParam("personId") String personId,
                RequestOptions requestOptions,
                Context context);

        @Get("/persons/{personId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPerson(
                @HostParam("Endpoint") String endpoint,
                @PathParam("personId") String personId,
                RequestOptions requestOptions,
                Context context);

        @Post("/persons/{personId}/recognitionModels/{recognitionModel}/persistedFaces")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> addPersonFace(
                @HostParam("Endpoint") String endpoint,
                @PathParam("personId") String personId,
                @PathParam("recognitionModel") String recognitionModel,
                RequestOptions requestOptions,
                Context context);

        @Get("/persons/{personId}/recognitionModels/{recognitionModel}/persistedFaces")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPersonFaces(
                @HostParam("Endpoint") String endpoint,
                @PathParam("personId") String personId,
                @PathParam("recognitionModel") String recognitionModel,
                RequestOptions requestOptions,
                Context context);

        @Delete("/persons/{personId}/recognitionModels/{recognitionModel}/persistedFaces/{persistedFaceId}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deletePersonFace(
                @HostParam("Endpoint") String endpoint,
                @PathParam("personId") String personId,
                @PathParam("recognitionModel") String recognitionModel,
                @PathParam("persistedFaceId") String persistedFaceId,
                RequestOptions requestOptions,
                Context context);

        @Get("/persons/{personId}/recognitionModels/{recognitionModel}/persistedFaces/{persistedFaceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getPersonFace(
                @HostParam("Endpoint") String endpoint,
                @PathParam("personId") String personId,
                @PathParam("recognitionModel") String recognitionModel,
                @PathParam("persistedFaceId") String persistedFaceId,
                RequestOptions requestOptions,
                Context context);

        @Patch("/persons/{personId}/recognitionModels/{recognitionModel}/persistedFaces/{persistedFaceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updatePersonFace(
                @HostParam("Endpoint") String endpoint,
                @PathParam("personId") String personId,
                @PathParam("recognitionModel") String recognitionModel,
                @PathParam("persistedFaceId") String persistedFaceId,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Put("/dynamicpersongroups/{dynamicPersonGroupId}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> createDynamicPersonGroup(
                @HostParam("Endpoint") String endpoint,
                @PathParam("dynamicPersonGroupId") String dynamicPersonGroupId,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Patch("/dynamicpersongroups/{dynamicPersonGroupId}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updateDynamicPersonGroup(
                @HostParam("Endpoint") String endpoint,
                @PathParam("dynamicPersonGroupId") String dynamicPersonGroupId,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Get("/dynamicpersongroups/{dynamicPersonGroupId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getDynamicPersonGroup(
                @HostParam("Endpoint") String endpoint,
                @PathParam("dynamicPersonGroupId") String dynamicPersonGroupId,
                RequestOptions requestOptions,
                Context context);

        @Delete("/dynamicpersongroups/{dynamicPersonGroupId}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteDynamicPersonGroup(
                @HostParam("Endpoint") String endpoint,
                @PathParam("dynamicPersonGroupId") String dynamicPersonGroupId,
                RequestOptions requestOptions,
                Context context);

        @Get("/dynamicpersongroups/{dynamicPersonGroupId}/persons")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDynamicPersonGroupPersons(
                @HostParam("Endpoint") String endpoint,
                @PathParam("dynamicPersonGroupId") String dynamicPersonGroupId,
                RequestOptions requestOptions,
                Context context);

        @Get("/dynamicpersongroups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDynamicPersonGroups(
                @HostParam("Endpoint") String endpoint, RequestOptions requestOptions, Context context);

        @Get("/persons/{personId}/dynamicPersonGroupReferences")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listDynamicPersonGroupPersonReferences(
                @HostParam("Endpoint") String endpoint,
                @PathParam("personId") String personId,
                RequestOptions requestOptions,
                Context context);

        @Post("/persons/{personId}/recognitionModels/{recognitionModel}/persistedFaces")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> addPersonFaceFromStream(
                @HostParam("Endpoint") String endpoint,
                @PathParam("personId") String personId,
                @PathParam("recognitionModel") String recognitionModel,
                @BodyParam("application/octet-stream") BinaryData image,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Retrieve list of person information in person directory.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>The start parameter</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>The top parameter</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         personId: String
     *         name: String
     *         userData: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return array of EnrollmentResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPersonsWithResponseAsync(RequestOptions requestOptions) {
        return FluxUtil.withContext(context -> service.getPersons(this.client.getEndpoint(), requestOptions, context));
    }

    /**
     * Retrieve list of person information in person directory.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>The start parameter</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>The top parameter</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         personId: String
     *         name: String
     *         userData: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return array of EnrollmentResponse along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPersonsWithResponseAsync(RequestOptions requestOptions, Context context) {
        return service.getPersons(this.client.getEndpoint(), requestOptions, context);
    }

    /**
     * Retrieve list of person information in person directory.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>The start parameter</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>The top parameter</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         personId: String
     *         name: String
     *         userData: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return array of EnrollmentResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonsWithResponse(RequestOptions requestOptions) {
        return getPersonsWithResponseAsync(requestOptions).block();
    }

    /**
     * Creates a new person in person directory.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personId: String
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personId: String
     * }
     * }</pre>
     *
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createPersonWithResponseAsync(BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context -> service.createPerson(this.client.getEndpoint(), body, requestOptions, context));
    }

    /**
     * Creates a new person in person directory.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personId: String
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personId: String
     * }
     * }</pre>
     *
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createPersonWithResponseAsync(
            BinaryData body, RequestOptions requestOptions, Context context) {
        return service.createPerson(this.client.getEndpoint(), body, requestOptions, context);
    }

    /**
     * Creates a new person in person directory.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personId: String
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personId: String
     * }
     * }</pre>
     *
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createPersonWithResponse(BinaryData body, RequestOptions requestOptions) {
        return createPersonWithResponseAsync(body, requestOptions).block();
    }

    /**
     * Update name or userData of a person.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId The personId parameter.
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updatePersonWithResponseAsync(
            String personId, BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context -> service.updatePerson(this.client.getEndpoint(), personId, body, requestOptions, context));
    }

    /**
     * Update name or userData of a person.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId The personId parameter.
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updatePersonWithResponseAsync(
            String personId, BinaryData body, RequestOptions requestOptions, Context context) {
        return service.updatePerson(this.client.getEndpoint(), personId, body, requestOptions, context);
    }

    /**
     * Update name or userData of a person.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId The personId parameter.
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updatePersonWithResponse(String personId, BinaryData body, RequestOptions requestOptions) {
        return updatePersonWithResponseAsync(personId, body, requestOptions).block();
    }

    /**
     * Delete an existing person from person directory. The persistedFaceId, userData, person name and face feature(s)
     * in the person entry will all be deleted.
     *
     * @param personId The personId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deletePersonWithResponseAsync(String personId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context -> service.deletePerson(this.client.getEndpoint(), personId, requestOptions, context));
    }

    /**
     * Delete an existing person from person directory. The persistedFaceId, userData, person name and face feature(s)
     * in the person entry will all be deleted.
     *
     * @param personId The personId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deletePersonWithResponseAsync(
            String personId, RequestOptions requestOptions, Context context) {
        return service.deletePerson(this.client.getEndpoint(), personId, requestOptions, context);
    }

    /**
     * Delete an existing person from person directory. The persistedFaceId, userData, person name and face feature(s)
     * in the person entry will all be deleted.
     *
     * @param personId The personId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deletePersonWithResponse(String personId, RequestOptions requestOptions) {
        return deletePersonWithResponseAsync(personId, requestOptions).block();
    }

    /**
     * Retrieve a person's name and userData, and the persisted faceIds representing the registered person face
     * feature(s).
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personId: String
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Person id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPersonWithResponseAsync(String personId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context -> service.getPerson(this.client.getEndpoint(), personId, requestOptions, context));
    }

    /**
     * Retrieve a person's name and userData, and the persisted faceIds representing the registered person face
     * feature(s).
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personId: String
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Person id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPersonWithResponseAsync(
            String personId, RequestOptions requestOptions, Context context) {
        return service.getPerson(this.client.getEndpoint(), personId, requestOptions, context);
    }

    /**
     * Retrieve a person's name and userData, and the persisted faceIds representing the registered person face
     * feature(s).
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personId: String
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Person id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonWithResponse(String personId, RequestOptions requestOptions) {
        return getPersonWithResponseAsync(personId, requestOptions).block();
    }

    /**
     * Add a new face to person.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Detection model string.</td></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User data of person face.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>Target face.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     recognitionModel: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Person id.
     * @param recognitionModel Recognition model string.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addPersonFaceWithResponseAsync(
            String personId, String recognitionModel, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.addPersonFace(
                                this.client.getEndpoint(), personId, recognitionModel, requestOptions, context));
    }

    /**
     * Add a new face to person.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Detection model string.</td></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User data of person face.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>Target face.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     recognitionModel: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Person id.
     * @param recognitionModel Recognition model string.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addPersonFaceWithResponseAsync(
            String personId, String recognitionModel, RequestOptions requestOptions, Context context) {
        return service.addPersonFace(this.client.getEndpoint(), personId, recognitionModel, requestOptions, context);
    }

    /**
     * Add a new face to person.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Detection model string.</td></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User data of person face.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>Target face.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     recognitionModel: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Person id.
     * @param recognitionModel Recognition model string.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addPersonFaceWithResponse(
            String personId, String recognitionModel, RequestOptions requestOptions) {
        return addPersonFaceWithResponseAsync(personId, recognitionModel, requestOptions).block();
    }

    /**
     * Retrieve person face information. The persisted person face is specified by its personId and persistedFaceId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personId: String
     *     persistedFaceIds: [
     *         String
     *     ]
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Target person to get persistedFaceIds from.
     * @param recognitionModel The 'recognitionModel' associated with this persisted face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPersonFacesWithResponseAsync(
            String personId, String recognitionModel, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.getPersonFaces(
                                this.client.getEndpoint(), personId, recognitionModel, requestOptions, context));
    }

    /**
     * Retrieve person face information. The persisted person face is specified by its personId and persistedFaceId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personId: String
     *     persistedFaceIds: [
     *         String
     *     ]
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Target person to get persistedFaceIds from.
     * @param recognitionModel The 'recognitionModel' associated with this persisted face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPersonFacesWithResponseAsync(
            String personId, String recognitionModel, RequestOptions requestOptions, Context context) {
        return service.getPersonFaces(this.client.getEndpoint(), personId, recognitionModel, requestOptions, context);
    }

    /**
     * Retrieve person face information. The persisted person face is specified by its personId and persistedFaceId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personId: String
     *     persistedFaceIds: [
     *         String
     *     ]
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Target person to get persistedFaceIds from.
     * @param recognitionModel The 'recognitionModel' associated with this persisted face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonFacesWithResponse(
            String personId, String recognitionModel, RequestOptions requestOptions) {
        return getPersonFacesWithResponseAsync(personId, recognitionModel, requestOptions).block();
    }

    /**
     * Delete an existing person face from person directory. The persistedFaceId, userData, and face feature in the
     * person entry will all be deleted.
     *
     * @param personId Person id.
     * @param recognitionModel Recognition model string.
     * @param persistedFaceId Persisted face id to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deletePersonFaceWithResponseAsync(
            String personId, String recognitionModel, String persistedFaceId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.deletePersonFace(
                                this.client.getEndpoint(),
                                personId,
                                recognitionModel,
                                persistedFaceId,
                                requestOptions,
                                context));
    }

    /**
     * Delete an existing person face from person directory. The persistedFaceId, userData, and face feature in the
     * person entry will all be deleted.
     *
     * @param personId Person id.
     * @param recognitionModel Recognition model string.
     * @param persistedFaceId Persisted face id to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deletePersonFaceWithResponseAsync(
            String personId,
            String recognitionModel,
            String persistedFaceId,
            RequestOptions requestOptions,
            Context context) {
        return service.deletePersonFace(
                this.client.getEndpoint(), personId, recognitionModel, persistedFaceId, requestOptions, context);
    }

    /**
     * Delete an existing person face from person directory. The persistedFaceId, userData, and face feature in the
     * person entry will all be deleted.
     *
     * @param personId Person id.
     * @param recognitionModel Recognition model string.
     * @param persistedFaceId Persisted face id to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deletePersonFaceWithResponse(
            String personId, String recognitionModel, String persistedFaceId, RequestOptions requestOptions) {
        return deletePersonFaceWithResponseAsync(personId, recognitionModel, persistedFaceId, requestOptions).block();
    }

    /**
     * Retrieve person face information. The persisted person face is specified by its personId and persistedFaceId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Target person to get face from.
     * @param recognitionModel The 'recognitionModel' associated with this persisted face.
     * @param persistedFaceId Target person face id to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPersonFaceWithResponseAsync(
            String personId, String recognitionModel, String persistedFaceId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.getPersonFace(
                                this.client.getEndpoint(),
                                personId,
                                recognitionModel,
                                persistedFaceId,
                                requestOptions,
                                context));
    }

    /**
     * Retrieve person face information. The persisted person face is specified by its personId and persistedFaceId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Target person to get face from.
     * @param recognitionModel The 'recognitionModel' associated with this persisted face.
     * @param persistedFaceId Target person face id to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPersonFaceWithResponseAsync(
            String personId,
            String recognitionModel,
            String persistedFaceId,
            RequestOptions requestOptions,
            Context context) {
        return service.getPersonFace(
                this.client.getEndpoint(), personId, recognitionModel, persistedFaceId, requestOptions, context);
    }

    /**
     * Retrieve person face information. The persisted person face is specified by its personId and persistedFaceId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Target person to get face from.
     * @param recognitionModel The 'recognitionModel' associated with this persisted face.
     * @param persistedFaceId Target person face id to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonFaceWithResponse(
            String personId, String recognitionModel, String persistedFaceId, RequestOptions requestOptions) {
        return getPersonFaceWithResponseAsync(personId, recognitionModel, persistedFaceId, requestOptions).block();
    }

    /**
     * Update the data of a person face.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     detectionModel: String(detection_01/detection_02/detection_03/detection_preview_1904/ir_detection_01/expression_01)
     *     faceFeature: byte[]
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Target person to update face from.
     * @param recognitionModel The 'recognitionModel' associated with this persisted face.
     * @param persistedFaceId PersistedFaceId created from Person Face Create.
     * @param body Target person face id to update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updatePersonFaceWithResponseAsync(
            String personId,
            String recognitionModel,
            String persistedFaceId,
            BinaryData body,
            RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.updatePersonFace(
                                this.client.getEndpoint(),
                                personId,
                                recognitionModel,
                                persistedFaceId,
                                body,
                                requestOptions,
                                context));
    }

    /**
     * Update the data of a person face.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     detectionModel: String(detection_01/detection_02/detection_03/detection_preview_1904/ir_detection_01/expression_01)
     *     faceFeature: byte[]
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Target person to update face from.
     * @param recognitionModel The 'recognitionModel' associated with this persisted face.
     * @param persistedFaceId PersistedFaceId created from Person Face Create.
     * @param body Target person face id to update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updatePersonFaceWithResponseAsync(
            String personId,
            String recognitionModel,
            String persistedFaceId,
            BinaryData body,
            RequestOptions requestOptions,
            Context context) {
        return service.updatePersonFace(
                this.client.getEndpoint(), personId, recognitionModel, persistedFaceId, body, requestOptions, context);
    }

    /**
     * Update the data of a person face.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     detectionModel: String(detection_01/detection_02/detection_03/detection_preview_1904/ir_detection_01/expression_01)
     *     faceFeature: byte[]
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Target person to update face from.
     * @param recognitionModel The 'recognitionModel' associated with this persisted face.
     * @param persistedFaceId PersistedFaceId created from Person Face Create.
     * @param body Target person face id to update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updatePersonFaceWithResponse(
            String personId,
            String recognitionModel,
            String persistedFaceId,
            BinaryData body,
            RequestOptions requestOptions) {
        return updatePersonFaceWithResponseAsync(personId, recognitionModel, persistedFaceId, body, requestOptions)
                .block();
    }

    /**
     * Creates a new dynamic person group with specified dynamicPersonGroupId, name, and user-provided userData. A
     * dynamic person group is a container that references persons. After creation, use "DynamicPersonGroup - Update" to
     * add/remove persons into the search space. DynamicPersonGroup and UserData will be stored on server until
     * DynamicPersonGroup Delete is called.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     *     addPersonIds: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param dynamicPersonGroupId User provided dynamic person group Id. Valid format should be a string composed by
     *     numbers, English letters in lower case, '-', '_', and no longer than 64 characters.
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createDynamicPersonGroupWithResponseAsync(
            String dynamicPersonGroupId, BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.createDynamicPersonGroup(
                                this.client.getEndpoint(), dynamicPersonGroupId, body, requestOptions, context));
    }

    /**
     * Creates a new dynamic person group with specified dynamicPersonGroupId, name, and user-provided userData. A
     * dynamic person group is a container that references persons. After creation, use "DynamicPersonGroup - Update" to
     * add/remove persons into the search space. DynamicPersonGroup and UserData will be stored on server until
     * DynamicPersonGroup Delete is called.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     *     addPersonIds: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param dynamicPersonGroupId User provided dynamic person group Id. Valid format should be a string composed by
     *     numbers, English letters in lower case, '-', '_', and no longer than 64 characters.
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createDynamicPersonGroupWithResponseAsync(
            String dynamicPersonGroupId, BinaryData body, RequestOptions requestOptions, Context context) {
        return service.createDynamicPersonGroup(
                this.client.getEndpoint(), dynamicPersonGroupId, body, requestOptions, context);
    }

    /**
     * Creates a new dynamic person group with specified dynamicPersonGroupId, name, and user-provided userData. A
     * dynamic person group is a container that references persons. After creation, use "DynamicPersonGroup - Update" to
     * add/remove persons into the search space. DynamicPersonGroup and UserData will be stored on server until
     * DynamicPersonGroup Delete is called.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     *     addPersonIds: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param dynamicPersonGroupId User provided dynamic person group Id. Valid format should be a string composed by
     *     numbers, English letters in lower case, '-', '_', and no longer than 64 characters.
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createDynamicPersonGroupWithResponse(
            String dynamicPersonGroupId, BinaryData body, RequestOptions requestOptions) {
        return createDynamicPersonGroupWithResponseAsync(dynamicPersonGroupId, body, requestOptions).block();
    }

    /**
     * Updates an existing dynamic person group with specified dynamicPersonGroupId, name, and user-provided userData.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     removePersonIds: [
     *         String
     *     ]
     *     name: String
     *     userData: String
     *     addPersonIds: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param dynamicPersonGroupId User provided dynamic person group Id.
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateDynamicPersonGroupWithResponseAsync(
            String dynamicPersonGroupId, BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.updateDynamicPersonGroup(
                                this.client.getEndpoint(), dynamicPersonGroupId, body, requestOptions, context));
    }

    /**
     * Updates an existing dynamic person group with specified dynamicPersonGroupId, name, and user-provided userData.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     removePersonIds: [
     *         String
     *     ]
     *     name: String
     *     userData: String
     *     addPersonIds: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param dynamicPersonGroupId User provided dynamic person group Id.
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateDynamicPersonGroupWithResponseAsync(
            String dynamicPersonGroupId, BinaryData body, RequestOptions requestOptions, Context context) {
        return service.updateDynamicPersonGroup(
                this.client.getEndpoint(), dynamicPersonGroupId, body, requestOptions, context);
    }

    /**
     * Updates an existing dynamic person group with specified dynamicPersonGroupId, name, and user-provided userData.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     removePersonIds: [
     *         String
     *     ]
     *     name: String
     *     userData: String
     *     addPersonIds: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param dynamicPersonGroupId User provided dynamic person group Id.
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateDynamicPersonGroupWithResponse(
            String dynamicPersonGroupId, BinaryData body, RequestOptions requestOptions) {
        return updateDynamicPersonGroupWithResponseAsync(dynamicPersonGroupId, body, requestOptions).block();
    }

    /**
     * Get metadata on a dynamic person group.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dynamicPersonGroupId: String
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param dynamicPersonGroupId User provided dynamic person group id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return metadata on a dynamic person group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDynamicPersonGroupWithResponseAsync(
            String dynamicPersonGroupId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.getDynamicPersonGroup(
                                this.client.getEndpoint(), dynamicPersonGroupId, requestOptions, context));
    }

    /**
     * Get metadata on a dynamic person group.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dynamicPersonGroupId: String
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param dynamicPersonGroupId User provided dynamic person group id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return metadata on a dynamic person group along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDynamicPersonGroupWithResponseAsync(
            String dynamicPersonGroupId, RequestOptions requestOptions, Context context) {
        return service.getDynamicPersonGroup(this.client.getEndpoint(), dynamicPersonGroupId, requestOptions, context);
    }

    /**
     * Get metadata on a dynamic person group.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dynamicPersonGroupId: String
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param dynamicPersonGroupId User provided dynamic person group id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return metadata on a dynamic person group along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDynamicPersonGroupWithResponse(
            String dynamicPersonGroupId, RequestOptions requestOptions) {
        return getDynamicPersonGroupWithResponseAsync(dynamicPersonGroupId, requestOptions).block();
    }

    /**
     * Delete an existing dynamic person group. Note that Persons are not deleted with this operation. To delete person
     * call Person Delete.
     *
     * @param dynamicPersonGroupId User provided dynamic person group Id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDynamicPersonGroupWithResponseAsync(
            String dynamicPersonGroupId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.deleteDynamicPersonGroup(
                                this.client.getEndpoint(), dynamicPersonGroupId, requestOptions, context));
    }

    /**
     * Delete an existing dynamic person group. Note that Persons are not deleted with this operation. To delete person
     * call Person Delete.
     *
     * @param dynamicPersonGroupId User provided dynamic person group Id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDynamicPersonGroupWithResponseAsync(
            String dynamicPersonGroupId, RequestOptions requestOptions, Context context) {
        return service.deleteDynamicPersonGroup(
                this.client.getEndpoint(), dynamicPersonGroupId, requestOptions, context);
    }

    /**
     * Delete an existing dynamic person group. Note that Persons are not deleted with this operation. To delete person
     * call Person Delete.
     *
     * @param dynamicPersonGroupId User provided dynamic person group Id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDynamicPersonGroupWithResponse(
            String dynamicPersonGroupId, RequestOptions requestOptions) {
        return deleteDynamicPersonGroupWithResponseAsync(dynamicPersonGroupId, requestOptions).block();
    }

    /**
     * Retrieve list of persons referenced in a given DynamicPersonGroup person directory.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>List persons from the least personId greater than the "start". It contains no more than 64 characters. Default is empty.</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>The number of persons to list, ranging in [1, 1000]. Default is 1000.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personIds: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param dynamicPersonGroupId Dynamic person group Id to list persons from.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listDynamicPersonGroupPersonsWithResponseAsync(
            String dynamicPersonGroupId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.listDynamicPersonGroupPersons(
                                this.client.getEndpoint(), dynamicPersonGroupId, requestOptions, context));
    }

    /**
     * Retrieve list of persons referenced in a given DynamicPersonGroup person directory.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>List persons from the least personId greater than the "start". It contains no more than 64 characters. Default is empty.</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>The number of persons to list, ranging in [1, 1000]. Default is 1000.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personIds: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param dynamicPersonGroupId Dynamic person group Id to list persons from.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listDynamicPersonGroupPersonsWithResponseAsync(
            String dynamicPersonGroupId, RequestOptions requestOptions, Context context) {
        return service.listDynamicPersonGroupPersons(
                this.client.getEndpoint(), dynamicPersonGroupId, requestOptions, context);
    }

    /**
     * Retrieve list of persons referenced in a given DynamicPersonGroup person directory.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>List persons from the least personId greater than the "start". It contains no more than 64 characters. Default is empty.</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>The number of persons to list, ranging in [1, 1000]. Default is 1000.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personIds: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param dynamicPersonGroupId Dynamic person group Id to list persons from.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listDynamicPersonGroupPersonsWithResponse(
            String dynamicPersonGroupId, RequestOptions requestOptions) {
        return listDynamicPersonGroupPersonsWithResponseAsync(dynamicPersonGroupId, requestOptions).block();
    }

    /**
     * Retrieve list of dynamic person groups in person directory.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>List dynamicPersonGroupId from the least dynamicPersonGroupId greater than the "start". It contains no more than 64 characters. Default is empty.</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>The number of dynamicPersonGroups to list, ranging in [1, 1000]. Default is 1000.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         dynamicPersonGroupId: String
     *         name: String
     *         userData: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return array of DynamicPersonGroupGetResponse along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listDynamicPersonGroupsWithResponseAsync(RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context -> service.listDynamicPersonGroups(this.client.getEndpoint(), requestOptions, context));
    }

    /**
     * Retrieve list of dynamic person groups in person directory.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>List dynamicPersonGroupId from the least dynamicPersonGroupId greater than the "start". It contains no more than 64 characters. Default is empty.</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>The number of dynamicPersonGroups to list, ranging in [1, 1000]. Default is 1000.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         dynamicPersonGroupId: String
     *         name: String
     *         userData: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return array of DynamicPersonGroupGetResponse along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listDynamicPersonGroupsWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        return service.listDynamicPersonGroups(this.client.getEndpoint(), requestOptions, context);
    }

    /**
     * Retrieve list of dynamic person groups in person directory.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>List dynamicPersonGroupId from the least dynamicPersonGroupId greater than the "start". It contains no more than 64 characters. Default is empty.</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>The number of dynamicPersonGroups to list, ranging in [1, 1000]. Default is 1000.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         dynamicPersonGroupId: String
     *         name: String
     *         userData: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return array of DynamicPersonGroupGetResponse along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listDynamicPersonGroupsWithResponse(RequestOptions requestOptions) {
        return listDynamicPersonGroupsWithResponseAsync(requestOptions).block();
    }

    /**
     * List the dynamic person groups that a person has been referenced in.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>List dynamic person group id from the least dynamicPersonGroupId greater than the "start". It contains no more than 64 characters. Default is empty.</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>The number of dynamicPersonGroupId to list, ranging in [1, 1000]. Default is 1000.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personId: String
     *     dynamicPersonGroupIds: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param personId Valid PersonId created from Person Create.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listDynamicPersonGroupPersonReferencesWithResponseAsync(
            String personId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.listDynamicPersonGroupPersonReferences(
                                this.client.getEndpoint(), personId, requestOptions, context));
    }

    /**
     * List the dynamic person groups that a person has been referenced in.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>List dynamic person group id from the least dynamicPersonGroupId greater than the "start". It contains no more than 64 characters. Default is empty.</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>The number of dynamicPersonGroupId to list, ranging in [1, 1000]. Default is 1000.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personId: String
     *     dynamicPersonGroupIds: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param personId Valid PersonId created from Person Create.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listDynamicPersonGroupPersonReferencesWithResponseAsync(
            String personId, RequestOptions requestOptions, Context context) {
        return service.listDynamicPersonGroupPersonReferences(
                this.client.getEndpoint(), personId, requestOptions, context);
    }

    /**
     * List the dynamic person groups that a person has been referenced in.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>List dynamic person group id from the least dynamicPersonGroupId greater than the "start". It contains no more than 64 characters. Default is empty.</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>The number of dynamicPersonGroupId to list, ranging in [1, 1000]. Default is 1000.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personId: String
     *     dynamicPersonGroupIds: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param personId Valid PersonId created from Person Create.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listDynamicPersonGroupPersonReferencesWithResponse(
            String personId, RequestOptions requestOptions) {
        return listDynamicPersonGroupPersonReferencesWithResponseAsync(personId, requestOptions).block();
    }

    /**
     * Add a new face to person.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Detection model string.</td></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User data of person face.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>Target face.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Length</td><td>long</td><td>Yes</td><td>The contentLength parameter</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Flux<ByteBuffer>
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     recognitionModel: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Person id.
     * @param recognitionModel Recognition model string.
     * @param image An image stream.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addPersonFaceFromStreamWithResponseAsync(
            String personId, String recognitionModel, BinaryData image, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.addPersonFaceFromStream(
                                this.client.getEndpoint(), personId, recognitionModel, image, requestOptions, context));
    }

    /**
     * Add a new face to person.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Detection model string.</td></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User data of person face.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>Target face.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Length</td><td>long</td><td>Yes</td><td>The contentLength parameter</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Flux<ByteBuffer>
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     recognitionModel: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Person id.
     * @param recognitionModel Recognition model string.
     * @param image An image stream.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addPersonFaceFromStreamWithResponseAsync(
            String personId,
            String recognitionModel,
            BinaryData image,
            RequestOptions requestOptions,
            Context context) {
        return service.addPersonFaceFromStream(
                this.client.getEndpoint(), personId, recognitionModel, image, requestOptions, context);
    }

    /**
     * Add a new face to person.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Detection model string.</td></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User data of person face.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>Target face.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Length</td><td>long</td><td>Yes</td><td>The contentLength parameter</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Flux<ByteBuffer>
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     recognitionModel: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Person id.
     * @param recognitionModel Recognition model string.
     * @param image An image stream.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addPersonFaceFromStreamWithResponse(
            String personId, String recognitionModel, BinaryData image, RequestOptions requestOptions) {
        return addPersonFaceFromStreamWithResponseAsync(personId, recognitionModel, image, requestOptions).block();
    }
}
