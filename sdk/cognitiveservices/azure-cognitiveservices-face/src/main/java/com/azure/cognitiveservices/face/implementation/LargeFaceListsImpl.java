// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.cognitiveservices.face.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in LargeFaceLists. */
public final class LargeFaceListsImpl {
    /** The proxy service used to perform REST calls. */
    private final LargeFaceListsService service;

    /** The service client containing this operation class. */
    private final FaceClientImpl client;

    /**
     * Initializes an instance of LargeFaceListsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    LargeFaceListsImpl(FaceClientImpl client) {
        this.service =
                RestProxy.create(LargeFaceListsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for FaceClientLargeFaceLists to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{Endpoint}/face/v1.0-preview")
    @ServiceInterface(name = "FaceClientLargeFaceL")
    private interface LargeFaceListsService {
        @Put("/largefacelists/{largeFaceListId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> create(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largeFaceListId") String largeFaceListId,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Get("/largefacelists/{largeFaceListId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largeFaceListId") String largeFaceListId,
                RequestOptions requestOptions,
                Context context);

        @Patch("/largefacelists/{largeFaceListId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> update(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largeFaceListId") String largeFaceListId,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Delete("/largefacelists/{largeFaceListId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> delete(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largeFaceListId") String largeFaceListId,
                RequestOptions requestOptions,
                Context context);

        @Get("/largefacelists/{largeFaceListId}/training")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getTrainingStatus(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largeFaceListId") String largeFaceListId,
                RequestOptions requestOptions,
                Context context);

        @Get("/largefacelists")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> list(
                @HostParam("Endpoint") String endpoint, RequestOptions requestOptions, Context context);

        @Post("/largefacelists/{largeFaceListId}/train")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> train(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largeFaceListId") String largeFaceListId,
                RequestOptions requestOptions,
                Context context);

        @Delete("/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteFace(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largeFaceListId") String largeFaceListId,
                @PathParam("persistedFaceId") String persistedFaceId,
                RequestOptions requestOptions,
                Context context);

        @Get("/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getFace(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largeFaceListId") String largeFaceListId,
                @PathParam("persistedFaceId") String persistedFaceId,
                RequestOptions requestOptions,
                Context context);

        @Patch("/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> updateFace(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largeFaceListId") String largeFaceListId,
                @PathParam("persistedFaceId") String persistedFaceId,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Post("/largefacelists/{largeFaceListId}/persistedfaces")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> addFaceFromUrl(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largeFaceListId") String largeFaceListId,
                @BodyParam("application/json") BinaryData imageUrl,
                RequestOptions requestOptions,
                Context context);

        @Get("/largefacelists/{largeFaceListId}/persistedfaces")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listFaces(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largeFaceListId") String largeFaceListId,
                RequestOptions requestOptions,
                Context context);

        @Post("/largefacelists/{largeFaceListId}/persistedfaces")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> addFaceFromStream(
                @HostParam("Endpoint") String endpoint,
                @PathParam("largeFaceListId") String largeFaceListId,
                @BodyParam("application/octet-stream") BinaryData image,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and
     * recognitionModel. &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face -
     * Find Similar](https://docs.microsoft.com/rest/api/faceapi/face/findsimilar). &lt;br /&gt; After creation, user
     * should use [LargeFaceList Face - Add](https://docs.microsoft.com/rest/api/faceapi/largefacelist/addfacefromurl)
     * to import the faces and [LargeFaceList - Train](https://docs.microsoft.com/rest/api/faceapi/largefacelist/train)
     * to make it ready for [Face - Find Similar](https://docs.microsoft.com/rest/api/faceapi/face/findsimilar). No
     * image will be stored. Only the extracted face features are stored on server until [LargeFaceList -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/delete) is called. &lt;br /&gt; Find Similar is
     * used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face
     * identification. But if the actual use is to identify person, please use
     * [PersonGroup](https://docs.microsoft.com/rest/api/faceapi/persongroup) /
     * [LargePersonGroup](https://docs.microsoft.com/rest/api/faceapi/largepersongroup) and [Face -
     * Identify](https://docs.microsoft.com/rest/api/faceapi/face/identify). &lt;br/&gt;'recognitionModel' should be
     * specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01',
     * if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are
     * added to an existing large face list will use the recognition model that's already associated with the
     * collection. Existing face features in a large face list can't be updated to features extracted by another version
     * of recognition model. Please refer to [Specify a recognition
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model).
     *
     * <p>Large face list quota: * Free-tier subscription quota: 64 large face lists. * S0-tier subscription quota:
     * 1,000,000 large face lists.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param body Request body for creating a large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createWithResponseAsync(
            String largeFaceListId, BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context -> service.create(this.client.getEndpoint(), largeFaceListId, body, requestOptions, context));
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and
     * recognitionModel. &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face -
     * Find Similar](https://docs.microsoft.com/rest/api/faceapi/face/findsimilar). &lt;br /&gt; After creation, user
     * should use [LargeFaceList Face - Add](https://docs.microsoft.com/rest/api/faceapi/largefacelist/addfacefromurl)
     * to import the faces and [LargeFaceList - Train](https://docs.microsoft.com/rest/api/faceapi/largefacelist/train)
     * to make it ready for [Face - Find Similar](https://docs.microsoft.com/rest/api/faceapi/face/findsimilar). No
     * image will be stored. Only the extracted face features are stored on server until [LargeFaceList -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/delete) is called. &lt;br /&gt; Find Similar is
     * used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face
     * identification. But if the actual use is to identify person, please use
     * [PersonGroup](https://docs.microsoft.com/rest/api/faceapi/persongroup) /
     * [LargePersonGroup](https://docs.microsoft.com/rest/api/faceapi/largepersongroup) and [Face -
     * Identify](https://docs.microsoft.com/rest/api/faceapi/face/identify). &lt;br/&gt;'recognitionModel' should be
     * specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01',
     * if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are
     * added to an existing large face list will use the recognition model that's already associated with the
     * collection. Existing face features in a large face list can't be updated to features extracted by another version
     * of recognition model. Please refer to [Specify a recognition
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model).
     *
     * <p>Large face list quota: * Free-tier subscription quota: 64 large face lists. * S0-tier subscription quota:
     * 1,000,000 large face lists.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param body Request body for creating a large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createWithResponseAsync(
            String largeFaceListId, BinaryData body, RequestOptions requestOptions, Context context) {
        return service.create(this.client.getEndpoint(), largeFaceListId, body, requestOptions, context);
    }

    /**
     * Create an empty large face list with user-specified largeFaceListId, name, an optional userData and
     * recognitionModel. &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and used by [Face -
     * Find Similar](https://docs.microsoft.com/rest/api/faceapi/face/findsimilar). &lt;br /&gt; After creation, user
     * should use [LargeFaceList Face - Add](https://docs.microsoft.com/rest/api/faceapi/largefacelist/addfacefromurl)
     * to import the faces and [LargeFaceList - Train](https://docs.microsoft.com/rest/api/faceapi/largefacelist/train)
     * to make it ready for [Face - Find Similar](https://docs.microsoft.com/rest/api/faceapi/face/findsimilar). No
     * image will be stored. Only the extracted face features are stored on server until [LargeFaceList -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/delete) is called. &lt;br /&gt; Find Similar is
     * used for scenario like finding celebrity-like faces, similar face filtering, or as a light way face
     * identification. But if the actual use is to identify person, please use
     * [PersonGroup](https://docs.microsoft.com/rest/api/faceapi/persongroup) /
     * [LargePersonGroup](https://docs.microsoft.com/rest/api/faceapi/largepersongroup) and [Face -
     * Identify](https://docs.microsoft.com/rest/api/faceapi/face/identify). &lt;br/&gt;'recognitionModel' should be
     * specified to associate with this large face list. The default value for 'recognitionModel' is 'recognition_01',
     * if the latest model needed, please explicitly specify the model you need in this parameter. New faces that are
     * added to an existing large face list will use the recognition model that's already associated with the
     * collection. Existing face features in a large face list can't be updated to features extracted by another version
     * of recognition model. Please refer to [Specify a recognition
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model).
     *
     * <p>Large face list quota: * Free-tier subscription quota: 64 large face lists. * S0-tier subscription quota:
     * 1,000,000 large face lists.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param body Request body for creating a large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createWithResponse(String largeFaceListId, BinaryData body, RequestOptions requestOptions) {
        return createWithResponseAsync(largeFaceListId, body, requestOptions).block();
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>returnRecognitionModel</td><td>String</td><td>No</td><td>A value indicating whether the operation should return 'recognitionModel' in response.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     largeFaceListId: String
     *     name: String
     *     userData: String
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return large face list object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String largeFaceListId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context -> service.get(this.client.getEndpoint(), largeFaceListId, requestOptions, context));
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>returnRecognitionModel</td><td>String</td><td>No</td><td>A value indicating whether the operation should return 'recognitionModel' in response.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     largeFaceListId: String
     *     name: String
     *     userData: String
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return large face list object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(
            String largeFaceListId, RequestOptions requestOptions, Context context) {
        return service.get(this.client.getEndpoint(), largeFaceListId, requestOptions, context);
    }

    /**
     * Retrieve a large face list’s largeFaceListId, name, userData and recognitionModel.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>returnRecognitionModel</td><td>String</td><td>No</td><td>A value indicating whether the operation should return 'recognitionModel' in response.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     largeFaceListId: String
     *     name: String
     *     userData: String
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return large face list object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String largeFaceListId, RequestOptions requestOptions) {
        return getWithResponseAsync(largeFaceListId, requestOptions).block();
    }

    /**
     * Update information of a large face list.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param body Request body for updating a large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateWithResponseAsync(
            String largeFaceListId, BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context -> service.update(this.client.getEndpoint(), largeFaceListId, body, requestOptions, context));
    }

    /**
     * Update information of a large face list.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param body Request body for updating a large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateWithResponseAsync(
            String largeFaceListId, BinaryData body, RequestOptions requestOptions, Context context) {
        return service.update(this.client.getEndpoint(), largeFaceListId, body, requestOptions, context);
    }

    /**
     * Update information of a large face list.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param body Request body for updating a large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateWithResponse(String largeFaceListId, BinaryData body, RequestOptions requestOptions) {
        return updateWithResponseAsync(largeFaceListId, body, requestOptions).block();
    }

    /**
     * Delete a specified large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String largeFaceListId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context -> service.delete(this.client.getEndpoint(), largeFaceListId, requestOptions, context));
    }

    /**
     * Delete a specified large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(
            String largeFaceListId, RequestOptions requestOptions, Context context) {
        return service.delete(this.client.getEndpoint(), largeFaceListId, requestOptions, context);
    }

    /**
     * Delete a specified large face list.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String largeFaceListId, RequestOptions requestOptions) {
        return deleteWithResponseAsync(largeFaceListId, requestOptions).block();
    }

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     status: String(nonstarted/running/succeeded/failed)
     *     created: String
     *     lastAction: String
     *     lastSuccessfulTraining: String
     *     message: String
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return training status object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTrainingStatusWithResponseAsync(
            String largeFaceListId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.getTrainingStatus(this.client.getEndpoint(), largeFaceListId, requestOptions, context));
    }

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     status: String(nonstarted/running/succeeded/failed)
     *     created: String
     *     lastAction: String
     *     lastSuccessfulTraining: String
     *     message: String
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return training status object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTrainingStatusWithResponseAsync(
            String largeFaceListId, RequestOptions requestOptions, Context context) {
        return service.getTrainingStatus(this.client.getEndpoint(), largeFaceListId, requestOptions, context);
    }

    /**
     * Retrieve the training status of a large face list (completed or ongoing).
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     status: String(nonstarted/running/succeeded/failed)
     *     created: String
     *     lastAction: String
     *     lastSuccessfulTraining: String
     *     message: String
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return training status object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTrainingStatusWithResponse(String largeFaceListId, RequestOptions requestOptions) {
        return getTrainingStatusWithResponseAsync(largeFaceListId, requestOptions).block();
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt; To get
     * face information inside largeFaceList use [LargeFaceList Face -
     * Get](https://docs.microsoft.com/rest/api/faceapi/largefacelist/getface)&lt;br /&gt; * Large face lists are stored
     * in alphabetical order of largeFaceListId. * "start" parameter (string, optional) is a user-provided
     * largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to
     * indicate return from the first item. * "top" parameter (int, optional) specifies the number of entries to return.
     * A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last
     * returned entry’s Id of the current call. &lt;br /&gt; For example, total 5 large person lists: "list1", ...,
     * "list5". &lt;br /&gt; "start=&amp;top=" will return all 5 lists. &lt;br /&gt; "start=&amp;top=2" will return
     * "list1", "list2". &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>returnRecognitionModel</td><td>String</td><td>No</td><td>A value indicating whether the operation should return 'recognitionModel' in response.</td></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>Starting large face list id to return (used to list a range of large face lists).</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>Number of large face lists to return starting with the large face list id indicated by the 'start' parameter.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         largeFaceListId: String
     *         name: String
     *         userData: String
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an array of large face list results, with fields of largeFaceListId, name and userData along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponseAsync(RequestOptions requestOptions) {
        return FluxUtil.withContext(context -> service.list(this.client.getEndpoint(), requestOptions, context));
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt; To get
     * face information inside largeFaceList use [LargeFaceList Face -
     * Get](https://docs.microsoft.com/rest/api/faceapi/largefacelist/getface)&lt;br /&gt; * Large face lists are stored
     * in alphabetical order of largeFaceListId. * "start" parameter (string, optional) is a user-provided
     * largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to
     * indicate return from the first item. * "top" parameter (int, optional) specifies the number of entries to return.
     * A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last
     * returned entry’s Id of the current call. &lt;br /&gt; For example, total 5 large person lists: "list1", ...,
     * "list5". &lt;br /&gt; "start=&amp;top=" will return all 5 lists. &lt;br /&gt; "start=&amp;top=2" will return
     * "list1", "list2". &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>returnRecognitionModel</td><td>String</td><td>No</td><td>A value indicating whether the operation should return 'recognitionModel' in response.</td></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>Starting large face list id to return (used to list a range of large face lists).</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>Number of large face lists to return starting with the large face list id indicated by the 'start' parameter.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         largeFaceListId: String
     *         name: String
     *         userData: String
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an array of large face list results, with fields of largeFaceListId, name and userData along with {@link
     *     Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponseAsync(RequestOptions requestOptions, Context context) {
        return service.list(this.client.getEndpoint(), requestOptions, context);
    }

    /**
     * List large face lists’ information of largeFaceListId, name, userData and recognitionModel. &lt;br /&gt; To get
     * face information inside largeFaceList use [LargeFaceList Face -
     * Get](https://docs.microsoft.com/rest/api/faceapi/largefacelist/getface)&lt;br /&gt; * Large face lists are stored
     * in alphabetical order of largeFaceListId. * "start" parameter (string, optional) is a user-provided
     * largeFaceListId value that returned entries have larger ids by string comparison. "start" set to empty to
     * indicate return from the first item. * "top" parameter (int, optional) specifies the number of entries to return.
     * A maximal of 1000 entries can be returned in one call. To fetch more, you can specify "start" with the last
     * returned entry’s Id of the current call. &lt;br /&gt; For example, total 5 large person lists: "list1", ...,
     * "list5". &lt;br /&gt; "start=&amp;top=" will return all 5 lists. &lt;br /&gt; "start=&amp;top=2" will return
     * "list1", "list2". &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>returnRecognitionModel</td><td>String</td><td>No</td><td>A value indicating whether the operation should return 'recognitionModel' in response.</td></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>Starting large face list id to return (used to list a range of large face lists).</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>Number of large face lists to return starting with the large face list id indicated by the 'start' parameter.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         largeFaceListId: String
     *         name: String
     *         userData: String
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an array of large face list results, with fields of largeFaceListId, name and userData along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listWithResponse(RequestOptions requestOptions) {
        return listWithResponseAsync(requestOptions).block();
    }

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> trainWithResponseAsync(String largeFaceListId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context -> service.train(this.client.getEndpoint(), largeFaceListId, requestOptions, context));
    }

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> trainWithResponseAsync(
            String largeFaceListId, RequestOptions requestOptions, Context context) {
        return service.train(this.client.getEndpoint(), largeFaceListId, requestOptions, context);
    }

    /**
     * Queue a large face list training task, the training task may not be started immediately.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> trainWithResponse(String largeFaceListId, RequestOptions requestOptions) {
        return trainWithResponseAsync(largeFaceListId, requestOptions).block();
    }

    /**
     * Delete a face from a large face list by specified largeFaceListId and persistedFaceId. &lt;br /&gt;
     * Adding/deleting faces to/from a same large face list are processed sequentially and to/from different large face
     * lists are in parallel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteFaceWithResponseAsync(
            String largeFaceListId, String persistedFaceId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.deleteFace(
                                this.client.getEndpoint(), largeFaceListId, persistedFaceId, requestOptions, context));
    }

    /**
     * Delete a face from a large face list by specified largeFaceListId and persistedFaceId. &lt;br /&gt;
     * Adding/deleting faces to/from a same large face list are processed sequentially and to/from different large face
     * lists are in parallel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteFaceWithResponseAsync(
            String largeFaceListId, String persistedFaceId, RequestOptions requestOptions, Context context) {
        return service.deleteFace(this.client.getEndpoint(), largeFaceListId, persistedFaceId, requestOptions, context);
    }

    /**
     * Delete a face from a large face list by specified largeFaceListId and persistedFaceId. &lt;br /&gt;
     * Adding/deleting faces to/from a same large face list are processed sequentially and to/from different large face
     * lists are in parallel.
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteFaceWithResponse(
            String largeFaceListId, String persistedFaceId, RequestOptions requestOptions) {
        return deleteFaceWithResponseAsync(largeFaceListId, persistedFaceId, requestOptions).block();
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getFaceWithResponseAsync(
            String largeFaceListId, String persistedFaceId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.getFace(
                                this.client.getEndpoint(), largeFaceListId, persistedFaceId, requestOptions, context));
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getFaceWithResponseAsync(
            String largeFaceListId, String persistedFaceId, RequestOptions requestOptions, Context context) {
        return service.getFace(this.client.getEndpoint(), largeFaceListId, persistedFaceId, requestOptions, context);
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId and its belonging largeFaceListId).
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getFaceWithResponse(
            String largeFaceListId, String persistedFaceId, RequestOptions requestOptions) {
        return getFaceWithResponseAsync(largeFaceListId, persistedFaceId, requestOptions).block();
    }

    /**
     * Update a persisted face's userData field.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     userData: String
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param body Request body for updating persisted face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateFaceWithResponseAsync(
            String largeFaceListId, String persistedFaceId, BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.updateFace(
                                this.client.getEndpoint(),
                                largeFaceListId,
                                persistedFaceId,
                                body,
                                requestOptions,
                                context));
    }

    /**
     * Update a persisted face's userData field.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     userData: String
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param body Request body for updating persisted face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateFaceWithResponseAsync(
            String largeFaceListId,
            String persistedFaceId,
            BinaryData body,
            RequestOptions requestOptions,
            Context context) {
        return service.updateFace(
                this.client.getEndpoint(), largeFaceListId, persistedFaceId, body, requestOptions, context);
    }

    /**
     * Update a persisted face's userData field.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     userData: String
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param body Request body for updating persisted face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateFaceWithResponse(
            String largeFaceListId, String persistedFaceId, BinaryData body, RequestOptions requestOptions) {
        return updateFaceWithResponseAsync(largeFaceListId, persistedFaceId, body, requestOptions).block();
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces. &lt;br /&gt; To deal with an image contains
     * multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [LargeFaceList Face - Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/deleteface) or
     * [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/delete) is called. &lt;br
     * /&gt; Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl). * Higher face image quality means better
     * recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100
     * pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed
     * image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one face. Zero or multiple faces will
     * be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to detect and add
     * the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large
     * occlusions will cause failures. * Adding/deleting faces to/from a same face list are processed sequentially and
     * to/from different face lists are in parallel. * The minimum detectable face size is 36x36 pixels in an image no
     * larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally
     * larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare different
     * detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *
     * <p>Quota: * Free-tier subscription quota: 1,000 faces per large face list. * S0-tier subscription quota:
     * 1,000,000 faces per large face list.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User-specified data about the face for any purpose. The maximum length is 1KB.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image. In the form of "," separated string.</td></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addFaceFromUrlWithResponseAsync(
            String largeFaceListId, BinaryData imageUrl, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.addFaceFromUrl(
                                this.client.getEndpoint(), largeFaceListId, imageUrl, requestOptions, context));
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces. &lt;br /&gt; To deal with an image contains
     * multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [LargeFaceList Face - Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/deleteface) or
     * [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/delete) is called. &lt;br
     * /&gt; Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl). * Higher face image quality means better
     * recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100
     * pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed
     * image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one face. Zero or multiple faces will
     * be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to detect and add
     * the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large
     * occlusions will cause failures. * Adding/deleting faces to/from a same face list are processed sequentially and
     * to/from different face lists are in parallel. * The minimum detectable face size is 36x36 pixels in an image no
     * larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally
     * larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare different
     * detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *
     * <p>Quota: * Free-tier subscription quota: 1,000 faces per large face list. * S0-tier subscription quota:
     * 1,000,000 faces per large face list.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User-specified data about the face for any purpose. The maximum length is 1KB.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image. In the form of "," separated string.</td></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addFaceFromUrlWithResponseAsync(
            String largeFaceListId, BinaryData imageUrl, RequestOptions requestOptions, Context context) {
        return service.addFaceFromUrl(this.client.getEndpoint(), largeFaceListId, imageUrl, requestOptions, context);
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces. &lt;br /&gt; To deal with an image contains
     * multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [LargeFaceList Face - Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/deleteface) or
     * [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/delete) is called. &lt;br
     * /&gt; Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl). * Higher face image quality means better
     * recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100
     * pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed
     * image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one face. Zero or multiple faces will
     * be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to detect and add
     * the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large
     * occlusions will cause failures. * Adding/deleting faces to/from a same face list are processed sequentially and
     * to/from different face lists are in parallel. * The minimum detectable face size is 36x36 pixels in an image no
     * larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally
     * larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare different
     * detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
     *
     * <p>Quota: * Free-tier subscription quota: 1,000 faces per large face list. * S0-tier subscription quota:
     * 1,000,000 faces per large face list.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User-specified data about the face for any purpose. The maximum length is 1KB.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image. In the form of "," separated string.</td></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addFaceFromUrlWithResponse(
            String largeFaceListId, BinaryData imageUrl, RequestOptions requestOptions) {
        return addFaceFromUrlWithResponseAsync(largeFaceListId, imageUrl, requestOptions).block();
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of
     * registered faces of the face).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>Starting face id to return (used to list a range of faces).</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>Number of faces to return starting with the face id indicated by the 'start' parameter.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         persistedFaceId: String
     *         userData: String
     *     }
     * ]
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an array of persisted faces within the face list or large face list along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listFacesWithResponseAsync(
            String largeFaceListId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context -> service.listFaces(this.client.getEndpoint(), largeFaceListId, requestOptions, context));
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of
     * registered faces of the face).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>Starting face id to return (used to list a range of faces).</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>Number of faces to return starting with the face id indicated by the 'start' parameter.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         persistedFaceId: String
     *         userData: String
     *     }
     * ]
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an array of persisted faces within the face list or large face list along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listFacesWithResponseAsync(
            String largeFaceListId, RequestOptions requestOptions, Context context) {
        return service.listFaces(this.client.getEndpoint(), largeFaceListId, requestOptions, context);
    }

    /**
     * List all faces in a large face list, and retrieve face information (including userData and persistedFaceIds of
     * registered faces of the face).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>Starting face id to return (used to list a range of faces).</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>Number of faces to return starting with the face id indicated by the 'start' parameter.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         persistedFaceId: String
     *         userData: String
     *     }
     * ]
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an array of persisted faces within the face list or large face list along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listFacesWithResponse(String largeFaceListId, RequestOptions requestOptions) {
        return listFacesWithResponseAsync(largeFaceListId, requestOptions).block();
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces. &lt;br /&gt; To deal with an image contains
     * multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [LargeFaceList Face - Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/deleteface) or
     * [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/delete) is called. &lt;br
     * /&gt; Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl). * Higher face image quality means better
     * recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100
     * pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed
     * image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one face. Zero or multiple faces will
     * be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to detect and add
     * the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large
     * occlusions will cause failures. * Adding/deleting faces to/from a same face list are processed sequentially and
     * to/from different face lists are in parallel. * The minimum detectable face size is 36x36 pixels in an image no
     * larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally
     * larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare different
     * detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).
     *
     * <p>Quota: * Free-tier subscription quota: 1,000 faces per large face list. * S0-tier subscription quota:
     * 1,000,000 faces per large face list.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User-specified data about the face for any purpose. The maximum length is 1KB.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image. In the form of "," separated string.</td></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Length</td><td>long</td><td>Yes</td><td>The contentLength parameter</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Flux<ByteBuffer>
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addFaceFromStreamWithResponseAsync(
            String largeFaceListId, BinaryData image, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.addFaceFromStream(
                                this.client.getEndpoint(), largeFaceListId, image, requestOptions, context));
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces. &lt;br /&gt; To deal with an image contains
     * multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [LargeFaceList Face - Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/deleteface) or
     * [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/delete) is called. &lt;br
     * /&gt; Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl). * Higher face image quality means better
     * recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100
     * pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed
     * image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one face. Zero or multiple faces will
     * be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to detect and add
     * the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large
     * occlusions will cause failures. * Adding/deleting faces to/from a same face list are processed sequentially and
     * to/from different face lists are in parallel. * The minimum detectable face size is 36x36 pixels in an image no
     * larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally
     * larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare different
     * detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).
     *
     * <p>Quota: * Free-tier subscription quota: 1,000 faces per large face list. * S0-tier subscription quota:
     * 1,000,000 faces per large face list.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User-specified data about the face for any purpose. The maximum length is 1KB.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image. In the form of "," separated string.</td></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Length</td><td>long</td><td>Yes</td><td>The contentLength parameter</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Flux<ByteBuffer>
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addFaceFromStreamWithResponseAsync(
            String largeFaceListId, BinaryData image, RequestOptions requestOptions, Context context) {
        return service.addFaceFromStream(this.client.getEndpoint(), largeFaceListId, image, requestOptions, context);
    }

    /**
     * Add a face to a specified large face list, up to 1,000,000 faces. &lt;br /&gt; To deal with an image contains
     * multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [LargeFaceList Face - Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/deleteface) or
     * [LargeFaceList - Delete](https://docs.microsoft.com/rest/api/faceapi/largefacelist/delete) is called. &lt;br
     * /&gt; Note persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl). * Higher face image quality means better
     * recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100
     * pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed
     * image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one face. Zero or multiple faces will
     * be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to detect and add
     * the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large
     * occlusions will cause failures. * Adding/deleting faces to/from a same face list are processed sequentially and
     * to/from different face lists are in parallel. * The minimum detectable face size is 36x36 pixels in an image no
     * larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally
     * larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare different
     * detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).
     *
     * <p>Quota: * Free-tier subscription quota: 1,000 faces per large face list. * S0-tier subscription quota:
     * 1,000,000 faces per large face list.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User-specified data about the face for any purpose. The maximum length is 1KB.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image. In the form of "," separated string.</td></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Length</td><td>long</td><td>Yes</td><td>The contentLength parameter</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Flux<ByteBuffer>
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param largeFaceListId Id referencing a particular large face list.
     * @param image An image stream.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addFaceFromStreamWithResponse(
            String largeFaceListId, BinaryData image, RequestOptions requestOptions) {
        return addFaceFromStreamWithResponseAsync(largeFaceListId, image, requestOptions).block();
    }
}
