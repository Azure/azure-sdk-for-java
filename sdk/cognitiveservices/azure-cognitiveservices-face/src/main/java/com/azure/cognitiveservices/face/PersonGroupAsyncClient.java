// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.cognitiveservices.face;

import com.azure.cognitiveservices.face.implementation.PersonGroupsImpl;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous FaceClient type. */
@ServiceClient(builder = PersonGroupClientBuilder.class, isAsync = true)
public final class PersonGroupAsyncClient {
    @Generated private final PersonGroupsImpl serviceClient;

    /**
     * Initializes an instance of PersonGroupAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    PersonGroupAsyncClient(PersonGroupsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create a new person group with specified personGroupId, name, user-provided userData and recognitionModel. &lt;br
     * /&gt; A person group is the container of the uploaded person data, including face recognition features. &lt;br
     * /&gt; After creation, use [PersonGroup Person -
     * Create](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/create) to add persons into the group, and
     * then call [PersonGroup - Train](https://docs.microsoft.com/rest/api/faceapi/persongroup/train) to get this group
     * ready for [Face - Identify](https://docs.microsoft.com/rest/api/faceapi/face/identify). &lt;br /&gt; No image
     * will be stored. Only the person's extracted face features and userData will be stored on server until
     * [PersonGroup Person - Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete) or
     * [PersonGroup - Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete) is called.
     * &lt;br/&gt;'recognitionModel' should be specified to associate with this person group. The default value for
     * 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you need
     * in this parameter. New faces that are added to an existing person group will use the recognition model that's
     * already associated with the collection. Existing face features in a person group can't be updated to features
     * extracted by another version of recognition model.
     *
     * <p>Person group quota: * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000 persons. *
     * S0-tier subscription quota: 1,000,000 person groups. Each holds up to 10,000 persons. * to handle larger scale
     * face identification problem, please consider using
     * [LargePersonGroup](https://docs.microsoft.com/rest/api/faceapi/largepersongroup).
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     * }
     * }</pre>
     *
     * @param personGroupId Id referencing a particular person group.
     * @param body Request body for creating new person group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createWithResponse(
            String personGroupId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createWithResponseAsync(personGroupId, body, requestOptions);
    }

    /**
     * Delete an existing person group. Persisted face features of all people in the person group will also be deleted.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponse(String personGroupId, RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponseAsync(personGroupId, requestOptions);
    }

    /**
     * Retrieve person group name, userData and recognitionModel. To get person information under this personGroup, use
     * [PersonGroup Person - List](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/list).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>returnRecognitionModel</td><td>String</td><td>No</td><td>A value indicating whether the operation should return 'recognitionModel' in response.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personGroupId: String
     *     name: String
     *     userData: String
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     * }
     * }</pre>
     *
     * @param personGroupId Id referencing a particular person group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return person group object along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String personGroupId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(personGroupId, requestOptions);
    }

    /**
     * Update an existing person group's display name and userData. The properties which does not appear in request body
     * will not be updated.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personGroupId Id referencing a particular person group.
     * @param body Request body for updating person group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateWithResponse(
            String personGroupId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.updateWithResponseAsync(personGroupId, body, requestOptions);
    }

    /**
     * Retrieve the training status of a person group (completed or ongoing).
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     status: String(nonstarted/running/succeeded/failed)
     *     created: String
     *     lastAction: String
     *     lastSuccessfulTraining: String
     *     message: String
     * }
     * }</pre>
     *
     * @param personGroupId Id referencing a particular person group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return training status object along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTrainingStatusWithResponse(
            String personGroupId, RequestOptions requestOptions) {
        return this.serviceClient.getTrainingStatusWithResponseAsync(personGroupId, requestOptions);
    }

    /**
     * List person groups’ personGroupId, name, userData and recognitionModel.&lt;br /&gt; * Person groups are stored in
     * alphabetical order of personGroupId. * "start" parameter (string, optional) is a user-provided personGroupId
     * value that returned entries have larger ids by string comparison. "start" set to empty to indicate return from
     * the first item. * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000
     * entries can be returned in one call. To fetch more, you can specify "start" with the last returned entry’s Id of
     * the current call. &lt;br /&gt; For example, total 5 person groups: "group1", ..., "group5". &lt;br /&gt;
     * "start=&amp;top=" will return all 5 groups. &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
     * &lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4", "group5".
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>List person groups from the least personGroupId greater than the "start".</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>The number of person groups to list.</td></tr>
     *     <tr><td>returnRecognitionModel</td><td>String</td><td>No</td><td>A value indicating whether the operation should return 'recognitionModel' in response.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         personGroupId: String
     *         name: String
     *         userData: String
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an array of person groups along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listWithResponseAsync(requestOptions);
    }

    /**
     * Queue a person group training task, the training task may not be started immediately.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> trainWithResponse(String personGroupId, RequestOptions requestOptions) {
        return this.serviceClient.trainWithResponseAsync(personGroupId, requestOptions);
    }
}
