// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.cognitiveservices.face;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/** Initializes a new instance of the synchronous FaceClient type. */
@ServiceClient(builder = SnapshotClientBuilder.class)
public final class SnapshotClient {
    @Generated private final SnapshotAsyncClient asyncClient;

    /**
     * Initializes an instance of SnapshotClient class.
     *
     * @param asyncClient the async client.
     */
    @Generated
    SnapshotClient(SnapshotAsyncClient asyncClient) {
        this.asyncClient = asyncClient;
    }

    /**
     * Submit an operation to take a snapshot of face list, large face list, person group or large person group, with
     * user-specified snapshot type, source object id, apply scope and an optional user data.&lt;br /&gt; The snapshot
     * interfaces are for users to backup and restore their face data from one face subscription to another, inside same
     * region or across regions. The workflow contains two phases, user first calls Snapshot - Take to create a copy of
     * the source object and store it as a snapshot, then calls Snapshot - Apply to paste the snapshot to target
     * subscription. The snapshots are stored in a centralized location (per Azure instance), so that they can be
     * applied cross accounts and regions.&lt;br /&gt; Taking snapshot is an asynchronous operation. An operation id can
     * be obtained from the "Operation-Location" field in response header, to be used in OperationStatus - Get for
     * tracking the progress of creating the snapshot. The snapshot id will be included in the "resourceLocation" field
     * in OperationStatus - Get response when the operation status is "succeeded".&lt;br /&gt; Snapshot taking time
     * depends on the number of person and face entries in the source object. It could be in seconds, or up to several
     * hours for 1,000,000 persons with multiple faces.&lt;br /&gt; Snapshots will be automatically expired and cleaned
     * in 48 hours after it is created by Snapshot - Take. User can delete the snapshot using Snapshot - Delete by
     * themselves any time before expiration.&lt;br /&gt; Taking snapshot for a certain object will not block any other
     * operations against the object. All read-only operations (Get/List and Identify/FindSimilar/Verify) can be
     * conducted as usual. For all writable operations, including Add/Update/Delete the source object or its
     * persons/faces and Train, they are not blocked but not recommended because writable updates may not be reflected
     * on the snapshot during its taking. After snapshot taking is completed, all readable and writable operations can
     * work as normal. Snapshot will also include the training results of the source object, which means target
     * subscription the snapshot applied to does not need re-train the target object before calling
     * Identify/FindSimilar.&lt;br /&gt; * Free-tier subscription quota: 100 take operations per month. * S0-tier
     * subscription quota: 100 take operations per day.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     type: String(FaceList/LargeFaceList/LargePersonGroup/PersonGroup)
     *     objectId: String
     *     applyScope: [
     *         String
     *     ]
     *     userData: String
     * }
     * }</pre>
     *
     * @param body Request body for taking a snapshot.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> takeWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.asyncClient.takeWithResponse(body, requestOptions).block();
    }

    /**
     * List all accessible snapshots with related information, including snapshots that were taken by the user, or
     * snapshots to be applied to the user (subscription id was included in the applyScope in Snapshot - Take).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>type</td><td>String</td><td>No</td><td>User specified object type as a search filter.</td></tr>
     *     <tr><td>applyScope</td><td>String</td><td>No</td><td>User specified snapshot apply scopes as a search filter. ApplyScope is an array of the target Azure subscription ids for the snapshot, specified by the user who created the snapshot by Snapshot - Take. In the form of "," separated string.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         id: String
     *         account: String
     *         type: String(FaceList/LargeFaceList/LargePersonGroup/PersonGroup)
     *         applyScope: [
     *             String
     *         ]
     *         userData: String
     *         createdTime: String
     *         lastUpdateTime: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an array of snapshots along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listWithResponse(RequestOptions requestOptions) {
        return this.asyncClient.listWithResponse(requestOptions).block();
    }

    /**
     * Retrieve information about a snapshot. Snapshot is only accessible to the source subscription who took it, and
     * target subscriptions included in the applyScope in Snapshot - Take.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String
     *     account: String
     *     type: String(FaceList/LargeFaceList/LargePersonGroup/PersonGroup)
     *     applyScope: [
     *         String
     *     ]
     *     userData: String
     *     createdTime: String
     *     lastUpdateTime: String
     * }
     * }</pre>
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return snapshot object along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String snapshotId, RequestOptions requestOptions) {
        return this.asyncClient.getWithResponse(snapshotId, requestOptions).block();
    }

    /**
     * Update the information of a snapshot. Only the source subscription who took the snapshot can update the snapshot.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     applyScope: [
     *         String
     *     ]
     *     userData: String
     * }
     * }</pre>
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @param body Request body for updating a snapshot.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateWithResponse(String snapshotId, BinaryData body, RequestOptions requestOptions) {
        return this.asyncClient.updateWithResponse(snapshotId, body, requestOptions).block();
    }

    /**
     * Delete an existing snapshot according to the snapshotId. All object data and information in the snapshot will
     * also be deleted. Only the source subscription who took the snapshot can delete the snapshot. If the user does not
     * delete a snapshot with this API, the snapshot will still be automatically deleted in 48 hours after creation.
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String snapshotId, RequestOptions requestOptions) {
        return this.asyncClient.deleteWithResponse(snapshotId, requestOptions).block();
    }

    /**
     * Submit an operation to apply a snapshot to current subscription. For each snapshot, only subscriptions included
     * in the applyScope of Snapshot - Take can apply it.&lt;br /&gt; The snapshot interfaces are for users to backup
     * and restore their face data from one face subscription to another, inside same region or across regions. The
     * workflow contains two phases, user first calls Snapshot - Take to create a copy of the source object and store it
     * as a snapshot, then calls Snapshot - Apply to paste the snapshot to target subscription. The snapshots are stored
     * in a centralized location (per Azure instance), so that they can be applied cross accounts and regions.&lt;br
     * /&gt; Applying snapshot is an asynchronous operation. An operation id can be obtained from the
     * "Operation-Location" field in response header, to be used in OperationStatus - Get for tracking the progress of
     * applying the snapshot. The target object id will be included in the "resourceLocation" field in OperationStatus -
     * Get response when the operation status is "succeeded".&lt;br /&gt; Snapshot applying time depends on the number
     * of person and face entries in the snapshot object. It could be in seconds, or up to 1 hour for 1,000,000 persons
     * with multiple faces.&lt;br /&gt; Snapshots will be automatically expired and cleaned in 48 hours after it is
     * created by Snapshot - Take. So the target subscription is required to apply the snapshot in 48 hours since its
     * creation.&lt;br /&gt; Applying a snapshot will not block any other operations against the target object, however
     * it is not recommended because the correctness cannot be guaranteed during snapshot applying. After snapshot
     * applying is completed, all operations towards the target object can work as normal. Snapshot also includes the
     * training results of the source object, which means target subscription the snapshot applied to does not need
     * re-train the target object before calling Identify/FindSimilar.&lt;br /&gt; One snapshot can be applied multiple
     * times in parallel, while currently only CreateNew apply mode is supported, which means the apply operation will
     * fail if target subscription already contains an object of same type and using the same objectId. Users can
     * specify the "objectId" in request body to avoid such conflicts.&lt;br /&gt; * Free-tier subscription quota: 100
     * apply operations per month. * S0-tier subscription quota: 100 apply operations per day.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     objectId: String
     *     mode: String
     * }
     * }</pre>
     *
     * @param snapshotId Id referencing a particular snapshot.
     * @param body Request body for applying a snapshot.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> applyWithResponse(String snapshotId, BinaryData body, RequestOptions requestOptions) {
        return this.asyncClient.applyWithResponse(snapshotId, body, requestOptions).block();
    }

    /**
     * Get status of a long running operation.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     status: String(notStarted/running/succeeded/failed)
     *     createdTime: String
     *     lastActionTime: String
     *     finishedTime: String
     *     resourceLocation: String
     *     message: String
     * }
     * }</pre>
     *
     * @param operationId Id referencing a particular take/apply snapshot operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return status of a long running operation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getOperationStatusWithResponse(String operationId, RequestOptions requestOptions) {
        return this.asyncClient.getOperationStatusWithResponse(operationId, requestOptions).block();
    }
}
