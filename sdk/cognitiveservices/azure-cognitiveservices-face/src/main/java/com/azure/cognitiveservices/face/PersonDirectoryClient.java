// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.cognitiveservices.face;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/** Initializes a new instance of the synchronous FaceClient type. */
@ServiceClient(builder = PersonDirectoryClientBuilder.class)
public final class PersonDirectoryClient {
    @Generated private final PersonDirectoryAsyncClient asyncClient;

    /**
     * Initializes an instance of PersonDirectoryClient class.
     *
     * @param asyncClient the async client.
     */
    @Generated
    PersonDirectoryClient(PersonDirectoryAsyncClient asyncClient) {
        this.asyncClient = asyncClient;
    }

    /**
     * Retrieve list of person information in person directory.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>The start parameter</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>The top parameter</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         personId: String
     *         name: String
     *         userData: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return array of EnrollmentResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonsWithResponse(RequestOptions requestOptions) {
        return this.asyncClient.getPersonsWithResponse(requestOptions).block();
    }

    /**
     * Creates a new person in person directory.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personId: String
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personId: String
     * }
     * }</pre>
     *
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createPersonWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.asyncClient.createPersonWithResponse(body, requestOptions).block();
    }

    /**
     * Update name or userData of a person.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId The personId parameter.
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updatePersonWithResponse(String personId, BinaryData body, RequestOptions requestOptions) {
        return this.asyncClient.updatePersonWithResponse(personId, body, requestOptions).block();
    }

    /**
     * Delete an existing person from person directory. The persistedFaceId, userData, person name and face feature(s)
     * in the person entry will all be deleted.
     *
     * @param personId The personId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deletePersonWithResponse(String personId, RequestOptions requestOptions) {
        return this.asyncClient.deletePersonWithResponse(personId, requestOptions).block();
    }

    /**
     * Retrieve a person's name and userData, and the persisted faceIds representing the registered person face
     * feature(s).
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personId: String
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Person id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonWithResponse(String personId, RequestOptions requestOptions) {
        return this.asyncClient.getPersonWithResponse(personId, requestOptions).block();
    }

    /**
     * Add a new face to person.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Detection model string.</td></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User data of person face.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>Target face.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     recognitionModel: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Person id.
     * @param recognitionModel Recognition model string.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addPersonFaceWithResponse(
            String personId, String recognitionModel, RequestOptions requestOptions) {
        return this.asyncClient.addPersonFaceWithResponse(personId, recognitionModel, requestOptions).block();
    }

    /**
     * Retrieve person face information. The persisted person face is specified by its personId and persistedFaceId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personId: String
     *     persistedFaceIds: [
     *         String
     *     ]
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Target person to get persistedFaceIds from.
     * @param recognitionModel The 'recognitionModel' associated with this persisted face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonFacesWithResponse(
            String personId, String recognitionModel, RequestOptions requestOptions) {
        return this.asyncClient.getPersonFacesWithResponse(personId, recognitionModel, requestOptions).block();
    }

    /**
     * Delete an existing person face from person directory. The persistedFaceId, userData, and face feature in the
     * person entry will all be deleted.
     *
     * @param personId Person id.
     * @param recognitionModel Recognition model string.
     * @param persistedFaceId Persisted face id to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deletePersonFaceWithResponse(
            String personId, String recognitionModel, String persistedFaceId, RequestOptions requestOptions) {
        return this.asyncClient
                .deletePersonFaceWithResponse(personId, recognitionModel, persistedFaceId, requestOptions)
                .block();
    }

    /**
     * Retrieve person face information. The persisted person face is specified by its personId and persistedFaceId.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Target person to get face from.
     * @param recognitionModel The 'recognitionModel' associated with this persisted face.
     * @param persistedFaceId Target person face id to get.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getPersonFaceWithResponse(
            String personId, String recognitionModel, String persistedFaceId, RequestOptions requestOptions) {
        return this.asyncClient
                .getPersonFaceWithResponse(personId, recognitionModel, persistedFaceId, requestOptions)
                .block();
    }

    /**
     * Update the data of a person face.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     detectionModel: String(detection_01/detection_02/detection_03/detection_preview_1904/ir_detection_01/expression_01)
     *     faceFeature: byte[]
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Target person to update face from.
     * @param recognitionModel The 'recognitionModel' associated with this persisted face.
     * @param persistedFaceId PersistedFaceId created from Person Face Create.
     * @param body Target person face id to update.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updatePersonFaceWithResponse(
            String personId,
            String recognitionModel,
            String persistedFaceId,
            BinaryData body,
            RequestOptions requestOptions) {
        return this.asyncClient
                .updatePersonFaceWithResponse(personId, recognitionModel, persistedFaceId, body, requestOptions)
                .block();
    }

    /**
     * Creates a new dynamic person group with specified dynamicPersonGroupId, name, and user-provided userData. A
     * dynamic person group is a container that references persons. After creation, use "DynamicPersonGroup - Update" to
     * add/remove persons into the search space. DynamicPersonGroup and UserData will be stored on server until
     * DynamicPersonGroup Delete is called.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     *     addPersonIds: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param dynamicPersonGroupId User provided dynamic person group Id. Valid format should be a string composed by
     *     numbers, English letters in lower case, '-', '_', and no longer than 64 characters.
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createDynamicPersonGroupWithResponse(
            String dynamicPersonGroupId, BinaryData body, RequestOptions requestOptions) {
        return this.asyncClient
                .createDynamicPersonGroupWithResponse(dynamicPersonGroupId, body, requestOptions)
                .block();
    }

    /**
     * Updates an existing dynamic person group with specified dynamicPersonGroupId, name, and user-provided userData.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     removePersonIds: [
     *         String
     *     ]
     *     name: String
     *     userData: String
     *     addPersonIds: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param dynamicPersonGroupId User provided dynamic person group Id.
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateDynamicPersonGroupWithResponse(
            String dynamicPersonGroupId, BinaryData body, RequestOptions requestOptions) {
        return this.asyncClient
                .updateDynamicPersonGroupWithResponse(dynamicPersonGroupId, body, requestOptions)
                .block();
    }

    /**
     * Get metadata on a dynamic person group.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dynamicPersonGroupId: String
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param dynamicPersonGroupId User provided dynamic person group id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return metadata on a dynamic person group along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDynamicPersonGroupWithResponse(
            String dynamicPersonGroupId, RequestOptions requestOptions) {
        return this.asyncClient.getDynamicPersonGroupWithResponse(dynamicPersonGroupId, requestOptions).block();
    }

    /**
     * Delete an existing dynamic person group. Note that Persons are not deleted with this operation. To delete person
     * call Person Delete.
     *
     * @param dynamicPersonGroupId User provided dynamic person group Id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteDynamicPersonGroupWithResponse(
            String dynamicPersonGroupId, RequestOptions requestOptions) {
        return this.asyncClient.deleteDynamicPersonGroupWithResponse(dynamicPersonGroupId, requestOptions).block();
    }

    /**
     * Retrieve list of persons referenced in a given DynamicPersonGroup person directory.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>List persons from the least personId greater than the "start". It contains no more than 64 characters. Default is empty.</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>The number of persons to list, ranging in [1, 1000]. Default is 1000.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personIds: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param dynamicPersonGroupId Dynamic person group Id to list persons from.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listDynamicPersonGroupPersonsWithResponse(
            String dynamicPersonGroupId, RequestOptions requestOptions) {
        return this.asyncClient.listDynamicPersonGroupPersonsWithResponse(dynamicPersonGroupId, requestOptions).block();
    }

    /**
     * Retrieve list of dynamic person groups in person directory.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>List dynamicPersonGroupId from the least dynamicPersonGroupId greater than the "start". It contains no more than 64 characters. Default is empty.</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>The number of dynamicPersonGroups to list, ranging in [1, 1000]. Default is 1000.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         dynamicPersonGroupId: String
     *         name: String
     *         userData: String
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return array of DynamicPersonGroupGetResponse along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listDynamicPersonGroupsWithResponse(RequestOptions requestOptions) {
        return this.asyncClient.listDynamicPersonGroupsWithResponse(requestOptions).block();
    }

    /**
     * List the dynamic person groups that a person has been referenced in.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>List dynamic person group id from the least dynamicPersonGroupId greater than the "start". It contains no more than 64 characters. Default is empty.</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>The number of dynamicPersonGroupId to list, ranging in [1, 1000]. Default is 1000.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     personId: String
     *     dynamicPersonGroupIds: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param personId Valid PersonId created from Person Create.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listDynamicPersonGroupPersonReferencesWithResponse(
            String personId, RequestOptions requestOptions) {
        return this.asyncClient.listDynamicPersonGroupPersonReferencesWithResponse(personId, requestOptions).block();
    }

    /**
     * Add a new face to person.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Detection model string.</td></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User data of person face.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>Target face.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Length</td><td>long</td><td>Yes</td><td>The contentLength parameter</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Flux<ByteBuffer>
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     recognitionModel: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personId Person id.
     * @param recognitionModel Recognition model string.
     * @param image An image stream.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addPersonFaceFromStreamWithResponse(
            String personId, String recognitionModel, BinaryData image, RequestOptions requestOptions) {
        return this.asyncClient
                .addPersonFaceFromStreamWithResponse(personId, recognitionModel, image, requestOptions)
                .block();
    }
}
