// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.cognitiveservices.face;

import com.azure.cognitiveservices.face.implementation.PersonGroupPersonsImpl;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous FaceClient type. */
@ServiceClient(builder = PersonGroupPersonClientBuilder.class, isAsync = true)
public final class PersonGroupPersonAsyncClient {
    @Generated private final PersonGroupPersonsImpl serviceClient;

    /**
     * Initializes an instance of PersonGroupPersonAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    PersonGroupPersonAsyncClient(PersonGroupPersonsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create a new person in a specified person group.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     *     personId: String
     *     persistedFaceIds: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param personGroupId Id referencing a particular person group.
     * @param body Request body for creating new person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return person object along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createWithResponse(
            String personGroupId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createWithResponseAsync(personGroupId, body, requestOptions);
    }

    /**
     * List all persons in a person group, and retrieve person information (including personId, name, userData and
     * persistedFaceIds of registered faces of the person).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>Starting person id to return (used to list a range of persons).</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>Number of persons to return starting with the person id indicated by the 'start' parameter.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         name: String
     *         userData: String
     *         personId: String
     *         persistedFaceIds: [
     *             String
     *         ]
     *     }
     * ]
     * }</pre>
     *
     * @param personGroupId Id referencing a particular person group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an array of Persons along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponse(String personGroupId, RequestOptions requestOptions) {
        return this.serviceClient.listWithResponseAsync(personGroupId, requestOptions);
    }

    /**
     * Delete an existing person from a person group. The persistedFaceId, userData, person name and face feature in the
     * person entry will all be deleted.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponse(
            String personGroupId, String personId, RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponseAsync(personGroupId, personId, requestOptions);
    }

    /**
     * Retrieve a person's information, including registered persisted faces, name and userData.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     *     personId: String
     *     persistedFaceIds: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return person object along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(
            String personGroupId, String personId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(personGroupId, personId, requestOptions);
    }

    /**
     * Update name or userData of a person.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param body Request body for person update operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateWithResponse(
            String personGroupId, String personId, BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.updateWithResponseAsync(personGroupId, personId, body, requestOptions);
    }

    /**
     * Delete a face from a person in a person group by specified personGroupId, personId and persistedFaceId. &lt;br
     * /&gt; Adding/deleting faces to/from a same person will be processed sequentially. Adding/deleting faces to/from
     * different persons are processed in parallel.
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteFaceWithResponse(
            String personGroupId, String personId, String persistedFaceId, RequestOptions requestOptions) {
        return this.serviceClient.deleteFaceWithResponseAsync(personGroupId, personId, persistedFaceId, requestOptions);
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId, personId and its belonging
     * personGroupId).
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getFaceWithResponse(
            String personGroupId, String personId, String persistedFaceId, RequestOptions requestOptions) {
        return this.serviceClient.getFaceWithResponseAsync(personGroupId, personId, persistedFaceId, requestOptions);
    }

    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image
     * contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     * persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be
     * stored on server until [PersonGroup PersonFace -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface), [PersonGroup Person -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete) or [PersonGroup -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete) is called. &lt;br /&gt; Note
     * persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl). * Higher face image quality means better
     * recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100
     * pixels between eyes) or bigger. * Each person entry can hold up to 248 faces. * JPEG, PNG, GIF (the first frame),
     * and BMP format are supported. The allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should
     * contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is
     * not returned from [Face - Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no
     * guarantee to detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels),
     * large head-pose, or large occlusions will cause failures. * Adding/deleting faces to/from a same person will be
     * processed sequentially. Adding/deleting faces to/from different persons are processed in parallel.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     userData: String
     * }
     * }</pre>
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param body Request body for updating persisted face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateFaceWithResponse(
            String personGroupId,
            String personId,
            String persistedFaceId,
            BinaryData body,
            RequestOptions requestOptions) {
        return this.serviceClient.updateFaceWithResponseAsync(
                personGroupId, personId, persistedFaceId, body, requestOptions);
    }

    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image
     * contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     * persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be
     * stored on server until [PersonGroup PersonFace -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface), [PersonGroup Person -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete) or [PersonGroup -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete) is called. &lt;br /&gt; Note
     * persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl). * Higher face image quality means better
     * recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100
     * pixels between eyes) or bigger. * Each person entry can hold up to 248 faces. * JPEG, PNG, GIF (the first frame),
     * and BMP format are supported. The allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should
     * contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is
     * not returned from [Face - Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no
     * guarantee to detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels),
     * large head-pose, or large occlusions will cause failures. * Adding/deleting faces to/from a same person will be
     * processed sequentially. Adding/deleting faces to/from different persons are processed in parallel. * The minimum
     * detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher
     * than 1920x1080 pixels will need a proportionally larger minimum face size. * Different 'detectionModel' values
     * can be provided. To use and compare different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User-specified data about the face for any purpose. The maximum length is 1KB.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image. In the form of "," separated string.</td></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addFaceFromUrlWithResponse(
            String personGroupId, String personId, BinaryData imageUrl, RequestOptions requestOptions) {
        return this.serviceClient.addFaceFromUrlWithResponseAsync(personGroupId, personId, imageUrl, requestOptions);
    }

    /**
     * Add a face to a person into a person group for face identification or verification. To deal with an image
     * contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     * persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be
     * stored on server until [PersonGroup PersonFace -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface), [PersonGroup Person -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete) or [PersonGroup -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete) is called. &lt;br /&gt; Note
     * persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl). * Higher face image quality means better
     * recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100
     * pixels between eyes) or bigger. * Each person entry can hold up to 248 faces. * JPEG, PNG, GIF (the first frame),
     * and BMP format are supported. The allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should
     * contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is
     * not returned from [Face - Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no
     * guarantee to detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels),
     * large head-pose, or large occlusions will cause failures. * Adding/deleting faces to/from a same person will be
     * processed sequentially. Adding/deleting faces to/from different persons are processed in parallel. * The minimum
     * detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher
     * than 1920x1080 pixels will need a proportionally larger minimum face size. * Different 'detectionModel' values
     * can be provided. To use and compare different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User-specified data about the face for any purpose. The maximum length is 1KB.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image. In the form of "," separated string.</td></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Length</td><td>long</td><td>Yes</td><td>The contentLength parameter</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Flux<ByteBuffer>
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param personGroupId Id referencing a particular person group.
     * @param personId Id referencing a particular person.
     * @param image An image stream.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addFaceFromStreamWithResponse(
            String personGroupId, String personId, BinaryData image, RequestOptions requestOptions) {
        return this.serviceClient.addFaceFromStreamWithResponseAsync(personGroupId, personId, image, requestOptions);
    }
}
