// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.cognitiveservices.face.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in FaceLists. */
public final class FaceListsImpl {
    /** The proxy service used to perform REST calls. */
    private final FaceListsService service;

    /** The service client containing this operation class. */
    private final FaceClientImpl client;

    /**
     * Initializes an instance of FaceListsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    FaceListsImpl(FaceClientImpl client) {
        this.service =
                RestProxy.create(FaceListsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for FaceClientFaceLists to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{Endpoint}/face/v1.0-preview")
    @ServiceInterface(name = "FaceClientFaceLists")
    private interface FaceListsService {
        @Put("/facelists/{faceListId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> create(
                @HostParam("Endpoint") String endpoint,
                @PathParam("faceListId") String faceListId,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Get("/facelists/{faceListId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> get(
                @HostParam("Endpoint") String endpoint,
                @PathParam("faceListId") String faceListId,
                RequestOptions requestOptions,
                Context context);

        @Patch("/facelists/{faceListId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> update(
                @HostParam("Endpoint") String endpoint,
                @PathParam("faceListId") String faceListId,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Delete("/facelists/{faceListId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> delete(
                @HostParam("Endpoint") String endpoint,
                @PathParam("faceListId") String faceListId,
                RequestOptions requestOptions,
                Context context);

        @Get("/facelists")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> list(
                @HostParam("Endpoint") String endpoint, RequestOptions requestOptions, Context context);

        @Delete("/facelists/{faceListId}/persistedfaces/{persistedFaceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteFace(
                @HostParam("Endpoint") String endpoint,
                @PathParam("faceListId") String faceListId,
                @PathParam("persistedFaceId") String persistedFaceId,
                RequestOptions requestOptions,
                Context context);

        @Post("/facelists/{faceListId}/persistedfaces")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> addFaceFromUrl(
                @HostParam("Endpoint") String endpoint,
                @PathParam("faceListId") String faceListId,
                @BodyParam("application/json") BinaryData imageUrl,
                RequestOptions requestOptions,
                Context context);

        @Post("/facelists/{faceListId}/persistedfaces")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> addFaceFromStream(
                @HostParam("Endpoint") String endpoint,
                @PathParam("faceListId") String faceListId,
                @BodyParam("application/octet-stream") BinaryData image,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Create an empty face list with user-specified faceListId, name, an optional userData and recognitionModel. Up to
     * 64 face lists are allowed in one subscription. &lt;br /&gt; Face list is a list of faces, up to 1,000 faces, and
     * used by [Face - Find Similar](https://docs.microsoft.com/rest/api/faceapi/face/findsimilar). &lt;br /&gt; After
     * creation, user should use [FaceList - Add
     * Face](https://docs.microsoft.com/rest/api/faceapi/facelist/addfacefromurl) to import the faces. No image will be
     * stored. Only the extracted face features are stored on server until [FaceList -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/facelist/delete) is called. &lt;br /&gt; Find Similar is used
     * for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification.
     * But if the actual use is to identify person, please use
     * [PersonGroup](https://docs.microsoft.com/rest/api/faceapi/persongroup) /
     * [LargePersonGroup](https://docs.microsoft.com/rest/api/faceapi/largepersongroup) and [Face -
     * Identify](https://docs.microsoft.com/rest/api/faceapi/face/identify). &lt;br /&gt; Please consider
     * [LargeFaceList](https://docs.microsoft.com/rest/api/faceapi/largefacelist) when the face number is large. It can
     * support up to 1,000,000 faces. &lt;br /&gt;'recognitionModel' should be specified to associate with this face
     * list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly
     * specify the model you need in this parameter. New faces that are added to an existing face list will use the
     * recognition model that's already associated with the collection. Existing face features in a face list can't be
     * updated to features extracted by another version of recognition model. Please Refer to [Specify a face
     * recognition
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model).
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     * }
     * }</pre>
     *
     * @param faceListId Id referencing a particular face list.
     * @param body Request body for creating a face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createWithResponseAsync(
            String faceListId, BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context -> service.create(this.client.getEndpoint(), faceListId, body, requestOptions, context));
    }

    /**
     * Create an empty face list with user-specified faceListId, name, an optional userData and recognitionModel. Up to
     * 64 face lists are allowed in one subscription. &lt;br /&gt; Face list is a list of faces, up to 1,000 faces, and
     * used by [Face - Find Similar](https://docs.microsoft.com/rest/api/faceapi/face/findsimilar). &lt;br /&gt; After
     * creation, user should use [FaceList - Add
     * Face](https://docs.microsoft.com/rest/api/faceapi/facelist/addfacefromurl) to import the faces. No image will be
     * stored. Only the extracted face features are stored on server until [FaceList -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/facelist/delete) is called. &lt;br /&gt; Find Similar is used
     * for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification.
     * But if the actual use is to identify person, please use
     * [PersonGroup](https://docs.microsoft.com/rest/api/faceapi/persongroup) /
     * [LargePersonGroup](https://docs.microsoft.com/rest/api/faceapi/largepersongroup) and [Face -
     * Identify](https://docs.microsoft.com/rest/api/faceapi/face/identify). &lt;br /&gt; Please consider
     * [LargeFaceList](https://docs.microsoft.com/rest/api/faceapi/largefacelist) when the face number is large. It can
     * support up to 1,000,000 faces. &lt;br /&gt;'recognitionModel' should be specified to associate with this face
     * list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly
     * specify the model you need in this parameter. New faces that are added to an existing face list will use the
     * recognition model that's already associated with the collection. Existing face features in a face list can't be
     * updated to features extracted by another version of recognition model. Please Refer to [Specify a face
     * recognition
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model).
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     * }
     * }</pre>
     *
     * @param faceListId Id referencing a particular face list.
     * @param body Request body for creating a face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createWithResponseAsync(
            String faceListId, BinaryData body, RequestOptions requestOptions, Context context) {
        return service.create(this.client.getEndpoint(), faceListId, body, requestOptions, context);
    }

    /**
     * Create an empty face list with user-specified faceListId, name, an optional userData and recognitionModel. Up to
     * 64 face lists are allowed in one subscription. &lt;br /&gt; Face list is a list of faces, up to 1,000 faces, and
     * used by [Face - Find Similar](https://docs.microsoft.com/rest/api/faceapi/face/findsimilar). &lt;br /&gt; After
     * creation, user should use [FaceList - Add
     * Face](https://docs.microsoft.com/rest/api/faceapi/facelist/addfacefromurl) to import the faces. No image will be
     * stored. Only the extracted face features are stored on server until [FaceList -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/facelist/delete) is called. &lt;br /&gt; Find Similar is used
     * for scenario like finding celebrity-like faces, similar face filtering, or as a light way face identification.
     * But if the actual use is to identify person, please use
     * [PersonGroup](https://docs.microsoft.com/rest/api/faceapi/persongroup) /
     * [LargePersonGroup](https://docs.microsoft.com/rest/api/faceapi/largepersongroup) and [Face -
     * Identify](https://docs.microsoft.com/rest/api/faceapi/face/identify). &lt;br /&gt; Please consider
     * [LargeFaceList](https://docs.microsoft.com/rest/api/faceapi/largefacelist) when the face number is large. It can
     * support up to 1,000,000 faces. &lt;br /&gt;'recognitionModel' should be specified to associate with this face
     * list. The default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly
     * specify the model you need in this parameter. New faces that are added to an existing face list will use the
     * recognition model that's already associated with the collection. Existing face features in a face list can't be
     * updated to features extracted by another version of recognition model. Please Refer to [Specify a face
     * recognition
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model).
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     * }
     * }</pre>
     *
     * @param faceListId Id referencing a particular face list.
     * @param body Request body for creating a face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createWithResponse(String faceListId, BinaryData body, RequestOptions requestOptions) {
        return createWithResponseAsync(faceListId, body, requestOptions).block();
    }

    /**
     * Retrieve a face list’s faceListId, name, userData, recognitionModel and faces in the face list.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>returnRecognitionModel</td><td>String</td><td>No</td><td>A value indicating whether the operation should return 'recognitionModel' in response.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     faceListId: String
     *     name: String
     *     userData: String
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     *     persistedFaces: [
     *         {
     *             persistedFaceId: String
     *             userData: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param faceListId Id referencing a particular face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return face list object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(String faceListId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context -> service.get(this.client.getEndpoint(), faceListId, requestOptions, context));
    }

    /**
     * Retrieve a face list’s faceListId, name, userData, recognitionModel and faces in the face list.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>returnRecognitionModel</td><td>String</td><td>No</td><td>A value indicating whether the operation should return 'recognitionModel' in response.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     faceListId: String
     *     name: String
     *     userData: String
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     *     persistedFaces: [
     *         {
     *             persistedFaceId: String
     *             userData: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param faceListId Id referencing a particular face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return face list object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponseAsync(
            String faceListId, RequestOptions requestOptions, Context context) {
        return service.get(this.client.getEndpoint(), faceListId, requestOptions, context);
    }

    /**
     * Retrieve a face list’s faceListId, name, userData, recognitionModel and faces in the face list.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>returnRecognitionModel</td><td>String</td><td>No</td><td>A value indicating whether the operation should return 'recognitionModel' in response.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     faceListId: String
     *     name: String
     *     userData: String
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     *     persistedFaces: [
     *         {
     *             persistedFaceId: String
     *             userData: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param faceListId Id referencing a particular face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return face list object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String faceListId, RequestOptions requestOptions) {
        return getWithResponseAsync(faceListId, requestOptions).block();
    }

    /**
     * Update information of a face list.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param faceListId Id referencing a particular face list.
     * @param body Request body for updating a face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateWithResponseAsync(
            String faceListId, BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context -> service.update(this.client.getEndpoint(), faceListId, body, requestOptions, context));
    }

    /**
     * Update information of a face list.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param faceListId Id referencing a particular face list.
     * @param body Request body for updating a face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateWithResponseAsync(
            String faceListId, BinaryData body, RequestOptions requestOptions, Context context) {
        return service.update(this.client.getEndpoint(), faceListId, body, requestOptions, context);
    }

    /**
     * Update information of a face list.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param faceListId Id referencing a particular face list.
     * @param body Request body for updating a face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateWithResponse(String faceListId, BinaryData body, RequestOptions requestOptions) {
        return updateWithResponseAsync(faceListId, body, requestOptions).block();
    }

    /**
     * Delete a specified face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String faceListId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context -> service.delete(this.client.getEndpoint(), faceListId, requestOptions, context));
    }

    /**
     * Delete a specified face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(
            String faceListId, RequestOptions requestOptions, Context context) {
        return service.delete(this.client.getEndpoint(), faceListId, requestOptions, context);
    }

    /**
     * Delete a specified face list.
     *
     * @param faceListId Id referencing a particular face list.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String faceListId, RequestOptions requestOptions) {
        return deleteWithResponseAsync(faceListId, requestOptions).block();
    }

    /**
     * List face lists’ faceListId, name, userData and recognitionModel. &lt;br /&gt; To get face information inside
     * faceList use [FaceList - Get](https://docs.microsoft.com/rest/api/faceapi/facelist/get).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>returnRecognitionModel</td><td>String</td><td>No</td><td>A value indicating whether the operation should return 'recognitionModel' in response.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         faceListId: String
     *         name: String
     *         userData: String
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     *         persistedFaces: [
     *             {
     *                 persistedFaceId: String
     *                 userData: String
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an array of face list results, with fields of faceListId, name and userData along with {@link Response}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponseAsync(RequestOptions requestOptions) {
        return FluxUtil.withContext(context -> service.list(this.client.getEndpoint(), requestOptions, context));
    }

    /**
     * List face lists’ faceListId, name, userData and recognitionModel. &lt;br /&gt; To get face information inside
     * faceList use [FaceList - Get](https://docs.microsoft.com/rest/api/faceapi/facelist/get).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>returnRecognitionModel</td><td>String</td><td>No</td><td>A value indicating whether the operation should return 'recognitionModel' in response.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         faceListId: String
     *         name: String
     *         userData: String
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     *         persistedFaces: [
     *             {
     *                 persistedFaceId: String
     *                 userData: String
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an array of face list results, with fields of faceListId, name and userData along with {@link Response}
     *     on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listWithResponseAsync(RequestOptions requestOptions, Context context) {
        return service.list(this.client.getEndpoint(), requestOptions, context);
    }

    /**
     * List face lists’ faceListId, name, userData and recognitionModel. &lt;br /&gt; To get face information inside
     * faceList use [FaceList - Get](https://docs.microsoft.com/rest/api/faceapi/facelist/get).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>returnRecognitionModel</td><td>String</td><td>No</td><td>A value indicating whether the operation should return 'recognitionModel' in response.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         faceListId: String
     *         name: String
     *         userData: String
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     *         persistedFaces: [
     *             {
     *                 persistedFaceId: String
     *                 userData: String
     *             }
     *         ]
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an array of face list results, with fields of faceListId, name and userData along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listWithResponse(RequestOptions requestOptions) {
        return listWithResponseAsync(requestOptions).block();
    }

    /**
     * Delete a face from a face list by specified faceListId and persistedFaceId. &lt;br /&gt; Adding/deleting faces
     * to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     *
     * @param faceListId Id referencing a particular face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteFaceWithResponseAsync(
            String faceListId, String persistedFaceId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.deleteFace(
                                this.client.getEndpoint(), faceListId, persistedFaceId, requestOptions, context));
    }

    /**
     * Delete a face from a face list by specified faceListId and persistedFaceId. &lt;br /&gt; Adding/deleting faces
     * to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     *
     * @param faceListId Id referencing a particular face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteFaceWithResponseAsync(
            String faceListId, String persistedFaceId, RequestOptions requestOptions, Context context) {
        return service.deleteFace(this.client.getEndpoint(), faceListId, persistedFaceId, requestOptions, context);
    }

    /**
     * Delete a face from a face list by specified faceListId and persistedFaceId. &lt;br /&gt; Adding/deleting faces
     * to/from a same face list are processed sequentially and to/from different face lists are in parallel.
     *
     * @param faceListId Id referencing a particular face list.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteFaceWithResponse(
            String faceListId, String persistedFaceId, RequestOptions requestOptions) {
        return deleteFaceWithResponseAsync(faceListId, persistedFaceId, requestOptions).block();
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces. &lt;br /&gt; To deal with an image contains multiple
     * faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [FaceList - Delete Face](https://docs.microsoft.com/rest/api/faceapi/facelist/deleteface) or [FaceList -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/facelist/delete) is called. &lt;br /&gt; Note persistedFaceId
     * is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl). * Higher face image quality means better
     * detection and recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200
     * pixels (100 pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The
     * allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one face. Zero or multiple
     * faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to detect and add
     * the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large
     * occlusions will cause failures. * Adding/deleting faces to/from a same face list are processed sequentially and
     * to/from different face lists are in parallel. * The minimum detectable face size is 36x36 pixels in an image no
     * larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally
     * larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare different
     * detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User-specified data about the face for any purpose. The maximum length is 1KB.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image. In the form of "," separated string.</td></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param faceListId Id referencing a particular face list.
     * @param imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addFaceFromUrlWithResponseAsync(
            String faceListId, BinaryData imageUrl, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.addFaceFromUrl(
                                this.client.getEndpoint(), faceListId, imageUrl, requestOptions, context));
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces. &lt;br /&gt; To deal with an image contains multiple
     * faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [FaceList - Delete Face](https://docs.microsoft.com/rest/api/faceapi/facelist/deleteface) or [FaceList -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/facelist/delete) is called. &lt;br /&gt; Note persistedFaceId
     * is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl). * Higher face image quality means better
     * detection and recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200
     * pixels (100 pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The
     * allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one face. Zero or multiple
     * faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to detect and add
     * the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large
     * occlusions will cause failures. * Adding/deleting faces to/from a same face list are processed sequentially and
     * to/from different face lists are in parallel. * The minimum detectable face size is 36x36 pixels in an image no
     * larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally
     * larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare different
     * detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User-specified data about the face for any purpose. The maximum length is 1KB.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image. In the form of "," separated string.</td></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param faceListId Id referencing a particular face list.
     * @param imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addFaceFromUrlWithResponseAsync(
            String faceListId, BinaryData imageUrl, RequestOptions requestOptions, Context context) {
        return service.addFaceFromUrl(this.client.getEndpoint(), faceListId, imageUrl, requestOptions, context);
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces. &lt;br /&gt; To deal with an image contains multiple
     * faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [FaceList - Delete Face](https://docs.microsoft.com/rest/api/faceapi/facelist/deleteface) or [FaceList -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/facelist/delete) is called. &lt;br /&gt; Note persistedFaceId
     * is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl). * Higher face image quality means better
     * detection and recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200
     * pixels (100 pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The
     * allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one face. Zero or multiple
     * faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to detect and add
     * the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large
     * occlusions will cause failures. * Adding/deleting faces to/from a same face list are processed sequentially and
     * to/from different face lists are in parallel. * The minimum detectable face size is 36x36 pixels in an image no
     * larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally
     * larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare different
     * detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User-specified data about the face for any purpose. The maximum length is 1KB.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image. In the form of "," separated string.</td></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param faceListId Id referencing a particular face list.
     * @param imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addFaceFromUrlWithResponse(
            String faceListId, BinaryData imageUrl, RequestOptions requestOptions) {
        return addFaceFromUrlWithResponseAsync(faceListId, imageUrl, requestOptions).block();
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces. &lt;br /&gt; To deal with an image contains multiple
     * faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [FaceList - Delete Face](https://docs.microsoft.com/rest/api/faceapi/facelist/deleteface) or [FaceList -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/facelist/delete) is called. &lt;br /&gt; Note persistedFaceId
     * is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl). * Higher face image quality means better
     * detection and recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200
     * pixels (100 pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The
     * allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one face. Zero or multiple
     * faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to detect and add
     * the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large
     * occlusions will cause failures. * Adding/deleting faces to/from a same face list are processed sequentially and
     * to/from different face lists are in parallel. * The minimum detectable face size is 36x36 pixels in an image no
     * larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally
     * larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare different
     * detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User-specified data about the face for any purpose. The maximum length is 1KB.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image. In the form of "," separated string.</td></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Length</td><td>long</td><td>Yes</td><td>The contentLength parameter</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Flux<ByteBuffer>
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param faceListId Id referencing a particular face list.
     * @param image An image stream.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addFaceFromStreamWithResponseAsync(
            String faceListId, BinaryData image, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.addFaceFromStream(
                                this.client.getEndpoint(), faceListId, image, requestOptions, context));
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces. &lt;br /&gt; To deal with an image contains multiple
     * faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [FaceList - Delete Face](https://docs.microsoft.com/rest/api/faceapi/facelist/deleteface) or [FaceList -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/facelist/delete) is called. &lt;br /&gt; Note persistedFaceId
     * is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl). * Higher face image quality means better
     * detection and recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200
     * pixels (100 pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The
     * allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one face. Zero or multiple
     * faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to detect and add
     * the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large
     * occlusions will cause failures. * Adding/deleting faces to/from a same face list are processed sequentially and
     * to/from different face lists are in parallel. * The minimum detectable face size is 36x36 pixels in an image no
     * larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally
     * larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare different
     * detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User-specified data about the face for any purpose. The maximum length is 1KB.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image. In the form of "," separated string.</td></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Length</td><td>long</td><td>Yes</td><td>The contentLength parameter</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Flux<ByteBuffer>
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param faceListId Id referencing a particular face list.
     * @param image An image stream.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> addFaceFromStreamWithResponseAsync(
            String faceListId, BinaryData image, RequestOptions requestOptions, Context context) {
        return service.addFaceFromStream(this.client.getEndpoint(), faceListId, image, requestOptions, context);
    }

    /**
     * Add a face to a specified face list, up to 1,000 faces. &lt;br /&gt; To deal with an image contains multiple
     * faces, input face can be specified as an image with a targetFace rectangle. It returns a persistedFaceId
     * representing the added face. No image will be stored. Only the extracted face feature will be stored on server
     * until [FaceList - Delete Face](https://docs.microsoft.com/rest/api/faceapi/facelist/deleteface) or [FaceList -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/facelist/delete) is called. &lt;br /&gt; Note persistedFaceId
     * is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl). * Higher face image quality means better
     * detection and recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200
     * pixels (100 pixels between eyes) or bigger. * JPEG, PNG, GIF (the first frame), and BMP format are supported. The
     * allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should contain one face. Zero or multiple
     * faces will be regarded as an error. If the provided "targetFace" rectangle is not returned from [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no guarantee to detect and add
     * the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large
     * occlusions will cause failures. * Adding/deleting faces to/from a same face list are processed sequentially and
     * to/from different face lists are in parallel. * The minimum detectable face size is 36x36 pixels in an image no
     * larger than 1920x1080 pixels. Images with dimensions higher than 1920x1080 pixels will need a proportionally
     * larger minimum face size. * Different 'detectionModel' values can be provided. To use and compare different
     * detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User-specified data about the face for any purpose. The maximum length is 1KB.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image. In the form of "," separated string.</td></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Length</td><td>long</td><td>Yes</td><td>The contentLength parameter</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Flux<ByteBuffer>
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param faceListId Id referencing a particular face list.
     * @param image An image stream.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addFaceFromStreamWithResponse(
            String faceListId, BinaryData image, RequestOptions requestOptions) {
        return addFaceFromStreamWithResponseAsync(faceListId, image, requestOptions).block();
    }
}
