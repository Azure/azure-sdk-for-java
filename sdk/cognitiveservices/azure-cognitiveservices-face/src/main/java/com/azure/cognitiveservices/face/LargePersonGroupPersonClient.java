// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.cognitiveservices.face;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/** Initializes a new instance of the synchronous FaceClient type. */
@ServiceClient(builder = LargePersonGroupPersonClientBuilder.class)
public final class LargePersonGroupPersonClient {
    @Generated private final LargePersonGroupPersonAsyncClient asyncClient;

    /**
     * Initializes an instance of LargePersonGroupPersonClient class.
     *
     * @param asyncClient the async client.
     */
    @Generated
    LargePersonGroupPersonClient(LargePersonGroupPersonAsyncClient asyncClient) {
        this.asyncClient = asyncClient;
    }

    /**
     * Create a new person in a specified large person group.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     *     personId: String
     *     persistedFaceIds: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param body Request body for creating new person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return person object along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createWithResponse(
            String largePersonGroupId, BinaryData body, RequestOptions requestOptions) {
        return this.asyncClient.createWithResponse(largePersonGroupId, body, requestOptions).block();
    }

    /**
     * List all persons in a large person group, and retrieve person information (including personId, name, userData and
     * persistedFaceIds of registered faces of the person).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>Starting person id to return (used to list a range of persons).</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>Number of persons to return starting with the person id indicated by the 'start' parameter.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         name: String
     *         userData: String
     *         personId: String
     *         persistedFaceIds: [
     *             String
     *         ]
     *     }
     * ]
     * }</pre>
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an array of Persons along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listWithResponse(String largePersonGroupId, RequestOptions requestOptions) {
        return this.asyncClient.listWithResponse(largePersonGroupId, requestOptions).block();
    }

    /**
     * Delete an existing person from a large person group. The persistedFaceId, userData, person name and face feature
     * in the person entry will all be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
            String largePersonGroupId, String personId, RequestOptions requestOptions) {
        return this.asyncClient.deleteWithResponse(largePersonGroupId, personId, requestOptions).block();
    }

    /**
     * Retrieve a person's name and userData, and the persisted faceIds representing the registered person face feature.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     *     personId: String
     *     persistedFaceIds: [
     *         String
     *     ]
     * }
     * }</pre>
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return person object along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(
            String largePersonGroupId, String personId, RequestOptions requestOptions) {
        return this.asyncClient.getWithResponse(largePersonGroupId, personId, requestOptions).block();
    }

    /**
     * Update name or userData of a person.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param body Request body for person update operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateWithResponse(
            String largePersonGroupId, String personId, BinaryData body, RequestOptions requestOptions) {
        return this.asyncClient.updateWithResponse(largePersonGroupId, personId, body, requestOptions).block();
    }

    /**
     * Delete a face from a person in a large person group by specified largePersonGroupId, personId and
     * persistedFaceId. &lt;br /&gt; Adding/deleting faces to/from a same person will be processed sequentially.
     * Adding/deleting faces to/from different persons are processed in parallel.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteFaceWithResponse(
            String largePersonGroupId, String personId, String persistedFaceId, RequestOptions requestOptions) {
        return this.asyncClient
                .deleteFaceWithResponse(largePersonGroupId, personId, persistedFaceId, requestOptions)
                .block();
    }

    /**
     * Retrieve information about a persisted face (specified by persistedFaceId, personId and its belonging
     * largePersonGroupId).
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getFaceWithResponse(
            String largePersonGroupId, String personId, String persistedFaceId, RequestOptions requestOptions) {
        return this.asyncClient
                .getFaceWithResponse(largePersonGroupId, personId, persistedFaceId, requestOptions)
                .block();
    }

    /**
     * Update a person persisted face's userData field.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     userData: String
     * }
     * }</pre>
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param persistedFaceId Id referencing a particular persistedFaceId of an existing face.
     * @param body Request body for updating persisted face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateFaceWithResponse(
            String largePersonGroupId,
            String personId,
            String persistedFaceId,
            BinaryData body,
            RequestOptions requestOptions) {
        return this.asyncClient
                .updateFaceWithResponse(largePersonGroupId, personId, persistedFaceId, body, requestOptions)
                .block();
    }

    /**
     * Add a face to a person into a large person group for face identification or verification. To deal with an image
     * contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     * persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be
     * stored on server until [LargePersonGroup PersonFace -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/deleteface), [LargePersonGroup Person
     * - Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/delete) or [LargePersonGroup -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroup/delete) is called. &lt;br /&gt; Note
     * persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl). * Higher face image quality means better
     * recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100
     * pixels between eyes) or bigger. * Each person entry can hold up to 248 faces. * JPEG, PNG, GIF (the first frame),
     * and BMP format are supported. The allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should
     * contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is
     * not returned from [Face - Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no
     * guarantee to detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels),
     * large head-pose, or large occlusions will cause failures. * Adding/deleting faces to/from a same person will be
     * processed sequentially. Adding/deleting faces to/from different persons are processed in parallel. * The minimum
     * detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher
     * than 1920x1080 pixels will need a proportionally larger minimum face size. * Different 'detectionModel' values
     * can be provided. To use and compare different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User-specified data about the face for any purpose. The maximum length is 1KB.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image. In the form of "," separated string.</td></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     url: String
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param imageUrl A JSON document with a URL pointing to the image that is to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addFaceFromUrlWithResponse(
            String largePersonGroupId, String personId, BinaryData imageUrl, RequestOptions requestOptions) {
        return this.asyncClient
                .addFaceFromUrlWithResponse(largePersonGroupId, personId, imageUrl, requestOptions)
                .block();
    }

    /**
     * Add a face to a person into a large person group for face identification or verification. To deal with an image
     * contains multiple faces, input face can be specified as an image with a targetFace rectangle. It returns a
     * persistedFaceId representing the added face. No image will be stored. Only the extracted face feature will be
     * stored on server until [LargePersonGroup PersonFace -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/deleteface), [LargePersonGroup Person
     * - Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/delete) or [LargePersonGroup -
     * Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroup/delete) is called. &lt;br /&gt; Note
     * persistedFaceId is different from faceId generated by [Face -
     * Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl). * Higher face image quality means better
     * recognition precision. Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100
     * pixels between eyes) or bigger. * Each person entry can hold up to 248 faces. * JPEG, PNG, GIF (the first frame),
     * and BMP format are supported. The allowed image file size is from 1KB to 6MB. * "targetFace" rectangle should
     * contain one face. Zero or multiple faces will be regarded as an error. If the provided "targetFace" rectangle is
     * not returned from [Face - Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl), there’s no
     * guarantee to detect and add the face successfully. * Out of detectable face size (36x36 - 4096x4096 pixels),
     * large head-pose, or large occlusions will cause failures. * Adding/deleting faces to/from a same person will be
     * processed sequentially. Adding/deleting faces to/from different persons are processed in parallel. * The minimum
     * detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels. Images with dimensions higher
     * than 1920x1080 pixels will need a proportionally larger minimum face size. * Different 'detectionModel' values
     * can be provided. To use and compare different detection models, please refer to [How to specify a detection
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>userData</td><td>String</td><td>No</td><td>User-specified data about the face for any purpose. The maximum length is 1KB.</td></tr>
     *     <tr><td>targetFace</td><td>String</td><td>No</td><td>A face rectangle to specify the target face to be added to a person in the format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more than one face in the image, targetFace is required to specify which face to add. No targetFace means there is only one face detected in the entire image. In the form of "," separated string.</td></tr>
     *     <tr><td>detectionModel</td><td>String</td><td>No</td><td>Name of detection model. Detection model is used to detect faces in the submitted image. A detection model name can be provided when performing Face - Detect or (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is 'detection_01', if another model is needed, please explicitly specify it.</td></tr>
     * </table>
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>Content-Length</td><td>long</td><td>Yes</td><td>The contentLength parameter</td></tr>
     * </table>
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * Flux<ByteBuffer>
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     persistedFaceId: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param personId Id referencing a particular person.
     * @param image An image stream.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return personFace object along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> addFaceFromStreamWithResponse(
            String largePersonGroupId, String personId, BinaryData image, RequestOptions requestOptions) {
        return this.asyncClient
                .addFaceFromStreamWithResponse(largePersonGroupId, personId, image, requestOptions)
                .block();
    }
}
